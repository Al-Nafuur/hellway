------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 07	   CAR_SIZE   =	7
     11  f000		       00 07	   TRAFFIC_LINE_COUNT =	7
     12  f000		       00 0a	   CAR_0_Y    =	10
     13  f000							;16 bit precision
     14  f000							;640 max speed!
     15  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     16  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     17  f000		       00 00	   CAR_MIN_SPEED_H =	0
     18  f000		       00 00	   CAR_MIN_SPEED_L =	0
     19  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     20  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     21  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     22  f000		       00 01	   ACCELERATE_SPEED =	1
     23  f000		       00 04	   BREAK_SPEED =	4
     24  f000							;For now, will use in aal rows until figure out if make it dynamic or not.
     25  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000
     26  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     27  f000
     28  f000		       00 34	   TRAFFIC_COLOR =	$34
     29  f000
     30  f000							;memory	
     31  f000		       00 80	   Car0Line   =	$80
     32  f000
     33  f000		       00 81	   GRP0Cache  =	$81
     34  f000		       00 82	   PF0Cache   =	$82
     35  f000		       00 83	   PF1Cache   =	$83
     36  f000		       00 84	   PF2Cache   =	$84
     37  f000
     38  f000		       00 86	   FrameCount0 =	$86	;
     39  f000		       00 87	   FrameCount1 =	$87	;
     40  f000
     41  f000		       00 88	   Car0SpeedL =	$88
     42  f000		       00 89	   Car0SpeedH =	$89
     43  f000
     44  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     45  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     46  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     47  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     48  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     49  f000		       00 a4	   TrafficOffset5 =	$A4	; Traffic 1 $A5 $A6 (24 bit) $A7 is cache
     50  f000		       00 a8	   TrafficOffset6 =	$A8	; Traffic 1 $A5 $A6 (24 bit) $A7 is cache
     51  f000
     52  f000							;Temporary variables, multiple uses
     53  f000		       00 b0	   Tmp0       =	$B0
     54  f000		       00 b1	   Tmp1       =	$B1
     55  f000		       00 b2	   Tmp2       =	$B2
     56  f000
     57  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     58  f000
     59  f000							;generic start up stuff, put zero in all...
     60  f000				   Start
     61  f000		       78		      SEI
     62  f001		       d8		      CLD
     63  f002		       a2 ff		      LDX	#$FF
     64  f004		       9a		      TXS
     65  f005		       a9 00		      LDA	#0
     66  f007				   ClearMem
     67  f007		       95 00		      STA	0,X
     68  f009		       ca		      DEX
     69  f00a		       d0 fb		      BNE	ClearMem
     70  f00c
     71  f00c							;Setting some variables...
     72  f00c
     73  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     74  f00e		       85 06		      STA	COLUP0
     75  f010
     76  f010		       a9 85		      LDA	#PLAYER_2_COLOR
     77  f012		       85 07		      STA	COLUP1
     78  f014
     79  f014		       a9 31		      LDA	#%00110001
     80  f016		       85 0a		      STA	CTRLPF
     81  f018
     82  f018							;Loop ?
     83  f018		       a9 20		      LDA	#$20
     84  f01a		       85 96		      STA	TrafficOffset1 + 2
     85  f01c		       a9 40		      LDA	#$40
     86  f01e		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
     87  f020		       a9 60		      LDA	#$60
     88  f022		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
     89  f024		       a9 80		      LDA	#$80
     90  f026		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
     91  f028		       a9 a0		      LDA	#$A0
     92  f02a		       85 a6		      STA	TrafficOffset5 + 2	;Initial Y Position
     93  f02c		       a9 c0		      LDA	#$C0
     94  f02e		       85 aa		      STA	TrafficOffset6 + 2	;Initial Y Position
     95  f030
     96  f030		       ad 13 ff 	      LDA	TrafficSpeeds + 6 * 2	; Same as the line he is in.
     97  f033		       85 88		      STA	Car0SpeedL
     98  f035
     99  f035							;Traffic colour
    100  f035		       a9 34		      LDA	#TRAFFIC_COLOR
    101  f037		       85 08		      STA	COLUPF
    102  f039
    103  f039
    104  f039							;VSYNC time
    105  f039				   MainLoop
    106  f039		       a9 02		      LDA	#2
    107  f03b		       85 00		      STA	VSYNC
    108  f03d		       85 02		      STA	WSYNC
    109  f03f		       85 02		      STA	WSYNC
    110  f041							;Cool, can put code here! It removed the black line on top
    111  f041							;Make Objects move in the X axys
    112  f041		       85 2a		      STA	HMOVE	;2
    113  f043							;This must be done after a WSync, otherwise it is impossible to predict the X position
    114  f043		       a5 c0		      LDA	GameStatus	;3
    115  f045		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    116  f047		       f0 13		      BEQ	DoNotSetPlayerX	;3
    117  f049							;Do something better with this 32 cycles
      0  f049					      SLEEP	33	; Maybe fine position with hmove...
      1  f049				   .CYCLES    SET	33
      2  f049
      3  f049				  -	      IF	.CYCLES < 2
      4  f049				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f049				  -	      ERR
      6  f049					      ENDIF
      7  f049
      8  f049					      IF	.CYCLES & 1
      9  f049				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f049				  -	      nop	0
     11  f049					      ELSE
     12  f049		       24 00		      bit	VSYNC
     13  f04b					      ENDIF
     14  f04b				   .CYCLES    SET	.CYCLES - 3
     15  f04b					      ENDIF
     16  f04b
     17  f04b					      REPEAT	.CYCLES / 2
     18  f04b		       ea		      nop
     17  f04b					      REPEND
     18  f04c		       ea		      nop
     17  f04c					      REPEND
     18  f04d		       ea		      nop
     17  f04d					      REPEND
     18  f04e		       ea		      nop
     17  f04e					      REPEND
     18  f04f		       ea		      nop
     17  f04f					      REPEND
     18  f050		       ea		      nop
     17  f050					      REPEND
     18  f051		       ea		      nop
     17  f051					      REPEND
     18  f052		       ea		      nop
     17  f052					      REPEND
     18  f053		       ea		      nop
     17  f053					      REPEND
     18  f054		       ea		      nop
     17  f054					      REPEND
     18  f055		       ea		      nop
     17  f055					      REPEND
     18  f056		       ea		      nop
     17  f056					      REPEND
     18  f057		       ea		      nop
     17  f057					      REPEND
     18  f058		       ea		      nop
     17  f058					      REPEND
     18  f059		       ea		      nop
     19  f05a					      REPEND
    119  f05a		       85 10		      STA	RESP0	;3
    120  f05c
    121  f05c				   DoNotSetPlayerX
    122  f05c
    123  f05c		       85 02		      STA	WSYNC
    124  f05e		       a9 2b		      LDA	#43
    125  f060		       8d 96 02 	      STA	TIM64T
    126  f063		       a9 00		      LDA	#0
    127  f065		       85 00		      STA	VSYNC
    128  f067
    129  f067							;Read Fire Button before, will make it start the game for now.
    130  f067		       a5 0c		      LDA	INPT4
    131  f069		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    132  f06b		       a5 c0		      LDA	GameStatus
    133  f06d		       09 80		      ORA	#%10000000
    134  f06f		       85 c0		      STA	GameStatus
    135  f071				   SkipGameStart
    136  f071
    137  f071				   CountFrame
    138  f071		       e6 86		      INC	FrameCount0	; Used to alternate lines
    139  f073		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    140  f075		       e6 87		      INC	FrameCount1	; Still not used
    141  f077				   SkipIncFC1
    142  f077
    143  f077							;Does not update the game if not running
    144  f077		       a5 c0		      LDA	GameStatus	;3
    145  f079		       49 80		      EOR	#%10000000	;2 game is running...
    146  f07b		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    147  f07d		       4c 32 f1 	      JMP	SkipUpdateLogic
    148  f080
    149  f080				   ContinueWithGameLogic
    150  f080
    151  f080							; for left and right, we're gonna 
    152  f080							; set the horizontal speed, and then do
    153  f080							; a single HMOVE.  We'll use X to hold the
    154  f080							; horizontal speed, then store it in the 
    155  f080							; appropriate register
    156  f080
    157  f080							;assum horiz speed will be zero
    158  f080
    159  f080							;Begin read dpad
    160  f080		       a2 00		      LDX	#0
    161  f082
    162  f082		       a9 40		      LDA	#%01000000	;Left
    163  f084		       2c 80 02 	      BIT	SWCHA
    164  f087		       d0 02		      BNE	SkipMoveLeft
    165  f089		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    166  f08b				   SkipMoveLeft
    167  f08b
    168  f08b		       a9 80		      LDA	#%10000000	;Right
    169  f08d		       2c 80 02 	      BIT	SWCHA
    170  f090		       d0 02		      BNE	SkipMoveRight
    171  f092		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    172  f094				   SkipMoveRight
    173  f094
    174  f094		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    175  f096
    176  f096
    177  f096							;Acelerates / breaks the car
    178  f096		       a9 10		      LDA	#%00010000	;UP in controller
    179  f098		       2c 80 02 	      BIT	SWCHA
    180  f09b		       d0 21		      BNE	SkipAccelerate
    181  f09d
    182  f09d							;Adds speed
    183  f09d		       18		      CLC
    184  f09e		       a5 88		      LDA	Car0SpeedL
    185  f0a0		       69 01		      ADC	#ACCELERATE_SPEED
    186  f0a2		       85 88		      STA	Car0SpeedL
    187  f0a4		       a5 89		      LDA	Car0SpeedH
    188  f0a6		       69 00		      ADC	#0
    189  f0a8		       85 89		      STA	Car0SpeedH
    190  f0aa
    191  f0aa							;Checks if already max
    192  f0aa		       c9 02		      CMP	#CAR_MAX_SPEED_H
    193  f0ac		       90 10		      BCC	SkipAccelerate	; less than my max speed
    194  f0ae		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    195  f0b0							;High bit is max, compare the low
    196  f0b0		       a5 88		      LDA	Car0SpeedL
    197  f0b2		       c9 80		      CMP	#CAR_MAX_SPEED_L
    198  f0b4		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    199  f0b6							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    200  f0b6
    201  f0b6				   ResetToMaxSpeed		; Speed is more, or is already max
    202  f0b6		       a9 02		      LDA	#CAR_MAX_SPEED_H
    203  f0b8		       85 89		      STA	Car0SpeedH
    204  f0ba		       a9 80		      LDA	#CAR_MAX_SPEED_L
    205  f0bc		       85 88		      STA	Car0SpeedL
    206  f0be
    207  f0be				   SkipAccelerate
    208  f0be
    209  f0be				   Break
    210  f0be		       a9 20		      LDA	#%00100000	;Down in controller
    211  f0c0		       2c 80 02 	      BIT	SWCHA
    212  f0c3		       d0 26		      BNE	SkipBreak
    213  f0c5
    214  f0c5							;Decrease speed
    215  f0c5		       38		      SEC
    216  f0c6		       a5 88		      LDA	Car0SpeedL
    217  f0c8		       e9 04		      SBC	#BREAK_SPEED
    218  f0ca		       85 88		      STA	Car0SpeedL
    219  f0cc		       a5 89		      LDA	Car0SpeedH
    220  f0ce		       e9 00		      SBC	#0
    221  f0d0		       85 89		      STA	Car0SpeedH
    222  f0d2
    223  f0d2							;Checks if is min speed
    224  f0d2		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    225  f0d4		       c9 00		      CMP	#CAR_MIN_SPEED_H
    226  f0d6		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    227  f0d8		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    228  f0da
    229  f0da				   CompareLBreakSpeed
    230  f0da		       a5 88		      LDA	Car0SpeedL
    231  f0dc		       c9 00		      CMP	#CAR_MIN_SPEED_L
    232  f0de		       90 03		      BCC	ResetMinSpeed	; Less than memory
    233  f0e0		       4c eb f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    234  f0e3
    235  f0e3				   ResetMinSpeed
    236  f0e3		       a9 00		      LDA	#CAR_MIN_SPEED_H
    237  f0e5		       85 89		      STA	Car0SpeedH
    238  f0e7		       a9 00		      LDA	#CAR_MIN_SPEED_L
    239  f0e9		       85 88		      STA	Car0SpeedL
    240  f0eb				   SkipBreak
    241  f0eb
    242  f0eb							;Updates all offsets 24 bits
    243  f0eb		       a2 00		      LDX	#0	; Memory Offset 24 bit
    244  f0ed		       a0 00		      LDY	#0	; Line Speeds 16 bits
    245  f0ef				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    246  f0ef		       38		      SEC
    247  f0f0		       a5 88		      LDA	Car0SpeedL
    248  f0f2		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    249  f0f5		       85 b0		      STA	Tmp0
    250  f0f7		       c8		      INY
    251  f0f8		       a5 89		      LDA	Car0SpeedH
    252  f0fa		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    253  f0fd		       85 b1		      STA	Tmp1
    254  f0ff		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    255  f101		       e9 00		      SBC	#0
    256  f103		       85 b2		      STA	Tmp2
    257  f105
    258  f105
    259  f105							;Adds the result
    260  f105		       18		      CLC
    261  f106		       a5 b0		      LDA	Tmp0
    262  f108		       75 90		      ADC	TrafficOffset0,X
    263  f10a		       95 90		      STA	TrafficOffset0,X
    264  f10c		       e8		      INX
    265  f10d		       a5 b1		      LDA	Tmp1
    266  f10f		       75 90		      ADC	TrafficOffset0,X
    267  f111		       95 90		      STA	TrafficOffset0,X
    268  f113		       e8		      INX
    269  f114		       a5 b2		      LDA	Tmp2	; Carry
    270  f116		       75 90		      ADC	TrafficOffset0,X
    271  f118		       95 90		      STA	TrafficOffset0,X
    272  f11a		       e8		      INX
    273  f11b		       38		      SEC
    274  f11c		       69 00		      ADC	#0	;Increment by one
    275  f11e		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    276  f120
    277  f120
    278  f120				   PrepareNextUpdateLoop
    279  f120		       c8		      INY
    280  f121		       e8		      INX
    281  f122		       e0 1c		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    282  f124		       d0 c9		      BNE	UpdateOffsets
    283  f126
    284  f126				   TestCollision		;
    285  f126							; see if car0 and playfield collide, and change the background color if so
    286  f126		       a9 80		      LDA	#%10000000
    287  f128		       24 02		      BIT	CXP0FB
    288  f12a		       f0 04		      BEQ	NoCollision	;skip if not hitting...
    289  f12c		       a5 86		      LDA	FrameCount0	;must be a hit! Change rand color bg
    290  f12e		       85 09		      STA	COLUBK	;and store as the bgcolor
    291  f130				   NoCollision
    292  f130		       85 2c		      STA	CXCLR	;reset the collision detection for next frame
    293  f132
    294  f132				   SkipUpdateLogic
    295  f132
    296  f132							; After here we are going to update the screen, No more heavy code
    297  f132				   WaitForVblankEnd
    298  f132		       ad 84 02 	      LDA	INTIM
    299  f135		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    300  f137
    301  f137							;50 cycles worse case before the VSync 
    302  f137		       a0 3f		      LDY	#SCREEN_SIZE - 1	;#63 ; 	
    303  f139
    304  f139		       85 02		      STA	WSYNC
    305  f13b
    306  f13b		       a9 01		      LDA	#1
    307  f13d		       85 01		      STA	VBLANK
    308  f13f
    309  f13f
    310  f13f							;main scanline loop...
    311  f13f				   ScanLoop
    312  f13f		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    313  f141
    314  f141							;Start of next line!			
    315  f141				   DrawCache		;24 Is the last line going to the top of the next frame?
    316  f141
    317  f141							; LDA #TRAFFIC_COLOR ;2
    318  f141							; STA COLUPF ;3
    319  f141
    320  f141		       a5 82		      LDA	PF0Cache	;3
    321  f143		       85 0d		      STA	PF0	;3
    322  f145
    323  f145		       a5 81		      LDA	GRP0Cache	;3 ;buffer was set during last scanline
    324  f147		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    325  f149
    326  f149		       a5 83		      LDA	PF1Cache	;3
    327  f14b		       85 0e		      STA	PF1	;3
    328  f14d
    329  f14d		       a5 84		      LDA	PF2Cache	;3
    330  f14f		       85 0f		      STA	PF2	;3
    331  f151
    332  f151				   DrawTraffic0 		; 16 max, 14 min, traffic 0 is the border
    333  f151		       98		      TYA		;2
    334  f152		       18		      CLC		;2
    335  f153		       65 91		      ADC	TrafficOffset0 + 1	; 3
    336  f155		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    337  f157		       f0 05		      BEQ	EraseTraffic0	; 2
    338  f159		       a9 70		      LDA	#%01110000	; 2
    339  f15b		       4c 60 f1 	      JMP	StoreTraffic0	;3
    340  f15e				   EraseTraffic0
    341  f15e		       a9 00		      LDA	#0	; 2
    342  f160				   StoreTraffic0
    343  f160		       85 82		      STA	PF0Cache	;3
    344  f162				   SkipDrawTraffic0
    345  f162
    346  f162							; LDA #BACKGROUND_COLOR ;2
    347  f162							; STA COLUPF ;3
    348  f162
    349  f162
    350  f162				   BeginDrawCar0Block		;20 is the max, since if draw, does not check active
    351  f162		       a6 80		      LDX	Car0Line	;3 check the visible player line...
    352  f164		       f0 0a		      BEQ	FinishDrawCar0	;2	skip the drawing if its zero...
    353  f166				   DrawCar0
    354  f166		       bd ff fe 	      LDA	CarSprite-1,X	;4 (no page cross) otherwise, load the correct line from CarSprite
    355  f169							;section below... it's off by 1 though, since at zero
    356  f169							;we stop drawing
    357  f169		       85 81		      STA	GRP0Cache	;3	;put that line as player graphic for the next line
    358  f16b		       c6 80		      DEC	Car0Line	;5	and decrement the line count
    359  f16d							;STA WSYNC
    360  f16d		       4c 78 f1 	      JMP	SkipActivateCar0	;3 save some cpu time
    361  f170				   FinishDrawCar0
    362  f170
    363  f170				   CheckActivateCar0		;9 max
    364  f170		       c0 0a		      CPY	#CAR_0_Y	;2
    365  f172		       d0 04		      BNE	SkipActivateCar0	;2
    366  f174		       a9 07		      LDA	#CAR_SIZE	;2
    367  f176		       85 80		      STA	Car0Line	;3
    368  f178							;STA WSYNC
    369  f178				   SkipActivateCar0		;EndDrawCar0Block
    370  f178
    371  f178							;STA WSYNC ; 3 71 max
    372  f178
    373  f178		       98		      TYA		;2
    374  f179		       45 86		      EOR	FrameCount0	;3
    375  f17b		       29 01		      AND	#%00000001	;2
    376  f17d		       f0 5d		      BEQ	DrawTraffic4	;2,4
    377  f17f							;NOP
    378  f17f							; LDA #TRAFFIC_COLOR ;2
    379  f17f							; STA COLUPF ;3
    380  f17f
    381  f17f							;Will set the initial value for PF1Cache
    382  f17f				   DrawTraffic1 		; 
    383  f17f		       98		      TYA		; 2
    384  f180		       18		      CLC		; 2 
    385  f181		       65 95		      ADC	TrafficOffset1 + 1	;3
    386  f183		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    387  f185		       b0 05		      BCS	EorOffsetWithCarry	; 4 max if branch max, 2 otherwise
    388  f187		       45 96		      EOR	TrafficOffset1 + 2	; 2
    389  f189		       4c 8e f1 	      JMP	AfterEorOffsetWithCarry	; 3
    390  f18c				   EorOffsetWithCarry
    391  f18c		       45 97		      EOR	TrafficOffset1 + 3	; 3
    392  f18e				   AfterEorOffsetWithCarry		;18
    393  f18e		       aa		      TAX		;2
    394  f18f		       bd 00 fe 	      LDA	AesTable,X	; 4
    395  f192		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    396  f194		       b0 05		      BCS	EraseTraffic1	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    397  f196		       a9 c0		      LDA	#%11000000	;2
    398  f198		       4c 9d f1 	      JMP	StoreTraffic1	;3
    399  f19b				   EraseTraffic1
    400  f19b		       a9 00		      LDA	#0	;2
    401  f19d				   StoreTraffic1
    402  f19d		       85 83		      STA	PF1Cache	;3
    403  f19f				   FinishDrawTraffic1
    404  f19f							;36 worse, 35 best
    405  f19f
    406  f19f				   DrawTraffic2 		;
    407  f19f		       98		      TYA		; 2
    408  f1a0		       18		      CLC		; 2 
    409  f1a1		       65 99		      ADC	TrafficOffset2 + 1	;3
    410  f1a3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    411  f1a5		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    412  f1a7		       45 9a		      EOR	TrafficOffset2 + 2	; 2
    413  f1a9		       4c ae f1 	      JMP	AfterEorOffsetWithCarry2	; 3
    414  f1ac				   EorOffsetWithCarry2
    415  f1ac		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    416  f1ae				   AfterEorOffsetWithCarry2		;18
    417  f1ae		       aa		      TAX		;2
    418  f1af		       bd 00 fe 	      LDA	AesTable,X	; 4
    419  f1b2		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    420  f1b4		       b0 06		      BCS	FinishDrawTraffic2	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    421  f1b6		       a5 83		      LDA	PF1Cache	;3
    422  f1b8		       09 18		      ORA	#%00011000	;2
    423  f1ba		       85 83		      STA	PF1Cache	;3
    424  f1bc				   FinishDrawTraffic2
    425  f1bc							;36 cyles worse case!
    426  f1bc
    427  f1bc							;STA WSYNC ;65 / 137
    428  f1bc
    429  f1bc				   DrawTraffic3 		; PF2 is shared with odd and even lines, needs specific logic to erase
    430  f1bc		       98		      TYA		; 2
    431  f1bd		       18		      CLC		; 2 
    432  f1be		       65 9d		      ADC	TrafficOffset3 + 1	;3
    433  f1c0		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    434  f1c2		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    435  f1c4		       45 9e		      EOR	TrafficOffset3 + 2	; 2
    436  f1c6		       4c cb f1 	      JMP	AfterEorOffsetWithCarry3	; 3
    437  f1c9				   EorOffsetWithCarry3
    438  f1c9		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    439  f1cb				   AfterEorOffsetWithCarry3		; 18
    440  f1cb		       aa		      TAX		;2
    441  f1cc		       bd 00 fe 	      LDA	AesTable,X	; 4
    442  f1cf		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    443  f1d1		       b0 06		      BCS	FinishDrawTraffic3	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    444  f1d3		       a5 83		      LDA	PF1Cache	;3
    445  f1d5		       09 03		      ORA	#%00000011	;2
    446  f1d7		       85 83		      STA	PF1Cache	;3
    447  f1d9				   FinishDrawTraffic3
    448  f1d9							;36 cyles worse case!
    449  f1d9
    450  f1d9		       4c 36 f2 	      JMP	WhileScanLoop	; 3
    451  f1dc
    452  f1dc				   DrawTraffic4 		;
    453  f1dc		       98		      TYA		; 2
    454  f1dd		       18		      CLC		; 2 
    455  f1de		       65 a1		      ADC	TrafficOffset4 + 1	;3
    456  f1e0		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    457  f1e2		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    458  f1e4		       45 a2		      EOR	TrafficOffset4 + 2	; 2
    459  f1e6		       4c eb f1 	      JMP	AfterEorOffsetWithCarry4	; 3
    460  f1e9				   EorOffsetWithCarry4
    461  f1e9		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    462  f1eb				   AfterEorOffsetWithCarry4		;18
    463  f1eb		       aa		      TAX		;2
    464  f1ec		       bd 00 fe 	      LDA	AesTable,X	; 4
    465  f1ef		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    466  f1f1		       b0 05		      BCS	EraseTraffic4	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    467  f1f3		       a9 06		      LDA	#%00000110	;2
    468  f1f5		       4c fa f1 	      JMP	StoreTraffic4	;3
    469  f1f8				   EraseTraffic4
    470  f1f8		       a9 00		      LDA	#0	;2
    471  f1fa				   StoreTraffic4
    472  f1fa		       85 84		      STA	PF2Cache	;3
    473  f1fc				   FinishDrawTraffic4
    474  f1fc							;36 max
    475  f1fc
    476  f1fc
    477  f1fc							;SLEEP 80
    478  f1fc				   DrawTraffic5 		;
    479  f1fc		       98		      TYA		; 2
    480  f1fd		       18		      CLC		; 2 
    481  f1fe		       65 a5		      ADC	TrafficOffset5 + 1	;3
    482  f200		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    483  f202		       b0 05		      BCS	EorOffsetWithCarry5	; 4 max if branch max, 2 otherwise
    484  f204		       45 a6		      EOR	TrafficOffset5 + 2	; 2
    485  f206		       4c 0b f2 	      JMP	AfterEorOffsetWithCarry5	; 3
    486  f209				   EorOffsetWithCarry5
    487  f209		       45 a7		      EOR	TrafficOffset5 + 3	; 3
    488  f20b				   AfterEorOffsetWithCarry5		;18
    489  f20b		       aa		      TAX		;2
    490  f20c		       bd 00 fe 	      LDA	AesTable,X	; 4
    491  f20f		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    492  f211		       b0 06		      BCS	FinishDrawTraffic5	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    493  f213		       a5 84		      LDA	PF2Cache	;3
    494  f215		       09 30		      ORA	#%00110000	;2
    495  f217		       85 84		      STA	PF2Cache	;3	
    496  f219				   FinishDrawTraffic5
    497  f219
    498  f219				   DrawTraffic6 		;
    499  f219		       98		      TYA		; 2
    500  f21a		       18		      CLC		; 2 
    501  f21b		       65 a9		      ADC	TrafficOffset6 + 1	;3
    502  f21d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    503  f21f		       b0 05		      BCS	EorOffsetWithCarry6	; 4 max if branch max, 2 otherwise
    504  f221		       45 aa		      EOR	TrafficOffset6 + 2	; 2
    505  f223		       4c 28 f2 	      JMP	AfterEorOffsetWithCarry6	; 3
    506  f226				   EorOffsetWithCarry6
    507  f226		       45 ab		      EOR	TrafficOffset6 + 3	; 3
    508  f228				   AfterEorOffsetWithCarry6		;18
    509  f228		       aa		      TAX		;2
    510  f229		       bd 00 fe 	      LDA	AesTable,X	; 4
    511  f22c		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    512  f22e		       b0 06		      BCS	FinishDrawTraffic6	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    513  f230		       a5 84		      LDA	PF2Cache	;3
    514  f232		       09 80		      ORA	#%10000000	;2
    515  f234		       85 84		      STA	PF2Cache	;3	
    516  f236				   FinishDrawTraffic6
    517  f236
    518  f236							;36 max	
    519  f236							;SLEEP 36
    520  f236
    521  f236
    522  f236							;STA WSYNC ;65 / 202 of 222
    523  f236
    524  f236				   WhileScanLoop
    525  f236		       88		      DEY		;2
    526  f237		       30 03		      BMI	FinishScanLoop	;2 or 3 ;two big Breach	
    527  f239		       4c 3f f1 	      JMP	ScanLoop	;3
    528  f23c				   FinishScanLoop		; 7 209 of 222
    529  f23c
    530  f23c
    531  f23c				   PrepareOverscan
    532  f23c		       a9 02		      LDA	#2
    533  f23e		       85 02		      STA	WSYNC
    534  f240		       85 01		      STA	VBLANK
    535  f242
    536  f242		       a9 25		      LDA	#37
    537  f244		       8d 96 02 	      STA	TIM64T
    538  f247							;LDA #0
    539  f247							;STA VSYNC Is it needed? Why is this here, I don't remember		
    540  f247
    541  f247							;Do more logic
    542  f247
    543  f247				   OverScanWait
    544  f247		       ad 84 02 	      LDA	INTIM
    545  f24a		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    546  f24c		       4c 39 f0 	      JMP	MainLoop
    547  f24f
    548  f24f
    549  fe00					      org	$FE00
    550  fe00				   AesTable
    551  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    552  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    553  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    554  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    555  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    556  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    557  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    558  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    559  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    560  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    561  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    562  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    563  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    564  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    565  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    566  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    567  ff00
    568  ff00							; From FF00 to FFFB (122 bytes) to use here
    569  ff00
    570  ff00				   CarSprite		; Upside down
    571  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    572  ff01		       ff		      .byte.b	#%11111111
    573  ff02		       24		      .byte.b	#%00100100
    574  ff03		       bd		      .byte.b	#%10111101
    575  ff04		       3c		      .byte.b	#%00111100
    576  ff05		       bd		      .byte.b	#%10111101
    577  ff06		       3c		      .byte.b	#%00111100
    578  ff07
    579  ff07
    580  ff07				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    581  ff07		       00		      .byte.b	#$00	;  Trafic0 L
    582  ff08		       00		      .byte.b	#$00	;  Trafic0 H
    583  ff09		       0a		      .byte.b	#$0A	;  Trafic1 L
    584  ff0a		       01		      .byte.b	#$01	;  Trafic1 H
    585  ff0b		       e6		      .byte.b	#$E6	;  Trafic2 L
    586  ff0c		       00		      .byte.b	#$00	;  Trafic2 H
    587  ff0d		       c2		      .byte.b	#$C2	;  Trafic3 L
    588  ff0e		       00		      .byte.b	#$00	;  Trafic3 H
    589  ff0f		       9e		      .byte.b	#$9E	;  Trafic4 L
    590  ff10		       00		      .byte.b	#$00	;  Trafic4 H
    591  ff11		       7a		      .byte.b	#$7A	;  Trafic5 L
    592  ff12		       00		      .byte.b	#$00	;  Trafic5 H
    593  ff13		       56		      .byte.b	#$56	;  Trafic6 L
    594  ff14		       00		      .byte.b	#$00	;  Trafic6 H
    595  ff15
    596  ff15
    597  fffc					      org	$FFFC
    598  fffc		       00 f0		      .word.w	Start
    599  fffe		       00 f0		      .word.w	Start
