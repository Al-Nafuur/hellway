------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 88	   ParallaxMode =	$88
    111  f000
    112  f000		       00 8c	   FrameCount0 =	$8C	;
    113  f000		       00 8d	   FrameCount1 =	$8D	;
    114  f000
    115  f000		       00 8e	   Player0SpeedL =	$8E
    116  f000		       00 8f	   Player0SpeedH =	$8F
    117  f000
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    123  f000
    124  f000		       00 a4	   CheckpointBcd0 =	$A4
    125  f000		       00 a5	   CheckpointBcd1 =	$A5
    126  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    127  f000		       00 a7	   CarSpritePointerL =	$A7
    128  f000		       00 a8	   CarSpritePointerH =	$A8
    129  f000		       00 a9	   CurrentCarId =	$A9
    130  f000		       00 aa	   AccelerateBuffer =	$AA	; Change speed on buffer overflow.
    131  f000		       00 ab	   TextSide   =	$AB
    132  f000		       00 ac	   TextFlickerMode =	$AC
    133  f000		       00 ad	   Gear       =	$AD
    134  f000
    135  f000							;Temporary variables, multiple uses
    136  f000		       00 b0	   Tmp0       =	$B0
    137  f000		       00 b1	   Tmp1       =	$B1
    138  f000		       00 b2	   Tmp2       =	$B2
    139  f000		       00 b3	   Tmp3       =	$B3
    140  f000
    141  f000		       00 b4	   ScoreBcd0  =	$B4
    142  f000		       00 b5	   ScoreBcd1  =	$B5
    143  f000		       00 b6	   ScoreBcd2  =	$B6
    144  f000		       00 b7	   ScoreBcd3  =	$B7
    145  f000
    146  f000		       00 b8	   CollisionCounter =	$B8
    147  f000		       00 b9	   Player0X   =	$B9
    148  f000		       00 ba	   CountdownTimer =	$BA
    149  f000		       00 bb	   Traffic0Msb =	$BB
    150  f000		       00 bc	   SwitchDebounceCounter =	$BC
    151  f000
    152  f000		       00 bd	   TimeBcd0   =	$BD
    153  f000		       00 be	   TimeBcd1   =	$BE
    154  f000		       00 bf	   TimeBcd2   =	$BF
    155  f000
    156  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    157  f000		       00 c1	   TrafficChance =	$C1
    158  f000		       00 c2	   CheckpointTime =	$C2
    159  f000		       00 c3	   TrafficColor =	$C3
    160  f000		       00 c4	   CurrentDifficulty =	$C4
    161  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    162  f000							;Bit 2 speed delta, Bit 3 random traffic 
    163  f000
    164  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    165  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    166  f000
    167  f000		       00 ca	   BorderType =	$CA
    168  f000
    169  f000		       00 cb	   HitCountBcd0 =	$CB
    170  f000		       00 cc	   HitCountBcd1 =	$CC
    171  f000
    172  f000		       00 cd	   GlideTimeBcd0 =	$CD
    173  f000		       00 ce	   GlideTimeBcd1 =	$CE
    174  f000
    175  f000		       00 cf	   OneSecondConter =	$CF
    176  f000
    177  f000		       00 d0	   ScoreD0    =	$D0
    178  f000		       00 d1	   ScoreD1    =	$D1
    179  f000		       00 d2	   ScoreD2    =	$D2
    180  f000		       00 d3	   ScoreD3    =	$D3
    181  f000		       00 d4	   ScoreD4    =	$D4
    182  f000		       00 d5	   ScoreFontColor =	$D5
    183  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    184  f000		       00 d7	   NextCheckpoint =	$D7
    185  f000
    186  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    187  f000		       00 f0	   ParallaxCache2 =	$F0	; to F7
    188  f000
    189  f000
    190  f000							;generic start up stuff, put zero in almost all...
    191  f000				   BeforeStart		;All variables that are kept on game reset or select
    192  f000		       a0 00		      LDY	#0
    193  f002		       84 bc		      STY	SwitchDebounceCounter
    194  f004		       84 c4		      STY	CurrentDifficulty
    195  f006		       84 c0		      STY	GameStatus
    196  f008		       a0 10		      LDY	#16
    197  f00a		       84 c5		      STY	GameMode
    198  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    199  f00e		       84 88		      STY	ParallaxMode
    200  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    201  f012		       84 a9		      STY	CurrentCarId
    202  f014
    203  f014				   Start
    204  f014		       a9 02		      LDA	#2
    205  f016		       85 00		      STA	VSYNC
    206  f018		       85 02		      STA	WSYNC
    207  f01a		       85 02		      STA	WSYNC
    208  f01c		       85 02		      STA	WSYNC
    209  f01e		       a9 00		      LDA	#0	;2
    210  f020		       85 00		      STA	VSYNC	;3
    211  f022
    212  f022		       78		      SEI
    213  f023		       d8		      CLD
    214  f024		       a2 ff		      LDX	#$FF
    215  f026		       9a		      TXS
    216  f027
    217  f027		       a2 80		      LDX	#128
    218  f029				   CleanMem
    219  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    220  f02b		       f0 16		      BEQ	SkipClean
    221  f02d		       e0 c5		      CPX	#GameMode
    222  f02f		       f0 12		      BEQ	SkipClean
    223  f031		       e0 88		      CPX	#ParallaxMode
    224  f033		       f0 0e		      BEQ	SkipClean
    225  f035		       e0 a9		      CPX	#CurrentCarId
    226  f037		       f0 0a		      BEQ	SkipClean
    227  f039		       e0 c4		      CPX	#CurrentDifficulty
    228  f03b		       f0 06		      BEQ	SkipClean
    229  f03d		       e0 c0		      CPX	#GameStatus
    230  f03f		       f0 02		      BEQ	SkipClean
    231  f041		       95 00		      STA	0,X
    232  f043				   SkipClean
    233  f043		       e8		      INX
    234  f044		       d0 e3		      BNE	CleanMem
    235  f046
    236  f046		       a2 04		      LDX	#04	; Skips graphics addresses (VSYNC, RSYNC, WSYNC, VBLANK)
    237  f048				   CleanTia
    238  f048		       95 00		      STA	0,X
    239  f04a		       e8		      INX
    240  f04b		       e0 40		      CPX	#64
    241  f04d		       d0 f9		      BNE	CleanTia
    242  f04f
    243  f04f		       a9 e9		      LDA	#233
    244  f051		       8d 96 02 	      STA	TIM64T	;3	
    245  f054
    246  f054							;Setting some variables...
    247  f054
    248  f054				   SettingTrafficOffsets		; Time sensitive with player H position
    249  f054		       85 02		      STA	WSYNC	;We will set player position
    250  f056		       20 00 f8 	      JSR	DefaultOffsets
    251  f059
    252  f059		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    253  f05c		       85 8e		      STA	Player0SpeedL
    254  f05e
      0  f05e					      SLEEP	11	;18
      1  f05e				   .CYCLES    SET	11
      2  f05e
      3  f05e				  -	      IF	.CYCLES < 2
      4  f05e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f05e				  -	      ERR
      6  f05e					      ENDIF
      7  f05e
      8  f05e					      IF	.CYCLES & 1
      9  f05e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f05e				  -	      nop	0
     11  f05e					      ELSE
     12  f05e		       24 00		      bit	VSYNC
     13  f060					      ENDIF
     14  f060				   .CYCLES    SET	.CYCLES - 3
     15  f060					      ENDIF
     16  f060
     17  f060					      REPEAT	.CYCLES / 2
     18  f060		       ea		      nop
     17  f060					      REPEND
     18  f061		       ea		      nop
     17  f061					      REPEND
     18  f062		       ea		      nop
     17  f062					      REPEND
     18  f063		       ea		      nop
     19  f064					      REPEND
    256  f064		       85 10		      STA	RESP0
    257  f066
    258  f066		       a2 00		      LDX	#0
    259  f068		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    260  f06b		       85 a6		      STA	StartSWCHB	; For game over
    261  f06d		       29 c0		      AND	#%11000000
    262  f06f		       f0 0b		      BEQ	CallConfigureDifficulty
    263  f071		       e8		      INX
    264  f072		       c9 80		      CMP	#%10000000
    265  f074		       f0 06		      BEQ	CallConfigureDifficulty
    266  f076		       e8		      INX
    267  f077		       c9 40		      CMP	#%01000000
    268  f079		       f0 01		      BEQ	CallConfigureDifficulty
    269  f07b		       e8		      INX
    270  f07c
    271  f07c				   CallConfigureDifficulty
    272  f07c		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    273  f07e		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    274  f080		       a5 c0		      LDA	GameStatus
    275  f082		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    276  f084				   NextCar
    277  f084		       a4 a9		      LDY	CurrentCarId
    278  f086		       c8		      INY
    279  f087		       98		      TYA
    280  f088		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    281  f08a		       85 a9		      STA	CurrentCarId
    282  f08c				   StoreCurrentDifficulty
    283  f08c		       86 c4		      STX	CurrentDifficulty
    284  f08e		       20 d5 f7 	      JSR	ConfigureDifficulty
    285  f091
    286  f091				   ConfigureCarSprite
    287  f091		       a4 a9		      LDY	CurrentCarId
    288  f093		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    289  f096		       85 a7		      STA	CarSpritePointerL
    290  f098		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    291  f09b		       85 a8		      STA	CarSpritePointerH
    292  f09d
    293  f09d				   SetGameNotRunning
    294  f09d		       a9 00		      LDA	#0
    295  f09f		       85 c0		      STA	GameStatus
    296  f0a1
    297  f0a1				   ConfigureOneSecondTimer
    298  f0a1		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    299  f0a3		       85 cf		      STA	OneSecondConter
    300  f0a5
    301  f0a5				   HPositioning
    302  f0a5		       85 02		      STA	WSYNC
    303  f0a7
    304  f0a7		       a9 30		      LDA	#%00110000	;2 Missile Size
    305  f0a9		       85 04		      STA	NUSIZ0	;3
    306  f0ab		       85 05		      STA	NUSIZ1	;3
    307  f0ad
    308  f0ad		       a9 35		      LDA	#PLAYER_0_X_START	;2
    309  f0af		       85 b9		      STA	Player0X	;3
    310  f0b1
    311  f0b1		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    312  f0b3		       85 ba		      STA	CountdownTimer	;3
    313  f0b5
    314  f0b5		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    315  f0b7		       85 d7		      STA	NextCheckpoint
    316  f0b9
    317  f0b9		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0bb					      SLEEP	11	;
      1  f0bb				   .CYCLES    SET	11
      2  f0bb
      3  f0bb				  -	      IF	.CYCLES < 2
      4  f0bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bb				  -	      ERR
      6  f0bb					      ENDIF
      7  f0bb
      8  f0bb					      IF	.CYCLES & 1
      9  f0bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bb				  -	      nop	0
     11  f0bb					      ELSE
     12  f0bb		       24 00		      bit	VSYNC
     13  f0bd					      ENDIF
     14  f0bd				   .CYCLES    SET	.CYCLES - 3
     15  f0bd					      ENDIF
     16  f0bd
     17  f0bd					      REPEAT	.CYCLES / 2
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     19  f0c1					      REPEND
    319  f0c1		       85 11		      STA	RESP1
      0  f0c3					      SLEEP	2	;
      1  f0c3				   .CYCLES    SET	2
      2  f0c3
      3  f0c3				  -	      IF	.CYCLES < 2
      4  f0c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c3				  -	      ERR
      6  f0c3					      ENDIF
      7  f0c3
      8  f0c3				  -	      IF	.CYCLES & 1
      9  f0c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c3				  -	      nop	0
     11  f0c3				  -	      ELSE
     12  f0c3				  -	      bit	VSYNC
     13  f0c3				  -	      ENDIF
     14  f0c3				  -.CYCLES    SET	.CYCLES - 3
     15  f0c3					      ENDIF
     16  f0c3
     17  f0c3					      REPEAT	.CYCLES / 2
     18  f0c3		       ea		      nop
     19  f0c4					      REPEND
    321  f0c4		       85 14		      STA	RESBL
      0  f0c6					      SLEEP	2	;
      1  f0c6				   .CYCLES    SET	2
      2  f0c6
      3  f0c6				  -	      IF	.CYCLES < 2
      4  f0c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c6				  -	      ERR
      6  f0c6					      ENDIF
      7  f0c6
      8  f0c6				  -	      IF	.CYCLES & 1
      9  f0c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c6				  -	      nop	0
     11  f0c6				  -	      ELSE
     12  f0c6				  -	      bit	VSYNC
     13  f0c6				  -	      ENDIF
     14  f0c6				  -.CYCLES    SET	.CYCLES - 3
     15  f0c6					      ENDIF
     16  f0c6
     17  f0c6					      REPEAT	.CYCLES / 2
     18  f0c6		       ea		      nop
     19  f0c7					      REPEND
    323  f0c7		       85 12		      STA	RESM0
      0  f0c9					      SLEEP	2
      1  f0c9				   .CYCLES    SET	2
      2  f0c9
      3  f0c9				  -	      IF	.CYCLES < 2
      4  f0c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c9				  -	      ERR
      6  f0c9					      ENDIF
      7  f0c9
      8  f0c9				  -	      IF	.CYCLES & 1
      9  f0c9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c9				  -	      nop	0
     11  f0c9				  -	      ELSE
     12  f0c9				  -	      bit	VSYNC
     13  f0c9				  -	      ENDIF
     14  f0c9				  -.CYCLES    SET	.CYCLES - 3
     15  f0c9					      ENDIF
     16  f0c9
     17  f0c9					      REPEAT	.CYCLES / 2
     18  f0c9		       ea		      nop
     19  f0ca					      REPEND
    325  f0ca		       85 13		      STA	RESM1
    326  f0cc
    327  f0cc		       a9 f0		      LDA	#$F0
    328  f0ce		       85 24		      STA	HMBL
    329  f0d0		       85 22		      STA	HMM0
    330  f0d2		       85 23		      STA	HMM1
    331  f0d4		       85 02		      STA	WSYNC
    332  f0d6		       85 2a		      STA	HMOVE
    333  f0d8		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    334  f0da		       85 2b		      STA	HMCLR
    335  f0dc
    336  f0dc				   WaitResetToEnd
    337  f0dc		       ad 84 02 	      LDA	INTIM
    338  f0df		       d0 fb		      BNE	WaitResetToEnd
    339  f0e1
    340  f0e1				   MainLoop
    341  f0e1		       a9 02		      LDA	#2
    342  f0e3		       85 00		      STA	VSYNC
    343  f0e5		       85 02		      STA	WSYNC
    344  f0e7
    345  f0e7				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    346  f0e7		       a9 01		      LDA	#%00000001
    347  f0e9		       24 ac		      BIT	TextFlickerMode
    348  f0eb		       f0 05		      BEQ	TextSideFrameZero
    349  f0ed		       25 8d		      AND	FrameCount1
    350  f0ef		       4c f4 f0 	      JMP	StoreTextSize
    351  f0f2				   TextSideFrameZero
    352  f0f2		       25 8c		      AND	FrameCount0
    353  f0f4				   StoreTextSize
    354  f0f4		       85 ab		      STA	TextSide
    355  f0f6
    356  f0f6		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    357  f0f8		       85 2a		      STA	HMOVE	;2
    358  f0fa				   ConfigVBlankTimer
    359  f0fa		       a5 c5		      LDA	GameMode
    360  f0fc		       c9 10		      CMP	#MAX_GAME_MODE
    361  f0fe		       f0 05		      BEQ	SetVblankTimerQrCode
    362  f100		       a9 29		      LDA	#VBLANK_TIMER
    363  f102		       4c 07 f1 	      JMP	SetVblankTimer
    364  f105				   SetVblankTimerQrCode
    365  f105		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    366  f107				   SetVblankTimer
    367  f107		       85 02		      STA	WSYNC	;3
    368  f109		       8d 96 02 	      STA	TIM64T	;3	
    369  f10c		       a9 00		      LDA	#0	;2
    370  f10e		       85 00		      STA	VSYNC	;3	
    371  f110
    372  f110				   RandomizeGame
    373  f110		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    374  f112		       d0 30		      BNE	EndRandomizeGame
    375  f114		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    376  f116		       29 02		      AND	#%00000010
    377  f118		       f0 27		      BEQ	DeterministicGame
    378  f11a		       a6 96		      LDX	TrafficOffset1 + 2
    379  f11c		       bd 00 fe 	      LDA	AesTable,X
    380  f11f		       45 8c		      EOR	FrameCount0
    381  f121		       85 96		      STA	TrafficOffset1 + 2
    382  f123		       a6 9a		      LDX	TrafficOffset2 + 2
    383  f125		       bd 00 fe 	      LDA	AesTable,X
    384  f128		       45 8c		      EOR	FrameCount0
    385  f12a		       85 9a		      STA	TrafficOffset2 + 2
    386  f12c		       a6 9e		      LDX	TrafficOffset3 + 2
    387  f12e		       bd 00 fe 	      LDA	AesTable,X
    388  f131		       45 8c		      EOR	FrameCount0
    389  f133		       85 9e		      STA	TrafficOffset3 + 2
    390  f135		       a6 a2		      LDX	TrafficOffset4 + 2
    391  f137		       bd 00 fe 	      LDA	AesTable,X
    392  f13a		       45 8c		      EOR	FrameCount0
    393  f13c		       85 a2		      STA	TrafficOffset4 + 2
    394  f13e		       4c 44 f1 	      JMP	EndRandomizeGame
    395  f141
    396  f141				   DeterministicGame
    397  f141		       20 00 f8 	      JSR	DefaultOffsets
    398  f144
    399  f144				   EndRandomizeGame
    400  f144
    401  f144				   CountFrame
    402  f144		       e6 8c		      INC	FrameCount0	; 5
    403  f146		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    404  f148		       e6 8d		      INC	FrameCount1	; 5 
    405  f14a				   SkipIncFC1
    406  f14a
    407  f14a				   CallDrawQrCode
    408  f14a		       a5 c5		      LDA	GameMode
    409  f14c		       c9 10		      CMP	#MAX_GAME_MODE
    410  f14e		       d0 03		      BNE	TestIsGameRunning
    411  f150		       4c 64 fc 	      JMP	DrawQrCode
    412  f153
    413  f153							;Does not update the game if not running
    414  f153				   TestIsGameRunning
    415  f153		       a5 c0		      LDA	GameStatus	;3
    416  f155		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    417  f157		       4c 63 f3 	      JMP	SkipUpdateLogic
    418  f15a				   ContinueWithGameLogic
    419  f15a
    420  f15a				   EverySecond		; 64 frames to be more precise
    421  f15a		       a9 3f		      LDA	#%00111111
    422  f15c		       25 8c		      AND	FrameCount0
    423  f15e		       d0 06		      BNE	SkipEverySecondAction
    424  f160		       c5 ba		      CMP	CountdownTimer
    425  f162		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    426  f164		       c6 ba		      DEC	CountdownTimer
    427  f166				   SkipEverySecondAction
    428  f166
    429  f166				   ChangeTextFlickerMode
    430  f166		       a5 bc		      LDA	SwitchDebounceCounter
    431  f168		       d0 0d		      BNE	EndChangeTextFlickerMode
    432  f16a		       ad 82 02 	      LDA	SWCHB
    433  f16d		       29 02		      AND	#%00000010	;Game select
    434  f16f		       d0 06		      BNE	EndChangeTextFlickerMode
    435  f171		       e6 ac		      INC	TextFlickerMode
    436  f173		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    437  f175		       85 bc		      STA	SwitchDebounceCounter
    438  f177				   EndChangeTextFlickerMode
    439  f177
    440  f177				   BreakOnTimeOver		; Uses LDX as the breaking speed
    441  f177		       a2 00		      LDX	#0
    442  f179		       a5 ba		      LDA	CountdownTimer
    443  f17b		       d0 0b		      BNE	Break
    444  f17d		       a4 a9		      LDY	CurrentCarId
    445  f17f		       a5 8c		      LDA	FrameCount0
    446  f181		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    447  f184		       d0 02		      BNE	Break
    448  f186		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    449  f188
    450  f188				   Break
    451  f188		       a9 20		      LDA	#%00100000	;Down in controller
    452  f18a		       2c 80 02 	      BIT	SWCHA
    453  f18d		       d0 0e		      BNE	BreakNonZero
    454  f18f		       a5 0c		      LDA	INPT4	;3
    455  f191		       10 08		      BPL	BreakWhileAccelerating
    456  f193		       a4 ad		      LDY	Gear
    457  f195		       be dd ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    458  f198		       4c 9d f1 	      JMP	BreakNonZero
    459  f19b				   BreakWhileAccelerating		; Allow better control while breaking.
    460  f19b		       a2 05		      LDX	(#BREAK_SPEED / 2)
    461  f19d
    462  f19d				   BreakNonZero
    463  f19d		       e0 00		      CPX	#0
    464  f19f		       f0 2b		      BEQ	SkipBreak
    465  f1a1		       86 b0		      STX	Tmp0
    466  f1a3
    467  f1a3				   DecreaseSpeed
    468  f1a3		       38		      SEC
    469  f1a4		       a5 8e		      LDA	Player0SpeedL
    470  f1a6		       e5 b0		      SBC	Tmp0
    471  f1a8		       85 8e		      STA	Player0SpeedL
    472  f1aa		       a5 8f		      LDA	Player0SpeedH
    473  f1ac		       e9 00		      SBC	#0
    474  f1ae		       85 8f		      STA	Player0SpeedH
    475  f1b0
    476  f1b0				   CheckMinSpeed
    477  f1b0		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    478  f1b2		       c9 00		      CMP	#CAR_MIN_SPEED_H
    479  f1b4		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    480  f1b6		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    481  f1b8
    482  f1b8				   CompareLBreakSpeed
    483  f1b8		       a5 8e		      LDA	Player0SpeedL
    484  f1ba		       c9 00		      CMP	#CAR_MIN_SPEED_L
    485  f1bc		       90 03		      BCC	ResetMinSpeed	; Less than memory
    486  f1be		       4c c9 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    487  f1c1
    488  f1c1				   ResetMinSpeed
    489  f1c1		       a9 00		      LDA	#CAR_MIN_SPEED_H
    490  f1c3		       85 8f		      STA	Player0SpeedH
    491  f1c5		       a9 00		      LDA	#CAR_MIN_SPEED_L
    492  f1c7		       85 8e		      STA	Player0SpeedL
    493  f1c9
    494  f1c9				   SkipAccelerateIfBreaking
    495  f1c9		       4c 0e f2 	      JMP	SkipAccelerate
    496  f1cc				   SkipBreak
    497  f1cc
    498  f1cc				   Acelerates
    499  f1cc		       a5 ba		      LDA	CountdownTimer
    500  f1ce		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    501  f1d0
    502  f1d0				   ContinueAccelerateTest
    503  f1d0		       a5 0c		      LDA	INPT4	;3
    504  f1d2		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    505  f1d4		       a9 10		      LDA	#%00010000	;UP in controller
    506  f1d6		       2c 80 02 	      BIT	SWCHA
    507  f1d9		       d0 33		      BNE	SkipAccelerate
    508  f1db
    509  f1db				   IncreaseCarSpeed
    510  f1db		       a2 02		      LDX	#2
    511  f1dd		       a4 a9		      LDY	CurrentCarId
    512  f1df				   IncreaseCarSpeedLoop
    513  f1df							;Adds speed
    514  f1df		       18		      CLC
    515  f1e0		       a5 aa		      LDA	AccelerateBuffer
    516  f1e2		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    517  f1e5		       85 aa		      STA	AccelerateBuffer
    518  f1e7		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    519  f1e9		       e6 8e		      INC	Player0SpeedL
    520  f1eb		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    521  f1ed		       e6 8f		      INC	Player0SpeedH
    522  f1ef				   ContinueIncreaseSpeedLoop
    523  f1ef		       ca		      DEX
    524  f1f0		       d0 ed		      BNE	IncreaseCarSpeedLoop
    525  f1f2				   SkipIncreaseCarSpeed
    526  f1f2
    527  f1f2				   CheckIfAlreadyMaxSpeed
    528  f1f2		       a5 8f		      LDA	Player0SpeedH
    529  f1f4		       c9 02		      CMP	#CAR_MAX_SPEED_H
    530  f1f6		       90 16		      BCC	SkipAccelerate	; less than my max speed
    531  f1f8		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    532  f1fa							;High bit is max, compare the low
    533  f1fa		       a4 a9		      LDY	CurrentCarId
    534  f1fc		       a5 8e		      LDA	Player0SpeedL
    535  f1fe		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    536  f201		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    537  f203							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    538  f203
    539  f203				   ResetToMaxSpeed		; Speed is more, or is already max
    540  f203		       a9 02		      LDA	#CAR_MAX_SPEED_H
    541  f205		       85 8f		      STA	Player0SpeedH
    542  f207		       a4 a9		      LDY	CurrentCarId
    543  f209		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    544  f20c		       85 8e		      STA	Player0SpeedL
    545  f20e				   SkipAccelerate
    546  f20e
    547  f20e				   InitUpdateOffsets
    548  f20e		       a2 00		      LDX	#0	; Memory Offset 24 bit
    549  f210		       a0 00		      LDY	#0	; Line Speeds 16 bits
    550  f212		       a5 91		      LDA	TrafficOffset0 + 1	;
    551  f214		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    552  f216		       a5 c5		      LDA	GameMode
    553  f218		       29 04		      AND	#%00000100	; GameModes with high delta
    554  f21a		       f0 02		      BEQ	UpdateOffsets
    555  f21c		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    556  f21e
    557  f21e				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    558  f21e		       38		      SEC
    559  f21f		       a5 8e		      LDA	Player0SpeedL
    560  f221		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    561  f224		       85 b0		      STA	Tmp0
    562  f226		       c8		      INY
    563  f227		       a5 8f		      LDA	Player0SpeedH
    564  f229		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    565  f22c		       85 b1		      STA	Tmp1
    566  f22e		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    567  f230		       e9 00		      SBC	#0
    568  f232		       85 b2		      STA	Tmp2
    569  f234
    570  f234				   AddsTheResult
    571  f234		       18		      CLC
    572  f235		       a5 b0		      LDA	Tmp0
    573  f237		       75 90		      ADC	TrafficOffset0,X
    574  f239		       95 90		      STA	TrafficOffset0,X
    575  f23b		       e8		      INX
    576  f23c		       a5 b1		      LDA	Tmp1
    577  f23e		       75 90		      ADC	TrafficOffset0,X
    578  f240		       95 90		      STA	TrafficOffset0,X
    579  f242		       e8		      INX
    580  f243		       a5 b2		      LDA	Tmp2	; Carry
    581  f245		       75 90		      ADC	TrafficOffset0,X
    582  f247		       95 90		      STA	TrafficOffset0,X
    583  f249		       90 06		      BCC	CalculateOffsetCache
    584  f24b		       e0 02		      CPX	#2	;MSB offset 0
    585  f24d		       d0 02		      BNE	CalculateOffsetCache
    586  f24f		       e6 bb		      INC	Traffic0Msb
    587  f251
    588  f251				   CalculateOffsetCache
    589  f251		       e8		      INX
    590  f252		       38		      SEC
    591  f253		       69 00		      ADC	#0	;Increment by one
    592  f255		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    593  f257
    594  f257				   PrepareNextUpdateLoop
    595  f257		       c8		      INY
    596  f258		       e8		      INX
    597  f259		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    598  f25b		       d0 c1		      BNE	UpdateOffsets
    599  f25d
    600  f25d				   BcdScore		; 48
    601  f25d		       a5 91		      LDA	TrafficOffset0 + 1	;3
    602  f25f		       45 b3		      EOR	Tmp3	;3
    603  f261		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    604  f263		       f0 1b		      BEQ	FinishBcdScore	;2
    605  f265
    606  f265				   ContinueBcdScore
    607  f265		       f8		      SED		;2
    608  f266		       18		      CLC		;2
    609  f267		       a5 b4		      LDA	ScoreBcd0	;3
    610  f269		       69 01		      ADC	#1	;2
    611  f26b		       85 b4		      STA	ScoreBcd0	;3
    612  f26d		       a5 b5		      LDA	ScoreBcd1	;3
    613  f26f		       69 00		      ADC	#0	;2
    614  f271		       85 b5		      STA	ScoreBcd1	;3
    615  f273		       a5 b6		      LDA	ScoreBcd2	;3
    616  f275		       69 00		      ADC	#0	;2
    617  f277		       85 b6		      STA	ScoreBcd2	;3
    618  f279		       a5 b7		      LDA	ScoreBcd3	;3
    619  f27b		       69 00		      ADC	#0	;2
    620  f27d		       85 b7		      STA	ScoreBcd3	;3
    621  f27f		       d8		      CLD		;2
    622  f280				   FinishBcdScore
    623  f280
    624  f280							;Until store the movemnt, LDX contains the value to be stored.
    625  f280				   TestCollision		;
    626  f280							; see if player0 colides with the rest
    627  f280		       a5 00		      LDA	CXM0P
    628  f282		       05 01		      ORA	CXM1P
    629  f284		       05 01		      ORA	CXM1P
    630  f286		       05 02		      ORA	CXP0FB
    631  f288		       05 07		      ORA	CXPPMM
    632  f28a		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    633  f28c		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    634  f28e		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    635  f290		       d0 3a		      BNE	NoCollision
    636  f292		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    637  f294		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    638  f296		       f0 34		      BEQ	NoCollision
    639  f298		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    640  f29a		       f0 30		      BEQ	NoCollision
    641  f29c		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    642  f29e		       85 b8		      STA	CollisionCounter	;and store as colision.
    643  f2a0				   CountBcdColision
    644  f2a0		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    645  f2a2		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    646  f2a4		       f0 1d		      BEQ	SkipSetColisionSpeedL
    647  f2a6		       f8		      SED		;2
    648  f2a7		       18		      CLC		;2
    649  f2a8		       a5 cb		      LDA	HitCountBcd0	;3
    650  f2aa		       69 01		      ADC	#1	;3
    651  f2ac		       85 cb		      STA	HitCountBcd0	;3
    652  f2ae		       a5 cc		      LDA	HitCountBcd1	;3
    653  f2b0		       69 00		      ADC	#0	;2
    654  f2b2		       85 cc		      STA	HitCountBcd1	;3
    655  f2b4		       d8		      CLD		;2
    656  f2b5				   EndCountBcdColision
    657  f2b5		       a5 8f		      LDA	Player0SpeedH
    658  f2b7		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    659  f2b9		       a9 10		      LDA	#COLLISION_SPEED_L
    660  f2bb		       c5 8e		      CMP	Player0SpeedL
    661  f2bd		       b0 04		      BCS	SkipSetColisionSpeedL
    662  f2bf				   SetColisionSpeedL
    663  f2bf		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    664  f2c1		       85 8e		      STA	Player0SpeedL
    665  f2c3				   SkipSetColisionSpeedL
    666  f2c3		       a9 00		      LDA	#0
    667  f2c5		       85 8f		      STA	Player0SpeedH
    668  f2c7		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    669  f2c9		       4c 17 f3 	      JMP	StoreHMove	; We keep position consistent
    670  f2cc				   NoCollision
    671  f2cc
    672  f2cc				   DecrementCollision
    673  f2cc		       a4 b8		      LDY	CollisionCounter
    674  f2ce		       f0 07		      BEQ	FinishDecrementCollision
    675  f2d0		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    676  f2d2		       85 04		      STA	NUSIZ0
    677  f2d4		       88		      DEY
    678  f2d5		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    679  f2d7				   FinishDecrementCollision
    680  f2d7
    681  f2d7				   ResetPlayerSize
    682  f2d7		       d0 04		      BNE	FinishResetPlayerSize
    683  f2d9		       a9 30		      LDA	#%00110000
    684  f2db		       85 04		      STA	NUSIZ0	;
    685  f2dd				   FinishResetPlayerSize
    686  f2dd
    687  f2dd				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    688  f2dd		       c0 01		      CPY	#1	; Last frame before reset
    689  f2df		       d0 05		      BNE	SkipResetPlayerPosition
    690  f2e1		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    691  f2e3		       4c 17 f3 	      JMP	StoreHMove
    692  f2e6				   SkipResetPlayerPosition
    693  f2e6
    694  f2e6				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    695  f2e6		       a5 a9		      LDA	CurrentCarId
    696  f2e8		       c9 03		      CMP	#CAR_ID_DRAGSTER
    697  f2ea		       d0 08		      BNE	PrepareReadXAxis
    698  f2ec		       a2 00		      LDX	#0
    699  f2ee		       a5 8c		      LDA	FrameCount0
    700  f2f0		       29 01		      AND	#DRAGSTER_TURN_MASK
    701  f2f2		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    702  f2f4
    703  f2f4							; for left and right, we're gonna 
    704  f2f4							; set the horizontal speed, and then do
    705  f2f4							; a single HMOVE.  We'll use X to hold the
    706  f2f4							; horizontal speed, then store it in the 
    707  f2f4							; appropriate register
    708  f2f4				   PrepareReadXAxis
    709  f2f4		       a2 00		      LDX	#0
    710  f2f6		       a4 b9		      LDY	Player0X
    711  f2f8				   BeginReadLeft
    712  f2f8		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    713  f2fa		       a9 40		      LDA	#%01000000	;Left
    714  f2fc		       2c 80 02 	      BIT	SWCHA
    715  f2ff		       d0 07		      BNE	SkipMoveLeft
    716  f301		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    717  f303		       c6 b9		      DEC	Player0X
    718  f305		       4c 17 f3 	      JMP	StoreHMove	; Cannot move left and right...
    719  f308				   SkipMoveLeft
    720  f308				   BeginReadRight
    721  f308		       c0 36		      CPY	#PLAYER_0_MAX_X
    722  f30a		       f0 0b		      BEQ	SkipMoveRight	; At max already
    723  f30c		       a9 80		      LDA	#%10000000	;Right
    724  f30e		       2c 80 02 	      BIT	SWCHA
    725  f311		       d0 04		      BNE	SkipMoveRight
    726  f313		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    727  f315		       e6 b9		      INC	Player0X
    728  f317				   SkipMoveRight
    729  f317				   StoreHMove
    730  f317		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    731  f319		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    732  f31b
    733  f31b				   DividePlayerSpeedBy4
    734  f31b		       a5 8f		      LDA	Player0SpeedH
    735  f31d		       0a		      ASL
    736  f31e		       0a		      ASL
    737  f31f		       0a		      ASL
    738  f320		       0a		      ASL
    739  f321		       0a		      ASL
    740  f322		       0a		      ASL
    741  f323		       85 b1		      STA	Tmp1
    742  f325		       a5 8e		      LDA	Player0SpeedL
    743  f327		       4a		      LSR
    744  f328		       4a		      LSR
    745  f329		       29 3f		      AND	#%00111111
    746  f32b		       05 b1		      ORA	Tmp1
    747  f32d		       85 b0		      STA	Tmp0	; Division Result
    748  f32f
    749  f32f				   CalculateParallax1Offset		; 3/4 speed
    750  f32f		       38		      SEC
    751  f330		       a5 8e		      LDA	Player0SpeedL
    752  f332		       e5 b0		      SBC	Tmp0
    753  f334		       85 b2		      STA	Tmp2
    754  f336		       a5 8f		      LDA	Player0SpeedH
    755  f338		       e9 00		      SBC	#0
    756  f33a		       85 b3		      STA	Tmp3
    757  f33c
    758  f33c		       18		      CLC
    759  f33d		       a5 c6		      LDA	ParallaxOffset1
    760  f33f		       65 b2		      ADC	Tmp2
    761  f341		       85 c6		      STA	ParallaxOffset1
    762  f343		       a5 c7		      LDA	ParallaxOffset1 + 1
    763  f345		       65 b3		      ADC	Tmp3
    764  f347		       85 c7		      STA	ParallaxOffset1 + 1
    765  f349
    766  f349				   CalculateParallax2Offset		; 2/4 speed
    767  f349		       38		      SEC
    768  f34a		       a5 b2		      LDA	Tmp2
    769  f34c		       e5 b0		      SBC	Tmp0
    770  f34e		       85 b2		      STA	Tmp2
    771  f350		       a5 b3		      LDA	Tmp3
    772  f352		       e9 00		      SBC	#0
    773  f354		       85 b3		      STA	Tmp3
    774  f356
    775  f356		       18		      CLC
    776  f357		       a5 c8		      LDA	ParallaxOffset2
    777  f359		       65 b2		      ADC	Tmp2
    778  f35b		       85 c8		      STA	ParallaxOffset2
    779  f35d		       a5 c9		      LDA	ParallaxOffset2 + 1
    780  f35f		       65 b3		      ADC	Tmp3
    781  f361		       85 c9		      STA	ParallaxOffset2 + 1
    782  f363
    783  f363				   SkipUpdateLogic		; Continue here if not paused
    784  f363
    785  f363				   CalculateGear
    786  f363		       a5 8e		      LDA	Player0SpeedL	;3
    787  f365		       29 80		      AND	#%10000000	;2
    788  f367		       05 8f		      ORA	Player0SpeedH	;3
    789  f369		       18		      CLC		;2
    790  f36a		       2a		      ROL		;2
    791  f36b		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    792  f36d		       85 ad		      STA	Gear
    793  f36f
    794  f36f				   ProcessBorder		;Can be optimized (probably)
    795  f36f		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    796  f371		       a5 88		      LDA	ParallaxMode
    797  f373		       c9 70		      CMP	#%01110000
    798  f375		       f0 1a		      BEQ	HorizontalParallaxMode
    799  f377		       c9 d0		      CMP	#%11010000
    800  f379		       f0 0a		      BEQ	VerticalParallaxMode
    801  f37b		       c9 b0		      CMP	#%10110000
    802  f37d		       f0 0c		      BEQ	TachometerMode
    803  f37f
    804  f37f				   DefaultBorderMode
    805  f37f		       20 7f f8 	      JSR	DefaultBorderLoop
    806  f382		       4c 94 f3 	      JMP	EndProcessingBorder
    807  f385				   VerticalParallaxMode
    808  f385		       20 e9 f8 	      JSR	VerticalParallaxLoop
    809  f388		       4c 94 f3 	      JMP	EndProcessingBorder
    810  f38b				   TachometerMode
    811  f38b		       20 9a f8 	      JSR	PrepareTachometerBorderLoop
    812  f38e		       4c 94 f3 	      JMP	EndProcessingBorder
    813  f391				   HorizontalParallaxMode
    814  f391		       20 31 f8 	      JSR	HorizontalParallaxLoop
    815  f394
    816  f394				   EndProcessingBorder
    817  f394
    818  f394				   ProcessScoreFontColor
    819  f394		       a6 d6		      LDX	ScoreFontColorHoldChange
    820  f396		       f0 06		      BEQ	ResetScoreFontColor
    821  f398		       ca		      DEX
    822  f399		       86 d6		      STX	ScoreFontColorHoldChange
    823  f39b		       4c a2 f3 	      JMP	SkipScoreFontColor
    824  f39e				   ResetScoreFontColor
    825  f39e		       a9 f9		      LDA	#SCORE_FONT_COLOR
    826  f3a0		       85 d5		      STA	ScoreFontColor
    827  f3a2				   SkipScoreFontColor
    828  f3a2
    829  f3a2				   IsGameOver
    830  f3a2		       a5 ba		      LDA	CountdownTimer
    831  f3a4		       05 8e		      ORA	Player0SpeedL
    832  f3a6		       05 8f		      ORA	Player0SpeedH
    833  f3a8		       d0 0b		      BNE	IsCheckpoint
    834  f3aa		       a9 01		      LDA	#1
    835  f3ac		       85 d6		      STA	ScoreFontColorHoldChange
    836  f3ae		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    837  f3b0		       85 d5		      STA	ScoreFontColor
    838  f3b2		       4c f6 f3 	      JMP	SkipIsTimeOver
    839  f3b5
    840  f3b5				   IsCheckpoint
    841  f3b5		       a5 d7		      LDA	NextCheckpoint
    842  f3b7		       c5 92		      CMP	TrafficOffset0 + 2
    843  f3b9		       d0 2f		      BNE	SkipIsCheckpoint
    844  f3bb		       18		      CLC
    845  f3bc		       69 10		      ADC	#CHECKPOINT_INTERVAL
    846  f3be		       85 d7		      STA	NextCheckpoint
    847  f3c0		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    848  f3c2		       85 d5		      STA	ScoreFontColor
    849  f3c4		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    850  f3c6		       85 d6		      STA	ScoreFontColorHoldChange
    851  f3c8				   AddCheckpointBcd
    852  f3c8		       f8		      SED		;2
    853  f3c9		       18		      CLC		;2
    854  f3ca		       a5 a4		      LDA	CheckpointBcd0	;3
    855  f3cc		       69 01		      ADC	#1	;3
    856  f3ce		       85 a4		      STA	CheckpointBcd0	;3
    857  f3d0		       a5 a5		      LDA	CheckpointBcd1	;3
    858  f3d2		       69 00		      ADC	#0	;2
    859  f3d4		       85 a5		      STA	CheckpointBcd1	;3
    860  f3d6		       d8		      CLD		;2
    861  f3d7				   EndCheckpointBcd
    862  f3d7		       a5 ba		      LDA	CountdownTimer
    863  f3d9		       18		      CLC
    864  f3da		       65 c2		      ADC	CheckpointTime
    865  f3dc		       85 ba		      STA	CountdownTimer
    866  f3de		       90 04		      BCC	JumpSkipTimeOver
    867  f3e0		       a9 ff		      LDA	#$FF
    868  f3e2		       85 ba		      STA	CountdownTimer	; Does not overflow!
    869  f3e4				   JumpSkipTimeOver
    870  f3e4		       20 c6 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    871  f3e7		       4c f6 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    872  f3ea				   SkipIsCheckpoint
    873  f3ea
    874  f3ea				   IsTimeOver
    875  f3ea		       a5 ba		      LDA	CountdownTimer
    876  f3ec		       d0 08		      BNE	SkipIsTimeOver
    877  f3ee		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    878  f3f0		       85 d6		      STA	ScoreFontColorHoldChange
    879  f3f2		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    880  f3f4		       85 d5		      STA	ScoreFontColor
    881  f3f6				   SkipIsTimeOver
    882  f3f6
    883  f3f6				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
    884  f3f6		       a5 c0		      LDA	GameStatus	;3
    885  f3f8		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
    886  f3fa		       a5 d5		      LDA	ScoreFontColor	;3
    887  f3fc		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
    888  f3fe		       f0 30		      BEQ	EndExactlyEverySecond	;2
    889  f400		       c6 cf		      DEC	OneSecondConter	;5
    890  f402		       d0 2c		      BNE	EndExactlyEverySecond	;2
    891  f404
    892  f404		       f8		      SED		;2 BCD Operations after this point
    893  f405				   CountGlideTimeBcd
    894  f405		       a5 d5		      LDA	ScoreFontColor	;3
    895  f407		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
    896  f409		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
    897  f40b		       18		      CLC		;2
    898  f40c		       a5 cd		      LDA	GlideTimeBcd0	;3
    899  f40e		       69 01		      ADC	#1	;3
    900  f410		       85 cd		      STA	GlideTimeBcd0	;3
    901  f412		       a5 ce		      LDA	GlideTimeBcd1	;3
    902  f414		       69 00		      ADC	#0	;2
    903  f416		       85 ce		      STA	GlideTimeBcd1	;3
    904  f418				   EndCountGlideTimeBcd
    905  f418				   IncreaseTotalTimerBcd
    906  f418		       18		      CLC		;2
    907  f419		       a5 bd		      LDA	TimeBcd0	;3
    908  f41b		       69 01		      ADC	#1	;2
    909  f41d		       85 bd		      STA	TimeBcd0	;3
    910  f41f		       a5 be		      LDA	TimeBcd1	;3
    911  f421		       69 00		      ADC	#0	;2
    912  f423		       85 be		      STA	TimeBcd1	;3
    913  f425		       a5 bf		      LDA	TimeBcd2	;3
    914  f427		       69 00		      ADC	#0	;2
    915  f429		       85 bf		      STA	TimeBcd2	;3
    916  f42b
    917  f42b				   ResetOneSecondCounter
    918  f42b		       d8		      CLD		;2
    919  f42c		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
    920  f42e		       85 cf		      STA	OneSecondConter	;3
    921  f430
    922  f430				   EndExactlyEverySecond
    923  f430
    924  f430				   PrintEasterEggCondition
    925  f430		       a5 8d		      LDA	FrameCount1
    926  f432		       29 38		      AND	#%00111000
    927  f434		       05 c0		      ORA	GameStatus
    928  f436		       c9 38		      CMP	#%00111000
    929  f438		       d0 06		      BNE	ChooseTextSide
    930  f43a		       20 3d f9 	      JSR	PrintEasterEgg
    931  f43d		       4c 2f f5 	      JMP	RightScoreWriteEnd
    932  f440
    933  f440							;Could be done during on vblank to save this comparisson time (before draw score), 
    934  f440							;but I am saving vblank cycles for now, in case of 2 players.
    935  f440				   ChooseTextSide		; 
    936  f440		       a5 ab		      LDA	TextSide	;3
    937  f442		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    938  f444		       4c c5 f4 	      JMP	RightScoreWrite
    939  f447
    940  f447				   LeftScoreWrite
    941  f447		       a5 d5		      LDA	ScoreFontColor
    942  f449		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    943  f44b		       f0 4e		      BEQ	PrintCheckpoint
    944  f44d		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    945  f44f		       f0 52		      BEQ	PrintStartGame
    946  f451		       a5 c0		      LDA	GameStatus
    947  f453		       f0 56		      BEQ	PrintHellwayLeft
    948  f455				   WriteDistance		;Not optimized yet, ugly code.
    949  f455				   Digit0Distance
    950  f455		       a5 91		      LDA	TrafficOffset0 + 1	;3
    951  f457		       4a		      LSR		; 2
    952  f458		       4a		      LSR		; 2
    953  f459		       4a		      LSR		; 2
    954  f45a		       4a		      LSR		; 2
    955  f45b		       aa		      TAX		; 2
    956  f45c		       bd be fd 	      LDA	FontLookup,X	;4
    957  f45f		       85 d3		      STA	ScoreD3	;3
    958  f461
    959  f461				   Digit1Distance
    960  f461		       a5 92		      LDA	TrafficOffset0 + 2	;3
    961  f463		       29 0f		      AND	#%00001111	;2
    962  f465		       aa		      TAX		; 2
    963  f466		       bd be fd 	      LDA	FontLookup,X	;4 
    964  f469		       85 d2		      STA	ScoreD2	;3
    965  f46b
    966  f46b				   Digit2Distance
    967  f46b		       a5 92		      LDA	TrafficOffset0 + 2	;3
    968  f46d		       4a		      LSR		; 2
    969  f46e		       4a		      LSR		; 2
    970  f46f		       4a		      LSR		; 2
    971  f470		       4a		      LSR		; 2
    972  f471		       aa		      TAX		; 2
    973  f472		       bd be fd 	      LDA	FontLookup,X	;4
    974  f475		       85 d1		      STA	ScoreD1	;3
    975  f477
    976  f477				   Digit3Distance
    977  f477		       a5 bb		      LDA	Traffic0Msb	;3
    978  f479		       29 0f		      AND	#%00001111	;2
    979  f47b		       aa		      TAX		; 2
    980  f47c		       bd be fd 	      LDA	FontLookup,X	;4 
    981  f47f		       85 d0		      STA	ScoreD0	;3
    982  f481
    983  f481				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    984  f481		       a5 bb		      LDA	Traffic0Msb
    985  f483		       29 f0		      AND	#%11110000	;2
    986  f485		       d0 07		      BNE	DrawDistanceExtraDigit
    987  f487		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    988  f489		       85 d4		      STA	ScoreD4	;3
    989  f48b		       4c 98 f4 	      JMP	EndDrawDistance
    990  f48e				   DrawDistanceExtraDigit
    991  f48e		       4a		      LSR		; 2
    992  f48f		       4a		      LSR		; 2
    993  f490		       4a		      LSR		; 2
    994  f491		       4a		      LSR		; 2
    995  f492		       aa		      TAX		; 2
    996  f493		       bd be fd 	      LDA	FontLookup,X	;4
    997  f496		       85 d4		      STA	ScoreD4	;3
    998  f498
    999  f498				   EndDrawDistance
   1000  f498		       4c 2f f5 	      JMP	RightScoreWriteEnd	;3
   1001  f49b
   1002  f49b				   PrintCheckpoint
   1003  f49b		       a2 00		      LDX	#<CheckpointText
   1004  f49d		       20 13 f8 	      JSR	PrintStaticText
   1005  f4a0		       4c 2f f5 	      JMP	RightScoreWriteEnd	;3
   1006  f4a3				   PrintStartGame
   1007  f4a3		       a2 23		      LDX	#<GoText
   1008  f4a5		       20 13 f8 	      JSR	PrintStaticText
   1009  f4a8		       4c 2f f5 	      JMP	RightScoreWriteEnd	;3
   1010  f4ab
   1011  f4ab				   PrintHellwayLeft
   1012  f4ab		       a5 8d		      LDA	FrameCount1
   1013  f4ad		       29 01		      AND	#1
   1014  f4af		       d0 05		      BNE	PrintCreditsLeft
   1015  f4b1		       a2 05		      LDX	#<HellwayLeftText
   1016  f4b3		       4c b8 f4 	      JMP	PrintGameMode
   1017  f4b6				   PrintCreditsLeft
   1018  f4b6		       a2 0f		      LDX	#<OpbText
   1019  f4b8
   1020  f4b8				   PrintGameMode
   1021  f4b8		       20 13 f8 	      JSR	PrintStaticText
   1022  f4bb		       a6 c5		      LDX	GameMode
   1023  f4bd		       bd be fd 	      LDA	FontLookup,X	;4 
   1024  f4c0		       85 d0		      STA	ScoreD0	;3
   1025  f4c2		       4c 2f f5 	      JMP	RightScoreWriteEnd	;3
   1026  f4c5
   1027  f4c5				   RightScoreWrite
   1028  f4c5		       a5 c0		      LDA	GameStatus
   1029  f4c7		       f0 45		      BEQ	PrintHellwayRight
   1030  f4c9		       a5 d5		      LDA	ScoreFontColor
   1031  f4cb		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1032  f4cd		       f0 52		      BEQ	PrintGameOver
   1033  f4cf				   Digit0Timer
   1034  f4cf		       a5 ba		      LDA	CountdownTimer	;3
   1035  f4d1		       29 0f		      AND	#%00001111	;2
   1036  f4d3		       aa		      TAX		; 2
   1037  f4d4		       bd be fd 	      LDA	FontLookup,X	;4 
   1038  f4d7		       85 d1		      STA	ScoreD1	;3
   1039  f4d9
   1040  f4d9				   Digit1Timer
   1041  f4d9		       a5 ba		      LDA	CountdownTimer	;3
   1042  f4db		       4a		      LSR		; 2
   1043  f4dc		       4a		      LSR		; 2
   1044  f4dd		       4a		      LSR		; 2
   1045  f4de		       4a		      LSR		; 2
   1046  f4df		       aa		      TAX		; 2
   1047  f4e0		       bd be fd 	      LDA	FontLookup,X	;4
   1048  f4e3		       85 d0		      STA	ScoreD0	;3
   1049  f4e5
   1050  f4e5		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1051  f4e7		       85 d2		      STA	ScoreD2	;3
   1052  f4e9
   1053  f4e9				   Digit0Speed
   1054  f4e9		       a5 8e		      LDA	Player0SpeedL
   1055  f4eb		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1056  f4ed		       4a		      LSR		; 2
   1057  f4ee		       4a		      LSR		; 2
   1058  f4ef		       aa		      TAX		; 2
   1059  f4f0		       bd be fd 	      LDA	FontLookup,X	;4
   1060  f4f3		       85 d4		      STA	ScoreD4	;3
   1061  f4f5
   1062  f4f5				   Digit1Speed
   1063  f4f5		       a5 8e		      LDA	Player0SpeedL
   1064  f4f7		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1065  f4f9		       18		      CLC
   1066  f4fa		       2a		      ROL		;First goes into carry
   1067  f4fb		       2a		      ROL
   1068  f4fc		       2a		      ROL
   1069  f4fd		       85 b0		      STA	Tmp0
   1070  f4ff		       a5 8f		      LDA	Player0SpeedH
   1071  f501		       0a		      ASL
   1072  f502		       0a		      ASL
   1073  f503		       05 b0		      ORA	Tmp0
   1074  f505		       aa		      TAX		; 2
   1075  f506		       bd be fd 	      LDA	FontLookup,X	;4
   1076  f509		       85 d3		      STA	ScoreD3	;3
   1077  f50b		       4c 2f f5 	      JMP	RightScoreWriteEnd
   1078  f50e
   1079  f50e				   PrintHellwayRight
   1080  f50e		       a5 8d		      LDA	FrameCount1
   1081  f510		       29 01		      AND	#1
   1082  f512		       d0 05		      BNE	PrintCreditsRight
   1083  f514		       a2 0a		      LDX	#<HellwayRightText
   1084  f516		       4c 1b f5 	      JMP	PrintRightIntro
   1085  f519				   PrintCreditsRight
   1086  f519		       a2 14		      LDX	#<YearText
   1087  f51b				   PrintRightIntro
   1088  f51b		       20 13 f8 	      JSR	PrintStaticText
   1089  f51e		       4c 2f f5 	      JMP	RightScoreWriteEnd
   1090  f521				   PrintGameOver
   1091  f521		       a5 8c		      LDA	FrameCount0
   1092  f523		       30 05		      BMI	PrintOverText
   1093  f525		       a2 19		      LDX	#<GameText
   1094  f527		       4c 2c f5 	      JMP	StoreGameOverText
   1095  f52a				   PrintOverText
   1096  f52a		       a2 1e		      LDX	#<OverText
   1097  f52c				   StoreGameOverText
   1098  f52c		       20 13 f8 	      JSR	PrintStaticText
   1099  f52f				   RightScoreWriteEnd
   1100  f52f
   1101  f52f
   1102  f52f				   ScoreBackgroundColor
   1103  f52f		       a2 00		      LDX	#0
   1104  f531		       ad 82 02 	      LDA	SWCHB
   1105  f534		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1106  f536		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1107  f538		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1108  f53a		       a2 03		      LDX	#BACKGROUND_COLOR
   1109  f53c				   BlackAndWhiteScoreBg
   1110  f53c		       85 b2		      STA	Tmp2	; Score Background
   1111  f53e		       86 b3		      STX	Tmp3	; Traffic Background
   1112  f540
   1113  f540				   ConfigurePFForScore
   1114  f540							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1115  f540		       85 09		      STA	COLUBK
   1116  f542		       20 88 f7 	      JSR	ClearAll
   1117  f545		       a9 02		      LDA	#%00000010	; Score mode
   1118  f547		       85 0a		      STA	CTRLPF
   1119  f549		       a5 ab		      LDA	TextSide	;3
   1120  f54b		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1121  f54d				   LeftScoreOn
   1122  f54d		       a5 d5		      LDA	ScoreFontColor
   1123  f54f		       85 07		      STA	COLUP1
   1124  f551		       a5 b2		      LDA	Tmp2
   1125  f553		       85 06		      STA	COLUP0
   1126  f555		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1127  f557		       85 b1		      STA	Tmp1
   1128  f559		       4c 68 f5 	      JMP	CallWaitForVblankEnd
   1129  f55c				   RightScoreOn
   1130  f55c		       a5 d5		      LDA	ScoreFontColor
   1131  f55e		       85 06		      STA	COLUP0
   1132  f560		       a5 b2		      LDA	Tmp2
   1133  f562		       85 07		      STA	COLUP1
   1134  f564		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1135  f566		       85 b1		      STA	Tmp1
   1136  f568
   1137  f568							; After here we are going to update the screen, No more heavy code
   1138  f568				   CallWaitForVblankEnd
   1139  f568		       20 ad fb 	      JSR	WaitForVblankEnd
   1140  f56b
   1141  f56b				   DrawScoreHud
   1142  f56b		       20 af f9 	      JSR	PrintScore
   1143  f56e
   1144  f56e		       85 02		      STA	WSYNC
   1145  f570
   1146  f570		       a5 0c		      LDA	INPT4	;3
   1147  f572		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1148  f574		       a5 d5		      LDA	ScoreFontColor
   1149  f576		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1150  f578		       d0 0a		      BNE	WaitAnotherScoreLine
   1151  f57a		       a5 ab		      LDA	TextSide	;3
   1152  f57c		       d0 03		      BNE	LeftScoreOnGameOver
   1153  f57e		       4c 3a fb 	      JMP	DrawGameOverScreenRight
   1154  f581				   LeftScoreOnGameOver
   1155  f581		       4c 6c fa 	      JMP	DrawGameOverScreenLeft
   1156  f584
   1157  f584				   WaitAnotherScoreLine
   1158  f584		       85 02		      STA	WSYNC
   1159  f586
   1160  f586				   PrepareForTraffic
   1161  f586		       20 9a f7 	      JSR	ClearPF	; 32
   1162  f589
   1163  f589		       85 02		      STA	WSYNC
   1164  f58b		       85 02		      STA	WSYNC
   1165  f58d
   1166  f58d		       a9 31		      LDA	#%00110001	; 2 Score mode
   1167  f58f		       85 0a		      STA	CTRLPF	;3
   1168  f591
   1169  f591		       a5 c3		      LDA	TrafficColor	;3
   1170  f593		       85 08		      STA	COLUPF	;3
   1171  f595
   1172  f595		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1173  f597		       85 07		      STA	COLUP1	;3
   1174  f599
   1175  f599		       a5 d5		      LDA	ScoreFontColor	;3
   1176  f59b		       85 06		      STA	COLUP0	;3
   1177  f59d
   1178  f59d		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1179  f59f
   1180  f59f		       20 9a f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1181  f5a2
      0  f5a2					      SLEEP	14
      1  f5a2				   .CYCLES    SET	14
      2  f5a2
      3  f5a2				  -	      IF	.CYCLES < 2
      4  f5a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5a2				  -	      ERR
      6  f5a2					      ENDIF
      7  f5a2
      8  f5a2				  -	      IF	.CYCLES & 1
      9  f5a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5a2				  -	      nop	0
     11  f5a2				  -	      ELSE
     12  f5a2				  -	      bit	VSYNC
     13  f5a2				  -	      ENDIF
     14  f5a2				  -.CYCLES    SET	.CYCLES - 3
     15  f5a2					      ENDIF
     16  f5a2
     17  f5a2					      REPEAT	.CYCLES / 2
     18  f5a2		       ea		      nop
     17  f5a2					      REPEND
     18  f5a3		       ea		      nop
     17  f5a3					      REPEND
     18  f5a4		       ea		      nop
     17  f5a4					      REPEND
     18  f5a5		       ea		      nop
     17  f5a5					      REPEND
     18  f5a6		       ea		      nop
     17  f5a6					      REPEND
     18  f5a7		       ea		      nop
     17  f5a7					      REPEND
     18  f5a8		       ea		      nop
     19  f5a9					      REPEND
   1183  f5a9
   1184  f5a9		       a5 b3		      LDA	Tmp3	;3
   1185  f5ab		       85 09		      STA	COLUBK	;3
   1186  f5ad		       4c b2 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1187  f5b0							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1188  f5b0
   1189  f5b0							;main scanline loop...
   1190  f5b0				   ScanLoop
   1191  f5b0		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1192  f5b2
   1193  f5b2							;Start of next line!			
   1194  f5b2				   DrawCache		;63 Is the last line going to the top of the next frame?
   1195  f5b2		       a5 81		      LDA	PF0Cache	;3
   1196  f5b4		       85 0d		      STA	PF0	;3
   1197  f5b6
   1198  f5b6		       a5 82		      LDA	PF1Cache	;3
   1199  f5b8		       85 0e		      STA	PF1	;3
   1200  f5ba
   1201  f5ba		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1202  f5bc		       b0 04		      BCS	SkipDrawCar	;2
   1203  f5be		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1204  f5c0		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1205  f5c2				   SkipDrawCar
   1206  f5c2
   1207  f5c2		       a5 84		      LDA	GRP1Cache	;3
   1208  f5c4		       85 1c		      STA	GRP1	;3
   1209  f5c6
   1210  f5c6		       a5 85		      LDA	ENABLCache	;3
   1211  f5c8		       85 1f		      STA	ENABL	;3
   1212  f5ca
   1213  f5ca		       a5 86		      LDA	ENAM0Cache	;3
   1214  f5cc		       85 1d		      STA	ENAM0	;3
   1215  f5ce
   1216  f5ce		       a5 87		      LDA	ENAM1Cache	;3
   1217  f5d0		       85 1e		      STA	ENAM1	;3
   1218  f5d2
   1219  f5d2		       a9 00		      LDA	#0	;2
   1220  f5d4							;STA PF1Cache ;3
   1221  f5d4		       85 84		      STA	GRP1Cache	;3
   1222  f5d6		       85 85		      STA	ENABLCache	;3
   1223  f5d8		       85 86		      STA	ENAM0Cache	;3
   1224  f5da		       85 87		      STA	ENAM1Cache	; 3
   1225  f5dc
   1226  f5dc							;BEQ DrawTraffic3
   1227  f5dc				   DrawTraffic1 		; 33
   1228  f5dc		       98		      TYA		; 2
   1229  f5dd		       18		      CLC		; 2 
   1230  f5de		       65 95		      ADC	TrafficOffset1 + 1	;3
   1231  f5e0		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1232  f5e2		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1233  f5e4		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1234  f5e6		       4c eb f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1235  f5e9				   EorOffsetWithCarry
   1236  f5e9		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1237  f5eb				   AfterEorOffsetWithCarry		;17
   1238  f5eb		       aa		      TAX		;2
   1239  f5ec		       bd 00 fe 	      LDA	AesTable,X	; 4
   1240  f5ef		       c5 c1		      CMP	TrafficChance	;3
   1241  f5f1		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1242  f5f3		       a9 ff		      LDA	#$FF	;2
   1243  f5f5		       85 84		      STA	GRP1Cache	;3
   1244  f5f7				   FinishDrawTraffic1
   1245  f5f7
   1246  f5f7				   DrawTraffic2 		; 33
   1247  f5f7		       98		      TYA		; 2
   1248  f5f8		       18		      CLC		; 2 
   1249  f5f9		       65 99		      ADC	TrafficOffset2 + 1	;3
   1250  f5fb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1251  f5fd		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1252  f5ff		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1253  f601		       4c 06 f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1254  f604				   EorOffsetWithCarry2
   1255  f604		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1256  f606				   AfterEorOffsetWithCarry2		;17
   1257  f606		       aa		      TAX		;2
   1258  f607		       bd 00 fe 	      LDA	AesTable,X	; 4
   1259  f60a		       c5 c1		      CMP	TrafficChance	;3
   1260  f60c		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1261  f60e		       a9 02		      LDA	#%00000010	;2
   1262  f610		       85 85		      STA	ENABLCache	;3
   1263  f612				   FinishDrawTraffic2
   1264  f612
   1265  f612							;STA WSYNC ;65 / 137
   1266  f612
   1267  f612							; LDA Tmp0 ; Flicker this line if drawing car
   1268  f612							; BEQ FinishDrawTraffic4
   1269  f612				   DrawTraffic3 		; 33
   1270  f612		       98		      TYA		; 2
   1271  f613		       18		      CLC		; 2 
   1272  f614		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1273  f616		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1274  f618		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1275  f61a		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1276  f61c		       4c 21 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1277  f61f				   EorOffsetWithCarry3
   1278  f61f		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1279  f621				   AfterEorOffsetWithCarry3		;17
   1280  f621		       aa		      TAX		;2
   1281  f622		       bd 00 fe 	      LDA	AesTable,X	; 4
   1282  f625		       c5 c1		      CMP	TrafficChance	;3
   1283  f627		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1284  f629		       a9 02		      LDA	#%00000010	;2
   1285  f62b		       85 86		      STA	ENAM0Cache
   1286  f62d				   FinishDrawTraffic3
   1287  f62d
   1288  f62d				   DrawTraffic4 		; 33
   1289  f62d		       98		      TYA		; 2
   1290  f62e		       18		      CLC		; 2 
   1291  f62f		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1292  f631		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1293  f633		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1294  f635		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1295  f637		       4c 3c f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1296  f63a				   EorOffsetWithCarry4
   1297  f63a		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1298  f63c				   AfterEorOffsetWithCarry4		;17
   1299  f63c		       aa		      TAX		;2
   1300  f63d		       bd 00 fe 	      LDA	AesTable,X	; 4
   1301  f640		       c5 c1		      CMP	TrafficChance	;3
   1302  f642		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1303  f644		       a9 02		      LDA	#%00000010	;2
   1304  f646		       85 87		      STA	ENAM1Cache	;3
   1305  f648				   FinishDrawTraffic4
   1306  f648
   1307  f648				   DrawTraffic0 		; 20
   1308  f648		       98		      TYA		;2
   1309  f649		       29 07		      AND	#%00000111	;2
   1310  f64b		       aa		      TAX		;2
   1311  f64c		       b5 d8		      LDA	ParallaxCache,X	;4
   1312  f64e		       85 82		      STA	PF1Cache	;3
   1313  f650		       b5 f0		      LDA	ParallaxCache2,X	;4
   1314  f652		       85 81		      STA	PF0Cache	;3
   1315  f654
   1316  f654				   SkipDrawTraffic0
   1317  f654
   1318  f654				   WhileScanLoop
   1319  f654		       88		      DEY		;2
   1320  f655		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1321  f657		       4c b0 f5 	      JMP	ScanLoop	;3
   1322  f65a				   FinishScanLoop		; 7 209 of 222
   1323  f65a
   1324  f65a		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1325  f65c		       20 a9 f7 	      JSR	LoadAll
   1326  f65f		       85 02		      STA	WSYNC	; do stuff!
   1327  f661		       85 02		      STA	WSYNC
   1328  f663		       85 02		      STA	WSYNC
   1329  f665							;42 cycles to use here
   1330  f665
   1331  f665				   PrepareOverscan
   1332  f665		       a9 02		      LDA	#2
   1333  f667		       85 02		      STA	WSYNC
   1334  f669		       85 01		      STA	VBLANK
   1335  f66b
   1336  f66b		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1337  f66d		       8d 96 02 	      STA	TIM64T
   1338  f670
   1339  f670				   LeftSound		;41
   1340  f670		       a5 ba		      LDA	CountdownTimer	;3
   1341  f672		       f0 1b		      BEQ	EngineOff	;2
   1342  f674		       a6 ad		      LDX	Gear
   1343  f676		       a5 8e		      LDA	Player0SpeedL	;3
   1344  f678		       4a		      LSR		;2
   1345  f679		       4a		      LSR		;2
   1346  f67a		       4a		      LSR		;2
   1347  f67b		       29 0f		      AND	#%00001111	;2
   1348  f67d		       85 b0		      STA	Tmp0	;3
   1349  f67f		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1350  f682		       38		      SEC		;2
   1351  f683		       e5 b0		      SBC	Tmp0	;3
   1352  f685		       85 17		      STA	AUDF0	;3
   1353  f687		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1354  f68a		       85 15		      STA	AUDC0	;3
   1355  f68c		       4c 93 f6 	      JMP	EndLeftSound	;3
   1356  f68f				   EngineOff
   1357  f68f		       a9 00		      LDA	#0
   1358  f691		       85 15		      STA	AUDC0
   1359  f693
   1360  f693				   EndLeftSound
   1361  f693
   1362  f693
   1363  f693				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1364  f693		       a5 d5		      LDA	ScoreFontColor	;3
   1365  f695		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1366  f697		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1367  f699		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1368  f69b		       f0 29		      BEQ	PlayCheckpoint	;2
   1369  f69d		       a5 b8		      LDA	CollisionCounter	;3
   1370  f69f		       c9 e0		      CMP	#$E0	;2
   1371  f6a1		       b0 14		      BCS	PlayColision	;2
   1372  f6a3		       a5 d7		      LDA	NextCheckpoint	;3
   1373  f6a5		       38		      SEC		;2
   1374  f6a6		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1375  f6a8		       c9 02		      CMP	#$02	;2
   1376  f6aa		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1377  f6ac		       a5 ba		      LDA	CountdownTimer	; 3
   1378  f6ae		       f0 53		      BEQ	MuteRightSound	;2
   1379  f6b0		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1380  f6b2		       90 37		      BCC	PlayWarnTimeEnding	;4
   1381  f6b4		       4c 03 f7 	      JMP	MuteRightSound	;3
   1382  f6b7				   PlayColision
   1383  f6b7		       a9 1f		      LDA	#31
   1384  f6b9		       85 18		      STA	AUDF1
   1385  f6bb		       a9 08		      LDA	#8
   1386  f6bd		       85 16		      STA	AUDC1
   1387  f6bf		       a9 08		      LDA	#8
   1388  f6c1		       85 1a		      STA	AUDV1
   1389  f6c3		       4c 07 f7 	      JMP	EndRightSound
   1390  f6c6
   1391  f6c6				   PlayCheckpoint
   1392  f6c6		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1393  f6c8		       4a		      LSR		;2
   1394  f6c9		       4a		      LSR		;2
   1395  f6ca		       4a		      LSR		;2
   1396  f6cb		       85 18		      STA	AUDF1	;3
   1397  f6cd		       a9 0c		      LDA	#12	;2
   1398  f6cf		       85 16		      STA	AUDC1	;3
   1399  f6d1		       a9 06		      LDA	#6	;2
   1400  f6d3		       85 1a		      STA	AUDV1	;3
   1401  f6d5		       4c 07 f7 	      JMP	EndRightSound	;3
   1402  f6d8
   1403  f6d8				   PlayBeforeCheckpoint
   1404  f6d8		       a5 8c		      LDA	FrameCount0	;3
   1405  f6da		       29 1c		      AND	#%00011100	;2
   1406  f6dc		       09 03		      ORA	#%00000011	;2
   1407  f6de		       85 18		      STA	AUDF1	;3
   1408  f6e0		       a9 0c		      LDA	#12	;2
   1409  f6e2		       85 16		      STA	AUDC1	;3
   1410  f6e4		       a9 03		      LDA	#3	;2
   1411  f6e6		       85 1a		      STA	AUDV1	;3
   1412  f6e8		       4c 07 f7 	      JMP	EndRightSound	;3
   1413  f6eb
   1414  f6eb				   PlayWarnTimeEnding
   1415  f6eb		       a5 8c		      LDA	FrameCount0	;3
   1416  f6ed		       29 04		      AND	#%00000100	;2
   1417  f6ef		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1418  f6f1		       18		      CLC		;2
   1419  f6f2		       a9 0a		      LDA	#10	;2
   1420  f6f4		       65 ba		      ADC	CountdownTimer	;2
   1421  f6f6		       85 18		      STA	AUDF1	;3
   1422  f6f8		       a9 0c		      LDA	#12	;2
   1423  f6fa		       85 16		      STA	AUDC1	;3
   1424  f6fc		       a9 03		      LDA	#3	;2
   1425  f6fe		       85 1a		      STA	AUDV1	;3
   1426  f700		       4c 07 f7 	      JMP	EndRightSound	;3
   1427  f703
   1428  f703				   MuteRightSound
   1429  f703		       a9 00		      LDA	#0
   1430  f705		       85 1a		      STA	AUDV1
   1431  f707				   EndRightSound
   1432  f707
   1433  f707							;Read Fire Button before, will make it start the game for now.
   1434  f707				   StartGame
   1435  f707		       a5 0c		      LDA	INPT4	;3
   1436  f709		       30 2b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1437  f70b		       a5 c0		      LDA	GameStatus	;3
   1438  f70d		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1439  f70f		       d0 25		      BNE	SkipGameStart
   1440  f711		       a5 c5		      LDA	GameMode
   1441  f713		       c9 10		      CMP	#MAX_GAME_MODE
   1442  f715		       d0 0b		      BNE	SetGameRunning
   1443  f717		       a9 00		      LDA	#0
   1444  f719		       85 c5		      STA	GameMode
   1445  f71b		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1446  f71d		       85 bc		      STA	SwitchDebounceCounter
   1447  f71f		       4c 36 f7 	      JMP	SkipGameStart
   1448  f722				   SetGameRunning
   1449  f722		       e6 c0		      INC	GameStatus
   1450  f724		       a9 00		      LDA	#0	;
   1451  f726		       85 8c		      STA	FrameCount0
   1452  f728		       85 8d		      STA	FrameCount1
   1453  f72a		       a9 0a		      LDA	#10
   1454  f72c		       85 19		      STA	AUDV0
   1455  f72e		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1456  f730		       85 d5		      STA	ScoreFontColor
   1457  f732		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1458  f734		       85 d6		      STA	ScoreFontColorHoldChange
   1459  f736				   SkipGameStart
   1460  f736
   1461  f736				   ReadSwitches
   1462  f736		       a6 bc		      LDX	SwitchDebounceCounter
   1463  f738		       d0 3c		      BNE	DecrementSwitchDebounceCounter
   1464  f73a		       a9 01		      LDA	#%00000001
   1465  f73c		       2c 82 02 	      BIT	SWCHB
   1466  f73f		       d0 07		      BNE	SkipReset
   1467  f741		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1468  f743		       85 bc		      STA	SwitchDebounceCounter
   1469  f745		       4c 80 f7 	      JMP	OverScanWaitBeforeReset
   1470  f748				   SkipReset
   1471  f748
   1472  f748				   GameModeSelect
   1473  f748		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1474  f74a		       d0 27		      BNE	SkipGameSelect
   1475  f74c		       20 d5 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1476  f74f				   ReadDpadParallax
   1477  f74f		       ad 80 02 	      LDA	SWCHA
   1478  f752		       29 f0		      AND	#%11110000
   1479  f754		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
   1480  f756		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
   1481  f758		       85 88		      STA	ParallaxMode
   1482  f75a				   ContinueGameSelect
   1483  f75a		       a9 02		      LDA	#%00000010
   1484  f75c		       2c 82 02 	      BIT	SWCHB
   1485  f75f		       d0 12		      BNE	SkipGameSelect
   1486  f761		       a6 c5		      LDX	GameMode
   1487  f763		       e0 10		      CPX	#MAX_GAME_MODE
   1488  f765		       f0 04		      BEQ	ResetGameMode
   1489  f767		       e8		      INX
   1490  f768		       4c 6d f7 	      JMP	StoreGameMode
   1491  f76b				   ResetGameMode
   1492  f76b		       a2 00		      LDX	#0
   1493  f76d				   StoreGameMode
   1494  f76d		       86 c5		      STX	GameMode
   1495  f76f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1496  f771		       85 bc		      STA	SwitchDebounceCounter
   1497  f773				   SkipGameSelect
   1498  f773		       4c 78 f7 	      JMP	EndReadSwitches
   1499  f776				   DecrementSwitchDebounceCounter
   1500  f776		       c6 bc		      DEC	SwitchDebounceCounter
   1501  f778				   EndReadSwitches
   1502  f778
   1503  f778				   OverScanWait
   1504  f778		       ad 84 02 	      LDA	INTIM
   1505  f77b		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1506  f77d		       4c e1 f0 	      JMP	MainLoop
   1507  f780
   1508  f780				   OverScanWaitBeforeReset
   1509  f780		       ad 84 02 	      LDA	INTIM
   1510  f783		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1511  f785		       4c 14 f0 	      JMP	Start
   1512  f788
   1513  f788				   Subroutines
   1514  f788
   1515  f788				   ClearAll		; 52
   1516  f788		       a9 00		      LDA	#0	;2
   1517  f78a		       85 1c		      STA	GRP1	;3
   1518  f78c		       85 1f		      STA	ENABL	;3
   1519  f78e		       85 1d		      STA	ENAM0	;3
   1520  f790		       85 1e		      STA	ENAM1	;3
   1521  f792		       85 84		      STA	GRP1Cache	;3
   1522  f794		       85 85		      STA	ENABLCache	;3
   1523  f796		       85 86		      STA	ENAM0Cache	;3
   1524  f798		       85 87		      STA	ENAM1Cache	;3
   1525  f79a
   1526  f79a				   ClearPF		; 26
   1527  f79a		       a9 00		      LDA	#0	;2
   1528  f79c				   ClearPFSkipLDA0
   1529  f79c		       85 0d		      STA	PF0	;3
   1530  f79e		       85 0e		      STA	PF1	;3
   1531  f7a0		       85 0f		      STA	PF2	;3	
   1532  f7a2		       85 81		      STA	PF0Cache	;3
   1533  f7a4		       85 82		      STA	PF1Cache	;3
   1534  f7a6		       85 83		      STA	PF2Cache	;3 
   1535  f7a8		       60		      RTS		;6
   1536  f7a9				   EndClearAll
   1537  f7a9
   1538  f7a9				   LoadAll		; 48
   1539  f7a9		       a5 81		      LDA	PF0Cache	;3
   1540  f7ab		       85 0d		      STA	PF0	;3
   1541  f7ad
   1542  f7ad		       a5 82		      LDA	PF1Cache	;3
   1543  f7af		       85 0e		      STA	PF1	;3
   1544  f7b1
   1545  f7b1		       a5 83		      LDA	PF2Cache	;3
   1546  f7b3		       85 0f		      STA	PF2	;3
   1547  f7b5
   1548  f7b5		       a5 84		      LDA	GRP1Cache	;3
   1549  f7b7		       85 1c		      STA	GRP1	;3
   1550  f7b9
   1551  f7b9		       a5 85		      LDA	ENABLCache	;3
   1552  f7bb		       85 1f		      STA	ENABL	;3
   1553  f7bd
   1554  f7bd		       a5 86		      LDA	ENAM0Cache	;3
   1555  f7bf		       85 1d		      STA	ENAM0	;3
   1556  f7c1
   1557  f7c1		       a5 87		      LDA	ENAM1Cache	;3
   1558  f7c3		       85 1e		      STA	ENAM1	;3
   1559  f7c5
   1560  f7c5		       60		      RTS		;6
   1561  f7c6				   EndLoadAll
   1562  f7c6
   1563  f7c6				   NextDifficulty
   1564  f7c6		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1565  f7c8		       29 01		      AND	#%00000001
   1566  f7ca		       d0 24		      BNE	CheckRandomDifficulty
   1567  f7cc
   1568  f7cc		       a5 c4		      LDA	CurrentDifficulty
   1569  f7ce		       18		      CLC
   1570  f7cf		       69 01		      ADC	#1
   1571  f7d1		       29 03		      AND	#%00000011	; 0 to 3
   1572  f7d3		       85 c4		      STA	CurrentDifficulty
   1573  f7d5
   1574  f7d5				   ConfigureDifficulty
   1575  f7d5		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1576  f7d7		       b9 e7 ff 	      LDA	TrafficChanceTable,Y
   1577  f7da		       85 c1		      STA	TrafficChance
   1578  f7dc		       b9 e3 ff 	      LDA	TrafficColorTable,Y
   1579  f7df		       85 c3		      STA	TrafficColor
   1580  f7e1
   1581  f7e1		       a5 c5		      LDA	GameMode	;
   1582  f7e3		       29 01		      AND	#%00000001
   1583  f7e5		       f0 03		      BEQ	UseNextDifficultyTime
   1584  f7e7		       4c eb f7 	      JMP	StoreDifficultyTime
   1585  f7ea				   UseNextDifficultyTime
   1586  f7ea		       c8		      INY
   1587  f7eb				   StoreDifficultyTime
   1588  f7eb		       b9 eb ff 	      LDA	TrafficTimeTable,Y
   1589  f7ee		       85 c2		      STA	CheckpointTime
   1590  f7f0
   1591  f7f0				   CheckRandomDifficulty
   1592  f7f0		       a5 c5		      LDA	GameMode
   1593  f7f2		       29 08		      AND	#%00001000	; Random difficulties
   1594  f7f4		       f0 09		      BEQ	ReturnFromNextDifficulty
   1595  f7f6				   RandomDifficulty
   1596  f7f6		       a6 8c		      LDX	FrameCount0
   1597  f7f8		       bd 00 fe 	      LDA	AesTable,X
   1598  f7fb							;EOR TrafficChance, no need, lets make life simple
   1599  f7fb		       29 3f		      AND	#%00111111
   1600  f7fd		       85 c1		      STA	TrafficChance
   1601  f7ff
   1602  f7ff				   ReturnFromNextDifficulty
   1603  f7ff		       60		      RTS
   1604  f800				   EndNextDifficulty
   1605  f800
   1606  f800				   DefaultOffsets
   1607  f800		       a9 20		      LDA	#$20
   1608  f802		       85 96		      STA	TrafficOffset1 + 2
   1609  f804		       a9 40		      LDA	#$40
   1610  f806		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1611  f808		       a9 60		      LDA	#$60
   1612  f80a		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1613  f80c		       a9 80		      LDA	#$80
   1614  f80e		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1615  f810		       a9 a0		      LDA	#$A0
   1616  f812		       60		      RTS
   1617  f813
   1618  f813				   PrintStaticText		; Preload X with the offset referent to StaticText
   1619  f813		       bd 00 ff 	      LDA	StaticText,X
   1620  f816		       85 d0		      STA	ScoreD0
   1621  f818		       e8		      INX
   1622  f819		       bd 00 ff 	      LDA	StaticText,X
   1623  f81c		       85 d1		      STA	ScoreD1
   1624  f81e		       e8		      INX
   1625  f81f		       bd 00 ff 	      LDA	StaticText,X
   1626  f822		       85 d2		      STA	ScoreD2
   1627  f824		       e8		      INX
   1628  f825		       bd 00 ff 	      LDA	StaticText,X
   1629  f828		       85 d3		      STA	ScoreD3
   1630  f82a		       e8		      INX
   1631  f82b		       bd 00 ff 	      LDA	StaticText,X
   1632  f82e		       85 d4		      STA	ScoreD4
   1633  f830		       60		      RTS
   1634  f831
   1635  f831				   HorizontalParallaxLoop
   1636  f831		       a9 ef		      LDA	#%11101111	; Clear the house
   1637  f833		       39 d8 00 	      AND	ParallaxCache,Y
   1638  f836		       99 d8 00 	      STA	ParallaxCache,Y
   1639  f839				   CalculateParallax0
   1640  f839		       98		      TYA
   1641  f83a		       18		      CLC
   1642  f83b		       65 91		      ADC	TrafficOffset0 + 1
   1643  f83d		       29 04		      AND	#%00000100
   1644  f83f		       f0 08		      BEQ	HasEmptySpace0
   1645  f841				   HasBorder0
   1646  f841		       b9 d8 00 	      LDA	ParallaxCache,Y
   1647  f844		       09 0f		      ORA	#%00001111
   1648  f846		       4c 4e f8 	      JMP	StoreParallax0
   1649  f849				   HasEmptySpace0
   1650  f849		       b9 d8 00 	      LDA	ParallaxCache,Y
   1651  f84c		       29 f0		      AND	#%11110000
   1652  f84e
   1653  f84e				   StoreParallax0
   1654  f84e		       99 d8 00 	      STA	ParallaxCache,Y
   1655  f851
   1656  f851				   CalculateParallax1
   1657  f851		       98		      TYA
   1658  f852		       18		      CLC
   1659  f853		       65 c7		      ADC	ParallaxOffset1 + 1
   1660  f855		       29 04		      AND	#%00000100
   1661  f857		       f0 08		      BEQ	HasEmptySpace1
   1662  f859				   HasBorder1
   1663  f859		       b9 d8 00 	      LDA	ParallaxCache,Y
   1664  f85c		       09 e0		      ORA	#%11100000
   1665  f85e		       4c 66 f8 	      JMP	StoreParallax1
   1666  f861				   HasEmptySpace1
   1667  f861		       b9 d8 00 	      LDA	ParallaxCache,Y
   1668  f864		       29 1f		      AND	#%00011111
   1669  f866
   1670  f866				   StoreParallax1
   1671  f866		       99 d8 00 	      STA	ParallaxCache,Y
   1672  f869
   1673  f869				   CalculateParallax2
   1674  f869		       98		      TYA
   1675  f86a		       18		      CLC
   1676  f86b		       65 c9		      ADC	ParallaxOffset2 + 1
   1677  f86d		       29 04		      AND	#%00000100
   1678  f86f		       f0 05		      BEQ	HasEmptySpace2
   1679  f871				   HasBorder2
   1680  f871		       a9 60		      LDA	#%01100000
   1681  f873		       4c 78 f8 	      JMP	StoreParallax2
   1682  f876				   HasEmptySpace2
   1683  f876		       a9 00		      LDA	#0
   1684  f878
   1685  f878				   StoreParallax2
   1686  f878		       99 f0 00 	      STA	ParallaxCache2,Y
   1687  f87b
   1688  f87b				   ContinueHorizontalParallaxLoop
   1689  f87b		       88		      DEY
   1690  f87c		       10 b3		      BPL	HorizontalParallaxLoop
   1691  f87e		       60		      RTS
   1692  f87f
   1693  f87f				   DefaultBorderLoop
   1694  f87f				   CalculateDefaultBorder
   1695  f87f		       98		      TYA
   1696  f880		       18		      CLC
   1697  f881		       65 91		      ADC	TrafficOffset0 + 1
   1698  f883		       29 04		      AND	#%00000100
   1699  f885		       f0 05		      BEQ	HasEmptySpace
   1700  f887				   HasBorder
   1701  f887		       a9 ff		      LDA	#$FF
   1702  f889		       4c 8e f8 	      JMP	StoreBorder
   1703  f88c				   HasEmptySpace
   1704  f88c		       a9 00		      LDA	#0
   1705  f88e
   1706  f88e				   StoreBorder
   1707  f88e		       99 d8 00 	      STA	ParallaxCache,Y
   1708  f891		       a9 00		      LDA	#0
   1709  f893		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1710  f896
   1711  f896				   ContinueDefaultBorderLoop
   1712  f896		       88		      DEY
   1713  f897		       10 e6		      BPL	DefaultBorderLoop
   1714  f899		       60		      RTS
   1715  f89a
   1716  f89a				   PrepareTachometerBorderLoop
   1717  f89a		       a5 8e		      LDA	Player0SpeedL
   1718  f89c		       4a		      LSR
   1719  f89d		       4a		      LSR
   1720  f89e		       4a		      LSR
   1721  f89f		       4a		      LSR
   1722  f8a0		       29 07		      AND	#%00000111
   1723  f8a2		       85 b1		      STA	Tmp1	; RPM
   1724  f8a4		       a6 a9		      LDX	CurrentCarId	; Y cannot be destroyed here
   1725  f8a6		       bd d9 ff 	      LDA	CarIdToMaxGear,X
   1726  f8a9		       85 b2		      STA	Tmp2	; Max Gear
   1727  f8ab
   1728  f8ab				   TachometerBorderLoop
   1729  f8ab		       98		      TYA
   1730  f8ac		       18		      CLC
   1731  f8ad		       65 91		      ADC	TrafficOffset0 + 1
   1732  f8af		       29 04		      AND	#%00000100
   1733  f8b1		       f0 10		      BEQ	HasBorderTac
   1734  f8b3		       a6 ad		      LDX	Gear
   1735  f8b5		       bd eb fd 	      LDA	TachometerGearLookup,X
   1736  f8b8		       99 d8 00 	      STA	ParallaxCache,Y
   1737  f8bb		       a9 00		      LDA	#0
   1738  f8bd		       99 f0 00 	      STA	ParallaxCache2,Y
   1739  f8c0		       4c e5 f8 	      JMP	ContinueBorderTac
   1740  f8c3				   HasBorderTac
   1741  f8c3		       a5 b2		      LDA	Tmp2	; Max Gear
   1742  f8c5		       c5 ad		      CMP	Gear	; Only on max speed
   1743  f8c7		       f0 11		      BEQ	FullBorderTac
   1744  f8c9		       a6 b1		      LDX	Tmp1
   1745  f8cb		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1746  f8ce		       99 d8 00 	      STA	ParallaxCache,Y
   1747  f8d1		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1748  f8d4		       99 f0 00 	      STA	ParallaxCache2,Y
   1749  f8d7		       4c e5 f8 	      JMP	ContinueBorderTac
   1750  f8da
   1751  f8da				   FullBorderTac
   1752  f8da		       a9 ff		      LDA	#$FF
   1753  f8dc		       99 d8 00 	      STA	ParallaxCache,Y
   1754  f8df		       99 f0 00 	      STA	ParallaxCache2,Y
   1755  f8e2		       4c e5 f8 	      JMP	ContinueBorderTac
   1756  f8e5
   1757  f8e5				   ContinueBorderTac
   1758  f8e5		       88		      DEY
   1759  f8e6		       10 c3		      BPL	TachometerBorderLoop
   1760  f8e8		       60		      RTS
   1761  f8e9
   1762  f8e9				   VerticalParallaxLoop
   1763  f8e9				   CalculateVerticalParallax0
   1764  f8e9		       98		      TYA
   1765  f8ea		       18		      CLC
   1766  f8eb		       65 91		      ADC	TrafficOffset0 + 1
   1767  f8ed		       29 06		      AND	#%00000110
   1768  f8ef		       d0 0b		      BNE	HasNoVerticalLine0
   1769  f8f1				   HasVerticalLine0
   1770  f8f1		       a9 ff		      LDA	#$FF
   1771  f8f3		       99 d8 00 	      STA	ParallaxCache,Y
   1772  f8f6		       99 f0 00 	      STA	ParallaxCache2,Y
   1773  f8f9		       4c 39 f9 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1774  f8fc				   HasNoVerticalLine0
   1775  f8fc		       a9 00		      LDA	#0
   1776  f8fe		       99 d8 00 	      STA	ParallaxCache,Y
   1777  f901		       99 f0 00 	      STA	ParallaxCache2,Y
   1778  f904
   1779  f904				   CalculateVerticalParallax1
   1780  f904		       98		      TYA
   1781  f905		       18		      CLC
   1782  f906		       65 c7		      ADC	ParallaxOffset1 + 1
   1783  f908		       29 07		      AND	#%00000111
   1784  f90a		       d0 0d		      BNE	HasNoVerticalLine1
   1785  f90c
   1786  f90c				   HasVerticalLine1
   1787  f90c		       a9 fc		      LDA	#%11111100
   1788  f90e		       99 d8 00 	      STA	ParallaxCache,Y
   1789  f911		       a9 c0		      LDA	#%11000000
   1790  f913		       99 f0 00 	      STA	ParallaxCache2,Y
   1791  f916		       4c 39 f9 	      JMP	ContinueVerticalParallaxLoop
   1792  f919				   HasNoVerticalLine1
   1793  f919		       a9 00		      LDA	#0
   1794  f91b		       99 d8 00 	      STA	ParallaxCache,Y
   1795  f91e		       99 f0 00 	      STA	ParallaxCache2,Y
   1796  f921
   1797  f921				   CalculateVerticalParallax2
   1798  f921		       98		      TYA
   1799  f922		       18		      CLC
   1800  f923		       65 c9		      ADC	ParallaxOffset2 + 1
   1801  f925		       29 07		      AND	#%00000111
   1802  f927		       d0 08		      BNE	HasNoVerticalLine2
   1803  f929
   1804  f929				   HasVerticalLine2
   1805  f929		       a9 f0		      LDA	#%11110000
   1806  f92b		       99 d8 00 	      STA	ParallaxCache,Y
   1807  f92e		       4c 39 f9 	      JMP	ContinueVerticalParallaxLoop
   1808  f931				   HasNoVerticalLine2
   1809  f931		       a9 00		      LDA	#0
   1810  f933		       99 d8 00 	      STA	ParallaxCache,Y
   1811  f936		       99 f0 00 	      STA	ParallaxCache2,Y
   1812  f939
   1813  f939				   ContinueVerticalParallaxLoop
   1814  f939		       88		      DEY
   1815  f93a		       10 ad		      BPL	VerticalParallaxLoop
   1816  f93c		       60		      RTS
   1817  f93d
   1818  f93d				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1819  f93d		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1820  f93f		       85 d5		      STA	ScoreFontColor
   1821  f941		       a9 01		      LDA	#1
   1822  f943		       85 d6		      STA	ScoreFontColorHoldChange
   1823  f945
   1824  f945		       a5 8d		      LDA	FrameCount1
   1825  f947		       29 07		      AND	#%00000111
   1826  f949		       85 b3		      STA	Tmp3
   1827  f94b							;0 is Zelda Name, (default)
   1828  f94b		       a9 01		      LDA	#1
   1829  f94d		       c5 b3		      CMP	Tmp3
   1830  f94f		       f0 38		      BEQ	PrintZeldaDateLeft
   1831  f951
   1832  f951		       a9 02		      LDA	#2
   1833  f953		       c5 b3		      CMP	Tmp3
   1834  f955		       f0 23		      BEQ	PrintPolvinhosLeft
   1835  f957
   1836  f957		       a9 03		      LDA	#3
   1837  f959		       c5 b3		      CMP	Tmp3
   1838  f95b		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1839  f95d
   1840  f95d		       a9 04		      LDA	#4
   1841  f95f		       c5 b3		      CMP	Tmp3
   1842  f961		       f0 1c		      BEQ	PrintIvonneLeft
   1843  f963
   1844  f963		       a9 05		      LDA	#5
   1845  f965		       c5 b3		      CMP	Tmp3
   1846  f967		       f0 2a		      BEQ	PrintIvonneDateLeft
   1847  f969
   1848  f969		       a9 06		      LDA	#6
   1849  f96b		       c5 b3		      CMP	Tmp3
   1850  f96d		       f0 15		      BEQ	PrintArtLeft
   1851  f96f
   1852  f96f		       a9 07		      LDA	#7
   1853  f971		       c5 b3		      CMP	Tmp3
   1854  f973		       f0 23		      BEQ	PrintLeonardoLeft
   1855  f975
   1856  f975				   PrintZeldaLeft
   1857  f975		       a2 28		      LDX	#<ZeldaTextLeft
   1858  f977		       4c 9d f9 	      JMP	ProcessPrintEasterEgg
   1859  f97a				   PrintPolvinhosLeft
   1860  f97a		       a2 3c		      LDX	#<PolvinhosTextLeft
   1861  f97c		       4c 9d f9 	      JMP	ProcessPrintEasterEgg
   1862  f97f				   PrintIvonneLeft
   1863  f97f		       a2 50		      LDX	#<IvonneTextLeft
   1864  f981		       4c 9d f9 	      JMP	ProcessPrintEasterEgg
   1865  f984				   PrintArtLeft
   1866  f984		       a2 64		      LDX	#<PaperArtTextLeft
   1867  f986		       4c 9d f9 	      JMP	ProcessPrintEasterEgg
   1868  f989
   1869  f989				   PrintZeldaDateLeft
   1870  f989		       a2 32		      LDX	#<ZeldaDateLeft
   1871  f98b		       4c 9d f9 	      JMP	ProcessPrintEasterEgg
   1872  f98e				   PrintPolvinhosDateLeft
   1873  f98e		       a2 46		      LDX	#<PolvinhosDateLeft
   1874  f990		       4c 9d f9 	      JMP	ProcessPrintEasterEgg
   1875  f993				   PrintIvonneDateLeft
   1876  f993		       a2 5a		      LDX	#<IvonneDateLeft
   1877  f995		       4c 9d f9 	      JMP	ProcessPrintEasterEgg
   1878  f998				   PrintLeonardoLeft
   1879  f998		       a2 6e		      LDX	#<LeonardoTextLeft
   1880  f99a		       4c 9d f9 	      JMP	ProcessPrintEasterEgg
   1881  f99d
   1882  f99d				   ProcessPrintEasterEgg
   1883  f99d		       a5 8c		      LDA	FrameCount0	;3
   1884  f99f		       29 01		      AND	#%00000001	;2
   1885  f9a1		       d0 03		      BNE	TranformIntoRightText
   1886  f9a3		       4c ab f9 	      JMP	PrintEasterEggText
   1887  f9a6				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1888  f9a6		       8a		      TXA
   1889  f9a7		       18		      CLC
   1890  f9a8		       69 05		      ADC	#HALF_TEXT_SIZE
   1891  f9aa		       aa		      TAX
   1892  f9ab
   1893  f9ab				   PrintEasterEggText
   1894  f9ab		       20 13 f8 	      JSR	PrintStaticText
   1895  f9ae		       60		      RTS
   1896  f9af
   1897  f9af				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1898  f9af		       a2 00		      LDX	#0
   1899  f9b1		       a0 04		      LDY	#FONT_OFFSET
   1900  f9b3
   1901  f9b3				   ScoreLoop		; 20 
   1902  f9b3		       85 02		      STA	WSYNC	;2
   1903  f9b5
   1904  f9b5		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1905  f9b7		       85 0d		      STA	PF0	;3
   1906  f9b9
   1907  f9b9		       a5 82		      LDA	PF1Cache	;3
   1908  f9bb		       85 0e		      STA	PF1	;3
   1909  f9bd
   1910  f9bd		       a5 83		      LDA	PF2Cache	;3
   1911  f9bf		       85 0f		      STA	PF2	;3
   1912  f9c1
   1913  f9c1				   DrawScoreD0		; 15
   1914  f9c1		       a6 d0		      LDX	ScoreD0	; 3
   1915  f9c3		       bd 00 fd 	      LDA	Font,X	;4
   1916  f9c6		       85 81		      STA	PF0Cache	;3
   1917  f9c8		       c6 d0		      DEC	ScoreD0	;5
   1918  f9ca
   1919  f9ca				   DrawScoreD1		; 23	
   1920  f9ca		       a6 d1		      LDX	ScoreD1	; 3
   1921  f9cc		       bd 00 fd 	      LDA	Font,X	;4
   1922  f9cf		       0a		      ASL		;2
   1923  f9d0		       0a		      ASL		;2
   1924  f9d1		       0a		      ASL		;2
   1925  f9d2		       0a		      ASL		;2
   1926  f9d3		       85 82		      STA	PF1Cache	;3
   1927  f9d5		       c6 d1		      DEC	ScoreD1	;5
   1928  f9d7
   1929  f9d7				   DrawScoreD2		; 20
   1930  f9d7		       a6 d2		      LDX	ScoreD2	; 3
   1931  f9d9		       bd 00 fd 	      LDA	Font,X	;4
   1932  f9dc		       29 0f		      AND	#%00001111	;2
   1933  f9de		       05 82		      ORA	PF1Cache	;3
   1934  f9e0		       85 82		      STA	PF1Cache	;3
   1935  f9e2		       c6 d2		      DEC	ScoreD2	;5
   1936  f9e4
   1937  f9e4				   DrawScoreD3		; 23
   1938  f9e4		       a6 d3		      LDX	ScoreD3	; 3
   1939  f9e6		       bd 00 fd 	      LDA	Font,X	;4
   1940  f9e9		       4a		      LSR		;2
   1941  f9ea		       4a		      LSR		;2
   1942  f9eb		       4a		      LSR		;2
   1943  f9ec		       4a		      LSR		;2
   1944  f9ed		       85 83		      STA	PF2Cache	;3
   1945  f9ef		       c6 d3		      DEC	ScoreD3	;5
   1946  f9f1
   1947  f9f1				   DrawScoreD4		; 20
   1948  f9f1		       a6 d4		      LDX	ScoreD4	; 3
   1949  f9f3		       bd 00 fd 	      LDA	Font,X	;4
   1950  f9f6		       29 f0		      AND	#%11110000	;2
   1951  f9f8		       05 83		      ORA	PF2Cache	;3
   1952  f9fa		       85 83		      STA	PF2Cache	;3
   1953  f9fc		       c6 d4		      DEC	ScoreD4	;5
   1954  f9fe
   1955  f9fe
   1956  f9fe		       88		      DEY		;2
   1957  f9ff		       10 b2		      BPL	ScoreLoop	;4
   1958  fa01
   1959  fa01		       85 02		      STA	WSYNC
   1960  fa03		       20 a9 f7 	      JSR	LoadAll
   1961  fa06		       60		      RTS		; 6
   1962  fa07
   1963  fa07				   PrintRightDecimalDigits
   1964  fa07		       b9 00 00 	      LDA	0,Y
   1965  fa0a		       4a		      LSR
   1966  fa0b		       4a		      LSR
   1967  fa0c		       4a		      LSR
   1968  fa0d		       4a		      LSR
   1969  fa0e		       aa		      TAX
   1970  fa0f		       bd be fd 	      LDA	FontLookup,X	;4
   1971  fa12		       85 d2		      STA	ScoreD2	;3
   1972  fa14
   1973  fa14		       b9 00 00 	      LDA	0,Y
   1974  fa17		       29 0f		      AND	#%00001111
   1975  fa19		       aa		      TAX
   1976  fa1a		       bd be fd 	      LDA	FontLookup,X	;4
   1977  fa1d		       85 d3		      STA	ScoreD3	;3
   1978  fa1f
   1979  fa1f		       c8		      INY
   1980  fa20		       b9 00 00 	      LDA	0,Y
   1981  fa23		       4a		      LSR
   1982  fa24		       4a		      LSR
   1983  fa25		       4a		      LSR
   1984  fa26		       4a		      LSR
   1985  fa27		       aa		      TAX
   1986  fa28		       bd be fd 	      LDA	FontLookup,X	;4
   1987  fa2b		       85 d0		      STA	ScoreD0	;3
   1988  fa2d
   1989  fa2d		       b9 00 00 	      LDA	0,Y
   1990  fa30		       29 0f		      AND	#%00001111
   1991  fa32		       aa		      TAX
   1992  fa33		       bd be fd 	      LDA	FontLookup,X	;4
   1993  fa36		       85 d1		      STA	ScoreD1	;3
   1994  fa38
   1995  fa38		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1996  fa3a		       85 d4		      STA	ScoreD4
   1997  fa3c		       60		      RTS
   1998  fa3d
   1999  fa3d				   PrintLastLeftDecimalDigits
   2000  fa3d		       b9 00 00 	      LDA	0,Y
   2001  fa40		       4a		      LSR
   2002  fa41		       4a		      LSR
   2003  fa42		       4a		      LSR
   2004  fa43		       4a		      LSR
   2005  fa44		       aa		      TAX
   2006  fa45		       bd be fd 	      LDA	FontLookup,X	;4
   2007  fa48		       85 d3		      STA	ScoreD3	;3
   2008  fa4a		       b9 00 00 	      LDA	0,Y
   2009  fa4d		       29 0f		      AND	#%00001111
   2010  fa4f		       aa		      TAX
   2011  fa50		       bd be fd 	      LDA	FontLookup,X	;4
   2012  fa53		       85 d4		      STA	ScoreD4	;3
   2013  fa55		       60		      RTS
   2014  fa56
   2015  fa56				   PrintZerosLeft
   2016  fa56		       a9 04		      LDA	#<C0 + FONT_OFFSET
   2017  fa58		       85 d2		      STA	ScoreD2
   2018  fa5a		       85 d3		      STA	ScoreD3
   2019  fa5c		       85 d4		      STA	ScoreD4
   2020  fa5e		       60		      RTS
   2021  fa5f
   2022  fa5f				   DrawGameOverScoreLine
   2023  fa5f		       85 02		      STA	WSYNC
   2024  fa61		       20 af f9 	      JSR	PrintScore
   2025  fa64		       85 02		      STA	WSYNC
   2026  fa66		       85 02		      STA	WSYNC
   2027  fa68		       20 9a f7 	      JSR	ClearPF
   2028  fa6b		       60		      RTS
   2029  fa6c
   2030  fa6c				   DrawGameOverScreenLeft
   2031  fa6c		       85 02		      STA	WSYNC
   2032  fa6e		       20 9a f7 	      JSR	ClearPF
   2033  fa71
   2034  fa71				   DrawBcdScoreLeft
   2035  fa71		       20 c0 fb 	      JSR	Sleep8Lines
   2036  fa74		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2037  fa76		       85 06		      STA	COLUP0
   2038  fa78		       85 02		      STA	WSYNC
   2039  fa7a		       a9 86		      LDA	#<CS + #FONT_OFFSET
   2040  fa7c		       85 d0		      STA	ScoreD0
   2041  fa7e
   2042  fa7e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2043  fa80		       85 d1		      STA	ScoreD1
   2044  fa82
   2045  fa82		       a5 b7		      LDA	ScoreBcd3
   2046  fa84		       29 0f		      AND	#%00001111
   2047  fa86		       aa		      TAX
   2048  fa87		       bd be fd 	      LDA	FontLookup,X	;4
   2049  fa8a		       85 d2		      STA	ScoreD2	;3
   2050  fa8c
   2051  fa8c		       a0 b6		      LDY	#ScoreBcd2
   2052  fa8e		       20 3d fa 	      JSR	PrintLastLeftDecimalDigits
   2053  fa91
   2054  fa91		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2055  fa94
   2056  fa94				   DrawTimerLeft
   2057  fa94		       20 c0 fb 	      JSR	Sleep8Lines
   2058  fa97		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2059  fa99		       85 06		      STA	COLUP0
   2060  fa9b		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   2061  fa9d		       85 d0		      STA	ScoreD0
   2062  fa9f		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2063  faa1		       85 d1		      STA	ScoreD1
   2064  faa3		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   2065  faa5		       85 d2		      STA	ScoreD2
   2066  faa7		       a0 bf		      LDY	#TimeBcd2
   2067  faa9		       85 02		      STA	WSYNC
   2068  faab		       20 3d fa 	      JSR	PrintLastLeftDecimalDigits
   2069  faae		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2070  fab1
   2071  fab1				   DrawGlideTimerLeft
   2072  fab1		       20 c0 fb 	      JSR	Sleep8Lines
   2073  fab4		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2074  fab6		       85 06		      STA	COLUP0
   2075  fab8		       85 02		      STA	WSYNC
   2076  faba		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2077  fabc		       85 d0		      STA	ScoreD0
   2078  fabe		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2079  fac0		       85 d1		      STA	ScoreD1
   2080  fac2		       20 56 fa 	      JSR	PrintZerosLeft
   2081  fac5		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2082  fac8
   2083  fac8				   DrawHitCountLeft
   2084  fac8		       20 c0 fb 	      JSR	Sleep8Lines
   2085  facb		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2086  facd		       85 06		      STA	COLUP0
   2087  facf		       85 02		      STA	WSYNC
   2088  fad1		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2089  fad3		       85 d0		      STA	ScoreD0
   2090  fad5		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2091  fad7		       85 d1		      STA	ScoreD1
   2092  fad9		       20 56 fa 	      JSR	PrintZerosLeft
   2093  fadc		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2094  fadf
   2095  fadf				   DrawCheckpointCountLeft
   2096  fadf		       20 c0 fb 	      JSR	Sleep8Lines
   2097  fae2		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2098  fae4		       85 06		      STA	COLUP0
   2099  fae6		       85 02		      STA	WSYNC
   2100  fae8		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2101  faea		       85 d0		      STA	ScoreD0
   2102  faec		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2103  faee		       85 d1		      STA	ScoreD1
   2104  faf0		       20 56 fa 	      JSR	PrintZerosLeft
   2105  faf3		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2106  faf6
   2107  faf6				   DrawGameVersionLeft
   2108  faf6		       20 c0 fb 	      JSR	Sleep8Lines
   2109  faf9		       a9 49		      LDA	#VERSION_COLOR
   2110  fafb		       85 06		      STA	COLUP0
   2111  fafd
   2112  fafd		       a5 c5		      LDA	GameMode
   2113  faff		       aa		      TAX
   2114  fb00		       bd be fd 	      LDA	FontLookup,X	;4
   2115  fb03		       85 d0		      STA	ScoreD0	;3
   2116  fb05
   2117  fb05		       a5 a9		      LDA	CurrentCarId
   2118  fb07		       aa		      TAX
   2119  fb08		       bd be fd 	      LDA	FontLookup,X	;4
   2120  fb0b		       85 d1		      STA	ScoreD1	;3
   2121  fb0d
   2122  fb0d		       a5 a6		      LDA	StartSWCHB
   2123  fb0f		       29 40		      AND	#%01000000	; P0 difficulty
   2124  fb11		       49 40		      EOR	#%01000000	; Reverse bytes
   2125  fb13		       2a		      ROL
   2126  fb14		       2a		      ROL
   2127  fb15		       2a		      ROL
   2128  fb16		       18		      CLC
   2129  fb17		       69 0a		      ADC	#10
   2130  fb19		       aa		      TAX
   2131  fb1a		       bd be fd 	      LDA	FontLookup,X	;4
   2132  fb1d		       85 d2		      STA	ScoreD2	;3
   2133  fb1f
   2134  fb1f		       a5 a6		      LDA	StartSWCHB
   2135  fb21		       29 80		      AND	#%10000000	; P0 difficulty
   2136  fb23		       49 80		      EOR	#%10000000	; Reverse bytes
   2137  fb25		       2a		      ROL
   2138  fb26		       2a		      ROL
   2139  fb27		       18		      CLC
   2140  fb28		       69 0a		      ADC	#10
   2141  fb2a		       aa		      TAX
   2142  fb2b		       bd be fd 	      LDA	FontLookup,X	;4
   2143  fb2e		       85 d3		      STA	ScoreD3	;3
   2144  fb30
   2145  fb30		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2146  fb32		       85 d4		      STA	ScoreD4
   2147  fb34
   2148  fb34		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2149  fb37
   2150  fb37		       4c 9d fb 	      JMP	FinalizeDrawGameOver
   2151  fb3a
   2152  fb3a				   DrawGameOverScreenRight
   2153  fb3a		       85 02		      STA	WSYNC
   2154  fb3c		       20 9a f7 	      JSR	ClearPF
   2155  fb3f
   2156  fb3f				   DrawBcdScoreRight
   2157  fb3f		       20 c0 fb 	      JSR	Sleep8Lines
   2158  fb42		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2159  fb44		       85 07		      STA	COLUP1
   2160  fb46		       85 02		      STA	WSYNC
   2161  fb48		       a0 b4		      LDY	#ScoreBcd0
   2162  fb4a		       20 07 fa 	      JSR	PrintRightDecimalDigits
   2163  fb4d
   2164  fb4d		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2165  fb50
   2166  fb50				   DrawTimerRight
   2167  fb50		       20 c0 fb 	      JSR	Sleep8Lines
   2168  fb53		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2169  fb55		       85 07		      STA	COLUP1
   2170  fb57		       a0 bd		      LDY	#TimeBcd0
   2171  fb59		       20 07 fa 	      JSR	PrintRightDecimalDigits
   2172  fb5c
   2173  fb5c		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2174  fb5f				   DrawGlideTimeRight
   2175  fb5f		       20 c0 fb 	      JSR	Sleep8Lines
   2176  fb62		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2177  fb64		       85 07		      STA	COLUP1
   2178  fb66		       a0 cd		      LDY	#GlideTimeBcd0
   2179  fb68		       20 07 fa 	      JSR	PrintRightDecimalDigits
   2180  fb6b		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2181  fb6e
   2182  fb6e				   DrawHitCountRight
   2183  fb6e		       20 c0 fb 	      JSR	Sleep8Lines
   2184  fb71		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2185  fb73		       85 07		      STA	COLUP1
   2186  fb75		       a0 cb		      LDY	#HitCountBcd0
   2187  fb77		       20 07 fa 	      JSR	PrintRightDecimalDigits
   2188  fb7a		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2189  fb7d
   2190  fb7d				   DrawCheckpointCountRight
   2191  fb7d		       20 c0 fb 	      JSR	Sleep8Lines
   2192  fb80		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2193  fb82		       85 07		      STA	COLUP1
   2194  fb84		       a0 a4		      LDY	#CheckpointBcd0
   2195  fb86		       20 07 fa 	      JSR	PrintRightDecimalDigits
   2196  fb89		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2197  fb8c
   2198  fb8c				   DrawVersionRight
   2199  fb8c		       20 c0 fb 	      JSR	Sleep8Lines
   2200  fb8f		       a9 49		      LDA	#VERSION_COLOR
   2201  fb91		       85 07		      STA	COLUP1
   2202  fb93		       85 02		      STA	WSYNC
   2203  fb95		       a2 78		      LDX	#<VersionText
   2204  fb97		       20 13 f8 	      JSR	PrintStaticText
   2205  fb9a		       20 5f fa 	      JSR	DrawGameOverScoreLine
   2206  fb9d
   2207  fb9d				   FinalizeDrawGameOver
   2208  fb9d		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2209  fb9f		       85 d5		      STA	ScoreFontColor
   2210  fba1		       20 b7 fb 	      JSR	Sleep4Lines
   2211  fba4		       20 c7 fb 	      JSR	Sleep32Lines
   2212  fba7		       20 c7 fb 	      JSR	Sleep32Lines
   2213  fbaa		       4c 65 f6 	      JMP	PrepareOverscan
   2214  fbad
   2215  fbad				   WaitForVblankEnd
   2216  fbad		       ad 84 02 	      LDA	INTIM
   2217  fbb0		       d0 fb		      BNE	WaitForVblankEnd
   2218  fbb2		       85 02		      STA	WSYNC
   2219  fbb4		       85 01		      STA	VBLANK
   2220  fbb6		       60		      RTS
   2221  fbb7
   2222  fbb7				   Sleep4Lines
   2223  fbb7		       85 02		      STA	WSYNC
   2224  fbb9		       85 02		      STA	WSYNC
   2225  fbbb		       85 02		      STA	WSYNC
   2226  fbbd		       85 02		      STA	WSYNC
   2227  fbbf		       60		      RTS
   2228  fbc0
   2229  fbc0				   Sleep8Lines
   2230  fbc0		       20 b7 fb 	      JSR	Sleep4Lines
   2231  fbc3		       20 b7 fb 	      JSR	Sleep4Lines
   2232  fbc6		       60		      RTS
   2233  fbc7
   2234  fbc7				   Sleep32Lines
   2235  fbc7		       20 c0 fb 	      JSR	Sleep8Lines
   2236  fbca		       20 c0 fb 	      JSR	Sleep8Lines
   2237  fbcd		       20 c0 fb 	      JSR	Sleep8Lines
   2238  fbd0		       20 c0 fb 	      JSR	Sleep8Lines
   2239  fbd3		       60		      RTS
   2240  fbd4
   2241  fbd4							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2242  fc00					      org	$FC00
   2243  fc00				   QrCode1
   2244  fc00		       1f		      .byte.b	#%00011111
   2245  fc01		       10		      .byte.b	#%00010000
   2246  fc02		       17		      .byte.b	#%00010111
   2247  fc03		       17		      .byte.b	#%00010111
   2248  fc04		       17		      .byte.b	#%00010111
   2249  fc05		       10		      .byte.b	#%00010000
   2250  fc06		       1f		      .byte.b	#%00011111
   2251  fc07		       00		      .byte.b	#%00000000
   2252  fc08		       17		      .byte.b	#%00010111
   2253  fc09		       10		      .byte.b	#%00010000
   2254  fc0a		       1d		      .byte.b	#%00011101
   2255  fc0b		       16		      .byte.b	#%00010110
   2256  fc0c		       03		      .byte.b	#%00000011
   2257  fc0d		       19		      .byte.b	#%00011001
   2258  fc0e		       13		      .byte.b	#%00010011
   2259  fc0f		       1c		      .byte.b	#%00011100
   2260  fc10		       0b		      .byte.b	#%00001011
   2261  fc11		       00		      .byte.b	#%00000000
   2262  fc12		       1f		      .byte.b	#%00011111
   2263  fc13		       10		      .byte.b	#%00010000
   2264  fc14		       17		      .byte.b	#%00010111
   2265  fc15		       17		      .byte.b	#%00010111
   2266  fc16		       17		      .byte.b	#%00010111
   2267  fc17		       10		      .byte.b	#%00010000
   2268  fc18		       1f		      .byte.b	#%00011111
   2269  fc19
   2270  fc19				   QrCode2
   2271  fc19		       c3		      .byte.b	#%11000011
   2272  fc1a		       9a		      .byte.b	#%10011010
   2273  fc1b		       82		      .byte.b	#%10000010
   2274  fc1c		       da		      .byte.b	#%11011010
   2275  fc1d		       aa		      .byte.b	#%10101010
   2276  fc1e		       ca		      .byte.b	#%11001010
   2277  fc1f		       f3		      .byte.b	#%11110011
   2278  fc20		       78		      .byte.b	#%01111000
   2279  fc21		       df		      .byte.b	#%11011111
   2280  fc22		       fc		      .byte.b	#%11111100
   2281  fc23		       c7		      .byte.b	#%11000111
   2282  fc24		       98		      .byte.b	#%10011000
   2283  fc25		       23		      .byte.b	#%00100011
   2284  fc26		       b9		      .byte.b	#%10111001
   2285  fc27		       d2		      .byte.b	#%11010010
   2286  fc28		       30		      .byte.b	#%00110000
   2287  fc29		       eb		      .byte.b	#%11101011
   2288  fc2a		       28		      .byte.b	#%00101000
   2289  fc2b		       ab		      .byte.b	#%10101011
   2290  fc2c		       72		      .byte.b	#%01110010
   2291  fc2d		       fa		      .byte.b	#%11111010
   2292  fc2e		       7a		      .byte.b	#%01111010
   2293  fc2f		       32		      .byte.b	#%00110010
   2294  fc30		       3a		      .byte.b	#%00111010
   2295  fc31		       63		      .byte.b	#%01100011
   2296  fc32
   2297  fc32				   QrCode3
   2298  fc32		       98		      .byte.b	#%10011000
   2299  fc33		       c3		      .byte.b	#%11000011
   2300  fc34		       39		      .byte.b	#%00111001
   2301  fc35		       34		      .byte.b	#%00110100
   2302  fc36		       ff		      .byte.b	#%11111111
   2303  fc37		       71		      .byte.b	#%01110001
   2304  fc38		       d5		      .byte.b	#%11010101
   2305  fc39		       d1		      .byte.b	#%11010001
   2306  fc3a		       5f		      .byte.b	#%01011111
   2307  fc3b		       26		      .byte.b	#%00100110
   2308  fc3c		       2d		      .byte.b	#%00101101
   2309  fc3d		       e9		      .byte.b	#%11101001
   2310  fc3e		       d6		      .byte.b	#%11010110
   2311  fc3f		       26		      .byte.b	#%00100110
   2312  fc40		       ba		      .byte.b	#%10111010
   2313  fc41		       03		      .byte.b	#%00000011
   2314  fc42		       dd		      .byte.b	#%11011101
   2315  fc43		       e0		      .byte.b	#%11100000
   2316  fc44		       57		      .byte.b	#%01010111
   2317  fc45		       14		      .byte.b	#%00010100
   2318  fc46		       35		      .byte.b	#%00110101
   2319  fc47		       e5		      .byte.b	#%11100101
   2320  fc48		       b5		      .byte.b	#%10110101
   2321  fc49		       d4		      .byte.b	#%11010100
   2322  fc4a		       97		      .byte.b	#%10010111
   2323  fc4b
   2324  fc4b				   QrCode4
   2325  fc4b		       09		      .byte.b	#%00001001
   2326  fc4c		       0e		      .byte.b	#%00001110
   2327  fc4d		       0f		      .byte.b	#%00001111
   2328  fc4e		       0c		      .byte.b	#%00001100
   2329  fc4f		       0c		      .byte.b	#%00001100
   2330  fc50		       08		      .byte.b	#%00001000
   2331  fc51		       08		      .byte.b	#%00001000
   2332  fc52		       06		      .byte.b	#%00000110
   2333  fc53		       06		      .byte.b	#%00000110
   2334  fc54		       0b		      .byte.b	#%00001011
   2335  fc55		       0f		      .byte.b	#%00001111
   2336  fc56		       04		      .byte.b	#%00000100
   2337  fc57		       08		      .byte.b	#%00001000
   2338  fc58		       0f		      .byte.b	#%00001111
   2339  fc59		       09		      .byte.b	#%00001001
   2340  fc5a		       07		      .byte.b	#%00000111
   2341  fc5b		       05		      .byte.b	#%00000101
   2342  fc5c		       00		      .byte.b	#%00000000
   2343  fc5d		       0f		      .byte.b	#%00001111
   2344  fc5e		       08		      .byte.b	#%00001000
   2345  fc5f		       0b		      .byte.b	#%00001011
   2346  fc60		       0b		      .byte.b	#%00001011
   2347  fc61		       0b		      .byte.b	#%00001011
   2348  fc62		       08		      .byte.b	#%00001000
   2349  fc63		       0f		      .byte.b	#%00001111
   2350  fc64
   2351  fc64							; Moved here because of rom space.
   2352  fc64							; The only SBR in constants space
   2353  fc64				   DrawQrCode
   2354  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2355  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2356  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2357  fc6a		       85 0a		      STA	CTRLPF
   2358  fc6c		       20 88 f7 	      JSR	ClearAll	; To be 100 sure!
   2359  fc6f		       ad 82 02 	      LDA	SWCHB
   2360  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2361  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2362  fc76		       86 09		      STX	COLUBK
   2363  fc78		       84 08		      STY	COLUPF
   2364  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2365  fc7d				   StoreReversedQrCode
   2366  fc7d		       86 08		      STX	COLUPF
   2367  fc7f		       84 09		      STY	COLUBK
   2368  fc81
   2369  fc81				   ContinueQrCode
   2370  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2371  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2372  fc85		       20 ad fb 	      JSR	WaitForVblankEnd
   2373  fc88		       20 c0 fb 	      JSR	Sleep8Lines
   2374  fc8b		       20 c0 fb 	      JSR	Sleep8Lines
   2375  fc8e		       20 c0 fb 	      JSR	Sleep8Lines
   2376  fc91
   2377  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2378  fc91		       85 02		      STA	WSYNC
   2379  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2380  fc96		       85 0e		      STA	PF1	;3
   2381  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2382  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2384  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2385  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2386  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2387  fcb3		       85 0e		      STA	PF1	;3
   2388  fcb5
   2389  fcb5		       ca		      DEX		;2
   2390  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2391  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2392  fcba		       88		      DEY		;2
   2393  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2394  fcbd
   2395  fcbd				   EndQrCodeLoop
   2396  fcbd		       85 02		      STA	WSYNC	;
   2397  fcbf		       a9 00		      LDA	#0
   2398  fcc1		       85 0e		      STA	PF1	;3
   2399  fcc3		       85 0f		      STA	PF2	;3
   2400  fcc5
   2401  fcc5		       20 c7 fb 	      JSR	Sleep32Lines
   2402  fcc8		       4c 65 f6 	      JMP	PrepareOverscan
   2403  fccb
   2404  fd00					      org	$FD00
   2405  fd00				   Font
   2406  fd00				   C0
   2407  fd00		       e7		      .byte.b	#%11100111	;
   2408  fd01		       a5		      .byte.b	#%10100101	; 
   2409  fd02		       a5		      .byte.b	#%10100101	; 
   2410  fd03		       a5		      .byte.b	#%10100101	; 
   2411  fd04		       e7		      .byte.b	#%11100111	;	
   2412  fd05				   C1
   2413  fd05		       e7		      .byte.b	#%11100111	;
   2414  fd06		       42		      .byte.b	#%01000010	; 
   2415  fd07		       42		      .byte.b	#%01000010	; 
   2416  fd08		       42		      .byte.b	#%01000010	; 
   2417  fd09		       66		      .byte.b	#%01100110	;
   2418  fd0a				   C2
   2419  fd0a		       e7		      .byte.b	#%11100111	;
   2420  fd0b		       24		      .byte.b	#%00100100	; 
   2421  fd0c		       e7		      .byte.b	#%11100111	; 
   2422  fd0d		       81		      .byte.b	#%10000001	; 
   2423  fd0e		       e7		      .byte.b	#%11100111	;
   2424  fd0f				   C3
   2425  fd0f		       e7		      .byte.b	#%11100111	;
   2426  fd10		       81		      .byte.b	#%10000001	; 
   2427  fd11		       e7		      .byte.b	#%11100111	; 
   2428  fd12		       81		      .byte.b	#%10000001	; 
   2429  fd13		       e7		      .byte.b	#%11100111	;
   2430  fd14				   C4
   2431  fd14		       81		      .byte.b	#%10000001	;
   2432  fd15		       81		      .byte.b	#%10000001	; 
   2433  fd16		       e7		      .byte.b	#%11100111	; 
   2434  fd17		       a5		      .byte.b	#%10100101	; 
   2435  fd18		       a5		      .byte.b	#%10100101	;
   2436  fd19				   C5
   2437  fd19		       e7		      .byte.b	#%11100111	;
   2438  fd1a		       81		      .byte.b	#%10000001	; 
   2439  fd1b		       e7		      .byte.b	#%11100111	; 
   2440  fd1c		       24		      .byte.b	#%00100100	; 
   2441  fd1d		       e7		      .byte.b	#%11100111	;
   2442  fd1e				   C6
   2443  fd1e		       e7		      .byte.b	#%11100111	;
   2444  fd1f		       a5		      .byte.b	#%10100101	; 
   2445  fd20		       e7		      .byte.b	#%11100111	; 
   2446  fd21		       24		      .byte.b	#%00100100	; 
   2447  fd22		       e7		      .byte.b	#%11100111	;
   2448  fd23				   C7
   2449  fd23		       81		      .byte.b	#%10000001	;
   2450  fd24		       81		      .byte.b	#%10000001	; 
   2451  fd25		       81		      .byte.b	#%10000001	; 
   2452  fd26		       81		      .byte.b	#%10000001	; 
   2453  fd27		       e7		      .byte.b	#%11100111	;
   2454  fd28				   C8
   2455  fd28		       e7		      .byte.b	#%11100111	;
   2456  fd29		       a5		      .byte.b	#%10100101	; 
   2457  fd2a		       e7		      .byte.b	#%11100111	; 
   2458  fd2b		       a5		      .byte.b	#%10100101	; 
   2459  fd2c		       e7		      .byte.b	#%11100111	;
   2460  fd2d				   C9
   2461  fd2d		       e7		      .byte.b	#%11100111	;
   2462  fd2e		       81		      .byte.b	#%10000001	; 
   2463  fd2f		       e7		      .byte.b	#%11100111	; 
   2464  fd30		       a5		      .byte.b	#%10100101	; 
   2465  fd31		       e7		      .byte.b	#%11100111	;
   2466  fd32				   CA
   2467  fd32		       a5		      .byte.b	#%10100101	;
   2468  fd33		       a5		      .byte.b	#%10100101	; 
   2469  fd34		       e7		      .byte.b	#%11100111	; 
   2470  fd35		       a5		      .byte.b	#%10100101	; 
   2471  fd36		       e7		      .byte.b	#%11100111	;
   2472  fd37				   CB
   2473  fd37		       66		      .byte.b	#%01100110	;
   2474  fd38		       a5		      .byte.b	#%10100101	; 
   2475  fd39		       66		      .byte.b	#%01100110	; 
   2476  fd3a		       a5		      .byte.b	#%10100101	;
   2477  fd3b		       66		      .byte.b	#%01100110	;
   2478  fd3c				   CC
   2479  fd3c		       e7		      .byte.b	#%11100111	;
   2480  fd3d		       24		      .byte.b	#%00100100	; 
   2481  fd3e		       24		      .byte.b	#%00100100	; 
   2482  fd3f		       24		      .byte.b	#%00100100	;
   2483  fd40		       e7		      .byte.b	#%11100111	;
   2484  fd41
   2485  fd41				   CD
   2486  fd41		       66		      .byte.b	#%01100110	;
   2487  fd42		       a5		      .byte.b	#%10100101	; 
   2488  fd43		       a5		      .byte.b	#%10100101	; 
   2489  fd44		       a5		      .byte.b	#%10100101	;
   2490  fd45		       66		      .byte.b	#%01100110	;
   2491  fd46
   2492  fd46				   CE
   2493  fd46		       e7		      .byte.b	#%11100111	;
   2494  fd47		       24		      .byte.b	#%00100100	; 
   2495  fd48		       e7		      .byte.b	#%11100111	; 
   2496  fd49		       24		      .byte.b	#%00100100	; 
   2497  fd4a		       e7		      .byte.b	#%11100111	;
   2498  fd4b
   2499  fd4b				   CF
   2500  fd4b		       24		      .byte.b	#%00100100	;
   2501  fd4c		       24		      .byte.b	#%00100100	; 
   2502  fd4d		       e7		      .byte.b	#%11100111	; 
   2503  fd4e		       24		      .byte.b	#%00100100	; 
   2504  fd4f		       e7		      .byte.b	#%11100111	;
   2505  fd50
   2506  fd50				   CG
   2507  fd50		       c3		      .byte.b	#%11000011	;
   2508  fd51		       a5		      .byte.b	#%10100101	; 
   2509  fd52		       a5		      .byte.b	#%10100101	; 
   2510  fd53		       24		      .byte.b	#%00100100	; 
   2511  fd54		       c3		      .byte.b	#%11000011	;	
   2512  fd55
   2513  fd55				   CH
   2514  fd55		       a5		      .byte.b	#%10100101	;
   2515  fd56		       a5		      .byte.b	#%10100101	; 
   2516  fd57		       e7		      .byte.b	#%11100111	; 
   2517  fd58		       a5		      .byte.b	#%10100101	; 
   2518  fd59		       a5		      .byte.b	#%10100101	;
   2519  fd5a
   2520  fd5a				   CK
   2521  fd5a		       a5		      .byte.b	#%10100101	;
   2522  fd5b		       a5		      .byte.b	#%10100101	; 
   2523  fd5c		       66		      .byte.b	#%01100110	; 
   2524  fd5d		       a5		      .byte.b	#%10100101	; 
   2525  fd5e		       a5		      .byte.b	#%10100101	;
   2526  fd5f
   2527  fd5f				   CL
   2528  fd5f		       e7		      .byte.b	#%11100111	;
   2529  fd60		       24		      .byte.b	#%00100100	; 
   2530  fd61		       24		      .byte.b	#%00100100	; 
   2531  fd62		       24		      .byte.b	#%00100100	; 
   2532  fd63		       24		      .byte.b	#%00100100	;
   2533  fd64
   2534  fd64				   CI
   2535  fd64		       42		      .byte.b	#%01000010	;
   2536  fd65		       42		      .byte.b	#%01000010	; 
   2537  fd66		       42		      .byte.b	#%01000010	; 
   2538  fd67		       42		      .byte.b	#%01000010	; 
   2539  fd68		       42		      .byte.b	#%01000010	;
   2540  fd69
   2541  fd69				   CM
   2542  fd69		       a5		      .byte.b	#%10100101	;
   2543  fd6a		       a5		      .byte.b	#%10100101	; 
   2544  fd6b		       a5		      .byte.b	#%10100101	; 
   2545  fd6c		       e7		      .byte.b	#%11100111	; 
   2546  fd6d		       a5		      .byte.b	#%10100101	;
   2547  fd6e
   2548  fd6e				   CN
   2549  fd6e		       a5		      .byte.b	#%10100101	;
   2550  fd6f		       a5		      .byte.b	#%10100101	; 
   2551  fd70		       a5		      .byte.b	#%10100101	; 
   2552  fd71		       a5		      .byte.b	#%10100101	; 
   2553  fd72		       66		      .byte.b	#%01100110	;	
   2554  fd73
   2555  fd73
   2556  fd73				   CO
   2557  fd73		       42		      .byte.b	#%01000010	;
   2558  fd74		       a5		      .byte.b	#%10100101	; 
   2559  fd75		       a5		      .byte.b	#%10100101	; 
   2560  fd76		       a5		      .byte.b	#%10100101	; 
   2561  fd77		       42		      .byte.b	#%01000010	;	
   2562  fd78
   2563  fd78				   CP
   2564  fd78		       24		      .byte.b	#%00100100	;
   2565  fd79		       24		      .byte.b	#%00100100	; 
   2566  fd7a		       e7		      .byte.b	#%11100111	; 
   2567  fd7b		       a5		      .byte.b	#%10100101	; 
   2568  fd7c		       e7		      .byte.b	#%11100111	;
   2569  fd7d
   2570  fd7d				   CR
   2571  fd7d		       a5		      .byte.b	#%10100101	;
   2572  fd7e		       a5		      .byte.b	#%10100101	; 
   2573  fd7f		       66		      .byte.b	#%01100110	; 
   2574  fd80		       a5		      .byte.b	#%10100101	; 
   2575  fd81		       66		      .byte.b	#%01100110	;
   2576  fd82
   2577  fd82				   CS
   2578  fd82		       66		      .byte.b	#%01100110	;
   2579  fd83		       81		      .byte.b	#%10000001	; 
   2580  fd84		       42		      .byte.b	#%01000010	; 
   2581  fd85		       24		      .byte.b	#%00100100	; 
   2582  fd86		       c3		      .byte.b	#%11000011	;
   2583  fd87
   2584  fd87				   CT
   2585  fd87		       42		      .byte.b	#%01000010	;
   2586  fd88		       42		      .byte.b	#%01000010	; 
   2587  fd89		       42		      .byte.b	#%01000010	; 
   2588  fd8a		       42		      .byte.b	#%01000010	; 
   2589  fd8b		       e7		      .byte.b	#%11100111	;
   2590  fd8c
   2591  fd8c				   CV
   2592  fd8c		       42		      .byte.b	#%01000010	;
   2593  fd8d		       a5		      .byte.b	#%10100101	; 
   2594  fd8e		       a5		      .byte.b	#%10100101	; 
   2595  fd8f		       a5		      .byte.b	#%10100101	; 
   2596  fd90		       a5		      .byte.b	#%10100101	;	
   2597  fd91
   2598  fd91				   CY
   2599  fd91		       42		      .byte.b	#%01000010	;
   2600  fd92		       42		      .byte.b	#%01000010	; 
   2601  fd93		       42		      .byte.b	#%01000010	; 
   2602  fd94		       a5		      .byte.b	#%10100101	; 
   2603  fd95		       a5		      .byte.b	#%10100101	;
   2604  fd96
   2605  fd96				   CW
   2606  fd96		       a5		      .byte.b	#%10100101	;
   2607  fd97		       e7		      .byte.b	#%11100111	; 
   2608  fd98		       a5		      .byte.b	#%10100101	; 
   2609  fd99		       a5		      .byte.b	#%10100101	; 
   2610  fd9a		       a5		      .byte.b	#%10100101	;
   2611  fd9b
   2612  fd9b				   CZ
   2613  fd9b		       e7		      .byte.b	#%11100111	;
   2614  fd9c		       24		      .byte.b	#%00100100	; 
   2615  fd9d		       42		      .byte.b	#%01000010	; 
   2616  fd9e		       81		      .byte.b	#%10000001	; 
   2617  fd9f		       e7		      .byte.b	#%11100111	;
   2618  fda0
   2619  fda0				   Pipe
   2620  fda0		       42		      .byte.b	#%01000010	;
   2621  fda1		       00		      .byte.b	#%00000000	; 
   2622  fda2		       42		      .byte.b	#%01000010	; 
   2623  fda3		       00		      .byte.b	#%00000000	; 
   2624  fda4		       42		      .byte.b	#%01000010	;
   2625  fda5
   2626  fda5				   Exclamation
   2627  fda5		       42		      .byte.b	#%01000010	;
   2628  fda6		       00		      .byte.b	#%00000000	; 
   2629  fda7		       42		      .byte.b	#%01000010	; 
   2630  fda8		       42		      .byte.b	#%01000010	; 
   2631  fda9		       42		      .byte.b	#%01000010	;
   2632  fdaa
   2633  fdaa				   Dot
   2634  fdaa		       42		      .byte.b	#%01000010	;
   2635  fdab		       42		      .byte.b	#%01000010	; 
   2636  fdac		       00		      .byte.b	#%00000000	; 
   2637  fdad		       00		      .byte.b	#%00000000	; 
   2638  fdae		       00		      .byte.b	#%00000000	;
   2639  fdaf
   2640  fdaf				   Colon
   2641  fdaf		       42		      .byte.b	#%01000010	;
   2642  fdb0		       42		      .byte.b	#%01000010	; 
   2643  fdb1		       00		      .byte.b	#%00000000	; 
   2644  fdb2		       42		      .byte.b	#%01000010	; 
   2645  fdb3		       42		      .byte.b	#%01000010	;
   2646  fdb4
   2647  fdb4				   Triangle
   2648  fdb4		       81		      .byte.b	#%10000001	;
   2649  fdb5		       c3		      .byte.b	#%11000011	; 
   2650  fdb6		       e7		      .byte.b	#%11100111	; 
   2651  fdb7		       c3		      .byte.b	#%11000011	; 
   2652  fdb8		       81		      .byte.b	#%10000001	;
   2653  fdb9
   2654  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2655  fdb9		       00		      .byte.b	#0	;
   2656  fdba		       00		      .byte.b	#0	;
   2657  fdbb		       00		      .byte.b	#0	;
   2658  fdbc		       00		      .byte.b	#0	;
   2659  fdbd		       00		      .byte.b	#0	;
   2660  fdbe
   2661  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2662  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2663  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2664  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2665  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2666  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2667  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2668  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2669  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2670  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2671  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2672  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2673  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2674  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2675  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2676  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2677  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2678  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2679  fdcf
   2680  fdcf				   EngineSoundType
   2681  fdcf		       02		      .byte.b	#2
   2682  fdd0		       02		      .byte.b	#2
   2683  fdd1		       0e		      .byte.b	#14
   2684  fdd2		       06		      .byte.b	#6
   2685  fdd3		       06		      .byte.b	#6
   2686  fdd4		       0e		      .byte.b	#14
   2687  fdd5
   2688  fdd5				   EngineBaseFrequence
   2689  fdd5		       1f		      .byte.b	#31
   2690  fdd6		       15		      .byte.b	#21
   2691  fdd7		       14		      .byte.b	#20
   2692  fdd8		       1f		      .byte.b	#31
   2693  fdd9		       16		      .byte.b	#22
   2694  fdda		       03		      .byte.b	#3
   2695  fddb
   2696  fddb				   TachometerSizeLookup1
   2697  fddb		       1f		      .byte.b	#%00011111
   2698  fddc		       3f		      .byte.b	#%00111111
   2699  fddd		       7f		      .byte.b	#%01111111
   2700  fdde		       ff		      .byte.b	#%11111111
   2701  fddf		       ff		      .byte.b	#%11111111
   2702  fde0		       ff		      .byte.b	#%11111111
   2703  fde1		       ff		      .byte.b	#%11111111
   2704  fde2		       ff		      .byte.b	#%11111111
   2705  fde3
   2706  fde3				   TachometerSizeLookup2
   2707  fde3		       00		      .byte.b	#%00000000
   2708  fde4		       00		      .byte.b	#%00000000
   2709  fde5		       00		      .byte.b	#%00000000
   2710  fde6		       00		      .byte.b	#%00000000
   2711  fde7		       80		      .byte.b	#%10000000
   2712  fde8		       c0		      .byte.b	#%11000000
   2713  fde9		       e0		      .byte.b	#%11100000
   2714  fdea		       f0		      .byte.b	#%11110000
   2715  fdeb
   2716  fdeb				   TachometerGearLookup
   2717  fdeb		       01		      .byte.b	#%00000001
   2718  fdec		       02		      .byte.b	#%00000010
   2719  fded		       04		      .byte.b	#%00000100
   2720  fdee		       08		      .byte.b	#%00001000
   2721  fdef		       10		      .byte.b	#%00010000
   2722  fdf0		       30		      .byte.b	#%00110000
   2723  fdf1
   2724  fe00					      org	$FE00
   2725  fe00				   AesTable
   2726  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2727  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2728  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2729  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2730  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2731  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2732  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2733  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2734  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2735  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2736  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2737  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2738  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2739  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2740  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2741  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2742  ff00
   2743  ff00							; From FF00 to FFFB (122 bytes) to use here
   2744  ff00
   2745  ff00				   StaticText		; All static text must be on the same MSB block. 
   2746  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2747  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2748  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2749  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2750  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2751  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2752  ff05
   2753  ff05				   HellwayLeftText
   2754  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2755  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2756  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2757  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2758  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2759  ff0a
   2760  ff0a				   HellwayRightText
   2761  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2762  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2763  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2764  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2765  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2766  ff0f
   2767  ff0f				   OpbText
   2768  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2769  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2770  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2771  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2772  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2773  ff14
   2774  ff14				   YearText
   2775  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2776  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2777  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2778  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2779  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2780  ff19
   2781  ff19				   GameText
   2782  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2783  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2784  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2785  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2786  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2787  ff1e
   2788  ff1e				   OverText
   2789  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2790  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2791  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2792  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2793  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2794  ff23				   GoText
   2795  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2796  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2797  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2798  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2799  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2800  ff28
   2801  ff28				   ZeldaTextLeft
   2802  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2803  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2804  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2805  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2806  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2807  ff2d
   2808  ff2d				   ZeldaTextRight
   2809  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2810  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2811  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2812  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2813  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2814  ff32
   2815  ff32				   ZeldaDateLeft
   2816  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2817  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2818  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2819  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2820  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2821  ff37
   2822  ff37				   ZeldaDateRight
   2823  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2824  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2825  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2826  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2827  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2828  ff3c
   2829  ff3c				   PolvinhosTextLeft
   2830  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2831  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2832  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2833  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2834  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2835  ff41
   2836  ff41				   PolvinhosTextRight
   2837  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2838  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2839  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2840  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2841  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2842  ff46
   2843  ff46				   PolvinhosDateLeft
   2844  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2845  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2846  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2847  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2848  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2849  ff4b
   2850  ff4b				   PolvinhosDateRight
   2851  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2852  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2853  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2854  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2855  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2856  ff50
   2857  ff50				   IvonneTextLeft
   2858  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2859  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2860  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2861  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2862  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2863  ff55
   2864  ff55				   IvonneTextRight
   2865  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2866  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2867  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2868  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2869  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2870  ff5a
   2871  ff5a				   IvonneDateLeft
   2872  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2873  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2874  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2875  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2876  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2877  ff5f
   2878  ff5f				   IvonneDateRight
   2879  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2880  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2881  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2882  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2883  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2884  ff64
   2885  ff64				   PaperArtTextLeft
   2886  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2887  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2888  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2889  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2890  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2891  ff69
   2892  ff69				   PaperArtTextRight
   2893  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2894  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2895  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2896  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2897  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2898  ff6e
   2899  ff6e				   LeonardoTextLeft
   2900  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2901  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2902  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2903  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2904  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2905  ff73
   2906  ff73				   LeonardoTextRight
   2907  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2908  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2909  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2910  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2911  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2912  ff78
   2913  ff78				   VersionText
   2914  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2915  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2916  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2917  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2918  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2919  ff7d
   2920  ff7d
   2921  ff7d				   EndStaticText
   2922  ff7d
   2923  ff7d				   CarSprite0		; Upside down, Original Car
   2924  ff7d		       00 00 00 00*	      ds	7
   2925  ff84		       7e		      .byte.b	#%01111110
   2926  ff85		       24		      .byte.b	#%00100100
   2927  ff86		       bd		      .byte.b	#%10111101
   2928  ff87		       3c		      .byte.b	#%00111100
   2929  ff88		       bd		      .byte.b	#%10111101
   2930  ff89		       3c		      .byte.b	#%00111100
   2931  ff8a
   2932  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2933  ff8a		       00 00 00 00*	      ds	7
   2934  ff91		       bd		      .byte.b	#%10111101
   2935  ff92		       7e		      .byte.b	#%01111110
   2936  ff93		       5a		      .byte.b	#%01011010
   2937  ff94		       66		      .byte.b	#%01100110
   2938  ff95		       bd		      .byte.b	#%10111101
   2939  ff96		       3c		      .byte.b	#%00111100
   2940  ff97
   2941  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2942  ff97		       00 00 00 00*	      ds	7
   2943  ff9e		       7e		      .byte.b	#%01111110
   2944  ff9f		       a5		      .byte.b	#%10100101
   2945  ffa0		       42		      .byte.b	#%01000010
   2946  ffa1		       42		      .byte.b	#%01000010
   2947  ffa2		       bd		      .byte.b	#%10111101
   2948  ffa3		       7e		      .byte.b	#%01111110
   2949  ffa4
   2950  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2951  ffa4		       00 00 00 00*	      ds	7
   2952  ffab		       3c		      .byte.b	#%00111100
   2953  ffac		       db		      .byte.b	#%11011011
   2954  ffad		       db		      .byte.b	#%11011011
   2955  ffae		       3c		      .byte.b	#%00111100
   2956  ffaf		       5a		      .byte.b	#%01011010
   2957  ffb0		       3c		      .byte.b	#%00111100
   2958  ffb1
   2959  ffb1				   TrafficSpeeds
   2960  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2961  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2962  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2963  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2964  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2965  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2966  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2967  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2968  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2969  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2970  ffbb				   TrafficSpeedsHighDelta
   2971  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2972  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2973  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2974  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2975  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2976  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2977  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2978  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2979  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2980  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2981  ffc5
   2982  ffc5				   CarIdToSpriteAddressL
   2983  ffc5		       7d		      .byte.b	#<CarSprite0
   2984  ffc6		       8a		      .byte.b	#<CarSprite1
   2985  ffc7		       97		      .byte.b	#<CarSprite2
   2986  ffc8		       a4		      .byte.b	#<CarSprite3
   2987  ffc9
   2988  ffc9				   CarIdToSpriteAddressH
   2989  ffc9		       ff		      .byte.b	#>CarSprite0
   2990  ffca		       ff		      .byte.b	#>CarSprite1
   2991  ffcb		       ff		      .byte.b	#>CarSprite2
   2992  ffcc		       ff		      .byte.b	#>CarSprite3
   2993  ffcd
   2994  ffcd				   CarIdToAccelerateSpeed
   2995  ffcd		       80		      .byte.b	#128
   2996  ffce		       c0		      .byte.b	#192
   2997  ffcf		       60		      .byte.b	#96
   2998  ffd0		       c0		      .byte.b	#192
   2999  ffd1
   3000  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   3001  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   3002  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   3003  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   3004  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   3005  ffd5
   3006  ffd5				   CarIdToMaxSpeedL
   3007  ffd5		       80		      .byte.b	#$80
   3008  ffd6		       00		      .byte.b	#$00	; One less gear
   3009  ffd7		       80		      .byte.b	#$80
   3010  ffd8		       80		      .byte.b	#$80
   3011  ffd9
   3012  ffd9				   CarIdToMaxGear
   3013  ffd9		       05		      .byte.b	#5
   3014  ffda		       04		      .byte.b	#4	; One less gear
   3015  ffdb		       05		      .byte.b	#5
   3016  ffdc		       05		      .byte.b	#5
   3017  ffdd
   3018  ffdd				   GearToBreakSpeedTable
   3019  ffdd		       09		      .byte.b	#(BREAK_SPEED - 1)
   3020  ffde		       09		      .byte.b	#(BREAK_SPEED - 1)
   3021  ffdf		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3022  ffe0		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3023  ffe1		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3024  ffe2		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3025  ffe3
   3026  ffe3				   TrafficColorTable
   3027  ffe3		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3028  ffe4		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3029  ffe5		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3030  ffe6		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3031  ffe7
   3032  ffe7				   TrafficChanceTable
   3033  ffe7		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3034  ffe8		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3035  ffe9		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3036  ffea		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3037  ffeb
   3038  ffeb				   TrafficTimeTable
   3039  ffeb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3040  ffec		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3041  ffed		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3042  ffee		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3043  ffef		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3044  fff0
   3045  fff0
   3046  fffc					      org	$FFFC
   3047  fffc		       00 f0		      .word.w	BeforeStart
   3048  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
