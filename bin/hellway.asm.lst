------- FILE hellway.asm LEVEL 1 PASS 3
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 0a	   BREAK_SPEED =	10
     26  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     28  f000
     29  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     30  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     31  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     32  f000
     33  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     34  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     35  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     36  f000
     37  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     38  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     39  f000		       00 f4	   TRAFFIC_COLOR_INTENSE =	$F4
     40  f000
     41  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     42  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     43  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     44  f000
     45  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     46  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     47  f000
     48  f000		       00 96	   PLAYER1_COLOR =	$96
     49  f000
     50  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     51  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     52  f000		       00 33	   SCORE_FONT_COLOR_BAD =	$33
     53  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     54  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     55  f000
     56  f000		       00 35	   PLAYER_0_X_START =	$35	;
     57  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     58  f000
     59  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     60  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     61  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     62  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	%00000111	; Every 8 frames
     63  f000
     64  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     65  f000
     66  f000		       00 00	   BLACK      =	$00	;
     67  f000
     68  f000		       00 0f	   MAX_GAME_MODE =	15
     69  f000
     70  f000		       00 80	   GRP0Cache  =	$80
     71  f000		       00 81	   PF0Cache   =	$81
     72  f000		       00 82	   PF1Cache   =	$82
     73  f000		       00 83	   PF2Cache   =	$83
     74  f000		       00 84	   GRP1Cache  =	$84
     75  f000		       00 85	   ENABLCache =	$85
     76  f000		       00 86	   ENAM0Cache =	$86
     77  f000		       00 87	   ENAM1Cache =	$87
     78  f000
     79  f000		       00 8c	   FrameCount0 =	$8C	;
     80  f000		       00 8d	   FrameCount1 =	$8D	;
     81  f000
     82  f000		       00 8e	   Player0SpeedL =	$8E
     83  f000		       00 8f	   Player0SpeedH =	$8F
     84  f000
     85  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     86  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     87  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     88  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     89  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     90  f000
     91  f000							;Temporary variables, multiple uses
     92  f000		       00 b0	   Tmp0       =	$B0
     93  f000		       00 b1	   Tmp1       =	$B1
     94  f000		       00 b2	   Tmp2       =	$B2
     95  f000		       00 b3	   Tmp3       =	$B3
     96  f000
     97  f000		       00 ba	   CollisionCounter =	$BA
     98  f000		       00 bb	   Player0X   =	$BB
     99  f000		       00 bc	   CountdownTimer =	$BC
    100  f000		       00 bd	   Traffic0Msb =	$BD
    101  f000		       00 be	   SwitchDebounceCounter =	$BE
    102  f000
    103  f000
    104  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    105  f000		       00 c1	   TrafficChance =	$C1
    106  f000		       00 c2	   CheckpointTime =	$C2
    107  f000		       00 c3	   TrafficColor =	$C3
    108  f000		       00 c4	   CurrentDifficulty =	$C4
    109  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    110  f000
    111  f000		       00 d0	   ScoreD0    =	$D0
    112  f000		       00 d1	   ScoreD1    =	$D1
    113  f000		       00 d2	   ScoreD2    =	$D2
    114  f000		       00 d3	   ScoreD3    =	$D3
    115  f000		       00 d4	   ScoreD4    =	$D4
    116  f000		       00 d5	   ScoreFontColor =	$D5
    117  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    118  f000		       00 d7	   NextCheckpoint =	$D7
    119  f000
    120  f000
    121  f000							;generic start up stuff, put zero in all...
    122  f000				   BeforeStart		;All variables that are kept on game reset or select
    123  f000		       a0 00		      LDY	#0
    124  f002		       84 be		      STY	SwitchDebounceCounter
    125  f004		       84 c5		      STY	GameMode
    126  f006
    127  f006				   Start
    128  f006		       78		      SEI
    129  f007		       d8		      CLD
    130  f008		       a2 ff		      LDX	#$FF
    131  f00a		       9a		      TXS
    132  f00b		       a9 00		      LDA	#0
    133  f00d				   ClearMem
    134  f00d		       e0 be		      CPX	#SwitchDebounceCounter
    135  f00f		       f0 06		      BEQ	SkipClean
    136  f011		       e0 c5		      CPX	#GameMode
    137  f013		       f0 02		      BEQ	SkipClean
    138  f015		       95 00		      STA	0,X
    139  f017				   SkipClean
    140  f017		       ca		      DEX
    141  f018		       d0 f3		      BNE	ClearMem
    142  f01a
    143  f01a							;Setting some variables...
    144  f01a
    145  f01a
    146  f01a				   SettingTrafficOffsets		; Time sensitive with player H position
    147  f01a		       85 02		      STA	WSYNC	;We will set player position
    148  f01c		       20 4a f6 	      JSR	DefaultOffsets
    149  f01f
    150  f01f		       ad 69 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    151  f022		       85 8e		      STA	Player0SpeedL
    152  f024
      0  f024					      SLEEP	11	;18
      1  f024				   .CYCLES    SET	11
      2  f024
      3  f024				  -	      IF	.CYCLES < 2
      4  f024				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f024				  -	      ERR
      6  f024					      ENDIF
      7  f024
      8  f024					      IF	.CYCLES & 1
      9  f024				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f024				  -	      nop	0
     11  f024					      ELSE
     12  f024		       24 00		      bit	VSYNC
     13  f026					      ENDIF
     14  f026				   .CYCLES    SET	.CYCLES - 3
     15  f026					      ENDIF
     16  f026
     17  f026					      REPEAT	.CYCLES / 2
     18  f026		       ea		      nop
     17  f026					      REPEND
     18  f027		       ea		      nop
     17  f027					      REPEND
     18  f028		       ea		      nop
     17  f028					      REPEND
     18  f029		       ea		      nop
     19  f02a					      REPEND
    154  f02a		       85 10		      STA	RESP0
    155  f02c
    156  f02c		       a6 00		      LDX	0
    157  f02e		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    158  f031		       29 c0		      AND	#%11000000
    159  f033		       f0 0b		      BEQ	CallConfigureDifficulty
    160  f035		       e8		      INX
    161  f036		       c9 80		      CMP	#%10000000
    162  f038		       f0 06		      BEQ	CallConfigureDifficulty
    163  f03a		       e8		      INX
    164  f03b		       c9 40		      CMP	#%01000000
    165  f03d		       f0 01		      BEQ	CallConfigureDifficulty
    166  f03f		       e8		      INX
    167  f040
    168  f040				   CallConfigureDifficulty
    169  f040		       86 c4		      STX	CurrentDifficulty
    170  f042		       20 02 f6 	      JSR	ConfigureDifficulty
    171  f045
    172  f045				   HPositioning
    173  f045		       85 02		      STA	WSYNC
    174  f047
    175  f047		       a9 30		      LDA	#%00110000	;2 Missile Size
    176  f049		       85 04		      STA	NUSIZ0	;3
    177  f04b		       85 05		      STA	NUSIZ1	;3
    178  f04d
    179  f04d		       a9 35		      LDA	#PLAYER_0_X_START	;2
    180  f04f		       85 bb		      STA	Player0X	;3
    181  f051
    182  f051		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    183  f053		       85 bc		      STA	CountdownTimer	;3
    184  f055
    185  f055		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    186  f057		       85 d7		      STA	NextCheckpoint
    187  f059
    188  f059		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f05b					      SLEEP	11	;
      1  f05b				   .CYCLES    SET	11
      2  f05b
      3  f05b				  -	      IF	.CYCLES < 2
      4  f05b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f05b				  -	      ERR
      6  f05b					      ENDIF
      7  f05b
      8  f05b					      IF	.CYCLES & 1
      9  f05b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f05b				  -	      nop	0
     11  f05b					      ELSE
     12  f05b		       24 00		      bit	VSYNC
     13  f05d					      ENDIF
     14  f05d				   .CYCLES    SET	.CYCLES - 3
     15  f05d					      ENDIF
     16  f05d
     17  f05d					      REPEAT	.CYCLES / 2
     18  f05d		       ea		      nop
     17  f05d					      REPEND
     18  f05e		       ea		      nop
     17  f05e					      REPEND
     18  f05f		       ea		      nop
     17  f05f					      REPEND
     18  f060		       ea		      nop
     19  f061					      REPEND
    190  f061		       85 11		      STA	RESP1
      0  f063					      SLEEP	2	;
      1  f063				   .CYCLES    SET	2
      2  f063
      3  f063				  -	      IF	.CYCLES < 2
      4  f063				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f063				  -	      ERR
      6  f063					      ENDIF
      7  f063
      8  f063				  -	      IF	.CYCLES & 1
      9  f063				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f063				  -	      nop	0
     11  f063				  -	      ELSE
     12  f063				  -	      bit	VSYNC
     13  f063				  -	      ENDIF
     14  f063				  -.CYCLES    SET	.CYCLES - 3
     15  f063					      ENDIF
     16  f063
     17  f063					      REPEAT	.CYCLES / 2
     18  f063		       ea		      nop
     19  f064					      REPEND
    192  f064		       85 14		      STA	RESBL
      0  f066					      SLEEP	2	;
      1  f066				   .CYCLES    SET	2
      2  f066
      3  f066				  -	      IF	.CYCLES < 2
      4  f066				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f066				  -	      ERR
      6  f066					      ENDIF
      7  f066
      8  f066				  -	      IF	.CYCLES & 1
      9  f066				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f066				  -	      nop	0
     11  f066				  -	      ELSE
     12  f066				  -	      bit	VSYNC
     13  f066				  -	      ENDIF
     14  f066				  -.CYCLES    SET	.CYCLES - 3
     15  f066					      ENDIF
     16  f066
     17  f066					      REPEAT	.CYCLES / 2
     18  f066		       ea		      nop
     19  f067					      REPEND
    194  f067		       85 12		      STA	RESM0
      0  f069					      SLEEP	2
      1  f069				   .CYCLES    SET	2
      2  f069
      3  f069				  -	      IF	.CYCLES < 2
      4  f069				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f069				  -	      ERR
      6  f069					      ENDIF
      7  f069
      8  f069				  -	      IF	.CYCLES & 1
      9  f069				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f069				  -	      nop	0
     11  f069				  -	      ELSE
     12  f069				  -	      bit	VSYNC
     13  f069				  -	      ENDIF
     14  f069				  -.CYCLES    SET	.CYCLES - 3
     15  f069					      ENDIF
     16  f069
     17  f069					      REPEAT	.CYCLES / 2
     18  f069		       ea		      nop
     19  f06a					      REPEND
    196  f06a		       85 13		      STA	RESM1
    197  f06c
    198  f06c		       a9 f0		      LDA	#$F0
    199  f06e		       85 24		      STA	HMBL
    200  f070		       85 22		      STA	HMM0
    201  f072		       85 23		      STA	HMM1
    202  f074		       85 02		      STA	WSYNC
    203  f076		       85 2a		      STA	HMOVE
    204  f078		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    205  f07a		       85 2b		      STA	HMCLR
    206  f07c
    207  f07c							;SLEEP 24
    208  f07c							;STA HMCLR
    209  f07c
    210  f07c							;VSYNC time
    211  f07c				   MainLoop
    212  f07c		       a9 02		      LDA	#2
    213  f07e		       85 00		      STA	VSYNC
    214  f080		       85 02		      STA	WSYNC
    215  f082		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    216  f084		       85 2a		      STA	HMOVE	;2
    217  f086							;This must be done after a WSync, otherwise it is impossible to predict the X position
    218  f086				   DoNotSetPlayerX
    219  f086
    220  f086		       85 02		      STA	WSYNC	;3
    221  f088		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    222  f08a		       8d 96 02 	      STA	TIM64T	;3	
    223  f08d		       a9 00		      LDA	#0	;2
    224  f08f		       85 00		      STA	VSYNC	;3	
    225  f091
    226  f091							;Read Fire Button before, will make it start the game for now.
    227  f091				   StartGame
    228  f091		       a5 0c		      LDA	INPT4	;3
    229  f093		       30 1b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    230  f095		       a5 c0		      LDA	GameStatus	;3
    231  f097		       d0 17		      BNE	SkipGameStart
    232  f099		       e6 c0		      INC	GameStatus
    233  f09b		       a9 00		      LDA	#0	;
    234  f09d		       85 8c		      STA	FrameCount0
    235  f09f		       85 8d		      STA	FrameCount1
    236  f0a1		       a9 0a		      LDA	#10
    237  f0a3		       85 19		      STA	AUDV0
    238  f0a5		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    239  f0a7		       85 d5		      STA	ScoreFontColor
    240  f0a9		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    241  f0ab		       85 d6		      STA	ScoreFontColorHoldChange
    242  f0ad		       4c 21 f1 	      JMP	SkipIncFC1	; Make the worse case stable
    243  f0b0				   SkipGameStart
    244  f0b0
    245  f0b0				   RandomizeGame
    246  f0b0		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    247  f0b2		       d0 30		      BNE	EndRandomizeGame
    248  f0b4		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    249  f0b6		       29 02		      AND	#%00000010
    250  f0b8		       f0 27		      BEQ	DeterministicGame
    251  f0ba		       a6 96		      LDX	TrafficOffset1 + 2
    252  f0bc		       bd 00 fe 	      LDA	AesTable,X
    253  f0bf		       45 8c		      EOR	FrameCount0
    254  f0c1		       85 96		      STA	TrafficOffset1 + 2
    255  f0c3		       a6 9a		      LDX	TrafficOffset2 + 2
    256  f0c5		       bd 00 fe 	      LDA	AesTable,X
    257  f0c8		       45 8c		      EOR	FrameCount0
    258  f0ca		       85 9a		      STA	TrafficOffset2 + 2
    259  f0cc		       a6 9e		      LDX	TrafficOffset3 + 2
    260  f0ce		       bd 00 fe 	      LDA	AesTable,X
    261  f0d1		       45 8c		      EOR	FrameCount0
    262  f0d3		       85 9e		      STA	TrafficOffset3 + 2
    263  f0d5		       a6 a2		      LDX	TrafficOffset4 + 2
    264  f0d7		       bd 00 fe 	      LDA	AesTable,X
    265  f0da		       45 8c		      EOR	FrameCount0
    266  f0dc		       85 a2		      STA	TrafficOffset4 + 2
    267  f0de		       4c e4 f0 	      JMP	EndRandomizeGame
    268  f0e1
    269  f0e1				   DeterministicGame
    270  f0e1		       20 4a f6 	      JSR	DefaultOffsets
    271  f0e4
    272  f0e4				   EndRandomizeGame
    273  f0e4
    274  f0e4
    275  f0e4				   ReadSwitches
    276  f0e4		       a6 be		      LDX	SwitchDebounceCounter
    277  f0e6		       d0 31		      BNE	DecrementSwitchDebounceCounter
    278  f0e8		       a9 01		      LDA	#%00000001
    279  f0ea		       2c 82 02 	      BIT	SWCHB
    280  f0ed		       d0 07		      BNE	SkipReset
    281  f0ef		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    282  f0f1		       85 be		      STA	SwitchDebounceCounter
    283  f0f3		       4c 06 f0 	      JMP	Start
    284  f0f6				   SkipReset
    285  f0f6
    286  f0f6				   GameModeSelect
    287  f0f6		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    288  f0f8		       d0 1c		      BNE	SkipGameSelect
    289  f0fa		       20 02 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    290  f0fd		       a9 02		      LDA	#%00000010
    291  f0ff		       2c 82 02 	      BIT	SWCHB
    292  f102		       d0 12		      BNE	SkipGameSelect
    293  f104		       a6 c5		      LDX	GameMode
    294  f106		       e0 0f		      CPX	#MAX_GAME_MODE
    295  f108		       f0 04		      BEQ	ResetGameMode
    296  f10a		       e8		      INX
    297  f10b		       4c 10 f1 	      JMP	StoreGameMode
    298  f10e				   ResetGameMode
    299  f10e		       a2 00		      LDX	#0
    300  f110				   StoreGameMode
    301  f110		       86 c5		      STX	GameMode
    302  f112		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    303  f114		       85 be		      STA	SwitchDebounceCounter
    304  f116				   SkipGameSelect
    305  f116		       4c 1b f1 	      JMP	EndReadSwitches
    306  f119				   DecrementSwitchDebounceCounter
    307  f119		       c6 be		      DEC	SwitchDebounceCounter
    308  f11b				   EndReadSwitches
    309  f11b
    310  f11b				   CountFrame
    311  f11b		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    312  f11d		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    313  f11f		       e6 8d		      INC	FrameCount1	; 5 Still not used
    314  f121				   SkipIncFC1
    315  f121
    316  f121							;Does not update the game if not running
    317  f121		       a5 c0		      LDA	GameStatus	;3
    318  f123		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    319  f125		       4c 70 f2 	      JMP	SkipUpdateLogic
    320  f128				   ContinueWithGameLogic
    321  f128
    322  f128				   EverySecond		; 64 frames to be more precise
    323  f128		       a9 3f		      LDA	#%00111111
    324  f12a		       25 8c		      AND	FrameCount0
    325  f12c		       d0 06		      BNE	SkipEverySecondAction
    326  f12e		       c5 bc		      CMP	CountdownTimer
    327  f130		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    328  f132		       c6 bc		      DEC	CountdownTimer
    329  f134				   SkipEverySecondAction
    330  f134
    331  f134
    332  f134				   BreakOnTimeOver		; Uses LDX as the breaking speed
    333  f134		       a2 00		      LDX	#0
    334  f136		       a5 bc		      LDA	CountdownTimer
    335  f138		       d0 08		      BNE	Break
    336  f13a		       a5 8c		      LDA	FrameCount0
    337  f13c		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    338  f13e		       d0 02		      BNE	Break
    339  f140		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    340  f142
    341  f142				   Break
    342  f142		       a9 20		      LDA	#%00100000	;Down in controller
    343  f144		       2c 80 02 	      BIT	SWCHA
    344  f147		       d0 0b		      BNE	BreakNonZero
    345  f149		       a5 0c		      LDA	INPT4	;3
    346  f14b		       10 05		      BPL	BreakWhileAccelerating
    347  f14d		       a2 0a		      LDX	#BREAK_SPEED
    348  f14f		       4c 54 f1 	      JMP	BreakNonZero
    349  f152				   BreakWhileAccelerating		; Allow better control while breaking.
    350  f152		       a2 05		      LDX	#BREAK_SPEED / 2
    351  f154
    352  f154				   BreakNonZero
    353  f154		       e0 00		      CPX	#0
    354  f156		       f0 2b		      BEQ	SkipBreak
    355  f158		       86 b0		      STX	Tmp0
    356  f15a
    357  f15a				   DecreaseSpeed
    358  f15a		       38		      SEC
    359  f15b		       a5 8e		      LDA	Player0SpeedL
    360  f15d		       e5 b0		      SBC	Tmp0
    361  f15f		       85 8e		      STA	Player0SpeedL
    362  f161		       a5 8f		      LDA	Player0SpeedH
    363  f163		       e9 00		      SBC	#0
    364  f165		       85 8f		      STA	Player0SpeedH
    365  f167
    366  f167				   CheckMinSpeed
    367  f167		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    368  f169		       c9 00		      CMP	#CAR_MIN_SPEED_H
    369  f16b		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    370  f16d		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    371  f16f
    372  f16f				   CompareLBreakSpeed
    373  f16f		       a5 8e		      LDA	Player0SpeedL
    374  f171		       c9 00		      CMP	#CAR_MIN_SPEED_L
    375  f173		       90 03		      BCC	ResetMinSpeed	; Less than memory
    376  f175		       4c 80 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    377  f178
    378  f178				   ResetMinSpeed
    379  f178		       a9 00		      LDA	#CAR_MIN_SPEED_H
    380  f17a		       85 8f		      STA	Player0SpeedH
    381  f17c		       a9 00		      LDA	#CAR_MIN_SPEED_L
    382  f17e		       85 8e		      STA	Player0SpeedL
    383  f180
    384  f180				   SkipAccelerateIfBreaking
    385  f180		       4c b3 f1 	      JMP	SkipAccelerate
    386  f183				   SkipBreak
    387  f183
    388  f183				   Acelerates
    389  f183		       a5 bc		      LDA	CountdownTimer
    390  f185		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    391  f187		       a5 0c		      LDA	INPT4	;3
    392  f189		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    393  f18b		       a9 10		      LDA	#%00010000	;UP in controller
    394  f18d		       2c 80 02 	      BIT	SWCHA
    395  f190		       d0 21		      BNE	SkipAccelerate
    396  f192
    397  f192				   IncreaseCarSpeed
    398  f192							;Adds speed
    399  f192		       18		      CLC
    400  f193		       a5 8e		      LDA	Player0SpeedL
    401  f195		       69 01		      ADC	#ACCELERATE_SPEED
    402  f197		       85 8e		      STA	Player0SpeedL
    403  f199		       a5 8f		      LDA	Player0SpeedH
    404  f19b		       69 00		      ADC	#0
    405  f19d		       85 8f		      STA	Player0SpeedH
    406  f19f
    407  f19f							;Checks if already max
    408  f19f		       c9 02		      CMP	#CAR_MAX_SPEED_H
    409  f1a1		       90 10		      BCC	SkipAccelerate	; less than my max speed
    410  f1a3		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    411  f1a5							;High bit is max, compare the low
    412  f1a5		       a5 8e		      LDA	Player0SpeedL
    413  f1a7		       c9 80		      CMP	#CAR_MAX_SPEED_L
    414  f1a9		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    415  f1ab							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    416  f1ab
    417  f1ab				   ResetToMaxSpeed		; Speed is more, or is already max
    418  f1ab		       a9 02		      LDA	#CAR_MAX_SPEED_H
    419  f1ad		       85 8f		      STA	Player0SpeedH
    420  f1af		       a9 80		      LDA	#CAR_MAX_SPEED_L
    421  f1b1		       85 8e		      STA	Player0SpeedL
    422  f1b3				   SkipAccelerate
    423  f1b3
    424  f1b3				   InitUpdateOffsets
    425  f1b3		       a2 00		      LDX	#0	; Memory Offset 24 bit
    426  f1b5		       a0 00		      LDY	#0	; Line Speeds 16 bits
    427  f1b7		       a5 c5		      LDA	GameMode
    428  f1b9		       29 04		      AND	#%00000100	; GameModes with high delta
    429  f1bb		       f0 02		      BEQ	UpdateOffsets
    430  f1bd		       a4 0a		      LDY	TrafficSpeedsHighDelta - TrafficSpeeds
    431  f1bf
    432  f1bf				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    433  f1bf		       38		      SEC
    434  f1c0		       a5 8e		      LDA	Player0SpeedL
    435  f1c2		       f9 61 ff 	      SBC	TrafficSpeeds,Y
    436  f1c5		       85 b0		      STA	Tmp0
    437  f1c7		       c8		      INY
    438  f1c8		       a5 8f		      LDA	Player0SpeedH
    439  f1ca		       f9 61 ff 	      SBC	TrafficSpeeds,Y
    440  f1cd		       85 b1		      STA	Tmp1
    441  f1cf		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    442  f1d1		       e9 00		      SBC	#0
    443  f1d3		       85 b2		      STA	Tmp2
    444  f1d5
    445  f1d5
    446  f1d5				   AddsTheResult
    447  f1d5		       18		      CLC
    448  f1d6		       a5 b0		      LDA	Tmp0
    449  f1d8		       75 90		      ADC	TrafficOffset0,X
    450  f1da		       95 90		      STA	TrafficOffset0,X
    451  f1dc		       e8		      INX
    452  f1dd		       a5 b1		      LDA	Tmp1
    453  f1df		       75 90		      ADC	TrafficOffset0,X
    454  f1e1		       95 90		      STA	TrafficOffset0,X
    455  f1e3		       e8		      INX
    456  f1e4		       a5 b2		      LDA	Tmp2	; Carry
    457  f1e6		       75 90		      ADC	TrafficOffset0,X
    458  f1e8		       95 90		      STA	TrafficOffset0,X
    459  f1ea		       90 06		      BCC	CalculateOffsetCache
    460  f1ec		       e0 02		      CPX	#2	;MSB offset 0
    461  f1ee		       d0 02		      BNE	CalculateOffsetCache
    462  f1f0		       e6 bd		      INC	Traffic0Msb
    463  f1f2
    464  f1f2				   CalculateOffsetCache
    465  f1f2		       e8		      INX
    466  f1f3		       38		      SEC
    467  f1f4		       69 00		      ADC	#0	;Increment by one
    468  f1f6		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    469  f1f8
    470  f1f8				   PrepareNextUpdateLoop
    471  f1f8		       c8		      INY
    472  f1f9		       e8		      INX
    473  f1fa		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    474  f1fc		       d0 c1		      BNE	UpdateOffsets
    475  f1fe
    476  f1fe							;Until store the movemnt, LDX contains the value to be stored.
    477  f1fe				   TestCollision		;
    478  f1fe							; see if player0 colides with the rest
    479  f1fe		       a5 00		      LDA	CXM0P
    480  f200		       05 01		      ORA	CXM1P
    481  f202		       05 01		      ORA	CXM1P
    482  f204		       05 02		      ORA	CXP0FB
    483  f206		       05 07		      ORA	CXPPMM
    484  f208		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    485  f20a		       f0 23		      BEQ	NoCollision	;skip if not hitting...
    486  f20c		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    487  f20e		       d0 1f		      BNE	NoCollision
    488  f210		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    489  f212		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    490  f214		       f0 19		      BEQ	NoCollision
    491  f216		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    492  f218		       f0 15		      BEQ	NoCollision
    493  f21a		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    494  f21c		       85 ba		      STA	CollisionCounter	;and store as colision.
    495  f21e		       a9 10		      LDA	#COLLISION_SPEED_L	;
    496  f220		       c5 8e		      CMP	Player0SpeedL
    497  f222		       b0 02		      BCS	SkipSetColisionSpeed
    498  f224		       85 8e		      STA	Player0SpeedL
    499  f226				   SkipSetColisionSpeed
    500  f226		       a9 00		      LDA	#0
    501  f228		       85 8f		      STA	Player0SpeedH
    502  f22a		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    503  f22c		       4c 6c f2 	      JMP	StoreHMove	; We keep position consistent
    504  f22f				   NoCollision
    505  f22f
    506  f22f				   DecrementCollision
    507  f22f		       a4 ba		      LDY	CollisionCounter
    508  f231		       f0 07		      BEQ	FinishDecrementCollision
    509  f233		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    510  f235		       85 04		      STA	NUSIZ0
    511  f237		       88		      DEY
    512  f238		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    513  f23a				   FinishDecrementCollision
    514  f23a
    515  f23a				   ResetPlayerSize
    516  f23a		       d0 04		      BNE	FinishResetPlayerSize
    517  f23c		       a9 30		      LDA	#%00110000
    518  f23e		       85 04		      STA	NUSIZ0	;
    519  f240				   FinishResetPlayerSize
    520  f240
    521  f240				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    522  f240		       c0 01		      CPY	#1	; Last frame before reset
    523  f242		       d0 05		      BNE	SkipResetPlayerPosition
    524  f244		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    525  f246		       4c 6c f2 	      JMP	StoreHMove
    526  f249				   SkipResetPlayerPosition
    527  f249
    528  f249							; for left and right, we're gonna 
    529  f249							; set the horizontal speed, and then do
    530  f249							; a single HMOVE.  We'll use X to hold the
    531  f249							; horizontal speed, then store it in the 
    532  f249							; appropriate register
    533  f249				   PrepareReadXAxis
    534  f249		       a2 00		      LDX	#0
    535  f24b		       a4 bb		      LDY	Player0X
    536  f24d				   BeginReadLeft
    537  f24d		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    538  f24f		       a9 40		      LDA	#%01000000	;Left
    539  f251		       2c 80 02 	      BIT	SWCHA
    540  f254		       d0 07		      BNE	SkipMoveLeft
    541  f256		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    542  f258		       c6 bb		      DEC	Player0X
    543  f25a		       4c 6c f2 	      JMP	StoreHMove	; Cannot move left and right...
    544  f25d				   SkipMoveLeft
    545  f25d				   BeginReadRight
    546  f25d		       c0 36		      CPY	#PLAYER_0_MAX_X
    547  f25f		       f0 0b		      BEQ	SkipMoveRight	; At max already
    548  f261		       a9 80		      LDA	#%10000000	;Right
    549  f263		       2c 80 02 	      BIT	SWCHA
    550  f266		       d0 04		      BNE	SkipMoveRight
    551  f268		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    552  f26a		       e6 bb		      INC	Player0X
    553  f26c				   SkipMoveRight
    554  f26c				   StoreHMove
    555  f26c		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    556  f26e		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    557  f270
    558  f270
    559  f270				   SkipUpdateLogic
    560  f270				   ScoreBackgroundColor
    561  f270		       a2 00		      LDX	#0
    562  f272		       ad 82 02 	      LDA	SWCHB
    563  f275		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    564  f277		       f0 04		      BEQ	BlackAndWhiteScoreBg
    565  f279		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    566  f27b		       a2 03		      LDX	#BACKGROUND_COLOR
    567  f27d				   BlackAndWhiteScoreBg
    568  f27d		       85 b2		      STA	Tmp2	; Score Background
    569  f27f		       86 b3		      STX	Tmp3	; Traffic Background
    570  f281
    571  f281				   ConfigurePFForScore
    572  f281							;LDA #SCORE_BACKGROUND_COLOR; Done above
    573  f281		       85 09		      STA	COLUBK
    574  f283		       a5 d5		      LDA	ScoreFontColor
    575  f285		       85 08		      STA	COLUPF
    576  f287		       20 b5 f5 	      JSR	ClearAll
    577  f28a		       a9 02		      LDA	#%00000010	; Score mode
    578  f28c		       85 0a		      STA	CTRLPF
    579  f28e		       a0 04		      LDY	#FONT_OFFSET
    580  f290		       a2 00		      LDX	#0
    581  f292		       a5 8c		      LDA	FrameCount0	;3
    582  f294		       29 01		      AND	#%00000001	;2
    583  f296		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    584  f298				   LeftScoreOn
    585  f298		       a5 d5		      LDA	ScoreFontColor
    586  f29a		       85 07		      STA	COLUP1
    587  f29c		       a5 b2		      LDA	Tmp2
    588  f29e		       85 06		      STA	COLUP0
    589  f2a0		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    590  f2a2		       85 b1		      STA	Tmp1
    591  f2a4		       4c b3 f2 	      JMP	WaitForVblankEnd
    592  f2a7				   RightScoreOn
    593  f2a7		       a5 d5		      LDA	ScoreFontColor
    594  f2a9		       85 06		      STA	COLUP0
    595  f2ab		       a5 b2		      LDA	Tmp2
    596  f2ad		       85 07		      STA	COLUP1
    597  f2af		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    598  f2b1		       85 b1		      STA	Tmp1
    599  f2b3
    600  f2b3
    601  f2b3							; After here we are going to update the screen, No more heavy code
    602  f2b3				   WaitForVblankEnd
    603  f2b3		       ad 84 02 	      LDA	INTIM
    604  f2b6		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    605  f2b8							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    606  f2b8		       85 01		      STA	VBLANK
    607  f2ba
    608  f2ba				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    609  f2ba		       85 02		      STA	WSYNC
    610  f2bc
    611  f2bc		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    612  f2be		       85 0d		      STA	PF0	;3
    613  f2c0
    614  f2c0		       a5 82		      LDA	PF1Cache	;3
    615  f2c2		       85 0e		      STA	PF1	;3
    616  f2c4
    617  f2c4		       a5 83		      LDA	PF2Cache	;3
    618  f2c6		       85 0f		      STA	PF2	;3
    619  f2c8
    620  f2c8							;39
    621  f2c8				   DrawScore
    622  f2c8		       a6 d0		      LDX	ScoreD0	; 4
    623  f2ca		       bd 00 fd 	      LDA	Font,X	;4
    624  f2cd		       85 81		      STA	PF0Cache	;3
    625  f2cf		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    626  f2d1							;17
    627  f2d1
    628  f2d1		       a6 d1		      LDX	ScoreD1	; 4
    629  f2d3		       bd 00 fd 	      LDA	Font,X	;4
    630  f2d6		       0a		      ASL		;2
    631  f2d7		       0a		      ASL		;2
    632  f2d8		       0a		      ASL		;2
    633  f2d9		       0a		      ASL		;2
    634  f2da		       85 82		      STA	PF1Cache	;3
    635  f2dc		       c6 d1		      DEC	ScoreD1	;6
    636  f2de							;9 (After Wsync)
    637  f2de
    638  f2de		       a6 d2		      LDX	ScoreD2	; 4
    639  f2e0		       bd 00 fd 	      LDA	Font,X	;4
    640  f2e3		       29 0f		      AND	#%00001111
    641  f2e5		       05 82		      ORA	PF1Cache	;3
    642  f2e7		       85 82		      STA	PF1Cache	;3
    643  f2e9		       c6 d2		      DEC	ScoreD2	;6
    644  f2eb							;20
    645  f2eb
    646  f2eb		       a6 d3		      LDX	ScoreD3	; 3
    647  f2ed		       bd 00 fd 	      LDA	Font,X	;4
    648  f2f0		       4a		      LSR		;2
    649  f2f1		       4a		      LSR		;2
    650  f2f2		       4a		      LSR		;2
    651  f2f3		       4a		      LSR		;2
    652  f2f4		       85 83		      STA	PF2Cache	;3
    653  f2f6		       c6 d3		      DEC	ScoreD3	;5
    654  f2f8							;23
    655  f2f8
    656  f2f8		       a6 d4		      LDX	ScoreD4	; 3
    657  f2fa		       bd 00 fd 	      LDA	Font,X	;4
    658  f2fd		       29 f0		      AND	#%11110000
    659  f2ff		       05 83		      ORA	PF2Cache	;3
    660  f301		       85 83		      STA	PF2Cache	;3
    661  f303		       c6 d4		      DEC	ScoreD4	;5
    662  f305							;18
    663  f305
    664  f305		       88		      DEY		;2
    665  f306		       10 b2		      BPL	ScoreLoop	;4
    666  f308
    667  f308		       85 02		      STA	WSYNC
    668  f30a
    669  f30a		       20 d6 f5 	      JSR	LoadAll
    670  f30d
    671  f30d		       85 02		      STA	WSYNC
    672  f30f		       85 02		      STA	WSYNC
    673  f311
    674  f311				   PrepareForTraffic
    675  f311		       20 c7 f5 	      JSR	ClearPF	; 32
    676  f314
    677  f314		       a9 31		      LDA	#%00110001	; Score mode
    678  f316		       85 0a		      STA	CTRLPF
    679  f318
    680  f318		       a5 c3		      LDA	TrafficColor	;2
    681  f31a		       85 08		      STA	COLUPF
    682  f31c
    683  f31c		       a9 96		      LDA	#PLAYER1_COLOR	;2
    684  f31e		       85 07		      STA	COLUP1	;3
    685  f320
    686  f320		       a5 d5		      LDA	ScoreFontColor	;3
    687  f322		       85 06		      STA	COLUP0	;3
    688  f324
    689  f324		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    690  f326
    691  f326		       a5 b3		      LDA	Tmp3	;3
    692  f328
    693  f328		       85 02		      STA	WSYNC
    694  f32a							;What a wast of cycles, I must place some computation that fits here!
    695  f32a		       20 7b f6 	      JSR	Sleep16
    696  f32d		       20 7b f6 	      JSR	Sleep16
    697  f330		       20 7b f6 	      JSR	Sleep16
    698  f333		       20 7b f6 	      JSR	Sleep16
      0  f336					      SLEEP	6	; Make it in the very end, so we have one more nice blue line
      1  f336				   .CYCLES    SET	6
      2  f336
      3  f336				  -	      IF	.CYCLES < 2
      4  f336				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f336				  -	      ERR
      6  f336					      ENDIF
      7  f336
      8  f336				  -	      IF	.CYCLES & 1
      9  f336				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f336				  -	      nop	0
     11  f336				  -	      ELSE
     12  f336				  -	      bit	VSYNC
     13  f336				  -	      ENDIF
     14  f336				  -.CYCLES    SET	.CYCLES - 3
     15  f336					      ENDIF
     16  f336
     17  f336					      REPEAT	.CYCLES / 2
     18  f336		       ea		      nop
     17  f336					      REPEND
     18  f337		       ea		      nop
     17  f337					      REPEND
     18  f338		       ea		      nop
     19  f339					      REPEND
    700  f339		       85 09		      STA	COLUBK	;3
    701  f33b
    702  f33b							;main scanline loop...
    703  f33b				   ScanLoop
    704  f33b		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    705  f33d
    706  f33d							;Start of next line!			
    707  f33d				   DrawCache		;54 Is the last line going to the top of the next frame?
    708  f33d
    709  f33d		       b9 28 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    710  f340		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    711  f342
    712  f342		       a5 82		      LDA	PF1Cache	;3
    713  f344		       85 0e		      STA	PF1	;3
    714  f346
    715  f346		       a5 84		      LDA	GRP1Cache	;3
    716  f348		       85 1c		      STA	GRP1	;3
    717  f34a
    718  f34a		       a5 85		      LDA	ENABLCache	;3
    719  f34c		       85 1f		      STA	ENABL	;3
    720  f34e
    721  f34e		       a5 86		      LDA	ENAM0Cache	;3
    722  f350		       85 1d		      STA	ENAM0	;3
    723  f352
    724  f352		       a5 87		      LDA	ENAM1Cache	;3
    725  f354		       85 1e		      STA	ENAM1	;3
    726  f356
    727  f356		       a9 00		      LDA	#0	;2
    728  f358		       85 82		      STA	PF1Cache	;3
    729  f35a		       85 84		      STA	GRP1Cache	;3
    730  f35c		       85 85		      STA	ENABLCache	;3
    731  f35e		       85 86		      STA	ENAM0Cache	;3
    732  f360		       85 87		      STA	ENAM1Cache	; 3
    733  f362
    734  f362							;BEQ DrawTraffic3
    735  f362				   DrawTraffic1 		; 33
    736  f362		       98		      TYA		; 2
    737  f363		       18		      CLC		; 2 
    738  f364		       65 95		      ADC	TrafficOffset1 + 1	;3
    739  f366		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    740  f368		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    741  f36a		       45 96		      EOR	TrafficOffset1 + 2	; 3
    742  f36c		       4c 71 f3 	      JMP	AfterEorOffsetWithCarry	; 3
    743  f36f				   EorOffsetWithCarry
    744  f36f		       45 97		      EOR	TrafficOffset1 + 3	; 3
    745  f371				   AfterEorOffsetWithCarry		;17
    746  f371		       aa		      TAX		;2
    747  f372		       bd 00 fe 	      LDA	AesTable,X	; 4
    748  f375		       c5 c1		      CMP	TrafficChance	;3
    749  f377		       b0 04		      BCS	FinishDrawTraffic1	; 2
    750  f379		       a9 ff		      LDA	#$FF	;2
    751  f37b		       85 84		      STA	GRP1Cache	;3
    752  f37d				   FinishDrawTraffic1
    753  f37d
    754  f37d				   DrawTraffic2 		; 33
    755  f37d		       98		      TYA		; 2
    756  f37e		       18		      CLC		; 2 
    757  f37f		       65 99		      ADC	TrafficOffset2 + 1	;3
    758  f381		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    759  f383		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    760  f385		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    761  f387		       4c 8c f3 	      JMP	AfterEorOffsetWithCarry2	; 3
    762  f38a				   EorOffsetWithCarry2
    763  f38a		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    764  f38c				   AfterEorOffsetWithCarry2		;17
    765  f38c		       aa		      TAX		;2
    766  f38d		       bd 00 fe 	      LDA	AesTable,X	; 4
    767  f390		       c5 c1		      CMP	TrafficChance	;3
    768  f392		       b0 04		      BCS	FinishDrawTraffic2	; 2
    769  f394		       a9 02		      LDA	#%00000010	;2
    770  f396		       85 85		      STA	ENABLCache	;3
    771  f398				   FinishDrawTraffic2
    772  f398
    773  f398							;STA WSYNC ;65 / 137
    774  f398
    775  f398							; LDA Tmp0 ; Flicker this line if drawing car
    776  f398							; BEQ FinishDrawTraffic4
    777  f398				   DrawTraffic3 		; 33
    778  f398		       98		      TYA		; 2
    779  f399		       18		      CLC		; 2 
    780  f39a		       65 9d		      ADC	TrafficOffset3 + 1	;3
    781  f39c		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    782  f39e		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    783  f3a0		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    784  f3a2		       4c a7 f3 	      JMP	AfterEorOffsetWithCarry3	; 3
    785  f3a5				   EorOffsetWithCarry3
    786  f3a5		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    787  f3a7				   AfterEorOffsetWithCarry3		;17
    788  f3a7		       aa		      TAX		;2
    789  f3a8		       bd 00 fe 	      LDA	AesTable,X	; 4
    790  f3ab		       c5 c1		      CMP	TrafficChance	;3
    791  f3ad		       b0 04		      BCS	FinishDrawTraffic3	; 2 
    792  f3af		       a9 02		      LDA	#%00000010	;2
    793  f3b1		       85 86		      STA	ENAM0Cache
    794  f3b3				   FinishDrawTraffic3
    795  f3b3
    796  f3b3				   DrawTraffic4 		; 33
    797  f3b3		       98		      TYA		; 2
    798  f3b4		       18		      CLC		; 2 
    799  f3b5		       65 a1		      ADC	TrafficOffset4 + 1	;3
    800  f3b7		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    801  f3b9		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    802  f3bb		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    803  f3bd		       4c c2 f3 	      JMP	AfterEorOffsetWithCarry4	; 3
    804  f3c0				   EorOffsetWithCarry4
    805  f3c0		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    806  f3c2				   AfterEorOffsetWithCarry4		;17
    807  f3c2		       aa		      TAX		;2
    808  f3c3		       bd 00 fe 	      LDA	AesTable,X	; 4
    809  f3c6		       c5 c1		      CMP	TrafficChance	;3
    810  f3c8		       b0 04		      BCS	FinishDrawTraffic4	; 2
    811  f3ca		       a9 02		      LDA	#%00000010	;2
    812  f3cc		       85 87		      STA	ENAM1Cache	;3
    813  f3ce				   FinishDrawTraffic4
    814  f3ce
    815  f3ce				   DrawTraffic0 		; 15
    816  f3ce		       98		      TYA		;2
    817  f3cf		       18		      CLC		;2
    818  f3d0		       65 91		      ADC	TrafficOffset0 + 1	; 3
    819  f3d2		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    820  f3d4		       f0 04		      BEQ	SkipDrawTraffic0	; 2
    821  f3d6		       a9 ff		      LDA	#$FF	; 2
    822  f3d8		       85 82		      STA	PF1Cache	;3
    823  f3da
    824  f3da				   SkipDrawTraffic0
    825  f3da
    826  f3da				   WhileScanLoop
    827  f3da		       88		      DEY		;2
    828  f3db		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    829  f3dd		       4c 3b f3 	      JMP	ScanLoop	;3
    830  f3e0				   FinishScanLoop		; 7 209 of 222
    831  f3e0
    832  f3e0		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    833  f3e2		       20 d6 f5 	      JSR	LoadAll
    834  f3e5		       85 02		      STA	WSYNC	; do stuff!
    835  f3e7		       85 02		      STA	WSYNC
    836  f3e9		       85 02		      STA	WSYNC
    837  f3eb							;42 cycles to use here
    838  f3eb
    839  f3eb				   PrepareOverscan
    840  f3eb		       a9 02		      LDA	#2
    841  f3ed		       85 02		      STA	WSYNC
    842  f3ef		       85 01		      STA	VBLANK
    843  f3f1
    844  f3f1		       a9 22		      LDA	#34	; 2 more lines before overscan (was 37)...
    845  f3f3		       8d 96 02 	      STA	TIM64T
    846  f3f6
    847  f3f6				   ProcessScoreFontColor
    848  f3f6		       a6 d6		      LDX	ScoreFontColorHoldChange
    849  f3f8		       f0 06		      BEQ	ResetScoreFontColor
    850  f3fa		       ca		      DEX
    851  f3fb		       86 d6		      STX	ScoreFontColorHoldChange
    852  f3fd		       4c 04 f4 	      JMP	SkipScoreFontColor
    853  f400				   ResetScoreFontColor
    854  f400		       a9 f9		      LDA	#SCORE_FONT_COLOR
    855  f402		       85 d5		      STA	ScoreFontColor
    856  f404				   SkipScoreFontColor
    857  f404
    858  f404				   IsGameOver
    859  f404		       a5 bc		      LDA	CountdownTimer
    860  f406		       05 8e		      ORA	Player0SpeedL
    861  f408		       05 8f		      ORA	Player0SpeedH
    862  f40a		       d0 0b		      BNE	IsCheckpoint
    863  f40c		       a9 01		      LDA	#1
    864  f40e		       85 d6		      STA	ScoreFontColorHoldChange
    865  f410		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    866  f412		       85 d5		      STA	ScoreFontColor
    867  f414		       4c 49 f4 	      JMP	SkipIsTimeOver
    868  f417
    869  f417				   IsCheckpoint
    870  f417		       a5 d7		      LDA	NextCheckpoint
    871  f419		       c5 92		      CMP	TrafficOffset0 + 2
    872  f41b		       d0 20		      BNE	SkipIsCheckpoint
    873  f41d		       18		      CLC
    874  f41e		       69 10		      ADC	#CHECKPOINT_INTERVAL
    875  f420		       85 d7		      STA	NextCheckpoint
    876  f422		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    877  f424		       85 d5		      STA	ScoreFontColor
    878  f426		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    879  f428		       85 d6		      STA	ScoreFontColorHoldChange
    880  f42a		       a5 bc		      LDA	CountdownTimer
    881  f42c		       18		      CLC
    882  f42d		       65 c2		      ADC	CheckpointTime
    883  f42f		       85 bc		      STA	CountdownTimer
    884  f431		       90 04		      BCC	JumpSkipTimeOver
    885  f433		       a9 ff		      LDA	#$FF
    886  f435		       85 bc		      STA	CountdownTimer	; Does not overflow!
    887  f437				   JumpSkipTimeOver
    888  f437		       20 f3 f5 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    889  f43a		       4c 49 f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    890  f43d				   SkipIsCheckpoint
    891  f43d
    892  f43d				   IsTimeOver
    893  f43d		       a5 bc		      LDA	CountdownTimer
    894  f43f		       d0 08		      BNE	SkipIsTimeOver
    895  f441		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    896  f443		       85 d6		      STA	ScoreFontColorHoldChange
    897  f445		       a9 33		      LDA	#SCORE_FONT_COLOR_BAD
    898  f447		       85 d5		      STA	ScoreFontColor
    899  f449				   SkipIsTimeOver
    900  f449
    901  f449							;Could be done during on vblank to save this comparisson time (before draw score), 
    902  f449							;but I am saving vblank cycles for now, in case of 2 players.
    903  f449				   ChooseSide		; 
    904  f449		       a5 8c		      LDA	FrameCount0	;3
    905  f44b		       29 01		      AND	#%00000001	;2
    906  f44d		       f0 72		      BEQ	RightScoreWrite	; Half of the screen with the correct colors.
    907  f44f
    908  f44f				   LeftScoreWrite
    909  f44f		       a5 d5		      LDA	ScoreFontColor
    910  f451		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    911  f453		       f0 3f		      BEQ	PrintCheckpoint
    912  f455		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    913  f457		       f0 43		      BEQ	PrintStartGame
    914  f459		       a5 c0		      LDA	GameStatus
    915  f45b		       f0 47		      BEQ	PrintHellwayLeft
    916  f45d				   WriteDistance		;Not optimized yet, ugly code.
    917  f45d				   Digit0Distance
    918  f45d		       a5 91		      LDA	TrafficOffset0 + 1	;3
    919  f45f		       29 f0		      AND	#%11110000	;2
    920  f461		       4a		      LSR		; 2
    921  f462		       4a		      LSR		; 2
    922  f463		       4a		      LSR		; 2
    923  f464		       4a		      LSR		; 2
    924  f465		       aa		      TAX		; 2
    925  f466		       bd a0 fd 	      LDA	FontLookup,X	;4
    926  f469		       85 d3		      STA	ScoreD3	;3
    927  f46b
    928  f46b				   Digit1Distance
    929  f46b		       a5 92		      LDA	TrafficOffset0 + 2	;3
    930  f46d		       29 0f		      AND	#%00001111	;2
    931  f46f		       aa		      TAX		; 2
    932  f470		       bd a0 fd 	      LDA	FontLookup,X	;4 
    933  f473		       85 d2		      STA	ScoreD2	;3
    934  f475
    935  f475				   Digit2Distance
    936  f475		       a5 92		      LDA	TrafficOffset0 + 2	;3
    937  f477		       29 f0		      AND	#%11110000	;2
    938  f479		       4a		      LSR		; 2
    939  f47a		       4a		      LSR		; 2
    940  f47b		       4a		      LSR		; 2
    941  f47c		       4a		      LSR		; 2
    942  f47d		       aa		      TAX		; 2
    943  f47e		       bd a0 fd 	      LDA	FontLookup,X	;4
    944  f481		       85 d1		      STA	ScoreD1	;3
    945  f483
    946  f483				   Digit3Distance
    947  f483		       a5 bd		      LDA	Traffic0Msb	;3
    948  f485		       29 0f		      AND	#%00001111	;2
    949  f487		       aa		      TAX		; 2
    950  f488		       bd a0 fd 	      LDA	FontLookup,X	;4 
    951  f48b		       85 d0		      STA	ScoreD0	;3
    952  f48d
    953  f48d		       a9 90		      LDA	#<Pipe + #FONT_OFFSET	;3
    954  f48f		       85 d4		      STA	ScoreD4	;3
    955  f491				   EndDrawDistance
    956  f491		       4c 2d f5 	      JMP	RightScoreWriteEnd	;3
    957  f494
    958  f494				   PrintCheckpoint
    959  f494		       a2 00		      LDX	#<CheckpointText
    960  f496		       20 5d f6 	      JSR	PrintStaticText
    961  f499		       4c 2d f5 	      JMP	RightScoreWriteEnd	;3
    962  f49c				   PrintStartGame
    963  f49c		       a2 23		      LDX	#<GoText
    964  f49e		       20 5d f6 	      JSR	PrintStaticText
    965  f4a1		       4c 2d f5 	      JMP	RightScoreWriteEnd	;3
    966  f4a4
    967  f4a4				   PrintHellwayLeft
    968  f4a4		       a5 8d		      LDA	FrameCount1
    969  f4a6		       29 01		      AND	#1
    970  f4a8		       d0 05		      BNE	PrintCreditsLeft
    971  f4aa		       a2 05		      LDX	#<HellwayLeftText
    972  f4ac		       4c b1 f4 	      JMP	PrintGameMode
    973  f4af				   PrintCreditsLeft
    974  f4af		       a2 0f		      LDX	#<OpbText
    975  f4b1
    976  f4b1				   PrintGameMode
    977  f4b1		       20 5d f6 	      JSR	PrintStaticText
    978  f4b4		       a5 c5		      LDA	GameMode
    979  f4b6		       29 0f		      AND	#%00001111
    980  f4b8		       aa		      TAX		; 2
    981  f4b9		       bd a0 fd 	      LDA	FontLookup,X	;4 
    982  f4bc		       85 d0		      STA	ScoreD0	;3
    983  f4be		       4c 2d f5 	      JMP	RightScoreWriteEnd	;3
    984  f4c1
    985  f4c1				   RightScoreWrite
    986  f4c1		       a5 c0		      LDA	GameStatus
    987  f4c3		       f0 47		      BEQ	PrintHellwayRight
    988  f4c5		       a5 d5		      LDA	ScoreFontColor
    989  f4c7		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    990  f4c9		       f0 54		      BEQ	PrintGameOver
    991  f4cb				   Digit0Timer
    992  f4cb		       a5 bc		      LDA	CountdownTimer	;3
    993  f4cd		       29 0f		      AND	#%00001111	;2
    994  f4cf		       aa		      TAX		; 2
    995  f4d0		       bd a0 fd 	      LDA	FontLookup,X	;4 
    996  f4d3		       85 d1		      STA	ScoreD1	;3
    997  f4d5
    998  f4d5				   Digit1Timer
    999  f4d5		       a5 bc		      LDA	CountdownTimer	;3
   1000  f4d7		       29 f0		      AND	#%11110000	;2
   1001  f4d9		       4a		      LSR		; 2
   1002  f4da		       4a		      LSR		; 2
   1003  f4db		       4a		      LSR		; 2
   1004  f4dc		       4a		      LSR		; 2
   1005  f4dd		       aa		      TAX		; 2
   1006  f4de		       bd a0 fd 	      LDA	FontLookup,X	;4
   1007  f4e1		       85 d0		      STA	ScoreD0	;3
   1008  f4e3
   1009  f4e3		       a9 90		      LDA	#<Pipe + #FONT_OFFSET	;3
   1010  f4e5		       85 d2		      STA	ScoreD2	;3
   1011  f4e7
   1012  f4e7				   Digit0Speed
   1013  f4e7		       a5 8e		      LDA	Player0SpeedL
   1014  f4e9		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1015  f4eb		       4a		      LSR		; 2
   1016  f4ec		       4a		      LSR		; 2
   1017  f4ed		       aa		      TAX		; 2
   1018  f4ee		       bd a0 fd 	      LDA	FontLookup,X	;4
   1019  f4f1		       85 d4		      STA	ScoreD4	;3
   1020  f4f3
   1021  f4f3				   Digit1Speed
   1022  f4f3		       a5 8e		      LDA	Player0SpeedL
   1023  f4f5		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1024  f4f7		       18		      CLC
   1025  f4f8		       2a		      ROL		;First goes into carry
   1026  f4f9		       2a		      ROL
   1027  f4fa		       2a		      ROL
   1028  f4fb		       85 b0		      STA	Tmp0
   1029  f4fd		       a5 8f		      LDA	Player0SpeedH
   1030  f4ff		       0a		      ASL
   1031  f500		       0a		      ASL
   1032  f501		       05 b0		      ORA	Tmp0
   1033  f503		       aa		      TAX		; 2
   1034  f504		       bd a0 fd 	      LDA	FontLookup,X	;4
   1035  f507		       85 d3		      STA	ScoreD3	;3
   1036  f509		       4c 2d f5 	      JMP	RightScoreWriteEnd
   1037  f50c
   1038  f50c				   PrintHellwayRight
   1039  f50c		       a5 8d		      LDA	FrameCount1
   1040  f50e		       29 01		      AND	#1
   1041  f510		       d0 05		      BNE	PrintCreditsRight
   1042  f512		       a2 0a		      LDX	#<HellwayRightText
   1043  f514		       4c 19 f5 	      JMP	PrintRightIntro
   1044  f517				   PrintCreditsRight
   1045  f517		       a2 14		      LDX	#<YearText
   1046  f519				   PrintRightIntro
   1047  f519		       20 5d f6 	      JSR	PrintStaticText
   1048  f51c		       4c 2d f5 	      JMP	RightScoreWriteEnd
   1049  f51f				   PrintGameOver
   1050  f51f		       a5 8c		      LDA	FrameCount0
   1051  f521		       30 05		      BMI	PrintOverText
   1052  f523		       a2 19		      LDX	#<GameText
   1053  f525		       4c 2a f5 	      JMP	StoreGameOverText
   1054  f528				   PrintOverText
   1055  f528		       a2 1e		      LDX	#<OverText
   1056  f52a				   StoreGameOverText
   1057  f52a		       20 5d f6 	      JSR	PrintStaticText
   1058  f52d				   RightScoreWriteEnd
   1059  f52d
   1060  f52d				   LeftSound
   1061  f52d		       a5 bc		      LDA	CountdownTimer
   1062  f52f		       f0 24		      BEQ	EngineOff
   1063  f531		       a5 8e		      LDA	Player0SpeedL
   1064  f533		       29 80		      AND	#%10000000
   1065  f535		       05 8f		      ORA	Player0SpeedH
   1066  f537		       18		      CLC
   1067  f538		       2a		      ROL
   1068  f539		       69 00		      ADC	#0	; Places the possible carry produced by ROL
   1069  f53b		       aa		      TAX
   1070  f53c		       a5 8e		      LDA	Player0SpeedL
   1071  f53e		       4a		      LSR
   1072  f53f		       4a		      LSR
   1073  f540		       4a		      LSR
   1074  f541		       29 0f		      AND	#%00001111
   1075  f543		       85 b0		      STA	Tmp0
   1076  f545		       bd b6 fd 	      LDA	EngineBaseFrequence,X	; Max of 5 bits
   1077  f548		       38		      SEC
   1078  f549		       e5 b0		      SBC	Tmp0
   1079  f54b		       85 17		      STA	AUDF0
   1080  f54d		       bd b0 fd 	      LDA	EngineSoundType,X
   1081  f550		       85 15		      STA	AUDC0
   1082  f552		       4c 59 f5 	      JMP	EndLeftSound
   1083  f555				   EngineOff
   1084  f555		       a9 00		      LDA	#0
   1085  f557		       85 15		      STA	AUDC0
   1086  f559
   1087  f559				   EndLeftSound
   1088  f559
   1089  f559
   1090  f559				   RightSound		; More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1091  f559		       a5 d5		      LDA	ScoreFontColor
   1092  f55b		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1093  f55d		       f0 4a		      BEQ	MuteRightSound	; A little bit of silence, since you will be run over all the time
   1094  f55f		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1095  f561		       f0 21		      BEQ	PlayCheckpoint
   1096  f563		       a5 ba		      LDA	CollisionCounter
   1097  f565		       c9 e0		      CMP	#$E0
   1098  f567		       b0 0c		      BCS	PlayColision
   1099  f569		       a5 d7		      LDA	NextCheckpoint
   1100  f56b		       38		      SEC
   1101  f56c		       e5 92		      SBC	TrafficOffset0 + 2
   1102  f56e		       c9 02		      CMP	#$02
   1103  f570		       90 24		      BCC	PlayBeforeCheckpoint
   1104  f572		       4c a9 f5 	      JMP	MuteRightSound
   1105  f575				   PlayColision
   1106  f575		       a9 1f		      LDA	#31
   1107  f577		       85 18		      STA	AUDF1
   1108  f579		       a9 08		      LDA	#8
   1109  f57b		       85 16		      STA	AUDC1
   1110  f57d		       a9 08		      LDA	#8
   1111  f57f		       85 1a		      STA	AUDV1
   1112  f581		       4c ad f5 	      JMP	EndRightSound
   1113  f584
   1114  f584				   PlayCheckpoint
   1115  f584		       a5 d6		      LDA	ScoreFontColorHoldChange
   1116  f586		       4a		      LSR
   1117  f587		       4a		      LSR
   1118  f588		       4a		      LSR
   1119  f589		       85 18		      STA	AUDF1
   1120  f58b		       a9 0c		      LDA	#12
   1121  f58d		       85 16		      STA	AUDC1
   1122  f58f		       a9 06		      LDA	#6
   1123  f591		       85 1a		      STA	AUDV1
   1124  f593		       4c ad f5 	      JMP	EndRightSound
   1125  f596
   1126  f596				   PlayBeforeCheckpoint
   1127  f596		       a5 8c		      LDA	FrameCount0
   1128  f598		       29 1c		      AND	#%00011100
   1129  f59a		       09 03		      ORA	#%00000011
   1130  f59c		       85 18		      STA	AUDF1
   1131  f59e		       a9 0c		      LDA	#12
   1132  f5a0		       85 16		      STA	AUDC1
   1133  f5a2		       a9 03		      LDA	#3
   1134  f5a4		       85 1a		      STA	AUDV1
   1135  f5a6		       4c ad f5 	      JMP	EndRightSound
   1136  f5a9
   1137  f5a9				   MuteRightSound
   1138  f5a9		       a9 00		      LDA	#0
   1139  f5ab		       85 1a		      STA	AUDV1
   1140  f5ad
   1141  f5ad				   EndRightSound
   1142  f5ad
   1143  f5ad				   OverScanWait
   1144  f5ad		       ad 84 02 	      LDA	INTIM
   1145  f5b0		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1146  f5b2		       4c 7c f0 	      JMP	MainLoop
   1147  f5b5
   1148  f5b5				   Subroutines
   1149  f5b5
   1150  f5b5				   ClearAll		; 52
   1151  f5b5		       a9 00		      LDA	#0	;2
   1152  f5b7		       85 1c		      STA	GRP1	;3
   1153  f5b9		       85 1f		      STA	ENABL	;3
   1154  f5bb		       85 1d		      STA	ENAM0	;3
   1155  f5bd		       85 1e		      STA	ENAM1	;3
   1156  f5bf		       85 84		      STA	GRP1Cache	;3
   1157  f5c1		       85 85		      STA	ENABLCache	;3
   1158  f5c3		       85 86		      STA	ENAM0Cache	;3
   1159  f5c5		       85 87		      STA	ENAM1Cache	;3
   1160  f5c7
   1161  f5c7				   ClearPF		; 26
   1162  f5c7		       a9 00		      LDA	#0	;2
   1163  f5c9				   ClearPFSkipLDA0
   1164  f5c9		       85 0d		      STA	PF0	;3
   1165  f5cb		       85 0e		      STA	PF1	;3
   1166  f5cd		       85 0f		      STA	PF2	;3	
   1167  f5cf		       85 81		      STA	PF0Cache	;3
   1168  f5d1		       85 82		      STA	PF1Cache	;3
   1169  f5d3		       85 83		      STA	PF2Cache	;3 
   1170  f5d5		       60		      RTS		;6
   1171  f5d6				   EndClearAll
   1172  f5d6
   1173  f5d6				   LoadAll		; 48
   1174  f5d6		       a5 81		      LDA	PF0Cache	;3
   1175  f5d8		       85 0d		      STA	PF0	;3
   1176  f5da
   1177  f5da		       a5 82		      LDA	PF1Cache	;3
   1178  f5dc		       85 0e		      STA	PF1	;3
   1179  f5de
   1180  f5de		       a5 83		      LDA	PF2Cache	;3
   1181  f5e0		       85 0f		      STA	PF2	;3
   1182  f5e2
   1183  f5e2		       a5 84		      LDA	GRP1Cache	;3
   1184  f5e4		       85 1c		      STA	GRP1	;3
   1185  f5e6
   1186  f5e6		       a5 85		      LDA	ENABLCache	;3
   1187  f5e8		       85 1f		      STA	ENABL	;3
   1188  f5ea
   1189  f5ea		       a5 86		      LDA	ENAM0Cache	;3
   1190  f5ec		       85 1d		      STA	ENAM0	;3
   1191  f5ee
   1192  f5ee		       a5 87		      LDA	ENAM1Cache	;3
   1193  f5f0		       85 1e		      STA	ENAM1	;3
   1194  f5f2
   1195  f5f2		       60		      RTS		;6
   1196  f5f3				   EndLoadAll
   1197  f5f3
   1198  f5f3				   NextDifficulty
   1199  f5f3		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1200  f5f5		       29 01		      AND	#%00000001
   1201  f5f7		       d0 3f		      BNE	CheckRandomDifficulty
   1202  f5f9
   1203  f5f9		       a5 c4		      LDA	CurrentDifficulty
   1204  f5fb		       18		      CLC
   1205  f5fc		       69 01		      ADC	#1
   1206  f5fe		       29 03		      AND	#%00000011	; 0 to 3
   1207  f600		       85 c4		      STA	CurrentDifficulty
   1208  f602
   1209  f602				   ConfigureDifficulty
   1210  f602		       a5 c4		      LDA	CurrentDifficulty
   1211  f604		       f0 0b		      BEQ	ConfigureLightTraffic
   1212  f606		       c9 01		      CMP	#1
   1213  f608		       f0 10		      BEQ	ConfigureRegularTraffic
   1214  f60a		       c9 02		      CMP	#2
   1215  f60c		       f0 15		      BEQ	ConfigureIntenseTraffic
   1216  f60e		       4c 2c f6 	      JMP	ConfigureRushHourTraffic
   1217  f611
   1218  f611				   ConfigureLightTraffic
   1219  f611		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1220  f613		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1221  f615		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1222  f617		       4c 32 f6 	      JMP	StoreTrafficChance
   1223  f61a				   ConfigureRegularTraffic
   1224  f61a		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1225  f61c		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1226  f61e		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1227  f620		       4c 32 f6 	      JMP	StoreTrafficChance
   1228  f623				   ConfigureIntenseTraffic
   1229  f623		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1230  f625		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1231  f627		       a9 f4		      LDA	#TRAFFIC_COLOR_INTENSE
   1232  f629		       4c 32 f6 	      JMP	StoreTrafficChance
   1233  f62c				   ConfigureRushHourTraffic
   1234  f62c		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1235  f62e		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1236  f630		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1237  f632
   1238  f632				   StoreTrafficChance
   1239  f632		       86 c1		      STX	TrafficChance
   1240  f634		       84 c2		      STY	CheckpointTime
   1241  f636		       85 c3		      STA	TrafficColor
   1242  f638
   1243  f638				   CheckRandomDifficulty
   1244  f638		       a5 c5		      LDA	GameMode
   1245  f63a		       29 08		      AND	#%00001000	; Random difficulties
   1246  f63c		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1247  f63e				   RandomDificulty
   1248  f63e		       a6 8c		      LDX	FrameCount0
   1249  f640		       bd 00 fe 	      LDA	AesTable,X
   1250  f643		       45 c1		      EOR	TrafficChance
   1251  f645		       29 3f		      AND	#%00111111
   1252  f647		       85 c1		      STA	TrafficChance
   1253  f649
   1254  f649				   ReturnFromNextDifficulty
   1255  f649		       60		      RTS
   1256  f64a				   EndNextDifficulty
   1257  f64a
   1258  f64a				   DefaultOffsets
   1259  f64a		       a9 20		      LDA	#$20
   1260  f64c		       85 96		      STA	TrafficOffset1 + 2
   1261  f64e		       a9 40		      LDA	#$40
   1262  f650		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1263  f652		       a9 60		      LDA	#$60
   1264  f654		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1265  f656		       a9 80		      LDA	#$80
   1266  f658		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1267  f65a		       a9 a0		      LDA	#$A0
   1268  f65c		       60		      RTS
   1269  f65d
   1270  f65d				   PrintStaticText		; Preload X with the offset referent to StaticText
   1271  f65d		       bd 00 ff 	      LDA	StaticText,X
   1272  f660		       85 d0		      STA	ScoreD0
   1273  f662		       e8		      INX
   1274  f663		       bd 00 ff 	      LDA	StaticText,X
   1275  f666		       85 d1		      STA	ScoreD1
   1276  f668		       e8		      INX
   1277  f669		       bd 00 ff 	      LDA	StaticText,X
   1278  f66c		       85 d2		      STA	ScoreD2
   1279  f66e		       e8		      INX
   1280  f66f		       bd 00 ff 	      LDA	StaticText,X
   1281  f672		       85 d3		      STA	ScoreD3
   1282  f674		       e8		      INX
   1283  f675		       bd 00 ff 	      LDA	StaticText,X
   1284  f678		       85 d4		      STA	ScoreD4
   1285  f67a		       60		      RTS
   1286  f67b
   1287  f67b				   Sleep16
   1288  f67b		       ea		      NOP
   1289  f67c		       ea		      NOP
   1290  f67d		       60		      RTS
   1291  f67e
   1292  f67e							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   1293  fd00					      org	$FD00
   1294  fd00				   Font
   1295  fd00				   C0
   1296  fd00		       e7		      .byte.b	#%11100111	;
   1297  fd01		       a5		      .byte.b	#%10100101	; 
   1298  fd02		       a5		      .byte.b	#%10100101	; 
   1299  fd03		       a5		      .byte.b	#%10100101	; 
   1300  fd04		       e7		      .byte.b	#%11100111	;	
   1301  fd05				   C1
   1302  fd05		       e7		      .byte.b	#%11100111	;
   1303  fd06		       42		      .byte.b	#%01000010	; 
   1304  fd07		       42		      .byte.b	#%01000010	; 
   1305  fd08		       42		      .byte.b	#%01000010	; 
   1306  fd09		       66		      .byte.b	#%01100110	;
   1307  fd0a				   C2
   1308  fd0a		       e7		      .byte.b	#%11100111	;
   1309  fd0b		       24		      .byte.b	#%00100100	; 
   1310  fd0c		       e7		      .byte.b	#%11100111	; 
   1311  fd0d		       81		      .byte.b	#%10000001	; 
   1312  fd0e		       e7		      .byte.b	#%11100111	;
   1313  fd0f				   C3
   1314  fd0f		       e7		      .byte.b	#%11100111	;
   1315  fd10		       81		      .byte.b	#%10000001	; 
   1316  fd11		       e7		      .byte.b	#%11100111	; 
   1317  fd12		       81		      .byte.b	#%10000001	; 
   1318  fd13		       e7		      .byte.b	#%11100111	;
   1319  fd14				   C4
   1320  fd14		       81		      .byte.b	#%10000001	;
   1321  fd15		       81		      .byte.b	#%10000001	; 
   1322  fd16		       e7		      .byte.b	#%11100111	; 
   1323  fd17		       a5		      .byte.b	#%10100101	; 
   1324  fd18		       a5		      .byte.b	#%10100101	;
   1325  fd19				   C5
   1326  fd19		       e7		      .byte.b	#%11100111	;
   1327  fd1a		       81		      .byte.b	#%10000001	; 
   1328  fd1b		       e7		      .byte.b	#%11100111	; 
   1329  fd1c		       24		      .byte.b	#%00100100	; 
   1330  fd1d		       e7		      .byte.b	#%11100111	;
   1331  fd1e				   C6
   1332  fd1e		       e7		      .byte.b	#%11100111	;
   1333  fd1f		       a5		      .byte.b	#%10100101	; 
   1334  fd20		       e7		      .byte.b	#%11100111	; 
   1335  fd21		       24		      .byte.b	#%00100100	; 
   1336  fd22		       e7		      .byte.b	#%11100111	;
   1337  fd23				   C7
   1338  fd23		       81		      .byte.b	#%10000001	;
   1339  fd24		       81		      .byte.b	#%10000001	; 
   1340  fd25		       81		      .byte.b	#%10000001	; 
   1341  fd26		       81		      .byte.b	#%10000001	; 
   1342  fd27		       e7		      .byte.b	#%11100111	;
   1343  fd28				   C8
   1344  fd28		       e7		      .byte.b	#%11100111	;
   1345  fd29		       a5		      .byte.b	#%10100101	; 
   1346  fd2a		       e7		      .byte.b	#%11100111	; 
   1347  fd2b		       a5		      .byte.b	#%10100101	; 
   1348  fd2c		       e7		      .byte.b	#%11100111	;
   1349  fd2d				   C9
   1350  fd2d		       e7		      .byte.b	#%11100111	;
   1351  fd2e		       81		      .byte.b	#%10000001	; 
   1352  fd2f		       e7		      .byte.b	#%11100111	; 
   1353  fd30		       a5		      .byte.b	#%10100101	; 
   1354  fd31		       e7		      .byte.b	#%11100111	;
   1355  fd32				   CA
   1356  fd32		       a5		      .byte.b	#%10100101	;
   1357  fd33		       a5		      .byte.b	#%10100101	; 
   1358  fd34		       e7		      .byte.b	#%11100111	; 
   1359  fd35		       a5		      .byte.b	#%10100101	; 
   1360  fd36		       e7		      .byte.b	#%11100111	;
   1361  fd37				   CB
   1362  fd37		       66		      .byte.b	#%01100110	;
   1363  fd38		       a5		      .byte.b	#%10100101	; 
   1364  fd39		       66		      .byte.b	#%01100110	; 
   1365  fd3a		       a5		      .byte.b	#%10100101	;
   1366  fd3b		       66		      .byte.b	#%01100110	;
   1367  fd3c				   CC
   1368  fd3c		       e7		      .byte.b	#%11100111	;
   1369  fd3d		       24		      .byte.b	#%00100100	; 
   1370  fd3e		       24		      .byte.b	#%00100100	; 
   1371  fd3f		       24		      .byte.b	#%00100100	;
   1372  fd40		       e7		      .byte.b	#%11100111	;
   1373  fd41
   1374  fd41				   CD
   1375  fd41		       66		      .byte.b	#%01100110	;
   1376  fd42		       a5		      .byte.b	#%10100101	; 
   1377  fd43		       a5		      .byte.b	#%10100101	; 
   1378  fd44		       a5		      .byte.b	#%10100101	;
   1379  fd45		       66		      .byte.b	#%01100110	;
   1380  fd46
   1381  fd46				   CE
   1382  fd46		       e7		      .byte.b	#%11100111	;
   1383  fd47		       24		      .byte.b	#%00100100	; 
   1384  fd48		       e7		      .byte.b	#%11100111	; 
   1385  fd49		       24		      .byte.b	#%00100100	; 
   1386  fd4a		       e7		      .byte.b	#%11100111	;
   1387  fd4b
   1388  fd4b				   CF
   1389  fd4b		       24		      .byte.b	#%00100100	;
   1390  fd4c		       24		      .byte.b	#%00100100	; 
   1391  fd4d		       e7		      .byte.b	#%11100111	; 
   1392  fd4e		       24		      .byte.b	#%00100100	; 
   1393  fd4f		       e7		      .byte.b	#%11100111	;
   1394  fd50
   1395  fd50				   CG
   1396  fd50		       c3		      .byte.b	#%11000011	;
   1397  fd51		       a5		      .byte.b	#%10100101	; 
   1398  fd52		       a5		      .byte.b	#%10100101	; 
   1399  fd53		       24		      .byte.b	#%00100100	; 
   1400  fd54		       c3		      .byte.b	#%11000011	;	
   1401  fd55
   1402  fd55				   CL
   1403  fd55		       e7		      .byte.b	#%11100111	;
   1404  fd56		       24		      .byte.b	#%00100100	; 
   1405  fd57		       24		      .byte.b	#%00100100	; 
   1406  fd58		       24		      .byte.b	#%00100100	; 
   1407  fd59		       24		      .byte.b	#%00100100	;
   1408  fd5a
   1409  fd5a
   1410  fd5a				   CH
   1411  fd5a		       a5		      .byte.b	#%10100101	;
   1412  fd5b		       a5		      .byte.b	#%10100101	; 
   1413  fd5c		       e7		      .byte.b	#%11100111	; 
   1414  fd5d		       a5		      .byte.b	#%10100101	; 
   1415  fd5e		       a5		      .byte.b	#%10100101	;
   1416  fd5f
   1417  fd5f				   CM
   1418  fd5f		       a5		      .byte.b	#%10100101	;
   1419  fd60		       a5		      .byte.b	#%10100101	; 
   1420  fd61		       a5		      .byte.b	#%10100101	; 
   1421  fd62		       e7		      .byte.b	#%11100111	; 
   1422  fd63		       a5		      .byte.b	#%10100101	;
   1423  fd64
   1424  fd64
   1425  fd64				   CO
   1426  fd64		       42		      .byte.b	#%01000010	;
   1427  fd65		       a5		      .byte.b	#%10100101	; 
   1428  fd66		       a5		      .byte.b	#%10100101	; 
   1429  fd67		       a5		      .byte.b	#%10100101	; 
   1430  fd68		       42		      .byte.b	#%01000010	;	
   1431  fd69
   1432  fd69				   CP
   1433  fd69		       24		      .byte.b	#%00100100	;
   1434  fd6a		       24		      .byte.b	#%00100100	; 
   1435  fd6b		       e7		      .byte.b	#%11100111	; 
   1436  fd6c		       a5		      .byte.b	#%10100101	; 
   1437  fd6d		       e7		      .byte.b	#%11100111	;
   1438  fd6e
   1439  fd6e				   CR
   1440  fd6e		       a5		      .byte.b	#%10100101	;
   1441  fd6f		       a5		      .byte.b	#%10100101	; 
   1442  fd70		       66		      .byte.b	#%01100110	; 
   1443  fd71		       a5		      .byte.b	#%10100101	; 
   1444  fd72		       66		      .byte.b	#%01100110	;
   1445  fd73
   1446  fd73				   CS
   1447  fd73		       66		      .byte.b	#%01100110	;
   1448  fd74		       81		      .byte.b	#%10000001	; 
   1449  fd75		       42		      .byte.b	#%01000010	; 
   1450  fd76		       24		      .byte.b	#%00100100	; 
   1451  fd77		       c3		      .byte.b	#%11000011	;
   1452  fd78
   1453  fd78				   CT
   1454  fd78		       42		      .byte.b	#%01000010	;
   1455  fd79		       42		      .byte.b	#%01000010	; 
   1456  fd7a		       42		      .byte.b	#%01000010	; 
   1457  fd7b		       42		      .byte.b	#%01000010	; 
   1458  fd7c		       e7		      .byte.b	#%11100111	;
   1459  fd7d
   1460  fd7d				   CV
   1461  fd7d		       42		      .byte.b	#%01000010	;
   1462  fd7e		       a5		      .byte.b	#%10100101	; 
   1463  fd7f		       a5		      .byte.b	#%10100101	; 
   1464  fd80		       a5		      .byte.b	#%10100101	; 
   1465  fd81		       a5		      .byte.b	#%10100101	;	
   1466  fd82
   1467  fd82				   CY
   1468  fd82		       42		      .byte.b	#%01000010	;
   1469  fd83		       42		      .byte.b	#%01000010	; 
   1470  fd84		       42		      .byte.b	#%01000010	; 
   1471  fd85		       a5		      .byte.b	#%10100101	; 
   1472  fd86		       a5		      .byte.b	#%10100101	;
   1473  fd87
   1474  fd87				   CW
   1475  fd87		       a5		      .byte.b	#%10100101	;
   1476  fd88		       e7		      .byte.b	#%11100111	; 
   1477  fd89		       a5		      .byte.b	#%10100101	; 
   1478  fd8a		       a5		      .byte.b	#%10100101	; 
   1479  fd8b		       a5		      .byte.b	#%10100101	;
   1480  fd8c
   1481  fd8c				   Pipe
   1482  fd8c		       42		      .byte.b	#%01000010	;
   1483  fd8d		       00		      .byte.b	#%00000000	; 
   1484  fd8e		       42		      .byte.b	#%01000010	; 
   1485  fd8f		       00		      .byte.b	#%00000000	; 
   1486  fd90		       42		      .byte.b	#%01000010	;
   1487  fd91
   1488  fd91				   Exclamation
   1489  fd91		       42		      .byte.b	#%01000010	;
   1490  fd92		       00		      .byte.b	#%00000000	; 
   1491  fd93		       42		      .byte.b	#%01000010	; 
   1492  fd94		       42		      .byte.b	#%01000010	; 
   1493  fd95		       42		      .byte.b	#%01000010	;
   1494  fd96
   1495  fd96				   Dot
   1496  fd96		       42		      .byte.b	#%01000010	;
   1497  fd97		       42		      .byte.b	#%01000010	; 
   1498  fd98		       00		      .byte.b	#%00000000	; 
   1499  fd99		       00		      .byte.b	#%00000000	; 
   1500  fd9a		       00		      .byte.b	#%00000000	;
   1501  fd9b
   1502  fd9b				   Space		; Moved from the beggining so 0 to F is fast to draw.
   1503  fd9b		       00		      .byte.b	#0	;
   1504  fd9c		       00		      .byte.b	#0	;
   1505  fd9d		       00		      .byte.b	#0	;
   1506  fd9e		       00		      .byte.b	#0	;
   1507  fd9f		       00		      .byte.b	#0	;
   1508  fda0
   1509  fda0				   FontLookup		; Very fast font lookup for dynamic values!
   1510  fda0		       04		      .byte.b	#<C0 + #FONT_OFFSET
   1511  fda1		       09		      .byte.b	#<C1 + #FONT_OFFSET
   1512  fda2		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1513  fda3		       13		      .byte.b	#<C3 + #FONT_OFFSET
   1514  fda4		       18		      .byte.b	#<C4 + #FONT_OFFSET
   1515  fda5		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   1516  fda6		       22		      .byte.b	#<C6 + #FONT_OFFSET
   1517  fda7		       27		      .byte.b	#<C7 + #FONT_OFFSET
   1518  fda8		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   1519  fda9		       31		      .byte.b	#<C9 + #FONT_OFFSET
   1520  fdaa		       36		      .byte.b	#<CA + #FONT_OFFSET
   1521  fdab		       3b		      .byte.b	#<CB + #FONT_OFFSET
   1522  fdac		       40		      .byte.b	#<CC + #FONT_OFFSET
   1523  fdad		       45		      .byte.b	#<CD + #FONT_OFFSET
   1524  fdae		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1525  fdaf		       4f		      .byte.b	#<CF + #FONT_OFFSET
   1526  fdb0
   1527  fdb0				   EngineSoundType
   1528  fdb0		       02		      .byte.b	#2
   1529  fdb1		       02		      .byte.b	#2
   1530  fdb2		       0e		      .byte.b	#14
   1531  fdb3		       06		      .byte.b	#6
   1532  fdb4		       06		      .byte.b	#6
   1533  fdb5		       0e		      .byte.b	#14
   1534  fdb6
   1535  fdb6				   EngineBaseFrequence
   1536  fdb6		       1f		      .byte.b	#31
   1537  fdb7		       15		      .byte.b	#21
   1538  fdb8		       14		      .byte.b	#20
   1539  fdb9		       1f		      .byte.b	#31
   1540  fdba		       16		      .byte.b	#22
   1541  fdbb		       03		      .byte.b	#3
   1542  fdbc
   1543  fe00					      org	$FE00
   1544  fe00				   AesTable
   1545  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   1546  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   1547  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   1548  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   1549  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   1550  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   1551  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   1552  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   1553  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   1554  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   1555  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   1556  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   1557  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   1558  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   1559  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   1560  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   1561  ff00
   1562  ff00							; From FF00 to FFFB (122 bytes) to use here
   1563  ff00
   1564  ff00				   StaticText		; All static text must be on the same MSB block. 
   1565  ff00				   CheckpointText		; Only the LSB, which is the offset.
   1566  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   1567  ff01		       5e		      .byte.b	#<CH + #FONT_OFFSET
   1568  ff02		       6d		      .byte.b	#<CP + #FONT_OFFSET
   1569  ff03		       7c		      .byte.b	#<CT + #FONT_OFFSET
   1570  ff04		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1571  ff05
   1572  ff05				   HellwayLeftText
   1573  ff05		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1574  ff06		       90		      .byte.b	#<Pipe + #FONT_OFFSET
   1575  ff07		       5e		      .byte.b	#<CH + #FONT_OFFSET
   1576  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1577  ff09		       59		      .byte.b	#<CL + #FONT_OFFSET
   1578  ff0a
   1579  ff0a				   HellwayRightText
   1580  ff0a		       59		      .byte.b	#<CL + #FONT_OFFSET
   1581  ff0b		       8b		      .byte.b	#<CW + #FONT_OFFSET
   1582  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   1583  ff0d		       86		      .byte.b	#<CY + #FONT_OFFSET
   1584  ff0e		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1585  ff0f
   1586  ff0f				   OpbText
   1587  ff0f		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1588  ff10		       90		      .byte.b	#<Pipe + #FONT_OFFSET
   1589  ff11		       68		      .byte.b	#<CO + #FONT_OFFSET
   1590  ff12		       6d		      .byte.b	#<CP + #FONT_OFFSET
   1591  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   1592  ff14
   1593  ff14				   YearText
   1594  ff14		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1595  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1596  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   1597  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1598  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   1599  ff19
   1600  ff19				   GameText
   1601  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   1602  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   1603  ff1b		       63		      .byte.b	#<CM + #FONT_OFFSET
   1604  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1605  ff1d		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1606  ff1e
   1607  ff1e				   OverText
   1608  ff1e		       68		      .byte.b	#<CO + #FONT_OFFSET
   1609  ff1f		       81		      .byte.b	#<CV + #FONT_OFFSET
   1610  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1611  ff21		       72		      .byte.b	#<CR + #FONT_OFFSET
   1612  ff22		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1613  ff23				   GoText
   1614  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   1615  ff24		       68		      .byte.b	#<CO + #FONT_OFFSET
   1616  ff25		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1617  ff26		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1618  ff27		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1619  ff28
   1620  ff28				   EndStaticText
   1621  ff28
   1622  ff28				   CarSprite		; Upside down
   1623  ff28		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   1624  ff29		       7e		      .byte.b	#%01111110
   1625  ff2a		       24		      .byte.b	#%00100100
   1626  ff2b		       bd		      .byte.b	#%10111101
   1627  ff2c		       3c		      .byte.b	#%00111100
   1628  ff2d		       bd		      .byte.b	#%10111101
   1629  ff2e		       3c		      .byte.b	#%00111100
   1630  ff2f		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
   1631  ff61
   1632  ff61				   TrafficSpeeds
   1633  ff61		       00		      .byte.b	#$00	;  Trafic0 L
   1634  ff62		       00		      .byte.b	#$00	;  Trafic0 H
   1635  ff63		       0a		      .byte.b	#$0A	;  Trafic1 L
   1636  ff64		       01		      .byte.b	#$01	;  Trafic1 H
   1637  ff65		       e6		      .byte.b	#$E6	;  Trafic2 L
   1638  ff66		       00		      .byte.b	#$00	;  Trafic2 H
   1639  ff67		       c2		      .byte.b	#$C2	;  Trafic3 L
   1640  ff68		       00		      .byte.b	#$00	;  Trafic3 H
   1641  ff69		       9e		      .byte.b	#$9E	;  Trafic4 L
   1642  ff6a		       00		      .byte.b	#$00	;  Trafic4 H
   1643  ff6b				   TrafficSpeedsHighDelta
   1644  ff6b		       00		      .byte.b	#$00	;  Trafic0 L
   1645  ff6c		       00		      .byte.b	#$00	;  Trafic0 H
   1646  ff6d		       0a		      .byte.b	#$0A	;  Trafic1 L
   1647  ff6e		       01		      .byte.b	#$01	;  Trafic1 H
   1648  ff6f		       c8		      .byte.b	#$C8	;  Trafic2 L
   1649  ff70		       00		      .byte.b	#$00	;  Trafic2 H
   1650  ff71		       86		      .byte.b	#$86	;  Trafic3 L
   1651  ff72		       00		      .byte.b	#$00	;  Trafic3 H
   1652  ff73		       44		      .byte.b	#$44	;  Trafic4 L
   1653  ff74		       00		      .byte.b	#$00	;  Trafic4 H
   1654  ff75
   1655  fffc					      org	$FFFC
   1656  fffc		       00 f0		      .word.w	BeforeStart
   1657  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
