------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     13  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     14  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     15  f000
     16  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     17  f000							;16 bit precision
     18  f000							;640 max speed!
     19  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     20  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     21  f000		       00 00	   CAR_MIN_SPEED_H =	0
     22  f000		       00 00	   CAR_MIN_SPEED_L =	0
     23  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     24  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     25  f000		       00 01	   ACCELERATE_SPEED =	1
     26  f000		       00 0a	   BREAK_SPEED =	10
     27  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     28  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000	;Min car size... Maybe make different per track
     29  f000		       00 1c	   TRAFFIC_1_CHANCE =	#28
     30  f000
     31  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     32  f000		       00 34	   TRAFFIC_COLOR =	$34
     33  f000		       00 87	   SCORE_BACKGROUND_COLOR =	$87
     34  f000
     35  f000		       00 0c	   SCORE_FONT_COLOR =	$0C
     36  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     37  f000		       00 34	   SCORE_FONT_COLOR_BAD =	$34
     38  f000		       00 2f	   SCORE_FONT_COLOR_OVER =	$2F
     39  f000
     40  f000		       00 28	   PLAYER_0_X_START =	$28	;
     41  f000		       00 2a	   PLAYER_0_MAX_X =	$2A	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     42  f000
     43  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	;
     44  f000		       00 23	   CHECKPOINT_ADD_TIME =	35	;
     45  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     46  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     47  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	#%00000111	; Every 8 frames
     48  f000
     49  f000
     50  f000		       00 80	   GRP0Cache  =	$80
     51  f000		       00 81	   PF0Cache   =	$81
     52  f000		       00 82	   PF1Cache   =	$82
     53  f000		       00 83	   PF2Cache   =	$83
     54  f000
     55  f000		       00 86	   FrameCount0 =	$86	;
     56  f000		       00 87	   FrameCount1 =	$87	;
     57  f000
     58  f000		       00 88	   Player0SpeedL =	$88
     59  f000		       00 89	   Player0SpeedH =	$89
     60  f000
     61  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     62  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     63  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     64  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     65  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     66  f000
     67  f000							;Temporary variables, multiple uses
     68  f000		       00 b0	   Tmp0       =	$B0
     69  f000		       00 b1	   Tmp1       =	$B1
     70  f000		       00 b2	   Tmp2       =	$B2
     71  f000
     72  f000		       00 ba	   CollisionCounter =	$BA
     73  f000		       00 bb	   Player0X   =	$BB
     74  f000		       00 bc	   CountdownTimer =	$BC
     75  f000		       00 bd	   Traffic0Msb =	$BD
     76  f000
     77  f000
     78  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, D6 = player 0 outside area
     79  f000
     80  f000		       00 d0	   ScoreD0    =	$D0
     81  f000		       00 d1	   ScoreD1    =	$D1
     82  f000		       00 d2	   ScoreD2    =	$D2
     83  f000		       00 d3	   ScoreD3    =	$D3
     84  f000		       00 d4	   ScoreD4    =	$D4
     85  f000		       00 d5	   ScoreFontColor =	$D5
     86  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
     87  f000		       00 d7	   NextCheckpoint =	$D7
     88  f000
     89  f000
     90  f000							;generic start up stuff, put zero in all...
     91  f000				   Start
     92  f000		       78		      SEI
     93  f001		       d8		      CLD
     94  f002		       a2 ff		      LDX	#$FF
     95  f004		       9a		      TXS
     96  f005		       a9 00		      LDA	#0
     97  f007				   ClearMem
     98  f007		       95 00		      STA	0,X
     99  f009		       ca		      DEX
    100  f00a		       d0 fb		      BNE	ClearMem
    101  f00c
    102  f00c							;Setting some variables...
    103  f00c
    104  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
    105  f00e		       85 06		      STA	COLUP0
    106  f010
    107  f010		       a9 85		      LDA	#PLAYER_2_COLOR
    108  f012		       85 07		      STA	COLUP1
    109  f014
    110  f014							;Loop ?
    111  f014		       a9 01		      LDA	#1
    112  f016		       85 94		      STA	TrafficOffset1 + 0	; So we can detect loop
    113  f018		       a9 20		      LDA	#$20
    114  f01a		       85 96		      STA	TrafficOffset1 + 2
    115  f01c		       a9 40		      LDA	#$40
    116  f01e		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
    117  f020		       a9 60		      LDA	#$60
    118  f022		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
    119  f024		       a9 80		      LDA	#$80
    120  f026		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
    121  f028		       a9 a0		      LDA	#$A0
    122  f02a
    123  f02a		       ad 41 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    124  f02d		       85 88		      STA	Player0SpeedL
    125  f02f
    126  f02f		       a5 28		      LDA	PLAYER_0_X_START
    127  f031		       85 bb		      STA	Player0X
    128  f033
    129  f033		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME
    130  f035		       85 bc		      STA	CountdownTimer
    131  f037
    132  f037		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    133  f039		       85 d7		      STA	NextCheckpoint
    134  f03b
    135  f03b							;VSYNC time
    136  f03b				   MainLoop
    137  f03b		       a9 02		      LDA	#2
    138  f03d		       85 00		      STA	VSYNC
    139  f03f		       85 02		      STA	WSYNC
    140  f041		       85 02		      STA	WSYNC
    141  f043							;Apply Movement, must be done after a WSYNC
    142  f043		       85 2a		      STA	HMOVE	;2
    143  f045							;This must be done after a WSync, otherwise it is impossible to predict the X position
    144  f045		       a5 c0		      LDA	GameStatus	;3
    145  f047		       29 80		      AND	#%10000000	;2 game running, we get 0 and not reset the position.
    146  f049		       d0 11		      BNE	DoNotSetPlayerX	;3
    147  f04b		       a6 28		      LDX	PLAYER_0_X_START	; 2
    148  f04d		       86 bb		      STX	Player0X	; 3
    149  f04f							;Do something better than sleep
      0  f04f					      SLEEP	21	;
      1  f04f				   .CYCLES    SET	21
      2  f04f
      3  f04f				  -	      IF	.CYCLES < 2
      4  f04f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f04f				  -	      ERR
      6  f04f					      ENDIF
      7  f04f
      8  f04f					      IF	.CYCLES & 1
      9  f04f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f04f				  -	      nop	0
     11  f04f					      ELSE
     12  f04f		       24 00		      bit	VSYNC
     13  f051					      ENDIF
     14  f051				   .CYCLES    SET	.CYCLES - 3
     15  f051					      ENDIF
     16  f051
     17  f051					      REPEAT	.CYCLES / 2
     18  f051		       ea		      nop
     17  f051					      REPEND
     18  f052		       ea		      nop
     17  f052					      REPEND
     18  f053		       ea		      nop
     17  f053					      REPEND
     18  f054		       ea		      nop
     17  f054					      REPEND
     18  f055		       ea		      nop
     17  f055					      REPEND
     18  f056		       ea		      nop
     17  f056					      REPEND
     18  f057		       ea		      nop
     17  f057					      REPEND
     18  f058		       ea		      nop
     17  f058					      REPEND
     18  f059		       ea		      nop
     19  f05a					      REPEND
    151  f05a		       85 10		      STA	RESP0	;3
    152  f05c
    153  f05c				   DoNotSetPlayerX
    154  f05c
    155  f05c		       85 02		      STA	WSYNC	;3
    156  f05e		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    157  f060		       8d 96 02 	      STA	TIM64T	;3	
    158  f063		       a9 00		      LDA	#0	;2
    159  f065		       85 00		      STA	VSYNC	;3	
    160  f067
    161  f067							;Read Fire Button before, will make it start the game for now.
    162  f067				   StartGame
    163  f067		       a5 0c		      LDA	INPT4	;3
    164  f069		       30 10		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    165  f06b		       a5 c0		      LDA	GameStatus	;3
    166  f06d		       29 80		      AND	#%10000000
    167  f06f		       d0 0a		      BNE	SkipGameStart
    168  f071		       09 80		      ORA	#%10000000	;2
    169  f073		       85 c0		      STA	GameStatus	;3
    170  f075		       a9 00		      LDA	#0	;
    171  f077		       85 86		      STA	FrameCount0
    172  f079		       85 87		      STA	FrameCount1
    173  f07b				   SkipGameStart
    174  f07b
    175  f07b				   CountFrame
    176  f07b		       e6 86		      INC	FrameCount0	; 5 Used to alternate lines
    177  f07d		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    178  f07f		       e6 87		      INC	FrameCount1	; 5 Still not used
    179  f081				   SkipIncFC1
    180  f081
    181  f081							;Does not update the game if not running
    182  f081		       a5 c0		      LDA	GameStatus	;3
    183  f083		       29 80		      AND	#%10000000	;2 game is running...
    184  f085		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    185  f087		       4c aa f1 	      JMP	SkipUpdateLogic
    186  f08a
    187  f08a				   ContinueWithGameLogic
    188  f08a
    189  f08a				   EverySecond		; 64 frames to be more precise
    190  f08a		       a9 3f		      LDA	#%00111111
    191  f08c		       25 86		      AND	FrameCount0
    192  f08e		       d0 06		      BNE	SkipEverySecondAction
    193  f090		       c5 bc		      CMP	CountdownTimer
    194  f092		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    195  f094		       c6 bc		      DEC	CountdownTimer
    196  f096				   SkipEverySecondAction
    197  f096
    198  f096
    199  f096				   Acelerates
    200  f096		       a5 bc		      LDA	CountdownTimer
    201  f098		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    202  f09a		       a5 0c		      LDA	INPT4	;3
    203  f09c		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    204  f09e		       a9 10		      LDA	#%00010000	;UP in controller
    205  f0a0		       2c 80 02 	      BIT	SWCHA
    206  f0a3		       d0 21		      BNE	SkipAccelerate
    207  f0a5
    208  f0a5				   IncreaseCarSpeed
    209  f0a5							;Adds speed
    210  f0a5		       18		      CLC
    211  f0a6		       a5 88		      LDA	Player0SpeedL
    212  f0a8		       69 01		      ADC	#ACCELERATE_SPEED
    213  f0aa		       85 88		      STA	Player0SpeedL
    214  f0ac		       a5 89		      LDA	Player0SpeedH
    215  f0ae		       69 00		      ADC	#0
    216  f0b0		       85 89		      STA	Player0SpeedH
    217  f0b2
    218  f0b2							;Checks if already max
    219  f0b2		       c9 02		      CMP	#CAR_MAX_SPEED_H
    220  f0b4		       90 10		      BCC	SkipAccelerate	; less than my max speed
    221  f0b6		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    222  f0b8							;High bit is max, compare the low
    223  f0b8		       a5 88		      LDA	Player0SpeedL
    224  f0ba		       c9 80		      CMP	#CAR_MAX_SPEED_L
    225  f0bc		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    226  f0be							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    227  f0be
    228  f0be				   ResetToMaxSpeed		; Speed is more, or is already max
    229  f0be		       a9 02		      LDA	#CAR_MAX_SPEED_H
    230  f0c0		       85 89		      STA	Player0SpeedH
    231  f0c2		       a9 80		      LDA	#CAR_MAX_SPEED_L
    232  f0c4		       85 88		      STA	Player0SpeedL
    233  f0c6				   SkipAccelerate
    234  f0c6
    235  f0c6				   BreakOnTimeOver		; Uses LDX as the breaking speed
    236  f0c6		       a2 00		      LDX	#0
    237  f0c8		       a5 bc		      LDA	CountdownTimer
    238  f0ca		       d0 08		      BNE	Break
    239  f0cc		       a5 86		      LDA	FrameCount0
    240  f0ce		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    241  f0d0		       d0 02		      BNE	Break
    242  f0d2		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    243  f0d4
    244  f0d4				   Break
    245  f0d4		       a9 20		      LDA	#%00100000	;Down in controller
    246  f0d6		       2c 80 02 	      BIT	SWCHA
    247  f0d9		       d0 02		      BNE	BreakNonZero
    248  f0db		       a2 0a		      LDX	#BREAK_SPEED
    249  f0dd
    250  f0dd				   BreakNonZero
    251  f0dd		       e0 00		      CPX	#0
    252  f0df		       f0 28		      BEQ	SkipBreak
    253  f0e1		       86 b0		      STX	Tmp0
    254  f0e3
    255  f0e3				   DecreaseSpeed
    256  f0e3		       38		      SEC
    257  f0e4		       a5 88		      LDA	Player0SpeedL
    258  f0e6		       e5 b0		      SBC	Tmp0
    259  f0e8		       85 88		      STA	Player0SpeedL
    260  f0ea		       a5 89		      LDA	Player0SpeedH
    261  f0ec		       e9 00		      SBC	#0
    262  f0ee		       85 89		      STA	Player0SpeedH
    263  f0f0
    264  f0f0				   CheckMinSpeed
    265  f0f0		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    266  f0f2		       c9 00		      CMP	#CAR_MIN_SPEED_H
    267  f0f4		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    268  f0f6		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    269  f0f8
    270  f0f8				   CompareLBreakSpeed
    271  f0f8		       a5 88		      LDA	Player0SpeedL
    272  f0fa		       c9 00		      CMP	#CAR_MIN_SPEED_L
    273  f0fc		       90 03		      BCC	ResetMinSpeed	; Less than memory
    274  f0fe		       4c 09 f1 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    275  f101
    276  f101				   ResetMinSpeed
    277  f101		       a9 00		      LDA	#CAR_MIN_SPEED_H
    278  f103		       85 89		      STA	Player0SpeedH
    279  f105		       a9 00		      LDA	#CAR_MIN_SPEED_L
    280  f107		       85 88		      STA	Player0SpeedL
    281  f109				   SkipBreak
    282  f109
    283  f109							;Updates all offsets 24 bits
    284  f109		       a2 00		      LDX	#0	; Memory Offset 24 bit
    285  f10b		       a0 00		      LDY	#0	; Line Speeds 16 bits
    286  f10d				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    287  f10d		       38		      SEC
    288  f10e		       a5 88		      LDA	Player0SpeedL
    289  f110		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    290  f113		       85 b0		      STA	Tmp0
    291  f115		       c8		      INY
    292  f116		       a5 89		      LDA	Player0SpeedH
    293  f118		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    294  f11b		       85 b1		      STA	Tmp1
    295  f11d		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    296  f11f		       e9 00		      SBC	#0
    297  f121		       85 b2		      STA	Tmp2
    298  f123
    299  f123
    300  f123				   AddsTheResult
    301  f123		       18		      CLC
    302  f124		       a5 b0		      LDA	Tmp0
    303  f126		       75 90		      ADC	TrafficOffset0,X
    304  f128		       95 90		      STA	TrafficOffset0,X
    305  f12a		       e8		      INX
    306  f12b		       a5 b1		      LDA	Tmp1
    307  f12d		       75 90		      ADC	TrafficOffset0,X
    308  f12f		       95 90		      STA	TrafficOffset0,X
    309  f131		       e8		      INX
    310  f132		       a5 b2		      LDA	Tmp2	; Carry
    311  f134		       75 90		      ADC	TrafficOffset0,X
    312  f136		       95 90		      STA	TrafficOffset0,X
    313  f138		       90 06		      BCC	CalculateOffsetCache
    314  f13a		       e0 02		      CPX	#2	;MSB offset 0
    315  f13c		       d0 02		      BNE	CalculateOffsetCache
    316  f13e		       e6 bd		      INC	Traffic0Msb
    317  f140
    318  f140				   CalculateOffsetCache
    319  f140		       e8		      INX
    320  f141		       38		      SEC
    321  f142		       69 00		      ADC	#0	;Increment by one
    322  f144		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    323  f146
    324  f146				   PrepareNextUpdateLoop
    325  f146		       c8		      INY
    326  f147		       e8		      INX
    327  f148		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    328  f14a		       d0 c1		      BNE	UpdateOffsets
    329  f14c
    330  f14c
    331  f14c
    332  f14c							;Until store the movemnt, LDX contains the value to be stored.
    333  f14c				   TestCollision		;
    334  f14c							; see if car0 and playfield collide.
    335  f14c		       a9 80		      LDA	#%10000000
    336  f14e		       24 02		      BIT	CXP0FB
    337  f150		       f0 19		      BEQ	NoCollision	;skip if not hitting...
    338  f152		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    339  f154		       d0 15		      BNE	NoCollision
    340  f156		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    341  f158		       85 ba		      STA	CollisionCounter	;and store as colision.
    342  f15a		       a9 10		      LDA	#COLLISION_SPEED_L	;
    343  f15c		       c5 88		      CMP	Player0SpeedL
    344  f15e		       b0 02		      BCS	SkipSetColisionSpeed
    345  f160		       85 88		      STA	Player0SpeedL
    346  f162				   SkipSetColisionSpeed
    347  f162		       a9 00		      LDA	#0
    348  f164		       85 89		      STA	Player0SpeedH
    349  f166		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    350  f168		       4c a6 f1 	      JMP	StoreHMove	; We keep position consistent
    351  f16b				   NoCollision
    352  f16b
    353  f16b				   DecrementCollision
    354  f16b		       a4 ba		      LDY	CollisionCounter
    355  f16d		       f0 07		      BEQ	FinishDecrementCollision
    356  f16f		       a9 05		      LDA	#%00000101	; Make player bigger to show colision
    357  f171		       85 04		      STA	NUSIZ0
    358  f173		       88		      DEY
    359  f174		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    360  f176				   FinishDecrementCollision
    361  f176
    362  f176				   ResetPlayerSize
    363  f176		       d0 02		      BNE	FinishResetPlayerSize
    364  f178		       84 04		      STY	NUSIZ0	;
    365  f17a				   FinishResetPlayerSize
    366  f17a
    367  f17a				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    368  f17a		       c0 01		      CPY	#1	; Last frame before reset
    369  f17c		       d0 05		      BNE	SkipResetPlayerPosition
    370  f17e		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    371  f180		       4c a6 f1 	      JMP	StoreHMove
    372  f183				   SkipResetPlayerPosition
    373  f183
    374  f183							; for left and right, we're gonna 
    375  f183							; set the horizontal speed, and then do
    376  f183							; a single HMOVE.  We'll use X to hold the
    377  f183							; horizontal speed, then store it in the 
    378  f183							; appropriate register
    379  f183				   PrepareReadXAxis
    380  f183		       a2 00		      LDX	#0
    381  f185		       a4 bb		      LDY	Player0X
    382  f187				   BeginReadLeft
    383  f187		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    384  f189		       a9 40		      LDA	#%01000000	;Left
    385  f18b		       2c 80 02 	      BIT	SWCHA
    386  f18e		       d0 07		      BNE	SkipMoveLeft
    387  f190		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    388  f192		       c6 bb		      DEC	Player0X
    389  f194		       4c a6 f1 	      JMP	StoreHMove	; Cannot move left and right...
    390  f197				   SkipMoveLeft
    391  f197				   BeginReadRight
    392  f197		       c0 2a		      CPY	#PLAYER_0_MAX_X
    393  f199		       f0 0b		      BEQ	SkipMoveRight	; At max already
    394  f19b		       a9 80		      LDA	#%10000000	;Right
    395  f19d		       2c 80 02 	      BIT	SWCHA
    396  f1a0		       d0 04		      BNE	SkipMoveRight
    397  f1a2		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    398  f1a4		       e6 bb		      INC	Player0X
    399  f1a6				   SkipMoveRight
    400  f1a6				   StoreHMove
    401  f1a6		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    402  f1a8		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    403  f1aa
    404  f1aa
    405  f1aa				   SkipUpdateLogic
    406  f1aa		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    407  f1ac		       85 09		      STA	COLUBK
    408  f1ae		       a5 d5		      LDA	ScoreFontColor
    409  f1b0		       85 08		      STA	COLUPF
    410  f1b2		       20 e9 f3 	      JSR	ClearPF
    411  f1b5		       a9 02		      LDA	#%00000010	; Score mode
    412  f1b7		       85 0a		      STA	CTRLPF
    413  f1b9		       a0 04		      LDY	#SCORE_SIZE - 1
    414  f1bb		       a2 00		      LDX	#0
    415  f1bd
    416  f1bd		       a5 86		      LDA	FrameCount0	;3
    417  f1bf		       29 01		      AND	#%00000001	;2
    418  f1c1		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    419  f1c3				   LeftScoreOn
    420  f1c3		       a5 d5		      LDA	ScoreFontColor
    421  f1c5		       85 07		      STA	COLUP1
    422  f1c7		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    423  f1c9		       85 06		      STA	COLUP0
    424  f1cb		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    425  f1cd		       85 b1		      STA	Tmp1
    426  f1cf		       4c de f1 	      JMP	WaitForVblankEnd
    427  f1d2				   RightScoreOn
    428  f1d2		       a5 d5		      LDA	ScoreFontColor
    429  f1d4		       85 06		      STA	COLUP0
    430  f1d6		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    431  f1d8		       85 07		      STA	COLUP1
    432  f1da		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    433  f1dc		       85 b1		      STA	Tmp1
    434  f1de
    435  f1de
    436  f1de							; After here we are going to update the screen, No more heavy code
    437  f1de				   WaitForVblankEnd
    438  f1de		       ad 84 02 	      LDA	INTIM
    439  f1e1		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    440  f1e3							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    441  f1e3		       85 01		      STA	VBLANK
    442  f1e5
    443  f1e5				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    444  f1e5		       85 02		      STA	WSYNC
    445  f1e7
    446  f1e7		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    447  f1e9		       85 0d		      STA	PF0	;3
    448  f1eb
    449  f1eb		       a5 82		      LDA	PF1Cache	;3
    450  f1ed		       85 0e		      STA	PF1	;3
    451  f1ef
    452  f1ef		       a5 83		      LDA	PF2Cache	;3
    453  f1f1		       85 0f		      STA	PF2	;3
    454  f1f3
    455  f1f3							;39
    456  f1f3				   DrawScore
    457  f1f3		       a6 d0		      LDX	ScoreD0	; 4
    458  f1f5		       bd 00 fd 	      LDA	Font,X	;4
    459  f1f8		       85 81		      STA	PF0Cache	;3
    460  f1fa		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    461  f1fc							;17
    462  f1fc
    463  f1fc		       a6 d1		      LDX	ScoreD1	; 4
    464  f1fe		       bd 00 fd 	      LDA	Font,X	;4
    465  f201		       0a		      ASL		;2
    466  f202		       0a		      ASL		;2
    467  f203		       0a		      ASL		;2
    468  f204		       0a		      ASL		;2
    469  f205		       85 82		      STA	PF1Cache	;3
    470  f207		       c6 d1		      DEC	ScoreD1	;6
    471  f209							;9 (After Wsync)
    472  f209
    473  f209		       a6 d2		      LDX	ScoreD2	; 4
    474  f20b		       bd 00 fd 	      LDA	Font,X	;4
    475  f20e		       29 0f		      AND	#%00001111
    476  f210		       05 82		      ORA	PF1Cache	;3
    477  f212		       85 82		      STA	PF1Cache	;3
    478  f214		       c6 d2		      DEC	ScoreD2	;6
    479  f216							;20
    480  f216
    481  f216		       a6 d3		      LDX	ScoreD3	; 3
    482  f218		       bd 00 fd 	      LDA	Font,X	;4
    483  f21b		       4a		      LSR		;2
    484  f21c		       4a		      LSR		;2
    485  f21d		       4a		      LSR		;2
    486  f21e		       4a		      LSR		;2
    487  f21f		       85 83		      STA	PF2Cache	;3
    488  f221		       c6 d3		      DEC	ScoreD3	;5
    489  f223							;23
    490  f223
    491  f223		       a6 d4		      LDX	ScoreD4	; 3
    492  f225		       bd 00 fd 	      LDA	Font,X	;4
    493  f228		       29 f0		      AND	#%11110000
    494  f22a		       05 83		      ORA	PF2Cache	;3
    495  f22c		       85 83		      STA	PF2Cache	;3
    496  f22e		       c6 d4		      DEC	ScoreD4	;5
    497  f230							;18
    498  f230
    499  f230		       88		      DEY		;2
    500  f231		       10 b2		      BPL	ScoreLoop	;4
    501  f233
    502  f233		       85 02		      STA	WSYNC
    503  f235
    504  f235		       20 f8 f3 	      JSR	LoadPF
    505  f238
    506  f238		       85 02		      STA	WSYNC
    507  f23a		       85 02		      STA	WSYNC
    508  f23c
    509  f23c				   PrepareForTraffic
    510  f23c		       20 e9 f3 	      JSR	ClearPF	; 32
    511  f23f
    512  f23f		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    513  f241		       85 06		      STA	COLUP0
    514  f243
    515  f243		       a9 03		      LDA	#BACKGROUND_COLOR	;2
    516  f245		       85 07		      STA	COLUP1	;3
    517  f247
    518  f247							;Traffic colour
    519  f247		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    520  f249		       85 08		      STA	COLUPF	;3
    521  f24b
    522  f24b		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    523  f24d
    524  f24d		       a9 03		      LDA	#BACKGROUND_COLOR	;2 Make it in the very end, so we have one more nice blue line
      0  f24f					      SLEEP	18	; Wait, so the line stay blue
      1  f24f				   .CYCLES    SET	18
      2  f24f
      3  f24f				  -	      IF	.CYCLES < 2
      4  f24f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f24f				  -	      ERR
      6  f24f					      ENDIF
      7  f24f
      8  f24f				  -	      IF	.CYCLES & 1
      9  f24f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f24f				  -	      nop	0
     11  f24f				  -	      ELSE
     12  f24f				  -	      bit	VSYNC
     13  f24f				  -	      ENDIF
     14  f24f				  -.CYCLES    SET	.CYCLES - 3
     15  f24f					      ENDIF
     16  f24f
     17  f24f					      REPEAT	.CYCLES / 2
     18  f24f		       ea		      nop
     17  f24f					      REPEND
     18  f250		       ea		      nop
     17  f250					      REPEND
     18  f251		       ea		      nop
     17  f251					      REPEND
     18  f252		       ea		      nop
     17  f252					      REPEND
     18  f253		       ea		      nop
     17  f253					      REPEND
     18  f254		       ea		      nop
     17  f254					      REPEND
     18  f255		       ea		      nop
     17  f255					      REPEND
     18  f256		       ea		      nop
     17  f256					      REPEND
     18  f257		       ea		      nop
     19  f258					      REPEND
    526  f258		       85 09		      STA	COLUBK	;3
    527  f25a
    528  f25a
    529  f25a							;main scanline loop...
    530  f25a				   ScanLoop
    531  f25a		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    532  f25c
    533  f25c							;Start of next line!			
    534  f25c				   DrawCache		;36 Is the last line going to the top of the next frame?
    535  f25c
    536  f25c		       a5 81		      LDA	PF0Cache	;3
    537  f25e		       85 0d		      STA	PF0	;3
    538  f260
    539  f260		       b9 00 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    540  f263		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    541  f265
    542  f265		       a5 82		      LDA	PF1Cache	;3
    543  f267		       85 0e		      STA	PF1	;3
    544  f269
    545  f269		       a5 83		      LDA	PF2Cache	;3
    546  f26b		       85 0f		      STA	PF2	;3
    547  f26d
    548  f26d		       a9 00		      LDA	#0	;2
    549  f26f		       85 81		      STA	PF0Cache	;3
    550  f271		       85 82		      STA	PF1Cache	;3
    551  f273		       85 83		      STA	PF2Cache	;3
    552  f275
    553  f275							;BEQ DrawTraffic3
    554  f275				   DrawTraffic1 		; 32 
    555  f275		       98		      TYA		; 2
    556  f276		       18		      CLC		; 2 
    557  f277		       65 95		      ADC	TrafficOffset1 + 1	;3
    558  f279		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    559  f27b		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    560  f27d		       45 96		      EOR	TrafficOffset1 + 2	; 3
    561  f27f		       4c 84 f2 	      JMP	AfterEorOffsetWithCarry	; 3
    562  f282				   EorOffsetWithCarry
    563  f282		       45 97		      EOR	TrafficOffset1 + 3	; 3
    564  f284				   AfterEorOffsetWithCarry		;17
    565  f284		       aa		      TAX		;2
    566  f285		       bd 00 fe 	      LDA	AesTable,X	; 4
    567  f288		       c9 1c		      CMP	#TRAFFIC_1_CHANCE	;2
    568  f28a		       b0 04		      BCS	FinishDrawTraffic1	; 2
    569  f28c		       a9 60		      LDA	#%01100000	;2
    570  f28e		       85 82		      STA	PF1Cache	;3
    571  f290				   FinishDrawTraffic1
    572  f290
    573  f290				   DrawTraffic2 		; 35
    574  f290		       98		      TYA		; 2
    575  f291		       18		      CLC		; 2 
    576  f292		       65 99		      ADC	TrafficOffset2 + 1	;3
    577  f294		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    578  f296		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    579  f298		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    580  f29a		       4c 9f f2 	      JMP	AfterEorOffsetWithCarry2	; 3
    581  f29d				   EorOffsetWithCarry2
    582  f29d		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    583  f29f				   AfterEorOffsetWithCarry2		;17
    584  f29f		       aa		      TAX		;2
    585  f2a0		       bd 00 fe 	      LDA	AesTable,X	; 4
    586  f2a3		       c9 1c		      CMP	#TRAFFIC_1_CHANCE	;2
    587  f2a5		       b0 06		      BCS	FinishDrawTraffic2	; 2
    588  f2a7		       a5 82		      LDA	PF1Cache	;3
    589  f2a9		       09 0c		      ORA	#%00001100	;2
    590  f2ab		       85 82		      STA	PF1Cache	;3
    591  f2ad				   FinishDrawTraffic2
    592  f2ad
    593  f2ad							;STA WSYNC ;65 / 137
    594  f2ad
    595  f2ad							; LDA Tmp0 ; Flicker this line if drawing car
    596  f2ad							; BEQ FinishDrawTraffic4
    597  f2ad				   DrawTraffic3 		; 38
    598  f2ad		       98		      TYA		; 2
    599  f2ae		       18		      CLC		; 2 
    600  f2af		       65 9d		      ADC	TrafficOffset3 + 1	;3
    601  f2b1		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    602  f2b3		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    603  f2b5		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    604  f2b7		       4c bc f2 	      JMP	AfterEorOffsetWithCarry3	; 3
    605  f2ba				   EorOffsetWithCarry3
    606  f2ba		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    607  f2bc				   AfterEorOffsetWithCarry3		;17
    608  f2bc		       aa		      TAX		;2
    609  f2bd		       bd 00 fe 	      LDA	AesTable,X	; 4
    610  f2c0		       c9 1c		      CMP	#TRAFFIC_1_CHANCE	;2
    611  f2c2		       b0 08		      BCS	FinishDrawTraffic3	; 2 
    612  f2c4		       a9 01		      LDA	#%00000001	;2
    613  f2c6		       85 83		      STA	PF2Cache	;3
    614  f2c8		       05 82		      ORA	PF1Cache	;3
    615  f2ca		       85 82		      STA	PF1Cache	;3
    616  f2cc				   FinishDrawTraffic3
    617  f2cc
    618  f2cc				   DrawTraffic4 		; 35
    619  f2cc		       98		      TYA		; 2
    620  f2cd		       18		      CLC		; 2 
    621  f2ce		       65 a1		      ADC	TrafficOffset4 + 1	;3
    622  f2d0		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    623  f2d2		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    624  f2d4		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    625  f2d6		       4c db f2 	      JMP	AfterEorOffsetWithCarry4	; 3
    626  f2d9				   EorOffsetWithCarry4
    627  f2d9		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    628  f2db				   AfterEorOffsetWithCarry4		;17
    629  f2db		       aa		      TAX		;2
    630  f2dc		       bd 00 fe 	      LDA	AesTable,X	; 4
    631  f2df		       c9 1c		      CMP	#TRAFFIC_1_CHANCE	;2
    632  f2e1		       b0 06		      BCS	FinishDrawTraffic4	; 2
    633  f2e3		       a5 83		      LDA	PF2Cache	;3
    634  f2e5		       09 0c		      ORA	#%00001100	;2
    635  f2e7		       85 83		      STA	PF2Cache	;3	
    636  f2e9				   FinishDrawTraffic4
    637  f2e9
    638  f2e9				   DrawTraffic0 		; 24
    639  f2e9		       98		      TYA		;2
    640  f2ea		       18		      CLC		;2
    641  f2eb		       65 91		      ADC	TrafficOffset0 + 1	; 3
    642  f2ed		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    643  f2ef		       f0 0a		      BEQ	SkipDrawTraffic0	; 2
    644  f2f1		       a9 f0		      LDA	#%11110000	; 2
    645  f2f3		       85 81		      STA	PF0Cache	;3
    646  f2f5		       a5 83		      LDA	PF2Cache	;3
    647  f2f7		       09 e0		      ORA	#%11100000	;2
    648  f2f9		       85 83		      STA	PF2Cache	; 3
    649  f2fb				   SkipDrawTraffic0
    650  f2fb
    651  f2fb				   WhileScanLoop
    652  f2fb		       88		      DEY		;2
    653  f2fc		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    654  f2fe		       4c 5a f2 	      JMP	ScanLoop	;3
    655  f301				   FinishScanLoop		; 7 209 of 222
    656  f301
    657  f301		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    658  f303		       20 f8 f3 	      JSR	LoadPF
    659  f306		       85 02		      STA	WSYNC	; do stuff!
    660  f308		       85 02		      STA	WSYNC
    661  f30a		       85 02		      STA	WSYNC
    662  f30c							;42 cycles to use here
    663  f30c
    664  f30c				   PrepareOverscan
    665  f30c		       a9 02		      LDA	#2
    666  f30e		       85 02		      STA	WSYNC
    667  f310		       85 01		      STA	VBLANK
    668  f312
    669  f312		       a9 24		      LDA	#36	; one more line before overscan...
    670  f314		       8d 96 02 	      STA	TIM64T
    671  f317
    672  f317				   ProcessScoreFontColor
    673  f317		       a6 d6		      LDX	ScoreFontColorHoldChange
    674  f319		       f0 06		      BEQ	ResetScoreFontColor
    675  f31b		       ca		      DEX
    676  f31c		       86 d6		      STX	ScoreFontColorHoldChange
    677  f31e		       4c 25 f3 	      JMP	SkipScoreFontColor
    678  f321				   ResetScoreFontColor
    679  f321		       a9 0c		      LDA	#SCORE_FONT_COLOR
    680  f323		       85 d5		      STA	ScoreFontColor
    681  f325				   SkipScoreFontColor
    682  f325
    683  f325				   IsGameOver
    684  f325		       a5 bc		      LDA	CountdownTimer
    685  f327		       05 88		      ORA	Player0SpeedL
    686  f329		       05 89		      ORA	Player0SpeedH
    687  f32b		       d0 0b		      BNE	IsCheckpoint
    688  f32d		       a9 01		      LDA	#1
    689  f32f		       85 d6		      STA	ScoreFontColorHoldChange
    690  f331		       a9 2f		      LDA	#SCORE_FONT_COLOR_OVER
    691  f333		       85 d5		      STA	ScoreFontColor
    692  f335		       4c 67 f3 	      JMP	SkipIsTimeOver
    693  f338
    694  f338				   IsCheckpoint
    695  f338		       a5 d7		      LDA	NextCheckpoint
    696  f33a		       c5 92		      CMP	TrafficOffset0 + 2
    697  f33c		       d0 1d		      BNE	SkipIsCheckpoint
    698  f33e		       18		      CLC
    699  f33f		       69 10		      ADC	#CHECKPOINT_INTERVAL
    700  f341		       85 d7		      STA	NextCheckpoint
    701  f343		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    702  f345		       85 d5		      STA	ScoreFontColor
    703  f347		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    704  f349		       85 d6		      STA	ScoreFontColorHoldChange
    705  f34b		       a5 bc		      LDA	CountdownTimer
    706  f34d		       18		      CLC
    707  f34e		       69 23		      ADC	#CHECKPOINT_ADD_TIME
    708  f350		       85 bc		      STA	CountdownTimer
    709  f352		       90 04		      BCC	JumpSkipTimeOver
    710  f354		       a9 ff		      LDA	#$FF
    711  f356		       85 bc		      STA	CountdownTimer	; Does not overflow!
    712  f358				   JumpSkipTimeOver
    713  f358		       4c 67 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    714  f35b				   SkipIsCheckpoint
    715  f35b
    716  f35b				   IsTimeOver
    717  f35b		       a5 bc		      LDA	CountdownTimer
    718  f35d		       d0 08		      BNE	SkipIsTimeOver
    719  f35f		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    720  f361		       85 d6		      STA	ScoreFontColorHoldChange
    721  f363		       a9 34		      LDA	#SCORE_FONT_COLOR_BAD
    722  f365		       85 d5		      STA	ScoreFontColor
    723  f367				   SkipIsTimeOver
    724  f367
    725  f367							;Could be done during on vblank to save this comparisson time (before draw score), 
    726  f367							;but I am saving vblank cycles for now, in case of 2 players.
    727  f367				   ChooseSide		; 
    728  f367		       a5 86		      LDA	FrameCount0	;3
    729  f369		       29 01		      AND	#%00000001	;2
    730  f36b		       f0 37		      BEQ	RightScoreWrite	; Half of the screen with the correct colors.
    731  f36d
    732  f36d				   LeftScoreWrite
    733  f36d				   WriteDistance		;Not optimized yet, ugly code.
    734  f36d
    735  f36d				   Digit0Distance
    736  f36d		       a5 91		      LDA	TrafficOffset0 + 1	;3
    737  f36f		       29 f0		      AND	#%11110000	;2
    738  f371		       4a		      LSR		; 2
    739  f372		       4a		      LSR		; 2
    740  f373		       4a		      LSR		; 2
    741  f374		       4a		      LSR		; 2
    742  f375		       aa		      TAX		; 2
    743  f376		       bd 64 fd 	      LDA	FontLookup,X	;4
    744  f379		       85 d3		      STA	ScoreD3	;3
    745  f37b
    746  f37b				   Digit1Distance
    747  f37b		       a5 92		      LDA	TrafficOffset0 + 2	;3
    748  f37d		       29 0f		      AND	#%00001111	;2
    749  f37f		       aa		      TAX		; 2
    750  f380		       bd 64 fd 	      LDA	FontLookup,X	;4 
    751  f383		       85 d2		      STA	ScoreD2	;3
    752  f385
    753  f385				   Digit2Distance
    754  f385		       a5 92		      LDA	TrafficOffset0 + 2	;3
    755  f387		       29 f0		      AND	#%11110000	;2
    756  f389		       4a		      LSR		; 2
    757  f38a		       4a		      LSR		; 2
    758  f38b		       4a		      LSR		; 2
    759  f38c		       4a		      LSR		; 2
    760  f38d		       aa		      TAX		; 2
    761  f38e		       bd 64 fd 	      LDA	FontLookup,X	;4
    762  f391		       85 d1		      STA	ScoreD1	;3
    763  f393
    764  f393				   Digit3Distance
    765  f393		       a5 bd		      LDA	Traffic0Msb	;3
    766  f395		       29 0f		      AND	#%00001111	;2
    767  f397		       aa		      TAX		; 2
    768  f398		       bd 64 fd 	      LDA	FontLookup,X	;4 
    769  f39b		       85 d0		      STA	ScoreD0	;3
    770  f39d
    771  f39d		       a9 63		      LDA	#<Pipe + #SCORE_SIZE -1	;3
    772  f39f		       85 d4		      STA	ScoreD4	;3
    773  f3a1				   EndDrawDistance
    774  f3a1		       4c e1 f3 	      JMP	RightScoreWriteEnd	;3
    775  f3a4
    776  f3a4				   RightScoreWrite
    777  f3a4				   Digit0Timer
    778  f3a4		       a5 bc		      LDA	CountdownTimer	;3
    779  f3a6		       29 0f		      AND	#%00001111	;2
    780  f3a8		       aa		      TAX		; 2
    781  f3a9		       bd 64 fd 	      LDA	FontLookup,X	;4 
    782  f3ac		       85 d1		      STA	ScoreD1	;3
    783  f3ae
    784  f3ae				   Digit1Timer
    785  f3ae		       a5 bc		      LDA	CountdownTimer	;3
    786  f3b0		       29 f0		      AND	#%11110000	;2
    787  f3b2		       4a		      LSR		; 2
    788  f3b3		       4a		      LSR		; 2
    789  f3b4		       4a		      LSR		; 2
    790  f3b5		       4a		      LSR		; 2
    791  f3b6		       aa		      TAX		; 2
    792  f3b7		       bd 64 fd 	      LDA	FontLookup,X	;4
    793  f3ba		       85 d0		      STA	ScoreD0	;3
    794  f3bc
    795  f3bc		       a9 63		      LDA	#<Pipe + #SCORE_SIZE -1	;3
    796  f3be		       85 d2		      STA	ScoreD2	;3
    797  f3c0
    798  f3c0				   Digit0Speed
    799  f3c0		       a5 88		      LDA	Player0SpeedL
    800  f3c2		       29 3c		      AND	#%00111100	;2 Discard the last bits
    801  f3c4		       4a		      LSR		; 2
    802  f3c5		       4a		      LSR		; 2
    803  f3c6		       aa		      TAX		; 2
    804  f3c7		       bd 64 fd 	      LDA	FontLookup,X	;4
    805  f3ca		       85 d4		      STA	ScoreD4	;3
    806  f3cc
    807  f3cc				   Digit1Speed
    808  f3cc		       a5 88		      LDA	Player0SpeedL
    809  f3ce		       29 c0		      AND	#%11000000	;2 Discard the last bits
    810  f3d0		       2a		      ROL		;First goes into carry
    811  f3d1		       2a		      ROL
    812  f3d2		       2a		      ROL
    813  f3d3		       85 b0		      STA	Tmp0
    814  f3d5		       a5 89		      LDA	Player0SpeedH
    815  f3d7		       0a		      ASL
    816  f3d8		       0a		      ASL
    817  f3d9		       05 b0		      ORA	Tmp0
    818  f3db		       aa		      TAX		; 2
    819  f3dc		       bd 64 fd 	      LDA	FontLookup,X	;4
    820  f3df		       85 d3		      STA	ScoreD3	;3
    821  f3e1
    822  f3e1				   RightScoreWriteEnd
    823  f3e1
    824  f3e1				   OverScanWait
    825  f3e1		       ad 84 02 	      LDA	INTIM
    826  f3e4		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    827  f3e6		       4c 3b f0 	      JMP	MainLoop
    828  f3e9
    829  f3e9				   Subroutines
    830  f3e9
    831  f3e9				   ClearPF		; 26
    832  f3e9		       a9 00		      LDA	#0	;2
    833  f3eb		       85 0d		      STA	PF0	;3
    834  f3ed		       85 0e		      STA	PF1	;3
    835  f3ef		       85 0f		      STA	PF2	;3	
    836  f3f1		       85 81		      STA	PF0Cache	;3
    837  f3f3		       85 82		      STA	PF1Cache	;3
    838  f3f5		       85 83		      STA	PF2Cache	;3 
    839  f3f7		       60		      RTS		;6
    840  f3f8
    841  f3f8				   LoadPF		; 24
    842  f3f8		       a5 81		      LDA	PF0Cache	;3
    843  f3fa		       85 0d		      STA	PF0	;3
    844  f3fc
    845  f3fc		       a5 82		      LDA	PF1Cache	;3
    846  f3fe		       85 0e		      STA	PF1	;3
    847  f400
    848  f400		       a5 83		      LDA	PF2Cache	;3
    849  f402		       85 0f		      STA	PF2	;3
    850  f404
    851  f404		       60		      RTS		;6
    852  f405
    853  f405							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
    854  fd00					      org	$FD00
    855  fd00				   Font
    856  fd00				   C0
    857  fd00		       e7		      .byte.b	#%11100111	;
    858  fd01		       a5		      .byte.b	#%10100101	; 
    859  fd02		       a5		      .byte.b	#%10100101	; 
    860  fd03		       a5		      .byte.b	#%10100101	; 
    861  fd04		       e7		      .byte.b	#%11100111	;	
    862  fd05				   C1
    863  fd05		       e7		      .byte.b	#%11100111	;
    864  fd06		       42		      .byte.b	#%01000010	; 
    865  fd07		       42		      .byte.b	#%01000010	; 
    866  fd08		       42		      .byte.b	#%01000010	; 
    867  fd09		       66		      .byte.b	#%01100110	;
    868  fd0a				   C2
    869  fd0a		       e7		      .byte.b	#%11100111	;
    870  fd0b		       24		      .byte.b	#%00100100	; 
    871  fd0c		       e7		      .byte.b	#%11100111	; 
    872  fd0d		       81		      .byte.b	#%10000001	; 
    873  fd0e		       e7		      .byte.b	#%11100111	;
    874  fd0f				   C3
    875  fd0f		       e7		      .byte.b	#%11100111	;
    876  fd10		       81		      .byte.b	#%10000001	; 
    877  fd11		       e7		      .byte.b	#%11100111	; 
    878  fd12		       81		      .byte.b	#%10000001	; 
    879  fd13		       e7		      .byte.b	#%11100111	;
    880  fd14				   C4
    881  fd14		       81		      .byte.b	#%10000001	;
    882  fd15		       81		      .byte.b	#%10000001	; 
    883  fd16		       e7		      .byte.b	#%11100111	; 
    884  fd17		       a5		      .byte.b	#%10100101	; 
    885  fd18		       a5		      .byte.b	#%10100101	;
    886  fd19				   C5
    887  fd19		       e7		      .byte.b	#%11100111	;
    888  fd1a		       81		      .byte.b	#%10000001	; 
    889  fd1b		       e7		      .byte.b	#%11100111	; 
    890  fd1c		       24		      .byte.b	#%00100100	; 
    891  fd1d		       e7		      .byte.b	#%11100111	;
    892  fd1e				   C6
    893  fd1e		       e7		      .byte.b	#%11100111	;
    894  fd1f		       a5		      .byte.b	#%10100101	; 
    895  fd20		       e7		      .byte.b	#%11100111	; 
    896  fd21		       24		      .byte.b	#%00100100	; 
    897  fd22		       e7		      .byte.b	#%11100111	;
    898  fd23				   C7
    899  fd23		       81		      .byte.b	#%10000001	;
    900  fd24		       81		      .byte.b	#%10000001	; 
    901  fd25		       81		      .byte.b	#%10000001	; 
    902  fd26		       81		      .byte.b	#%10000001	; 
    903  fd27		       e7		      .byte.b	#%11100111	;
    904  fd28				   C8
    905  fd28		       e7		      .byte.b	#%11100111	;
    906  fd29		       a5		      .byte.b	#%10100101	; 
    907  fd2a		       e7		      .byte.b	#%11100111	; 
    908  fd2b		       a5		      .byte.b	#%10100101	; 
    909  fd2c		       e7		      .byte.b	#%11100111	;
    910  fd2d				   C9
    911  fd2d		       e7		      .byte.b	#%11100111	;
    912  fd2e		       81		      .byte.b	#%10000001	; 
    913  fd2f		       e7		      .byte.b	#%11100111	; 
    914  fd30		       a5		      .byte.b	#%10100101	; 
    915  fd31		       e7		      .byte.b	#%11100111	;
    916  fd32				   CA
    917  fd32		       a5		      .byte.b	#%10100101	;
    918  fd33		       a5		      .byte.b	#%10100101	; 
    919  fd34		       e7		      .byte.b	#%11100111	; 
    920  fd35		       a5		      .byte.b	#%10100101	; 
    921  fd36		       e7		      .byte.b	#%11100111	;
    922  fd37				   CB
    923  fd37		       66		      .byte.b	#%01100110	;
    924  fd38		       a5		      .byte.b	#%10100101	; 
    925  fd39		       66		      .byte.b	#%01100110	; 
    926  fd3a		       a5		      .byte.b	#%10100101	;
    927  fd3b		       66		      .byte.b	#%01100110	;
    928  fd3c				   CC
    929  fd3c		       e7		      .byte.b	#%11100111	;
    930  fd3d		       24		      .byte.b	#%00100100	; 
    931  fd3e		       24		      .byte.b	#%00100100	; 
    932  fd3f		       24		      .byte.b	#%00100100	;
    933  fd40		       e7		      .byte.b	#%11100111	;
    934  fd41
    935  fd41				   CD
    936  fd41		       66		      .byte.b	#%01100110	;
    937  fd42		       a5		      .byte.b	#%10100101	; 
    938  fd43		       a5		      .byte.b	#%10100101	; 
    939  fd44		       a5		      .byte.b	#%10100101	;
    940  fd45		       66		      .byte.b	#%01100110	;
    941  fd46
    942  fd46				   CE
    943  fd46		       e7		      .byte.b	#%11100111	;
    944  fd47		       24		      .byte.b	#%00100100	; 
    945  fd48		       e7		      .byte.b	#%11100111	; 
    946  fd49		       24		      .byte.b	#%00100100	; 
    947  fd4a		       e7		      .byte.b	#%11100111	;
    948  fd4b
    949  fd4b				   CF
    950  fd4b		       24		      .byte.b	#%00100100	;
    951  fd4c		       24		      .byte.b	#%00100100	; 
    952  fd4d		       e7		      .byte.b	#%11100111	; 
    953  fd4e		       24		      .byte.b	#%00100100	; 
    954  fd4f		       e7		      .byte.b	#%11100111	;
    955  fd50
    956  fd50				   Space		; Moved from the beggining so 0 to F is fast to draw.
    957  fd50		       00		      .byte.b	%0	;
    958  fd51		       00		      .byte.b	#0	;
    959  fd52		       00		      .byte.b	#0	;
    960  fd53		       00		      .byte.b	#0	;
    961  fd54		       00		      .byte.b	#0	;
    962  fd55
    963  fd55				   CS
    964  fd55		       66		      .byte.b	#%01100110	;
    965  fd56		       81		      .byte.b	#%10000001	; 
    966  fd57		       42		      .byte.b	#%01000010	; 
    967  fd58		       24		      .byte.b	#%00100100	; 
    968  fd59		       c3		      .byte.b	#%11000011	;
    969  fd5a
    970  fd5a				   CT
    971  fd5a		       42		      .byte.b	#%01000010	;
    972  fd5b		       42		      .byte.b	#%01000010	; 
    973  fd5c		       42		      .byte.b	#%01000010	; 
    974  fd5d		       42		      .byte.b	#%01000010	; 
    975  fd5e		       e7		      .byte.b	#%11100111	;
    976  fd5f
    977  fd5f				   Pipe
    978  fd5f		       42		      .byte.b	#%01000010	;
    979  fd60		       00		      .byte.b	#%00000000	; 
    980  fd61		       42		      .byte.b	#%01000010	; 
    981  fd62		       00		      .byte.b	#%00000000	; 
    982  fd63		       42		      .byte.b	#%01000010	;
    983  fd64
    984  fd64				   FontLookup		; Very fast font lookup for dynamic values!
    985  fd64		       04		      .byte.b	#<C0 + #SCORE_SIZE -1
    986  fd65		       09		      .byte.b	#<C1 + #SCORE_SIZE -1
    987  fd66		       0e		      .byte.b	#<C2 + #SCORE_SIZE -1
    988  fd67		       13		      .byte.b	#<C3 + #SCORE_SIZE -1
    989  fd68		       18		      .byte.b	#<C4 + #SCORE_SIZE -1
    990  fd69		       1d		      .byte.b	#<C5 + #SCORE_SIZE -1
    991  fd6a		       22		      .byte.b	#<C6 + #SCORE_SIZE -1
    992  fd6b		       27		      .byte.b	#<C7 + #SCORE_SIZE -1
    993  fd6c		       2c		      .byte.b	#<C8 + #SCORE_SIZE -1
    994  fd6d		       31		      .byte.b	#<C9 + #SCORE_SIZE -1
    995  fd6e		       36		      .byte.b	#<CA + #SCORE_SIZE -1
    996  fd6f		       3b		      .byte.b	#<CB + #SCORE_SIZE -1
    997  fd70		       40		      .byte.b	#<CC + #SCORE_SIZE -1
    998  fd71		       45		      .byte.b	#<CD + #SCORE_SIZE -1
    999  fd72		       4a		      .byte.b	#<CE + #SCORE_SIZE -1
   1000  fd73		       4f		      .byte.b	#<CF + #SCORE_SIZE -1
   1001  fd74
   1002  fd74
   1003  fe00					      org	$FE00
   1004  fe00				   AesTable
   1005  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   1006  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   1007  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   1008  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   1009  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   1010  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   1011  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   1012  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   1013  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   1014  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   1015  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   1016  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   1017  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   1018  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   1019  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   1020  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   1021  ff00
   1022  ff00							; From FF00 to FFFB (122 bytes) to use here
   1023  ff00
   1024  ff00				   CarSprite		; Upside down
   1025  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   1026  ff01		       7e		      .byte.b	#%01111110
   1027  ff02		       24		      .byte.b	#%00100100
   1028  ff03		       bd		      .byte.b	#%10111101
   1029  ff04		       3c		      .byte.b	#%00111100
   1030  ff05		       bd		      .byte.b	#%10111101
   1031  ff06		       3c		      .byte.b	#%00111100
   1032  ff07		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
   1033  ff39
   1034  ff39
   1035  ff39				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
   1036  ff39		       00		      .byte.b	#$00	;  Trafic0 L
   1037  ff3a		       00		      .byte.b	#$00	;  Trafic0 H
   1038  ff3b		       0a		      .byte.b	#$0A	;  Trafic1 L
   1039  ff3c		       01		      .byte.b	#$01	;  Trafic1 H
   1040  ff3d		       e6		      .byte.b	#$E6	;  Trafic2 L
   1041  ff3e		       00		      .byte.b	#$00	;  Trafic2 H
   1042  ff3f		       c2		      .byte.b	#$C2	;  Trafic3 L
   1043  ff40		       00		      .byte.b	#$00	;  Trafic3 H
   1044  ff41		       9e		      .byte.b	#$9E	;  Trafic4 L
   1045  ff42		       00		      .byte.b	#$00	;  Trafic4 H
   1046  ff43
   1047  ff43
   1048  fffc					      org	$FFFC
   1049  fffc		       00 f0		      .word.w	Start
   1050  fffe		       00 f0		      .word.w	Start
