------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 0a	   BREAK_SPEED =	10
     26  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     28  f000
     29  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     30  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     31  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     32  f000
     33  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     34  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     35  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     36  f000
     37  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     38  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     39  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     40  f000
     41  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     42  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     43  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     44  f000
     45  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     46  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     47  f000
     48  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     49  f000
     50  f000		       00 96	   PLAYER1_COLOR =	$96
     51  f000
     52  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     53  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     54  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     55  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     56  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     57  f000
     58  f000		       00 35	   PLAYER_0_X_START =	$35	;
     59  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     60  f000
     61  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     62  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     63  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     64  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	%00000111	; Every 8 frames
     65  f000
     66  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     67  f000
     68  f000		       00 00	   BLACK      =	$00	;
     69  f000
     70  f000		       00 0f	   MAX_GAME_MODE =	15
     71  f000
     72  f000		       00 08	   PARALLAX_SIZE =	8
     73  f000
     74  f000		       00 05	   HALF_TEXT_SIZE =	5
     75  f000
     76  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     77  f000
     78  f000		       00 49	   VERSION_COLOR =	$49
     79  f000
     80  f000		       00 80	   GRP0Cache  =	$80
     81  f000		       00 81	   PF0Cache   =	$81
     82  f000		       00 82	   PF1Cache   =	$82
     83  f000		       00 83	   PF2Cache   =	$83
     84  f000		       00 84	   GRP1Cache  =	$84
     85  f000		       00 85	   ENABLCache =	$85
     86  f000		       00 86	   ENAM0Cache =	$86
     87  f000		       00 87	   ENAM1Cache =	$87
     88  f000
     89  f000		       00 88	   ParallaxMode =	$88
     90  f000
     91  f000		       00 8c	   FrameCount0 =	$8C	;
     92  f000		       00 8d	   FrameCount1 =	$8D	;
     93  f000
     94  f000		       00 8e	   Player0SpeedL =	$8E
     95  f000		       00 8f	   Player0SpeedH =	$8F
     96  f000
     97  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     98  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     99  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    100  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    101  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    102  f000
    103  f000		       00 a4	   CheckpointBcd0 =	$A4
    104  f000		       00 a5	   CheckpointBcd1 =	$A5
    105  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    106  f000
    107  f000							;Temporary variables, multiple uses
    108  f000		       00 b0	   Tmp0       =	$B0
    109  f000		       00 b1	   Tmp1       =	$B1
    110  f000		       00 b2	   Tmp2       =	$B2
    111  f000		       00 b3	   Tmp3       =	$B3
    112  f000
    113  f000		       00 b4	   ScoreBcd0  =	$B4
    114  f000		       00 b5	   ScoreBcd1  =	$B5
    115  f000		       00 b6	   ScoreBcd2  =	$B6
    116  f000		       00 b7	   ScoreBcd3  =	$B7
    117  f000
    118  f000		       00 b8	   CollisionCounter =	$B8
    119  f000		       00 b9	   Player0X   =	$B9
    120  f000		       00 ba	   CountdownTimer =	$BA
    121  f000		       00 bb	   Traffic0Msb =	$BB
    122  f000		       00 bc	   SwitchDebounceCounter =	$BC
    123  f000
    124  f000		       00 bd	   TimeBcd0   =	$BD
    125  f000		       00 be	   TimeBcd1   =	$BE
    126  f000		       00 bf	   TimeBcd2   =	$BF
    127  f000
    128  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    129  f000		       00 c1	   TrafficChance =	$C1
    130  f000		       00 c2	   CheckpointTime =	$C2
    131  f000		       00 c3	   TrafficColor =	$C3
    132  f000		       00 c4	   CurrentDifficulty =	$C4
    133  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    134  f000
    135  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    136  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    137  f000
    138  f000		       00 ca	   BorderType =	$CA
    139  f000
    140  f000		       00 cb	   HitCountBcd0 =	$CB
    141  f000		       00 cc	   HitCountBcd1 =	$CC
    142  f000
    143  f000		       00 cd	   GlideTimeBcd0 =	$CD
    144  f000		       00 ce	   GlideTimeBcd1 =	$CE
    145  f000
    146  f000		       00 cf	   OneSecondConter =	$CF
    147  f000
    148  f000		       00 d0	   ScoreD0    =	$D0
    149  f000		       00 d1	   ScoreD1    =	$D1
    150  f000		       00 d2	   ScoreD2    =	$D2
    151  f000		       00 d3	   ScoreD3    =	$D3
    152  f000		       00 d4	   ScoreD4    =	$D4
    153  f000		       00 d5	   ScoreFontColor =	$D5
    154  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    155  f000		       00 d7	   NextCheckpoint =	$D7
    156  f000
    157  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    158  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    159  f000
    160  f000
    161  f000							;generic start up stuff, put zero in all...
    162  f000				   BeforeStart		;All variables that are kept on game reset or select
    163  f000		       a0 00		      LDY	#0
    164  f002		       84 bc		      STY	SwitchDebounceCounter
    165  f004		       84 c5		      STY	GameMode
    166  f006		       a0 e0		      LDY	#%11100000	; Default Parallax
    167  f008		       84 88		      STY	ParallaxMode
    168  f00a
    169  f00a				   Start
    170  f00a		       78		      SEI
    171  f00b		       d8		      CLD
    172  f00c		       a2 ff		      LDX	#$FF
    173  f00e		       9a		      TXS
    174  f00f		       a9 00		      LDA	#0
    175  f011				   ClearMem
    176  f011		       e0 bc		      CPX	#SwitchDebounceCounter
    177  f013		       f0 0a		      BEQ	SkipClean
    178  f015		       e0 c5		      CPX	#GameMode
    179  f017		       f0 06		      BEQ	SkipClean
    180  f019		       e0 88		      CPX	#ParallaxMode
    181  f01b		       f0 02		      BEQ	SkipClean
    182  f01d		       95 00		      STA	0,X
    183  f01f				   SkipClean
    184  f01f		       ca		      DEX
    185  f020		       d0 ef		      BNE	ClearMem
    186  f022
    187  f022							;Setting some variables...
    188  f022
    189  f022				   SettingTrafficOffsets		; Time sensitive with player H position
    190  f022		       85 02		      STA	WSYNC	;We will set player position
    191  f024		       20 22 f7 	      JSR	DefaultOffsets
    192  f027
    193  f027		       ad d2 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    194  f02a		       85 8e		      STA	Player0SpeedL
    195  f02c
      0  f02c					      SLEEP	11	;18
      1  f02c				   .CYCLES    SET	11
      2  f02c
      3  f02c				  -	      IF	.CYCLES < 2
      4  f02c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f02c				  -	      ERR
      6  f02c					      ENDIF
      7  f02c
      8  f02c					      IF	.CYCLES & 1
      9  f02c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f02c				  -	      nop	0
     11  f02c					      ELSE
     12  f02c		       24 00		      bit	VSYNC
     13  f02e					      ENDIF
     14  f02e				   .CYCLES    SET	.CYCLES - 3
     15  f02e					      ENDIF
     16  f02e
     17  f02e					      REPEAT	.CYCLES / 2
     18  f02e		       ea		      nop
     17  f02e					      REPEND
     18  f02f		       ea		      nop
     17  f02f					      REPEND
     18  f030		       ea		      nop
     17  f030					      REPEND
     18  f031		       ea		      nop
     19  f032					      REPEND
    197  f032		       85 10		      STA	RESP0
    198  f034
    199  f034		       a2 00		      LDX	#0
    200  f036		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    201  f039		       85 a6		      STA	StartSWCHB	; For game over
    202  f03b		       29 c0		      AND	#%11000000
    203  f03d		       f0 0b		      BEQ	CallConfigureDifficulty
    204  f03f		       e8		      INX
    205  f040		       c9 80		      CMP	#%10000000
    206  f042		       f0 06		      BEQ	CallConfigureDifficulty
    207  f044		       e8		      INX
    208  f045		       c9 40		      CMP	#%01000000
    209  f047		       f0 01		      BEQ	CallConfigureDifficulty
    210  f049		       e8		      INX
    211  f04a
    212  f04a				   CallConfigureDifficulty
    213  f04a		       86 c4		      STX	CurrentDifficulty
    214  f04c		       20 da f6 	      JSR	ConfigureDifficulty
    215  f04f
    216  f04f				   ConfigureOneSecondTimer
    217  f04f		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    218  f051		       85 cf		      STA	OneSecondConter
    219  f053
    220  f053				   HPositioning
    221  f053		       85 02		      STA	WSYNC
    222  f055
    223  f055		       a9 30		      LDA	#%00110000	;2 Missile Size
    224  f057		       85 04		      STA	NUSIZ0	;3
    225  f059		       85 05		      STA	NUSIZ1	;3
    226  f05b
    227  f05b		       a9 35		      LDA	#PLAYER_0_X_START	;2
    228  f05d		       85 b9		      STA	Player0X	;3
    229  f05f
    230  f05f		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    231  f061		       85 ba		      STA	CountdownTimer	;3
    232  f063
    233  f063		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    234  f065		       85 d7		      STA	NextCheckpoint
    235  f067
    236  f067		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f069					      SLEEP	11	;
      1  f069				   .CYCLES    SET	11
      2  f069
      3  f069				  -	      IF	.CYCLES < 2
      4  f069				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f069				  -	      ERR
      6  f069					      ENDIF
      7  f069
      8  f069					      IF	.CYCLES & 1
      9  f069				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f069				  -	      nop	0
     11  f069					      ELSE
     12  f069		       24 00		      bit	VSYNC
     13  f06b					      ENDIF
     14  f06b				   .CYCLES    SET	.CYCLES - 3
     15  f06b					      ENDIF
     16  f06b
     17  f06b					      REPEAT	.CYCLES / 2
     18  f06b		       ea		      nop
     17  f06b					      REPEND
     18  f06c		       ea		      nop
     17  f06c					      REPEND
     18  f06d		       ea		      nop
     17  f06d					      REPEND
     18  f06e		       ea		      nop
     19  f06f					      REPEND
    238  f06f		       85 11		      STA	RESP1
      0  f071					      SLEEP	2	;
      1  f071				   .CYCLES    SET	2
      2  f071
      3  f071				  -	      IF	.CYCLES < 2
      4  f071				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f071				  -	      ERR
      6  f071					      ENDIF
      7  f071
      8  f071				  -	      IF	.CYCLES & 1
      9  f071				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f071				  -	      nop	0
     11  f071				  -	      ELSE
     12  f071				  -	      bit	VSYNC
     13  f071				  -	      ENDIF
     14  f071				  -.CYCLES    SET	.CYCLES - 3
     15  f071					      ENDIF
     16  f071
     17  f071					      REPEAT	.CYCLES / 2
     18  f071		       ea		      nop
     19  f072					      REPEND
    240  f072		       85 14		      STA	RESBL
      0  f074					      SLEEP	2	;
      1  f074				   .CYCLES    SET	2
      2  f074
      3  f074				  -	      IF	.CYCLES < 2
      4  f074				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f074				  -	      ERR
      6  f074					      ENDIF
      7  f074
      8  f074				  -	      IF	.CYCLES & 1
      9  f074				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f074				  -	      nop	0
     11  f074				  -	      ELSE
     12  f074				  -	      bit	VSYNC
     13  f074				  -	      ENDIF
     14  f074				  -.CYCLES    SET	.CYCLES - 3
     15  f074					      ENDIF
     16  f074
     17  f074					      REPEAT	.CYCLES / 2
     18  f074		       ea		      nop
     19  f075					      REPEND
    242  f075		       85 12		      STA	RESM0
      0  f077					      SLEEP	2
      1  f077				   .CYCLES    SET	2
      2  f077
      3  f077				  -	      IF	.CYCLES < 2
      4  f077				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f077				  -	      ERR
      6  f077					      ENDIF
      7  f077
      8  f077				  -	      IF	.CYCLES & 1
      9  f077				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f077				  -	      nop	0
     11  f077				  -	      ELSE
     12  f077				  -	      bit	VSYNC
     13  f077				  -	      ENDIF
     14  f077				  -.CYCLES    SET	.CYCLES - 3
     15  f077					      ENDIF
     16  f077
     17  f077					      REPEAT	.CYCLES / 2
     18  f077		       ea		      nop
     19  f078					      REPEND
    244  f078		       85 13		      STA	RESM1
    245  f07a
    246  f07a		       a9 f0		      LDA	#$F0
    247  f07c		       85 24		      STA	HMBL
    248  f07e		       85 22		      STA	HMM0
    249  f080		       85 23		      STA	HMM1
    250  f082		       85 02		      STA	WSYNC
    251  f084		       85 2a		      STA	HMOVE
    252  f086		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    253  f088		       85 2b		      STA	HMCLR
    254  f08a
    255  f08a							;SLEEP 24
    256  f08a							;STA HMCLR
    257  f08a
    258  f08a							;VSYNC time
    259  f08a				   MainLoop
    260  f08a		       a9 02		      LDA	#2
    261  f08c		       85 00		      STA	VSYNC
    262  f08e		       85 02		      STA	WSYNC
    263  f090		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    264  f092		       85 2a		      STA	HMOVE	;2
    265  f094		       85 02		      STA	WSYNC	;3
    266  f096		       a9 29		      LDA	#41	;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    267  f098		       8d 96 02 	      STA	TIM64T	;3	
    268  f09b		       a9 00		      LDA	#0	;2
    269  f09d		       85 00		      STA	VSYNC	;3	
    270  f09f
    271  f09f							;Read Fire Button before, will make it start the game for now.
    272  f09f				   StartGame
    273  f09f		       a5 0c		      LDA	INPT4	;3
    274  f0a1		       30 1b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    275  f0a3		       a5 c0		      LDA	GameStatus	;3
    276  f0a5		       d0 17		      BNE	SkipGameStart
    277  f0a7		       e6 c0		      INC	GameStatus
    278  f0a9		       a9 00		      LDA	#0	;
    279  f0ab		       85 8c		      STA	FrameCount0
    280  f0ad		       85 8d		      STA	FrameCount1
    281  f0af		       a9 0a		      LDA	#10
    282  f0b1		       85 19		      STA	AUDV0
    283  f0b3		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    284  f0b5		       85 d5		      STA	ScoreFontColor
    285  f0b7		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    286  f0b9		       85 d6		      STA	ScoreFontColorHoldChange
    287  f0bb		       4c 3a f1 	      JMP	SkipIncFC1	; Make the worse case stable
    288  f0be				   SkipGameStart
    289  f0be
    290  f0be				   RandomizeGame
    291  f0be		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    292  f0c0		       d0 30		      BNE	EndRandomizeGame
    293  f0c2		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    294  f0c4		       29 02		      AND	#%00000010
    295  f0c6		       f0 27		      BEQ	DeterministicGame
    296  f0c8		       a6 96		      LDX	TrafficOffset1 + 2
    297  f0ca		       bd 00 fe 	      LDA	AesTable,X
    298  f0cd		       45 8c		      EOR	FrameCount0
    299  f0cf		       85 96		      STA	TrafficOffset1 + 2
    300  f0d1		       a6 9a		      LDX	TrafficOffset2 + 2
    301  f0d3		       bd 00 fe 	      LDA	AesTable,X
    302  f0d6		       45 8c		      EOR	FrameCount0
    303  f0d8		       85 9a		      STA	TrafficOffset2 + 2
    304  f0da		       a6 9e		      LDX	TrafficOffset3 + 2
    305  f0dc		       bd 00 fe 	      LDA	AesTable,X
    306  f0df		       45 8c		      EOR	FrameCount0
    307  f0e1		       85 9e		      STA	TrafficOffset3 + 2
    308  f0e3		       a6 a2		      LDX	TrafficOffset4 + 2
    309  f0e5		       bd 00 fe 	      LDA	AesTable,X
    310  f0e8		       45 8c		      EOR	FrameCount0
    311  f0ea		       85 a2		      STA	TrafficOffset4 + 2
    312  f0ec		       4c f2 f0 	      JMP	EndRandomizeGame
    313  f0ef
    314  f0ef				   DeterministicGame
    315  f0ef		       20 22 f7 	      JSR	DefaultOffsets
    316  f0f2
    317  f0f2				   EndRandomizeGame
    318  f0f2
    319  f0f2				   ReadSwitches
    320  f0f2		       a6 bc		      LDX	SwitchDebounceCounter
    321  f0f4		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    322  f0f6		       a9 01		      LDA	#%00000001
    323  f0f8		       2c 82 02 	      BIT	SWCHB
    324  f0fb		       d0 07		      BNE	SkipReset
    325  f0fd		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    326  f0ff		       85 bc		      STA	SwitchDebounceCounter
    327  f101		       4c 0a f0 	      JMP	Start
    328  f104				   SkipReset
    329  f104
    330  f104				   GameModeSelect
    331  f104		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    332  f106		       d0 27		      BNE	SkipGameSelect
    333  f108		       20 da f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    334  f10b				   ReadDpadParallax
    335  f10b		       ad 80 02 	      LDA	SWCHA
    336  f10e		       29 f0		      AND	#%11110000
    337  f110		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    338  f112		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    339  f114		       85 88		      STA	ParallaxMode
    340  f116				   ContinueGameSelect
    341  f116		       a9 02		      LDA	#%00000010
    342  f118		       2c 82 02 	      BIT	SWCHB
    343  f11b		       d0 12		      BNE	SkipGameSelect
    344  f11d		       a6 c5		      LDX	GameMode
    345  f11f		       e0 0f		      CPX	#MAX_GAME_MODE
    346  f121		       f0 04		      BEQ	ResetGameMode
    347  f123		       e8		      INX
    348  f124		       4c 29 f1 	      JMP	StoreGameMode
    349  f127				   ResetGameMode
    350  f127		       a2 00		      LDX	#0
    351  f129				   StoreGameMode
    352  f129		       86 c5		      STX	GameMode
    353  f12b		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    354  f12d		       85 bc		      STA	SwitchDebounceCounter
    355  f12f				   SkipGameSelect
    356  f12f		       4c 34 f1 	      JMP	EndReadSwitches
    357  f132				   DecrementSwitchDebounceCounter
    358  f132		       c6 bc		      DEC	SwitchDebounceCounter
    359  f134				   EndReadSwitches
    360  f134
    361  f134				   CountFrame
    362  f134		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    363  f136		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    364  f138		       e6 8d		      INC	FrameCount1	; 5 Still not used
    365  f13a				   SkipIncFC1
    366  f13a
    367  f13a							;Does not update the game if not running
    368  f13a		       a5 c0		      LDA	GameStatus	;3
    369  f13c		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    370  f13e		       4c 05 f3 	      JMP	SkipUpdateLogic
    371  f141				   ContinueWithGameLogic
    372  f141
    373  f141				   EverySecond		; 64 frames to be more precise
    374  f141		       a9 3f		      LDA	#%00111111
    375  f143		       25 8c		      AND	FrameCount0
    376  f145		       d0 06		      BNE	SkipEverySecondAction
    377  f147		       c5 ba		      CMP	CountdownTimer
    378  f149		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    379  f14b		       c6 ba		      DEC	CountdownTimer
    380  f14d				   SkipEverySecondAction
    381  f14d
    382  f14d
    383  f14d				   BreakOnTimeOver		; Uses LDX as the breaking speed
    384  f14d		       a2 00		      LDX	#0
    385  f14f		       a5 ba		      LDA	CountdownTimer
    386  f151		       d0 08		      BNE	Break
    387  f153		       a5 8c		      LDA	FrameCount0
    388  f155		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    389  f157		       d0 02		      BNE	Break
    390  f159		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    391  f15b
    392  f15b				   Break
    393  f15b		       a9 20		      LDA	#%00100000	;Down in controller
    394  f15d		       2c 80 02 	      BIT	SWCHA
    395  f160		       d0 0b		      BNE	BreakNonZero
    396  f162		       a5 0c		      LDA	INPT4	;3
    397  f164		       10 05		      BPL	BreakWhileAccelerating
    398  f166		       a2 0a		      LDX	#BREAK_SPEED
    399  f168		       4c 6d f1 	      JMP	BreakNonZero
    400  f16b				   BreakWhileAccelerating		; Allow better control while breaking.
    401  f16b		       a2 05		      LDX	#BREAK_SPEED / 2
    402  f16d
    403  f16d				   BreakNonZero
    404  f16d		       e0 00		      CPX	#0
    405  f16f		       f0 2b		      BEQ	SkipBreak
    406  f171		       86 b0		      STX	Tmp0
    407  f173
    408  f173				   DecreaseSpeed
    409  f173		       38		      SEC
    410  f174		       a5 8e		      LDA	Player0SpeedL
    411  f176		       e5 b0		      SBC	Tmp0
    412  f178		       85 8e		      STA	Player0SpeedL
    413  f17a		       a5 8f		      LDA	Player0SpeedH
    414  f17c		       e9 00		      SBC	#0
    415  f17e		       85 8f		      STA	Player0SpeedH
    416  f180
    417  f180				   CheckMinSpeed
    418  f180		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    419  f182		       c9 00		      CMP	#CAR_MIN_SPEED_H
    420  f184		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    421  f186		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    422  f188
    423  f188				   CompareLBreakSpeed
    424  f188		       a5 8e		      LDA	Player0SpeedL
    425  f18a		       c9 00		      CMP	#CAR_MIN_SPEED_L
    426  f18c		       90 03		      BCC	ResetMinSpeed	; Less than memory
    427  f18e		       4c 99 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    428  f191
    429  f191				   ResetMinSpeed
    430  f191		       a9 00		      LDA	#CAR_MIN_SPEED_H
    431  f193		       85 8f		      STA	Player0SpeedH
    432  f195		       a9 00		      LDA	#CAR_MIN_SPEED_L
    433  f197		       85 8e		      STA	Player0SpeedL
    434  f199
    435  f199				   SkipAccelerateIfBreaking
    436  f199		       4c cc f1 	      JMP	SkipAccelerate
    437  f19c				   SkipBreak
    438  f19c
    439  f19c				   Acelerates
    440  f19c		       a5 ba		      LDA	CountdownTimer
    441  f19e		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    442  f1a0		       a5 0c		      LDA	INPT4	;3
    443  f1a2		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    444  f1a4		       a9 10		      LDA	#%00010000	;UP in controller
    445  f1a6		       2c 80 02 	      BIT	SWCHA
    446  f1a9		       d0 21		      BNE	SkipAccelerate
    447  f1ab
    448  f1ab				   IncreaseCarSpeed
    449  f1ab							;Adds speed
    450  f1ab		       18		      CLC
    451  f1ac		       a5 8e		      LDA	Player0SpeedL
    452  f1ae		       69 01		      ADC	#ACCELERATE_SPEED
    453  f1b0		       85 8e		      STA	Player0SpeedL
    454  f1b2		       a5 8f		      LDA	Player0SpeedH
    455  f1b4		       69 00		      ADC	#0
    456  f1b6		       85 8f		      STA	Player0SpeedH
    457  f1b8
    458  f1b8				   CheckIfAlreadyMaxSpeed
    459  f1b8		       c9 02		      CMP	#CAR_MAX_SPEED_H
    460  f1ba		       90 10		      BCC	SkipAccelerate	; less than my max speed
    461  f1bc		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    462  f1be							;High bit is max, compare the low
    463  f1be		       a5 8e		      LDA	Player0SpeedL
    464  f1c0		       c9 80		      CMP	#CAR_MAX_SPEED_L
    465  f1c2		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    466  f1c4							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    467  f1c4
    468  f1c4				   ResetToMaxSpeed		; Speed is more, or is already max
    469  f1c4		       a9 02		      LDA	#CAR_MAX_SPEED_H
    470  f1c6		       85 8f		      STA	Player0SpeedH
    471  f1c8		       a9 80		      LDA	#CAR_MAX_SPEED_L
    472  f1ca		       85 8e		      STA	Player0SpeedL
    473  f1cc				   SkipAccelerate
    474  f1cc
    475  f1cc				   InitUpdateOffsets
    476  f1cc		       a2 00		      LDX	#0	; Memory Offset 24 bit
    477  f1ce		       a0 00		      LDY	#0	; Line Speeds 16 bits
    478  f1d0		       a5 91		      LDA	TrafficOffset0 + 1	;
    479  f1d2		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    480  f1d4		       a5 c5		      LDA	GameMode
    481  f1d6		       29 04		      AND	#%00000100	; GameModes with high delta
    482  f1d8		       f0 00		      BEQ	UpdateOffsets
    483  f1da
    484  f1da				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    485  f1da		       38		      SEC
    486  f1db		       a5 8e		      LDA	Player0SpeedL
    487  f1dd		       f9 ca ff 	      SBC	TrafficSpeeds,Y
    488  f1e0		       85 b0		      STA	Tmp0
    489  f1e2		       c8		      INY
    490  f1e3		       a5 8f		      LDA	Player0SpeedH
    491  f1e5		       f9 ca ff 	      SBC	TrafficSpeeds,Y
    492  f1e8		       85 b1		      STA	Tmp1
    493  f1ea		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    494  f1ec		       e9 00		      SBC	#0
    495  f1ee		       85 b2		      STA	Tmp2
    496  f1f0
    497  f1f0				   AddsTheResult
    498  f1f0		       18		      CLC
    499  f1f1		       a5 b0		      LDA	Tmp0
    500  f1f3		       75 90		      ADC	TrafficOffset0,X
    501  f1f5		       95 90		      STA	TrafficOffset0,X
    502  f1f7		       e8		      INX
    503  f1f8		       a5 b1		      LDA	Tmp1
    504  f1fa		       75 90		      ADC	TrafficOffset0,X
    505  f1fc		       95 90		      STA	TrafficOffset0,X
    506  f1fe		       e8		      INX
    507  f1ff		       a5 b2		      LDA	Tmp2	; Carry
    508  f201		       75 90		      ADC	TrafficOffset0,X
    509  f203		       95 90		      STA	TrafficOffset0,X
    510  f205		       90 06		      BCC	CalculateOffsetCache
    511  f207		       e0 02		      CPX	#2	;MSB offset 0
    512  f209		       d0 02		      BNE	CalculateOffsetCache
    513  f20b		       e6 bb		      INC	Traffic0Msb
    514  f20d
    515  f20d				   CalculateOffsetCache
    516  f20d		       e8		      INX
    517  f20e		       38		      SEC
    518  f20f		       69 00		      ADC	#0	;Increment by one
    519  f211		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    520  f213
    521  f213				   PrepareNextUpdateLoop
    522  f213		       c8		      INY
    523  f214		       e8		      INX
    524  f215		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    525  f217		       d0 c1		      BNE	UpdateOffsets
    526  f219
    527  f219				   BcdScore		; 48
    528  f219		       a5 91		      LDA	TrafficOffset0 + 1	;3
    529  f21b		       45 b3		      EOR	Tmp3	;3
    530  f21d		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    531  f21f		       f0 1b		      BEQ	FinishBcdScore	;2
    532  f221
    533  f221				   ContinueBcdScore
    534  f221		       f8		      SED		;2
    535  f222		       18		      CLC		;2
    536  f223		       a5 b4		      LDA	ScoreBcd0	;3
    537  f225		       69 01		      ADC	#1	;2
    538  f227		       85 b4		      STA	ScoreBcd0	;3
    539  f229		       a5 b5		      LDA	ScoreBcd1	;3
    540  f22b		       69 00		      ADC	#0	;2
    541  f22d		       85 b5		      STA	ScoreBcd1	;3
    542  f22f		       a5 b6		      LDA	ScoreBcd2	;3
    543  f231		       69 00		      ADC	#0	;2
    544  f233		       85 b6		      STA	ScoreBcd2	;3
    545  f235		       a5 b7		      LDA	ScoreBcd3	;3
    546  f237		       69 00		      ADC	#0	;2
    547  f239		       85 b7		      STA	ScoreBcd3	;3
    548  f23b		       d8		      CLD		;2
    549  f23c				   FinishBcdScore
    550  f23c
    551  f23c							;Until store the movemnt, LDX contains the value to be stored.
    552  f23c				   TestCollision		;
    553  f23c							; see if player0 colides with the rest
    554  f23c		       a5 00		      LDA	CXM0P
    555  f23e		       05 01		      ORA	CXM1P
    556  f240		       05 01		      ORA	CXM1P
    557  f242		       05 02		      ORA	CXP0FB
    558  f244		       05 07		      ORA	CXPPMM
    559  f246		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    560  f248		       f0 32		      BEQ	NoCollision	;skip if not hitting...
    561  f24a		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    562  f24c		       d0 2e		      BNE	NoCollision
    563  f24e		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    564  f250		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    565  f252		       f0 28		      BEQ	NoCollision
    566  f254		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    567  f256		       f0 24		      BEQ	NoCollision
    568  f258		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    569  f25a		       85 b8		      STA	CollisionCounter	;and store as colision.
    570  f25c				   CountBcdColision
    571  f25c		       f8		      SED		;2
    572  f25d		       18		      CLC		;2
    573  f25e		       a5 cb		      LDA	HitCountBcd0	;3
    574  f260		       69 01		      ADC	#1	;3
    575  f262		       85 cb		      STA	HitCountBcd0	;3
    576  f264		       a5 cc		      LDA	HitCountBcd1	;3
    577  f266		       69 00		      ADC	#0	;2
    578  f268		       85 cc		      STA	HitCountBcd1	;3
    579  f26a		       d8		      CLD		;2
    580  f26b				   EndCountBcdColision
    581  f26b		       a9 10		      LDA	#COLLISION_SPEED_L	;
    582  f26d		       c5 8e		      CMP	Player0SpeedL
    583  f26f		       b0 02		      BCS	SkipSetColisionSpeed
    584  f271		       85 8e		      STA	Player0SpeedL
    585  f273				   SkipSetColisionSpeed
    586  f273		       a9 00		      LDA	#0
    587  f275		       85 8f		      STA	Player0SpeedH
    588  f277		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    589  f279		       4c b9 f2 	      JMP	StoreHMove	; We keep position consistent
    590  f27c				   NoCollision
    591  f27c
    592  f27c				   DecrementCollision
    593  f27c		       a4 b8		      LDY	CollisionCounter
    594  f27e		       f0 07		      BEQ	FinishDecrementCollision
    595  f280		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    596  f282		       85 04		      STA	NUSIZ0
    597  f284		       88		      DEY
    598  f285		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    599  f287				   FinishDecrementCollision
    600  f287
    601  f287				   ResetPlayerSize
    602  f287		       d0 04		      BNE	FinishResetPlayerSize
    603  f289		       a9 30		      LDA	#%00110000
    604  f28b		       85 04		      STA	NUSIZ0	;
    605  f28d				   FinishResetPlayerSize
    606  f28d
    607  f28d				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    608  f28d		       c0 01		      CPY	#1	; Last frame before reset
    609  f28f		       d0 05		      BNE	SkipResetPlayerPosition
    610  f291		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    611  f293		       4c b9 f2 	      JMP	StoreHMove
    612  f296				   SkipResetPlayerPosition
    613  f296
    614  f296							; for left and right, we're gonna 
    615  f296							; set the horizontal speed, and then do
    616  f296							; a single HMOVE.  We'll use X to hold the
    617  f296							; horizontal speed, then store it in the 
    618  f296							; appropriate register
    619  f296				   PrepareReadXAxis
    620  f296		       a2 00		      LDX	#0
    621  f298		       a4 b9		      LDY	Player0X
    622  f29a				   BeginReadLeft
    623  f29a		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    624  f29c		       a9 40		      LDA	#%01000000	;Left
    625  f29e		       2c 80 02 	      BIT	SWCHA
    626  f2a1		       d0 07		      BNE	SkipMoveLeft
    627  f2a3		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    628  f2a5		       c6 b9		      DEC	Player0X
    629  f2a7		       4c b9 f2 	      JMP	StoreHMove	; Cannot move left and right...
    630  f2aa				   SkipMoveLeft
    631  f2aa				   BeginReadRight
    632  f2aa		       c0 36		      CPY	#PLAYER_0_MAX_X
    633  f2ac		       f0 0b		      BEQ	SkipMoveRight	; At max already
    634  f2ae		       a9 80		      LDA	#%10000000	;Right
    635  f2b0		       2c 80 02 	      BIT	SWCHA
    636  f2b3		       d0 04		      BNE	SkipMoveRight
    637  f2b5		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    638  f2b7		       e6 b9		      INC	Player0X
    639  f2b9				   SkipMoveRight
    640  f2b9				   StoreHMove
    641  f2b9		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    642  f2bb		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    643  f2bd
    644  f2bd				   DividePlayerSpeedBy4
    645  f2bd		       a5 8f		      LDA	Player0SpeedH
    646  f2bf		       0a		      ASL
    647  f2c0		       0a		      ASL
    648  f2c1		       0a		      ASL
    649  f2c2		       0a		      ASL
    650  f2c3		       0a		      ASL
    651  f2c4		       0a		      ASL
    652  f2c5		       85 b1		      STA	Tmp1
    653  f2c7		       a5 8e		      LDA	Player0SpeedL
    654  f2c9		       4a		      LSR
    655  f2ca		       4a		      LSR
    656  f2cb		       29 3f		      AND	#%00111111
    657  f2cd		       05 b1		      ORA	Tmp1
    658  f2cf		       85 b0		      STA	Tmp0	; Division Result
    659  f2d1
    660  f2d1				   CalculateParallax1Offset		; 7/8 speed
    661  f2d1		       38		      SEC
    662  f2d2		       a5 8e		      LDA	Player0SpeedL
    663  f2d4		       e5 b0		      SBC	Tmp0
    664  f2d6		       85 b2		      STA	Tmp2
    665  f2d8		       a5 8f		      LDA	Player0SpeedH
    666  f2da		       e9 00		      SBC	#0
    667  f2dc		       85 b3		      STA	Tmp3
    668  f2de
    669  f2de		       18		      CLC
    670  f2df		       a5 c6		      LDA	ParallaxOffset1
    671  f2e1		       65 b2		      ADC	Tmp2
    672  f2e3		       85 c6		      STA	ParallaxOffset1
    673  f2e5		       a5 c7		      LDA	ParallaxOffset1 + 1
    674  f2e7		       65 b3		      ADC	Tmp3
    675  f2e9		       85 c7		      STA	ParallaxOffset1 + 1
    676  f2eb
    677  f2eb				   CalculateParallax2Offset		; 6/8 speed
    678  f2eb		       38		      SEC
    679  f2ec		       a5 b2		      LDA	Tmp2
    680  f2ee		       e5 b0		      SBC	Tmp0
    681  f2f0		       85 b2		      STA	Tmp2
    682  f2f2		       a5 b3		      LDA	Tmp3
    683  f2f4		       e9 00		      SBC	#0
    684  f2f6		       85 b3		      STA	Tmp3
    685  f2f8
    686  f2f8		       18		      CLC
    687  f2f9		       a5 c8		      LDA	ParallaxOffset2
    688  f2fb		       65 b2		      ADC	Tmp2
    689  f2fd		       85 c8		      STA	ParallaxOffset2
    690  f2ff		       a5 c9		      LDA	ParallaxOffset2 + 1
    691  f301		       65 b3		      ADC	Tmp3
    692  f303		       85 c9		      STA	ParallaxOffset2 + 1
    693  f305
    694  f305				   SkipUpdateLogic		; Continue here if not paused
    695  f305
    696  f305
    697  f305				   ProcessBorder		;Can be optimized (probably)
    698  f305		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    699  f307		       a5 88		      LDA	ParallaxMode
    700  f309		       c9 70		      CMP	#%01110000
    701  f30b		       f0 1a		      BEQ	HorizontalParallaxMode
    702  f30d		       c9 d0		      CMP	#%11010000
    703  f30f		       f0 0a		      BEQ	VerticalParallaxMode
    704  f311		       c9 b0		      CMP	#%10110000
    705  f313		       f0 0c		      BEQ	TachometerMode
    706  f315
    707  f315				   DefaultBorderMode
    708  f315		       20 a1 f7 	      JSR	DefaultBorderLoop
    709  f318		       4c 2a f3 	      JMP	EndProcessingBorder
    710  f31b				   VerticalParallaxMode
    711  f31b		       20 10 f8 	      JSR	VerticalParallaxLoop
    712  f31e		       4c 2a f3 	      JMP	EndProcessingBorder
    713  f321				   TachometerMode
    714  f321		       20 bc f7 	      JSR	PrepareTachometerBorderLoop
    715  f324		       4c 2a f3 	      JMP	EndProcessingBorder
    716  f327				   HorizontalParallaxMode
    717  f327		       20 53 f7 	      JSR	HorizontalParallaxLoop
    718  f32a
    719  f32a				   EndProcessingBorder
    720  f32a
    721  f32a				   ProcessScoreFontColor
    722  f32a		       a6 d6		      LDX	ScoreFontColorHoldChange
    723  f32c		       f0 06		      BEQ	ResetScoreFontColor
    724  f32e		       ca		      DEX
    725  f32f		       86 d6		      STX	ScoreFontColorHoldChange
    726  f331		       4c 38 f3 	      JMP	SkipScoreFontColor
    727  f334				   ResetScoreFontColor
    728  f334		       a9 f9		      LDA	#SCORE_FONT_COLOR
    729  f336		       85 d5		      STA	ScoreFontColor
    730  f338				   SkipScoreFontColor
    731  f338
    732  f338				   IsGameOver
    733  f338		       a5 ba		      LDA	CountdownTimer
    734  f33a		       05 8e		      ORA	Player0SpeedL
    735  f33c		       05 8f		      ORA	Player0SpeedH
    736  f33e		       d0 0b		      BNE	IsCheckpoint
    737  f340		       a9 01		      LDA	#1
    738  f342		       85 d6		      STA	ScoreFontColorHoldChange
    739  f344		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    740  f346		       85 d5		      STA	ScoreFontColor
    741  f348		       4c 8c f3 	      JMP	SkipIsTimeOver
    742  f34b
    743  f34b				   IsCheckpoint
    744  f34b		       a5 d7		      LDA	NextCheckpoint
    745  f34d		       c5 92		      CMP	TrafficOffset0 + 2
    746  f34f		       d0 2f		      BNE	SkipIsCheckpoint
    747  f351				   AddCheckpointBcd
    748  f351		       f8		      SED		;2
    749  f352		       18		      CLC		;2
    750  f353		       a5 a4		      LDA	CheckpointBcd0	;3
    751  f355		       69 01		      ADC	#1	;3
    752  f357		       85 a4		      STA	CheckpointBcd0	;3
    753  f359		       a5 a5		      LDA	CheckpointBcd1	;3
    754  f35b		       69 00		      ADC	#0	;2
    755  f35d		       85 a5		      STA	CheckpointBcd1	;3
    756  f35f		       d8		      CLD		;2
    757  f360				   EndCheckpointBcd
    758  f360		       18		      CLC
    759  f361		       69 10		      ADC	#CHECKPOINT_INTERVAL
    760  f363		       85 d7		      STA	NextCheckpoint
    761  f365		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    762  f367		       85 d5		      STA	ScoreFontColor
    763  f369		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    764  f36b		       85 d6		      STA	ScoreFontColorHoldChange
    765  f36d		       a5 ba		      LDA	CountdownTimer
    766  f36f		       18		      CLC
    767  f370		       65 c2		      ADC	CheckpointTime
    768  f372		       85 ba		      STA	CountdownTimer
    769  f374		       90 04		      BCC	JumpSkipTimeOver
    770  f376		       a9 ff		      LDA	#$FF
    771  f378		       85 ba		      STA	CountdownTimer	; Does not overflow!
    772  f37a				   JumpSkipTimeOver
    773  f37a		       20 cb f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    774  f37d		       4c 8c f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    775  f380				   SkipIsCheckpoint
    776  f380
    777  f380				   IsTimeOver
    778  f380		       a5 ba		      LDA	CountdownTimer
    779  f382		       d0 08		      BNE	SkipIsTimeOver
    780  f384		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    781  f386		       85 d6		      STA	ScoreFontColorHoldChange
    782  f388		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    783  f38a		       85 d5		      STA	ScoreFontColor
    784  f38c				   SkipIsTimeOver
    785  f38c
    786  f38c				   PrintEasterEggCondition
    787  f38c		       a5 8d		      LDA	FrameCount1
    788  f38e		       29 38		      AND	#%00111000
    789  f390		       05 c0		      ORA	GameStatus
    790  f392		       c9 38		      CMP	#%00111000
    791  f394		       d0 06		      BNE	ChooseTextSide
    792  f396		       20 64 f8 	      JSR	PrintEasterEgg
    793  f399		       4c 90 f4 	      JMP	RightScoreWriteEnd
    794  f39c
    795  f39c							;Could be done during on vblank to save this comparisson time (before draw score), 
    796  f39c							;but I am saving vblank cycles for now, in case of 2 players.
    797  f39c				   ChooseTextSide		; 
    798  f39c		       a5 8c		      LDA	FrameCount0	;3
    799  f39e		       29 01		      AND	#%00000001	;2
    800  f3a0		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    801  f3a2		       4c 26 f4 	      JMP	RightScoreWrite
    802  f3a5
    803  f3a5				   LeftScoreWrite
    804  f3a5		       a5 d5		      LDA	ScoreFontColor
    805  f3a7		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    806  f3a9		       f0 4e		      BEQ	PrintCheckpoint
    807  f3ab		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    808  f3ad		       f0 52		      BEQ	PrintStartGame
    809  f3af		       a5 c0		      LDA	GameStatus
    810  f3b1		       f0 56		      BEQ	PrintHellwayLeft
    811  f3b3				   WriteDistance		;Not optimized yet, ugly code.
    812  f3b3				   Digit0Distance
    813  f3b3		       a5 91		      LDA	TrafficOffset0 + 1	;3
    814  f3b5		       4a		      LSR		; 2
    815  f3b6		       4a		      LSR		; 2
    816  f3b7		       4a		      LSR		; 2
    817  f3b8		       4a		      LSR		; 2
    818  f3b9		       aa		      TAX		; 2
    819  f3ba		       bd be fd 	      LDA	FontLookup,X	;4
    820  f3bd		       85 d3		      STA	ScoreD3	;3
    821  f3bf
    822  f3bf				   Digit1Distance
    823  f3bf		       a5 92		      LDA	TrafficOffset0 + 2	;3
    824  f3c1		       29 0f		      AND	#%00001111	;2
    825  f3c3		       aa		      TAX		; 2
    826  f3c4		       bd be fd 	      LDA	FontLookup,X	;4 
    827  f3c7		       85 d2		      STA	ScoreD2	;3
    828  f3c9
    829  f3c9				   Digit2Distance
    830  f3c9		       a5 92		      LDA	TrafficOffset0 + 2	;3
    831  f3cb		       4a		      LSR		; 2
    832  f3cc		       4a		      LSR		; 2
    833  f3cd		       4a		      LSR		; 2
    834  f3ce		       4a		      LSR		; 2
    835  f3cf		       aa		      TAX		; 2
    836  f3d0		       bd be fd 	      LDA	FontLookup,X	;4
    837  f3d3		       85 d1		      STA	ScoreD1	;3
    838  f3d5
    839  f3d5				   Digit3Distance
    840  f3d5		       a5 bb		      LDA	Traffic0Msb	;3
    841  f3d7		       29 0f		      AND	#%00001111	;2
    842  f3d9		       aa		      TAX		; 2
    843  f3da		       bd be fd 	      LDA	FontLookup,X	;4 
    844  f3dd		       85 d0		      STA	ScoreD0	;3
    845  f3df
    846  f3df				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    847  f3df		       a5 bb		      LDA	Traffic0Msb
    848  f3e1		       29 f0		      AND	#%11110000	;2
    849  f3e3		       d0 07		      BNE	DrawDistanceExtraDigit
    850  f3e5		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    851  f3e7		       85 d4		      STA	ScoreD4	;3
    852  f3e9		       4c f6 f3 	      JMP	EndDrawDistance
    853  f3ec				   DrawDistanceExtraDigit
    854  f3ec		       4a		      LSR		; 2
    855  f3ed		       4a		      LSR		; 2
    856  f3ee		       4a		      LSR		; 2
    857  f3ef		       4a		      LSR		; 2
    858  f3f0		       aa		      TAX		; 2
    859  f3f1		       bd be fd 	      LDA	FontLookup,X	;4
    860  f3f4		       85 d4		      STA	ScoreD4	;3
    861  f3f6
    862  f3f6				   EndDrawDistance
    863  f3f6		       4c 90 f4 	      JMP	RightScoreWriteEnd	;3
    864  f3f9
    865  f3f9				   PrintCheckpoint
    866  f3f9		       a2 00		      LDX	#<CheckpointText
    867  f3fb		       20 35 f7 	      JSR	PrintStaticText
    868  f3fe		       4c 90 f4 	      JMP	RightScoreWriteEnd	;3
    869  f401				   PrintStartGame
    870  f401		       a2 23		      LDX	#<GoText
    871  f403		       20 35 f7 	      JSR	PrintStaticText
    872  f406		       4c 90 f4 	      JMP	RightScoreWriteEnd	;3
    873  f409
    874  f409				   PrintHellwayLeft
    875  f409		       a5 8d		      LDA	FrameCount1
    876  f40b		       29 01		      AND	#1
    877  f40d		       d0 05		      BNE	PrintCreditsLeft
    878  f40f		       a2 05		      LDX	#<HellwayLeftText
    879  f411		       4c 16 f4 	      JMP	PrintGameMode
    880  f414				   PrintCreditsLeft
    881  f414		       a2 0f		      LDX	#<OpbText
    882  f416
    883  f416				   PrintGameMode
    884  f416		       20 35 f7 	      JSR	PrintStaticText
    885  f419		       a5 c5		      LDA	GameMode
    886  f41b		       29 0f		      AND	#%00001111
    887  f41d		       aa		      TAX		; 2
    888  f41e		       bd be fd 	      LDA	FontLookup,X	;4 
    889  f421		       85 d0		      STA	ScoreD0	;3
    890  f423		       4c 90 f4 	      JMP	RightScoreWriteEnd	;3
    891  f426
    892  f426				   RightScoreWrite
    893  f426		       a5 c0		      LDA	GameStatus
    894  f428		       f0 45		      BEQ	PrintHellwayRight
    895  f42a		       a5 d5		      LDA	ScoreFontColor
    896  f42c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    897  f42e		       f0 52		      BEQ	PrintGameOver
    898  f430				   Digit0Timer
    899  f430		       a5 ba		      LDA	CountdownTimer	;3
    900  f432		       29 0f		      AND	#%00001111	;2
    901  f434		       aa		      TAX		; 2
    902  f435		       bd be fd 	      LDA	FontLookup,X	;4 
    903  f438		       85 d1		      STA	ScoreD1	;3
    904  f43a
    905  f43a				   Digit1Timer
    906  f43a		       a5 ba		      LDA	CountdownTimer	;3
    907  f43c		       4a		      LSR		; 2
    908  f43d		       4a		      LSR		; 2
    909  f43e		       4a		      LSR		; 2
    910  f43f		       4a		      LSR		; 2
    911  f440		       aa		      TAX		; 2
    912  f441		       bd be fd 	      LDA	FontLookup,X	;4
    913  f444		       85 d0		      STA	ScoreD0	;3
    914  f446
    915  f446		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    916  f448		       85 d2		      STA	ScoreD2	;3
    917  f44a
    918  f44a				   Digit0Speed
    919  f44a		       a5 8e		      LDA	Player0SpeedL
    920  f44c		       29 3c		      AND	#%00111100	;2 Discard the last bits
    921  f44e		       4a		      LSR		; 2
    922  f44f		       4a		      LSR		; 2
    923  f450		       aa		      TAX		; 2
    924  f451		       bd be fd 	      LDA	FontLookup,X	;4
    925  f454		       85 d4		      STA	ScoreD4	;3
    926  f456
    927  f456				   Digit1Speed
    928  f456		       a5 8e		      LDA	Player0SpeedL
    929  f458		       29 c0		      AND	#%11000000	;2 Discard the last bits
    930  f45a		       18		      CLC
    931  f45b		       2a		      ROL		;First goes into carry
    932  f45c		       2a		      ROL
    933  f45d		       2a		      ROL
    934  f45e		       85 b0		      STA	Tmp0
    935  f460		       a5 8f		      LDA	Player0SpeedH
    936  f462		       0a		      ASL
    937  f463		       0a		      ASL
    938  f464		       05 b0		      ORA	Tmp0
    939  f466		       aa		      TAX		; 2
    940  f467		       bd be fd 	      LDA	FontLookup,X	;4
    941  f46a		       85 d3		      STA	ScoreD3	;3
    942  f46c		       4c 90 f4 	      JMP	RightScoreWriteEnd
    943  f46f
    944  f46f				   PrintHellwayRight
    945  f46f		       a5 8d		      LDA	FrameCount1
    946  f471		       29 01		      AND	#1
    947  f473		       d0 05		      BNE	PrintCreditsRight
    948  f475		       a2 0a		      LDX	#<HellwayRightText
    949  f477		       4c 7c f4 	      JMP	PrintRightIntro
    950  f47a				   PrintCreditsRight
    951  f47a		       a2 14		      LDX	#<YearText
    952  f47c				   PrintRightIntro
    953  f47c		       20 35 f7 	      JSR	PrintStaticText
    954  f47f		       4c 90 f4 	      JMP	RightScoreWriteEnd
    955  f482				   PrintGameOver
    956  f482		       a5 8c		      LDA	FrameCount0
    957  f484		       30 05		      BMI	PrintOverText
    958  f486		       a2 19		      LDX	#<GameText
    959  f488		       4c 8d f4 	      JMP	StoreGameOverText
    960  f48b				   PrintOverText
    961  f48b		       a2 1e		      LDX	#<OverText
    962  f48d				   StoreGameOverText
    963  f48d		       20 35 f7 	      JSR	PrintStaticText
    964  f490				   RightScoreWriteEnd
    965  f490
    966  f490
    967  f490				   ScoreBackgroundColor
    968  f490		       a2 00		      LDX	#0
    969  f492		       ad 82 02 	      LDA	SWCHB
    970  f495		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    971  f497		       f0 04		      BEQ	BlackAndWhiteScoreBg
    972  f499		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    973  f49b		       a2 03		      LDX	#BACKGROUND_COLOR
    974  f49d				   BlackAndWhiteScoreBg
    975  f49d		       85 b2		      STA	Tmp2	; Score Background
    976  f49f		       86 b3		      STX	Tmp3	; Traffic Background
    977  f4a1
    978  f4a1				   ConfigurePFForScore
    979  f4a1							;LDA #SCORE_BACKGROUND_COLOR; Done above
    980  f4a1		       85 09		      STA	COLUBK
    981  f4a3		       20 8d f6 	      JSR	ClearAll
    982  f4a6		       a9 02		      LDA	#%00000010	; Score mode
    983  f4a8		       85 0a		      STA	CTRLPF
    984  f4aa		       a5 8c		      LDA	FrameCount0	;3
    985  f4ac		       29 01		      AND	#%00000001	;2
    986  f4ae		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    987  f4b0				   LeftScoreOn
    988  f4b0		       a5 d5		      LDA	ScoreFontColor
    989  f4b2		       85 07		      STA	COLUP1
    990  f4b4		       a5 b2		      LDA	Tmp2
    991  f4b6		       85 06		      STA	COLUP0
    992  f4b8		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    993  f4ba		       85 b1		      STA	Tmp1
    994  f4bc		       4c cb f4 	      JMP	WaitForVblankEnd
    995  f4bf				   RightScoreOn
    996  f4bf		       a5 d5		      LDA	ScoreFontColor
    997  f4c1		       85 06		      STA	COLUP0
    998  f4c3		       a5 b2		      LDA	Tmp2
    999  f4c5		       85 07		      STA	COLUP1
   1000  f4c7		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1001  f4c9		       85 b1		      STA	Tmp1
   1002  f4cb
   1003  f4cb							; After here we are going to update the screen, No more heavy code
   1004  f4cb				   WaitForVblankEnd
   1005  f4cb		       ad 84 02 	      LDA	INTIM
   1006  f4ce		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
   1007  f4d0		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline? 
   1008  f4d2		       85 01		      STA	VBLANK
   1009  f4d4
   1010  f4d4				   DrawScoreHud
   1011  f4d4		       20 d6 f8 	      JSR	PrintScore
   1012  f4d7
   1013  f4d7		       85 02		      STA	WSYNC
   1014  f4d9
   1015  f4d9		       a5 0c		      LDA	INPT4	;3
   1016  f4db		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1017  f4dd		       a5 d5		      LDA	ScoreFontColor
   1018  f4df		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1019  f4e1		       d0 0c		      BNE	WaitAnotherScoreLine
   1020  f4e3		       a5 8c		      LDA	FrameCount0	;3
   1021  f4e5		       29 01		      AND	#%00000001	;2
   1022  f4e7		       f0 03		      BEQ	LeftScoreOnGameOver
   1023  f4e9		       4c 71 fa 	      JMP	DrawGameOverScreenRight
   1024  f4ec				   LeftScoreOnGameOver
   1025  f4ec		       4c 93 f9 	      JMP	DrawGameOverScreenLeft
   1026  f4ef
   1027  f4ef				   WaitAnotherScoreLine
   1028  f4ef		       85 02		      STA	WSYNC
   1029  f4f1
   1030  f4f1				   PrepareForTraffic
   1031  f4f1		       20 9f f6 	      JSR	ClearPF	; 32
   1032  f4f4
   1033  f4f4		       a9 31		      LDA	#%00110001	; Score mode
   1034  f4f6		       85 0a		      STA	CTRLPF
   1035  f4f8
   1036  f4f8		       a5 c3		      LDA	TrafficColor	;2
   1037  f4fa		       85 08		      STA	COLUPF
   1038  f4fc
   1039  f4fc		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1040  f4fe		       85 07		      STA	COLUP1	;3
   1041  f500
   1042  f500		       a5 d5		      LDA	ScoreFontColor	;3
   1043  f502		       85 06		      STA	COLUP0	;3
   1044  f504
   1045  f504		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1046  f506
   1047  f506		       85 02		      STA	WSYNC
   1048  f508		       85 02		      STA	WSYNC
   1049  f50a
   1050  f50a							;main scanline loop...
   1051  f50a				   ScanLoop
   1052  f50a		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1053  f50c
   1054  f50c							;Start of next line!			
   1055  f50c				   DrawCache		;63 Is the last line going to the top of the next frame?
   1056  f50c							;Supper wastefull, but I had 17 cycles, This only avoids the score line to finish a litle earlier...
   1057  f50c		       a5 b3		      LDA	Tmp3	;3
   1058  f50e		       85 09		      STA	COLUBK	;3
   1059  f510
   1060  f510		       a5 81		      LDA	PF0Cache	;3
   1061  f512		       85 0d		      STA	PF0	;3
   1062  f514
   1063  f514		       b9 7d ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
   1064  f517		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1065  f519
   1066  f519		       a5 82		      LDA	PF1Cache	;3
   1067  f51b		       85 0e		      STA	PF1	;3
   1068  f51d
   1069  f51d		       a5 84		      LDA	GRP1Cache	;3
   1070  f51f		       85 1c		      STA	GRP1	;3
   1071  f521
   1072  f521		       a5 85		      LDA	ENABLCache	;3
   1073  f523		       85 1f		      STA	ENABL	;3
   1074  f525
   1075  f525		       a5 86		      LDA	ENAM0Cache	;3
   1076  f527		       85 1d		      STA	ENAM0	;3
   1077  f529
   1078  f529		       a5 87		      LDA	ENAM1Cache	;3
   1079  f52b		       85 1e		      STA	ENAM1	;3
   1080  f52d
   1081  f52d		       a9 00		      LDA	#0	;2
   1082  f52f							;STA PF1Cache ;3
   1083  f52f		       85 84		      STA	GRP1Cache	;3
   1084  f531		       85 85		      STA	ENABLCache	;3
   1085  f533		       85 86		      STA	ENAM0Cache	;3
   1086  f535		       85 87		      STA	ENAM1Cache	; 3
   1087  f537
   1088  f537							;BEQ DrawTraffic3
   1089  f537				   DrawTraffic1 		; 33
   1090  f537		       98		      TYA		; 2
   1091  f538		       18		      CLC		; 2 
   1092  f539		       65 95		      ADC	TrafficOffset1 + 1	;3
   1093  f53b		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1094  f53d		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1095  f53f		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1096  f541		       4c 46 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1097  f544				   EorOffsetWithCarry
   1098  f544		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1099  f546				   AfterEorOffsetWithCarry		;17
   1100  f546		       aa		      TAX		;2
   1101  f547		       bd 00 fe 	      LDA	AesTable,X	; 4
   1102  f54a		       c5 c1		      CMP	TrafficChance	;3
   1103  f54c		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1104  f54e		       a9 ff		      LDA	#$FF	;2
   1105  f550		       85 84		      STA	GRP1Cache	;3
   1106  f552				   FinishDrawTraffic1
   1107  f552
   1108  f552				   DrawTraffic2 		; 33
   1109  f552		       98		      TYA		; 2
   1110  f553		       18		      CLC		; 2 
   1111  f554		       65 99		      ADC	TrafficOffset2 + 1	;3
   1112  f556		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1113  f558		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1114  f55a		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1115  f55c		       4c 61 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1116  f55f				   EorOffsetWithCarry2
   1117  f55f		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1118  f561				   AfterEorOffsetWithCarry2		;17
   1119  f561		       aa		      TAX		;2
   1120  f562		       bd 00 fe 	      LDA	AesTable,X	; 4
   1121  f565		       c5 c1		      CMP	TrafficChance	;3
   1122  f567		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1123  f569		       a9 02		      LDA	#%00000010	;2
   1124  f56b		       85 85		      STA	ENABLCache	;3
   1125  f56d				   FinishDrawTraffic2
   1126  f56d
   1127  f56d							;STA WSYNC ;65 / 137
   1128  f56d
   1129  f56d							; LDA Tmp0 ; Flicker this line if drawing car
   1130  f56d							; BEQ FinishDrawTraffic4
   1131  f56d				   DrawTraffic3 		; 33
   1132  f56d		       98		      TYA		; 2
   1133  f56e		       18		      CLC		; 2 
   1134  f56f		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1135  f571		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1136  f573		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1137  f575		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1138  f577		       4c 7c f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1139  f57a				   EorOffsetWithCarry3
   1140  f57a		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1141  f57c				   AfterEorOffsetWithCarry3		;17
   1142  f57c		       aa		      TAX		;2
   1143  f57d		       bd 00 fe 	      LDA	AesTable,X	; 4
   1144  f580		       c5 c1		      CMP	TrafficChance	;3
   1145  f582		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1146  f584		       a9 02		      LDA	#%00000010	;2
   1147  f586		       85 86		      STA	ENAM0Cache
   1148  f588				   FinishDrawTraffic3
   1149  f588
   1150  f588				   DrawTraffic4 		; 33
   1151  f588		       98		      TYA		; 2
   1152  f589		       18		      CLC		; 2 
   1153  f58a		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1154  f58c		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1155  f58e		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1156  f590		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1157  f592		       4c 97 f5 	      JMP	AfterEorOffsetWithCarry4	; 3
   1158  f595				   EorOffsetWithCarry4
   1159  f595		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1160  f597				   AfterEorOffsetWithCarry4		;17
   1161  f597		       aa		      TAX		;2
   1162  f598		       bd 00 fe 	      LDA	AesTable,X	; 4
   1163  f59b		       c5 c1		      CMP	TrafficChance	;3
   1164  f59d		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1165  f59f		       a9 02		      LDA	#%00000010	;2
   1166  f5a1		       85 87		      STA	ENAM1Cache	;3
   1167  f5a3				   FinishDrawTraffic4
   1168  f5a3
   1169  f5a3				   DrawTraffic0 		; 15
   1170  f5a3		       98		      TYA		;2
   1171  f5a4		       29 07		      AND	#%00000111	;2
   1172  f5a6		       aa		      TAX		;2
   1173  f5a7		       b5 d8		      LDA	ParallaxCache,X	;4
   1174  f5a9		       85 82		      STA	PF1Cache	;3
   1175  f5ab		       b5 f0		      LDA	ParallaxCache2,X	;4
   1176  f5ad		       85 81		      STA	PF0Cache	;3
   1177  f5af
   1178  f5af				   SkipDrawTraffic0
   1179  f5af
   1180  f5af				   WhileScanLoop
   1181  f5af		       88		      DEY		;2
   1182  f5b0		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1183  f5b2		       4c 0a f5 	      JMP	ScanLoop	;3
   1184  f5b5				   FinishScanLoop		; 7 209 of 222
   1185  f5b5
   1186  f5b5		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1187  f5b7		       20 ae f6 	      JSR	LoadAll
   1188  f5ba		       85 02		      STA	WSYNC	; do stuff!
   1189  f5bc		       85 02		      STA	WSYNC
   1190  f5be		       85 02		      STA	WSYNC
   1191  f5c0							;42 cycles to use here
   1192  f5c0
   1193  f5c0				   PrepareOverscan
   1194  f5c0		       a9 02		      LDA	#2
   1195  f5c2		       85 02		      STA	WSYNC
   1196  f5c4		       85 01		      STA	VBLANK
   1197  f5c6
   1198  f5c6		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1199  f5c8		       8d 96 02 	      STA	TIM64T
   1200  f5cb
   1201  f5cb				   LeftSound		;58
   1202  f5cb		       a5 ba		      LDA	CountdownTimer	;3
   1203  f5cd		       f0 24		      BEQ	EngineOff	;2
   1204  f5cf		       a5 8e		      LDA	Player0SpeedL	;3
   1205  f5d1		       29 80		      AND	#%10000000	;2
   1206  f5d3		       05 8f		      ORA	Player0SpeedH	;3
   1207  f5d5		       18		      CLC		;2
   1208  f5d6		       2a		      ROL		;2
   1209  f5d7		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1210  f5d9		       aa		      TAX		;2
   1211  f5da		       a5 8e		      LDA	Player0SpeedL	;3
   1212  f5dc		       4a		      LSR		;2
   1213  f5dd		       4a		      LSR		;2
   1214  f5de		       4a		      LSR		;2
   1215  f5df		       29 0f		      AND	#%00001111	;2
   1216  f5e1		       85 b0		      STA	Tmp0	;3
   1217  f5e3		       bd d4 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1218  f5e6		       38		      SEC		;2
   1219  f5e7		       e5 b0		      SBC	Tmp0	;3
   1220  f5e9		       85 17		      STA	AUDF0	;3
   1221  f5eb		       bd ce fd 	      LDA	EngineSoundType,X	;4
   1222  f5ee		       85 15		      STA	AUDC0	;3
   1223  f5f0		       4c f7 f5 	      JMP	EndLeftSound	;3
   1224  f5f3				   EngineOff
   1225  f5f3		       a9 00		      LDA	#0
   1226  f5f5		       85 15		      STA	AUDC0
   1227  f5f7
   1228  f5f7				   EndLeftSound
   1229  f5f7
   1230  f5f7
   1231  f5f7				   RightSound		; 56 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1232  f5f7		       a5 d5		      LDA	ScoreFontColor	;3
   1233  f5f9		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1234  f5fb		       f0 4a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1235  f5fd		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1236  f5ff		       f0 21		      BEQ	PlayCheckpoint	;2
   1237  f601		       a5 b8		      LDA	CollisionCounter	;3
   1238  f603		       c9 e0		      CMP	#$E0	;2
   1239  f605		       b0 0c		      BCS	PlayColision	;2
   1240  f607		       a5 d7		      LDA	NextCheckpoint	;3
   1241  f609		       38		      SEC		;2
   1242  f60a		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1243  f60c		       c9 02		      CMP	#$02	;2
   1244  f60e		       90 24		      BCC	PlayBeforeCheckpoint	;4
   1245  f610		       4c 47 f6 	      JMP	MuteRightSound
   1246  f613				   PlayColision
   1247  f613		       a9 1f		      LDA	#31
   1248  f615		       85 18		      STA	AUDF1
   1249  f617		       a9 08		      LDA	#8
   1250  f619		       85 16		      STA	AUDC1
   1251  f61b		       a9 08		      LDA	#8
   1252  f61d		       85 1a		      STA	AUDV1
   1253  f61f		       4c 4b f6 	      JMP	EndRightSound
   1254  f622
   1255  f622				   PlayCheckpoint
   1256  f622		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1257  f624		       4a		      LSR		;2
   1258  f625		       4a		      LSR		;2
   1259  f626		       4a		      LSR		;2
   1260  f627		       85 18		      STA	AUDF1	;3
   1261  f629		       a9 0c		      LDA	#12	;2
   1262  f62b		       85 16		      STA	AUDC1	;3
   1263  f62d		       a9 06		      LDA	#6	;2
   1264  f62f		       85 1a		      STA	AUDV1	;3
   1265  f631		       4c 4b f6 	      JMP	EndRightSound	;3
   1266  f634
   1267  f634				   PlayBeforeCheckpoint
   1268  f634		       a5 8c		      LDA	FrameCount0	;3
   1269  f636		       29 1c		      AND	#%00011100	;2
   1270  f638		       09 03		      ORA	#%00000011	;2
   1271  f63a		       85 18		      STA	AUDF1	;3
   1272  f63c		       a9 0c		      LDA	#12	;2
   1273  f63e		       85 16		      STA	AUDC1	;3
   1274  f640		       a9 03		      LDA	#3	;2
   1275  f642		       85 1a		      STA	AUDV1	;3
   1276  f644		       4c 4b f6 	      JMP	EndRightSound	;3
   1277  f647
   1278  f647				   MuteRightSound
   1279  f647		       a9 00		      LDA	#0
   1280  f649		       85 1a		      STA	AUDV1
   1281  f64b				   EndRightSound
   1282  f64b
   1283  f64b				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1284  f64b		       a5 c0		      LDA	GameStatus	;3
   1285  f64d		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1286  f64f		       a5 d5		      LDA	ScoreFontColor	;3
   1287  f651		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1288  f653		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1289  f655		       c6 cf		      DEC	OneSecondConter	;5
   1290  f657		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1291  f659
   1292  f659		       f8		      SED		;2 BCD Operations after this point
   1293  f65a				   CountGlideTimeBcd
   1294  f65a		       a5 d5		      LDA	ScoreFontColor	;3
   1295  f65c		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1296  f65e		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1297  f660		       18		      CLC		;2
   1298  f661		       a5 cd		      LDA	GlideTimeBcd0	;3
   1299  f663		       69 01		      ADC	#1	;3
   1300  f665		       85 cd		      STA	GlideTimeBcd0	;3
   1301  f667		       a5 ce		      LDA	GlideTimeBcd1	;3
   1302  f669		       69 00		      ADC	#0	;2
   1303  f66b		       85 ce		      STA	GlideTimeBcd1	;3
   1304  f66d				   EndCountGlideTimeBcd
   1305  f66d				   IncreaseTotalTimerBcd
   1306  f66d		       18		      CLC		;2
   1307  f66e		       a5 bd		      LDA	TimeBcd0	;3
   1308  f670		       69 01		      ADC	#1	;2
   1309  f672		       85 bd		      STA	TimeBcd0	;3
   1310  f674		       a5 be		      LDA	TimeBcd1	;3
   1311  f676		       69 00		      ADC	#0	;2
   1312  f678		       85 be		      STA	TimeBcd1	;3
   1313  f67a		       a5 bf		      LDA	TimeBcd2	;3
   1314  f67c		       69 00		      ADC	#0	;2
   1315  f67e		       85 bf		      STA	TimeBcd2	;3
   1316  f680
   1317  f680				   ResetOneSecondCounter
   1318  f680		       d8		      CLD		;2
   1319  f681		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1320  f683		       85 cf		      STA	OneSecondConter	;3
   1321  f685
   1322  f685				   EndExactlyEverySecond
   1323  f685
   1324  f685				   OverScanWait
   1325  f685		       ad 84 02 	      LDA	INTIM
   1326  f688		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1327  f68a		       4c 8a f0 	      JMP	MainLoop
   1328  f68d
   1329  f68d				   Subroutines
   1330  f68d
   1331  f68d				   ClearAll		; 52
   1332  f68d		       a9 00		      LDA	#0	;2
   1333  f68f		       85 1c		      STA	GRP1	;3
   1334  f691		       85 1f		      STA	ENABL	;3
   1335  f693		       85 1d		      STA	ENAM0	;3
   1336  f695		       85 1e		      STA	ENAM1	;3
   1337  f697		       85 84		      STA	GRP1Cache	;3
   1338  f699		       85 85		      STA	ENABLCache	;3
   1339  f69b		       85 86		      STA	ENAM0Cache	;3
   1340  f69d		       85 87		      STA	ENAM1Cache	;3
   1341  f69f
   1342  f69f				   ClearPF		; 26
   1343  f69f		       a9 00		      LDA	#0	;2
   1344  f6a1				   ClearPFSkipLDA0
   1345  f6a1		       85 0d		      STA	PF0	;3
   1346  f6a3		       85 0e		      STA	PF1	;3
   1347  f6a5		       85 0f		      STA	PF2	;3	
   1348  f6a7		       85 81		      STA	PF0Cache	;3
   1349  f6a9		       85 82		      STA	PF1Cache	;3
   1350  f6ab		       85 83		      STA	PF2Cache	;3 
   1351  f6ad		       60		      RTS		;6
   1352  f6ae				   EndClearAll
   1353  f6ae
   1354  f6ae				   LoadAll		; 48
   1355  f6ae		       a5 81		      LDA	PF0Cache	;3
   1356  f6b0		       85 0d		      STA	PF0	;3
   1357  f6b2
   1358  f6b2		       a5 82		      LDA	PF1Cache	;3
   1359  f6b4		       85 0e		      STA	PF1	;3
   1360  f6b6
   1361  f6b6		       a5 83		      LDA	PF2Cache	;3
   1362  f6b8		       85 0f		      STA	PF2	;3
   1363  f6ba
   1364  f6ba		       a5 84		      LDA	GRP1Cache	;3
   1365  f6bc		       85 1c		      STA	GRP1	;3
   1366  f6be
   1367  f6be		       a5 85		      LDA	ENABLCache	;3
   1368  f6c0		       85 1f		      STA	ENABL	;3
   1369  f6c2
   1370  f6c2		       a5 86		      LDA	ENAM0Cache	;3
   1371  f6c4		       85 1d		      STA	ENAM0	;3
   1372  f6c6
   1373  f6c6		       a5 87		      LDA	ENAM1Cache	;3
   1374  f6c8		       85 1e		      STA	ENAM1	;3
   1375  f6ca
   1376  f6ca		       60		      RTS		;6
   1377  f6cb				   EndLoadAll
   1378  f6cb
   1379  f6cb				   NextDifficulty
   1380  f6cb		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1381  f6cd		       29 01		      AND	#%00000001
   1382  f6cf		       d0 3f		      BNE	CheckRandomDifficulty
   1383  f6d1
   1384  f6d1		       a5 c4		      LDA	CurrentDifficulty
   1385  f6d3		       18		      CLC
   1386  f6d4		       69 01		      ADC	#1
   1387  f6d6		       29 03		      AND	#%00000011	; 0 to 3
   1388  f6d8		       85 c4		      STA	CurrentDifficulty
   1389  f6da
   1390  f6da				   ConfigureDifficulty
   1391  f6da		       a5 c4		      LDA	CurrentDifficulty
   1392  f6dc		       f0 0b		      BEQ	ConfigureLightTraffic
   1393  f6de		       c9 01		      CMP	#1
   1394  f6e0		       f0 10		      BEQ	ConfigureRegularTraffic
   1395  f6e2		       c9 02		      CMP	#2
   1396  f6e4		       f0 15		      BEQ	ConfigureIntenseTraffic
   1397  f6e6		       4c 04 f7 	      JMP	ConfigureRushHourTraffic
   1398  f6e9
   1399  f6e9				   ConfigureLightTraffic
   1400  f6e9		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1401  f6eb		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1402  f6ed		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1403  f6ef		       4c 0a f7 	      JMP	StoreTrafficChance
   1404  f6f2				   ConfigureRegularTraffic
   1405  f6f2		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1406  f6f4		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1407  f6f6		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1408  f6f8		       4c 0a f7 	      JMP	StoreTrafficChance
   1409  f6fb				   ConfigureIntenseTraffic
   1410  f6fb		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1411  f6fd		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1412  f6ff		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1413  f701		       4c 0a f7 	      JMP	StoreTrafficChance
   1414  f704				   ConfigureRushHourTraffic
   1415  f704		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1416  f706		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1417  f708		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1418  f70a
   1419  f70a				   StoreTrafficChance
   1420  f70a		       86 c1		      STX	TrafficChance
   1421  f70c		       84 c2		      STY	CheckpointTime
   1422  f70e		       85 c3		      STA	TrafficColor
   1423  f710
   1424  f710				   CheckRandomDifficulty
   1425  f710		       a5 c5		      LDA	GameMode
   1426  f712		       29 08		      AND	#%00001000	; Random difficulties
   1427  f714		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1428  f716				   RandomDificulty
   1429  f716		       a6 8c		      LDX	FrameCount0
   1430  f718		       bd 00 fe 	      LDA	AesTable,X
   1431  f71b		       45 c1		      EOR	TrafficChance
   1432  f71d		       29 3f		      AND	#%00111111
   1433  f71f		       85 c1		      STA	TrafficChance
   1434  f721
   1435  f721				   ReturnFromNextDifficulty
   1436  f721		       60		      RTS
   1437  f722				   EndNextDifficulty
   1438  f722
   1439  f722				   DefaultOffsets
   1440  f722		       a9 20		      LDA	#$20
   1441  f724		       85 96		      STA	TrafficOffset1 + 2
   1442  f726		       a9 40		      LDA	#$40
   1443  f728		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1444  f72a		       a9 60		      LDA	#$60
   1445  f72c		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1446  f72e		       a9 80		      LDA	#$80
   1447  f730		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1448  f732		       a9 a0		      LDA	#$A0
   1449  f734		       60		      RTS
   1450  f735
   1451  f735				   PrintStaticText		; Preload X with the offset referent to StaticText
   1452  f735		       bd 00 ff 	      LDA	StaticText,X
   1453  f738		       85 d0		      STA	ScoreD0
   1454  f73a		       e8		      INX
   1455  f73b		       bd 00 ff 	      LDA	StaticText,X
   1456  f73e		       85 d1		      STA	ScoreD1
   1457  f740		       e8		      INX
   1458  f741		       bd 00 ff 	      LDA	StaticText,X
   1459  f744		       85 d2		      STA	ScoreD2
   1460  f746		       e8		      INX
   1461  f747		       bd 00 ff 	      LDA	StaticText,X
   1462  f74a		       85 d3		      STA	ScoreD3
   1463  f74c		       e8		      INX
   1464  f74d		       bd 00 ff 	      LDA	StaticText,X
   1465  f750		       85 d4		      STA	ScoreD4
   1466  f752		       60		      RTS
   1467  f753
   1468  f753				   HorizontalParallaxLoop
   1469  f753		       a9 ef		      LDA	#%11101111	; Clear the house
   1470  f755		       39 d8 00 	      AND	ParallaxCache,Y
   1471  f758		       99 d8 00 	      STA	ParallaxCache,Y
   1472  f75b				   CalculateParallax0
   1473  f75b		       98		      TYA
   1474  f75c		       18		      CLC
   1475  f75d		       65 91		      ADC	TrafficOffset0 + 1
   1476  f75f		       29 04		      AND	#%00000100
   1477  f761		       f0 08		      BEQ	HasEmptySpace0
   1478  f763				   HasBorder0
   1479  f763		       b9 d8 00 	      LDA	ParallaxCache,Y
   1480  f766		       09 0f		      ORA	#%00001111
   1481  f768		       4c 70 f7 	      JMP	StoreParallax0
   1482  f76b				   HasEmptySpace0
   1483  f76b		       b9 d8 00 	      LDA	ParallaxCache,Y
   1484  f76e		       29 f0		      AND	#%11110000
   1485  f770
   1486  f770				   StoreParallax0
   1487  f770		       99 d8 00 	      STA	ParallaxCache,Y
   1488  f773
   1489  f773				   CalculateParallax1
   1490  f773		       98		      TYA
   1491  f774		       18		      CLC
   1492  f775		       65 c7		      ADC	ParallaxOffset1 + 1
   1493  f777		       29 04		      AND	#%00000100
   1494  f779		       f0 08		      BEQ	HasEmptySpace1
   1495  f77b				   HasBorder1
   1496  f77b		       b9 d8 00 	      LDA	ParallaxCache,Y
   1497  f77e		       09 e0		      ORA	#%11100000
   1498  f780		       4c 88 f7 	      JMP	StoreParallax1
   1499  f783				   HasEmptySpace1
   1500  f783		       b9 d8 00 	      LDA	ParallaxCache,Y
   1501  f786		       29 1f		      AND	#%00011111
   1502  f788
   1503  f788				   StoreParallax1
   1504  f788		       99 d8 00 	      STA	ParallaxCache,Y
   1505  f78b
   1506  f78b				   CalculateParallax2
   1507  f78b		       98		      TYA
   1508  f78c		       18		      CLC
   1509  f78d		       65 c9		      ADC	ParallaxOffset2 + 1
   1510  f78f		       29 04		      AND	#%00000100
   1511  f791		       f0 05		      BEQ	HasEmptySpace2
   1512  f793				   HasBorder2
   1513  f793		       a9 60		      LDA	#%01100000
   1514  f795		       4c 9a f7 	      JMP	StoreParallax2
   1515  f798				   HasEmptySpace2
   1516  f798		       a9 00		      LDA	#0
   1517  f79a
   1518  f79a				   StoreParallax2
   1519  f79a		       99 f0 00 	      STA	ParallaxCache2,Y
   1520  f79d
   1521  f79d				   ContinueHorizontalParallaxLoop
   1522  f79d		       88		      DEY
   1523  f79e		       10 b3		      BPL	HorizontalParallaxLoop
   1524  f7a0		       60		      RTS
   1525  f7a1
   1526  f7a1				   DefaultBorderLoop
   1527  f7a1				   CalculateDefaultBorder
   1528  f7a1		       98		      TYA
   1529  f7a2		       18		      CLC
   1530  f7a3		       65 91		      ADC	TrafficOffset0 + 1
   1531  f7a5		       29 04		      AND	#%00000100
   1532  f7a7		       f0 05		      BEQ	HasEmptySpace
   1533  f7a9				   HasBorder
   1534  f7a9		       a9 ff		      LDA	#$FF
   1535  f7ab		       4c b0 f7 	      JMP	StoreBorder
   1536  f7ae				   HasEmptySpace
   1537  f7ae		       a9 00		      LDA	#0
   1538  f7b0
   1539  f7b0				   StoreBorder
   1540  f7b0		       99 d8 00 	      STA	ParallaxCache,Y
   1541  f7b3		       a9 00		      LDA	#0
   1542  f7b5		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1543  f7b8
   1544  f7b8				   ContinueDefaultBorderLoop
   1545  f7b8		       88		      DEY
   1546  f7b9		       10 e6		      BPL	DefaultBorderLoop
   1547  f7bb		       60		      RTS
   1548  f7bc
   1549  f7bc				   PrepareTachometerBorderLoop
   1550  f7bc		       a5 8e		      LDA	Player0SpeedL
   1551  f7be		       29 80		      AND	#%10000000
   1552  f7c0		       05 8f		      ORA	Player0SpeedH
   1553  f7c2		       18		      CLC
   1554  f7c3		       2a		      ROL
   1555  f7c4		       69 00		      ADC	#0
   1556  f7c6		       85 b0		      STA	Tmp0	; Gear
   1557  f7c8		       a5 8e		      LDA	Player0SpeedL
   1558  f7ca		       4a		      LSR
   1559  f7cb		       4a		      LSR
   1560  f7cc		       4a		      LSR
   1561  f7cd		       4a		      LSR
   1562  f7ce		       29 07		      AND	#%00000111
   1563  f7d0		       85 b1		      STA	Tmp1	; RPM
   1564  f7d2
   1565  f7d2				   TachometerBorderLoop
   1566  f7d2		       98		      TYA
   1567  f7d3		       18		      CLC
   1568  f7d4		       65 91		      ADC	TrafficOffset0 + 1
   1569  f7d6		       29 04		      AND	#%00000100
   1570  f7d8		       f0 10		      BEQ	HasBorderTac
   1571  f7da		       a6 b0		      LDX	Tmp0
   1572  f7dc		       bd ea fd 	      LDA	TachometerGearLookup,X
   1573  f7df		       99 d8 00 	      STA	ParallaxCache,Y
   1574  f7e2		       a9 00		      LDA	#0
   1575  f7e4		       99 f0 00 	      STA	ParallaxCache2,Y
   1576  f7e7		       4c 0c f8 	      JMP	ContinueBorderTac
   1577  f7ea				   HasBorderTac
   1578  f7ea		       a9 05		      LDA	#5
   1579  f7ec		       c5 b0		      CMP	Tmp0	; Only on max speed
   1580  f7ee		       f0 11		      BEQ	FullBorderTac
   1581  f7f0		       a6 b1		      LDX	Tmp1
   1582  f7f2		       bd da fd 	      LDA	TachometerSizeLookup1,X
   1583  f7f5		       99 d8 00 	      STA	ParallaxCache,Y
   1584  f7f8		       bd e2 fd 	      LDA	TachometerSizeLookup2,X
   1585  f7fb		       99 f0 00 	      STA	ParallaxCache2,Y
   1586  f7fe		       4c 0c f8 	      JMP	ContinueBorderTac
   1587  f801
   1588  f801				   FullBorderTac
   1589  f801		       a9 ff		      LDA	#$FF
   1590  f803		       99 d8 00 	      STA	ParallaxCache,Y
   1591  f806		       99 f0 00 	      STA	ParallaxCache2,Y
   1592  f809		       4c 0c f8 	      JMP	ContinueBorderTac
   1593  f80c
   1594  f80c				   ContinueBorderTac
   1595  f80c		       88		      DEY
   1596  f80d		       10 c3		      BPL	TachometerBorderLoop
   1597  f80f		       60		      RTS
   1598  f810
   1599  f810				   VerticalParallaxLoop
   1600  f810				   CalculateVerticalParallax0
   1601  f810		       98		      TYA
   1602  f811		       18		      CLC
   1603  f812		       65 91		      ADC	TrafficOffset0 + 1
   1604  f814		       29 06		      AND	#%00000110
   1605  f816		       d0 0b		      BNE	HasNoVerticalLine0
   1606  f818				   HasVerticalLine0
   1607  f818		       a9 ff		      LDA	#$FF
   1608  f81a		       99 d8 00 	      STA	ParallaxCache,Y
   1609  f81d		       99 f0 00 	      STA	ParallaxCache2,Y
   1610  f820		       4c 60 f8 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1611  f823				   HasNoVerticalLine0
   1612  f823		       a9 00		      LDA	#0
   1613  f825		       99 d8 00 	      STA	ParallaxCache,Y
   1614  f828		       99 f0 00 	      STA	ParallaxCache2,Y
   1615  f82b
   1616  f82b				   CalculateVerticalParallax1
   1617  f82b		       98		      TYA
   1618  f82c		       18		      CLC
   1619  f82d		       65 c7		      ADC	ParallaxOffset1 + 1
   1620  f82f		       29 07		      AND	#%00000111
   1621  f831		       d0 0d		      BNE	HasNoVerticalLine1
   1622  f833
   1623  f833				   HasVerticalLine1
   1624  f833		       a9 fc		      LDA	#%11111100
   1625  f835		       99 d8 00 	      STA	ParallaxCache,Y
   1626  f838		       a9 c0		      LDA	#%11000000
   1627  f83a		       99 f0 00 	      STA	ParallaxCache2,Y
   1628  f83d		       4c 60 f8 	      JMP	ContinueVerticalParallaxLoop
   1629  f840				   HasNoVerticalLine1
   1630  f840		       a9 00		      LDA	#0
   1631  f842		       99 d8 00 	      STA	ParallaxCache,Y
   1632  f845		       99 f0 00 	      STA	ParallaxCache2,Y
   1633  f848
   1634  f848				   CalculateVerticalParallax2
   1635  f848		       98		      TYA
   1636  f849		       18		      CLC
   1637  f84a		       65 c9		      ADC	ParallaxOffset2 + 1
   1638  f84c		       29 07		      AND	#%00000111
   1639  f84e		       d0 08		      BNE	HasNoVerticalLine2
   1640  f850
   1641  f850				   HasVerticalLine2
   1642  f850		       a9 f0		      LDA	#%11110000
   1643  f852		       99 d8 00 	      STA	ParallaxCache,Y
   1644  f855		       4c 60 f8 	      JMP	ContinueVerticalParallaxLoop
   1645  f858				   HasNoVerticalLine2
   1646  f858		       a9 00		      LDA	#0
   1647  f85a		       99 d8 00 	      STA	ParallaxCache,Y
   1648  f85d		       99 f0 00 	      STA	ParallaxCache2,Y
   1649  f860
   1650  f860				   ContinueVerticalParallaxLoop
   1651  f860		       88		      DEY
   1652  f861		       10 ad		      BPL	VerticalParallaxLoop
   1653  f863		       60		      RTS
   1654  f864
   1655  f864				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1656  f864		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1657  f866		       85 d5		      STA	ScoreFontColor
   1658  f868		       a9 01		      LDA	#1
   1659  f86a		       85 d6		      STA	ScoreFontColorHoldChange
   1660  f86c
   1661  f86c		       a5 8d		      LDA	FrameCount1
   1662  f86e		       29 07		      AND	#%00000111
   1663  f870		       85 b3		      STA	Tmp3
   1664  f872							;0 is Zelda Name, (default)
   1665  f872		       a9 01		      LDA	#1
   1666  f874		       c5 b3		      CMP	Tmp3
   1667  f876		       f0 38		      BEQ	PrintZeldaDateLeft
   1668  f878
   1669  f878		       a9 02		      LDA	#2
   1670  f87a		       c5 b3		      CMP	Tmp3
   1671  f87c		       f0 23		      BEQ	PrintPolvinhosLeft
   1672  f87e
   1673  f87e		       a9 03		      LDA	#3
   1674  f880		       c5 b3		      CMP	Tmp3
   1675  f882		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1676  f884
   1677  f884		       a9 04		      LDA	#4
   1678  f886		       c5 b3		      CMP	Tmp3
   1679  f888		       f0 1c		      BEQ	PrintIvonneLeft
   1680  f88a
   1681  f88a		       a9 05		      LDA	#5
   1682  f88c		       c5 b3		      CMP	Tmp3
   1683  f88e		       f0 2a		      BEQ	PrintIvonneDateLeft
   1684  f890
   1685  f890		       a9 06		      LDA	#6
   1686  f892		       c5 b3		      CMP	Tmp3
   1687  f894		       f0 15		      BEQ	PrintArtLeft
   1688  f896
   1689  f896		       a9 07		      LDA	#7
   1690  f898		       c5 b3		      CMP	Tmp3
   1691  f89a		       f0 23		      BEQ	PrintLeonardoLeft
   1692  f89c
   1693  f89c				   PrintZeldaLeft
   1694  f89c		       a2 28		      LDX	#<ZeldaTextLeft
   1695  f89e		       4c c4 f8 	      JMP	ProcessPrintEasterEgg
   1696  f8a1				   PrintPolvinhosLeft
   1697  f8a1		       a2 3c		      LDX	#<PolvinhosTextLeft
   1698  f8a3		       4c c4 f8 	      JMP	ProcessPrintEasterEgg
   1699  f8a6				   PrintIvonneLeft
   1700  f8a6		       a2 50		      LDX	#<IvonneTextLeft
   1701  f8a8		       4c c4 f8 	      JMP	ProcessPrintEasterEgg
   1702  f8ab				   PrintArtLeft
   1703  f8ab		       a2 64		      LDX	#<PaperArtTextLeft
   1704  f8ad		       4c c4 f8 	      JMP	ProcessPrintEasterEgg
   1705  f8b0
   1706  f8b0				   PrintZeldaDateLeft
   1707  f8b0		       a2 32		      LDX	#<ZeldaDateLeft
   1708  f8b2		       4c c4 f8 	      JMP	ProcessPrintEasterEgg
   1709  f8b5				   PrintPolvinhosDateLeft
   1710  f8b5		       a2 46		      LDX	#<PolvinhosDateLeft
   1711  f8b7		       4c c4 f8 	      JMP	ProcessPrintEasterEgg
   1712  f8ba				   PrintIvonneDateLeft
   1713  f8ba		       a2 5a		      LDX	#<IvonneDateLeft
   1714  f8bc		       4c c4 f8 	      JMP	ProcessPrintEasterEgg
   1715  f8bf				   PrintLeonardoLeft
   1716  f8bf		       a2 6e		      LDX	#<LeonardoTextLeft
   1717  f8c1		       4c c4 f8 	      JMP	ProcessPrintEasterEgg
   1718  f8c4
   1719  f8c4				   ProcessPrintEasterEgg
   1720  f8c4		       a5 8c		      LDA	FrameCount0	;3
   1721  f8c6		       29 01		      AND	#%00000001	;2
   1722  f8c8		       d0 03		      BNE	TranformIntoRightText
   1723  f8ca		       4c d2 f8 	      JMP	PrintEasterEggText
   1724  f8cd				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1725  f8cd		       8a		      TXA
   1726  f8ce		       18		      CLC
   1727  f8cf		       69 05		      ADC	#HALF_TEXT_SIZE
   1728  f8d1		       aa		      TAX
   1729  f8d2
   1730  f8d2				   PrintEasterEggText
   1731  f8d2		       20 35 f7 	      JSR	PrintStaticText
   1732  f8d5		       60		      RTS
   1733  f8d6
   1734  f8d6				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1735  f8d6		       a2 00		      LDX	#0
   1736  f8d8		       a0 04		      LDY	#FONT_OFFSET
   1737  f8da
   1738  f8da				   ScoreLoop		; 20 
   1739  f8da		       85 02		      STA	WSYNC	;2
   1740  f8dc
   1741  f8dc		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1742  f8de		       85 0d		      STA	PF0	;3
   1743  f8e0
   1744  f8e0		       a5 82		      LDA	PF1Cache	;3
   1745  f8e2		       85 0e		      STA	PF1	;3
   1746  f8e4
   1747  f8e4		       a5 83		      LDA	PF2Cache	;3
   1748  f8e6		       85 0f		      STA	PF2	;3
   1749  f8e8
   1750  f8e8				   DrawScoreD0		; 15
   1751  f8e8		       a6 d0		      LDX	ScoreD0	; 3
   1752  f8ea		       bd 00 fd 	      LDA	Font,X	;4
   1753  f8ed		       85 81		      STA	PF0Cache	;3
   1754  f8ef		       c6 d0		      DEC	ScoreD0	;5
   1755  f8f1
   1756  f8f1				   DrawScoreD1		; 23	
   1757  f8f1		       a6 d1		      LDX	ScoreD1	; 3
   1758  f8f3		       bd 00 fd 	      LDA	Font,X	;4
   1759  f8f6		       0a		      ASL		;2
   1760  f8f7		       0a		      ASL		;2
   1761  f8f8		       0a		      ASL		;2
   1762  f8f9		       0a		      ASL		;2
   1763  f8fa		       85 82		      STA	PF1Cache	;3
   1764  f8fc		       c6 d1		      DEC	ScoreD1	;5
   1765  f8fe
   1766  f8fe				   DrawScoreD2		; 20
   1767  f8fe		       a6 d2		      LDX	ScoreD2	; 3
   1768  f900		       bd 00 fd 	      LDA	Font,X	;4
   1769  f903		       29 0f		      AND	#%00001111	;2
   1770  f905		       05 82		      ORA	PF1Cache	;3
   1771  f907		       85 82		      STA	PF1Cache	;3
   1772  f909		       c6 d2		      DEC	ScoreD2	;5
   1773  f90b
   1774  f90b				   DrawScoreD3		; 23
   1775  f90b		       a6 d3		      LDX	ScoreD3	; 3
   1776  f90d		       bd 00 fd 	      LDA	Font,X	;4
   1777  f910		       4a		      LSR		;2
   1778  f911		       4a		      LSR		;2
   1779  f912		       4a		      LSR		;2
   1780  f913		       4a		      LSR		;2
   1781  f914		       85 83		      STA	PF2Cache	;3
   1782  f916		       c6 d3		      DEC	ScoreD3	;5
   1783  f918
   1784  f918				   DrawScoreD4		; 20
   1785  f918		       a6 d4		      LDX	ScoreD4	; 3
   1786  f91a		       bd 00 fd 	      LDA	Font,X	;4
   1787  f91d		       29 f0		      AND	#%11110000	;2
   1788  f91f		       05 83		      ORA	PF2Cache	;3
   1789  f921		       85 83		      STA	PF2Cache	;3
   1790  f923		       c6 d4		      DEC	ScoreD4	;5
   1791  f925
   1792  f925
   1793  f925		       88		      DEY		;2
   1794  f926		       10 b2		      BPL	ScoreLoop	;4
   1795  f928
   1796  f928		       85 02		      STA	WSYNC
   1797  f92a		       20 ae f6 	      JSR	LoadAll
   1798  f92d		       60		      RTS		; 6
   1799  f92e
   1800  f92e				   PrintRightDecimalDigits
   1801  f92e		       b9 00 00 	      LDA	0,Y
   1802  f931		       4a		      LSR
   1803  f932		       4a		      LSR
   1804  f933		       4a		      LSR
   1805  f934		       4a		      LSR
   1806  f935		       aa		      TAX
   1807  f936		       bd be fd 	      LDA	FontLookup,X	;4
   1808  f939		       85 d2		      STA	ScoreD2	;3
   1809  f93b
   1810  f93b		       b9 00 00 	      LDA	0,Y
   1811  f93e		       29 0f		      AND	#%00001111
   1812  f940		       aa		      TAX
   1813  f941		       bd be fd 	      LDA	FontLookup,X	;4
   1814  f944		       85 d3		      STA	ScoreD3	;3
   1815  f946
   1816  f946		       c8		      INY
   1817  f947		       b9 00 00 	      LDA	0,Y
   1818  f94a		       4a		      LSR
   1819  f94b		       4a		      LSR
   1820  f94c		       4a		      LSR
   1821  f94d		       4a		      LSR
   1822  f94e		       aa		      TAX
   1823  f94f		       bd be fd 	      LDA	FontLookup,X	;4
   1824  f952		       85 d0		      STA	ScoreD0	;3
   1825  f954
   1826  f954		       b9 00 00 	      LDA	0,Y
   1827  f957		       29 0f		      AND	#%00001111
   1828  f959		       aa		      TAX
   1829  f95a		       bd be fd 	      LDA	FontLookup,X	;4
   1830  f95d		       85 d1		      STA	ScoreD1	;3
   1831  f95f
   1832  f95f		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1833  f961		       85 d4		      STA	ScoreD4
   1834  f963		       60		      RTS
   1835  f964
   1836  f964				   PrintLastLeftDecimalDigits
   1837  f964		       b9 00 00 	      LDA	0,Y
   1838  f967		       4a		      LSR
   1839  f968		       4a		      LSR
   1840  f969		       4a		      LSR
   1841  f96a		       4a		      LSR
   1842  f96b		       aa		      TAX
   1843  f96c		       bd be fd 	      LDA	FontLookup,X	;4
   1844  f96f		       85 d3		      STA	ScoreD3	;3
   1845  f971		       b9 00 00 	      LDA	0,Y
   1846  f974		       29 0f		      AND	#%00001111
   1847  f976		       aa		      TAX
   1848  f977		       bd be fd 	      LDA	FontLookup,X	;4
   1849  f97a		       85 d4		      STA	ScoreD4	;3
   1850  f97c		       60		      RTS
   1851  f97d
   1852  f97d				   PrintZerosLeft
   1853  f97d		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1854  f97f		       85 d2		      STA	ScoreD2
   1855  f981		       85 d3		      STA	ScoreD3
   1856  f983		       85 d4		      STA	ScoreD4
   1857  f985		       60		      RTS
   1858  f986
   1859  f986				   DrawGameOverScoreLine
   1860  f986		       85 02		      STA	WSYNC
   1861  f988		       20 d6 f8 	      JSR	PrintScore
   1862  f98b		       85 02		      STA	WSYNC
   1863  f98d		       85 02		      STA	WSYNC
   1864  f98f		       20 9f f6 	      JSR	ClearPF
   1865  f992		       60		      RTS
   1866  f993
   1867  f993				   DrawGameOverScreenLeft
   1868  f993		       85 02		      STA	WSYNC
   1869  f995		       20 9f f6 	      JSR	ClearPF
   1870  f998
   1871  f998				   DrawBcdScoreLeft
   1872  f998		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1873  f99a		       85 06		      STA	COLUP0
   1874  f99c		       85 02		      STA	WSYNC
   1875  f99e		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1876  f9a0		       85 d0		      STA	ScoreD0
   1877  f9a2
   1878  f9a2		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1879  f9a4		       85 d1		      STA	ScoreD1
   1880  f9a6
   1881  f9a6		       a5 b7		      LDA	ScoreBcd3
   1882  f9a8		       29 0f		      AND	#%00001111
   1883  f9aa		       aa		      TAX
   1884  f9ab		       bd be fd 	      LDA	FontLookup,X	;4
   1885  f9ae		       85 d2		      STA	ScoreD2	;3
   1886  f9b0
   1887  f9b0		       a0 b6		      LDY	#ScoreBcd2
   1888  f9b2		       20 64 f9 	      JSR	PrintLastLeftDecimalDigits
   1889  f9b5
   1890  f9b5		       20 86 f9 	      JSR	DrawGameOverScoreLine
   1891  f9b8
   1892  f9b8				   DrawTimerLeft
   1893  f9b8		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1894  f9ba		       85 06		      STA	COLUP0
   1895  f9bc		       85 02		      STA	WSYNC
   1896  f9be		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1897  f9c0		       85 d0		      STA	ScoreD0
   1898  f9c2		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1899  f9c4		       85 d1		      STA	ScoreD1
   1900  f9c6		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1901  f9c8		       85 d2		      STA	ScoreD2
   1902  f9ca		       a0 bf		      LDY	#TimeBcd2
   1903  f9cc		       85 02		      STA	WSYNC
   1904  f9ce		       20 64 f9 	      JSR	PrintLastLeftDecimalDigits
   1905  f9d1		       20 86 f9 	      JSR	DrawGameOverScoreLine
   1906  f9d4
   1907  f9d4				   DrawGlideTimerLeft
   1908  f9d4		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1909  f9d6		       85 06		      STA	COLUP0
   1910  f9d8		       85 02		      STA	WSYNC
   1911  f9da		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1912  f9dc		       85 d0		      STA	ScoreD0
   1913  f9de		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1914  f9e0		       85 d1		      STA	ScoreD1
   1915  f9e2		       20 7d f9 	      JSR	PrintZerosLeft
   1916  f9e5		       20 86 f9 	      JSR	DrawGameOverScoreLine
   1917  f9e8
   1918  f9e8				   DrawHitCountLeft
   1919  f9e8		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1920  f9ea		       85 06		      STA	COLUP0
   1921  f9ec		       85 02		      STA	WSYNC
   1922  f9ee		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1923  f9f0		       85 d0		      STA	ScoreD0
   1924  f9f2		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1925  f9f4		       85 d1		      STA	ScoreD1
   1926  f9f6		       20 7d f9 	      JSR	PrintZerosLeft
   1927  f9f9		       20 86 f9 	      JSR	DrawGameOverScoreLine
   1928  f9fc
   1929  f9fc				   DrawCheckpointCountLeft
   1930  f9fc		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1931  f9fe		       85 06		      STA	COLUP0
   1932  fa00		       85 02		      STA	WSYNC
   1933  fa02		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1934  fa04		       85 d0		      STA	ScoreD0
   1935  fa06		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1936  fa08		       85 d1		      STA	ScoreD1
   1937  fa0a		       20 7d f9 	      JSR	PrintZerosLeft
   1938  fa0d		       20 86 f9 	      JSR	DrawGameOverScoreLine
   1939  fa10
   1940  fa10				   DrawGameVersionLeft
   1941  fa10		       a9 49		      LDA	#VERSION_COLOR
   1942  fa12		       85 06		      STA	COLUP0
   1943  fa14
   1944  fa14		       a5 c5		      LDA	GameMode
   1945  fa16		       aa		      TAX
   1946  fa17		       bd be fd 	      LDA	FontLookup,X	;4
   1947  fa1a		       85 d0		      STA	ScoreD0	;3
   1948  fa1c		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1949  fa1e		       85 d1		      STA	ScoreD1
   1950  fa20
   1951  fa20		       a5 a6		      LDA	StartSWCHB
   1952  fa22		       29 40		      AND	#%01000000	; P0 difficulty
   1953  fa24		       49 40		      EOR	#%01000000	; Reverse bytes
   1954  fa26		       2a		      ROL
   1955  fa27		       2a		      ROL
   1956  fa28		       2a		      ROL
   1957  fa29		       18		      CLC
   1958  fa2a		       69 0a		      ADC	#10
   1959  fa2c		       aa		      TAX
   1960  fa2d		       bd be fd 	      LDA	FontLookup,X	;4
   1961  fa30		       85 d2		      STA	ScoreD2	;3
   1962  fa32
   1963  fa32		       a5 a6		      LDA	StartSWCHB
   1964  fa34		       29 80		      AND	#%10000000	; P0 difficulty
   1965  fa36		       49 80		      EOR	#%10000000	; Reverse bytes
   1966  fa38		       2a		      ROL
   1967  fa39		       2a		      ROL
   1968  fa3a		       18		      CLC
   1969  fa3b		       69 0a		      ADC	#10
   1970  fa3d		       aa		      TAX
   1971  fa3e		       bd be fd 	      LDA	FontLookup,X	;4
   1972  fa41		       85 d3		      STA	ScoreD3	;3
   1973  fa43
   1974  fa43		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1975  fa45		       85 d4		      STA	ScoreD4
   1976  fa47
   1977  fa47		       20 86 f9 	      JSR	DrawGameOverScoreLine
   1978  fa4a
   1979  fa4a		       85 02		      STA	WSYNC
   1980  fa4c		       85 02		      STA	WSYNC
   1981  fa4e		       85 02		      STA	WSYNC
   1982  fa50		       20 fb fa 	      JSR	Sleep8Lines
   1983  fa53		       20 fb fa 	      JSR	Sleep8Lines
   1984  fa56		       20 fb fa 	      JSR	Sleep8Lines
   1985  fa59		       20 fb fa 	      JSR	Sleep8Lines
   1986  fa5c		       20 fb fa 	      JSR	Sleep8Lines
   1987  fa5f		       20 fb fa 	      JSR	Sleep8Lines
   1988  fa62		       20 fb fa 	      JSR	Sleep8Lines
   1989  fa65		       20 fb fa 	      JSR	Sleep8Lines
   1990  fa68		       20 fb fa 	      JSR	Sleep8Lines
   1991  fa6b		       20 fb fa 	      JSR	Sleep8Lines
   1992  fa6e		       4c e8 fa 	      JMP	FinalizeDrawGameOver
   1993  fa71
   1994  fa71				   DrawGameOverScreenRight
   1995  fa71		       85 02		      STA	WSYNC
   1996  fa73		       20 9f f6 	      JSR	ClearPF
   1997  fa76
   1998  fa76				   DrawBcdScoreRight
   1999  fa76		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2000  fa78		       85 07		      STA	COLUP1
   2001  fa7a		       85 02		      STA	WSYNC
   2002  fa7c		       a0 b4		      LDY	#ScoreBcd0
   2003  fa7e		       20 2e f9 	      JSR	PrintRightDecimalDigits
   2004  fa81
   2005  fa81		       20 86 f9 	      JSR	DrawGameOverScoreLine
   2006  fa84
   2007  fa84				   DrawTimerRight
   2008  fa84		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2009  fa86		       85 07		      STA	COLUP1
   2010  fa88		       85 02		      STA	WSYNC
   2011  fa8a		       a0 bd		      LDY	#TimeBcd0
   2012  fa8c		       20 2e f9 	      JSR	PrintRightDecimalDigits
   2013  fa8f
   2014  fa8f		       20 86 f9 	      JSR	DrawGameOverScoreLine
   2015  fa92				   DrawGlideTimeRight
   2016  fa92		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2017  fa94		       85 07		      STA	COLUP1
   2018  fa96		       a0 cd		      LDY	#GlideTimeBcd0
   2019  fa98		       20 2e f9 	      JSR	PrintRightDecimalDigits
   2020  fa9b		       20 86 f9 	      JSR	DrawGameOverScoreLine
   2021  fa9e
   2022  fa9e				   DrawHitCountRight
   2023  fa9e		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2024  faa0		       85 07		      STA	COLUP1
   2025  faa2		       a0 cb		      LDY	#HitCountBcd0
   2026  faa4		       20 2e f9 	      JSR	PrintRightDecimalDigits
   2027  faa7		       20 86 f9 	      JSR	DrawGameOverScoreLine
   2028  faaa
   2029  faaa				   DrawCheckpointCountRight
   2030  faaa		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2031  faac		       85 07		      STA	COLUP1
   2032  faae		       a0 a4		      LDY	#CheckpointBcd0
   2033  fab0		       20 2e f9 	      JSR	PrintRightDecimalDigits
   2034  fab3		       20 86 f9 	      JSR	DrawGameOverScoreLine
   2035  fab6
   2036  fab6				   DrawVersionRight
   2037  fab6		       a9 49		      LDA	#VERSION_COLOR
   2038  fab8		       85 07		      STA	COLUP1
   2039  faba		       85 02		      STA	WSYNC
   2040  fabc		       a2 78		      LDX	#<VersionText
   2041  fabe		       20 35 f7 	      JSR	PrintStaticText
   2042  fac1		       20 86 f9 	      JSR	DrawGameOverScoreLine
   2043  fac4
   2044  fac4		       85 02		      STA	WSYNC
   2045  fac6		       85 02		      STA	WSYNC
   2046  fac8		       85 02		      STA	WSYNC
   2047  faca		       20 fb fa 	      JSR	Sleep8Lines
   2048  facd		       20 fb fa 	      JSR	Sleep8Lines
   2049  fad0		       20 fb fa 	      JSR	Sleep8Lines
   2050  fad3		       20 fb fa 	      JSR	Sleep8Lines
   2051  fad6		       20 fb fa 	      JSR	Sleep8Lines
   2052  fad9		       20 fb fa 	      JSR	Sleep8Lines
   2053  fadc		       20 fb fa 	      JSR	Sleep8Lines
   2054  fadf		       20 fb fa 	      JSR	Sleep8Lines
   2055  fae2		       20 fb fa 	      JSR	Sleep8Lines
   2056  fae5		       20 fb fa 	      JSR	Sleep8Lines
   2057  fae8
   2058  fae8				   FinalizeDrawGameOver
   2059  fae8		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2060  faea		       85 d5		      STA	ScoreFontColor
   2061  faec		       20 fb fa 	      JSR	Sleep8Lines
   2062  faef		       20 fb fa 	      JSR	Sleep8Lines
   2063  faf2		       20 fb fa 	      JSR	Sleep8Lines
   2064  faf5		       20 fb fa 	      JSR	Sleep8Lines
   2065  faf8		       4c c0 f5 	      JMP	PrepareOverscan
   2066  fafb
   2067  fafb				   Sleep8Lines
   2068  fafb		       85 02		      STA	WSYNC
   2069  fafd		       85 02		      STA	WSYNC
   2070  faff		       85 02		      STA	WSYNC
   2071  fb01		       85 02		      STA	WSYNC
   2072  fb03		       85 02		      STA	WSYNC
   2073  fb05		       85 02		      STA	WSYNC
   2074  fb07		       85 02		      STA	WSYNC
   2075  fb09		       85 02		      STA	WSYNC
   2076  fb0b		       60		      RTS
   2077  fb0c
   2078  fb0c							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   2079  fd00					      org	$FD00
   2080  fd00				   Font
   2081  fd00				   C0
   2082  fd00		       e7		      .byte.b	#%11100111	;
   2083  fd01		       a5		      .byte.b	#%10100101	; 
   2084  fd02		       a5		      .byte.b	#%10100101	; 
   2085  fd03		       a5		      .byte.b	#%10100101	; 
   2086  fd04		       e7		      .byte.b	#%11100111	;	
   2087  fd05				   C1
   2088  fd05		       e7		      .byte.b	#%11100111	;
   2089  fd06		       42		      .byte.b	#%01000010	; 
   2090  fd07		       42		      .byte.b	#%01000010	; 
   2091  fd08		       42		      .byte.b	#%01000010	; 
   2092  fd09		       66		      .byte.b	#%01100110	;
   2093  fd0a				   C2
   2094  fd0a		       e7		      .byte.b	#%11100111	;
   2095  fd0b		       24		      .byte.b	#%00100100	; 
   2096  fd0c		       e7		      .byte.b	#%11100111	; 
   2097  fd0d		       81		      .byte.b	#%10000001	; 
   2098  fd0e		       e7		      .byte.b	#%11100111	;
   2099  fd0f				   C3
   2100  fd0f		       e7		      .byte.b	#%11100111	;
   2101  fd10		       81		      .byte.b	#%10000001	; 
   2102  fd11		       e7		      .byte.b	#%11100111	; 
   2103  fd12		       81		      .byte.b	#%10000001	; 
   2104  fd13		       e7		      .byte.b	#%11100111	;
   2105  fd14				   C4
   2106  fd14		       81		      .byte.b	#%10000001	;
   2107  fd15		       81		      .byte.b	#%10000001	; 
   2108  fd16		       e7		      .byte.b	#%11100111	; 
   2109  fd17		       a5		      .byte.b	#%10100101	; 
   2110  fd18		       a5		      .byte.b	#%10100101	;
   2111  fd19				   C5
   2112  fd19		       e7		      .byte.b	#%11100111	;
   2113  fd1a		       81		      .byte.b	#%10000001	; 
   2114  fd1b		       e7		      .byte.b	#%11100111	; 
   2115  fd1c		       24		      .byte.b	#%00100100	; 
   2116  fd1d		       e7		      .byte.b	#%11100111	;
   2117  fd1e				   C6
   2118  fd1e		       e7		      .byte.b	#%11100111	;
   2119  fd1f		       a5		      .byte.b	#%10100101	; 
   2120  fd20		       e7		      .byte.b	#%11100111	; 
   2121  fd21		       24		      .byte.b	#%00100100	; 
   2122  fd22		       e7		      .byte.b	#%11100111	;
   2123  fd23				   C7
   2124  fd23		       81		      .byte.b	#%10000001	;
   2125  fd24		       81		      .byte.b	#%10000001	; 
   2126  fd25		       81		      .byte.b	#%10000001	; 
   2127  fd26		       81		      .byte.b	#%10000001	; 
   2128  fd27		       e7		      .byte.b	#%11100111	;
   2129  fd28				   C8
   2130  fd28		       e7		      .byte.b	#%11100111	;
   2131  fd29		       a5		      .byte.b	#%10100101	; 
   2132  fd2a		       e7		      .byte.b	#%11100111	; 
   2133  fd2b		       a5		      .byte.b	#%10100101	; 
   2134  fd2c		       e7		      .byte.b	#%11100111	;
   2135  fd2d				   C9
   2136  fd2d		       e7		      .byte.b	#%11100111	;
   2137  fd2e		       81		      .byte.b	#%10000001	; 
   2138  fd2f		       e7		      .byte.b	#%11100111	; 
   2139  fd30		       a5		      .byte.b	#%10100101	; 
   2140  fd31		       e7		      .byte.b	#%11100111	;
   2141  fd32				   CA
   2142  fd32		       a5		      .byte.b	#%10100101	;
   2143  fd33		       a5		      .byte.b	#%10100101	; 
   2144  fd34		       e7		      .byte.b	#%11100111	; 
   2145  fd35		       a5		      .byte.b	#%10100101	; 
   2146  fd36		       e7		      .byte.b	#%11100111	;
   2147  fd37				   CB
   2148  fd37		       66		      .byte.b	#%01100110	;
   2149  fd38		       a5		      .byte.b	#%10100101	; 
   2150  fd39		       66		      .byte.b	#%01100110	; 
   2151  fd3a		       a5		      .byte.b	#%10100101	;
   2152  fd3b		       66		      .byte.b	#%01100110	;
   2153  fd3c				   CC
   2154  fd3c		       e7		      .byte.b	#%11100111	;
   2155  fd3d		       24		      .byte.b	#%00100100	; 
   2156  fd3e		       24		      .byte.b	#%00100100	; 
   2157  fd3f		       24		      .byte.b	#%00100100	;
   2158  fd40		       e7		      .byte.b	#%11100111	;
   2159  fd41
   2160  fd41				   CD
   2161  fd41		       66		      .byte.b	#%01100110	;
   2162  fd42		       a5		      .byte.b	#%10100101	; 
   2163  fd43		       a5		      .byte.b	#%10100101	; 
   2164  fd44		       a5		      .byte.b	#%10100101	;
   2165  fd45		       66		      .byte.b	#%01100110	;
   2166  fd46
   2167  fd46				   CE
   2168  fd46		       e7		      .byte.b	#%11100111	;
   2169  fd47		       24		      .byte.b	#%00100100	; 
   2170  fd48		       e7		      .byte.b	#%11100111	; 
   2171  fd49		       24		      .byte.b	#%00100100	; 
   2172  fd4a		       e7		      .byte.b	#%11100111	;
   2173  fd4b
   2174  fd4b				   CF
   2175  fd4b		       24		      .byte.b	#%00100100	;
   2176  fd4c		       24		      .byte.b	#%00100100	; 
   2177  fd4d		       e7		      .byte.b	#%11100111	; 
   2178  fd4e		       24		      .byte.b	#%00100100	; 
   2179  fd4f		       e7		      .byte.b	#%11100111	;
   2180  fd50
   2181  fd50				   CG
   2182  fd50		       c3		      .byte.b	#%11000011	;
   2183  fd51		       a5		      .byte.b	#%10100101	; 
   2184  fd52		       a5		      .byte.b	#%10100101	; 
   2185  fd53		       24		      .byte.b	#%00100100	; 
   2186  fd54		       c3		      .byte.b	#%11000011	;	
   2187  fd55
   2188  fd55				   CH
   2189  fd55		       a5		      .byte.b	#%10100101	;
   2190  fd56		       a5		      .byte.b	#%10100101	; 
   2191  fd57		       e7		      .byte.b	#%11100111	; 
   2192  fd58		       a5		      .byte.b	#%10100101	; 
   2193  fd59		       a5		      .byte.b	#%10100101	;
   2194  fd5a
   2195  fd5a				   CK
   2196  fd5a		       a5		      .byte.b	#%10100101	;
   2197  fd5b		       a5		      .byte.b	#%10100101	; 
   2198  fd5c		       66		      .byte.b	#%01100110	; 
   2199  fd5d		       a5		      .byte.b	#%10100101	; 
   2200  fd5e		       a5		      .byte.b	#%10100101	;
   2201  fd5f
   2202  fd5f				   CL
   2203  fd5f		       e7		      .byte.b	#%11100111	;
   2204  fd60		       24		      .byte.b	#%00100100	; 
   2205  fd61		       24		      .byte.b	#%00100100	; 
   2206  fd62		       24		      .byte.b	#%00100100	; 
   2207  fd63		       24		      .byte.b	#%00100100	;
   2208  fd64
   2209  fd64				   CI
   2210  fd64		       42		      .byte.b	#%01000010	;
   2211  fd65		       42		      .byte.b	#%01000010	; 
   2212  fd66		       42		      .byte.b	#%01000010	; 
   2213  fd67		       42		      .byte.b	#%01000010	; 
   2214  fd68		       42		      .byte.b	#%01000010	;
   2215  fd69
   2216  fd69				   CM
   2217  fd69		       a5		      .byte.b	#%10100101	;
   2218  fd6a		       a5		      .byte.b	#%10100101	; 
   2219  fd6b		       a5		      .byte.b	#%10100101	; 
   2220  fd6c		       e7		      .byte.b	#%11100111	; 
   2221  fd6d		       a5		      .byte.b	#%10100101	;
   2222  fd6e
   2223  fd6e				   CN
   2224  fd6e		       a5		      .byte.b	#%10100101	;
   2225  fd6f		       a5		      .byte.b	#%10100101	; 
   2226  fd70		       a5		      .byte.b	#%10100101	; 
   2227  fd71		       a5		      .byte.b	#%10100101	; 
   2228  fd72		       66		      .byte.b	#%01100110	;	
   2229  fd73
   2230  fd73
   2231  fd73				   CO
   2232  fd73		       42		      .byte.b	#%01000010	;
   2233  fd74		       a5		      .byte.b	#%10100101	; 
   2234  fd75		       a5		      .byte.b	#%10100101	; 
   2235  fd76		       a5		      .byte.b	#%10100101	; 
   2236  fd77		       42		      .byte.b	#%01000010	;	
   2237  fd78
   2238  fd78				   CP
   2239  fd78		       24		      .byte.b	#%00100100	;
   2240  fd79		       24		      .byte.b	#%00100100	; 
   2241  fd7a		       e7		      .byte.b	#%11100111	; 
   2242  fd7b		       a5		      .byte.b	#%10100101	; 
   2243  fd7c		       e7		      .byte.b	#%11100111	;
   2244  fd7d
   2245  fd7d				   CR
   2246  fd7d		       a5		      .byte.b	#%10100101	;
   2247  fd7e		       a5		      .byte.b	#%10100101	; 
   2248  fd7f		       66		      .byte.b	#%01100110	; 
   2249  fd80		       a5		      .byte.b	#%10100101	; 
   2250  fd81		       66		      .byte.b	#%01100110	;
   2251  fd82
   2252  fd82				   CS
   2253  fd82		       66		      .byte.b	#%01100110	;
   2254  fd83		       81		      .byte.b	#%10000001	; 
   2255  fd84		       42		      .byte.b	#%01000010	; 
   2256  fd85		       24		      .byte.b	#%00100100	; 
   2257  fd86		       c3		      .byte.b	#%11000011	;
   2258  fd87
   2259  fd87				   CT
   2260  fd87		       42		      .byte.b	#%01000010	;
   2261  fd88		       42		      .byte.b	#%01000010	; 
   2262  fd89		       42		      .byte.b	#%01000010	; 
   2263  fd8a		       42		      .byte.b	#%01000010	; 
   2264  fd8b		       e7		      .byte.b	#%11100111	;
   2265  fd8c
   2266  fd8c				   CV
   2267  fd8c		       42		      .byte.b	#%01000010	;
   2268  fd8d		       a5		      .byte.b	#%10100101	; 
   2269  fd8e		       a5		      .byte.b	#%10100101	; 
   2270  fd8f		       a5		      .byte.b	#%10100101	; 
   2271  fd90		       a5		      .byte.b	#%10100101	;	
   2272  fd91
   2273  fd91				   CY
   2274  fd91		       42		      .byte.b	#%01000010	;
   2275  fd92		       42		      .byte.b	#%01000010	; 
   2276  fd93		       42		      .byte.b	#%01000010	; 
   2277  fd94		       a5		      .byte.b	#%10100101	; 
   2278  fd95		       a5		      .byte.b	#%10100101	;
   2279  fd96
   2280  fd96				   CW
   2281  fd96		       a5		      .byte.b	#%10100101	;
   2282  fd97		       e7		      .byte.b	#%11100111	; 
   2283  fd98		       a5		      .byte.b	#%10100101	; 
   2284  fd99		       a5		      .byte.b	#%10100101	; 
   2285  fd9a		       a5		      .byte.b	#%10100101	;
   2286  fd9b
   2287  fd9b				   CZ
   2288  fd9b		       e7		      .byte.b	#%11100111	;
   2289  fd9c		       24		      .byte.b	#%00100100	; 
   2290  fd9d		       42		      .byte.b	#%01000010	; 
   2291  fd9e		       81		      .byte.b	#%10000001	; 
   2292  fd9f		       e7		      .byte.b	#%11100111	;
   2293  fda0
   2294  fda0				   Pipe
   2295  fda0		       42		      .byte.b	#%01000010	;
   2296  fda1		       00		      .byte.b	#%00000000	; 
   2297  fda2		       42		      .byte.b	#%01000010	; 
   2298  fda3		       00		      .byte.b	#%00000000	; 
   2299  fda4		       42		      .byte.b	#%01000010	;
   2300  fda5
   2301  fda5				   Exclamation
   2302  fda5		       42		      .byte.b	#%01000010	;
   2303  fda6		       00		      .byte.b	#%00000000	; 
   2304  fda7		       42		      .byte.b	#%01000010	; 
   2305  fda8		       42		      .byte.b	#%01000010	; 
   2306  fda9		       42		      .byte.b	#%01000010	;
   2307  fdaa
   2308  fdaa				   Dot
   2309  fdaa		       42		      .byte.b	#%01000010	;
   2310  fdab		       42		      .byte.b	#%01000010	; 
   2311  fdac		       00		      .byte.b	#%00000000	; 
   2312  fdad		       00		      .byte.b	#%00000000	; 
   2313  fdae		       00		      .byte.b	#%00000000	;
   2314  fdaf
   2315  fdaf				   Colon
   2316  fdaf		       42		      .byte.b	#%01000010	;
   2317  fdb0		       42		      .byte.b	#%01000010	; 
   2318  fdb1		       00		      .byte.b	#%00000000	; 
   2319  fdb2		       42		      .byte.b	#%01000010	; 
   2320  fdb3		       42		      .byte.b	#%01000010	;
   2321  fdb4
   2322  fdb4				   Triangle
   2323  fdb4		       81		      .byte.b	#%10000001	;
   2324  fdb5		       c3		      .byte.b	#%11000011	; 
   2325  fdb6		       e7		      .byte.b	#%11100111	; 
   2326  fdb7		       c3		      .byte.b	#%11000011	; 
   2327  fdb8		       81		      .byte.b	#%10000001	;
   2328  fdb9
   2329  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2330  fdb9		       00		      .byte.b	#0	;
   2331  fdba		       00		      .byte.b	#0	;
   2332  fdbb		       00		      .byte.b	#0	;
   2333  fdbc		       00		      .byte.b	#0	;
   2334  fdbd		       00		      .byte.b	#0	;
   2335  fdbe
   2336  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2337  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2338  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2339  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2340  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2341  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2342  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2343  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2344  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2345  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2346  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2347  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2348  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2349  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2350  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2351  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2352  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2353  fdce
   2354  fdce				   EngineSoundType
   2355  fdce		       02		      .byte.b	#2
   2356  fdcf		       02		      .byte.b	#2
   2357  fdd0		       0e		      .byte.b	#14
   2358  fdd1		       06		      .byte.b	#6
   2359  fdd2		       06		      .byte.b	#6
   2360  fdd3		       0e		      .byte.b	#14
   2361  fdd4
   2362  fdd4				   EngineBaseFrequence
   2363  fdd4		       1f		      .byte.b	#31
   2364  fdd5		       15		      .byte.b	#21
   2365  fdd6		       14		      .byte.b	#20
   2366  fdd7		       1f		      .byte.b	#31
   2367  fdd8		       16		      .byte.b	#22
   2368  fdd9		       03		      .byte.b	#3
   2369  fdda
   2370  fdda				   TachometerSizeLookup1
   2371  fdda		       1f		      .byte.b	#%00011111
   2372  fddb		       3f		      .byte.b	#%00111111
   2373  fddc		       7f		      .byte.b	#%01111111
   2374  fddd		       ff		      .byte.b	#%11111111
   2375  fdde		       ff		      .byte.b	#%11111111
   2376  fddf		       ff		      .byte.b	#%11111111
   2377  fde0		       ff		      .byte.b	#%11111111
   2378  fde1		       ff		      .byte.b	#%11111111
   2379  fde2
   2380  fde2				   TachometerSizeLookup2
   2381  fde2		       00		      .byte.b	#%00000000
   2382  fde3		       00		      .byte.b	#%00000000
   2383  fde4		       00		      .byte.b	#%00000000
   2384  fde5		       00		      .byte.b	#%00000000
   2385  fde6		       80		      .byte.b	#%10000000
   2386  fde7		       c0		      .byte.b	#%11000000
   2387  fde8		       e0		      .byte.b	#%11100000
   2388  fde9		       f0		      .byte.b	#%11110000
   2389  fdea
   2390  fdea				   TachometerGearLookup
   2391  fdea		       01		      .byte.b	#%00000001
   2392  fdeb		       02		      .byte.b	#%00000010
   2393  fdec		       04		      .byte.b	#%00000100
   2394  fded		       08		      .byte.b	#%00001000
   2395  fdee		       10		      .byte.b	#%00010000
   2396  fdef		       30		      .byte.b	#%00110000
   2397  fdf0
   2398  fe00					      org	$FE00
   2399  fe00				   AesTable
   2400  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2401  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2402  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2403  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2404  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2405  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2406  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2407  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2408  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2409  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2410  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2411  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2412  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2413  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2414  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2415  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2416  ff00
   2417  ff00							; From FF00 to FFFB (122 bytes) to use here
   2418  ff00
   2419  ff00				   StaticText		; All static text must be on the same MSB block. 
   2420  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2421  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2422  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2423  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2424  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2425  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2426  ff05
   2427  ff05				   HellwayLeftText
   2428  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2429  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2430  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2431  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2432  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2433  ff0a
   2434  ff0a				   HellwayRightText
   2435  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2436  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2437  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2438  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2439  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2440  ff0f
   2441  ff0f				   OpbText
   2442  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2443  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2444  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2445  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2446  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2447  ff14
   2448  ff14				   YearText
   2449  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2450  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2451  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2452  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2453  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2454  ff19
   2455  ff19				   GameText
   2456  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2457  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2458  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2459  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2460  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2461  ff1e
   2462  ff1e				   OverText
   2463  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2464  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2465  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2466  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2467  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2468  ff23				   GoText
   2469  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2470  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2471  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2472  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2473  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2474  ff28
   2475  ff28				   ZeldaTextLeft
   2476  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2477  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2478  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2479  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2480  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2481  ff2d
   2482  ff2d				   ZeldaTextRight
   2483  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2484  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2485  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2486  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2487  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2488  ff32
   2489  ff32				   ZeldaDateLeft
   2490  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2491  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2492  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2493  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2494  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2495  ff37
   2496  ff37				   ZeldaDateRight
   2497  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2498  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2499  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2500  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2501  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2502  ff3c
   2503  ff3c				   PolvinhosTextLeft
   2504  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2505  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2506  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2507  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2508  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2509  ff41
   2510  ff41				   PolvinhosTextRight
   2511  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2512  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2513  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2514  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2515  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2516  ff46
   2517  ff46				   PolvinhosDateLeft
   2518  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2519  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2520  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2521  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2522  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2523  ff4b
   2524  ff4b				   PolvinhosDateRight
   2525  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2526  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2527  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2528  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2529  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2530  ff50
   2531  ff50				   IvonneTextLeft
   2532  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2533  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2534  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2535  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2536  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2537  ff55
   2538  ff55				   IvonneTextRight
   2539  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2540  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2541  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2542  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2543  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2544  ff5a
   2545  ff5a				   IvonneDateLeft
   2546  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2547  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2548  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2549  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2550  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2551  ff5f
   2552  ff5f				   IvonneDateRight
   2553  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2554  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2555  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2556  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2557  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2558  ff64
   2559  ff64				   PaperArtTextLeft
   2560  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2561  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2562  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2563  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2564  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2565  ff69
   2566  ff69				   PaperArtTextRight
   2567  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2568  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2569  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2570  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2571  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2572  ff6e
   2573  ff6e				   LeonardoTextLeft
   2574  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2575  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2576  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2577  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2578  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2579  ff73
   2580  ff73				   LeonardoTextRight
   2581  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2582  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2583  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2584  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2585  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2586  ff78
   2587  ff78				   VersionText
   2588  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2589  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2590  ff7a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2591  ff7b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2592  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2593  ff7d
   2594  ff7d
   2595  ff7d				   EndStaticText
   2596  ff7d
   2597  ff7d				   CarSprite		; Upside down
   2598  ff7d		       00 00 00 00*	      ds	6
   2599  ff83		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   2600  ff84		       7e		      .byte.b	#%01111110
   2601  ff85		       24		      .byte.b	#%00100100
   2602  ff86		       bd		      .byte.b	#%10111101
   2603  ff87		       3c		      .byte.b	#%00111100
   2604  ff88		       bd		      .byte.b	#%10111101
   2605  ff89		       3c		      .byte.b	#%00111100
   2606  ff8a		       00 00 00 00*	      ds	GAMEPLAY_AREA - 2
   2607  ffca
   2608  ffca				   TrafficSpeeds
   2609  ffca		       00		      .byte.b	#$00	;  Trafic0 L
   2610  ffcb		       00		      .byte.b	#$00	;  Trafic0 H
   2611  ffcc		       0a		      .byte.b	#$0A	;  Trafic1 L
   2612  ffcd		       01		      .byte.b	#$01	;  Trafic1 H
   2613  ffce		       e6		      .byte.b	#$E6	;  Trafic2 L
   2614  ffcf		       00		      .byte.b	#$00	;  Trafic2 H
   2615  ffd0		       c2		      .byte.b	#$C2	;  Trafic3 L
   2616  ffd1		       00		      .byte.b	#$00	;  Trafic3 H
   2617  ffd2		       9e		      .byte.b	#$9E	;  Trafic4 L
   2618  ffd3		       00		      .byte.b	#$00	;  Trafic4 H
   2619  ffd4				   TrafficSpeedsHighDelta
   2620  ffd4		       00		      .byte.b	#$00	;  Trafic0 L
   2621  ffd5		       00		      .byte.b	#$00	;  Trafic0 H
   2622  ffd6		       0a		      .byte.b	#$0A	;  Trafic1 L
   2623  ffd7		       01		      .byte.b	#$01	;  Trafic1 H
   2624  ffd8		       c8		      .byte.b	#$C8	;  Trafic2 L
   2625  ffd9		       00		      .byte.b	#$00	;  Trafic2 H
   2626  ffda		       86		      .byte.b	#$86	;  Trafic3 L
   2627  ffdb		       00		      .byte.b	#$00	;  Trafic3 H
   2628  ffdc		       44		      .byte.b	#$44	;  Trafic4 L
   2629  ffdd		       00		      .byte.b	#$00	;  Trafic4 H
   2630  ffde
   2631  fffc					      org	$FFFC
   2632  fffc		       00 f0		      .word.w	BeforeStart
   2633  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
