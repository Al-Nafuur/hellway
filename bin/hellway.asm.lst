------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 0a	   BREAK_SPEED =	10
     26  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     28  f000
     29  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     30  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     31  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     32  f000
     33  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     34  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     35  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     36  f000
     37  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     38  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     39  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     40  f000
     41  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     42  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     43  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     44  f000
     45  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     46  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     47  f000
     48  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     49  f000
     50  f000		       00 96	   PLAYER1_COLOR =	$96
     51  f000
     52  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     53  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     54  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     55  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     56  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     57  f000
     58  f000		       00 35	   PLAYER_0_X_START =	$35	;
     59  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     60  f000
     61  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     62  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     63  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     64  f000		       00 03	   TIMEOVER_BREAK_INTERVAL =	%00000011	; Every 4 frames
     65  f000
     66  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     67  f000
     68  f000		       00 00	   BLACK      =	$00	;
     69  f000
     70  f000		       00 0f	   MAX_GAME_MODE =	15
     71  f000
     72  f000		       00 08	   PARALLAX_SIZE =	8
     73  f000
     74  f000		       00 05	   HALF_TEXT_SIZE =	5
     75  f000
     76  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     77  f000
     78  f000		       00 49	   VERSION_COLOR =	$49
     79  f000
     80  f000		       00 80	   GRP0Cache  =	$80
     81  f000		       00 81	   PF0Cache   =	$81
     82  f000		       00 82	   PF1Cache   =	$82
     83  f000		       00 83	   PF2Cache   =	$83
     84  f000		       00 84	   GRP1Cache  =	$84
     85  f000		       00 85	   ENABLCache =	$85
     86  f000		       00 86	   ENAM0Cache =	$86
     87  f000		       00 87	   ENAM1Cache =	$87
     88  f000
     89  f000		       00 88	   ParallaxMode =	$88
     90  f000
     91  f000		       00 8c	   FrameCount0 =	$8C	;
     92  f000		       00 8d	   FrameCount1 =	$8D	;
     93  f000
     94  f000		       00 8e	   Player0SpeedL =	$8E
     95  f000		       00 8f	   Player0SpeedH =	$8F
     96  f000
     97  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     98  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     99  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    100  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    101  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    102  f000
    103  f000		       00 a4	   CheckpointBcd0 =	$A4
    104  f000		       00 a5	   CheckpointBcd1 =	$A5
    105  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    106  f000
    107  f000							;Temporary variables, multiple uses
    108  f000		       00 b0	   Tmp0       =	$B0
    109  f000		       00 b1	   Tmp1       =	$B1
    110  f000		       00 b2	   Tmp2       =	$B2
    111  f000		       00 b3	   Tmp3       =	$B3
    112  f000
    113  f000		       00 b4	   ScoreBcd0  =	$B4
    114  f000		       00 b5	   ScoreBcd1  =	$B5
    115  f000		       00 b6	   ScoreBcd2  =	$B6
    116  f000		       00 b7	   ScoreBcd3  =	$B7
    117  f000
    118  f000		       00 b8	   CollisionCounter =	$B8
    119  f000		       00 b9	   Player0X   =	$B9
    120  f000		       00 ba	   CountdownTimer =	$BA
    121  f000		       00 bb	   Traffic0Msb =	$BB
    122  f000		       00 bc	   SwitchDebounceCounter =	$BC
    123  f000
    124  f000		       00 bd	   TimeBcd0   =	$BD
    125  f000		       00 be	   TimeBcd1   =	$BE
    126  f000		       00 bf	   TimeBcd2   =	$BF
    127  f000
    128  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    129  f000		       00 c1	   TrafficChance =	$C1
    130  f000		       00 c2	   CheckpointTime =	$C2
    131  f000		       00 c3	   TrafficColor =	$C3
    132  f000		       00 c4	   CurrentDifficulty =	$C4
    133  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    134  f000
    135  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    136  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    137  f000
    138  f000		       00 ca	   BorderType =	$CA
    139  f000
    140  f000		       00 cb	   HitCountBcd0 =	$CB
    141  f000		       00 cc	   HitCountBcd1 =	$CC
    142  f000
    143  f000		       00 cd	   GlideTimeBcd0 =	$CD
    144  f000		       00 ce	   GlideTimeBcd1 =	$CE
    145  f000
    146  f000		       00 cf	   OneSecondConter =	$CF
    147  f000
    148  f000		       00 d0	   ScoreD0    =	$D0
    149  f000		       00 d1	   ScoreD1    =	$D1
    150  f000		       00 d2	   ScoreD2    =	$D2
    151  f000		       00 d3	   ScoreD3    =	$D3
    152  f000		       00 d4	   ScoreD4    =	$D4
    153  f000		       00 d5	   ScoreFontColor =	$D5
    154  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    155  f000		       00 d7	   NextCheckpoint =	$D7
    156  f000
    157  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    158  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    159  f000
    160  f000
    161  f000							;generic start up stuff, put zero in all...
    162  f000				   BeforeStart		;All variables that are kept on game reset or select
    163  f000		       a0 00		      LDY	#0
    164  f002		       84 bc		      STY	SwitchDebounceCounter
    165  f004		       84 c5		      STY	GameMode
    166  f006		       a0 e0		      LDY	#%11100000	; Default Parallax
    167  f008		       84 88		      STY	ParallaxMode
    168  f00a
    169  f00a				   Start
    170  f00a		       78		      SEI
    171  f00b		       d8		      CLD
    172  f00c		       a2 ff		      LDX	#$FF
    173  f00e		       9a		      TXS
    174  f00f		       a9 00		      LDA	#0
    175  f011				   ClearMem
    176  f011		       e0 bc		      CPX	#SwitchDebounceCounter
    177  f013		       f0 0a		      BEQ	SkipClean
    178  f015		       e0 c5		      CPX	#GameMode
    179  f017		       f0 06		      BEQ	SkipClean
    180  f019		       e0 88		      CPX	#ParallaxMode
    181  f01b		       f0 02		      BEQ	SkipClean
    182  f01d		       95 00		      STA	0,X
    183  f01f				   SkipClean
    184  f01f		       ca		      DEX
    185  f020		       d0 ef		      BNE	ClearMem
    186  f022
    187  f022							;Setting some variables...
    188  f022
    189  f022				   SettingTrafficOffsets		; Time sensitive with player H position
    190  f022		       85 02		      STA	WSYNC	;We will set player position
    191  f024		       20 2a f7 	      JSR	DefaultOffsets
    192  f027
    193  f027		       ad d2 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    194  f02a		       85 8e		      STA	Player0SpeedL
    195  f02c
      0  f02c					      SLEEP	11	;18
      1  f02c				   .CYCLES    SET	11
      2  f02c
      3  f02c				  -	      IF	.CYCLES < 2
      4  f02c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f02c				  -	      ERR
      6  f02c					      ENDIF
      7  f02c
      8  f02c					      IF	.CYCLES & 1
      9  f02c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f02c				  -	      nop	0
     11  f02c					      ELSE
     12  f02c		       24 00		      bit	VSYNC
     13  f02e					      ENDIF
     14  f02e				   .CYCLES    SET	.CYCLES - 3
     15  f02e					      ENDIF
     16  f02e
     17  f02e					      REPEAT	.CYCLES / 2
     18  f02e		       ea		      nop
     17  f02e					      REPEND
     18  f02f		       ea		      nop
     17  f02f					      REPEND
     18  f030		       ea		      nop
     17  f030					      REPEND
     18  f031		       ea		      nop
     19  f032					      REPEND
    197  f032		       85 10		      STA	RESP0
    198  f034
    199  f034		       a2 00		      LDX	#0
    200  f036		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    201  f039		       85 a6		      STA	StartSWCHB	; For game over
    202  f03b		       29 c0		      AND	#%11000000
    203  f03d		       f0 0b		      BEQ	CallConfigureDifficulty
    204  f03f		       e8		      INX
    205  f040		       c9 80		      CMP	#%10000000
    206  f042		       f0 06		      BEQ	CallConfigureDifficulty
    207  f044		       e8		      INX
    208  f045		       c9 40		      CMP	#%01000000
    209  f047		       f0 01		      BEQ	CallConfigureDifficulty
    210  f049		       e8		      INX
    211  f04a
    212  f04a				   CallConfigureDifficulty
    213  f04a		       86 c4		      STX	CurrentDifficulty
    214  f04c		       20 e2 f6 	      JSR	ConfigureDifficulty
    215  f04f
    216  f04f				   ConfigureOneSecondTimer
    217  f04f		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    218  f051		       85 cf		      STA	OneSecondConter
    219  f053
    220  f053				   HPositioning
    221  f053		       85 02		      STA	WSYNC
    222  f055
    223  f055		       a9 30		      LDA	#%00110000	;2 Missile Size
    224  f057		       85 04		      STA	NUSIZ0	;3
    225  f059		       85 05		      STA	NUSIZ1	;3
    226  f05b
    227  f05b		       a9 35		      LDA	#PLAYER_0_X_START	;2
    228  f05d		       85 b9		      STA	Player0X	;3
    229  f05f
    230  f05f		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    231  f061		       85 ba		      STA	CountdownTimer	;3
    232  f063
    233  f063		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    234  f065		       85 d7		      STA	NextCheckpoint
    235  f067
    236  f067		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f069					      SLEEP	11	;
      1  f069				   .CYCLES    SET	11
      2  f069
      3  f069				  -	      IF	.CYCLES < 2
      4  f069				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f069				  -	      ERR
      6  f069					      ENDIF
      7  f069
      8  f069					      IF	.CYCLES & 1
      9  f069				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f069				  -	      nop	0
     11  f069					      ELSE
     12  f069		       24 00		      bit	VSYNC
     13  f06b					      ENDIF
     14  f06b				   .CYCLES    SET	.CYCLES - 3
     15  f06b					      ENDIF
     16  f06b
     17  f06b					      REPEAT	.CYCLES / 2
     18  f06b		       ea		      nop
     17  f06b					      REPEND
     18  f06c		       ea		      nop
     17  f06c					      REPEND
     18  f06d		       ea		      nop
     17  f06d					      REPEND
     18  f06e		       ea		      nop
     19  f06f					      REPEND
    238  f06f		       85 11		      STA	RESP1
      0  f071					      SLEEP	2	;
      1  f071				   .CYCLES    SET	2
      2  f071
      3  f071				  -	      IF	.CYCLES < 2
      4  f071				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f071				  -	      ERR
      6  f071					      ENDIF
      7  f071
      8  f071				  -	      IF	.CYCLES & 1
      9  f071				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f071				  -	      nop	0
     11  f071				  -	      ELSE
     12  f071				  -	      bit	VSYNC
     13  f071				  -	      ENDIF
     14  f071				  -.CYCLES    SET	.CYCLES - 3
     15  f071					      ENDIF
     16  f071
     17  f071					      REPEAT	.CYCLES / 2
     18  f071		       ea		      nop
     19  f072					      REPEND
    240  f072		       85 14		      STA	RESBL
      0  f074					      SLEEP	2	;
      1  f074				   .CYCLES    SET	2
      2  f074
      3  f074				  -	      IF	.CYCLES < 2
      4  f074				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f074				  -	      ERR
      6  f074					      ENDIF
      7  f074
      8  f074				  -	      IF	.CYCLES & 1
      9  f074				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f074				  -	      nop	0
     11  f074				  -	      ELSE
     12  f074				  -	      bit	VSYNC
     13  f074				  -	      ENDIF
     14  f074				  -.CYCLES    SET	.CYCLES - 3
     15  f074					      ENDIF
     16  f074
     17  f074					      REPEAT	.CYCLES / 2
     18  f074		       ea		      nop
     19  f075					      REPEND
    242  f075		       85 12		      STA	RESM0
      0  f077					      SLEEP	2
      1  f077				   .CYCLES    SET	2
      2  f077
      3  f077				  -	      IF	.CYCLES < 2
      4  f077				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f077				  -	      ERR
      6  f077					      ENDIF
      7  f077
      8  f077				  -	      IF	.CYCLES & 1
      9  f077				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f077				  -	      nop	0
     11  f077				  -	      ELSE
     12  f077				  -	      bit	VSYNC
     13  f077				  -	      ENDIF
     14  f077				  -.CYCLES    SET	.CYCLES - 3
     15  f077					      ENDIF
     16  f077
     17  f077					      REPEAT	.CYCLES / 2
     18  f077		       ea		      nop
     19  f078					      REPEND
    244  f078		       85 13		      STA	RESM1
    245  f07a
    246  f07a		       a9 f0		      LDA	#$F0
    247  f07c		       85 24		      STA	HMBL
    248  f07e		       85 22		      STA	HMM0
    249  f080		       85 23		      STA	HMM1
    250  f082		       85 02		      STA	WSYNC
    251  f084		       85 2a		      STA	HMOVE
    252  f086		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    253  f088		       85 2b		      STA	HMCLR
    254  f08a
    255  f08a							;SLEEP 24
    256  f08a							;STA HMCLR
    257  f08a
    258  f08a							;VSYNC time
    259  f08a				   MainLoop
    260  f08a		       a9 02		      LDA	#2
    261  f08c		       85 00		      STA	VSYNC
    262  f08e		       85 02		      STA	WSYNC
    263  f090		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    264  f092		       85 2a		      STA	HMOVE	;2
    265  f094		       85 02		      STA	WSYNC	;3
    266  f096		       a9 29		      LDA	#41	;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    267  f098		       8d 96 02 	      STA	TIM64T	;3	
    268  f09b		       a9 00		      LDA	#0	;2
    269  f09d		       85 00		      STA	VSYNC	;3	
    270  f09f
    271  f09f							;Read Fire Button before, will make it start the game for now.
    272  f09f				   StartGame
    273  f09f		       a5 0c		      LDA	INPT4	;3
    274  f0a1		       30 1b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    275  f0a3		       a5 c0		      LDA	GameStatus	;3
    276  f0a5		       d0 17		      BNE	SkipGameStart
    277  f0a7		       e6 c0		      INC	GameStatus
    278  f0a9		       a9 00		      LDA	#0	;
    279  f0ab		       85 8c		      STA	FrameCount0
    280  f0ad		       85 8d		      STA	FrameCount1
    281  f0af		       a9 0a		      LDA	#10
    282  f0b1		       85 19		      STA	AUDV0
    283  f0b3		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    284  f0b5		       85 d5		      STA	ScoreFontColor
    285  f0b7		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    286  f0b9		       85 d6		      STA	ScoreFontColorHoldChange
    287  f0bb		       4c 3a f1 	      JMP	SkipIncFC1	; Make the worse case stable
    288  f0be				   SkipGameStart
    289  f0be
    290  f0be				   RandomizeGame
    291  f0be		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    292  f0c0		       d0 30		      BNE	EndRandomizeGame
    293  f0c2		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    294  f0c4		       29 02		      AND	#%00000010
    295  f0c6		       f0 27		      BEQ	DeterministicGame
    296  f0c8		       a6 96		      LDX	TrafficOffset1 + 2
    297  f0ca		       bd 00 fe 	      LDA	AesTable,X
    298  f0cd		       45 8c		      EOR	FrameCount0
    299  f0cf		       85 96		      STA	TrafficOffset1 + 2
    300  f0d1		       a6 9a		      LDX	TrafficOffset2 + 2
    301  f0d3		       bd 00 fe 	      LDA	AesTable,X
    302  f0d6		       45 8c		      EOR	FrameCount0
    303  f0d8		       85 9a		      STA	TrafficOffset2 + 2
    304  f0da		       a6 9e		      LDX	TrafficOffset3 + 2
    305  f0dc		       bd 00 fe 	      LDA	AesTable,X
    306  f0df		       45 8c		      EOR	FrameCount0
    307  f0e1		       85 9e		      STA	TrafficOffset3 + 2
    308  f0e3		       a6 a2		      LDX	TrafficOffset4 + 2
    309  f0e5		       bd 00 fe 	      LDA	AesTable,X
    310  f0e8		       45 8c		      EOR	FrameCount0
    311  f0ea		       85 a2		      STA	TrafficOffset4 + 2
    312  f0ec		       4c f2 f0 	      JMP	EndRandomizeGame
    313  f0ef
    314  f0ef				   DeterministicGame
    315  f0ef		       20 2a f7 	      JSR	DefaultOffsets
    316  f0f2
    317  f0f2				   EndRandomizeGame
    318  f0f2
    319  f0f2				   ReadSwitches
    320  f0f2		       a6 bc		      LDX	SwitchDebounceCounter
    321  f0f4		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    322  f0f6		       a9 01		      LDA	#%00000001
    323  f0f8		       2c 82 02 	      BIT	SWCHB
    324  f0fb		       d0 07		      BNE	SkipReset
    325  f0fd		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    326  f0ff		       85 bc		      STA	SwitchDebounceCounter
    327  f101		       4c 0a f0 	      JMP	Start
    328  f104				   SkipReset
    329  f104
    330  f104				   GameModeSelect
    331  f104		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    332  f106		       d0 27		      BNE	SkipGameSelect
    333  f108		       20 e2 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    334  f10b				   ReadDpadParallax
    335  f10b		       ad 80 02 	      LDA	SWCHA
    336  f10e		       29 f0		      AND	#%11110000
    337  f110		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    338  f112		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    339  f114		       85 88		      STA	ParallaxMode
    340  f116				   ContinueGameSelect
    341  f116		       a9 02		      LDA	#%00000010
    342  f118		       2c 82 02 	      BIT	SWCHB
    343  f11b		       d0 12		      BNE	SkipGameSelect
    344  f11d		       a6 c5		      LDX	GameMode
    345  f11f		       e0 0f		      CPX	#MAX_GAME_MODE
    346  f121		       f0 04		      BEQ	ResetGameMode
    347  f123		       e8		      INX
    348  f124		       4c 29 f1 	      JMP	StoreGameMode
    349  f127				   ResetGameMode
    350  f127		       a2 00		      LDX	#0
    351  f129				   StoreGameMode
    352  f129		       86 c5		      STX	GameMode
    353  f12b		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    354  f12d		       85 bc		      STA	SwitchDebounceCounter
    355  f12f				   SkipGameSelect
    356  f12f		       4c 34 f1 	      JMP	EndReadSwitches
    357  f132				   DecrementSwitchDebounceCounter
    358  f132		       c6 bc		      DEC	SwitchDebounceCounter
    359  f134				   EndReadSwitches
    360  f134
    361  f134				   CountFrame
    362  f134		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    363  f136		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    364  f138		       e6 8d		      INC	FrameCount1	; 5 Still not used
    365  f13a				   SkipIncFC1
    366  f13a
    367  f13a							;Does not update the game if not running
    368  f13a		       a5 c0		      LDA	GameStatus	;3
    369  f13c		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    370  f13e		       4c 0d f3 	      JMP	SkipUpdateLogic
    371  f141				   ContinueWithGameLogic
    372  f141
    373  f141				   EverySecond		; 64 frames to be more precise
    374  f141		       a9 3f		      LDA	#%00111111
    375  f143		       25 8c		      AND	FrameCount0
    376  f145		       d0 06		      BNE	SkipEverySecondAction
    377  f147		       c5 ba		      CMP	CountdownTimer
    378  f149		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    379  f14b		       c6 ba		      DEC	CountdownTimer
    380  f14d				   SkipEverySecondAction
    381  f14d
    382  f14d
    383  f14d				   BreakOnTimeOver		; Uses LDX as the breaking speed
    384  f14d		       a2 00		      LDX	#0
    385  f14f		       a5 ba		      LDA	CountdownTimer
    386  f151		       d0 08		      BNE	Break
    387  f153		       a5 8c		      LDA	FrameCount0
    388  f155		       29 03		      AND	#TIMEOVER_BREAK_INTERVAL
    389  f157		       d0 02		      BNE	Break
    390  f159		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    391  f15b
    392  f15b				   Break
    393  f15b		       a9 20		      LDA	#%00100000	;Down in controller
    394  f15d		       2c 80 02 	      BIT	SWCHA
    395  f160		       d0 0b		      BNE	BreakNonZero
    396  f162		       a5 0c		      LDA	INPT4	;3
    397  f164		       10 05		      BPL	BreakWhileAccelerating
    398  f166		       a2 0a		      LDX	#BREAK_SPEED
    399  f168		       4c 6d f1 	      JMP	BreakNonZero
    400  f16b				   BreakWhileAccelerating		; Allow better control while breaking.
    401  f16b		       a2 05		      LDX	#BREAK_SPEED / 2
    402  f16d
    403  f16d				   BreakNonZero
    404  f16d		       e0 00		      CPX	#0
    405  f16f		       f0 2b		      BEQ	SkipBreak
    406  f171		       86 b0		      STX	Tmp0
    407  f173
    408  f173				   DecreaseSpeed
    409  f173		       38		      SEC
    410  f174		       a5 8e		      LDA	Player0SpeedL
    411  f176		       e5 b0		      SBC	Tmp0
    412  f178		       85 8e		      STA	Player0SpeedL
    413  f17a		       a5 8f		      LDA	Player0SpeedH
    414  f17c		       e9 00		      SBC	#0
    415  f17e		       85 8f		      STA	Player0SpeedH
    416  f180
    417  f180				   CheckMinSpeed
    418  f180		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    419  f182		       c9 00		      CMP	#CAR_MIN_SPEED_H
    420  f184		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    421  f186		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    422  f188
    423  f188				   CompareLBreakSpeed
    424  f188		       a5 8e		      LDA	Player0SpeedL
    425  f18a		       c9 00		      CMP	#CAR_MIN_SPEED_L
    426  f18c		       90 03		      BCC	ResetMinSpeed	; Less than memory
    427  f18e		       4c 99 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    428  f191
    429  f191				   ResetMinSpeed
    430  f191		       a9 00		      LDA	#CAR_MIN_SPEED_H
    431  f193		       85 8f		      STA	Player0SpeedH
    432  f195		       a9 00		      LDA	#CAR_MIN_SPEED_L
    433  f197		       85 8e		      STA	Player0SpeedL
    434  f199
    435  f199				   SkipAccelerateIfBreaking
    436  f199		       4c cc f1 	      JMP	SkipAccelerate
    437  f19c				   SkipBreak
    438  f19c
    439  f19c				   Acelerates
    440  f19c		       a5 ba		      LDA	CountdownTimer
    441  f19e		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    442  f1a0		       a5 0c		      LDA	INPT4	;3
    443  f1a2		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    444  f1a4		       a9 10		      LDA	#%00010000	;UP in controller
    445  f1a6		       2c 80 02 	      BIT	SWCHA
    446  f1a9		       d0 21		      BNE	SkipAccelerate
    447  f1ab
    448  f1ab				   IncreaseCarSpeed
    449  f1ab							;Adds speed
    450  f1ab		       18		      CLC
    451  f1ac		       a5 8e		      LDA	Player0SpeedL
    452  f1ae		       69 01		      ADC	#ACCELERATE_SPEED
    453  f1b0		       85 8e		      STA	Player0SpeedL
    454  f1b2		       a5 8f		      LDA	Player0SpeedH
    455  f1b4		       69 00		      ADC	#0
    456  f1b6		       85 8f		      STA	Player0SpeedH
    457  f1b8
    458  f1b8				   CheckIfAlreadyMaxSpeed
    459  f1b8		       c9 02		      CMP	#CAR_MAX_SPEED_H
    460  f1ba		       90 10		      BCC	SkipAccelerate	; less than my max speed
    461  f1bc		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    462  f1be							;High bit is max, compare the low
    463  f1be		       a5 8e		      LDA	Player0SpeedL
    464  f1c0		       c9 80		      CMP	#CAR_MAX_SPEED_L
    465  f1c2		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    466  f1c4							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    467  f1c4
    468  f1c4				   ResetToMaxSpeed		; Speed is more, or is already max
    469  f1c4		       a9 02		      LDA	#CAR_MAX_SPEED_H
    470  f1c6		       85 8f		      STA	Player0SpeedH
    471  f1c8		       a9 80		      LDA	#CAR_MAX_SPEED_L
    472  f1ca		       85 8e		      STA	Player0SpeedL
    473  f1cc				   SkipAccelerate
    474  f1cc
    475  f1cc				   InitUpdateOffsets
    476  f1cc		       a2 00		      LDX	#0	; Memory Offset 24 bit
    477  f1ce		       a0 00		      LDY	#0	; Line Speeds 16 bits
    478  f1d0		       a5 91		      LDA	TrafficOffset0 + 1	;
    479  f1d2		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    480  f1d4		       a5 c5		      LDA	GameMode
    481  f1d6		       29 04		      AND	#%00000100	; GameModes with high delta
    482  f1d8		       f0 02		      BEQ	UpdateOffsets
    483  f1da		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    484  f1dc
    485  f1dc				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    486  f1dc		       38		      SEC
    487  f1dd		       a5 8e		      LDA	Player0SpeedL
    488  f1df		       f9 ca ff 	      SBC	TrafficSpeeds,Y
    489  f1e2		       85 b0		      STA	Tmp0
    490  f1e4		       c8		      INY
    491  f1e5		       a5 8f		      LDA	Player0SpeedH
    492  f1e7		       f9 ca ff 	      SBC	TrafficSpeeds,Y
    493  f1ea		       85 b1		      STA	Tmp1
    494  f1ec		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    495  f1ee		       e9 00		      SBC	#0
    496  f1f0		       85 b2		      STA	Tmp2
    497  f1f2
    498  f1f2				   AddsTheResult
    499  f1f2		       18		      CLC
    500  f1f3		       a5 b0		      LDA	Tmp0
    501  f1f5		       75 90		      ADC	TrafficOffset0,X
    502  f1f7		       95 90		      STA	TrafficOffset0,X
    503  f1f9		       e8		      INX
    504  f1fa		       a5 b1		      LDA	Tmp1
    505  f1fc		       75 90		      ADC	TrafficOffset0,X
    506  f1fe		       95 90		      STA	TrafficOffset0,X
    507  f200		       e8		      INX
    508  f201		       a5 b2		      LDA	Tmp2	; Carry
    509  f203		       75 90		      ADC	TrafficOffset0,X
    510  f205		       95 90		      STA	TrafficOffset0,X
    511  f207		       90 06		      BCC	CalculateOffsetCache
    512  f209		       e0 02		      CPX	#2	;MSB offset 0
    513  f20b		       d0 02		      BNE	CalculateOffsetCache
    514  f20d		       e6 bb		      INC	Traffic0Msb
    515  f20f
    516  f20f				   CalculateOffsetCache
    517  f20f		       e8		      INX
    518  f210		       38		      SEC
    519  f211		       69 00		      ADC	#0	;Increment by one
    520  f213		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    521  f215
    522  f215				   PrepareNextUpdateLoop
    523  f215		       c8		      INY
    524  f216		       e8		      INX
    525  f217		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    526  f219		       d0 c1		      BNE	UpdateOffsets
    527  f21b
    528  f21b				   BcdScore		; 48
    529  f21b		       a5 91		      LDA	TrafficOffset0 + 1	;3
    530  f21d		       45 b3		      EOR	Tmp3	;3
    531  f21f		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    532  f221		       f0 1b		      BEQ	FinishBcdScore	;2
    533  f223
    534  f223				   ContinueBcdScore
    535  f223		       f8		      SED		;2
    536  f224		       18		      CLC		;2
    537  f225		       a5 b4		      LDA	ScoreBcd0	;3
    538  f227		       69 01		      ADC	#1	;2
    539  f229		       85 b4		      STA	ScoreBcd0	;3
    540  f22b		       a5 b5		      LDA	ScoreBcd1	;3
    541  f22d		       69 00		      ADC	#0	;2
    542  f22f		       85 b5		      STA	ScoreBcd1	;3
    543  f231		       a5 b6		      LDA	ScoreBcd2	;3
    544  f233		       69 00		      ADC	#0	;2
    545  f235		       85 b6		      STA	ScoreBcd2	;3
    546  f237		       a5 b7		      LDA	ScoreBcd3	;3
    547  f239		       69 00		      ADC	#0	;2
    548  f23b		       85 b7		      STA	ScoreBcd3	;3
    549  f23d		       d8		      CLD		;2
    550  f23e				   FinishBcdScore
    551  f23e
    552  f23e							;Until store the movemnt, LDX contains the value to be stored.
    553  f23e				   TestCollision		;
    554  f23e							; see if player0 colides with the rest
    555  f23e		       a5 00		      LDA	CXM0P
    556  f240		       05 01		      ORA	CXM1P
    557  f242		       05 01		      ORA	CXM1P
    558  f244		       05 02		      ORA	CXP0FB
    559  f246		       05 07		      ORA	CXPPMM
    560  f248		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    561  f24a		       f0 38		      BEQ	NoCollision	;skip if not hitting...
    562  f24c		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    563  f24e		       d0 34		      BNE	NoCollision
    564  f250		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    565  f252		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    566  f254		       f0 2e		      BEQ	NoCollision
    567  f256		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    568  f258		       f0 2a		      BEQ	NoCollision
    569  f25a		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    570  f25c		       85 b8		      STA	CollisionCounter	;and store as colision.
    571  f25e				   CountBcdColision
    572  f25e		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    573  f260		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    574  f262		       f0 17		      BEQ	SkipSetColisionSpeed
    575  f264		       f8		      SED		;2
    576  f265		       18		      CLC		;2
    577  f266		       a5 cb		      LDA	HitCountBcd0	;3
    578  f268		       69 01		      ADC	#1	;3
    579  f26a		       85 cb		      STA	HitCountBcd0	;3
    580  f26c		       a5 cc		      LDA	HitCountBcd1	;3
    581  f26e		       69 00		      ADC	#0	;2
    582  f270		       85 cc		      STA	HitCountBcd1	;3
    583  f272		       d8		      CLD		;2
    584  f273				   EndCountBcdColision
    585  f273		       a9 10		      LDA	#COLLISION_SPEED_L	;
    586  f275		       c5 8e		      CMP	Player0SpeedL
    587  f277		       b0 02		      BCS	SkipSetColisionSpeed
    588  f279		       85 8e		      STA	Player0SpeedL
    589  f27b				   SkipSetColisionSpeed
    590  f27b		       a9 00		      LDA	#0
    591  f27d		       85 8f		      STA	Player0SpeedH
    592  f27f		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    593  f281		       4c c1 f2 	      JMP	StoreHMove	; We keep position consistent
    594  f284				   NoCollision
    595  f284
    596  f284				   DecrementCollision
    597  f284		       a4 b8		      LDY	CollisionCounter
    598  f286		       f0 07		      BEQ	FinishDecrementCollision
    599  f288		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    600  f28a		       85 04		      STA	NUSIZ0
    601  f28c		       88		      DEY
    602  f28d		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    603  f28f				   FinishDecrementCollision
    604  f28f
    605  f28f				   ResetPlayerSize
    606  f28f		       d0 04		      BNE	FinishResetPlayerSize
    607  f291		       a9 30		      LDA	#%00110000
    608  f293		       85 04		      STA	NUSIZ0	;
    609  f295				   FinishResetPlayerSize
    610  f295
    611  f295				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    612  f295		       c0 01		      CPY	#1	; Last frame before reset
    613  f297		       d0 05		      BNE	SkipResetPlayerPosition
    614  f299		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    615  f29b		       4c c1 f2 	      JMP	StoreHMove
    616  f29e				   SkipResetPlayerPosition
    617  f29e
    618  f29e							; for left and right, we're gonna 
    619  f29e							; set the horizontal speed, and then do
    620  f29e							; a single HMOVE.  We'll use X to hold the
    621  f29e							; horizontal speed, then store it in the 
    622  f29e							; appropriate register
    623  f29e				   PrepareReadXAxis
    624  f29e		       a2 00		      LDX	#0
    625  f2a0		       a4 b9		      LDY	Player0X
    626  f2a2				   BeginReadLeft
    627  f2a2		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    628  f2a4		       a9 40		      LDA	#%01000000	;Left
    629  f2a6		       2c 80 02 	      BIT	SWCHA
    630  f2a9		       d0 07		      BNE	SkipMoveLeft
    631  f2ab		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    632  f2ad		       c6 b9		      DEC	Player0X
    633  f2af		       4c c1 f2 	      JMP	StoreHMove	; Cannot move left and right...
    634  f2b2				   SkipMoveLeft
    635  f2b2				   BeginReadRight
    636  f2b2		       c0 36		      CPY	#PLAYER_0_MAX_X
    637  f2b4		       f0 0b		      BEQ	SkipMoveRight	; At max already
    638  f2b6		       a9 80		      LDA	#%10000000	;Right
    639  f2b8		       2c 80 02 	      BIT	SWCHA
    640  f2bb		       d0 04		      BNE	SkipMoveRight
    641  f2bd		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    642  f2bf		       e6 b9		      INC	Player0X
    643  f2c1				   SkipMoveRight
    644  f2c1				   StoreHMove
    645  f2c1		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    646  f2c3		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    647  f2c5
    648  f2c5				   DividePlayerSpeedBy4
    649  f2c5		       a5 8f		      LDA	Player0SpeedH
    650  f2c7		       0a		      ASL
    651  f2c8		       0a		      ASL
    652  f2c9		       0a		      ASL
    653  f2ca		       0a		      ASL
    654  f2cb		       0a		      ASL
    655  f2cc		       0a		      ASL
    656  f2cd		       85 b1		      STA	Tmp1
    657  f2cf		       a5 8e		      LDA	Player0SpeedL
    658  f2d1		       4a		      LSR
    659  f2d2		       4a		      LSR
    660  f2d3		       29 3f		      AND	#%00111111
    661  f2d5		       05 b1		      ORA	Tmp1
    662  f2d7		       85 b0		      STA	Tmp0	; Division Result
    663  f2d9
    664  f2d9				   CalculateParallax1Offset		; 7/8 speed
    665  f2d9		       38		      SEC
    666  f2da		       a5 8e		      LDA	Player0SpeedL
    667  f2dc		       e5 b0		      SBC	Tmp0
    668  f2de		       85 b2		      STA	Tmp2
    669  f2e0		       a5 8f		      LDA	Player0SpeedH
    670  f2e2		       e9 00		      SBC	#0
    671  f2e4		       85 b3		      STA	Tmp3
    672  f2e6
    673  f2e6		       18		      CLC
    674  f2e7		       a5 c6		      LDA	ParallaxOffset1
    675  f2e9		       65 b2		      ADC	Tmp2
    676  f2eb		       85 c6		      STA	ParallaxOffset1
    677  f2ed		       a5 c7		      LDA	ParallaxOffset1 + 1
    678  f2ef		       65 b3		      ADC	Tmp3
    679  f2f1		       85 c7		      STA	ParallaxOffset1 + 1
    680  f2f3
    681  f2f3				   CalculateParallax2Offset		; 6/8 speed
    682  f2f3		       38		      SEC
    683  f2f4		       a5 b2		      LDA	Tmp2
    684  f2f6		       e5 b0		      SBC	Tmp0
    685  f2f8		       85 b2		      STA	Tmp2
    686  f2fa		       a5 b3		      LDA	Tmp3
    687  f2fc		       e9 00		      SBC	#0
    688  f2fe		       85 b3		      STA	Tmp3
    689  f300
    690  f300		       18		      CLC
    691  f301		       a5 c8		      LDA	ParallaxOffset2
    692  f303		       65 b2		      ADC	Tmp2
    693  f305		       85 c8		      STA	ParallaxOffset2
    694  f307		       a5 c9		      LDA	ParallaxOffset2 + 1
    695  f309		       65 b3		      ADC	Tmp3
    696  f30b		       85 c9		      STA	ParallaxOffset2 + 1
    697  f30d
    698  f30d				   SkipUpdateLogic		; Continue here if not paused
    699  f30d
    700  f30d
    701  f30d				   ProcessBorder		;Can be optimized (probably)
    702  f30d		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    703  f30f		       a5 88		      LDA	ParallaxMode
    704  f311		       c9 70		      CMP	#%01110000
    705  f313		       f0 1a		      BEQ	HorizontalParallaxMode
    706  f315		       c9 d0		      CMP	#%11010000
    707  f317		       f0 0a		      BEQ	VerticalParallaxMode
    708  f319		       c9 b0		      CMP	#%10110000
    709  f31b		       f0 0c		      BEQ	TachometerMode
    710  f31d
    711  f31d				   DefaultBorderMode
    712  f31d		       20 a9 f7 	      JSR	DefaultBorderLoop
    713  f320		       4c 32 f3 	      JMP	EndProcessingBorder
    714  f323				   VerticalParallaxMode
    715  f323		       20 18 f8 	      JSR	VerticalParallaxLoop
    716  f326		       4c 32 f3 	      JMP	EndProcessingBorder
    717  f329				   TachometerMode
    718  f329		       20 c4 f7 	      JSR	PrepareTachometerBorderLoop
    719  f32c		       4c 32 f3 	      JMP	EndProcessingBorder
    720  f32f				   HorizontalParallaxMode
    721  f32f		       20 5b f7 	      JSR	HorizontalParallaxLoop
    722  f332
    723  f332				   EndProcessingBorder
    724  f332
    725  f332				   ProcessScoreFontColor
    726  f332		       a6 d6		      LDX	ScoreFontColorHoldChange
    727  f334		       f0 06		      BEQ	ResetScoreFontColor
    728  f336		       ca		      DEX
    729  f337		       86 d6		      STX	ScoreFontColorHoldChange
    730  f339		       4c 40 f3 	      JMP	SkipScoreFontColor
    731  f33c				   ResetScoreFontColor
    732  f33c		       a9 f9		      LDA	#SCORE_FONT_COLOR
    733  f33e		       85 d5		      STA	ScoreFontColor
    734  f340				   SkipScoreFontColor
    735  f340
    736  f340				   IsGameOver
    737  f340		       a5 ba		      LDA	CountdownTimer
    738  f342		       05 8e		      ORA	Player0SpeedL
    739  f344		       05 8f		      ORA	Player0SpeedH
    740  f346		       d0 0b		      BNE	IsCheckpoint
    741  f348		       a9 01		      LDA	#1
    742  f34a		       85 d6		      STA	ScoreFontColorHoldChange
    743  f34c		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    744  f34e		       85 d5		      STA	ScoreFontColor
    745  f350		       4c 94 f3 	      JMP	SkipIsTimeOver
    746  f353
    747  f353				   IsCheckpoint
    748  f353		       a5 d7		      LDA	NextCheckpoint
    749  f355		       c5 92		      CMP	TrafficOffset0 + 2
    750  f357		       d0 2f		      BNE	SkipIsCheckpoint
    751  f359		       18		      CLC
    752  f35a		       69 10		      ADC	#CHECKPOINT_INTERVAL
    753  f35c		       85 d7		      STA	NextCheckpoint
    754  f35e		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    755  f360		       85 d5		      STA	ScoreFontColor
    756  f362		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    757  f364		       85 d6		      STA	ScoreFontColorHoldChange
    758  f366				   AddCheckpointBcd
    759  f366		       f8		      SED		;2
    760  f367		       18		      CLC		;2
    761  f368		       a5 a4		      LDA	CheckpointBcd0	;3
    762  f36a		       69 01		      ADC	#1	;3
    763  f36c		       85 a4		      STA	CheckpointBcd0	;3
    764  f36e		       a5 a5		      LDA	CheckpointBcd1	;3
    765  f370		       69 00		      ADC	#0	;2
    766  f372		       85 a5		      STA	CheckpointBcd1	;3
    767  f374		       d8		      CLD		;2
    768  f375				   EndCheckpointBcd
    769  f375		       a5 ba		      LDA	CountdownTimer
    770  f377		       18		      CLC
    771  f378		       65 c2		      ADC	CheckpointTime
    772  f37a		       85 ba		      STA	CountdownTimer
    773  f37c		       90 04		      BCC	JumpSkipTimeOver
    774  f37e		       a9 ff		      LDA	#$FF
    775  f380		       85 ba		      STA	CountdownTimer	; Does not overflow!
    776  f382				   JumpSkipTimeOver
    777  f382		       20 d3 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    778  f385		       4c 94 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    779  f388				   SkipIsCheckpoint
    780  f388
    781  f388				   IsTimeOver
    782  f388		       a5 ba		      LDA	CountdownTimer
    783  f38a		       d0 08		      BNE	SkipIsTimeOver
    784  f38c		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    785  f38e		       85 d6		      STA	ScoreFontColorHoldChange
    786  f390		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    787  f392		       85 d5		      STA	ScoreFontColor
    788  f394				   SkipIsTimeOver
    789  f394
    790  f394				   PrintEasterEggCondition
    791  f394		       a5 8d		      LDA	FrameCount1
    792  f396		       29 38		      AND	#%00111000
    793  f398		       05 c0		      ORA	GameStatus
    794  f39a		       c9 38		      CMP	#%00111000
    795  f39c		       d0 06		      BNE	ChooseTextSide
    796  f39e		       20 6c f8 	      JSR	PrintEasterEgg
    797  f3a1		       4c 98 f4 	      JMP	RightScoreWriteEnd
    798  f3a4
    799  f3a4							;Could be done during on vblank to save this comparisson time (before draw score), 
    800  f3a4							;but I am saving vblank cycles for now, in case of 2 players.
    801  f3a4				   ChooseTextSide		; 
    802  f3a4		       a5 8c		      LDA	FrameCount0	;3
    803  f3a6		       29 01		      AND	#%00000001	;2
    804  f3a8		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    805  f3aa		       4c 2e f4 	      JMP	RightScoreWrite
    806  f3ad
    807  f3ad				   LeftScoreWrite
    808  f3ad		       a5 d5		      LDA	ScoreFontColor
    809  f3af		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    810  f3b1		       f0 4e		      BEQ	PrintCheckpoint
    811  f3b3		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    812  f3b5		       f0 52		      BEQ	PrintStartGame
    813  f3b7		       a5 c0		      LDA	GameStatus
    814  f3b9		       f0 56		      BEQ	PrintHellwayLeft
    815  f3bb				   WriteDistance		;Not optimized yet, ugly code.
    816  f3bb				   Digit0Distance
    817  f3bb		       a5 91		      LDA	TrafficOffset0 + 1	;3
    818  f3bd		       4a		      LSR		; 2
    819  f3be		       4a		      LSR		; 2
    820  f3bf		       4a		      LSR		; 2
    821  f3c0		       4a		      LSR		; 2
    822  f3c1		       aa		      TAX		; 2
    823  f3c2		       bd be fd 	      LDA	FontLookup,X	;4
    824  f3c5		       85 d3		      STA	ScoreD3	;3
    825  f3c7
    826  f3c7				   Digit1Distance
    827  f3c7		       a5 92		      LDA	TrafficOffset0 + 2	;3
    828  f3c9		       29 0f		      AND	#%00001111	;2
    829  f3cb		       aa		      TAX		; 2
    830  f3cc		       bd be fd 	      LDA	FontLookup,X	;4 
    831  f3cf		       85 d2		      STA	ScoreD2	;3
    832  f3d1
    833  f3d1				   Digit2Distance
    834  f3d1		       a5 92		      LDA	TrafficOffset0 + 2	;3
    835  f3d3		       4a		      LSR		; 2
    836  f3d4		       4a		      LSR		; 2
    837  f3d5		       4a		      LSR		; 2
    838  f3d6		       4a		      LSR		; 2
    839  f3d7		       aa		      TAX		; 2
    840  f3d8		       bd be fd 	      LDA	FontLookup,X	;4
    841  f3db		       85 d1		      STA	ScoreD1	;3
    842  f3dd
    843  f3dd				   Digit3Distance
    844  f3dd		       a5 bb		      LDA	Traffic0Msb	;3
    845  f3df		       29 0f		      AND	#%00001111	;2
    846  f3e1		       aa		      TAX		; 2
    847  f3e2		       bd be fd 	      LDA	FontLookup,X	;4 
    848  f3e5		       85 d0		      STA	ScoreD0	;3
    849  f3e7
    850  f3e7				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    851  f3e7		       a5 bb		      LDA	Traffic0Msb
    852  f3e9		       29 f0		      AND	#%11110000	;2
    853  f3eb		       d0 07		      BNE	DrawDistanceExtraDigit
    854  f3ed		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    855  f3ef		       85 d4		      STA	ScoreD4	;3
    856  f3f1		       4c fe f3 	      JMP	EndDrawDistance
    857  f3f4				   DrawDistanceExtraDigit
    858  f3f4		       4a		      LSR		; 2
    859  f3f5		       4a		      LSR		; 2
    860  f3f6		       4a		      LSR		; 2
    861  f3f7		       4a		      LSR		; 2
    862  f3f8		       aa		      TAX		; 2
    863  f3f9		       bd be fd 	      LDA	FontLookup,X	;4
    864  f3fc		       85 d4		      STA	ScoreD4	;3
    865  f3fe
    866  f3fe				   EndDrawDistance
    867  f3fe		       4c 98 f4 	      JMP	RightScoreWriteEnd	;3
    868  f401
    869  f401				   PrintCheckpoint
    870  f401		       a2 00		      LDX	#<CheckpointText
    871  f403		       20 3d f7 	      JSR	PrintStaticText
    872  f406		       4c 98 f4 	      JMP	RightScoreWriteEnd	;3
    873  f409				   PrintStartGame
    874  f409		       a2 23		      LDX	#<GoText
    875  f40b		       20 3d f7 	      JSR	PrintStaticText
    876  f40e		       4c 98 f4 	      JMP	RightScoreWriteEnd	;3
    877  f411
    878  f411				   PrintHellwayLeft
    879  f411		       a5 8d		      LDA	FrameCount1
    880  f413		       29 01		      AND	#1
    881  f415		       d0 05		      BNE	PrintCreditsLeft
    882  f417		       a2 05		      LDX	#<HellwayLeftText
    883  f419		       4c 1e f4 	      JMP	PrintGameMode
    884  f41c				   PrintCreditsLeft
    885  f41c		       a2 0f		      LDX	#<OpbText
    886  f41e
    887  f41e				   PrintGameMode
    888  f41e		       20 3d f7 	      JSR	PrintStaticText
    889  f421		       a5 c5		      LDA	GameMode
    890  f423		       29 0f		      AND	#%00001111
    891  f425		       aa		      TAX		; 2
    892  f426		       bd be fd 	      LDA	FontLookup,X	;4 
    893  f429		       85 d0		      STA	ScoreD0	;3
    894  f42b		       4c 98 f4 	      JMP	RightScoreWriteEnd	;3
    895  f42e
    896  f42e				   RightScoreWrite
    897  f42e		       a5 c0		      LDA	GameStatus
    898  f430		       f0 45		      BEQ	PrintHellwayRight
    899  f432		       a5 d5		      LDA	ScoreFontColor
    900  f434		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    901  f436		       f0 52		      BEQ	PrintGameOver
    902  f438				   Digit0Timer
    903  f438		       a5 ba		      LDA	CountdownTimer	;3
    904  f43a		       29 0f		      AND	#%00001111	;2
    905  f43c		       aa		      TAX		; 2
    906  f43d		       bd be fd 	      LDA	FontLookup,X	;4 
    907  f440		       85 d1		      STA	ScoreD1	;3
    908  f442
    909  f442				   Digit1Timer
    910  f442		       a5 ba		      LDA	CountdownTimer	;3
    911  f444		       4a		      LSR		; 2
    912  f445		       4a		      LSR		; 2
    913  f446		       4a		      LSR		; 2
    914  f447		       4a		      LSR		; 2
    915  f448		       aa		      TAX		; 2
    916  f449		       bd be fd 	      LDA	FontLookup,X	;4
    917  f44c		       85 d0		      STA	ScoreD0	;3
    918  f44e
    919  f44e		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    920  f450		       85 d2		      STA	ScoreD2	;3
    921  f452
    922  f452				   Digit0Speed
    923  f452		       a5 8e		      LDA	Player0SpeedL
    924  f454		       29 3c		      AND	#%00111100	;2 Discard the last bits
    925  f456		       4a		      LSR		; 2
    926  f457		       4a		      LSR		; 2
    927  f458		       aa		      TAX		; 2
    928  f459		       bd be fd 	      LDA	FontLookup,X	;4
    929  f45c		       85 d4		      STA	ScoreD4	;3
    930  f45e
    931  f45e				   Digit1Speed
    932  f45e		       a5 8e		      LDA	Player0SpeedL
    933  f460		       29 c0		      AND	#%11000000	;2 Discard the last bits
    934  f462		       18		      CLC
    935  f463		       2a		      ROL		;First goes into carry
    936  f464		       2a		      ROL
    937  f465		       2a		      ROL
    938  f466		       85 b0		      STA	Tmp0
    939  f468		       a5 8f		      LDA	Player0SpeedH
    940  f46a		       0a		      ASL
    941  f46b		       0a		      ASL
    942  f46c		       05 b0		      ORA	Tmp0
    943  f46e		       aa		      TAX		; 2
    944  f46f		       bd be fd 	      LDA	FontLookup,X	;4
    945  f472		       85 d3		      STA	ScoreD3	;3
    946  f474		       4c 98 f4 	      JMP	RightScoreWriteEnd
    947  f477
    948  f477				   PrintHellwayRight
    949  f477		       a5 8d		      LDA	FrameCount1
    950  f479		       29 01		      AND	#1
    951  f47b		       d0 05		      BNE	PrintCreditsRight
    952  f47d		       a2 0a		      LDX	#<HellwayRightText
    953  f47f		       4c 84 f4 	      JMP	PrintRightIntro
    954  f482				   PrintCreditsRight
    955  f482		       a2 14		      LDX	#<YearText
    956  f484				   PrintRightIntro
    957  f484		       20 3d f7 	      JSR	PrintStaticText
    958  f487		       4c 98 f4 	      JMP	RightScoreWriteEnd
    959  f48a				   PrintGameOver
    960  f48a		       a5 8c		      LDA	FrameCount0
    961  f48c		       30 05		      BMI	PrintOverText
    962  f48e		       a2 19		      LDX	#<GameText
    963  f490		       4c 95 f4 	      JMP	StoreGameOverText
    964  f493				   PrintOverText
    965  f493		       a2 1e		      LDX	#<OverText
    966  f495				   StoreGameOverText
    967  f495		       20 3d f7 	      JSR	PrintStaticText
    968  f498				   RightScoreWriteEnd
    969  f498
    970  f498
    971  f498				   ScoreBackgroundColor
    972  f498		       a2 00		      LDX	#0
    973  f49a		       ad 82 02 	      LDA	SWCHB
    974  f49d		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    975  f49f		       f0 04		      BEQ	BlackAndWhiteScoreBg
    976  f4a1		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    977  f4a3		       a2 03		      LDX	#BACKGROUND_COLOR
    978  f4a5				   BlackAndWhiteScoreBg
    979  f4a5		       85 b2		      STA	Tmp2	; Score Background
    980  f4a7		       86 b3		      STX	Tmp3	; Traffic Background
    981  f4a9
    982  f4a9				   ConfigurePFForScore
    983  f4a9							;LDA #SCORE_BACKGROUND_COLOR; Done above
    984  f4a9		       85 09		      STA	COLUBK
    985  f4ab		       20 95 f6 	      JSR	ClearAll
    986  f4ae		       a9 02		      LDA	#%00000010	; Score mode
    987  f4b0		       85 0a		      STA	CTRLPF
    988  f4b2		       a5 8c		      LDA	FrameCount0	;3
    989  f4b4		       29 01		      AND	#%00000001	;2
    990  f4b6		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    991  f4b8				   LeftScoreOn
    992  f4b8		       a5 d5		      LDA	ScoreFontColor
    993  f4ba		       85 07		      STA	COLUP1
    994  f4bc		       a5 b2		      LDA	Tmp2
    995  f4be		       85 06		      STA	COLUP0
    996  f4c0		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    997  f4c2		       85 b1		      STA	Tmp1
    998  f4c4		       4c d3 f4 	      JMP	WaitForVblankEnd
    999  f4c7				   RightScoreOn
   1000  f4c7		       a5 d5		      LDA	ScoreFontColor
   1001  f4c9		       85 06		      STA	COLUP0
   1002  f4cb		       a5 b2		      LDA	Tmp2
   1003  f4cd		       85 07		      STA	COLUP1
   1004  f4cf		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1005  f4d1		       85 b1		      STA	Tmp1
   1006  f4d3
   1007  f4d3							; After here we are going to update the screen, No more heavy code
   1008  f4d3				   WaitForVblankEnd
   1009  f4d3		       ad 84 02 	      LDA	INTIM
   1010  f4d6		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
   1011  f4d8		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline? 
   1012  f4da		       85 01		      STA	VBLANK
   1013  f4dc
   1014  f4dc				   DrawScoreHud
   1015  f4dc		       20 de f8 	      JSR	PrintScore
   1016  f4df
   1017  f4df		       85 02		      STA	WSYNC
   1018  f4e1
   1019  f4e1		       a5 0c		      LDA	INPT4	;3
   1020  f4e3		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1021  f4e5		       a5 d5		      LDA	ScoreFontColor
   1022  f4e7		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1023  f4e9		       d0 0c		      BNE	WaitAnotherScoreLine
   1024  f4eb		       a5 8c		      LDA	FrameCount0	;3
   1025  f4ed		       29 01		      AND	#%00000001	;2
   1026  f4ef		       f0 03		      BEQ	LeftScoreOnGameOver
   1027  f4f1		       4c 65 fa 	      JMP	DrawGameOverScreenRight
   1028  f4f4				   LeftScoreOnGameOver
   1029  f4f4		       4c 9b f9 	      JMP	DrawGameOverScreenLeft
   1030  f4f7
   1031  f4f7				   WaitAnotherScoreLine
   1032  f4f7		       85 02		      STA	WSYNC
   1033  f4f9
   1034  f4f9				   PrepareForTraffic
   1035  f4f9		       20 a7 f6 	      JSR	ClearPF	; 32
   1036  f4fc
   1037  f4fc		       a9 31		      LDA	#%00110001	; Score mode
   1038  f4fe		       85 0a		      STA	CTRLPF
   1039  f500
   1040  f500		       a5 c3		      LDA	TrafficColor	;2
   1041  f502		       85 08		      STA	COLUPF
   1042  f504
   1043  f504		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1044  f506		       85 07		      STA	COLUP1	;3
   1045  f508
   1046  f508		       a5 d5		      LDA	ScoreFontColor	;3
   1047  f50a		       85 06		      STA	COLUP0	;3
   1048  f50c
   1049  f50c		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1050  f50e
   1051  f50e		       85 02		      STA	WSYNC
   1052  f510		       85 02		      STA	WSYNC
   1053  f512
   1054  f512							;main scanline loop...
   1055  f512				   ScanLoop
   1056  f512		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1057  f514
   1058  f514							;Start of next line!			
   1059  f514				   DrawCache		;63 Is the last line going to the top of the next frame?
   1060  f514							;Supper wastefull, but I had 17 cycles, This only avoids the score line to finish a litle earlier...
   1061  f514		       a5 b3		      LDA	Tmp3	;3
   1062  f516		       85 09		      STA	COLUBK	;3
   1063  f518
   1064  f518		       a5 81		      LDA	PF0Cache	;3
   1065  f51a		       85 0d		      STA	PF0	;3
   1066  f51c
   1067  f51c		       b9 7d ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
   1068  f51f		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1069  f521
   1070  f521		       a5 82		      LDA	PF1Cache	;3
   1071  f523		       85 0e		      STA	PF1	;3
   1072  f525
   1073  f525		       a5 84		      LDA	GRP1Cache	;3
   1074  f527		       85 1c		      STA	GRP1	;3
   1075  f529
   1076  f529		       a5 85		      LDA	ENABLCache	;3
   1077  f52b		       85 1f		      STA	ENABL	;3
   1078  f52d
   1079  f52d		       a5 86		      LDA	ENAM0Cache	;3
   1080  f52f		       85 1d		      STA	ENAM0	;3
   1081  f531
   1082  f531		       a5 87		      LDA	ENAM1Cache	;3
   1083  f533		       85 1e		      STA	ENAM1	;3
   1084  f535
   1085  f535		       a9 00		      LDA	#0	;2
   1086  f537							;STA PF1Cache ;3
   1087  f537		       85 84		      STA	GRP1Cache	;3
   1088  f539		       85 85		      STA	ENABLCache	;3
   1089  f53b		       85 86		      STA	ENAM0Cache	;3
   1090  f53d		       85 87		      STA	ENAM1Cache	; 3
   1091  f53f
   1092  f53f							;BEQ DrawTraffic3
   1093  f53f				   DrawTraffic1 		; 33
   1094  f53f		       98		      TYA		; 2
   1095  f540		       18		      CLC		; 2 
   1096  f541		       65 95		      ADC	TrafficOffset1 + 1	;3
   1097  f543		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1098  f545		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1099  f547		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1100  f549		       4c 4e f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1101  f54c				   EorOffsetWithCarry
   1102  f54c		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1103  f54e				   AfterEorOffsetWithCarry		;17
   1104  f54e		       aa		      TAX		;2
   1105  f54f		       bd 00 fe 	      LDA	AesTable,X	; 4
   1106  f552		       c5 c1		      CMP	TrafficChance	;3
   1107  f554		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1108  f556		       a9 ff		      LDA	#$FF	;2
   1109  f558		       85 84		      STA	GRP1Cache	;3
   1110  f55a				   FinishDrawTraffic1
   1111  f55a
   1112  f55a				   DrawTraffic2 		; 33
   1113  f55a		       98		      TYA		; 2
   1114  f55b		       18		      CLC		; 2 
   1115  f55c		       65 99		      ADC	TrafficOffset2 + 1	;3
   1116  f55e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1117  f560		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1118  f562		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1119  f564		       4c 69 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1120  f567				   EorOffsetWithCarry2
   1121  f567		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1122  f569				   AfterEorOffsetWithCarry2		;17
   1123  f569		       aa		      TAX		;2
   1124  f56a		       bd 00 fe 	      LDA	AesTable,X	; 4
   1125  f56d		       c5 c1		      CMP	TrafficChance	;3
   1126  f56f		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1127  f571		       a9 02		      LDA	#%00000010	;2
   1128  f573		       85 85		      STA	ENABLCache	;3
   1129  f575				   FinishDrawTraffic2
   1130  f575
   1131  f575							;STA WSYNC ;65 / 137
   1132  f575
   1133  f575							; LDA Tmp0 ; Flicker this line if drawing car
   1134  f575							; BEQ FinishDrawTraffic4
   1135  f575				   DrawTraffic3 		; 33
   1136  f575		       98		      TYA		; 2
   1137  f576		       18		      CLC		; 2 
   1138  f577		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1139  f579		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1140  f57b		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1141  f57d		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1142  f57f		       4c 84 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1143  f582				   EorOffsetWithCarry3
   1144  f582		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1145  f584				   AfterEorOffsetWithCarry3		;17
   1146  f584		       aa		      TAX		;2
   1147  f585		       bd 00 fe 	      LDA	AesTable,X	; 4
   1148  f588		       c5 c1		      CMP	TrafficChance	;3
   1149  f58a		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1150  f58c		       a9 02		      LDA	#%00000010	;2
   1151  f58e		       85 86		      STA	ENAM0Cache
   1152  f590				   FinishDrawTraffic3
   1153  f590
   1154  f590				   DrawTraffic4 		; 33
   1155  f590		       98		      TYA		; 2
   1156  f591		       18		      CLC		; 2 
   1157  f592		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1158  f594		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1159  f596		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1160  f598		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1161  f59a		       4c 9f f5 	      JMP	AfterEorOffsetWithCarry4	; 3
   1162  f59d				   EorOffsetWithCarry4
   1163  f59d		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1164  f59f				   AfterEorOffsetWithCarry4		;17
   1165  f59f		       aa		      TAX		;2
   1166  f5a0		       bd 00 fe 	      LDA	AesTable,X	; 4
   1167  f5a3		       c5 c1		      CMP	TrafficChance	;3
   1168  f5a5		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1169  f5a7		       a9 02		      LDA	#%00000010	;2
   1170  f5a9		       85 87		      STA	ENAM1Cache	;3
   1171  f5ab				   FinishDrawTraffic4
   1172  f5ab
   1173  f5ab				   DrawTraffic0 		; 15
   1174  f5ab		       98		      TYA		;2
   1175  f5ac		       29 07		      AND	#%00000111	;2
   1176  f5ae		       aa		      TAX		;2
   1177  f5af		       b5 d8		      LDA	ParallaxCache,X	;4
   1178  f5b1		       85 82		      STA	PF1Cache	;3
   1179  f5b3		       b5 f0		      LDA	ParallaxCache2,X	;4
   1180  f5b5		       85 81		      STA	PF0Cache	;3
   1181  f5b7
   1182  f5b7				   SkipDrawTraffic0
   1183  f5b7
   1184  f5b7				   WhileScanLoop
   1185  f5b7		       88		      DEY		;2
   1186  f5b8		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1187  f5ba		       4c 12 f5 	      JMP	ScanLoop	;3
   1188  f5bd				   FinishScanLoop		; 7 209 of 222
   1189  f5bd
   1190  f5bd		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1191  f5bf		       20 b6 f6 	      JSR	LoadAll
   1192  f5c2		       85 02		      STA	WSYNC	; do stuff!
   1193  f5c4		       85 02		      STA	WSYNC
   1194  f5c6		       85 02		      STA	WSYNC
   1195  f5c8							;42 cycles to use here
   1196  f5c8
   1197  f5c8				   PrepareOverscan
   1198  f5c8		       a9 02		      LDA	#2
   1199  f5ca		       85 02		      STA	WSYNC
   1200  f5cc		       85 01		      STA	VBLANK
   1201  f5ce
   1202  f5ce		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1203  f5d0		       8d 96 02 	      STA	TIM64T
   1204  f5d3
   1205  f5d3				   LeftSound		;58
   1206  f5d3		       a5 ba		      LDA	CountdownTimer	;3
   1207  f5d5		       f0 24		      BEQ	EngineOff	;2
   1208  f5d7		       a5 8e		      LDA	Player0SpeedL	;3
   1209  f5d9		       29 80		      AND	#%10000000	;2
   1210  f5db		       05 8f		      ORA	Player0SpeedH	;3
   1211  f5dd		       18		      CLC		;2
   1212  f5de		       2a		      ROL		;2
   1213  f5df		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1214  f5e1		       aa		      TAX		;2
   1215  f5e2		       a5 8e		      LDA	Player0SpeedL	;3
   1216  f5e4		       4a		      LSR		;2
   1217  f5e5		       4a		      LSR		;2
   1218  f5e6		       4a		      LSR		;2
   1219  f5e7		       29 0f		      AND	#%00001111	;2
   1220  f5e9		       85 b0		      STA	Tmp0	;3
   1221  f5eb		       bd d4 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1222  f5ee		       38		      SEC		;2
   1223  f5ef		       e5 b0		      SBC	Tmp0	;3
   1224  f5f1		       85 17		      STA	AUDF0	;3
   1225  f5f3		       bd ce fd 	      LDA	EngineSoundType,X	;4
   1226  f5f6		       85 15		      STA	AUDC0	;3
   1227  f5f8		       4c ff f5 	      JMP	EndLeftSound	;3
   1228  f5fb				   EngineOff
   1229  f5fb		       a9 00		      LDA	#0
   1230  f5fd		       85 15		      STA	AUDC0
   1231  f5ff
   1232  f5ff				   EndLeftSound
   1233  f5ff
   1234  f5ff
   1235  f5ff				   RightSound		; 56 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1236  f5ff		       a5 d5		      LDA	ScoreFontColor	;3
   1237  f601		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1238  f603		       f0 4a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1239  f605		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1240  f607		       f0 21		      BEQ	PlayCheckpoint	;2
   1241  f609		       a5 b8		      LDA	CollisionCounter	;3
   1242  f60b		       c9 e0		      CMP	#$E0	;2
   1243  f60d		       b0 0c		      BCS	PlayColision	;2
   1244  f60f		       a5 d7		      LDA	NextCheckpoint	;3
   1245  f611		       38		      SEC		;2
   1246  f612		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1247  f614		       c9 02		      CMP	#$02	;2
   1248  f616		       90 24		      BCC	PlayBeforeCheckpoint	;4
   1249  f618		       4c 4f f6 	      JMP	MuteRightSound
   1250  f61b				   PlayColision
   1251  f61b		       a9 1f		      LDA	#31
   1252  f61d		       85 18		      STA	AUDF1
   1253  f61f		       a9 08		      LDA	#8
   1254  f621		       85 16		      STA	AUDC1
   1255  f623		       a9 08		      LDA	#8
   1256  f625		       85 1a		      STA	AUDV1
   1257  f627		       4c 53 f6 	      JMP	EndRightSound
   1258  f62a
   1259  f62a				   PlayCheckpoint
   1260  f62a		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1261  f62c		       4a		      LSR		;2
   1262  f62d		       4a		      LSR		;2
   1263  f62e		       4a		      LSR		;2
   1264  f62f		       85 18		      STA	AUDF1	;3
   1265  f631		       a9 0c		      LDA	#12	;2
   1266  f633		       85 16		      STA	AUDC1	;3
   1267  f635		       a9 06		      LDA	#6	;2
   1268  f637		       85 1a		      STA	AUDV1	;3
   1269  f639		       4c 53 f6 	      JMP	EndRightSound	;3
   1270  f63c
   1271  f63c				   PlayBeforeCheckpoint
   1272  f63c		       a5 8c		      LDA	FrameCount0	;3
   1273  f63e		       29 1c		      AND	#%00011100	;2
   1274  f640		       09 03		      ORA	#%00000011	;2
   1275  f642		       85 18		      STA	AUDF1	;3
   1276  f644		       a9 0c		      LDA	#12	;2
   1277  f646		       85 16		      STA	AUDC1	;3
   1278  f648		       a9 03		      LDA	#3	;2
   1279  f64a		       85 1a		      STA	AUDV1	;3
   1280  f64c		       4c 53 f6 	      JMP	EndRightSound	;3
   1281  f64f
   1282  f64f				   MuteRightSound
   1283  f64f		       a9 00		      LDA	#0
   1284  f651		       85 1a		      STA	AUDV1
   1285  f653				   EndRightSound
   1286  f653
   1287  f653				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1288  f653		       a5 c0		      LDA	GameStatus	;3
   1289  f655		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1290  f657		       a5 d5		      LDA	ScoreFontColor	;3
   1291  f659		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1292  f65b		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1293  f65d		       c6 cf		      DEC	OneSecondConter	;5
   1294  f65f		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1295  f661
   1296  f661		       f8		      SED		;2 BCD Operations after this point
   1297  f662				   CountGlideTimeBcd
   1298  f662		       a5 d5		      LDA	ScoreFontColor	;3
   1299  f664		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1300  f666		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1301  f668		       18		      CLC		;2
   1302  f669		       a5 cd		      LDA	GlideTimeBcd0	;3
   1303  f66b		       69 01		      ADC	#1	;3
   1304  f66d		       85 cd		      STA	GlideTimeBcd0	;3
   1305  f66f		       a5 ce		      LDA	GlideTimeBcd1	;3
   1306  f671		       69 00		      ADC	#0	;2
   1307  f673		       85 ce		      STA	GlideTimeBcd1	;3
   1308  f675				   EndCountGlideTimeBcd
   1309  f675				   IncreaseTotalTimerBcd
   1310  f675		       18		      CLC		;2
   1311  f676		       a5 bd		      LDA	TimeBcd0	;3
   1312  f678		       69 01		      ADC	#1	;2
   1313  f67a		       85 bd		      STA	TimeBcd0	;3
   1314  f67c		       a5 be		      LDA	TimeBcd1	;3
   1315  f67e		       69 00		      ADC	#0	;2
   1316  f680		       85 be		      STA	TimeBcd1	;3
   1317  f682		       a5 bf		      LDA	TimeBcd2	;3
   1318  f684		       69 00		      ADC	#0	;2
   1319  f686		       85 bf		      STA	TimeBcd2	;3
   1320  f688
   1321  f688				   ResetOneSecondCounter
   1322  f688		       d8		      CLD		;2
   1323  f689		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1324  f68b		       85 cf		      STA	OneSecondConter	;3
   1325  f68d
   1326  f68d				   EndExactlyEverySecond
   1327  f68d
   1328  f68d				   OverScanWait
   1329  f68d		       ad 84 02 	      LDA	INTIM
   1330  f690		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1331  f692		       4c 8a f0 	      JMP	MainLoop
   1332  f695
   1333  f695				   Subroutines
   1334  f695
   1335  f695				   ClearAll		; 52
   1336  f695		       a9 00		      LDA	#0	;2
   1337  f697		       85 1c		      STA	GRP1	;3
   1338  f699		       85 1f		      STA	ENABL	;3
   1339  f69b		       85 1d		      STA	ENAM0	;3
   1340  f69d		       85 1e		      STA	ENAM1	;3
   1341  f69f		       85 84		      STA	GRP1Cache	;3
   1342  f6a1		       85 85		      STA	ENABLCache	;3
   1343  f6a3		       85 86		      STA	ENAM0Cache	;3
   1344  f6a5		       85 87		      STA	ENAM1Cache	;3
   1345  f6a7
   1346  f6a7				   ClearPF		; 26
   1347  f6a7		       a9 00		      LDA	#0	;2
   1348  f6a9				   ClearPFSkipLDA0
   1349  f6a9		       85 0d		      STA	PF0	;3
   1350  f6ab		       85 0e		      STA	PF1	;3
   1351  f6ad		       85 0f		      STA	PF2	;3	
   1352  f6af		       85 81		      STA	PF0Cache	;3
   1353  f6b1		       85 82		      STA	PF1Cache	;3
   1354  f6b3		       85 83		      STA	PF2Cache	;3 
   1355  f6b5		       60		      RTS		;6
   1356  f6b6				   EndClearAll
   1357  f6b6
   1358  f6b6				   LoadAll		; 48
   1359  f6b6		       a5 81		      LDA	PF0Cache	;3
   1360  f6b8		       85 0d		      STA	PF0	;3
   1361  f6ba
   1362  f6ba		       a5 82		      LDA	PF1Cache	;3
   1363  f6bc		       85 0e		      STA	PF1	;3
   1364  f6be
   1365  f6be		       a5 83		      LDA	PF2Cache	;3
   1366  f6c0		       85 0f		      STA	PF2	;3
   1367  f6c2
   1368  f6c2		       a5 84		      LDA	GRP1Cache	;3
   1369  f6c4		       85 1c		      STA	GRP1	;3
   1370  f6c6
   1371  f6c6		       a5 85		      LDA	ENABLCache	;3
   1372  f6c8		       85 1f		      STA	ENABL	;3
   1373  f6ca
   1374  f6ca		       a5 86		      LDA	ENAM0Cache	;3
   1375  f6cc		       85 1d		      STA	ENAM0	;3
   1376  f6ce
   1377  f6ce		       a5 87		      LDA	ENAM1Cache	;3
   1378  f6d0		       85 1e		      STA	ENAM1	;3
   1379  f6d2
   1380  f6d2		       60		      RTS		;6
   1381  f6d3				   EndLoadAll
   1382  f6d3
   1383  f6d3				   NextDifficulty
   1384  f6d3		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1385  f6d5		       29 01		      AND	#%00000001
   1386  f6d7		       d0 3f		      BNE	CheckRandomDifficulty
   1387  f6d9
   1388  f6d9		       a5 c4		      LDA	CurrentDifficulty
   1389  f6db		       18		      CLC
   1390  f6dc		       69 01		      ADC	#1
   1391  f6de		       29 03		      AND	#%00000011	; 0 to 3
   1392  f6e0		       85 c4		      STA	CurrentDifficulty
   1393  f6e2
   1394  f6e2				   ConfigureDifficulty
   1395  f6e2		       a5 c4		      LDA	CurrentDifficulty
   1396  f6e4		       f0 0b		      BEQ	ConfigureLightTraffic
   1397  f6e6		       c9 01		      CMP	#1
   1398  f6e8		       f0 10		      BEQ	ConfigureRegularTraffic
   1399  f6ea		       c9 02		      CMP	#2
   1400  f6ec		       f0 15		      BEQ	ConfigureIntenseTraffic
   1401  f6ee		       4c 0c f7 	      JMP	ConfigureRushHourTraffic
   1402  f6f1
   1403  f6f1				   ConfigureLightTraffic
   1404  f6f1		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1405  f6f3		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1406  f6f5		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1407  f6f7		       4c 12 f7 	      JMP	StoreTrafficChance
   1408  f6fa				   ConfigureRegularTraffic
   1409  f6fa		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1410  f6fc		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1411  f6fe		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1412  f700		       4c 12 f7 	      JMP	StoreTrafficChance
   1413  f703				   ConfigureIntenseTraffic
   1414  f703		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1415  f705		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1416  f707		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1417  f709		       4c 12 f7 	      JMP	StoreTrafficChance
   1418  f70c				   ConfigureRushHourTraffic
   1419  f70c		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1420  f70e		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1421  f710		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1422  f712
   1423  f712				   StoreTrafficChance
   1424  f712		       86 c1		      STX	TrafficChance
   1425  f714		       84 c2		      STY	CheckpointTime
   1426  f716		       85 c3		      STA	TrafficColor
   1427  f718
   1428  f718				   CheckRandomDifficulty
   1429  f718		       a5 c5		      LDA	GameMode
   1430  f71a		       29 08		      AND	#%00001000	; Random difficulties
   1431  f71c		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1432  f71e				   RandomDificulty
   1433  f71e		       a6 8c		      LDX	FrameCount0
   1434  f720		       bd 00 fe 	      LDA	AesTable,X
   1435  f723		       45 c1		      EOR	TrafficChance
   1436  f725		       29 3f		      AND	#%00111111
   1437  f727		       85 c1		      STA	TrafficChance
   1438  f729
   1439  f729				   ReturnFromNextDifficulty
   1440  f729		       60		      RTS
   1441  f72a				   EndNextDifficulty
   1442  f72a
   1443  f72a				   DefaultOffsets
   1444  f72a		       a9 20		      LDA	#$20
   1445  f72c		       85 96		      STA	TrafficOffset1 + 2
   1446  f72e		       a9 40		      LDA	#$40
   1447  f730		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1448  f732		       a9 60		      LDA	#$60
   1449  f734		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1450  f736		       a9 80		      LDA	#$80
   1451  f738		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1452  f73a		       a9 a0		      LDA	#$A0
   1453  f73c		       60		      RTS
   1454  f73d
   1455  f73d				   PrintStaticText		; Preload X with the offset referent to StaticText
   1456  f73d		       bd 00 ff 	      LDA	StaticText,X
   1457  f740		       85 d0		      STA	ScoreD0
   1458  f742		       e8		      INX
   1459  f743		       bd 00 ff 	      LDA	StaticText,X
   1460  f746		       85 d1		      STA	ScoreD1
   1461  f748		       e8		      INX
   1462  f749		       bd 00 ff 	      LDA	StaticText,X
   1463  f74c		       85 d2		      STA	ScoreD2
   1464  f74e		       e8		      INX
   1465  f74f		       bd 00 ff 	      LDA	StaticText,X
   1466  f752		       85 d3		      STA	ScoreD3
   1467  f754		       e8		      INX
   1468  f755		       bd 00 ff 	      LDA	StaticText,X
   1469  f758		       85 d4		      STA	ScoreD4
   1470  f75a		       60		      RTS
   1471  f75b
   1472  f75b				   HorizontalParallaxLoop
   1473  f75b		       a9 ef		      LDA	#%11101111	; Clear the house
   1474  f75d		       39 d8 00 	      AND	ParallaxCache,Y
   1475  f760		       99 d8 00 	      STA	ParallaxCache,Y
   1476  f763				   CalculateParallax0
   1477  f763		       98		      TYA
   1478  f764		       18		      CLC
   1479  f765		       65 91		      ADC	TrafficOffset0 + 1
   1480  f767		       29 04		      AND	#%00000100
   1481  f769		       f0 08		      BEQ	HasEmptySpace0
   1482  f76b				   HasBorder0
   1483  f76b		       b9 d8 00 	      LDA	ParallaxCache,Y
   1484  f76e		       09 0f		      ORA	#%00001111
   1485  f770		       4c 78 f7 	      JMP	StoreParallax0
   1486  f773				   HasEmptySpace0
   1487  f773		       b9 d8 00 	      LDA	ParallaxCache,Y
   1488  f776		       29 f0		      AND	#%11110000
   1489  f778
   1490  f778				   StoreParallax0
   1491  f778		       99 d8 00 	      STA	ParallaxCache,Y
   1492  f77b
   1493  f77b				   CalculateParallax1
   1494  f77b		       98		      TYA
   1495  f77c		       18		      CLC
   1496  f77d		       65 c7		      ADC	ParallaxOffset1 + 1
   1497  f77f		       29 04		      AND	#%00000100
   1498  f781		       f0 08		      BEQ	HasEmptySpace1
   1499  f783				   HasBorder1
   1500  f783		       b9 d8 00 	      LDA	ParallaxCache,Y
   1501  f786		       09 e0		      ORA	#%11100000
   1502  f788		       4c 90 f7 	      JMP	StoreParallax1
   1503  f78b				   HasEmptySpace1
   1504  f78b		       b9 d8 00 	      LDA	ParallaxCache,Y
   1505  f78e		       29 1f		      AND	#%00011111
   1506  f790
   1507  f790				   StoreParallax1
   1508  f790		       99 d8 00 	      STA	ParallaxCache,Y
   1509  f793
   1510  f793				   CalculateParallax2
   1511  f793		       98		      TYA
   1512  f794		       18		      CLC
   1513  f795		       65 c9		      ADC	ParallaxOffset2 + 1
   1514  f797		       29 04		      AND	#%00000100
   1515  f799		       f0 05		      BEQ	HasEmptySpace2
   1516  f79b				   HasBorder2
   1517  f79b		       a9 60		      LDA	#%01100000
   1518  f79d		       4c a2 f7 	      JMP	StoreParallax2
   1519  f7a0				   HasEmptySpace2
   1520  f7a0		       a9 00		      LDA	#0
   1521  f7a2
   1522  f7a2				   StoreParallax2
   1523  f7a2		       99 f0 00 	      STA	ParallaxCache2,Y
   1524  f7a5
   1525  f7a5				   ContinueHorizontalParallaxLoop
   1526  f7a5		       88		      DEY
   1527  f7a6		       10 b3		      BPL	HorizontalParallaxLoop
   1528  f7a8		       60		      RTS
   1529  f7a9
   1530  f7a9				   DefaultBorderLoop
   1531  f7a9				   CalculateDefaultBorder
   1532  f7a9		       98		      TYA
   1533  f7aa		       18		      CLC
   1534  f7ab		       65 91		      ADC	TrafficOffset0 + 1
   1535  f7ad		       29 04		      AND	#%00000100
   1536  f7af		       f0 05		      BEQ	HasEmptySpace
   1537  f7b1				   HasBorder
   1538  f7b1		       a9 ff		      LDA	#$FF
   1539  f7b3		       4c b8 f7 	      JMP	StoreBorder
   1540  f7b6				   HasEmptySpace
   1541  f7b6		       a9 00		      LDA	#0
   1542  f7b8
   1543  f7b8				   StoreBorder
   1544  f7b8		       99 d8 00 	      STA	ParallaxCache,Y
   1545  f7bb		       a9 00		      LDA	#0
   1546  f7bd		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1547  f7c0
   1548  f7c0				   ContinueDefaultBorderLoop
   1549  f7c0		       88		      DEY
   1550  f7c1		       10 e6		      BPL	DefaultBorderLoop
   1551  f7c3		       60		      RTS
   1552  f7c4
   1553  f7c4				   PrepareTachometerBorderLoop
   1554  f7c4		       a5 8e		      LDA	Player0SpeedL
   1555  f7c6		       29 80		      AND	#%10000000
   1556  f7c8		       05 8f		      ORA	Player0SpeedH
   1557  f7ca		       18		      CLC
   1558  f7cb		       2a		      ROL
   1559  f7cc		       69 00		      ADC	#0
   1560  f7ce		       85 b0		      STA	Tmp0	; Gear
   1561  f7d0		       a5 8e		      LDA	Player0SpeedL
   1562  f7d2		       4a		      LSR
   1563  f7d3		       4a		      LSR
   1564  f7d4		       4a		      LSR
   1565  f7d5		       4a		      LSR
   1566  f7d6		       29 07		      AND	#%00000111
   1567  f7d8		       85 b1		      STA	Tmp1	; RPM
   1568  f7da
   1569  f7da				   TachometerBorderLoop
   1570  f7da		       98		      TYA
   1571  f7db		       18		      CLC
   1572  f7dc		       65 91		      ADC	TrafficOffset0 + 1
   1573  f7de		       29 04		      AND	#%00000100
   1574  f7e0		       f0 10		      BEQ	HasBorderTac
   1575  f7e2		       a6 b0		      LDX	Tmp0
   1576  f7e4		       bd ea fd 	      LDA	TachometerGearLookup,X
   1577  f7e7		       99 d8 00 	      STA	ParallaxCache,Y
   1578  f7ea		       a9 00		      LDA	#0
   1579  f7ec		       99 f0 00 	      STA	ParallaxCache2,Y
   1580  f7ef		       4c 14 f8 	      JMP	ContinueBorderTac
   1581  f7f2				   HasBorderTac
   1582  f7f2		       a9 05		      LDA	#5
   1583  f7f4		       c5 b0		      CMP	Tmp0	; Only on max speed
   1584  f7f6		       f0 11		      BEQ	FullBorderTac
   1585  f7f8		       a6 b1		      LDX	Tmp1
   1586  f7fa		       bd da fd 	      LDA	TachometerSizeLookup1,X
   1587  f7fd		       99 d8 00 	      STA	ParallaxCache,Y
   1588  f800		       bd e2 fd 	      LDA	TachometerSizeLookup2,X
   1589  f803		       99 f0 00 	      STA	ParallaxCache2,Y
   1590  f806		       4c 14 f8 	      JMP	ContinueBorderTac
   1591  f809
   1592  f809				   FullBorderTac
   1593  f809		       a9 ff		      LDA	#$FF
   1594  f80b		       99 d8 00 	      STA	ParallaxCache,Y
   1595  f80e		       99 f0 00 	      STA	ParallaxCache2,Y
   1596  f811		       4c 14 f8 	      JMP	ContinueBorderTac
   1597  f814
   1598  f814				   ContinueBorderTac
   1599  f814		       88		      DEY
   1600  f815		       10 c3		      BPL	TachometerBorderLoop
   1601  f817		       60		      RTS
   1602  f818
   1603  f818				   VerticalParallaxLoop
   1604  f818				   CalculateVerticalParallax0
   1605  f818		       98		      TYA
   1606  f819		       18		      CLC
   1607  f81a		       65 91		      ADC	TrafficOffset0 + 1
   1608  f81c		       29 06		      AND	#%00000110
   1609  f81e		       d0 0b		      BNE	HasNoVerticalLine0
   1610  f820				   HasVerticalLine0
   1611  f820		       a9 ff		      LDA	#$FF
   1612  f822		       99 d8 00 	      STA	ParallaxCache,Y
   1613  f825		       99 f0 00 	      STA	ParallaxCache2,Y
   1614  f828		       4c 68 f8 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1615  f82b				   HasNoVerticalLine0
   1616  f82b		       a9 00		      LDA	#0
   1617  f82d		       99 d8 00 	      STA	ParallaxCache,Y
   1618  f830		       99 f0 00 	      STA	ParallaxCache2,Y
   1619  f833
   1620  f833				   CalculateVerticalParallax1
   1621  f833		       98		      TYA
   1622  f834		       18		      CLC
   1623  f835		       65 c7		      ADC	ParallaxOffset1 + 1
   1624  f837		       29 07		      AND	#%00000111
   1625  f839		       d0 0d		      BNE	HasNoVerticalLine1
   1626  f83b
   1627  f83b				   HasVerticalLine1
   1628  f83b		       a9 fc		      LDA	#%11111100
   1629  f83d		       99 d8 00 	      STA	ParallaxCache,Y
   1630  f840		       a9 c0		      LDA	#%11000000
   1631  f842		       99 f0 00 	      STA	ParallaxCache2,Y
   1632  f845		       4c 68 f8 	      JMP	ContinueVerticalParallaxLoop
   1633  f848				   HasNoVerticalLine1
   1634  f848		       a9 00		      LDA	#0
   1635  f84a		       99 d8 00 	      STA	ParallaxCache,Y
   1636  f84d		       99 f0 00 	      STA	ParallaxCache2,Y
   1637  f850
   1638  f850				   CalculateVerticalParallax2
   1639  f850		       98		      TYA
   1640  f851		       18		      CLC
   1641  f852		       65 c9		      ADC	ParallaxOffset2 + 1
   1642  f854		       29 07		      AND	#%00000111
   1643  f856		       d0 08		      BNE	HasNoVerticalLine2
   1644  f858
   1645  f858				   HasVerticalLine2
   1646  f858		       a9 f0		      LDA	#%11110000
   1647  f85a		       99 d8 00 	      STA	ParallaxCache,Y
   1648  f85d		       4c 68 f8 	      JMP	ContinueVerticalParallaxLoop
   1649  f860				   HasNoVerticalLine2
   1650  f860		       a9 00		      LDA	#0
   1651  f862		       99 d8 00 	      STA	ParallaxCache,Y
   1652  f865		       99 f0 00 	      STA	ParallaxCache2,Y
   1653  f868
   1654  f868				   ContinueVerticalParallaxLoop
   1655  f868		       88		      DEY
   1656  f869		       10 ad		      BPL	VerticalParallaxLoop
   1657  f86b		       60		      RTS
   1658  f86c
   1659  f86c				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1660  f86c		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1661  f86e		       85 d5		      STA	ScoreFontColor
   1662  f870		       a9 01		      LDA	#1
   1663  f872		       85 d6		      STA	ScoreFontColorHoldChange
   1664  f874
   1665  f874		       a5 8d		      LDA	FrameCount1
   1666  f876		       29 07		      AND	#%00000111
   1667  f878		       85 b3		      STA	Tmp3
   1668  f87a							;0 is Zelda Name, (default)
   1669  f87a		       a9 01		      LDA	#1
   1670  f87c		       c5 b3		      CMP	Tmp3
   1671  f87e		       f0 38		      BEQ	PrintZeldaDateLeft
   1672  f880
   1673  f880		       a9 02		      LDA	#2
   1674  f882		       c5 b3		      CMP	Tmp3
   1675  f884		       f0 23		      BEQ	PrintPolvinhosLeft
   1676  f886
   1677  f886		       a9 03		      LDA	#3
   1678  f888		       c5 b3		      CMP	Tmp3
   1679  f88a		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1680  f88c
   1681  f88c		       a9 04		      LDA	#4
   1682  f88e		       c5 b3		      CMP	Tmp3
   1683  f890		       f0 1c		      BEQ	PrintIvonneLeft
   1684  f892
   1685  f892		       a9 05		      LDA	#5
   1686  f894		       c5 b3		      CMP	Tmp3
   1687  f896		       f0 2a		      BEQ	PrintIvonneDateLeft
   1688  f898
   1689  f898		       a9 06		      LDA	#6
   1690  f89a		       c5 b3		      CMP	Tmp3
   1691  f89c		       f0 15		      BEQ	PrintArtLeft
   1692  f89e
   1693  f89e		       a9 07		      LDA	#7
   1694  f8a0		       c5 b3		      CMP	Tmp3
   1695  f8a2		       f0 23		      BEQ	PrintLeonardoLeft
   1696  f8a4
   1697  f8a4				   PrintZeldaLeft
   1698  f8a4		       a2 28		      LDX	#<ZeldaTextLeft
   1699  f8a6		       4c cc f8 	      JMP	ProcessPrintEasterEgg
   1700  f8a9				   PrintPolvinhosLeft
   1701  f8a9		       a2 3c		      LDX	#<PolvinhosTextLeft
   1702  f8ab		       4c cc f8 	      JMP	ProcessPrintEasterEgg
   1703  f8ae				   PrintIvonneLeft
   1704  f8ae		       a2 50		      LDX	#<IvonneTextLeft
   1705  f8b0		       4c cc f8 	      JMP	ProcessPrintEasterEgg
   1706  f8b3				   PrintArtLeft
   1707  f8b3		       a2 64		      LDX	#<PaperArtTextLeft
   1708  f8b5		       4c cc f8 	      JMP	ProcessPrintEasterEgg
   1709  f8b8
   1710  f8b8				   PrintZeldaDateLeft
   1711  f8b8		       a2 32		      LDX	#<ZeldaDateLeft
   1712  f8ba		       4c cc f8 	      JMP	ProcessPrintEasterEgg
   1713  f8bd				   PrintPolvinhosDateLeft
   1714  f8bd		       a2 46		      LDX	#<PolvinhosDateLeft
   1715  f8bf		       4c cc f8 	      JMP	ProcessPrintEasterEgg
   1716  f8c2				   PrintIvonneDateLeft
   1717  f8c2		       a2 5a		      LDX	#<IvonneDateLeft
   1718  f8c4		       4c cc f8 	      JMP	ProcessPrintEasterEgg
   1719  f8c7				   PrintLeonardoLeft
   1720  f8c7		       a2 6e		      LDX	#<LeonardoTextLeft
   1721  f8c9		       4c cc f8 	      JMP	ProcessPrintEasterEgg
   1722  f8cc
   1723  f8cc				   ProcessPrintEasterEgg
   1724  f8cc		       a5 8c		      LDA	FrameCount0	;3
   1725  f8ce		       29 01		      AND	#%00000001	;2
   1726  f8d0		       d0 03		      BNE	TranformIntoRightText
   1727  f8d2		       4c da f8 	      JMP	PrintEasterEggText
   1728  f8d5				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1729  f8d5		       8a		      TXA
   1730  f8d6		       18		      CLC
   1731  f8d7		       69 05		      ADC	#HALF_TEXT_SIZE
   1732  f8d9		       aa		      TAX
   1733  f8da
   1734  f8da				   PrintEasterEggText
   1735  f8da		       20 3d f7 	      JSR	PrintStaticText
   1736  f8dd		       60		      RTS
   1737  f8de
   1738  f8de				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1739  f8de		       a2 00		      LDX	#0
   1740  f8e0		       a0 04		      LDY	#FONT_OFFSET
   1741  f8e2
   1742  f8e2				   ScoreLoop		; 20 
   1743  f8e2		       85 02		      STA	WSYNC	;2
   1744  f8e4
   1745  f8e4		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1746  f8e6		       85 0d		      STA	PF0	;3
   1747  f8e8
   1748  f8e8		       a5 82		      LDA	PF1Cache	;3
   1749  f8ea		       85 0e		      STA	PF1	;3
   1750  f8ec
   1751  f8ec		       a5 83		      LDA	PF2Cache	;3
   1752  f8ee		       85 0f		      STA	PF2	;3
   1753  f8f0
   1754  f8f0				   DrawScoreD0		; 15
   1755  f8f0		       a6 d0		      LDX	ScoreD0	; 3
   1756  f8f2		       bd 00 fd 	      LDA	Font,X	;4
   1757  f8f5		       85 81		      STA	PF0Cache	;3
   1758  f8f7		       c6 d0		      DEC	ScoreD0	;5
   1759  f8f9
   1760  f8f9				   DrawScoreD1		; 23	
   1761  f8f9		       a6 d1		      LDX	ScoreD1	; 3
   1762  f8fb		       bd 00 fd 	      LDA	Font,X	;4
   1763  f8fe		       0a		      ASL		;2
   1764  f8ff		       0a		      ASL		;2
   1765  f900		       0a		      ASL		;2
   1766  f901		       0a		      ASL		;2
   1767  f902		       85 82		      STA	PF1Cache	;3
   1768  f904		       c6 d1		      DEC	ScoreD1	;5
   1769  f906
   1770  f906				   DrawScoreD2		; 20
   1771  f906		       a6 d2		      LDX	ScoreD2	; 3
   1772  f908		       bd 00 fd 	      LDA	Font,X	;4
   1773  f90b		       29 0f		      AND	#%00001111	;2
   1774  f90d		       05 82		      ORA	PF1Cache	;3
   1775  f90f		       85 82		      STA	PF1Cache	;3
   1776  f911		       c6 d2		      DEC	ScoreD2	;5
   1777  f913
   1778  f913				   DrawScoreD3		; 23
   1779  f913		       a6 d3		      LDX	ScoreD3	; 3
   1780  f915		       bd 00 fd 	      LDA	Font,X	;4
   1781  f918		       4a		      LSR		;2
   1782  f919		       4a		      LSR		;2
   1783  f91a		       4a		      LSR		;2
   1784  f91b		       4a		      LSR		;2
   1785  f91c		       85 83		      STA	PF2Cache	;3
   1786  f91e		       c6 d3		      DEC	ScoreD3	;5
   1787  f920
   1788  f920				   DrawScoreD4		; 20
   1789  f920		       a6 d4		      LDX	ScoreD4	; 3
   1790  f922		       bd 00 fd 	      LDA	Font,X	;4
   1791  f925		       29 f0		      AND	#%11110000	;2
   1792  f927		       05 83		      ORA	PF2Cache	;3
   1793  f929		       85 83		      STA	PF2Cache	;3
   1794  f92b		       c6 d4		      DEC	ScoreD4	;5
   1795  f92d
   1796  f92d
   1797  f92d		       88		      DEY		;2
   1798  f92e		       10 b2		      BPL	ScoreLoop	;4
   1799  f930
   1800  f930		       85 02		      STA	WSYNC
   1801  f932		       20 b6 f6 	      JSR	LoadAll
   1802  f935		       60		      RTS		; 6
   1803  f936
   1804  f936				   PrintRightDecimalDigits
   1805  f936		       b9 00 00 	      LDA	0,Y
   1806  f939		       4a		      LSR
   1807  f93a		       4a		      LSR
   1808  f93b		       4a		      LSR
   1809  f93c		       4a		      LSR
   1810  f93d		       aa		      TAX
   1811  f93e		       bd be fd 	      LDA	FontLookup,X	;4
   1812  f941		       85 d2		      STA	ScoreD2	;3
   1813  f943
   1814  f943		       b9 00 00 	      LDA	0,Y
   1815  f946		       29 0f		      AND	#%00001111
   1816  f948		       aa		      TAX
   1817  f949		       bd be fd 	      LDA	FontLookup,X	;4
   1818  f94c		       85 d3		      STA	ScoreD3	;3
   1819  f94e
   1820  f94e		       c8		      INY
   1821  f94f		       b9 00 00 	      LDA	0,Y
   1822  f952		       4a		      LSR
   1823  f953		       4a		      LSR
   1824  f954		       4a		      LSR
   1825  f955		       4a		      LSR
   1826  f956		       aa		      TAX
   1827  f957		       bd be fd 	      LDA	FontLookup,X	;4
   1828  f95a		       85 d0		      STA	ScoreD0	;3
   1829  f95c
   1830  f95c		       b9 00 00 	      LDA	0,Y
   1831  f95f		       29 0f		      AND	#%00001111
   1832  f961		       aa		      TAX
   1833  f962		       bd be fd 	      LDA	FontLookup,X	;4
   1834  f965		       85 d1		      STA	ScoreD1	;3
   1835  f967
   1836  f967		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1837  f969		       85 d4		      STA	ScoreD4
   1838  f96b		       60		      RTS
   1839  f96c
   1840  f96c				   PrintLastLeftDecimalDigits
   1841  f96c		       b9 00 00 	      LDA	0,Y
   1842  f96f		       4a		      LSR
   1843  f970		       4a		      LSR
   1844  f971		       4a		      LSR
   1845  f972		       4a		      LSR
   1846  f973		       aa		      TAX
   1847  f974		       bd be fd 	      LDA	FontLookup,X	;4
   1848  f977		       85 d3		      STA	ScoreD3	;3
   1849  f979		       b9 00 00 	      LDA	0,Y
   1850  f97c		       29 0f		      AND	#%00001111
   1851  f97e		       aa		      TAX
   1852  f97f		       bd be fd 	      LDA	FontLookup,X	;4
   1853  f982		       85 d4		      STA	ScoreD4	;3
   1854  f984		       60		      RTS
   1855  f985
   1856  f985				   PrintZerosLeft
   1857  f985		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1858  f987		       85 d2		      STA	ScoreD2
   1859  f989		       85 d3		      STA	ScoreD3
   1860  f98b		       85 d4		      STA	ScoreD4
   1861  f98d		       60		      RTS
   1862  f98e
   1863  f98e				   DrawGameOverScoreLine
   1864  f98e		       85 02		      STA	WSYNC
   1865  f990		       20 de f8 	      JSR	PrintScore
   1866  f993		       85 02		      STA	WSYNC
   1867  f995		       85 02		      STA	WSYNC
   1868  f997		       20 a7 f6 	      JSR	ClearPF
   1869  f99a		       60		      RTS
   1870  f99b
   1871  f99b				   DrawGameOverScreenLeft
   1872  f99b		       85 02		      STA	WSYNC
   1873  f99d		       20 a7 f6 	      JSR	ClearPF
   1874  f9a0
   1875  f9a0				   DrawBcdScoreLeft
   1876  f9a0		       20 e1 fa 	      JSR	Sleep8Lines
   1877  f9a3		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1878  f9a5		       85 06		      STA	COLUP0
   1879  f9a7		       85 02		      STA	WSYNC
   1880  f9a9		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1881  f9ab		       85 d0		      STA	ScoreD0
   1882  f9ad
   1883  f9ad		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1884  f9af		       85 d1		      STA	ScoreD1
   1885  f9b1
   1886  f9b1		       a5 b7		      LDA	ScoreBcd3
   1887  f9b3		       29 0f		      AND	#%00001111
   1888  f9b5		       aa		      TAX
   1889  f9b6		       bd be fd 	      LDA	FontLookup,X	;4
   1890  f9b9		       85 d2		      STA	ScoreD2	;3
   1891  f9bb
   1892  f9bb		       a0 b6		      LDY	#ScoreBcd2
   1893  f9bd		       20 6c f9 	      JSR	PrintLastLeftDecimalDigits
   1894  f9c0
   1895  f9c0		       20 8e f9 	      JSR	DrawGameOverScoreLine
   1896  f9c3
   1897  f9c3				   DrawTimerLeft
   1898  f9c3		       20 e1 fa 	      JSR	Sleep8Lines
   1899  f9c6		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1900  f9c8		       85 06		      STA	COLUP0
   1901  f9ca		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1902  f9cc		       85 d0		      STA	ScoreD0
   1903  f9ce		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1904  f9d0		       85 d1		      STA	ScoreD1
   1905  f9d2		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1906  f9d4		       85 d2		      STA	ScoreD2
   1907  f9d6		       a0 bf		      LDY	#TimeBcd2
   1908  f9d8		       85 02		      STA	WSYNC
   1909  f9da		       20 6c f9 	      JSR	PrintLastLeftDecimalDigits
   1910  f9dd		       20 8e f9 	      JSR	DrawGameOverScoreLine
   1911  f9e0
   1912  f9e0				   DrawGlideTimerLeft
   1913  f9e0		       20 e1 fa 	      JSR	Sleep8Lines
   1914  f9e3		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1915  f9e5		       85 06		      STA	COLUP0
   1916  f9e7		       85 02		      STA	WSYNC
   1917  f9e9		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1918  f9eb		       85 d0		      STA	ScoreD0
   1919  f9ed		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1920  f9ef		       85 d1		      STA	ScoreD1
   1921  f9f1		       20 85 f9 	      JSR	PrintZerosLeft
   1922  f9f4		       20 8e f9 	      JSR	DrawGameOverScoreLine
   1923  f9f7
   1924  f9f7				   DrawHitCountLeft
   1925  f9f7		       20 e1 fa 	      JSR	Sleep8Lines
   1926  f9fa		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1927  f9fc		       85 06		      STA	COLUP0
   1928  f9fe		       85 02		      STA	WSYNC
   1929  fa00		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1930  fa02		       85 d0		      STA	ScoreD0
   1931  fa04		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1932  fa06		       85 d1		      STA	ScoreD1
   1933  fa08		       20 85 f9 	      JSR	PrintZerosLeft
   1934  fa0b		       20 8e f9 	      JSR	DrawGameOverScoreLine
   1935  fa0e
   1936  fa0e				   DrawCheckpointCountLeft
   1937  fa0e		       20 e1 fa 	      JSR	Sleep8Lines
   1938  fa11		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1939  fa13		       85 06		      STA	COLUP0
   1940  fa15		       85 02		      STA	WSYNC
   1941  fa17		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1942  fa19		       85 d0		      STA	ScoreD0
   1943  fa1b		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1944  fa1d		       85 d1		      STA	ScoreD1
   1945  fa1f		       20 85 f9 	      JSR	PrintZerosLeft
   1946  fa22		       20 8e f9 	      JSR	DrawGameOverScoreLine
   1947  fa25
   1948  fa25				   DrawGameVersionLeft
   1949  fa25		       20 e1 fa 	      JSR	Sleep8Lines
   1950  fa28		       a9 49		      LDA	#VERSION_COLOR
   1951  fa2a		       85 06		      STA	COLUP0
   1952  fa2c
   1953  fa2c		       a5 c5		      LDA	GameMode
   1954  fa2e		       aa		      TAX
   1955  fa2f		       bd be fd 	      LDA	FontLookup,X	;4
   1956  fa32		       85 d0		      STA	ScoreD0	;3
   1957  fa34		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1958  fa36		       85 d1		      STA	ScoreD1
   1959  fa38
   1960  fa38		       a5 a6		      LDA	StartSWCHB
   1961  fa3a		       29 40		      AND	#%01000000	; P0 difficulty
   1962  fa3c		       49 40		      EOR	#%01000000	; Reverse bytes
   1963  fa3e		       2a		      ROL
   1964  fa3f		       2a		      ROL
   1965  fa40		       2a		      ROL
   1966  fa41		       18		      CLC
   1967  fa42		       69 0a		      ADC	#10
   1968  fa44		       aa		      TAX
   1969  fa45		       bd be fd 	      LDA	FontLookup,X	;4
   1970  fa48		       85 d2		      STA	ScoreD2	;3
   1971  fa4a
   1972  fa4a		       a5 a6		      LDA	StartSWCHB
   1973  fa4c		       29 80		      AND	#%10000000	; P0 difficulty
   1974  fa4e		       49 80		      EOR	#%10000000	; Reverse bytes
   1975  fa50		       2a		      ROL
   1976  fa51		       2a		      ROL
   1977  fa52		       18		      CLC
   1978  fa53		       69 0a		      ADC	#10
   1979  fa55		       aa		      TAX
   1980  fa56		       bd be fd 	      LDA	FontLookup,X	;4
   1981  fa59		       85 d3		      STA	ScoreD3	;3
   1982  fa5b
   1983  fa5b		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1984  fa5d		       85 d4		      STA	ScoreD4
   1985  fa5f
   1986  fa5f		       20 8e f9 	      JSR	DrawGameOverScoreLine
   1987  fa62
   1988  fa62		       4c c8 fa 	      JMP	FinalizeDrawGameOver
   1989  fa65
   1990  fa65				   DrawGameOverScreenRight
   1991  fa65		       85 02		      STA	WSYNC
   1992  fa67		       20 a7 f6 	      JSR	ClearPF
   1993  fa6a
   1994  fa6a				   DrawBcdScoreRight
   1995  fa6a		       20 e1 fa 	      JSR	Sleep8Lines
   1996  fa6d		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1997  fa6f		       85 07		      STA	COLUP1
   1998  fa71		       85 02		      STA	WSYNC
   1999  fa73		       a0 b4		      LDY	#ScoreBcd0
   2000  fa75		       20 36 f9 	      JSR	PrintRightDecimalDigits
   2001  fa78
   2002  fa78		       20 8e f9 	      JSR	DrawGameOverScoreLine
   2003  fa7b
   2004  fa7b				   DrawTimerRight
   2005  fa7b		       20 e1 fa 	      JSR	Sleep8Lines
   2006  fa7e		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2007  fa80		       85 07		      STA	COLUP1
   2008  fa82		       a0 bd		      LDY	#TimeBcd0
   2009  fa84		       20 36 f9 	      JSR	PrintRightDecimalDigits
   2010  fa87
   2011  fa87		       20 8e f9 	      JSR	DrawGameOverScoreLine
   2012  fa8a				   DrawGlideTimeRight
   2013  fa8a		       20 e1 fa 	      JSR	Sleep8Lines
   2014  fa8d		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2015  fa8f		       85 07		      STA	COLUP1
   2016  fa91		       a0 cd		      LDY	#GlideTimeBcd0
   2017  fa93		       20 36 f9 	      JSR	PrintRightDecimalDigits
   2018  fa96		       20 8e f9 	      JSR	DrawGameOverScoreLine
   2019  fa99
   2020  fa99				   DrawHitCountRight
   2021  fa99		       20 e1 fa 	      JSR	Sleep8Lines
   2022  fa9c		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2023  fa9e		       85 07		      STA	COLUP1
   2024  faa0		       a0 cb		      LDY	#HitCountBcd0
   2025  faa2		       20 36 f9 	      JSR	PrintRightDecimalDigits
   2026  faa5		       20 8e f9 	      JSR	DrawGameOverScoreLine
   2027  faa8
   2028  faa8				   DrawCheckpointCountRight
   2029  faa8		       20 e1 fa 	      JSR	Sleep8Lines
   2030  faab		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2031  faad		       85 07		      STA	COLUP1
   2032  faaf		       a0 a4		      LDY	#CheckpointBcd0
   2033  fab1		       20 36 f9 	      JSR	PrintRightDecimalDigits
   2034  fab4		       20 8e f9 	      JSR	DrawGameOverScoreLine
   2035  fab7
   2036  fab7				   DrawVersionRight
   2037  fab7		       20 e1 fa 	      JSR	Sleep8Lines
   2038  faba		       a9 49		      LDA	#VERSION_COLOR
   2039  fabc		       85 07		      STA	COLUP1
   2040  fabe		       85 02		      STA	WSYNC
   2041  fac0		       a2 78		      LDX	#<VersionText
   2042  fac2		       20 3d f7 	      JSR	PrintStaticText
   2043  fac5		       20 8e f9 	      JSR	DrawGameOverScoreLine
   2044  fac8
   2045  fac8				   FinalizeDrawGameOver
   2046  fac8		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2047  faca		       85 d5		      STA	ScoreFontColor
   2048  facc		       20 d8 fa 	      JSR	Sleep4Lines
   2049  facf		       20 e8 fa 	      JSR	Sleep32Lines
   2050  fad2		       20 e8 fa 	      JSR	Sleep32Lines
   2051  fad5		       4c c8 f5 	      JMP	PrepareOverscan
   2052  fad8
   2053  fad8				   Sleep4Lines
   2054  fad8		       85 02		      STA	WSYNC
   2055  fada		       85 02		      STA	WSYNC
   2056  fadc		       85 02		      STA	WSYNC
   2057  fade		       85 02		      STA	WSYNC
   2058  fae0		       60		      RTS
   2059  fae1
   2060  fae1				   Sleep8Lines
   2061  fae1		       20 d8 fa 	      JSR	Sleep4Lines
   2062  fae4		       20 d8 fa 	      JSR	Sleep4Lines
   2063  fae7		       60		      RTS
   2064  fae8
   2065  fae8				   Sleep32Lines
   2066  fae8		       20 e1 fa 	      JSR	Sleep8Lines
   2067  faeb		       20 e1 fa 	      JSR	Sleep8Lines
   2068  faee		       20 e1 fa 	      JSR	Sleep8Lines
   2069  faf1		       20 e1 fa 	      JSR	Sleep8Lines
   2070  faf4		       60		      RTS
   2071  faf5
   2072  faf5							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   2073  fd00					      org	$FD00
   2074  fd00				   Font
   2075  fd00				   C0
   2076  fd00		       e7		      .byte.b	#%11100111	;
   2077  fd01		       a5		      .byte.b	#%10100101	; 
   2078  fd02		       a5		      .byte.b	#%10100101	; 
   2079  fd03		       a5		      .byte.b	#%10100101	; 
   2080  fd04		       e7		      .byte.b	#%11100111	;	
   2081  fd05				   C1
   2082  fd05		       e7		      .byte.b	#%11100111	;
   2083  fd06		       42		      .byte.b	#%01000010	; 
   2084  fd07		       42		      .byte.b	#%01000010	; 
   2085  fd08		       42		      .byte.b	#%01000010	; 
   2086  fd09		       66		      .byte.b	#%01100110	;
   2087  fd0a				   C2
   2088  fd0a		       e7		      .byte.b	#%11100111	;
   2089  fd0b		       24		      .byte.b	#%00100100	; 
   2090  fd0c		       e7		      .byte.b	#%11100111	; 
   2091  fd0d		       81		      .byte.b	#%10000001	; 
   2092  fd0e		       e7		      .byte.b	#%11100111	;
   2093  fd0f				   C3
   2094  fd0f		       e7		      .byte.b	#%11100111	;
   2095  fd10		       81		      .byte.b	#%10000001	; 
   2096  fd11		       e7		      .byte.b	#%11100111	; 
   2097  fd12		       81		      .byte.b	#%10000001	; 
   2098  fd13		       e7		      .byte.b	#%11100111	;
   2099  fd14				   C4
   2100  fd14		       81		      .byte.b	#%10000001	;
   2101  fd15		       81		      .byte.b	#%10000001	; 
   2102  fd16		       e7		      .byte.b	#%11100111	; 
   2103  fd17		       a5		      .byte.b	#%10100101	; 
   2104  fd18		       a5		      .byte.b	#%10100101	;
   2105  fd19				   C5
   2106  fd19		       e7		      .byte.b	#%11100111	;
   2107  fd1a		       81		      .byte.b	#%10000001	; 
   2108  fd1b		       e7		      .byte.b	#%11100111	; 
   2109  fd1c		       24		      .byte.b	#%00100100	; 
   2110  fd1d		       e7		      .byte.b	#%11100111	;
   2111  fd1e				   C6
   2112  fd1e		       e7		      .byte.b	#%11100111	;
   2113  fd1f		       a5		      .byte.b	#%10100101	; 
   2114  fd20		       e7		      .byte.b	#%11100111	; 
   2115  fd21		       24		      .byte.b	#%00100100	; 
   2116  fd22		       e7		      .byte.b	#%11100111	;
   2117  fd23				   C7
   2118  fd23		       81		      .byte.b	#%10000001	;
   2119  fd24		       81		      .byte.b	#%10000001	; 
   2120  fd25		       81		      .byte.b	#%10000001	; 
   2121  fd26		       81		      .byte.b	#%10000001	; 
   2122  fd27		       e7		      .byte.b	#%11100111	;
   2123  fd28				   C8
   2124  fd28		       e7		      .byte.b	#%11100111	;
   2125  fd29		       a5		      .byte.b	#%10100101	; 
   2126  fd2a		       e7		      .byte.b	#%11100111	; 
   2127  fd2b		       a5		      .byte.b	#%10100101	; 
   2128  fd2c		       e7		      .byte.b	#%11100111	;
   2129  fd2d				   C9
   2130  fd2d		       e7		      .byte.b	#%11100111	;
   2131  fd2e		       81		      .byte.b	#%10000001	; 
   2132  fd2f		       e7		      .byte.b	#%11100111	; 
   2133  fd30		       a5		      .byte.b	#%10100101	; 
   2134  fd31		       e7		      .byte.b	#%11100111	;
   2135  fd32				   CA
   2136  fd32		       a5		      .byte.b	#%10100101	;
   2137  fd33		       a5		      .byte.b	#%10100101	; 
   2138  fd34		       e7		      .byte.b	#%11100111	; 
   2139  fd35		       a5		      .byte.b	#%10100101	; 
   2140  fd36		       e7		      .byte.b	#%11100111	;
   2141  fd37				   CB
   2142  fd37		       66		      .byte.b	#%01100110	;
   2143  fd38		       a5		      .byte.b	#%10100101	; 
   2144  fd39		       66		      .byte.b	#%01100110	; 
   2145  fd3a		       a5		      .byte.b	#%10100101	;
   2146  fd3b		       66		      .byte.b	#%01100110	;
   2147  fd3c				   CC
   2148  fd3c		       e7		      .byte.b	#%11100111	;
   2149  fd3d		       24		      .byte.b	#%00100100	; 
   2150  fd3e		       24		      .byte.b	#%00100100	; 
   2151  fd3f		       24		      .byte.b	#%00100100	;
   2152  fd40		       e7		      .byte.b	#%11100111	;
   2153  fd41
   2154  fd41				   CD
   2155  fd41		       66		      .byte.b	#%01100110	;
   2156  fd42		       a5		      .byte.b	#%10100101	; 
   2157  fd43		       a5		      .byte.b	#%10100101	; 
   2158  fd44		       a5		      .byte.b	#%10100101	;
   2159  fd45		       66		      .byte.b	#%01100110	;
   2160  fd46
   2161  fd46				   CE
   2162  fd46		       e7		      .byte.b	#%11100111	;
   2163  fd47		       24		      .byte.b	#%00100100	; 
   2164  fd48		       e7		      .byte.b	#%11100111	; 
   2165  fd49		       24		      .byte.b	#%00100100	; 
   2166  fd4a		       e7		      .byte.b	#%11100111	;
   2167  fd4b
   2168  fd4b				   CF
   2169  fd4b		       24		      .byte.b	#%00100100	;
   2170  fd4c		       24		      .byte.b	#%00100100	; 
   2171  fd4d		       e7		      .byte.b	#%11100111	; 
   2172  fd4e		       24		      .byte.b	#%00100100	; 
   2173  fd4f		       e7		      .byte.b	#%11100111	;
   2174  fd50
   2175  fd50				   CG
   2176  fd50		       c3		      .byte.b	#%11000011	;
   2177  fd51		       a5		      .byte.b	#%10100101	; 
   2178  fd52		       a5		      .byte.b	#%10100101	; 
   2179  fd53		       24		      .byte.b	#%00100100	; 
   2180  fd54		       c3		      .byte.b	#%11000011	;	
   2181  fd55
   2182  fd55				   CH
   2183  fd55		       a5		      .byte.b	#%10100101	;
   2184  fd56		       a5		      .byte.b	#%10100101	; 
   2185  fd57		       e7		      .byte.b	#%11100111	; 
   2186  fd58		       a5		      .byte.b	#%10100101	; 
   2187  fd59		       a5		      .byte.b	#%10100101	;
   2188  fd5a
   2189  fd5a				   CK
   2190  fd5a		       a5		      .byte.b	#%10100101	;
   2191  fd5b		       a5		      .byte.b	#%10100101	; 
   2192  fd5c		       66		      .byte.b	#%01100110	; 
   2193  fd5d		       a5		      .byte.b	#%10100101	; 
   2194  fd5e		       a5		      .byte.b	#%10100101	;
   2195  fd5f
   2196  fd5f				   CL
   2197  fd5f		       e7		      .byte.b	#%11100111	;
   2198  fd60		       24		      .byte.b	#%00100100	; 
   2199  fd61		       24		      .byte.b	#%00100100	; 
   2200  fd62		       24		      .byte.b	#%00100100	; 
   2201  fd63		       24		      .byte.b	#%00100100	;
   2202  fd64
   2203  fd64				   CI
   2204  fd64		       42		      .byte.b	#%01000010	;
   2205  fd65		       42		      .byte.b	#%01000010	; 
   2206  fd66		       42		      .byte.b	#%01000010	; 
   2207  fd67		       42		      .byte.b	#%01000010	; 
   2208  fd68		       42		      .byte.b	#%01000010	;
   2209  fd69
   2210  fd69				   CM
   2211  fd69		       a5		      .byte.b	#%10100101	;
   2212  fd6a		       a5		      .byte.b	#%10100101	; 
   2213  fd6b		       a5		      .byte.b	#%10100101	; 
   2214  fd6c		       e7		      .byte.b	#%11100111	; 
   2215  fd6d		       a5		      .byte.b	#%10100101	;
   2216  fd6e
   2217  fd6e				   CN
   2218  fd6e		       a5		      .byte.b	#%10100101	;
   2219  fd6f		       a5		      .byte.b	#%10100101	; 
   2220  fd70		       a5		      .byte.b	#%10100101	; 
   2221  fd71		       a5		      .byte.b	#%10100101	; 
   2222  fd72		       66		      .byte.b	#%01100110	;	
   2223  fd73
   2224  fd73
   2225  fd73				   CO
   2226  fd73		       42		      .byte.b	#%01000010	;
   2227  fd74		       a5		      .byte.b	#%10100101	; 
   2228  fd75		       a5		      .byte.b	#%10100101	; 
   2229  fd76		       a5		      .byte.b	#%10100101	; 
   2230  fd77		       42		      .byte.b	#%01000010	;	
   2231  fd78
   2232  fd78				   CP
   2233  fd78		       24		      .byte.b	#%00100100	;
   2234  fd79		       24		      .byte.b	#%00100100	; 
   2235  fd7a		       e7		      .byte.b	#%11100111	; 
   2236  fd7b		       a5		      .byte.b	#%10100101	; 
   2237  fd7c		       e7		      .byte.b	#%11100111	;
   2238  fd7d
   2239  fd7d				   CR
   2240  fd7d		       a5		      .byte.b	#%10100101	;
   2241  fd7e		       a5		      .byte.b	#%10100101	; 
   2242  fd7f		       66		      .byte.b	#%01100110	; 
   2243  fd80		       a5		      .byte.b	#%10100101	; 
   2244  fd81		       66		      .byte.b	#%01100110	;
   2245  fd82
   2246  fd82				   CS
   2247  fd82		       66		      .byte.b	#%01100110	;
   2248  fd83		       81		      .byte.b	#%10000001	; 
   2249  fd84		       42		      .byte.b	#%01000010	; 
   2250  fd85		       24		      .byte.b	#%00100100	; 
   2251  fd86		       c3		      .byte.b	#%11000011	;
   2252  fd87
   2253  fd87				   CT
   2254  fd87		       42		      .byte.b	#%01000010	;
   2255  fd88		       42		      .byte.b	#%01000010	; 
   2256  fd89		       42		      .byte.b	#%01000010	; 
   2257  fd8a		       42		      .byte.b	#%01000010	; 
   2258  fd8b		       e7		      .byte.b	#%11100111	;
   2259  fd8c
   2260  fd8c				   CV
   2261  fd8c		       42		      .byte.b	#%01000010	;
   2262  fd8d		       a5		      .byte.b	#%10100101	; 
   2263  fd8e		       a5		      .byte.b	#%10100101	; 
   2264  fd8f		       a5		      .byte.b	#%10100101	; 
   2265  fd90		       a5		      .byte.b	#%10100101	;	
   2266  fd91
   2267  fd91				   CY
   2268  fd91		       42		      .byte.b	#%01000010	;
   2269  fd92		       42		      .byte.b	#%01000010	; 
   2270  fd93		       42		      .byte.b	#%01000010	; 
   2271  fd94		       a5		      .byte.b	#%10100101	; 
   2272  fd95		       a5		      .byte.b	#%10100101	;
   2273  fd96
   2274  fd96				   CW
   2275  fd96		       a5		      .byte.b	#%10100101	;
   2276  fd97		       e7		      .byte.b	#%11100111	; 
   2277  fd98		       a5		      .byte.b	#%10100101	; 
   2278  fd99		       a5		      .byte.b	#%10100101	; 
   2279  fd9a		       a5		      .byte.b	#%10100101	;
   2280  fd9b
   2281  fd9b				   CZ
   2282  fd9b		       e7		      .byte.b	#%11100111	;
   2283  fd9c		       24		      .byte.b	#%00100100	; 
   2284  fd9d		       42		      .byte.b	#%01000010	; 
   2285  fd9e		       81		      .byte.b	#%10000001	; 
   2286  fd9f		       e7		      .byte.b	#%11100111	;
   2287  fda0
   2288  fda0				   Pipe
   2289  fda0		       42		      .byte.b	#%01000010	;
   2290  fda1		       00		      .byte.b	#%00000000	; 
   2291  fda2		       42		      .byte.b	#%01000010	; 
   2292  fda3		       00		      .byte.b	#%00000000	; 
   2293  fda4		       42		      .byte.b	#%01000010	;
   2294  fda5
   2295  fda5				   Exclamation
   2296  fda5		       42		      .byte.b	#%01000010	;
   2297  fda6		       00		      .byte.b	#%00000000	; 
   2298  fda7		       42		      .byte.b	#%01000010	; 
   2299  fda8		       42		      .byte.b	#%01000010	; 
   2300  fda9		       42		      .byte.b	#%01000010	;
   2301  fdaa
   2302  fdaa				   Dot
   2303  fdaa		       42		      .byte.b	#%01000010	;
   2304  fdab		       42		      .byte.b	#%01000010	; 
   2305  fdac		       00		      .byte.b	#%00000000	; 
   2306  fdad		       00		      .byte.b	#%00000000	; 
   2307  fdae		       00		      .byte.b	#%00000000	;
   2308  fdaf
   2309  fdaf				   Colon
   2310  fdaf		       42		      .byte.b	#%01000010	;
   2311  fdb0		       42		      .byte.b	#%01000010	; 
   2312  fdb1		       00		      .byte.b	#%00000000	; 
   2313  fdb2		       42		      .byte.b	#%01000010	; 
   2314  fdb3		       42		      .byte.b	#%01000010	;
   2315  fdb4
   2316  fdb4				   Triangle
   2317  fdb4		       81		      .byte.b	#%10000001	;
   2318  fdb5		       c3		      .byte.b	#%11000011	; 
   2319  fdb6		       e7		      .byte.b	#%11100111	; 
   2320  fdb7		       c3		      .byte.b	#%11000011	; 
   2321  fdb8		       81		      .byte.b	#%10000001	;
   2322  fdb9
   2323  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2324  fdb9		       00		      .byte.b	#0	;
   2325  fdba		       00		      .byte.b	#0	;
   2326  fdbb		       00		      .byte.b	#0	;
   2327  fdbc		       00		      .byte.b	#0	;
   2328  fdbd		       00		      .byte.b	#0	;
   2329  fdbe
   2330  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2331  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2332  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2333  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2334  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2335  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2336  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2337  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2338  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2339  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2340  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2341  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2342  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2343  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2344  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2345  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2346  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2347  fdce
   2348  fdce				   EngineSoundType
   2349  fdce		       02		      .byte.b	#2
   2350  fdcf		       02		      .byte.b	#2
   2351  fdd0		       0e		      .byte.b	#14
   2352  fdd1		       06		      .byte.b	#6
   2353  fdd2		       06		      .byte.b	#6
   2354  fdd3		       0e		      .byte.b	#14
   2355  fdd4
   2356  fdd4				   EngineBaseFrequence
   2357  fdd4		       1f		      .byte.b	#31
   2358  fdd5		       15		      .byte.b	#21
   2359  fdd6		       14		      .byte.b	#20
   2360  fdd7		       1f		      .byte.b	#31
   2361  fdd8		       16		      .byte.b	#22
   2362  fdd9		       03		      .byte.b	#3
   2363  fdda
   2364  fdda				   TachometerSizeLookup1
   2365  fdda		       1f		      .byte.b	#%00011111
   2366  fddb		       3f		      .byte.b	#%00111111
   2367  fddc		       7f		      .byte.b	#%01111111
   2368  fddd		       ff		      .byte.b	#%11111111
   2369  fdde		       ff		      .byte.b	#%11111111
   2370  fddf		       ff		      .byte.b	#%11111111
   2371  fde0		       ff		      .byte.b	#%11111111
   2372  fde1		       ff		      .byte.b	#%11111111
   2373  fde2
   2374  fde2				   TachometerSizeLookup2
   2375  fde2		       00		      .byte.b	#%00000000
   2376  fde3		       00		      .byte.b	#%00000000
   2377  fde4		       00		      .byte.b	#%00000000
   2378  fde5		       00		      .byte.b	#%00000000
   2379  fde6		       80		      .byte.b	#%10000000
   2380  fde7		       c0		      .byte.b	#%11000000
   2381  fde8		       e0		      .byte.b	#%11100000
   2382  fde9		       f0		      .byte.b	#%11110000
   2383  fdea
   2384  fdea				   TachometerGearLookup
   2385  fdea		       01		      .byte.b	#%00000001
   2386  fdeb		       02		      .byte.b	#%00000010
   2387  fdec		       04		      .byte.b	#%00000100
   2388  fded		       08		      .byte.b	#%00001000
   2389  fdee		       10		      .byte.b	#%00010000
   2390  fdef		       30		      .byte.b	#%00110000
   2391  fdf0
   2392  fe00					      org	$FE00
   2393  fe00				   AesTable
   2394  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2395  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2396  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2397  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2398  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2399  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2400  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2401  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2402  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2403  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2404  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2405  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2406  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2407  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2408  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2409  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2410  ff00
   2411  ff00							; From FF00 to FFFB (122 bytes) to use here
   2412  ff00
   2413  ff00				   StaticText		; All static text must be on the same MSB block. 
   2414  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2415  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2416  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2417  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2418  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2419  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2420  ff05
   2421  ff05				   HellwayLeftText
   2422  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2423  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2424  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2425  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2426  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2427  ff0a
   2428  ff0a				   HellwayRightText
   2429  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2430  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2431  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2432  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2433  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2434  ff0f
   2435  ff0f				   OpbText
   2436  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2437  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2438  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2439  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2440  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2441  ff14
   2442  ff14				   YearText
   2443  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2444  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2445  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2446  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2447  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2448  ff19
   2449  ff19				   GameText
   2450  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2451  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2452  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2453  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2454  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2455  ff1e
   2456  ff1e				   OverText
   2457  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2458  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2459  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2460  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2461  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2462  ff23				   GoText
   2463  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2464  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2465  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2466  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2467  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2468  ff28
   2469  ff28				   ZeldaTextLeft
   2470  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2471  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2472  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2473  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2474  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2475  ff2d
   2476  ff2d				   ZeldaTextRight
   2477  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2478  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2479  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2480  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2481  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2482  ff32
   2483  ff32				   ZeldaDateLeft
   2484  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2485  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2486  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2487  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2488  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2489  ff37
   2490  ff37				   ZeldaDateRight
   2491  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2492  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2493  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2494  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2495  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2496  ff3c
   2497  ff3c				   PolvinhosTextLeft
   2498  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2499  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2500  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2501  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2502  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2503  ff41
   2504  ff41				   PolvinhosTextRight
   2505  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2506  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2507  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2508  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2509  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2510  ff46
   2511  ff46				   PolvinhosDateLeft
   2512  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2513  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2514  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2515  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2516  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2517  ff4b
   2518  ff4b				   PolvinhosDateRight
   2519  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2520  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2521  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2522  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2523  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2524  ff50
   2525  ff50				   IvonneTextLeft
   2526  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2527  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2528  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2529  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2530  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2531  ff55
   2532  ff55				   IvonneTextRight
   2533  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2534  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2535  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2536  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2537  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2538  ff5a
   2539  ff5a				   IvonneDateLeft
   2540  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2541  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2542  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2543  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2544  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2545  ff5f
   2546  ff5f				   IvonneDateRight
   2547  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2548  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2549  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2550  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2551  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2552  ff64
   2553  ff64				   PaperArtTextLeft
   2554  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2555  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2556  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2557  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2558  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2559  ff69
   2560  ff69				   PaperArtTextRight
   2561  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2562  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2563  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2564  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2565  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2566  ff6e
   2567  ff6e				   LeonardoTextLeft
   2568  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2569  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2570  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2571  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2572  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2573  ff73
   2574  ff73				   LeonardoTextRight
   2575  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2576  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2577  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2578  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2579  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2580  ff78
   2581  ff78				   VersionText
   2582  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2583  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2584  ff7a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2585  ff7b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2586  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2587  ff7d
   2588  ff7d
   2589  ff7d				   EndStaticText
   2590  ff7d
   2591  ff7d				   CarSprite		; Upside down
   2592  ff7d		       00 00 00 00*	      ds	6
   2593  ff83		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   2594  ff84		       7e		      .byte.b	#%01111110
   2595  ff85		       24		      .byte.b	#%00100100
   2596  ff86		       bd		      .byte.b	#%10111101
   2597  ff87		       3c		      .byte.b	#%00111100
   2598  ff88		       bd		      .byte.b	#%10111101
   2599  ff89		       3c		      .byte.b	#%00111100
   2600  ff8a		       00 00 00 00*	      ds	GAMEPLAY_AREA - 2
   2601  ffca
   2602  ffca				   TrafficSpeeds
   2603  ffca		       00		      .byte.b	#$00	;  Trafic0 L
   2604  ffcb		       00		      .byte.b	#$00	;  Trafic0 H
   2605  ffcc		       0a		      .byte.b	#$0A	;  Trafic1 L
   2606  ffcd		       01		      .byte.b	#$01	;  Trafic1 H
   2607  ffce		       e6		      .byte.b	#$E6	;  Trafic2 L
   2608  ffcf		       00		      .byte.b	#$00	;  Trafic2 H
   2609  ffd0		       c2		      .byte.b	#$C2	;  Trafic3 L
   2610  ffd1		       00		      .byte.b	#$00	;  Trafic3 H
   2611  ffd2		       9e		      .byte.b	#$9E	;  Trafic4 L
   2612  ffd3		       00		      .byte.b	#$00	;  Trafic4 H
   2613  ffd4				   TrafficSpeedsHighDelta
   2614  ffd4		       00		      .byte.b	#$00	;  Trafic0 L
   2615  ffd5		       00		      .byte.b	#$00	;  Trafic0 H
   2616  ffd6		       0a		      .byte.b	#$0A	;  Trafic1 L
   2617  ffd7		       01		      .byte.b	#$01	;  Trafic1 H
   2618  ffd8		       c8		      .byte.b	#$C8	;  Trafic2 L
   2619  ffd9		       00		      .byte.b	#$00	;  Trafic2 H
   2620  ffda		       86		      .byte.b	#$86	;  Trafic3 L
   2621  ffdb		       00		      .byte.b	#$00	;  Trafic3 H
   2622  ffdc		       44		      .byte.b	#$44	;  Trafic4 L
   2623  ffdd		       00		      .byte.b	#$00	;  Trafic4 H
   2624  ffde
   2625  fffc					      org	$FFFC
   2626  fffc		       00 f0		      .word.w	BeforeStart
   2627  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
