------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0c	   BREAK_SPEED =	12
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 88	   ParallaxMode =	$88
    111  f000
    112  f000		       00 8c	   FrameCount0 =	$8C	;
    113  f000		       00 8d	   FrameCount1 =	$8D	;
    114  f000
    115  f000		       00 8e	   Player0SpeedL =	$8E
    116  f000		       00 8f	   Player0SpeedH =	$8F
    117  f000
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    123  f000
    124  f000		       00 a4	   CheckpointBcd0 =	$A4
    125  f000		       00 a5	   CheckpointBcd1 =	$A5
    126  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    127  f000		       00 a7	   CarSpritePointerL =	$A7
    128  f000		       00 a8	   CarSpritePointerH =	$A8
    129  f000		       00 a9	   CurrentCarId =	$A9
    130  f000		       00 aa	   AccelerateBuffer =	$AA	; Change speed on buffer overflow.
    131  f000		       00 ab	   TextSide   =	$AB
    132  f000		       00 ac	   TextFlickerMode =	$AC
    133  f000
    134  f000							;Temporary variables, multiple uses
    135  f000		       00 b0	   Tmp0       =	$B0
    136  f000		       00 b1	   Tmp1       =	$B1
    137  f000		       00 b2	   Tmp2       =	$B2
    138  f000		       00 b3	   Tmp3       =	$B3
    139  f000
    140  f000		       00 b4	   ScoreBcd0  =	$B4
    141  f000		       00 b5	   ScoreBcd1  =	$B5
    142  f000		       00 b6	   ScoreBcd2  =	$B6
    143  f000		       00 b7	   ScoreBcd3  =	$B7
    144  f000
    145  f000		       00 b8	   CollisionCounter =	$B8
    146  f000		       00 b9	   Player0X   =	$B9
    147  f000		       00 ba	   CountdownTimer =	$BA
    148  f000		       00 bb	   Traffic0Msb =	$BB
    149  f000		       00 bc	   SwitchDebounceCounter =	$BC
    150  f000
    151  f000		       00 bd	   TimeBcd0   =	$BD
    152  f000		       00 be	   TimeBcd1   =	$BE
    153  f000		       00 bf	   TimeBcd2   =	$BF
    154  f000
    155  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    156  f000		       00 c1	   TrafficChance =	$C1
    157  f000		       00 c2	   CheckpointTime =	$C2
    158  f000		       00 c3	   TrafficColor =	$C3
    159  f000		       00 c4	   CurrentDifficulty =	$C4
    160  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    161  f000							;Bit 2 speed delta, Bit 3 random traffic 
    162  f000
    163  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    164  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    165  f000
    166  f000		       00 ca	   BorderType =	$CA
    167  f000
    168  f000		       00 cb	   HitCountBcd0 =	$CB
    169  f000		       00 cc	   HitCountBcd1 =	$CC
    170  f000
    171  f000		       00 cd	   GlideTimeBcd0 =	$CD
    172  f000		       00 ce	   GlideTimeBcd1 =	$CE
    173  f000
    174  f000		       00 cf	   OneSecondConter =	$CF
    175  f000
    176  f000		       00 d0	   ScoreD0    =	$D0
    177  f000		       00 d1	   ScoreD1    =	$D1
    178  f000		       00 d2	   ScoreD2    =	$D2
    179  f000		       00 d3	   ScoreD3    =	$D3
    180  f000		       00 d4	   ScoreD4    =	$D4
    181  f000		       00 d5	   ScoreFontColor =	$D5
    182  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    183  f000		       00 d7	   NextCheckpoint =	$D7
    184  f000
    185  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    186  f000		       00 f0	   ParallaxCache2 =	$F0	; to F7
    187  f000
    188  f000
    189  f000							;generic start up stuff, put zero in almost all...
    190  f000				   BeforeStart		;All variables that are kept on game reset or select
    191  f000		       a0 00		      LDY	#0
    192  f002		       84 bc		      STY	SwitchDebounceCounter
    193  f004		       84 c4		      STY	CurrentDifficulty
    194  f006		       84 c0		      STY	GameStatus
    195  f008		       a0 10		      LDY	#16
    196  f00a		       84 c5		      STY	GameMode
    197  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    198  f00e		       84 88		      STY	ParallaxMode
    199  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    200  f012		       84 a9		      STY	CurrentCarId
    201  f014
    202  f014				   Start
    203  f014		       78		      SEI
    204  f015		       d8		      CLD
    205  f016		       a2 ff		      LDX	#$FF
    206  f018		       9a		      TXS
    207  f019		       a9 00		      LDA	#0
    208  f01b				   ClearMem
    209  f01b		       e0 bc		      CPX	#SwitchDebounceCounter
    210  f01d		       f0 16		      BEQ	SkipClean
    211  f01f		       e0 c5		      CPX	#GameMode
    212  f021		       f0 12		      BEQ	SkipClean
    213  f023		       e0 88		      CPX	#ParallaxMode
    214  f025		       f0 0e		      BEQ	SkipClean
    215  f027		       e0 a9		      CPX	#CurrentCarId
    216  f029		       f0 0a		      BEQ	SkipClean
    217  f02b		       e0 c4		      CPX	#CurrentDifficulty
    218  f02d		       f0 06		      BEQ	SkipClean
    219  f02f		       e0 c0		      CPX	#GameStatus
    220  f031		       f0 02		      BEQ	SkipClean
    221  f033		       95 00		      STA	0,X
    222  f035				   SkipClean
    223  f035		       ca		      DEX
    224  f036		       d0 e3		      BNE	ClearMem
    225  f038
    226  f038							;Setting some variables...
    227  f038
    228  f038				   SettingTrafficOffsets		; Time sensitive with player H position
    229  f038		       85 02		      STA	WSYNC	;We will set player position
    230  f03a		       20 d7 f7 	      JSR	DefaultOffsets
    231  f03d
    232  f03d		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    233  f040		       85 8e		      STA	Player0SpeedL
    234  f042
      0  f042					      SLEEP	11	;18
      1  f042				   .CYCLES    SET	11
      2  f042
      3  f042				  -	      IF	.CYCLES < 2
      4  f042				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f042				  -	      ERR
      6  f042					      ENDIF
      7  f042
      8  f042					      IF	.CYCLES & 1
      9  f042				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f042				  -	      nop	0
     11  f042					      ELSE
     12  f042		       24 00		      bit	VSYNC
     13  f044					      ENDIF
     14  f044				   .CYCLES    SET	.CYCLES - 3
     15  f044					      ENDIF
     16  f044
     17  f044					      REPEAT	.CYCLES / 2
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     19  f048					      REPEND
    236  f048		       85 10		      STA	RESP0
    237  f04a
    238  f04a		       a2 00		      LDX	#0
    239  f04c		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    240  f04f		       85 a6		      STA	StartSWCHB	; For game over
    241  f051		       29 c0		      AND	#%11000000
    242  f053		       f0 0b		      BEQ	CallConfigureDifficulty
    243  f055		       e8		      INX
    244  f056		       c9 80		      CMP	#%10000000
    245  f058		       f0 06		      BEQ	CallConfigureDifficulty
    246  f05a		       e8		      INX
    247  f05b		       c9 40		      CMP	#%01000000
    248  f05d		       f0 01		      BEQ	CallConfigureDifficulty
    249  f05f		       e8		      INX
    250  f060
    251  f060				   CallConfigureDifficulty
    252  f060		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    253  f062		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    254  f064		       a5 c0		      LDA	GameStatus
    255  f066		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    256  f068				   NextCar
    257  f068		       a4 a9		      LDY	CurrentCarId
    258  f06a		       c8		      INY
    259  f06b		       98		      TYA
    260  f06c		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    261  f06e		       85 a9		      STA	CurrentCarId
    262  f070				   StoreCurrentDifficulty
    263  f070		       86 c4		      STX	CurrentDifficulty
    264  f072		       20 ac f7 	      JSR	ConfigureDifficulty
    265  f075
    266  f075				   ConfigureCarSprite
    267  f075		       a4 a9		      LDY	CurrentCarId
    268  f077		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    269  f07a		       85 a7		      STA	CarSpritePointerL
    270  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    271  f07f		       85 a8		      STA	CarSpritePointerH
    272  f081
    273  f081				   SetGameNotRunning
    274  f081		       a9 00		      LDA	#0
    275  f083		       85 c0		      STA	GameStatus
    276  f085
    277  f085				   ConfigureOneSecondTimer
    278  f085		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    279  f087		       85 cf		      STA	OneSecondConter
    280  f089
    281  f089				   HPositioning
    282  f089		       85 02		      STA	WSYNC
    283  f08b
    284  f08b		       a9 30		      LDA	#%00110000	;2 Missile Size
    285  f08d		       85 04		      STA	NUSIZ0	;3
    286  f08f		       85 05		      STA	NUSIZ1	;3
    287  f091
    288  f091		       a9 35		      LDA	#PLAYER_0_X_START	;2
    289  f093		       85 b9		      STA	Player0X	;3
    290  f095
    291  f095		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    292  f097		       85 ba		      STA	CountdownTimer	;3
    293  f099
    294  f099		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    295  f09b		       85 d7		      STA	NextCheckpoint
    296  f09d
    297  f09d		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f09f					      SLEEP	11	;
      1  f09f				   .CYCLES    SET	11
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f					      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f					      ELSE
     12  f09f		       24 00		      bit	VSYNC
     13  f0a1					      ENDIF
     14  f0a1				   .CYCLES    SET	.CYCLES - 3
     15  f0a1					      ENDIF
     16  f0a1
     17  f0a1					      REPEAT	.CYCLES / 2
     18  f0a1		       ea		      nop
     17  f0a1					      REPEND
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     17  f0a3					      REPEND
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    299  f0a5		       85 11		      STA	RESP1
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    301  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2	;
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    303  f0ab		       85 12		      STA	RESM0
      0  f0ad					      SLEEP	2
      1  f0ad				   .CYCLES    SET	2
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad				  -	      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad				  -	      ELSE
     12  f0ad				  -	      bit	VSYNC
     13  f0ad				  -	      ENDIF
     14  f0ad				  -.CYCLES    SET	.CYCLES - 3
     15  f0ad					      ENDIF
     16  f0ad
     17  f0ad					      REPEAT	.CYCLES / 2
     18  f0ad		       ea		      nop
     19  f0ae					      REPEND
    305  f0ae		       85 13		      STA	RESM1
    306  f0b0
    307  f0b0		       a9 f0		      LDA	#$F0
    308  f0b2		       85 24		      STA	HMBL
    309  f0b4		       85 22		      STA	HMM0
    310  f0b6		       85 23		      STA	HMM1
    311  f0b8		       85 02		      STA	WSYNC
    312  f0ba		       85 2a		      STA	HMOVE
    313  f0bc		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    314  f0be		       85 2b		      STA	HMCLR
    315  f0c0
    316  f0c0							;SLEEP 24
    317  f0c0							;STA HMCLR
    318  f0c0
    319  f0c0							;VSYNC time
    320  f0c0				   MainLoop
    321  f0c0		       a9 02		      LDA	#2
    322  f0c2		       85 00		      STA	VSYNC
    323  f0c4		       85 02		      STA	WSYNC
    324  f0c6
    325  f0c6				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    326  f0c6		       a9 01		      LDA	#%00000001
    327  f0c8		       24 ac		      BIT	TextFlickerMode
    328  f0ca		       f0 05		      BEQ	TextSideFrameZero
    329  f0cc		       25 8d		      AND	FrameCount1
    330  f0ce		       4c d3 f0 	      JMP	StoreTextSize
    331  f0d1				   TextSideFrameZero
    332  f0d1		       25 8c		      AND	FrameCount0
    333  f0d3				   StoreTextSize
    334  f0d3		       85 ab		      STA	TextSide
    335  f0d5
    336  f0d5		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    337  f0d7		       85 2a		      STA	HMOVE	;2
    338  f0d9				   ConfigVBlankTimer
    339  f0d9		       a5 c5		      LDA	GameMode
    340  f0db		       c9 10		      CMP	#MAX_GAME_MODE
    341  f0dd		       f0 05		      BEQ	SetVblankTimerQrCode
    342  f0df		       a9 29		      LDA	#VBLANK_TIMER
    343  f0e1		       4c e6 f0 	      JMP	SetVblankTimer
    344  f0e4				   SetVblankTimerQrCode
    345  f0e4		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    346  f0e6				   SetVblankTimer
    347  f0e6		       85 02		      STA	WSYNC	;3
    348  f0e8		       8d 96 02 	      STA	TIM64T	;3	
    349  f0eb		       a9 00		      LDA	#0	;2
    350  f0ed		       85 00		      STA	VSYNC	;3	
    351  f0ef
    352  f0ef							;Read Fire Button before, will make it start the game for now.
    353  f0ef				   StartGame
    354  f0ef		       a5 0c		      LDA	INPT4	;3
    355  f0f1		       30 2e		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    356  f0f3		       a5 c0		      LDA	GameStatus	;3
    357  f0f5		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
    358  f0f7		       d0 28		      BNE	SkipGameStart
    359  f0f9		       a5 c5		      LDA	GameMode
    360  f0fb		       c9 10		      CMP	#MAX_GAME_MODE
    361  f0fd		       d0 0b		      BNE	SetGameRunning
    362  f0ff		       a9 00		      LDA	#0
    363  f101		       85 c5		      STA	GameMode
    364  f103		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    365  f105		       85 bc		      STA	SwitchDebounceCounter
    366  f107		       4c 21 f1 	      JMP	SkipGameStart
    367  f10a				   SetGameRunning
    368  f10a		       e6 c0		      INC	GameStatus
    369  f10c		       a9 00		      LDA	#0	;
    370  f10e		       85 8c		      STA	FrameCount0
    371  f110		       85 8d		      STA	FrameCount1
    372  f112		       a9 0a		      LDA	#10
    373  f114		       85 19		      STA	AUDV0
    374  f116		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    375  f118		       85 d5		      STA	ScoreFontColor
    376  f11a		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    377  f11c		       85 d6		      STA	ScoreFontColorHoldChange
    378  f11e		       4c 9d f1 	      JMP	SkipIncFC1	; Make the worse case stable
    379  f121				   SkipGameStart
    380  f121
    381  f121				   RandomizeGame
    382  f121		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    383  f123		       d0 30		      BNE	EndRandomizeGame
    384  f125		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    385  f127		       29 02		      AND	#%00000010
    386  f129		       f0 27		      BEQ	DeterministicGame
    387  f12b		       a6 96		      LDX	TrafficOffset1 + 2
    388  f12d		       bd 00 fe 	      LDA	AesTable,X
    389  f130		       45 8c		      EOR	FrameCount0
    390  f132		       85 96		      STA	TrafficOffset1 + 2
    391  f134		       a6 9a		      LDX	TrafficOffset2 + 2
    392  f136		       bd 00 fe 	      LDA	AesTable,X
    393  f139		       45 8c		      EOR	FrameCount0
    394  f13b		       85 9a		      STA	TrafficOffset2 + 2
    395  f13d		       a6 9e		      LDX	TrafficOffset3 + 2
    396  f13f		       bd 00 fe 	      LDA	AesTable,X
    397  f142		       45 8c		      EOR	FrameCount0
    398  f144		       85 9e		      STA	TrafficOffset3 + 2
    399  f146		       a6 a2		      LDX	TrafficOffset4 + 2
    400  f148		       bd 00 fe 	      LDA	AesTable,X
    401  f14b		       45 8c		      EOR	FrameCount0
    402  f14d		       85 a2		      STA	TrafficOffset4 + 2
    403  f14f		       4c 55 f1 	      JMP	EndRandomizeGame
    404  f152
    405  f152				   DeterministicGame
    406  f152		       20 d7 f7 	      JSR	DefaultOffsets
    407  f155
    408  f155				   EndRandomizeGame
    409  f155
    410  f155				   ReadSwitches
    411  f155		       a6 bc		      LDX	SwitchDebounceCounter
    412  f157		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    413  f159		       a9 01		      LDA	#%00000001
    414  f15b		       2c 82 02 	      BIT	SWCHB
    415  f15e		       d0 07		      BNE	SkipReset
    416  f160		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    417  f162		       85 bc		      STA	SwitchDebounceCounter
    418  f164		       4c 14 f0 	      JMP	Start
    419  f167				   SkipReset
    420  f167
    421  f167				   GameModeSelect
    422  f167		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    423  f169		       d0 27		      BNE	SkipGameSelect
    424  f16b		       20 ac f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    425  f16e				   ReadDpadParallax
    426  f16e		       ad 80 02 	      LDA	SWCHA
    427  f171		       29 f0		      AND	#%11110000
    428  f173		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    429  f175		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    430  f177		       85 88		      STA	ParallaxMode
    431  f179				   ContinueGameSelect
    432  f179		       a9 02		      LDA	#%00000010
    433  f17b		       2c 82 02 	      BIT	SWCHB
    434  f17e		       d0 12		      BNE	SkipGameSelect
    435  f180		       a6 c5		      LDX	GameMode
    436  f182		       e0 10		      CPX	#MAX_GAME_MODE
    437  f184		       f0 04		      BEQ	ResetGameMode
    438  f186		       e8		      INX
    439  f187		       4c 8c f1 	      JMP	StoreGameMode
    440  f18a				   ResetGameMode
    441  f18a		       a2 00		      LDX	#0
    442  f18c				   StoreGameMode
    443  f18c		       86 c5		      STX	GameMode
    444  f18e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    445  f190		       85 bc		      STA	SwitchDebounceCounter
    446  f192				   SkipGameSelect
    447  f192		       4c 97 f1 	      JMP	EndReadSwitches
    448  f195				   DecrementSwitchDebounceCounter
    449  f195		       c6 bc		      DEC	SwitchDebounceCounter
    450  f197				   EndReadSwitches
    451  f197
    452  f197				   CountFrame
    453  f197		       e6 8c		      INC	FrameCount0	; 5
    454  f199		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    455  f19b		       e6 8d		      INC	FrameCount1	; 5 
    456  f19d				   SkipIncFC1
    457  f19d
    458  f19d				   CallDrawQrCode
    459  f19d		       a5 c5		      LDA	GameMode
    460  f19f		       c9 10		      CMP	#MAX_GAME_MODE
    461  f1a1		       d0 03		      BNE	TestIsGameRunning
    462  f1a3		       4c 64 fc 	      JMP	DrawQrCode
    463  f1a6
    464  f1a6							;Does not update the game if not running
    465  f1a6				   TestIsGameRunning
    466  f1a6		       a5 c0		      LDA	GameStatus	;3
    467  f1a8		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    468  f1aa		       4c b6 f3 	      JMP	SkipUpdateLogic
    469  f1ad				   ContinueWithGameLogic
    470  f1ad
    471  f1ad				   EverySecond		; 64 frames to be more precise
    472  f1ad		       a9 3f		      LDA	#%00111111
    473  f1af		       25 8c		      AND	FrameCount0
    474  f1b1		       d0 06		      BNE	SkipEverySecondAction
    475  f1b3		       c5 ba		      CMP	CountdownTimer
    476  f1b5		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    477  f1b7		       c6 ba		      DEC	CountdownTimer
    478  f1b9				   SkipEverySecondAction
    479  f1b9
    480  f1b9				   ChangeTextFlickerMode
    481  f1b9		       a5 bc		      LDA	SwitchDebounceCounter
    482  f1bb		       d0 0d		      BNE	EndChangeTextFlickerMode
    483  f1bd		       ad 82 02 	      LDA	SWCHB
    484  f1c0		       29 02		      AND	#%00000010	;Game select
    485  f1c2		       d0 06		      BNE	EndChangeTextFlickerMode
    486  f1c4		       e6 ac		      INC	TextFlickerMode
    487  f1c6		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    488  f1c8		       85 bc		      STA	SwitchDebounceCounter
    489  f1ca				   EndChangeTextFlickerMode
    490  f1ca
    491  f1ca				   BreakOnTimeOver		; Uses LDX as the breaking speed
    492  f1ca		       a2 00		      LDX	#0
    493  f1cc		       a5 ba		      LDA	CountdownTimer
    494  f1ce		       d0 0b		      BNE	Break
    495  f1d0		       a4 a9		      LDY	CurrentCarId
    496  f1d2		       a5 8c		      LDA	FrameCount0
    497  f1d4		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    498  f1d7		       d0 02		      BNE	Break
    499  f1d9		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    500  f1db
    501  f1db				   Break
    502  f1db		       a9 20		      LDA	#%00100000	;Down in controller
    503  f1dd		       2c 80 02 	      BIT	SWCHA
    504  f1e0		       d0 0e		      BNE	BreakNonZero
    505  f1e2		       a5 0c		      LDA	INPT4	;3
    506  f1e4		       10 08		      BPL	BreakWhileAccelerating
    507  f1e6		       a4 8f		      LDY	Player0SpeedH
    508  f1e8		       be dd ff 	      LDX	BreakSpeedTable,Y	; Different break speeds depending on speed.
    509  f1eb		       4c f0 f1 	      JMP	BreakNonZero
    510  f1ee				   BreakWhileAccelerating		; Allow better control while breaking.
    511  f1ee		       a2 06		      LDX	#(BREAK_SPEED / 2)
    512  f1f0
    513  f1f0				   BreakNonZero
    514  f1f0		       e0 00		      CPX	#0
    515  f1f2		       f0 2b		      BEQ	SkipBreak
    516  f1f4		       86 b0		      STX	Tmp0
    517  f1f6
    518  f1f6				   DecreaseSpeed
    519  f1f6		       38		      SEC
    520  f1f7		       a5 8e		      LDA	Player0SpeedL
    521  f1f9		       e5 b0		      SBC	Tmp0
    522  f1fb		       85 8e		      STA	Player0SpeedL
    523  f1fd		       a5 8f		      LDA	Player0SpeedH
    524  f1ff		       e9 00		      SBC	#0
    525  f201		       85 8f		      STA	Player0SpeedH
    526  f203
    527  f203				   CheckMinSpeed
    528  f203		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    529  f205		       c9 00		      CMP	#CAR_MIN_SPEED_H
    530  f207		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    531  f209		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    532  f20b
    533  f20b				   CompareLBreakSpeed
    534  f20b		       a5 8e		      LDA	Player0SpeedL
    535  f20d		       c9 00		      CMP	#CAR_MIN_SPEED_L
    536  f20f		       90 03		      BCC	ResetMinSpeed	; Less than memory
    537  f211		       4c 1c f2 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    538  f214
    539  f214				   ResetMinSpeed
    540  f214		       a9 00		      LDA	#CAR_MIN_SPEED_H
    541  f216		       85 8f		      STA	Player0SpeedH
    542  f218		       a9 00		      LDA	#CAR_MIN_SPEED_L
    543  f21a		       85 8e		      STA	Player0SpeedL
    544  f21c
    545  f21c				   SkipAccelerateIfBreaking
    546  f21c		       4c 61 f2 	      JMP	SkipAccelerate
    547  f21f				   SkipBreak
    548  f21f
    549  f21f				   Acelerates
    550  f21f		       a5 ba		      LDA	CountdownTimer
    551  f221		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    552  f223
    553  f223				   ContinueAccelerateTest
    554  f223		       a5 0c		      LDA	INPT4	;3
    555  f225		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    556  f227		       a9 10		      LDA	#%00010000	;UP in controller
    557  f229		       2c 80 02 	      BIT	SWCHA
    558  f22c		       d0 33		      BNE	SkipAccelerate
    559  f22e
    560  f22e				   IncreaseCarSpeed
    561  f22e		       a2 02		      LDX	#2
    562  f230		       a4 a9		      LDY	CurrentCarId
    563  f232				   IncreaseCarSpeedLoop
    564  f232							;Adds speed
    565  f232		       18		      CLC
    566  f233		       a5 aa		      LDA	AccelerateBuffer
    567  f235		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    568  f238		       85 aa		      STA	AccelerateBuffer
    569  f23a		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    570  f23c		       e6 8e		      INC	Player0SpeedL
    571  f23e		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    572  f240		       e6 8f		      INC	Player0SpeedH
    573  f242				   ContinueIncreaseSpeedLoop
    574  f242		       ca		      DEX
    575  f243		       d0 ed		      BNE	IncreaseCarSpeedLoop
    576  f245				   SkipIncreaseCarSpeed
    577  f245
    578  f245				   CheckIfAlreadyMaxSpeed
    579  f245		       a5 8f		      LDA	Player0SpeedH
    580  f247		       c9 02		      CMP	#CAR_MAX_SPEED_H
    581  f249		       90 16		      BCC	SkipAccelerate	; less than my max speed
    582  f24b		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    583  f24d							;High bit is max, compare the low
    584  f24d		       a4 a9		      LDY	CurrentCarId
    585  f24f		       a5 8e		      LDA	Player0SpeedL
    586  f251		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    587  f254		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    588  f256							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    589  f256
    590  f256				   ResetToMaxSpeed		; Speed is more, or is already max
    591  f256		       a9 02		      LDA	#CAR_MAX_SPEED_H
    592  f258		       85 8f		      STA	Player0SpeedH
    593  f25a		       a4 a9		      LDY	CurrentCarId
    594  f25c		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    595  f25f		       85 8e		      STA	Player0SpeedL
    596  f261				   SkipAccelerate
    597  f261
    598  f261				   InitUpdateOffsets
    599  f261		       a2 00		      LDX	#0	; Memory Offset 24 bit
    600  f263		       a0 00		      LDY	#0	; Line Speeds 16 bits
    601  f265		       a5 91		      LDA	TrafficOffset0 + 1	;
    602  f267		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    603  f269		       a5 c5		      LDA	GameMode
    604  f26b		       29 04		      AND	#%00000100	; GameModes with high delta
    605  f26d		       f0 02		      BEQ	UpdateOffsets
    606  f26f		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    607  f271
    608  f271				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    609  f271		       38		      SEC
    610  f272		       a5 8e		      LDA	Player0SpeedL
    611  f274		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    612  f277		       85 b0		      STA	Tmp0
    613  f279		       c8		      INY
    614  f27a		       a5 8f		      LDA	Player0SpeedH
    615  f27c		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    616  f27f		       85 b1		      STA	Tmp1
    617  f281		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    618  f283		       e9 00		      SBC	#0
    619  f285		       85 b2		      STA	Tmp2
    620  f287
    621  f287				   AddsTheResult
    622  f287		       18		      CLC
    623  f288		       a5 b0		      LDA	Tmp0
    624  f28a		       75 90		      ADC	TrafficOffset0,X
    625  f28c		       95 90		      STA	TrafficOffset0,X
    626  f28e		       e8		      INX
    627  f28f		       a5 b1		      LDA	Tmp1
    628  f291		       75 90		      ADC	TrafficOffset0,X
    629  f293		       95 90		      STA	TrafficOffset0,X
    630  f295		       e8		      INX
    631  f296		       a5 b2		      LDA	Tmp2	; Carry
    632  f298		       75 90		      ADC	TrafficOffset0,X
    633  f29a		       95 90		      STA	TrafficOffset0,X
    634  f29c		       90 06		      BCC	CalculateOffsetCache
    635  f29e		       e0 02		      CPX	#2	;MSB offset 0
    636  f2a0		       d0 02		      BNE	CalculateOffsetCache
    637  f2a2		       e6 bb		      INC	Traffic0Msb
    638  f2a4
    639  f2a4				   CalculateOffsetCache
    640  f2a4		       e8		      INX
    641  f2a5		       38		      SEC
    642  f2a6		       69 00		      ADC	#0	;Increment by one
    643  f2a8		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    644  f2aa
    645  f2aa				   PrepareNextUpdateLoop
    646  f2aa		       c8		      INY
    647  f2ab		       e8		      INX
    648  f2ac		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    649  f2ae		       d0 c1		      BNE	UpdateOffsets
    650  f2b0
    651  f2b0				   BcdScore		; 48
    652  f2b0		       a5 91		      LDA	TrafficOffset0 + 1	;3
    653  f2b2		       45 b3		      EOR	Tmp3	;3
    654  f2b4		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    655  f2b6		       f0 1b		      BEQ	FinishBcdScore	;2
    656  f2b8
    657  f2b8				   ContinueBcdScore
    658  f2b8		       f8		      SED		;2
    659  f2b9		       18		      CLC		;2
    660  f2ba		       a5 b4		      LDA	ScoreBcd0	;3
    661  f2bc		       69 01		      ADC	#1	;2
    662  f2be		       85 b4		      STA	ScoreBcd0	;3
    663  f2c0		       a5 b5		      LDA	ScoreBcd1	;3
    664  f2c2		       69 00		      ADC	#0	;2
    665  f2c4		       85 b5		      STA	ScoreBcd1	;3
    666  f2c6		       a5 b6		      LDA	ScoreBcd2	;3
    667  f2c8		       69 00		      ADC	#0	;2
    668  f2ca		       85 b6		      STA	ScoreBcd2	;3
    669  f2cc		       a5 b7		      LDA	ScoreBcd3	;3
    670  f2ce		       69 00		      ADC	#0	;2
    671  f2d0		       85 b7		      STA	ScoreBcd3	;3
    672  f2d2		       d8		      CLD		;2
    673  f2d3				   FinishBcdScore
    674  f2d3
    675  f2d3							;Until store the movemnt, LDX contains the value to be stored.
    676  f2d3				   TestCollision		;
    677  f2d3							; see if player0 colides with the rest
    678  f2d3		       a5 00		      LDA	CXM0P
    679  f2d5		       05 01		      ORA	CXM1P
    680  f2d7		       05 01		      ORA	CXM1P
    681  f2d9		       05 02		      ORA	CXP0FB
    682  f2db		       05 07		      ORA	CXPPMM
    683  f2dd		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    684  f2df		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    685  f2e1		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    686  f2e3		       d0 3a		      BNE	NoCollision
    687  f2e5		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    688  f2e7		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    689  f2e9		       f0 34		      BEQ	NoCollision
    690  f2eb		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    691  f2ed		       f0 30		      BEQ	NoCollision
    692  f2ef		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    693  f2f1		       85 b8		      STA	CollisionCounter	;and store as colision.
    694  f2f3				   CountBcdColision
    695  f2f3		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    696  f2f5		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    697  f2f7		       f0 1d		      BEQ	SkipSetColisionSpeedL
    698  f2f9		       f8		      SED		;2
    699  f2fa		       18		      CLC		;2
    700  f2fb		       a5 cb		      LDA	HitCountBcd0	;3
    701  f2fd		       69 01		      ADC	#1	;3
    702  f2ff		       85 cb		      STA	HitCountBcd0	;3
    703  f301		       a5 cc		      LDA	HitCountBcd1	;3
    704  f303		       69 00		      ADC	#0	;2
    705  f305		       85 cc		      STA	HitCountBcd1	;3
    706  f307		       d8		      CLD		;2
    707  f308				   EndCountBcdColision
    708  f308		       a5 8f		      LDA	Player0SpeedH
    709  f30a		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    710  f30c		       a9 10		      LDA	#COLLISION_SPEED_L
    711  f30e		       c5 8e		      CMP	Player0SpeedL
    712  f310		       b0 04		      BCS	SkipSetColisionSpeedL
    713  f312				   SetColisionSpeedL
    714  f312		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    715  f314		       85 8e		      STA	Player0SpeedL
    716  f316				   SkipSetColisionSpeedL
    717  f316		       a9 00		      LDA	#0
    718  f318		       85 8f		      STA	Player0SpeedH
    719  f31a		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    720  f31c		       4c 6a f3 	      JMP	StoreHMove	; We keep position consistent
    721  f31f				   NoCollision
    722  f31f
    723  f31f				   DecrementCollision
    724  f31f		       a4 b8		      LDY	CollisionCounter
    725  f321		       f0 07		      BEQ	FinishDecrementCollision
    726  f323		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    727  f325		       85 04		      STA	NUSIZ0
    728  f327		       88		      DEY
    729  f328		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    730  f32a				   FinishDecrementCollision
    731  f32a
    732  f32a				   ResetPlayerSize
    733  f32a		       d0 04		      BNE	FinishResetPlayerSize
    734  f32c		       a9 30		      LDA	#%00110000
    735  f32e		       85 04		      STA	NUSIZ0	;
    736  f330				   FinishResetPlayerSize
    737  f330
    738  f330				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    739  f330		       c0 01		      CPY	#1	; Last frame before reset
    740  f332		       d0 05		      BNE	SkipResetPlayerPosition
    741  f334		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    742  f336		       4c 6a f3 	      JMP	StoreHMove
    743  f339				   SkipResetPlayerPosition
    744  f339
    745  f339				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    746  f339		       a5 a9		      LDA	CurrentCarId
    747  f33b		       c9 03		      CMP	#CAR_ID_DRAGSTER
    748  f33d		       d0 08		      BNE	PrepareReadXAxis
    749  f33f		       a2 00		      LDX	#0
    750  f341		       a5 8c		      LDA	FrameCount0
    751  f343		       29 01		      AND	#DRAGSTER_TURN_MASK
    752  f345		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    753  f347
    754  f347							; for left and right, we're gonna 
    755  f347							; set the horizontal speed, and then do
    756  f347							; a single HMOVE.  We'll use X to hold the
    757  f347							; horizontal speed, then store it in the 
    758  f347							; appropriate register
    759  f347				   PrepareReadXAxis
    760  f347		       a2 00		      LDX	#0
    761  f349		       a4 b9		      LDY	Player0X
    762  f34b				   BeginReadLeft
    763  f34b		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    764  f34d		       a9 40		      LDA	#%01000000	;Left
    765  f34f		       2c 80 02 	      BIT	SWCHA
    766  f352		       d0 07		      BNE	SkipMoveLeft
    767  f354		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    768  f356		       c6 b9		      DEC	Player0X
    769  f358		       4c 6a f3 	      JMP	StoreHMove	; Cannot move left and right...
    770  f35b				   SkipMoveLeft
    771  f35b				   BeginReadRight
    772  f35b		       c0 36		      CPY	#PLAYER_0_MAX_X
    773  f35d		       f0 0b		      BEQ	SkipMoveRight	; At max already
    774  f35f		       a9 80		      LDA	#%10000000	;Right
    775  f361		       2c 80 02 	      BIT	SWCHA
    776  f364		       d0 04		      BNE	SkipMoveRight
    777  f366		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    778  f368		       e6 b9		      INC	Player0X
    779  f36a				   SkipMoveRight
    780  f36a				   StoreHMove
    781  f36a		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    782  f36c		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    783  f36e
    784  f36e				   DividePlayerSpeedBy4
    785  f36e		       a5 8f		      LDA	Player0SpeedH
    786  f370		       0a		      ASL
    787  f371		       0a		      ASL
    788  f372		       0a		      ASL
    789  f373		       0a		      ASL
    790  f374		       0a		      ASL
    791  f375		       0a		      ASL
    792  f376		       85 b1		      STA	Tmp1
    793  f378		       a5 8e		      LDA	Player0SpeedL
    794  f37a		       4a		      LSR
    795  f37b		       4a		      LSR
    796  f37c		       29 3f		      AND	#%00111111
    797  f37e		       05 b1		      ORA	Tmp1
    798  f380		       85 b0		      STA	Tmp0	; Division Result
    799  f382
    800  f382				   CalculateParallax1Offset		; 7/8 speed
    801  f382		       38		      SEC
    802  f383		       a5 8e		      LDA	Player0SpeedL
    803  f385		       e5 b0		      SBC	Tmp0
    804  f387		       85 b2		      STA	Tmp2
    805  f389		       a5 8f		      LDA	Player0SpeedH
    806  f38b		       e9 00		      SBC	#0
    807  f38d		       85 b3		      STA	Tmp3
    808  f38f
    809  f38f		       18		      CLC
    810  f390		       a5 c6		      LDA	ParallaxOffset1
    811  f392		       65 b2		      ADC	Tmp2
    812  f394		       85 c6		      STA	ParallaxOffset1
    813  f396		       a5 c7		      LDA	ParallaxOffset1 + 1
    814  f398		       65 b3		      ADC	Tmp3
    815  f39a		       85 c7		      STA	ParallaxOffset1 + 1
    816  f39c
    817  f39c				   CalculateParallax2Offset		; 6/8 speed
    818  f39c		       38		      SEC
    819  f39d		       a5 b2		      LDA	Tmp2
    820  f39f		       e5 b0		      SBC	Tmp0
    821  f3a1		       85 b2		      STA	Tmp2
    822  f3a3		       a5 b3		      LDA	Tmp3
    823  f3a5		       e9 00		      SBC	#0
    824  f3a7		       85 b3		      STA	Tmp3
    825  f3a9
    826  f3a9		       18		      CLC
    827  f3aa		       a5 c8		      LDA	ParallaxOffset2
    828  f3ac		       65 b2		      ADC	Tmp2
    829  f3ae		       85 c8		      STA	ParallaxOffset2
    830  f3b0		       a5 c9		      LDA	ParallaxOffset2 + 1
    831  f3b2		       65 b3		      ADC	Tmp3
    832  f3b4		       85 c9		      STA	ParallaxOffset2 + 1
    833  f3b6
    834  f3b6				   SkipUpdateLogic		; Continue here if not paused
    835  f3b6
    836  f3b6
    837  f3b6				   ProcessBorder		;Can be optimized (probably)
    838  f3b6		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    839  f3b8		       a5 88		      LDA	ParallaxMode
    840  f3ba		       c9 70		      CMP	#%01110000
    841  f3bc		       f0 1a		      BEQ	HorizontalParallaxMode
    842  f3be		       c9 d0		      CMP	#%11010000
    843  f3c0		       f0 0a		      BEQ	VerticalParallaxMode
    844  f3c2		       c9 b0		      CMP	#%10110000
    845  f3c4		       f0 0c		      BEQ	TachometerMode
    846  f3c6
    847  f3c6				   DefaultBorderMode
    848  f3c6		       20 56 f8 	      JSR	DefaultBorderLoop
    849  f3c9		       4c db f3 	      JMP	EndProcessingBorder
    850  f3cc				   VerticalParallaxMode
    851  f3cc		       20 cc f8 	      JSR	VerticalParallaxLoop
    852  f3cf		       4c db f3 	      JMP	EndProcessingBorder
    853  f3d2				   TachometerMode
    854  f3d2		       20 71 f8 	      JSR	PrepareTachometerBorderLoop
    855  f3d5		       4c db f3 	      JMP	EndProcessingBorder
    856  f3d8				   HorizontalParallaxMode
    857  f3d8		       20 08 f8 	      JSR	HorizontalParallaxLoop
    858  f3db
    859  f3db				   EndProcessingBorder
    860  f3db
    861  f3db				   ProcessScoreFontColor
    862  f3db		       a6 d6		      LDX	ScoreFontColorHoldChange
    863  f3dd		       f0 06		      BEQ	ResetScoreFontColor
    864  f3df		       ca		      DEX
    865  f3e0		       86 d6		      STX	ScoreFontColorHoldChange
    866  f3e2		       4c e9 f3 	      JMP	SkipScoreFontColor
    867  f3e5				   ResetScoreFontColor
    868  f3e5		       a9 f9		      LDA	#SCORE_FONT_COLOR
    869  f3e7		       85 d5		      STA	ScoreFontColor
    870  f3e9				   SkipScoreFontColor
    871  f3e9
    872  f3e9				   IsGameOver
    873  f3e9		       a5 ba		      LDA	CountdownTimer
    874  f3eb		       05 8e		      ORA	Player0SpeedL
    875  f3ed		       05 8f		      ORA	Player0SpeedH
    876  f3ef		       d0 0b		      BNE	IsCheckpoint
    877  f3f1		       a9 01		      LDA	#1
    878  f3f3		       85 d6		      STA	ScoreFontColorHoldChange
    879  f3f5		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    880  f3f7		       85 d5		      STA	ScoreFontColor
    881  f3f9		       4c 3d f4 	      JMP	SkipIsTimeOver
    882  f3fc
    883  f3fc				   IsCheckpoint
    884  f3fc		       a5 d7		      LDA	NextCheckpoint
    885  f3fe		       c5 92		      CMP	TrafficOffset0 + 2
    886  f400		       d0 2f		      BNE	SkipIsCheckpoint
    887  f402		       18		      CLC
    888  f403		       69 10		      ADC	#CHECKPOINT_INTERVAL
    889  f405		       85 d7		      STA	NextCheckpoint
    890  f407		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    891  f409		       85 d5		      STA	ScoreFontColor
    892  f40b		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    893  f40d		       85 d6		      STA	ScoreFontColorHoldChange
    894  f40f				   AddCheckpointBcd
    895  f40f		       f8		      SED		;2
    896  f410		       18		      CLC		;2
    897  f411		       a5 a4		      LDA	CheckpointBcd0	;3
    898  f413		       69 01		      ADC	#1	;3
    899  f415		       85 a4		      STA	CheckpointBcd0	;3
    900  f417		       a5 a5		      LDA	CheckpointBcd1	;3
    901  f419		       69 00		      ADC	#0	;2
    902  f41b		       85 a5		      STA	CheckpointBcd1	;3
    903  f41d		       d8		      CLD		;2
    904  f41e				   EndCheckpointBcd
    905  f41e		       a5 ba		      LDA	CountdownTimer
    906  f420		       18		      CLC
    907  f421		       65 c2		      ADC	CheckpointTime
    908  f423		       85 ba		      STA	CountdownTimer
    909  f425		       90 04		      BCC	JumpSkipTimeOver
    910  f427		       a9 ff		      LDA	#$FF
    911  f429		       85 ba		      STA	CountdownTimer	; Does not overflow!
    912  f42b				   JumpSkipTimeOver
    913  f42b		       20 9d f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    914  f42e		       4c 3d f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    915  f431				   SkipIsCheckpoint
    916  f431
    917  f431				   IsTimeOver
    918  f431		       a5 ba		      LDA	CountdownTimer
    919  f433		       d0 08		      BNE	SkipIsTimeOver
    920  f435		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    921  f437		       85 d6		      STA	ScoreFontColorHoldChange
    922  f439		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    923  f43b		       85 d5		      STA	ScoreFontColor
    924  f43d				   SkipIsTimeOver
    925  f43d
    926  f43d				   PrintEasterEggCondition
    927  f43d		       a5 8d		      LDA	FrameCount1
    928  f43f		       29 38		      AND	#%00111000
    929  f441		       05 c0		      ORA	GameStatus
    930  f443		       c9 38		      CMP	#%00111000
    931  f445		       d0 06		      BNE	ChooseTextSide
    932  f447		       20 20 f9 	      JSR	PrintEasterEgg
    933  f44a		       4c 3c f5 	      JMP	RightScoreWriteEnd
    934  f44d
    935  f44d							;Could be done during on vblank to save this comparisson time (before draw score), 
    936  f44d							;but I am saving vblank cycles for now, in case of 2 players.
    937  f44d				   ChooseTextSide		; 
    938  f44d		       a5 ab		      LDA	TextSide	;3
    939  f44f		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    940  f451		       4c d2 f4 	      JMP	RightScoreWrite
    941  f454
    942  f454				   LeftScoreWrite
    943  f454		       a5 d5		      LDA	ScoreFontColor
    944  f456		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    945  f458		       f0 4e		      BEQ	PrintCheckpoint
    946  f45a		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    947  f45c		       f0 52		      BEQ	PrintStartGame
    948  f45e		       a5 c0		      LDA	GameStatus
    949  f460		       f0 56		      BEQ	PrintHellwayLeft
    950  f462				   WriteDistance		;Not optimized yet, ugly code.
    951  f462				   Digit0Distance
    952  f462		       a5 91		      LDA	TrafficOffset0 + 1	;3
    953  f464		       4a		      LSR		; 2
    954  f465		       4a		      LSR		; 2
    955  f466		       4a		      LSR		; 2
    956  f467		       4a		      LSR		; 2
    957  f468		       aa		      TAX		; 2
    958  f469		       bd be fd 	      LDA	FontLookup,X	;4
    959  f46c		       85 d3		      STA	ScoreD3	;3
    960  f46e
    961  f46e				   Digit1Distance
    962  f46e		       a5 92		      LDA	TrafficOffset0 + 2	;3
    963  f470		       29 0f		      AND	#%00001111	;2
    964  f472		       aa		      TAX		; 2
    965  f473		       bd be fd 	      LDA	FontLookup,X	;4 
    966  f476		       85 d2		      STA	ScoreD2	;3
    967  f478
    968  f478				   Digit2Distance
    969  f478		       a5 92		      LDA	TrafficOffset0 + 2	;3
    970  f47a		       4a		      LSR		; 2
    971  f47b		       4a		      LSR		; 2
    972  f47c		       4a		      LSR		; 2
    973  f47d		       4a		      LSR		; 2
    974  f47e		       aa		      TAX		; 2
    975  f47f		       bd be fd 	      LDA	FontLookup,X	;4
    976  f482		       85 d1		      STA	ScoreD1	;3
    977  f484
    978  f484				   Digit3Distance
    979  f484		       a5 bb		      LDA	Traffic0Msb	;3
    980  f486		       29 0f		      AND	#%00001111	;2
    981  f488		       aa		      TAX		; 2
    982  f489		       bd be fd 	      LDA	FontLookup,X	;4 
    983  f48c		       85 d0		      STA	ScoreD0	;3
    984  f48e
    985  f48e				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    986  f48e		       a5 bb		      LDA	Traffic0Msb
    987  f490		       29 f0		      AND	#%11110000	;2
    988  f492		       d0 07		      BNE	DrawDistanceExtraDigit
    989  f494		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    990  f496		       85 d4		      STA	ScoreD4	;3
    991  f498		       4c a5 f4 	      JMP	EndDrawDistance
    992  f49b				   DrawDistanceExtraDigit
    993  f49b		       4a		      LSR		; 2
    994  f49c		       4a		      LSR		; 2
    995  f49d		       4a		      LSR		; 2
    996  f49e		       4a		      LSR		; 2
    997  f49f		       aa		      TAX		; 2
    998  f4a0		       bd be fd 	      LDA	FontLookup,X	;4
    999  f4a3		       85 d4		      STA	ScoreD4	;3
   1000  f4a5
   1001  f4a5				   EndDrawDistance
   1002  f4a5		       4c 3c f5 	      JMP	RightScoreWriteEnd	;3
   1003  f4a8
   1004  f4a8				   PrintCheckpoint
   1005  f4a8		       a2 00		      LDX	#<CheckpointText
   1006  f4aa		       20 ea f7 	      JSR	PrintStaticText
   1007  f4ad		       4c 3c f5 	      JMP	RightScoreWriteEnd	;3
   1008  f4b0				   PrintStartGame
   1009  f4b0		       a2 23		      LDX	#<GoText
   1010  f4b2		       20 ea f7 	      JSR	PrintStaticText
   1011  f4b5		       4c 3c f5 	      JMP	RightScoreWriteEnd	;3
   1012  f4b8
   1013  f4b8				   PrintHellwayLeft
   1014  f4b8		       a5 8d		      LDA	FrameCount1
   1015  f4ba		       29 01		      AND	#1
   1016  f4bc		       d0 05		      BNE	PrintCreditsLeft
   1017  f4be		       a2 05		      LDX	#<HellwayLeftText
   1018  f4c0		       4c c5 f4 	      JMP	PrintGameMode
   1019  f4c3				   PrintCreditsLeft
   1020  f4c3		       a2 0f		      LDX	#<OpbText
   1021  f4c5
   1022  f4c5				   PrintGameMode
   1023  f4c5		       20 ea f7 	      JSR	PrintStaticText
   1024  f4c8		       a6 c5		      LDX	GameMode
   1025  f4ca		       bd be fd 	      LDA	FontLookup,X	;4 
   1026  f4cd		       85 d0		      STA	ScoreD0	;3
   1027  f4cf		       4c 3c f5 	      JMP	RightScoreWriteEnd	;3
   1028  f4d2
   1029  f4d2				   RightScoreWrite
   1030  f4d2		       a5 c0		      LDA	GameStatus
   1031  f4d4		       f0 45		      BEQ	PrintHellwayRight
   1032  f4d6		       a5 d5		      LDA	ScoreFontColor
   1033  f4d8		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1034  f4da		       f0 52		      BEQ	PrintGameOver
   1035  f4dc				   Digit0Timer
   1036  f4dc		       a5 ba		      LDA	CountdownTimer	;3
   1037  f4de		       29 0f		      AND	#%00001111	;2
   1038  f4e0		       aa		      TAX		; 2
   1039  f4e1		       bd be fd 	      LDA	FontLookup,X	;4 
   1040  f4e4		       85 d1		      STA	ScoreD1	;3
   1041  f4e6
   1042  f4e6				   Digit1Timer
   1043  f4e6		       a5 ba		      LDA	CountdownTimer	;3
   1044  f4e8		       4a		      LSR		; 2
   1045  f4e9		       4a		      LSR		; 2
   1046  f4ea		       4a		      LSR		; 2
   1047  f4eb		       4a		      LSR		; 2
   1048  f4ec		       aa		      TAX		; 2
   1049  f4ed		       bd be fd 	      LDA	FontLookup,X	;4
   1050  f4f0		       85 d0		      STA	ScoreD0	;3
   1051  f4f2
   1052  f4f2		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1053  f4f4		       85 d2		      STA	ScoreD2	;3
   1054  f4f6
   1055  f4f6				   Digit0Speed
   1056  f4f6		       a5 8e		      LDA	Player0SpeedL
   1057  f4f8		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1058  f4fa		       4a		      LSR		; 2
   1059  f4fb		       4a		      LSR		; 2
   1060  f4fc		       aa		      TAX		; 2
   1061  f4fd		       bd be fd 	      LDA	FontLookup,X	;4
   1062  f500		       85 d4		      STA	ScoreD4	;3
   1063  f502
   1064  f502				   Digit1Speed
   1065  f502		       a5 8e		      LDA	Player0SpeedL
   1066  f504		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1067  f506		       18		      CLC
   1068  f507		       2a		      ROL		;First goes into carry
   1069  f508		       2a		      ROL
   1070  f509		       2a		      ROL
   1071  f50a		       85 b0		      STA	Tmp0
   1072  f50c		       a5 8f		      LDA	Player0SpeedH
   1073  f50e		       0a		      ASL
   1074  f50f		       0a		      ASL
   1075  f510		       05 b0		      ORA	Tmp0
   1076  f512		       aa		      TAX		; 2
   1077  f513		       bd be fd 	      LDA	FontLookup,X	;4
   1078  f516		       85 d3		      STA	ScoreD3	;3
   1079  f518		       4c 3c f5 	      JMP	RightScoreWriteEnd
   1080  f51b
   1081  f51b				   PrintHellwayRight
   1082  f51b		       a5 8d		      LDA	FrameCount1
   1083  f51d		       29 01		      AND	#1
   1084  f51f		       d0 05		      BNE	PrintCreditsRight
   1085  f521		       a2 0a		      LDX	#<HellwayRightText
   1086  f523		       4c 28 f5 	      JMP	PrintRightIntro
   1087  f526				   PrintCreditsRight
   1088  f526		       a2 14		      LDX	#<YearText
   1089  f528				   PrintRightIntro
   1090  f528		       20 ea f7 	      JSR	PrintStaticText
   1091  f52b		       4c 3c f5 	      JMP	RightScoreWriteEnd
   1092  f52e				   PrintGameOver
   1093  f52e		       a5 8c		      LDA	FrameCount0
   1094  f530		       30 05		      BMI	PrintOverText
   1095  f532		       a2 19		      LDX	#<GameText
   1096  f534		       4c 39 f5 	      JMP	StoreGameOverText
   1097  f537				   PrintOverText
   1098  f537		       a2 1e		      LDX	#<OverText
   1099  f539				   StoreGameOverText
   1100  f539		       20 ea f7 	      JSR	PrintStaticText
   1101  f53c				   RightScoreWriteEnd
   1102  f53c
   1103  f53c
   1104  f53c				   ScoreBackgroundColor
   1105  f53c		       a2 00		      LDX	#0
   1106  f53e		       ad 82 02 	      LDA	SWCHB
   1107  f541		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1108  f543		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1109  f545		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1110  f547		       a2 03		      LDX	#BACKGROUND_COLOR
   1111  f549				   BlackAndWhiteScoreBg
   1112  f549		       85 b2		      STA	Tmp2	; Score Background
   1113  f54b		       86 b3		      STX	Tmp3	; Traffic Background
   1114  f54d
   1115  f54d				   ConfigurePFForScore
   1116  f54d							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1117  f54d		       85 09		      STA	COLUBK
   1118  f54f		       20 5f f7 	      JSR	ClearAll
   1119  f552		       a9 02		      LDA	#%00000010	; Score mode
   1120  f554		       85 0a		      STA	CTRLPF
   1121  f556		       a5 ab		      LDA	TextSide	;3
   1122  f558		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1123  f55a				   LeftScoreOn
   1124  f55a		       a5 d5		      LDA	ScoreFontColor
   1125  f55c		       85 07		      STA	COLUP1
   1126  f55e		       a5 b2		      LDA	Tmp2
   1127  f560		       85 06		      STA	COLUP0
   1128  f562		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1129  f564		       85 b1		      STA	Tmp1
   1130  f566		       4c 75 f5 	      JMP	CallWaitForVblankEnd
   1131  f569				   RightScoreOn
   1132  f569		       a5 d5		      LDA	ScoreFontColor
   1133  f56b		       85 06		      STA	COLUP0
   1134  f56d		       a5 b2		      LDA	Tmp2
   1135  f56f		       85 07		      STA	COLUP1
   1136  f571		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1137  f573		       85 b1		      STA	Tmp1
   1138  f575
   1139  f575							; After here we are going to update the screen, No more heavy code
   1140  f575				   CallWaitForVblankEnd
   1141  f575		       20 90 fb 	      JSR	WaitForVblankEnd
   1142  f578
   1143  f578				   DrawScoreHud
   1144  f578		       20 92 f9 	      JSR	PrintScore
   1145  f57b
   1146  f57b		       85 02		      STA	WSYNC
   1147  f57d
   1148  f57d		       a5 0c		      LDA	INPT4	;3
   1149  f57f		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1150  f581		       a5 d5		      LDA	ScoreFontColor
   1151  f583		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1152  f585		       d0 0a		      BNE	WaitAnotherScoreLine
   1153  f587		       a5 ab		      LDA	TextSide	;3
   1154  f589		       d0 03		      BNE	LeftScoreOnGameOver
   1155  f58b		       4c 1d fb 	      JMP	DrawGameOverScreenRight
   1156  f58e				   LeftScoreOnGameOver
   1157  f58e		       4c 4f fa 	      JMP	DrawGameOverScreenLeft
   1158  f591
   1159  f591				   WaitAnotherScoreLine
   1160  f591		       85 02		      STA	WSYNC
   1161  f593
   1162  f593				   PrepareForTraffic
   1163  f593		       20 71 f7 	      JSR	ClearPF	; 32
   1164  f596
   1165  f596		       85 02		      STA	WSYNC
   1166  f598		       85 02		      STA	WSYNC
   1167  f59a
   1168  f59a		       a9 31		      LDA	#%00110001	; 2 Score mode
   1169  f59c		       85 0a		      STA	CTRLPF	;3
   1170  f59e
   1171  f59e		       a5 c3		      LDA	TrafficColor	;3
   1172  f5a0		       85 08		      STA	COLUPF	;3
   1173  f5a2
   1174  f5a2		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1175  f5a4		       85 07		      STA	COLUP1	;3
   1176  f5a6
   1177  f5a6		       a5 d5		      LDA	ScoreFontColor	;3
   1178  f5a8		       85 06		      STA	COLUP0	;3
   1179  f5aa
   1180  f5aa		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1181  f5ac
   1182  f5ac		       20 71 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1183  f5af
      0  f5af					      SLEEP	14
      1  f5af				   .CYCLES    SET	14
      2  f5af
      3  f5af				  -	      IF	.CYCLES < 2
      4  f5af				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5af				  -	      ERR
      6  f5af					      ENDIF
      7  f5af
      8  f5af				  -	      IF	.CYCLES & 1
      9  f5af				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5af				  -	      nop	0
     11  f5af				  -	      ELSE
     12  f5af				  -	      bit	VSYNC
     13  f5af				  -	      ENDIF
     14  f5af				  -.CYCLES    SET	.CYCLES - 3
     15  f5af					      ENDIF
     16  f5af
     17  f5af					      REPEAT	.CYCLES / 2
     18  f5af		       ea		      nop
     17  f5af					      REPEND
     18  f5b0		       ea		      nop
     17  f5b0					      REPEND
     18  f5b1		       ea		      nop
     17  f5b1					      REPEND
     18  f5b2		       ea		      nop
     17  f5b2					      REPEND
     18  f5b3		       ea		      nop
     17  f5b3					      REPEND
     18  f5b4		       ea		      nop
     17  f5b4					      REPEND
     18  f5b5		       ea		      nop
     19  f5b6					      REPEND
   1185  f5b6
   1186  f5b6		       a5 b3		      LDA	Tmp3	;3
   1187  f5b8		       85 09		      STA	COLUBK	;3
   1188  f5ba		       4c bf f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1189  f5bd							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1190  f5bd
   1191  f5bd							;main scanline loop...
   1192  f5bd				   ScanLoop
   1193  f5bd		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1194  f5bf
   1195  f5bf							;Start of next line!			
   1196  f5bf				   DrawCache		;63 Is the last line going to the top of the next frame?
   1197  f5bf		       a5 81		      LDA	PF0Cache	;3
   1198  f5c1		       85 0d		      STA	PF0	;3
   1199  f5c3
   1200  f5c3		       a5 82		      LDA	PF1Cache	;3
   1201  f5c5		       85 0e		      STA	PF1	;3
   1202  f5c7
   1203  f5c7		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1204  f5c9		       b0 04		      BCS	SkipDrawCar	;2
   1205  f5cb		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1206  f5cd		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1207  f5cf				   SkipDrawCar
   1208  f5cf
   1209  f5cf		       a5 84		      LDA	GRP1Cache	;3
   1210  f5d1		       85 1c		      STA	GRP1	;3
   1211  f5d3
   1212  f5d3		       a5 85		      LDA	ENABLCache	;3
   1213  f5d5		       85 1f		      STA	ENABL	;3
   1214  f5d7
   1215  f5d7		       a5 86		      LDA	ENAM0Cache	;3
   1216  f5d9		       85 1d		      STA	ENAM0	;3
   1217  f5db
   1218  f5db		       a5 87		      LDA	ENAM1Cache	;3
   1219  f5dd		       85 1e		      STA	ENAM1	;3
   1220  f5df
   1221  f5df		       a9 00		      LDA	#0	;2
   1222  f5e1							;STA PF1Cache ;3
   1223  f5e1		       85 84		      STA	GRP1Cache	;3
   1224  f5e3		       85 85		      STA	ENABLCache	;3
   1225  f5e5		       85 86		      STA	ENAM0Cache	;3
   1226  f5e7		       85 87		      STA	ENAM1Cache	; 3
   1227  f5e9
   1228  f5e9							;BEQ DrawTraffic3
   1229  f5e9				   DrawTraffic1 		; 33
   1230  f5e9		       98		      TYA		; 2
   1231  f5ea		       18		      CLC		; 2 
   1232  f5eb		       65 95		      ADC	TrafficOffset1 + 1	;3
   1233  f5ed		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1234  f5ef		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1235  f5f1		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1236  f5f3		       4c f8 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1237  f5f6				   EorOffsetWithCarry
   1238  f5f6		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1239  f5f8				   AfterEorOffsetWithCarry		;17
   1240  f5f8		       aa		      TAX		;2
   1241  f5f9		       bd 00 fe 	      LDA	AesTable,X	; 4
   1242  f5fc		       c5 c1		      CMP	TrafficChance	;3
   1243  f5fe		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1244  f600		       a9 ff		      LDA	#$FF	;2
   1245  f602		       85 84		      STA	GRP1Cache	;3
   1246  f604				   FinishDrawTraffic1
   1247  f604
   1248  f604				   DrawTraffic2 		; 33
   1249  f604		       98		      TYA		; 2
   1250  f605		       18		      CLC		; 2 
   1251  f606		       65 99		      ADC	TrafficOffset2 + 1	;3
   1252  f608		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1253  f60a		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1254  f60c		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1255  f60e		       4c 13 f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1256  f611				   EorOffsetWithCarry2
   1257  f611		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1258  f613				   AfterEorOffsetWithCarry2		;17
   1259  f613		       aa		      TAX		;2
   1260  f614		       bd 00 fe 	      LDA	AesTable,X	; 4
   1261  f617		       c5 c1		      CMP	TrafficChance	;3
   1262  f619		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1263  f61b		       a9 02		      LDA	#%00000010	;2
   1264  f61d		       85 85		      STA	ENABLCache	;3
   1265  f61f				   FinishDrawTraffic2
   1266  f61f
   1267  f61f							;STA WSYNC ;65 / 137
   1268  f61f
   1269  f61f							; LDA Tmp0 ; Flicker this line if drawing car
   1270  f61f							; BEQ FinishDrawTraffic4
   1271  f61f				   DrawTraffic3 		; 33
   1272  f61f		       98		      TYA		; 2
   1273  f620		       18		      CLC		; 2 
   1274  f621		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1275  f623		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1276  f625		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1277  f627		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1278  f629		       4c 2e f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1279  f62c				   EorOffsetWithCarry3
   1280  f62c		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1281  f62e				   AfterEorOffsetWithCarry3		;17
   1282  f62e		       aa		      TAX		;2
   1283  f62f		       bd 00 fe 	      LDA	AesTable,X	; 4
   1284  f632		       c5 c1		      CMP	TrafficChance	;3
   1285  f634		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1286  f636		       a9 02		      LDA	#%00000010	;2
   1287  f638		       85 86		      STA	ENAM0Cache
   1288  f63a				   FinishDrawTraffic3
   1289  f63a
   1290  f63a				   DrawTraffic4 		; 33
   1291  f63a		       98		      TYA		; 2
   1292  f63b		       18		      CLC		; 2 
   1293  f63c		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1294  f63e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1295  f640		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1296  f642		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1297  f644		       4c 49 f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1298  f647				   EorOffsetWithCarry4
   1299  f647		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1300  f649				   AfterEorOffsetWithCarry4		;17
   1301  f649		       aa		      TAX		;2
   1302  f64a		       bd 00 fe 	      LDA	AesTable,X	; 4
   1303  f64d		       c5 c1		      CMP	TrafficChance	;3
   1304  f64f		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1305  f651		       a9 02		      LDA	#%00000010	;2
   1306  f653		       85 87		      STA	ENAM1Cache	;3
   1307  f655				   FinishDrawTraffic4
   1308  f655
   1309  f655				   DrawTraffic0 		; 20
   1310  f655		       98		      TYA		;2
   1311  f656		       29 07		      AND	#%00000111	;2
   1312  f658		       aa		      TAX		;2
   1313  f659		       b5 d8		      LDA	ParallaxCache,X	;4
   1314  f65b		       85 82		      STA	PF1Cache	;3
   1315  f65d		       b5 f0		      LDA	ParallaxCache2,X	;4
   1316  f65f		       85 81		      STA	PF0Cache	;3
   1317  f661
   1318  f661				   SkipDrawTraffic0
   1319  f661
   1320  f661				   WhileScanLoop
   1321  f661		       88		      DEY		;2
   1322  f662		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1323  f664		       4c bd f5 	      JMP	ScanLoop	;3
   1324  f667				   FinishScanLoop		; 7 209 of 222
   1325  f667
   1326  f667		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1327  f669		       20 80 f7 	      JSR	LoadAll
   1328  f66c		       85 02		      STA	WSYNC	; do stuff!
   1329  f66e		       85 02		      STA	WSYNC
   1330  f670		       85 02		      STA	WSYNC
   1331  f672							;42 cycles to use here
   1332  f672
   1333  f672				   PrepareOverscan
   1334  f672		       a9 02		      LDA	#2
   1335  f674		       85 02		      STA	WSYNC
   1336  f676		       85 01		      STA	VBLANK
   1337  f678
   1338  f678		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1339  f67a		       8d 96 02 	      STA	TIM64T
   1340  f67d
   1341  f67d				   LeftSound		;58
   1342  f67d		       a5 ba		      LDA	CountdownTimer	;3
   1343  f67f		       f0 24		      BEQ	EngineOff	;2
   1344  f681		       a5 8e		      LDA	Player0SpeedL	;3
   1345  f683		       29 80		      AND	#%10000000	;2
   1346  f685		       05 8f		      ORA	Player0SpeedH	;3
   1347  f687		       18		      CLC		;2
   1348  f688		       2a		      ROL		;2
   1349  f689		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1350  f68b		       aa		      TAX		;2
   1351  f68c		       a5 8e		      LDA	Player0SpeedL	;3
   1352  f68e		       4a		      LSR		;2
   1353  f68f		       4a		      LSR		;2
   1354  f690		       4a		      LSR		;2
   1355  f691		       29 0f		      AND	#%00001111	;2
   1356  f693		       85 b0		      STA	Tmp0	;3
   1357  f695		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1358  f698		       38		      SEC		;2
   1359  f699		       e5 b0		      SBC	Tmp0	;3
   1360  f69b		       85 17		      STA	AUDF0	;3
   1361  f69d		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1362  f6a0		       85 15		      STA	AUDC0	;3
   1363  f6a2		       4c a9 f6 	      JMP	EndLeftSound	;3
   1364  f6a5				   EngineOff
   1365  f6a5		       a9 00		      LDA	#0
   1366  f6a7		       85 15		      STA	AUDC0
   1367  f6a9
   1368  f6a9				   EndLeftSound
   1369  f6a9
   1370  f6a9
   1371  f6a9				   RightSound		; 70 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1372  f6a9		       a5 d5		      LDA	ScoreFontColor	;3
   1373  f6ab		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1374  f6ad		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1375  f6af		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1376  f6b1		       f0 29		      BEQ	PlayCheckpoint	;2
   1377  f6b3		       a5 b8		      LDA	CollisionCounter	;3
   1378  f6b5		       c9 e0		      CMP	#$E0	;2
   1379  f6b7		       b0 14		      BCS	PlayColision	;2
   1380  f6b9		       a5 d7		      LDA	NextCheckpoint	;3
   1381  f6bb		       38		      SEC		;2
   1382  f6bc		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1383  f6be		       c9 02		      CMP	#$02	;2
   1384  f6c0		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1385  f6c2		       a5 ba		      LDA	CountdownTimer	; 3
   1386  f6c4		       f0 53		      BEQ	MuteRightSound	;2
   1387  f6c6		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1388  f6c8		       90 37		      BCC	PlayWarnTimeEnding	;4
   1389  f6ca		       4c 19 f7 	      JMP	MuteRightSound	;3
   1390  f6cd				   PlayColision
   1391  f6cd		       a9 1f		      LDA	#31
   1392  f6cf		       85 18		      STA	AUDF1
   1393  f6d1		       a9 08		      LDA	#8
   1394  f6d3		       85 16		      STA	AUDC1
   1395  f6d5		       a9 08		      LDA	#8
   1396  f6d7		       85 1a		      STA	AUDV1
   1397  f6d9		       4c 1d f7 	      JMP	EndRightSound
   1398  f6dc
   1399  f6dc				   PlayCheckpoint
   1400  f6dc		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1401  f6de		       4a		      LSR		;2
   1402  f6df		       4a		      LSR		;2
   1403  f6e0		       4a		      LSR		;2
   1404  f6e1		       85 18		      STA	AUDF1	;3
   1405  f6e3		       a9 0c		      LDA	#12	;2
   1406  f6e5		       85 16		      STA	AUDC1	;3
   1407  f6e7		       a9 06		      LDA	#6	;2
   1408  f6e9		       85 1a		      STA	AUDV1	;3
   1409  f6eb		       4c 1d f7 	      JMP	EndRightSound	;3
   1410  f6ee
   1411  f6ee				   PlayBeforeCheckpoint
   1412  f6ee		       a5 8c		      LDA	FrameCount0	;3
   1413  f6f0		       29 1c		      AND	#%00011100	;2
   1414  f6f2		       09 03		      ORA	#%00000011	;2
   1415  f6f4		       85 18		      STA	AUDF1	;3
   1416  f6f6		       a9 0c		      LDA	#12	;2
   1417  f6f8		       85 16		      STA	AUDC1	;3
   1418  f6fa		       a9 03		      LDA	#3	;2
   1419  f6fc		       85 1a		      STA	AUDV1	;3
   1420  f6fe		       4c 1d f7 	      JMP	EndRightSound	;3
   1421  f701
   1422  f701				   PlayWarnTimeEnding
   1423  f701		       a5 8c		      LDA	FrameCount0	;3
   1424  f703		       29 04		      AND	#%00000100	;2
   1425  f705		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1426  f707		       18		      CLC		;2
   1427  f708		       a9 0a		      LDA	#10	;2
   1428  f70a		       65 ba		      ADC	CountdownTimer
   1429  f70c		       85 18		      STA	AUDF1	;3
   1430  f70e		       a9 0c		      LDA	#12	;2
   1431  f710		       85 16		      STA	AUDC1	;3
   1432  f712		       a9 03		      LDA	#3	;2
   1433  f714		       85 1a		      STA	AUDV1	;3
   1434  f716		       4c 1d f7 	      JMP	EndRightSound	;3
   1435  f719
   1436  f719				   MuteRightSound
   1437  f719		       a9 00		      LDA	#0
   1438  f71b		       85 1a		      STA	AUDV1
   1439  f71d				   EndRightSound
   1440  f71d
   1441  f71d				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1442  f71d		       a5 c0		      LDA	GameStatus	;3
   1443  f71f		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1444  f721		       a5 d5		      LDA	ScoreFontColor	;3
   1445  f723		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1446  f725		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1447  f727		       c6 cf		      DEC	OneSecondConter	;5
   1448  f729		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1449  f72b
   1450  f72b		       f8		      SED		;2 BCD Operations after this point
   1451  f72c				   CountGlideTimeBcd
   1452  f72c		       a5 d5		      LDA	ScoreFontColor	;3
   1453  f72e		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1454  f730		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1455  f732		       18		      CLC		;2
   1456  f733		       a5 cd		      LDA	GlideTimeBcd0	;3
   1457  f735		       69 01		      ADC	#1	;3
   1458  f737		       85 cd		      STA	GlideTimeBcd0	;3
   1459  f739		       a5 ce		      LDA	GlideTimeBcd1	;3
   1460  f73b		       69 00		      ADC	#0	;2
   1461  f73d		       85 ce		      STA	GlideTimeBcd1	;3
   1462  f73f				   EndCountGlideTimeBcd
   1463  f73f				   IncreaseTotalTimerBcd
   1464  f73f		       18		      CLC		;2
   1465  f740		       a5 bd		      LDA	TimeBcd0	;3
   1466  f742		       69 01		      ADC	#1	;2
   1467  f744		       85 bd		      STA	TimeBcd0	;3
   1468  f746		       a5 be		      LDA	TimeBcd1	;3
   1469  f748		       69 00		      ADC	#0	;2
   1470  f74a		       85 be		      STA	TimeBcd1	;3
   1471  f74c		       a5 bf		      LDA	TimeBcd2	;3
   1472  f74e		       69 00		      ADC	#0	;2
   1473  f750		       85 bf		      STA	TimeBcd2	;3
   1474  f752
   1475  f752				   ResetOneSecondCounter
   1476  f752		       d8		      CLD		;2
   1477  f753		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1478  f755		       85 cf		      STA	OneSecondConter	;3
   1479  f757
   1480  f757				   EndExactlyEverySecond
   1481  f757
   1482  f757				   OverScanWait
   1483  f757		       ad 84 02 	      LDA	INTIM
   1484  f75a		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1485  f75c		       4c c0 f0 	      JMP	MainLoop
   1486  f75f
   1487  f75f				   Subroutines
   1488  f75f
   1489  f75f				   ClearAll		; 52
   1490  f75f		       a9 00		      LDA	#0	;2
   1491  f761		       85 1c		      STA	GRP1	;3
   1492  f763		       85 1f		      STA	ENABL	;3
   1493  f765		       85 1d		      STA	ENAM0	;3
   1494  f767		       85 1e		      STA	ENAM1	;3
   1495  f769		       85 84		      STA	GRP1Cache	;3
   1496  f76b		       85 85		      STA	ENABLCache	;3
   1497  f76d		       85 86		      STA	ENAM0Cache	;3
   1498  f76f		       85 87		      STA	ENAM1Cache	;3
   1499  f771
   1500  f771				   ClearPF		; 26
   1501  f771		       a9 00		      LDA	#0	;2
   1502  f773				   ClearPFSkipLDA0
   1503  f773		       85 0d		      STA	PF0	;3
   1504  f775		       85 0e		      STA	PF1	;3
   1505  f777		       85 0f		      STA	PF2	;3	
   1506  f779		       85 81		      STA	PF0Cache	;3
   1507  f77b		       85 82		      STA	PF1Cache	;3
   1508  f77d		       85 83		      STA	PF2Cache	;3 
   1509  f77f		       60		      RTS		;6
   1510  f780				   EndClearAll
   1511  f780
   1512  f780				   LoadAll		; 48
   1513  f780		       a5 81		      LDA	PF0Cache	;3
   1514  f782		       85 0d		      STA	PF0	;3
   1515  f784
   1516  f784		       a5 82		      LDA	PF1Cache	;3
   1517  f786		       85 0e		      STA	PF1	;3
   1518  f788
   1519  f788		       a5 83		      LDA	PF2Cache	;3
   1520  f78a		       85 0f		      STA	PF2	;3
   1521  f78c
   1522  f78c		       a5 84		      LDA	GRP1Cache	;3
   1523  f78e		       85 1c		      STA	GRP1	;3
   1524  f790
   1525  f790		       a5 85		      LDA	ENABLCache	;3
   1526  f792		       85 1f		      STA	ENABL	;3
   1527  f794
   1528  f794		       a5 86		      LDA	ENAM0Cache	;3
   1529  f796		       85 1d		      STA	ENAM0	;3
   1530  f798
   1531  f798		       a5 87		      LDA	ENAM1Cache	;3
   1532  f79a		       85 1e		      STA	ENAM1	;3
   1533  f79c
   1534  f79c		       60		      RTS		;6
   1535  f79d				   EndLoadAll
   1536  f79d
   1537  f79d				   NextDifficulty
   1538  f79d		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1539  f79f		       29 01		      AND	#%00000001
   1540  f7a1		       d0 24		      BNE	CheckRandomDifficulty
   1541  f7a3
   1542  f7a3		       a5 c4		      LDA	CurrentDifficulty
   1543  f7a5		       18		      CLC
   1544  f7a6		       69 01		      ADC	#1
   1545  f7a8		       29 03		      AND	#%00000011	; 0 to 3
   1546  f7aa		       85 c4		      STA	CurrentDifficulty
   1547  f7ac
   1548  f7ac				   ConfigureDifficulty
   1549  f7ac		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1550  f7ae		       b9 e4 ff 	      LDA	TrafficChanceTable,Y
   1551  f7b1		       85 c1		      STA	TrafficChance
   1552  f7b3		       b9 e0 ff 	      LDA	TrafficColorTable,Y
   1553  f7b6		       85 c3		      STA	TrafficColor
   1554  f7b8
   1555  f7b8		       a5 c5		      LDA	GameMode	;
   1556  f7ba		       29 01		      AND	#%00000001
   1557  f7bc		       f0 03		      BEQ	UseNextDifficultyTime
   1558  f7be		       4c c2 f7 	      JMP	StoreDifficultyTime
   1559  f7c1				   UseNextDifficultyTime
   1560  f7c1		       c8		      INY
   1561  f7c2				   StoreDifficultyTime
   1562  f7c2		       b9 e8 ff 	      LDA	TrafficTimeTable,Y
   1563  f7c5		       85 c2		      STA	CheckpointTime
   1564  f7c7
   1565  f7c7				   CheckRandomDifficulty
   1566  f7c7		       a5 c5		      LDA	GameMode
   1567  f7c9		       29 08		      AND	#%00001000	; Random difficulties
   1568  f7cb		       f0 09		      BEQ	ReturnFromNextDifficulty
   1569  f7cd				   RandomDifficulty
   1570  f7cd		       a6 8c		      LDX	FrameCount0
   1571  f7cf		       bd 00 fe 	      LDA	AesTable,X
   1572  f7d2							;EOR TrafficChance, no need, lets make life simple
   1573  f7d2		       29 3f		      AND	#%00111111
   1574  f7d4		       85 c1		      STA	TrafficChance
   1575  f7d6
   1576  f7d6				   ReturnFromNextDifficulty
   1577  f7d6		       60		      RTS
   1578  f7d7				   EndNextDifficulty
   1579  f7d7
   1580  f7d7				   DefaultOffsets
   1581  f7d7		       a9 20		      LDA	#$20
   1582  f7d9		       85 96		      STA	TrafficOffset1 + 2
   1583  f7db		       a9 40		      LDA	#$40
   1584  f7dd		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1585  f7df		       a9 60		      LDA	#$60
   1586  f7e1		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1587  f7e3		       a9 80		      LDA	#$80
   1588  f7e5		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1589  f7e7		       a9 a0		      LDA	#$A0
   1590  f7e9		       60		      RTS
   1591  f7ea
   1592  f7ea				   PrintStaticText		; Preload X with the offset referent to StaticText
   1593  f7ea		       bd 00 ff 	      LDA	StaticText,X
   1594  f7ed		       85 d0		      STA	ScoreD0
   1595  f7ef		       e8		      INX
   1596  f7f0		       bd 00 ff 	      LDA	StaticText,X
   1597  f7f3		       85 d1		      STA	ScoreD1
   1598  f7f5		       e8		      INX
   1599  f7f6		       bd 00 ff 	      LDA	StaticText,X
   1600  f7f9		       85 d2		      STA	ScoreD2
   1601  f7fb		       e8		      INX
   1602  f7fc		       bd 00 ff 	      LDA	StaticText,X
   1603  f7ff		       85 d3		      STA	ScoreD3
   1604  f801		       e8		      INX
   1605  f802		       bd 00 ff 	      LDA	StaticText,X
   1606  f805		       85 d4		      STA	ScoreD4
   1607  f807		       60		      RTS
   1608  f808
   1609  f808				   HorizontalParallaxLoop
   1610  f808		       a9 ef		      LDA	#%11101111	; Clear the house
   1611  f80a		       39 d8 00 	      AND	ParallaxCache,Y
   1612  f80d		       99 d8 00 	      STA	ParallaxCache,Y
   1613  f810				   CalculateParallax0
   1614  f810		       98		      TYA
   1615  f811		       18		      CLC
   1616  f812		       65 91		      ADC	TrafficOffset0 + 1
   1617  f814		       29 04		      AND	#%00000100
   1618  f816		       f0 08		      BEQ	HasEmptySpace0
   1619  f818				   HasBorder0
   1620  f818		       b9 d8 00 	      LDA	ParallaxCache,Y
   1621  f81b		       09 0f		      ORA	#%00001111
   1622  f81d		       4c 25 f8 	      JMP	StoreParallax0
   1623  f820				   HasEmptySpace0
   1624  f820		       b9 d8 00 	      LDA	ParallaxCache,Y
   1625  f823		       29 f0		      AND	#%11110000
   1626  f825
   1627  f825				   StoreParallax0
   1628  f825		       99 d8 00 	      STA	ParallaxCache,Y
   1629  f828
   1630  f828				   CalculateParallax1
   1631  f828		       98		      TYA
   1632  f829		       18		      CLC
   1633  f82a		       65 c7		      ADC	ParallaxOffset1 + 1
   1634  f82c		       29 04		      AND	#%00000100
   1635  f82e		       f0 08		      BEQ	HasEmptySpace1
   1636  f830				   HasBorder1
   1637  f830		       b9 d8 00 	      LDA	ParallaxCache,Y
   1638  f833		       09 e0		      ORA	#%11100000
   1639  f835		       4c 3d f8 	      JMP	StoreParallax1
   1640  f838				   HasEmptySpace1
   1641  f838		       b9 d8 00 	      LDA	ParallaxCache,Y
   1642  f83b		       29 1f		      AND	#%00011111
   1643  f83d
   1644  f83d				   StoreParallax1
   1645  f83d		       99 d8 00 	      STA	ParallaxCache,Y
   1646  f840
   1647  f840				   CalculateParallax2
   1648  f840		       98		      TYA
   1649  f841		       18		      CLC
   1650  f842		       65 c9		      ADC	ParallaxOffset2 + 1
   1651  f844		       29 04		      AND	#%00000100
   1652  f846		       f0 05		      BEQ	HasEmptySpace2
   1653  f848				   HasBorder2
   1654  f848		       a9 60		      LDA	#%01100000
   1655  f84a		       4c 4f f8 	      JMP	StoreParallax2
   1656  f84d				   HasEmptySpace2
   1657  f84d		       a9 00		      LDA	#0
   1658  f84f
   1659  f84f				   StoreParallax2
   1660  f84f		       99 f0 00 	      STA	ParallaxCache2,Y
   1661  f852
   1662  f852				   ContinueHorizontalParallaxLoop
   1663  f852		       88		      DEY
   1664  f853		       10 b3		      BPL	HorizontalParallaxLoop
   1665  f855		       60		      RTS
   1666  f856
   1667  f856				   DefaultBorderLoop
   1668  f856				   CalculateDefaultBorder
   1669  f856		       98		      TYA
   1670  f857		       18		      CLC
   1671  f858		       65 91		      ADC	TrafficOffset0 + 1
   1672  f85a		       29 04		      AND	#%00000100
   1673  f85c		       f0 05		      BEQ	HasEmptySpace
   1674  f85e				   HasBorder
   1675  f85e		       a9 ff		      LDA	#$FF
   1676  f860		       4c 65 f8 	      JMP	StoreBorder
   1677  f863				   HasEmptySpace
   1678  f863		       a9 00		      LDA	#0
   1679  f865
   1680  f865				   StoreBorder
   1681  f865		       99 d8 00 	      STA	ParallaxCache,Y
   1682  f868		       a9 00		      LDA	#0
   1683  f86a		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1684  f86d
   1685  f86d				   ContinueDefaultBorderLoop
   1686  f86d		       88		      DEY
   1687  f86e		       10 e6		      BPL	DefaultBorderLoop
   1688  f870		       60		      RTS
   1689  f871
   1690  f871				   PrepareTachometerBorderLoop
   1691  f871		       a5 8e		      LDA	Player0SpeedL
   1692  f873		       29 80		      AND	#%10000000
   1693  f875		       05 8f		      ORA	Player0SpeedH
   1694  f877		       18		      CLC
   1695  f878		       2a		      ROL
   1696  f879		       69 00		      ADC	#0
   1697  f87b		       85 b0		      STA	Tmp0	; Gear
   1698  f87d		       a5 8e		      LDA	Player0SpeedL
   1699  f87f		       4a		      LSR
   1700  f880		       4a		      LSR
   1701  f881		       4a		      LSR
   1702  f882		       4a		      LSR
   1703  f883		       29 07		      AND	#%00000111
   1704  f885		       85 b1		      STA	Tmp1	; RPM
   1705  f887		       a6 a9		      LDX	CurrentCarId	; Y cannot be destroyed here
   1706  f889		       bd d9 ff 	      LDA	CarIdToMaxGear,X
   1707  f88c		       85 b2		      STA	Tmp2	; Max Gear
   1708  f88e
   1709  f88e				   TachometerBorderLoop
   1710  f88e		       98		      TYA
   1711  f88f		       18		      CLC
   1712  f890		       65 91		      ADC	TrafficOffset0 + 1
   1713  f892		       29 04		      AND	#%00000100
   1714  f894		       f0 10		      BEQ	HasBorderTac
   1715  f896		       a6 b0		      LDX	Tmp0
   1716  f898		       bd eb fd 	      LDA	TachometerGearLookup,X
   1717  f89b		       99 d8 00 	      STA	ParallaxCache,Y
   1718  f89e		       a9 00		      LDA	#0
   1719  f8a0		       99 f0 00 	      STA	ParallaxCache2,Y
   1720  f8a3		       4c c8 f8 	      JMP	ContinueBorderTac
   1721  f8a6				   HasBorderTac
   1722  f8a6		       a5 b2		      LDA	Tmp2	; Max Gear
   1723  f8a8		       c5 b0		      CMP	Tmp0	; Only on max speed
   1724  f8aa		       f0 11		      BEQ	FullBorderTac
   1725  f8ac		       a6 b1		      LDX	Tmp1
   1726  f8ae		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1727  f8b1		       99 d8 00 	      STA	ParallaxCache,Y
   1728  f8b4		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1729  f8b7		       99 f0 00 	      STA	ParallaxCache2,Y
   1730  f8ba		       4c c8 f8 	      JMP	ContinueBorderTac
   1731  f8bd
   1732  f8bd				   FullBorderTac
   1733  f8bd		       a9 ff		      LDA	#$FF
   1734  f8bf		       99 d8 00 	      STA	ParallaxCache,Y
   1735  f8c2		       99 f0 00 	      STA	ParallaxCache2,Y
   1736  f8c5		       4c c8 f8 	      JMP	ContinueBorderTac
   1737  f8c8
   1738  f8c8				   ContinueBorderTac
   1739  f8c8		       88		      DEY
   1740  f8c9		       10 c3		      BPL	TachometerBorderLoop
   1741  f8cb		       60		      RTS
   1742  f8cc
   1743  f8cc				   VerticalParallaxLoop
   1744  f8cc				   CalculateVerticalParallax0
   1745  f8cc		       98		      TYA
   1746  f8cd		       18		      CLC
   1747  f8ce		       65 91		      ADC	TrafficOffset0 + 1
   1748  f8d0		       29 06		      AND	#%00000110
   1749  f8d2		       d0 0b		      BNE	HasNoVerticalLine0
   1750  f8d4				   HasVerticalLine0
   1751  f8d4		       a9 ff		      LDA	#$FF
   1752  f8d6		       99 d8 00 	      STA	ParallaxCache,Y
   1753  f8d9		       99 f0 00 	      STA	ParallaxCache2,Y
   1754  f8dc		       4c 1c f9 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1755  f8df				   HasNoVerticalLine0
   1756  f8df		       a9 00		      LDA	#0
   1757  f8e1		       99 d8 00 	      STA	ParallaxCache,Y
   1758  f8e4		       99 f0 00 	      STA	ParallaxCache2,Y
   1759  f8e7
   1760  f8e7				   CalculateVerticalParallax1
   1761  f8e7		       98		      TYA
   1762  f8e8		       18		      CLC
   1763  f8e9		       65 c7		      ADC	ParallaxOffset1 + 1
   1764  f8eb		       29 07		      AND	#%00000111
   1765  f8ed		       d0 0d		      BNE	HasNoVerticalLine1
   1766  f8ef
   1767  f8ef				   HasVerticalLine1
   1768  f8ef		       a9 fc		      LDA	#%11111100
   1769  f8f1		       99 d8 00 	      STA	ParallaxCache,Y
   1770  f8f4		       a9 c0		      LDA	#%11000000
   1771  f8f6		       99 f0 00 	      STA	ParallaxCache2,Y
   1772  f8f9		       4c 1c f9 	      JMP	ContinueVerticalParallaxLoop
   1773  f8fc				   HasNoVerticalLine1
   1774  f8fc		       a9 00		      LDA	#0
   1775  f8fe		       99 d8 00 	      STA	ParallaxCache,Y
   1776  f901		       99 f0 00 	      STA	ParallaxCache2,Y
   1777  f904
   1778  f904				   CalculateVerticalParallax2
   1779  f904		       98		      TYA
   1780  f905		       18		      CLC
   1781  f906		       65 c9		      ADC	ParallaxOffset2 + 1
   1782  f908		       29 07		      AND	#%00000111
   1783  f90a		       d0 08		      BNE	HasNoVerticalLine2
   1784  f90c
   1785  f90c				   HasVerticalLine2
   1786  f90c		       a9 f0		      LDA	#%11110000
   1787  f90e		       99 d8 00 	      STA	ParallaxCache,Y
   1788  f911		       4c 1c f9 	      JMP	ContinueVerticalParallaxLoop
   1789  f914				   HasNoVerticalLine2
   1790  f914		       a9 00		      LDA	#0
   1791  f916		       99 d8 00 	      STA	ParallaxCache,Y
   1792  f919		       99 f0 00 	      STA	ParallaxCache2,Y
   1793  f91c
   1794  f91c				   ContinueVerticalParallaxLoop
   1795  f91c		       88		      DEY
   1796  f91d		       10 ad		      BPL	VerticalParallaxLoop
   1797  f91f		       60		      RTS
   1798  f920
   1799  f920				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1800  f920		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1801  f922		       85 d5		      STA	ScoreFontColor
   1802  f924		       a9 01		      LDA	#1
   1803  f926		       85 d6		      STA	ScoreFontColorHoldChange
   1804  f928
   1805  f928		       a5 8d		      LDA	FrameCount1
   1806  f92a		       29 07		      AND	#%00000111
   1807  f92c		       85 b3		      STA	Tmp3
   1808  f92e							;0 is Zelda Name, (default)
   1809  f92e		       a9 01		      LDA	#1
   1810  f930		       c5 b3		      CMP	Tmp3
   1811  f932		       f0 38		      BEQ	PrintZeldaDateLeft
   1812  f934
   1813  f934		       a9 02		      LDA	#2
   1814  f936		       c5 b3		      CMP	Tmp3
   1815  f938		       f0 23		      BEQ	PrintPolvinhosLeft
   1816  f93a
   1817  f93a		       a9 03		      LDA	#3
   1818  f93c		       c5 b3		      CMP	Tmp3
   1819  f93e		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1820  f940
   1821  f940		       a9 04		      LDA	#4
   1822  f942		       c5 b3		      CMP	Tmp3
   1823  f944		       f0 1c		      BEQ	PrintIvonneLeft
   1824  f946
   1825  f946		       a9 05		      LDA	#5
   1826  f948		       c5 b3		      CMP	Tmp3
   1827  f94a		       f0 2a		      BEQ	PrintIvonneDateLeft
   1828  f94c
   1829  f94c		       a9 06		      LDA	#6
   1830  f94e		       c5 b3		      CMP	Tmp3
   1831  f950		       f0 15		      BEQ	PrintArtLeft
   1832  f952
   1833  f952		       a9 07		      LDA	#7
   1834  f954		       c5 b3		      CMP	Tmp3
   1835  f956		       f0 23		      BEQ	PrintLeonardoLeft
   1836  f958
   1837  f958				   PrintZeldaLeft
   1838  f958		       a2 28		      LDX	#<ZeldaTextLeft
   1839  f95a		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1840  f95d				   PrintPolvinhosLeft
   1841  f95d		       a2 3c		      LDX	#<PolvinhosTextLeft
   1842  f95f		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1843  f962				   PrintIvonneLeft
   1844  f962		       a2 50		      LDX	#<IvonneTextLeft
   1845  f964		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1846  f967				   PrintArtLeft
   1847  f967		       a2 64		      LDX	#<PaperArtTextLeft
   1848  f969		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1849  f96c
   1850  f96c				   PrintZeldaDateLeft
   1851  f96c		       a2 32		      LDX	#<ZeldaDateLeft
   1852  f96e		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1853  f971				   PrintPolvinhosDateLeft
   1854  f971		       a2 46		      LDX	#<PolvinhosDateLeft
   1855  f973		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1856  f976				   PrintIvonneDateLeft
   1857  f976		       a2 5a		      LDX	#<IvonneDateLeft
   1858  f978		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1859  f97b				   PrintLeonardoLeft
   1860  f97b		       a2 6e		      LDX	#<LeonardoTextLeft
   1861  f97d		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1862  f980
   1863  f980				   ProcessPrintEasterEgg
   1864  f980		       a5 8c		      LDA	FrameCount0	;3
   1865  f982		       29 01		      AND	#%00000001	;2
   1866  f984		       d0 03		      BNE	TranformIntoRightText
   1867  f986		       4c 8e f9 	      JMP	PrintEasterEggText
   1868  f989				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1869  f989		       8a		      TXA
   1870  f98a		       18		      CLC
   1871  f98b		       69 05		      ADC	#HALF_TEXT_SIZE
   1872  f98d		       aa		      TAX
   1873  f98e
   1874  f98e				   PrintEasterEggText
   1875  f98e		       20 ea f7 	      JSR	PrintStaticText
   1876  f991		       60		      RTS
   1877  f992
   1878  f992				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1879  f992		       a2 00		      LDX	#0
   1880  f994		       a0 04		      LDY	#FONT_OFFSET
   1881  f996
   1882  f996				   ScoreLoop		; 20 
   1883  f996		       85 02		      STA	WSYNC	;2
   1884  f998
   1885  f998		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1886  f99a		       85 0d		      STA	PF0	;3
   1887  f99c
   1888  f99c		       a5 82		      LDA	PF1Cache	;3
   1889  f99e		       85 0e		      STA	PF1	;3
   1890  f9a0
   1891  f9a0		       a5 83		      LDA	PF2Cache	;3
   1892  f9a2		       85 0f		      STA	PF2	;3
   1893  f9a4
   1894  f9a4				   DrawScoreD0		; 15
   1895  f9a4		       a6 d0		      LDX	ScoreD0	; 3
   1896  f9a6		       bd 00 fd 	      LDA	Font,X	;4
   1897  f9a9		       85 81		      STA	PF0Cache	;3
   1898  f9ab		       c6 d0		      DEC	ScoreD0	;5
   1899  f9ad
   1900  f9ad				   DrawScoreD1		; 23	
   1901  f9ad		       a6 d1		      LDX	ScoreD1	; 3
   1902  f9af		       bd 00 fd 	      LDA	Font,X	;4
   1903  f9b2		       0a		      ASL		;2
   1904  f9b3		       0a		      ASL		;2
   1905  f9b4		       0a		      ASL		;2
   1906  f9b5		       0a		      ASL		;2
   1907  f9b6		       85 82		      STA	PF1Cache	;3
   1908  f9b8		       c6 d1		      DEC	ScoreD1	;5
   1909  f9ba
   1910  f9ba				   DrawScoreD2		; 20
   1911  f9ba		       a6 d2		      LDX	ScoreD2	; 3
   1912  f9bc		       bd 00 fd 	      LDA	Font,X	;4
   1913  f9bf		       29 0f		      AND	#%00001111	;2
   1914  f9c1		       05 82		      ORA	PF1Cache	;3
   1915  f9c3		       85 82		      STA	PF1Cache	;3
   1916  f9c5		       c6 d2		      DEC	ScoreD2	;5
   1917  f9c7
   1918  f9c7				   DrawScoreD3		; 23
   1919  f9c7		       a6 d3		      LDX	ScoreD3	; 3
   1920  f9c9		       bd 00 fd 	      LDA	Font,X	;4
   1921  f9cc		       4a		      LSR		;2
   1922  f9cd		       4a		      LSR		;2
   1923  f9ce		       4a		      LSR		;2
   1924  f9cf		       4a		      LSR		;2
   1925  f9d0		       85 83		      STA	PF2Cache	;3
   1926  f9d2		       c6 d3		      DEC	ScoreD3	;5
   1927  f9d4
   1928  f9d4				   DrawScoreD4		; 20
   1929  f9d4		       a6 d4		      LDX	ScoreD4	; 3
   1930  f9d6		       bd 00 fd 	      LDA	Font,X	;4
   1931  f9d9		       29 f0		      AND	#%11110000	;2
   1932  f9db		       05 83		      ORA	PF2Cache	;3
   1933  f9dd		       85 83		      STA	PF2Cache	;3
   1934  f9df		       c6 d4		      DEC	ScoreD4	;5
   1935  f9e1
   1936  f9e1
   1937  f9e1		       88		      DEY		;2
   1938  f9e2		       10 b2		      BPL	ScoreLoop	;4
   1939  f9e4
   1940  f9e4		       85 02		      STA	WSYNC
   1941  f9e6		       20 80 f7 	      JSR	LoadAll
   1942  f9e9		       60		      RTS		; 6
   1943  f9ea
   1944  f9ea				   PrintRightDecimalDigits
   1945  f9ea		       b9 00 00 	      LDA	0,Y
   1946  f9ed		       4a		      LSR
   1947  f9ee		       4a		      LSR
   1948  f9ef		       4a		      LSR
   1949  f9f0		       4a		      LSR
   1950  f9f1		       aa		      TAX
   1951  f9f2		       bd be fd 	      LDA	FontLookup,X	;4
   1952  f9f5		       85 d2		      STA	ScoreD2	;3
   1953  f9f7
   1954  f9f7		       b9 00 00 	      LDA	0,Y
   1955  f9fa		       29 0f		      AND	#%00001111
   1956  f9fc		       aa		      TAX
   1957  f9fd		       bd be fd 	      LDA	FontLookup,X	;4
   1958  fa00		       85 d3		      STA	ScoreD3	;3
   1959  fa02
   1960  fa02		       c8		      INY
   1961  fa03		       b9 00 00 	      LDA	0,Y
   1962  fa06		       4a		      LSR
   1963  fa07		       4a		      LSR
   1964  fa08		       4a		      LSR
   1965  fa09		       4a		      LSR
   1966  fa0a		       aa		      TAX
   1967  fa0b		       bd be fd 	      LDA	FontLookup,X	;4
   1968  fa0e		       85 d0		      STA	ScoreD0	;3
   1969  fa10
   1970  fa10		       b9 00 00 	      LDA	0,Y
   1971  fa13		       29 0f		      AND	#%00001111
   1972  fa15		       aa		      TAX
   1973  fa16		       bd be fd 	      LDA	FontLookup,X	;4
   1974  fa19		       85 d1		      STA	ScoreD1	;3
   1975  fa1b
   1976  fa1b		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1977  fa1d		       85 d4		      STA	ScoreD4
   1978  fa1f		       60		      RTS
   1979  fa20
   1980  fa20				   PrintLastLeftDecimalDigits
   1981  fa20		       b9 00 00 	      LDA	0,Y
   1982  fa23		       4a		      LSR
   1983  fa24		       4a		      LSR
   1984  fa25		       4a		      LSR
   1985  fa26		       4a		      LSR
   1986  fa27		       aa		      TAX
   1987  fa28		       bd be fd 	      LDA	FontLookup,X	;4
   1988  fa2b		       85 d3		      STA	ScoreD3	;3
   1989  fa2d		       b9 00 00 	      LDA	0,Y
   1990  fa30		       29 0f		      AND	#%00001111
   1991  fa32		       aa		      TAX
   1992  fa33		       bd be fd 	      LDA	FontLookup,X	;4
   1993  fa36		       85 d4		      STA	ScoreD4	;3
   1994  fa38		       60		      RTS
   1995  fa39
   1996  fa39				   PrintZerosLeft
   1997  fa39		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1998  fa3b		       85 d2		      STA	ScoreD2
   1999  fa3d		       85 d3		      STA	ScoreD3
   2000  fa3f		       85 d4		      STA	ScoreD4
   2001  fa41		       60		      RTS
   2002  fa42
   2003  fa42				   DrawGameOverScoreLine
   2004  fa42		       85 02		      STA	WSYNC
   2005  fa44		       20 92 f9 	      JSR	PrintScore
   2006  fa47		       85 02		      STA	WSYNC
   2007  fa49		       85 02		      STA	WSYNC
   2008  fa4b		       20 71 f7 	      JSR	ClearPF
   2009  fa4e		       60		      RTS
   2010  fa4f
   2011  fa4f				   DrawGameOverScreenLeft
   2012  fa4f		       85 02		      STA	WSYNC
   2013  fa51		       20 71 f7 	      JSR	ClearPF
   2014  fa54
   2015  fa54				   DrawBcdScoreLeft
   2016  fa54		       20 a3 fb 	      JSR	Sleep8Lines
   2017  fa57		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2018  fa59		       85 06		      STA	COLUP0
   2019  fa5b		       85 02		      STA	WSYNC
   2020  fa5d		       a9 86		      LDA	#<CS + #FONT_OFFSET
   2021  fa5f		       85 d0		      STA	ScoreD0
   2022  fa61
   2023  fa61		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2024  fa63		       85 d1		      STA	ScoreD1
   2025  fa65
   2026  fa65		       a5 b7		      LDA	ScoreBcd3
   2027  fa67		       29 0f		      AND	#%00001111
   2028  fa69		       aa		      TAX
   2029  fa6a		       bd be fd 	      LDA	FontLookup,X	;4
   2030  fa6d		       85 d2		      STA	ScoreD2	;3
   2031  fa6f
   2032  fa6f		       a0 b6		      LDY	#ScoreBcd2
   2033  fa71		       20 20 fa 	      JSR	PrintLastLeftDecimalDigits
   2034  fa74
   2035  fa74		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2036  fa77
   2037  fa77				   DrawTimerLeft
   2038  fa77		       20 a3 fb 	      JSR	Sleep8Lines
   2039  fa7a		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2040  fa7c		       85 06		      STA	COLUP0
   2041  fa7e		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   2042  fa80		       85 d0		      STA	ScoreD0
   2043  fa82		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2044  fa84		       85 d1		      STA	ScoreD1
   2045  fa86		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   2046  fa88		       85 d2		      STA	ScoreD2
   2047  fa8a		       a0 bf		      LDY	#TimeBcd2
   2048  fa8c		       85 02		      STA	WSYNC
   2049  fa8e		       20 20 fa 	      JSR	PrintLastLeftDecimalDigits
   2050  fa91		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2051  fa94
   2052  fa94				   DrawGlideTimerLeft
   2053  fa94		       20 a3 fb 	      JSR	Sleep8Lines
   2054  fa97		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2055  fa99		       85 06		      STA	COLUP0
   2056  fa9b		       85 02		      STA	WSYNC
   2057  fa9d		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2058  fa9f		       85 d0		      STA	ScoreD0
   2059  faa1		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2060  faa3		       85 d1		      STA	ScoreD1
   2061  faa5		       20 39 fa 	      JSR	PrintZerosLeft
   2062  faa8		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2063  faab
   2064  faab				   DrawHitCountLeft
   2065  faab		       20 a3 fb 	      JSR	Sleep8Lines
   2066  faae		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2067  fab0		       85 06		      STA	COLUP0
   2068  fab2		       85 02		      STA	WSYNC
   2069  fab4		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2070  fab6		       85 d0		      STA	ScoreD0
   2071  fab8		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2072  faba		       85 d1		      STA	ScoreD1
   2073  fabc		       20 39 fa 	      JSR	PrintZerosLeft
   2074  fabf		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2075  fac2
   2076  fac2				   DrawCheckpointCountLeft
   2077  fac2		       20 a3 fb 	      JSR	Sleep8Lines
   2078  fac5		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2079  fac7		       85 06		      STA	COLUP0
   2080  fac9		       85 02		      STA	WSYNC
   2081  facb		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2082  facd		       85 d0		      STA	ScoreD0
   2083  facf		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2084  fad1		       85 d1		      STA	ScoreD1
   2085  fad3		       20 39 fa 	      JSR	PrintZerosLeft
   2086  fad6		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2087  fad9
   2088  fad9				   DrawGameVersionLeft
   2089  fad9		       20 a3 fb 	      JSR	Sleep8Lines
   2090  fadc		       a9 49		      LDA	#VERSION_COLOR
   2091  fade		       85 06		      STA	COLUP0
   2092  fae0
   2093  fae0		       a5 c5		      LDA	GameMode
   2094  fae2		       aa		      TAX
   2095  fae3		       bd be fd 	      LDA	FontLookup,X	;4
   2096  fae6		       85 d0		      STA	ScoreD0	;3
   2097  fae8
   2098  fae8		       a5 a9		      LDA	CurrentCarId
   2099  faea		       aa		      TAX
   2100  faeb		       bd be fd 	      LDA	FontLookup,X	;4
   2101  faee		       85 d1		      STA	ScoreD1	;3
   2102  faf0
   2103  faf0		       a5 a6		      LDA	StartSWCHB
   2104  faf2		       29 40		      AND	#%01000000	; P0 difficulty
   2105  faf4		       49 40		      EOR	#%01000000	; Reverse bytes
   2106  faf6		       2a		      ROL
   2107  faf7		       2a		      ROL
   2108  faf8		       2a		      ROL
   2109  faf9		       18		      CLC
   2110  fafa		       69 0a		      ADC	#10
   2111  fafc		       aa		      TAX
   2112  fafd		       bd be fd 	      LDA	FontLookup,X	;4
   2113  fb00		       85 d2		      STA	ScoreD2	;3
   2114  fb02
   2115  fb02		       a5 a6		      LDA	StartSWCHB
   2116  fb04		       29 80		      AND	#%10000000	; P0 difficulty
   2117  fb06		       49 80		      EOR	#%10000000	; Reverse bytes
   2118  fb08		       2a		      ROL
   2119  fb09		       2a		      ROL
   2120  fb0a		       18		      CLC
   2121  fb0b		       69 0a		      ADC	#10
   2122  fb0d		       aa		      TAX
   2123  fb0e		       bd be fd 	      LDA	FontLookup,X	;4
   2124  fb11		       85 d3		      STA	ScoreD3	;3
   2125  fb13
   2126  fb13		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2127  fb15		       85 d4		      STA	ScoreD4
   2128  fb17
   2129  fb17		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2130  fb1a
   2131  fb1a		       4c 80 fb 	      JMP	FinalizeDrawGameOver
   2132  fb1d
   2133  fb1d				   DrawGameOverScreenRight
   2134  fb1d		       85 02		      STA	WSYNC
   2135  fb1f		       20 71 f7 	      JSR	ClearPF
   2136  fb22
   2137  fb22				   DrawBcdScoreRight
   2138  fb22		       20 a3 fb 	      JSR	Sleep8Lines
   2139  fb25		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2140  fb27		       85 07		      STA	COLUP1
   2141  fb29		       85 02		      STA	WSYNC
   2142  fb2b		       a0 b4		      LDY	#ScoreBcd0
   2143  fb2d		       20 ea f9 	      JSR	PrintRightDecimalDigits
   2144  fb30
   2145  fb30		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2146  fb33
   2147  fb33				   DrawTimerRight
   2148  fb33		       20 a3 fb 	      JSR	Sleep8Lines
   2149  fb36		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2150  fb38		       85 07		      STA	COLUP1
   2151  fb3a		       a0 bd		      LDY	#TimeBcd0
   2152  fb3c		       20 ea f9 	      JSR	PrintRightDecimalDigits
   2153  fb3f
   2154  fb3f		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2155  fb42				   DrawGlideTimeRight
   2156  fb42		       20 a3 fb 	      JSR	Sleep8Lines
   2157  fb45		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2158  fb47		       85 07		      STA	COLUP1
   2159  fb49		       a0 cd		      LDY	#GlideTimeBcd0
   2160  fb4b		       20 ea f9 	      JSR	PrintRightDecimalDigits
   2161  fb4e		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2162  fb51
   2163  fb51				   DrawHitCountRight
   2164  fb51		       20 a3 fb 	      JSR	Sleep8Lines
   2165  fb54		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2166  fb56		       85 07		      STA	COLUP1
   2167  fb58		       a0 cb		      LDY	#HitCountBcd0
   2168  fb5a		       20 ea f9 	      JSR	PrintRightDecimalDigits
   2169  fb5d		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2170  fb60
   2171  fb60				   DrawCheckpointCountRight
   2172  fb60		       20 a3 fb 	      JSR	Sleep8Lines
   2173  fb63		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2174  fb65		       85 07		      STA	COLUP1
   2175  fb67		       a0 a4		      LDY	#CheckpointBcd0
   2176  fb69		       20 ea f9 	      JSR	PrintRightDecimalDigits
   2177  fb6c		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2178  fb6f
   2179  fb6f				   DrawVersionRight
   2180  fb6f		       20 a3 fb 	      JSR	Sleep8Lines
   2181  fb72		       a9 49		      LDA	#VERSION_COLOR
   2182  fb74		       85 07		      STA	COLUP1
   2183  fb76		       85 02		      STA	WSYNC
   2184  fb78		       a2 78		      LDX	#<VersionText
   2185  fb7a		       20 ea f7 	      JSR	PrintStaticText
   2186  fb7d		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2187  fb80
   2188  fb80				   FinalizeDrawGameOver
   2189  fb80		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2190  fb82		       85 d5		      STA	ScoreFontColor
   2191  fb84		       20 9a fb 	      JSR	Sleep4Lines
   2192  fb87		       20 aa fb 	      JSR	Sleep32Lines
   2193  fb8a		       20 aa fb 	      JSR	Sleep32Lines
   2194  fb8d		       4c 72 f6 	      JMP	PrepareOverscan
   2195  fb90
   2196  fb90				   WaitForVblankEnd
   2197  fb90		       ad 84 02 	      LDA	INTIM
   2198  fb93		       d0 fb		      BNE	WaitForVblankEnd
   2199  fb95		       85 02		      STA	WSYNC
   2200  fb97		       85 01		      STA	VBLANK
   2201  fb99		       60		      RTS
   2202  fb9a
   2203  fb9a				   Sleep4Lines
   2204  fb9a		       85 02		      STA	WSYNC
   2205  fb9c		       85 02		      STA	WSYNC
   2206  fb9e		       85 02		      STA	WSYNC
   2207  fba0		       85 02		      STA	WSYNC
   2208  fba2		       60		      RTS
   2209  fba3
   2210  fba3				   Sleep8Lines
   2211  fba3		       20 9a fb 	      JSR	Sleep4Lines
   2212  fba6		       20 9a fb 	      JSR	Sleep4Lines
   2213  fba9		       60		      RTS
   2214  fbaa
   2215  fbaa				   Sleep32Lines
   2216  fbaa		       20 a3 fb 	      JSR	Sleep8Lines
   2217  fbad		       20 a3 fb 	      JSR	Sleep8Lines
   2218  fbb0		       20 a3 fb 	      JSR	Sleep8Lines
   2219  fbb3		       20 a3 fb 	      JSR	Sleep8Lines
   2220  fbb6		       60		      RTS
   2221  fbb7
   2222  fbb7							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2223  fc00					      org	$FC00
   2224  fc00				   QrCode1
   2225  fc00		       1f		      .byte.b	#%00011111
   2226  fc01		       10		      .byte.b	#%00010000
   2227  fc02		       17		      .byte.b	#%00010111
   2228  fc03		       17		      .byte.b	#%00010111
   2229  fc04		       17		      .byte.b	#%00010111
   2230  fc05		       10		      .byte.b	#%00010000
   2231  fc06		       1f		      .byte.b	#%00011111
   2232  fc07		       00		      .byte.b	#%00000000
   2233  fc08		       17		      .byte.b	#%00010111
   2234  fc09		       10		      .byte.b	#%00010000
   2235  fc0a		       1d		      .byte.b	#%00011101
   2236  fc0b		       16		      .byte.b	#%00010110
   2237  fc0c		       03		      .byte.b	#%00000011
   2238  fc0d		       19		      .byte.b	#%00011001
   2239  fc0e		       13		      .byte.b	#%00010011
   2240  fc0f		       1c		      .byte.b	#%00011100
   2241  fc10		       0b		      .byte.b	#%00001011
   2242  fc11		       00		      .byte.b	#%00000000
   2243  fc12		       1f		      .byte.b	#%00011111
   2244  fc13		       10		      .byte.b	#%00010000
   2245  fc14		       17		      .byte.b	#%00010111
   2246  fc15		       17		      .byte.b	#%00010111
   2247  fc16		       17		      .byte.b	#%00010111
   2248  fc17		       10		      .byte.b	#%00010000
   2249  fc18		       1f		      .byte.b	#%00011111
   2250  fc19
   2251  fc19				   QrCode2
   2252  fc19		       c3		      .byte.b	#%11000011
   2253  fc1a		       9a		      .byte.b	#%10011010
   2254  fc1b		       82		      .byte.b	#%10000010
   2255  fc1c		       da		      .byte.b	#%11011010
   2256  fc1d		       aa		      .byte.b	#%10101010
   2257  fc1e		       ca		      .byte.b	#%11001010
   2258  fc1f		       f3		      .byte.b	#%11110011
   2259  fc20		       78		      .byte.b	#%01111000
   2260  fc21		       df		      .byte.b	#%11011111
   2261  fc22		       fc		      .byte.b	#%11111100
   2262  fc23		       c7		      .byte.b	#%11000111
   2263  fc24		       98		      .byte.b	#%10011000
   2264  fc25		       23		      .byte.b	#%00100011
   2265  fc26		       b9		      .byte.b	#%10111001
   2266  fc27		       d2		      .byte.b	#%11010010
   2267  fc28		       30		      .byte.b	#%00110000
   2268  fc29		       eb		      .byte.b	#%11101011
   2269  fc2a		       28		      .byte.b	#%00101000
   2270  fc2b		       ab		      .byte.b	#%10101011
   2271  fc2c		       72		      .byte.b	#%01110010
   2272  fc2d		       fa		      .byte.b	#%11111010
   2273  fc2e		       7a		      .byte.b	#%01111010
   2274  fc2f		       32		      .byte.b	#%00110010
   2275  fc30		       3a		      .byte.b	#%00111010
   2276  fc31		       63		      .byte.b	#%01100011
   2277  fc32
   2278  fc32				   QrCode3
   2279  fc32		       98		      .byte.b	#%10011000
   2280  fc33		       c3		      .byte.b	#%11000011
   2281  fc34		       39		      .byte.b	#%00111001
   2282  fc35		       34		      .byte.b	#%00110100
   2283  fc36		       ff		      .byte.b	#%11111111
   2284  fc37		       71		      .byte.b	#%01110001
   2285  fc38		       d5		      .byte.b	#%11010101
   2286  fc39		       d1		      .byte.b	#%11010001
   2287  fc3a		       5f		      .byte.b	#%01011111
   2288  fc3b		       26		      .byte.b	#%00100110
   2289  fc3c		       2d		      .byte.b	#%00101101
   2290  fc3d		       e9		      .byte.b	#%11101001
   2291  fc3e		       d6		      .byte.b	#%11010110
   2292  fc3f		       26		      .byte.b	#%00100110
   2293  fc40		       ba		      .byte.b	#%10111010
   2294  fc41		       03		      .byte.b	#%00000011
   2295  fc42		       dd		      .byte.b	#%11011101
   2296  fc43		       e0		      .byte.b	#%11100000
   2297  fc44		       57		      .byte.b	#%01010111
   2298  fc45		       14		      .byte.b	#%00010100
   2299  fc46		       35		      .byte.b	#%00110101
   2300  fc47		       e5		      .byte.b	#%11100101
   2301  fc48		       b5		      .byte.b	#%10110101
   2302  fc49		       d4		      .byte.b	#%11010100
   2303  fc4a		       97		      .byte.b	#%10010111
   2304  fc4b
   2305  fc4b				   QrCode4
   2306  fc4b		       09		      .byte.b	#%00001001
   2307  fc4c		       0e		      .byte.b	#%00001110
   2308  fc4d		       0f		      .byte.b	#%00001111
   2309  fc4e		       0c		      .byte.b	#%00001100
   2310  fc4f		       0c		      .byte.b	#%00001100
   2311  fc50		       08		      .byte.b	#%00001000
   2312  fc51		       08		      .byte.b	#%00001000
   2313  fc52		       06		      .byte.b	#%00000110
   2314  fc53		       06		      .byte.b	#%00000110
   2315  fc54		       0b		      .byte.b	#%00001011
   2316  fc55		       0f		      .byte.b	#%00001111
   2317  fc56		       04		      .byte.b	#%00000100
   2318  fc57		       08		      .byte.b	#%00001000
   2319  fc58		       0f		      .byte.b	#%00001111
   2320  fc59		       09		      .byte.b	#%00001001
   2321  fc5a		       07		      .byte.b	#%00000111
   2322  fc5b		       05		      .byte.b	#%00000101
   2323  fc5c		       00		      .byte.b	#%00000000
   2324  fc5d		       0f		      .byte.b	#%00001111
   2325  fc5e		       08		      .byte.b	#%00001000
   2326  fc5f		       0b		      .byte.b	#%00001011
   2327  fc60		       0b		      .byte.b	#%00001011
   2328  fc61		       0b		      .byte.b	#%00001011
   2329  fc62		       08		      .byte.b	#%00001000
   2330  fc63		       0f		      .byte.b	#%00001111
   2331  fc64
   2332  fc64							; Moved here because of rom space.
   2333  fc64							; The only SBR in constants space
   2334  fc64				   DrawQrCode
   2335  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2336  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2337  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2338  fc6a		       85 0a		      STA	CTRLPF
   2339  fc6c		       20 5f f7 	      JSR	ClearAll	; To be 100 sure!
   2340  fc6f		       ad 82 02 	      LDA	SWCHB
   2341  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2342  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2343  fc76		       86 09		      STX	COLUBK
   2344  fc78		       84 08		      STY	COLUPF
   2345  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2346  fc7d				   StoreReversedQrCode
   2347  fc7d		       86 08		      STX	COLUPF
   2348  fc7f		       84 09		      STY	COLUBK
   2349  fc81
   2350  fc81				   ContinueQrCode
   2351  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2352  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2353  fc85		       20 90 fb 	      JSR	WaitForVblankEnd
   2354  fc88		       20 a3 fb 	      JSR	Sleep8Lines
   2355  fc8b		       20 a3 fb 	      JSR	Sleep8Lines
   2356  fc8e		       20 a3 fb 	      JSR	Sleep8Lines
   2357  fc91
   2358  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2359  fc91		       85 02		      STA	WSYNC
   2360  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2361  fc96		       85 0e		      STA	PF1	;3
   2362  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2363  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2365  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2366  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2367  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2368  fcb3		       85 0e		      STA	PF1	;3
   2369  fcb5
   2370  fcb5		       ca		      DEX		;2
   2371  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2372  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2373  fcba		       88		      DEY		;2
   2374  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2375  fcbd
   2376  fcbd				   EndQrCodeLoop
   2377  fcbd		       85 02		      STA	WSYNC	;
   2378  fcbf		       a9 00		      LDA	#0
   2379  fcc1		       85 0e		      STA	PF1	;3
   2380  fcc3		       85 0f		      STA	PF2	;3
   2381  fcc5
   2382  fcc5		       20 aa fb 	      JSR	Sleep32Lines
   2383  fcc8		       4c 72 f6 	      JMP	PrepareOverscan
   2384  fccb
   2385  fd00					      org	$FD00
   2386  fd00				   Font
   2387  fd00				   C0
   2388  fd00		       e7		      .byte.b	#%11100111	;
   2389  fd01		       a5		      .byte.b	#%10100101	; 
   2390  fd02		       a5		      .byte.b	#%10100101	; 
   2391  fd03		       a5		      .byte.b	#%10100101	; 
   2392  fd04		       e7		      .byte.b	#%11100111	;	
   2393  fd05				   C1
   2394  fd05		       e7		      .byte.b	#%11100111	;
   2395  fd06		       42		      .byte.b	#%01000010	; 
   2396  fd07		       42		      .byte.b	#%01000010	; 
   2397  fd08		       42		      .byte.b	#%01000010	; 
   2398  fd09		       66		      .byte.b	#%01100110	;
   2399  fd0a				   C2
   2400  fd0a		       e7		      .byte.b	#%11100111	;
   2401  fd0b		       24		      .byte.b	#%00100100	; 
   2402  fd0c		       e7		      .byte.b	#%11100111	; 
   2403  fd0d		       81		      .byte.b	#%10000001	; 
   2404  fd0e		       e7		      .byte.b	#%11100111	;
   2405  fd0f				   C3
   2406  fd0f		       e7		      .byte.b	#%11100111	;
   2407  fd10		       81		      .byte.b	#%10000001	; 
   2408  fd11		       e7		      .byte.b	#%11100111	; 
   2409  fd12		       81		      .byte.b	#%10000001	; 
   2410  fd13		       e7		      .byte.b	#%11100111	;
   2411  fd14				   C4
   2412  fd14		       81		      .byte.b	#%10000001	;
   2413  fd15		       81		      .byte.b	#%10000001	; 
   2414  fd16		       e7		      .byte.b	#%11100111	; 
   2415  fd17		       a5		      .byte.b	#%10100101	; 
   2416  fd18		       a5		      .byte.b	#%10100101	;
   2417  fd19				   C5
   2418  fd19		       e7		      .byte.b	#%11100111	;
   2419  fd1a		       81		      .byte.b	#%10000001	; 
   2420  fd1b		       e7		      .byte.b	#%11100111	; 
   2421  fd1c		       24		      .byte.b	#%00100100	; 
   2422  fd1d		       e7		      .byte.b	#%11100111	;
   2423  fd1e				   C6
   2424  fd1e		       e7		      .byte.b	#%11100111	;
   2425  fd1f		       a5		      .byte.b	#%10100101	; 
   2426  fd20		       e7		      .byte.b	#%11100111	; 
   2427  fd21		       24		      .byte.b	#%00100100	; 
   2428  fd22		       e7		      .byte.b	#%11100111	;
   2429  fd23				   C7
   2430  fd23		       81		      .byte.b	#%10000001	;
   2431  fd24		       81		      .byte.b	#%10000001	; 
   2432  fd25		       81		      .byte.b	#%10000001	; 
   2433  fd26		       81		      .byte.b	#%10000001	; 
   2434  fd27		       e7		      .byte.b	#%11100111	;
   2435  fd28				   C8
   2436  fd28		       e7		      .byte.b	#%11100111	;
   2437  fd29		       a5		      .byte.b	#%10100101	; 
   2438  fd2a		       e7		      .byte.b	#%11100111	; 
   2439  fd2b		       a5		      .byte.b	#%10100101	; 
   2440  fd2c		       e7		      .byte.b	#%11100111	;
   2441  fd2d				   C9
   2442  fd2d		       e7		      .byte.b	#%11100111	;
   2443  fd2e		       81		      .byte.b	#%10000001	; 
   2444  fd2f		       e7		      .byte.b	#%11100111	; 
   2445  fd30		       a5		      .byte.b	#%10100101	; 
   2446  fd31		       e7		      .byte.b	#%11100111	;
   2447  fd32				   CA
   2448  fd32		       a5		      .byte.b	#%10100101	;
   2449  fd33		       a5		      .byte.b	#%10100101	; 
   2450  fd34		       e7		      .byte.b	#%11100111	; 
   2451  fd35		       a5		      .byte.b	#%10100101	; 
   2452  fd36		       e7		      .byte.b	#%11100111	;
   2453  fd37				   CB
   2454  fd37		       66		      .byte.b	#%01100110	;
   2455  fd38		       a5		      .byte.b	#%10100101	; 
   2456  fd39		       66		      .byte.b	#%01100110	; 
   2457  fd3a		       a5		      .byte.b	#%10100101	;
   2458  fd3b		       66		      .byte.b	#%01100110	;
   2459  fd3c				   CC
   2460  fd3c		       e7		      .byte.b	#%11100111	;
   2461  fd3d		       24		      .byte.b	#%00100100	; 
   2462  fd3e		       24		      .byte.b	#%00100100	; 
   2463  fd3f		       24		      .byte.b	#%00100100	;
   2464  fd40		       e7		      .byte.b	#%11100111	;
   2465  fd41
   2466  fd41				   CD
   2467  fd41		       66		      .byte.b	#%01100110	;
   2468  fd42		       a5		      .byte.b	#%10100101	; 
   2469  fd43		       a5		      .byte.b	#%10100101	; 
   2470  fd44		       a5		      .byte.b	#%10100101	;
   2471  fd45		       66		      .byte.b	#%01100110	;
   2472  fd46
   2473  fd46				   CE
   2474  fd46		       e7		      .byte.b	#%11100111	;
   2475  fd47		       24		      .byte.b	#%00100100	; 
   2476  fd48		       e7		      .byte.b	#%11100111	; 
   2477  fd49		       24		      .byte.b	#%00100100	; 
   2478  fd4a		       e7		      .byte.b	#%11100111	;
   2479  fd4b
   2480  fd4b				   CF
   2481  fd4b		       24		      .byte.b	#%00100100	;
   2482  fd4c		       24		      .byte.b	#%00100100	; 
   2483  fd4d		       e7		      .byte.b	#%11100111	; 
   2484  fd4e		       24		      .byte.b	#%00100100	; 
   2485  fd4f		       e7		      .byte.b	#%11100111	;
   2486  fd50
   2487  fd50				   CG
   2488  fd50		       c3		      .byte.b	#%11000011	;
   2489  fd51		       a5		      .byte.b	#%10100101	; 
   2490  fd52		       a5		      .byte.b	#%10100101	; 
   2491  fd53		       24		      .byte.b	#%00100100	; 
   2492  fd54		       c3		      .byte.b	#%11000011	;	
   2493  fd55
   2494  fd55				   CH
   2495  fd55		       a5		      .byte.b	#%10100101	;
   2496  fd56		       a5		      .byte.b	#%10100101	; 
   2497  fd57		       e7		      .byte.b	#%11100111	; 
   2498  fd58		       a5		      .byte.b	#%10100101	; 
   2499  fd59		       a5		      .byte.b	#%10100101	;
   2500  fd5a
   2501  fd5a				   CK
   2502  fd5a		       a5		      .byte.b	#%10100101	;
   2503  fd5b		       a5		      .byte.b	#%10100101	; 
   2504  fd5c		       66		      .byte.b	#%01100110	; 
   2505  fd5d		       a5		      .byte.b	#%10100101	; 
   2506  fd5e		       a5		      .byte.b	#%10100101	;
   2507  fd5f
   2508  fd5f				   CL
   2509  fd5f		       e7		      .byte.b	#%11100111	;
   2510  fd60		       24		      .byte.b	#%00100100	; 
   2511  fd61		       24		      .byte.b	#%00100100	; 
   2512  fd62		       24		      .byte.b	#%00100100	; 
   2513  fd63		       24		      .byte.b	#%00100100	;
   2514  fd64
   2515  fd64				   CI
   2516  fd64		       42		      .byte.b	#%01000010	;
   2517  fd65		       42		      .byte.b	#%01000010	; 
   2518  fd66		       42		      .byte.b	#%01000010	; 
   2519  fd67		       42		      .byte.b	#%01000010	; 
   2520  fd68		       42		      .byte.b	#%01000010	;
   2521  fd69
   2522  fd69				   CM
   2523  fd69		       a5		      .byte.b	#%10100101	;
   2524  fd6a		       a5		      .byte.b	#%10100101	; 
   2525  fd6b		       a5		      .byte.b	#%10100101	; 
   2526  fd6c		       e7		      .byte.b	#%11100111	; 
   2527  fd6d		       a5		      .byte.b	#%10100101	;
   2528  fd6e
   2529  fd6e				   CN
   2530  fd6e		       a5		      .byte.b	#%10100101	;
   2531  fd6f		       a5		      .byte.b	#%10100101	; 
   2532  fd70		       a5		      .byte.b	#%10100101	; 
   2533  fd71		       a5		      .byte.b	#%10100101	; 
   2534  fd72		       66		      .byte.b	#%01100110	;	
   2535  fd73
   2536  fd73
   2537  fd73				   CO
   2538  fd73		       42		      .byte.b	#%01000010	;
   2539  fd74		       a5		      .byte.b	#%10100101	; 
   2540  fd75		       a5		      .byte.b	#%10100101	; 
   2541  fd76		       a5		      .byte.b	#%10100101	; 
   2542  fd77		       42		      .byte.b	#%01000010	;	
   2543  fd78
   2544  fd78				   CP
   2545  fd78		       24		      .byte.b	#%00100100	;
   2546  fd79		       24		      .byte.b	#%00100100	; 
   2547  fd7a		       e7		      .byte.b	#%11100111	; 
   2548  fd7b		       a5		      .byte.b	#%10100101	; 
   2549  fd7c		       e7		      .byte.b	#%11100111	;
   2550  fd7d
   2551  fd7d				   CR
   2552  fd7d		       a5		      .byte.b	#%10100101	;
   2553  fd7e		       a5		      .byte.b	#%10100101	; 
   2554  fd7f		       66		      .byte.b	#%01100110	; 
   2555  fd80		       a5		      .byte.b	#%10100101	; 
   2556  fd81		       66		      .byte.b	#%01100110	;
   2557  fd82
   2558  fd82				   CS
   2559  fd82		       66		      .byte.b	#%01100110	;
   2560  fd83		       81		      .byte.b	#%10000001	; 
   2561  fd84		       42		      .byte.b	#%01000010	; 
   2562  fd85		       24		      .byte.b	#%00100100	; 
   2563  fd86		       c3		      .byte.b	#%11000011	;
   2564  fd87
   2565  fd87				   CT
   2566  fd87		       42		      .byte.b	#%01000010	;
   2567  fd88		       42		      .byte.b	#%01000010	; 
   2568  fd89		       42		      .byte.b	#%01000010	; 
   2569  fd8a		       42		      .byte.b	#%01000010	; 
   2570  fd8b		       e7		      .byte.b	#%11100111	;
   2571  fd8c
   2572  fd8c				   CV
   2573  fd8c		       42		      .byte.b	#%01000010	;
   2574  fd8d		       a5		      .byte.b	#%10100101	; 
   2575  fd8e		       a5		      .byte.b	#%10100101	; 
   2576  fd8f		       a5		      .byte.b	#%10100101	; 
   2577  fd90		       a5		      .byte.b	#%10100101	;	
   2578  fd91
   2579  fd91				   CY
   2580  fd91		       42		      .byte.b	#%01000010	;
   2581  fd92		       42		      .byte.b	#%01000010	; 
   2582  fd93		       42		      .byte.b	#%01000010	; 
   2583  fd94		       a5		      .byte.b	#%10100101	; 
   2584  fd95		       a5		      .byte.b	#%10100101	;
   2585  fd96
   2586  fd96				   CW
   2587  fd96		       a5		      .byte.b	#%10100101	;
   2588  fd97		       e7		      .byte.b	#%11100111	; 
   2589  fd98		       a5		      .byte.b	#%10100101	; 
   2590  fd99		       a5		      .byte.b	#%10100101	; 
   2591  fd9a		       a5		      .byte.b	#%10100101	;
   2592  fd9b
   2593  fd9b				   CZ
   2594  fd9b		       e7		      .byte.b	#%11100111	;
   2595  fd9c		       24		      .byte.b	#%00100100	; 
   2596  fd9d		       42		      .byte.b	#%01000010	; 
   2597  fd9e		       81		      .byte.b	#%10000001	; 
   2598  fd9f		       e7		      .byte.b	#%11100111	;
   2599  fda0
   2600  fda0				   Pipe
   2601  fda0		       42		      .byte.b	#%01000010	;
   2602  fda1		       00		      .byte.b	#%00000000	; 
   2603  fda2		       42		      .byte.b	#%01000010	; 
   2604  fda3		       00		      .byte.b	#%00000000	; 
   2605  fda4		       42		      .byte.b	#%01000010	;
   2606  fda5
   2607  fda5				   Exclamation
   2608  fda5		       42		      .byte.b	#%01000010	;
   2609  fda6		       00		      .byte.b	#%00000000	; 
   2610  fda7		       42		      .byte.b	#%01000010	; 
   2611  fda8		       42		      .byte.b	#%01000010	; 
   2612  fda9		       42		      .byte.b	#%01000010	;
   2613  fdaa
   2614  fdaa				   Dot
   2615  fdaa		       42		      .byte.b	#%01000010	;
   2616  fdab		       42		      .byte.b	#%01000010	; 
   2617  fdac		       00		      .byte.b	#%00000000	; 
   2618  fdad		       00		      .byte.b	#%00000000	; 
   2619  fdae		       00		      .byte.b	#%00000000	;
   2620  fdaf
   2621  fdaf				   Colon
   2622  fdaf		       42		      .byte.b	#%01000010	;
   2623  fdb0		       42		      .byte.b	#%01000010	; 
   2624  fdb1		       00		      .byte.b	#%00000000	; 
   2625  fdb2		       42		      .byte.b	#%01000010	; 
   2626  fdb3		       42		      .byte.b	#%01000010	;
   2627  fdb4
   2628  fdb4				   Triangle
   2629  fdb4		       81		      .byte.b	#%10000001	;
   2630  fdb5		       c3		      .byte.b	#%11000011	; 
   2631  fdb6		       e7		      .byte.b	#%11100111	; 
   2632  fdb7		       c3		      .byte.b	#%11000011	; 
   2633  fdb8		       81		      .byte.b	#%10000001	;
   2634  fdb9
   2635  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2636  fdb9		       00		      .byte.b	#0	;
   2637  fdba		       00		      .byte.b	#0	;
   2638  fdbb		       00		      .byte.b	#0	;
   2639  fdbc		       00		      .byte.b	#0	;
   2640  fdbd		       00		      .byte.b	#0	;
   2641  fdbe
   2642  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2643  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2644  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2645  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2646  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2647  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2648  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2649  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2650  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2651  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2652  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2653  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2654  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2655  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2656  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2657  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2658  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2659  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2660  fdcf
   2661  fdcf				   EngineSoundType
   2662  fdcf		       02		      .byte.b	#2
   2663  fdd0		       02		      .byte.b	#2
   2664  fdd1		       0e		      .byte.b	#14
   2665  fdd2		       06		      .byte.b	#6
   2666  fdd3		       06		      .byte.b	#6
   2667  fdd4		       0e		      .byte.b	#14
   2668  fdd5
   2669  fdd5				   EngineBaseFrequence
   2670  fdd5		       1f		      .byte.b	#31
   2671  fdd6		       15		      .byte.b	#21
   2672  fdd7		       14		      .byte.b	#20
   2673  fdd8		       1f		      .byte.b	#31
   2674  fdd9		       16		      .byte.b	#22
   2675  fdda		       03		      .byte.b	#3
   2676  fddb
   2677  fddb				   TachometerSizeLookup1
   2678  fddb		       1f		      .byte.b	#%00011111
   2679  fddc		       3f		      .byte.b	#%00111111
   2680  fddd		       7f		      .byte.b	#%01111111
   2681  fdde		       ff		      .byte.b	#%11111111
   2682  fddf		       ff		      .byte.b	#%11111111
   2683  fde0		       ff		      .byte.b	#%11111111
   2684  fde1		       ff		      .byte.b	#%11111111
   2685  fde2		       ff		      .byte.b	#%11111111
   2686  fde3
   2687  fde3				   TachometerSizeLookup2
   2688  fde3		       00		      .byte.b	#%00000000
   2689  fde4		       00		      .byte.b	#%00000000
   2690  fde5		       00		      .byte.b	#%00000000
   2691  fde6		       00		      .byte.b	#%00000000
   2692  fde7		       80		      .byte.b	#%10000000
   2693  fde8		       c0		      .byte.b	#%11000000
   2694  fde9		       e0		      .byte.b	#%11100000
   2695  fdea		       f0		      .byte.b	#%11110000
   2696  fdeb
   2697  fdeb				   TachometerGearLookup
   2698  fdeb		       01		      .byte.b	#%00000001
   2699  fdec		       02		      .byte.b	#%00000010
   2700  fded		       04		      .byte.b	#%00000100
   2701  fdee		       08		      .byte.b	#%00001000
   2702  fdef		       10		      .byte.b	#%00010000
   2703  fdf0		       30		      .byte.b	#%00110000
   2704  fdf1
   2705  fe00					      org	$FE00
   2706  fe00				   AesTable
   2707  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2708  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2709  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2710  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2711  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2712  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2713  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2714  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2715  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2716  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2717  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2718  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2719  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2720  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2721  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2722  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2723  ff00
   2724  ff00							; From FF00 to FFFB (122 bytes) to use here
   2725  ff00
   2726  ff00				   StaticText		; All static text must be on the same MSB block. 
   2727  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2728  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2729  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2730  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2731  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2732  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2733  ff05
   2734  ff05				   HellwayLeftText
   2735  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2736  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2737  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2738  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2739  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2740  ff0a
   2741  ff0a				   HellwayRightText
   2742  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2743  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2744  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2745  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2746  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2747  ff0f
   2748  ff0f				   OpbText
   2749  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2750  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2751  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2752  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2753  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2754  ff14
   2755  ff14				   YearText
   2756  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2757  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2758  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2759  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2760  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2761  ff19
   2762  ff19				   GameText
   2763  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2764  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2765  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2766  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2767  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2768  ff1e
   2769  ff1e				   OverText
   2770  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2771  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2772  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2773  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2774  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2775  ff23				   GoText
   2776  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2777  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2778  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2779  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2780  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2781  ff28
   2782  ff28				   ZeldaTextLeft
   2783  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2784  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2785  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2786  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2787  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2788  ff2d
   2789  ff2d				   ZeldaTextRight
   2790  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2791  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2792  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2793  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2794  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2795  ff32
   2796  ff32				   ZeldaDateLeft
   2797  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2798  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2799  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2800  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2801  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2802  ff37
   2803  ff37				   ZeldaDateRight
   2804  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2805  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2806  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2807  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2808  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2809  ff3c
   2810  ff3c				   PolvinhosTextLeft
   2811  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2812  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2813  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2814  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2815  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2816  ff41
   2817  ff41				   PolvinhosTextRight
   2818  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2819  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2820  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2821  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2822  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2823  ff46
   2824  ff46				   PolvinhosDateLeft
   2825  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2826  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2827  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2828  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2829  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2830  ff4b
   2831  ff4b				   PolvinhosDateRight
   2832  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2833  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2834  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2835  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2836  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2837  ff50
   2838  ff50				   IvonneTextLeft
   2839  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2840  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2841  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2842  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2843  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2844  ff55
   2845  ff55				   IvonneTextRight
   2846  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2847  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2848  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2849  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2850  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2851  ff5a
   2852  ff5a				   IvonneDateLeft
   2853  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2854  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2855  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2856  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2857  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2858  ff5f
   2859  ff5f				   IvonneDateRight
   2860  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2861  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2862  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2863  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2864  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2865  ff64
   2866  ff64				   PaperArtTextLeft
   2867  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2868  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2869  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2870  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2871  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2872  ff69
   2873  ff69				   PaperArtTextRight
   2874  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2875  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2876  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2877  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2878  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2879  ff6e
   2880  ff6e				   LeonardoTextLeft
   2881  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2882  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2883  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2884  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2885  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2886  ff73
   2887  ff73				   LeonardoTextRight
   2888  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2889  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2890  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2891  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2892  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2893  ff78
   2894  ff78				   VersionText
   2895  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2896  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2897  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2898  ff7b		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2899  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2900  ff7d
   2901  ff7d
   2902  ff7d				   EndStaticText
   2903  ff7d
   2904  ff7d				   CarSprite0		; Upside down, Original Car
   2905  ff7d		       00 00 00 00*	      ds	7
   2906  ff84		       7e		      .byte.b	#%01111110
   2907  ff85		       24		      .byte.b	#%00100100
   2908  ff86		       bd		      .byte.b	#%10111101
   2909  ff87		       3c		      .byte.b	#%00111100
   2910  ff88		       bd		      .byte.b	#%10111101
   2911  ff89		       3c		      .byte.b	#%00111100
   2912  ff8a
   2913  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2914  ff8a		       00 00 00 00*	      ds	7
   2915  ff91		       bd		      .byte.b	#%10111101
   2916  ff92		       7e		      .byte.b	#%01111110
   2917  ff93		       5a		      .byte.b	#%01011010
   2918  ff94		       66		      .byte.b	#%01100110
   2919  ff95		       bd		      .byte.b	#%10111101
   2920  ff96		       3c		      .byte.b	#%00111100
   2921  ff97
   2922  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2923  ff97		       00 00 00 00*	      ds	7
   2924  ff9e		       7e		      .byte.b	#%01111110
   2925  ff9f		       a5		      .byte.b	#%10100101
   2926  ffa0		       42		      .byte.b	#%01000010
   2927  ffa1		       42		      .byte.b	#%01000010
   2928  ffa2		       bd		      .byte.b	#%10111101
   2929  ffa3		       7e		      .byte.b	#%01111110
   2930  ffa4
   2931  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2932  ffa4		       00 00 00 00*	      ds	7
   2933  ffab		       3c		      .byte.b	#%00111100
   2934  ffac		       db		      .byte.b	#%11011011
   2935  ffad		       db		      .byte.b	#%11011011
   2936  ffae		       3c		      .byte.b	#%00111100
   2937  ffaf		       5a		      .byte.b	#%01011010
   2938  ffb0		       3c		      .byte.b	#%00111100
   2939  ffb1
   2940  ffb1				   TrafficSpeeds
   2941  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2942  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2943  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2944  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2945  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2946  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2947  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2948  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2949  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2950  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2951  ffbb				   TrafficSpeedsHighDelta
   2952  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2953  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2954  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2955  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2956  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2957  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2958  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2959  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2960  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2961  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2962  ffc5
   2963  ffc5				   CarIdToSpriteAddressL
   2964  ffc5		       7d		      .byte.b	#<CarSprite0
   2965  ffc6		       8a		      .byte.b	#<CarSprite1
   2966  ffc7		       97		      .byte.b	#<CarSprite2
   2967  ffc8		       a4		      .byte.b	#<CarSprite3
   2968  ffc9
   2969  ffc9				   CarIdToSpriteAddressH
   2970  ffc9		       ff		      .byte.b	#>CarSprite0
   2971  ffca		       ff		      .byte.b	#>CarSprite1
   2972  ffcb		       ff		      .byte.b	#>CarSprite2
   2973  ffcc		       ff		      .byte.b	#>CarSprite3
   2974  ffcd
   2975  ffcd				   CarIdToAccelerateSpeed
   2976  ffcd		       80		      .byte.b	#128
   2977  ffce		       c0		      .byte.b	#192
   2978  ffcf		       60		      .byte.b	#96
   2979  ffd0		       c0		      .byte.b	#192
   2980  ffd1
   2981  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2982  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   2983  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   2984  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   2985  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   2986  ffd5
   2987  ffd5				   CarIdToMaxSpeedL
   2988  ffd5		       80		      .byte.b	#$80
   2989  ffd6		       00		      .byte.b	#$00	; One less gear
   2990  ffd7		       80		      .byte.b	#$80
   2991  ffd8		       80		      .byte.b	#$80
   2992  ffd9
   2993  ffd9				   CarIdToMaxGear
   2994  ffd9		       05		      .byte.b	#5
   2995  ffda		       04		      .byte.b	#4	; One less gear
   2996  ffdb		       05		      .byte.b	#5
   2997  ffdc		       05		      .byte.b	#5
   2998  ffdd
   2999  ffdd				   BreakSpeedTable		; Uses Speed H byte as index
   3000  ffdd		       09		      .byte.b	#(BREAK_SPEED - 3)
   3001  ffde		       0a		      .byte.b	#(BREAK_SPEED - 2)
   3002  ffdf		       0c		      .byte.b	#BREAK_SPEED
   3003  ffe0
   3004  ffe0				   TrafficColorTable
   3005  ffe0		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3006  ffe1		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3007  ffe2		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3008  ffe3		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3009  ffe4
   3010  ffe4				   TrafficChanceTable
   3011  ffe4		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3012  ffe5		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3013  ffe6		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3014  ffe7		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3015  ffe8
   3016  ffe8				   TrafficTimeTable
   3017  ffe8		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3018  ffe9		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3019  ffea		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3020  ffeb		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3021  ffec		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3022  ffed
   3023  ffed
   3024  fffc					      org	$FFFC
   3025  fffc		       00 f0		      .word.w	BeforeStart
   3026  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
