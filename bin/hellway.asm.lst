------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000
     12  f000		       00 07	   CAR_SIZE   =	7
     13  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     14  f000		       00 08	   CAR_0_Y    =	8
     15  f000							;16 bit precision
     16  f000							;640 max speed!
     17  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     18  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     19  f000		       00 00	   CAR_MIN_SPEED_H =	0
     20  f000		       00 00	   CAR_MIN_SPEED_L =	0
     21  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     22  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     23  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 06	   BREAK_SPEED =	6
     26  f000							;For now, will use in aal rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000
     28  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     29  f000
     30  f000		       00 34	   TRAFFIC_COLOR =	$34
     31  f000		       00 81	   SCORE_BACKGROUND_COLOR =	$81
     32  f000		       00 0f	   SCORE_FONT_COLOR =	$0F
     33  f000
     34  f000							;memory	
     35  f000		       00 80	   Car0Line   =	$80
     36  f000
     37  f000		       00 81	   GRP0Cache  =	$81
     38  f000		       00 82	   PF0Cache   =	$82
     39  f000		       00 83	   PF1Cache   =	$83
     40  f000		       00 84	   PF2Cache   =	$84
     41  f000
     42  f000		       00 86	   FrameCount0 =	$86	;
     43  f000		       00 87	   FrameCount1 =	$87	;
     44  f000
     45  f000		       00 88	   Car0SpeedL =	$88
     46  f000		       00 89	   Car0SpeedH =	$89
     47  f000
     48  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     49  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     50  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     51  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     52  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     53  f000
     54  f000							;Temporary variables, multiple uses
     55  f000		       00 b0	   Tmp0       =	$B0
     56  f000		       00 b1	   Tmp1       =	$B1
     57  f000		       00 b2	   Tmp2       =	$B2
     58  f000
     59  f000		       00 ba	   Collision  =	$BA
     60  f000
     61  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     62  f000
     63  f000		       00 d0	   ScoreD0    =	$D0
     64  f000		       00 d1	   ScoreD1    =	$D1
     65  f000		       00 d2	   ScoreD2    =	$D2
     66  f000		       00 d3	   ScoreD3    =	$D3
     67  f000		       00 d4	   ScoreD4    =	$D4
     68  f000		       00 d5	   ScoreD5    =	$D5
     69  f000		       00 d6	   ScoreD6    =	$D6
     70  f000		       00 d7	   ScoreD7    =	$D7
     71  f000		       00 d8	   ScoreD8    =	$D8
     72  f000		       00 d9	   ScoreD9    =	$D9
     73  f000
     74  f000							;generic start up stuff, put zero in all...
     75  f000				   Start
     76  f000		       78		      SEI
     77  f001		       d8		      CLD
     78  f002		       a2 ff		      LDX	#$FF
     79  f004		       9a		      TXS
     80  f005		       a9 00		      LDA	#0
     81  f007				   ClearMem
     82  f007		       95 00		      STA	0,X
     83  f009		       ca		      DEX
     84  f00a		       d0 fb		      BNE	ClearMem
     85  f00c
     86  f00c							;Setting some variables...
     87  f00c
     88  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     89  f00e		       85 06		      STA	COLUP0
     90  f010		       85 ba		      STA	Collision
     91  f012
     92  f012		       a9 85		      LDA	#PLAYER_2_COLOR
     93  f014		       85 07		      STA	COLUP1
     94  f016
     95  f016							;Loop ?
     96  f016		       a9 20		      LDA	#$20
     97  f018		       85 96		      STA	TrafficOffset1 + 2
     98  f01a		       a9 40		      LDA	#$40
     99  f01c		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
    100  f01e		       a9 60		      LDA	#$60
    101  f020		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
    102  f022		       a9 80		      LDA	#$80
    103  f024		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
    104  f026		       a9 a0		      LDA	#$A0
    105  f028
    106  f028		       ad 0f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    107  f02b		       85 88		      STA	Car0SpeedL
    108  f02d
    109  f02d
    110  f02d							;VSYNC time
    111  f02d				   MainLoop
    112  f02d		       a9 02		      LDA	#2
    113  f02f		       85 00		      STA	VSYNC
    114  f031		       85 02		      STA	WSYNC
    115  f033		       85 02		      STA	WSYNC
    116  f035							;Cool, can put code here! It removed the black line on top
    117  f035							;Make Objects move in the X axys
    118  f035		       85 2a		      STA	HMOVE	;2
    119  f037							;This must be done after a WSync, otherwise it is impossible to predict the X position
    120  f037		       a5 c0		      LDA	GameStatus	;3
    121  f039		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    122  f03b		       f0 10		      BEQ	DoNotSetPlayerX	;3
    123  f03d							;Do something better with this 32 cycles
      0  f03d					      SLEEP	27	; Maybe fine position with hmove...
      1  f03d				   .CYCLES    SET	27
      2  f03d
      3  f03d				  -	      IF	.CYCLES < 2
      4  f03d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f03d				  -	      ERR
      6  f03d					      ENDIF
      7  f03d
      8  f03d					      IF	.CYCLES & 1
      9  f03d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f03d				  -	      nop	0
     11  f03d					      ELSE
     12  f03d		       24 00		      bit	VSYNC
     13  f03f					      ENDIF
     14  f03f				   .CYCLES    SET	.CYCLES - 3
     15  f03f					      ENDIF
     16  f03f
     17  f03f					      REPEAT	.CYCLES / 2
     18  f03f		       ea		      nop
     17  f03f					      REPEND
     18  f040		       ea		      nop
     17  f040					      REPEND
     18  f041		       ea		      nop
     17  f041					      REPEND
     18  f042		       ea		      nop
     17  f042					      REPEND
     18  f043		       ea		      nop
     17  f043					      REPEND
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     17  f047					      REPEND
     18  f048		       ea		      nop
     17  f048					      REPEND
     18  f049		       ea		      nop
     17  f049					      REPEND
     18  f04a		       ea		      nop
     19  f04b					      REPEND
    125  f04b		       85 10		      STA	RESP0	;3
    126  f04d
    127  f04d				   DoNotSetPlayerX
    128  f04d
    129  f04d		       85 02		      STA	WSYNC
    130  f04f		       a9 2b		      LDA	#43	; We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    131  f051		       8d 96 02 	      STA	TIM64T
    132  f054		       a9 00		      LDA	#0
    133  f056		       85 00		      STA	VSYNC
    134  f058
    135  f058							;Read Fire Button before, will make it start the game for now.
    136  f058		       a5 0c		      LDA	INPT4
    137  f05a		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    138  f05c		       a5 c0		      LDA	GameStatus
    139  f05e		       09 80		      ORA	#%10000000
    140  f060		       85 c0		      STA	GameStatus
    141  f062				   SkipGameStart
    142  f062
    143  f062				   CountFrame
    144  f062		       e6 86		      INC	FrameCount0	; Used to alternate lines
    145  f064		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    146  f066		       e6 87		      INC	FrameCount1	; Still not used
    147  f068				   SkipIncFC1
    148  f068
    149  f068							;Does not update the game if not running
    150  f068		       a5 c0		      LDA	GameStatus	;3
    151  f06a		       49 80		      EOR	#%10000000	;2 game is running...
    152  f06c		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    153  f06e		       4c 23 f1 	      JMP	SkipUpdateLogic
    154  f071
    155  f071				   ContinueWithGameLogic
    156  f071
    157  f071							; for left and right, we're gonna 
    158  f071							; set the horizontal speed, and then do
    159  f071							; a single HMOVE.  We'll use X to hold the
    160  f071							; horizontal speed, then store it in the 
    161  f071							; appropriate register
    162  f071
    163  f071							;assum horiz speed will be zero
    164  f071
    165  f071							;Begin read dpad
    166  f071		       a2 00		      LDX	#0
    167  f073
    168  f073		       a9 40		      LDA	#%01000000	;Left
    169  f075		       2c 80 02 	      BIT	SWCHA
    170  f078		       d0 02		      BNE	SkipMoveLeft
    171  f07a		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    172  f07c				   SkipMoveLeft
    173  f07c
    174  f07c		       a9 80		      LDA	#%10000000	;Right
    175  f07e		       2c 80 02 	      BIT	SWCHA
    176  f081		       d0 02		      BNE	SkipMoveRight
    177  f083		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    178  f085				   SkipMoveRight
    179  f085
    180  f085		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    181  f087
    182  f087
    183  f087							;Acelerates / breaks the car
    184  f087		       a9 10		      LDA	#%00010000	;UP in controller
    185  f089		       2c 80 02 	      BIT	SWCHA
    186  f08c		       d0 21		      BNE	SkipAccelerate
    187  f08e
    188  f08e							;Adds speed
    189  f08e		       18		      CLC
    190  f08f		       a5 88		      LDA	Car0SpeedL
    191  f091		       69 01		      ADC	#ACCELERATE_SPEED
    192  f093		       85 88		      STA	Car0SpeedL
    193  f095		       a5 89		      LDA	Car0SpeedH
    194  f097		       69 00		      ADC	#0
    195  f099		       85 89		      STA	Car0SpeedH
    196  f09b
    197  f09b							;Checks if already max
    198  f09b		       c9 02		      CMP	#CAR_MAX_SPEED_H
    199  f09d		       90 10		      BCC	SkipAccelerate	; less than my max speed
    200  f09f		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    201  f0a1							;High bit is max, compare the low
    202  f0a1		       a5 88		      LDA	Car0SpeedL
    203  f0a3		       c9 80		      CMP	#CAR_MAX_SPEED_L
    204  f0a5		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    205  f0a7							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    206  f0a7
    207  f0a7				   ResetToMaxSpeed		; Speed is more, or is already max
    208  f0a7		       a9 02		      LDA	#CAR_MAX_SPEED_H
    209  f0a9		       85 89		      STA	Car0SpeedH
    210  f0ab		       a9 80		      LDA	#CAR_MAX_SPEED_L
    211  f0ad		       85 88		      STA	Car0SpeedL
    212  f0af
    213  f0af				   SkipAccelerate
    214  f0af
    215  f0af				   Break
    216  f0af		       a9 20		      LDA	#%00100000	;Down in controller
    217  f0b1		       2c 80 02 	      BIT	SWCHA
    218  f0b4		       d0 26		      BNE	SkipBreak
    219  f0b6
    220  f0b6							;Decrease speed
    221  f0b6		       38		      SEC
    222  f0b7		       a5 88		      LDA	Car0SpeedL
    223  f0b9		       e9 06		      SBC	#BREAK_SPEED
    224  f0bb		       85 88		      STA	Car0SpeedL
    225  f0bd		       a5 89		      LDA	Car0SpeedH
    226  f0bf		       e9 00		      SBC	#0
    227  f0c1		       85 89		      STA	Car0SpeedH
    228  f0c3
    229  f0c3							;Checks if is min speed
    230  f0c3		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    231  f0c5		       c9 00		      CMP	#CAR_MIN_SPEED_H
    232  f0c7		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    233  f0c9		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    234  f0cb
    235  f0cb				   CompareLBreakSpeed
    236  f0cb		       a5 88		      LDA	Car0SpeedL
    237  f0cd		       c9 00		      CMP	#CAR_MIN_SPEED_L
    238  f0cf		       90 03		      BCC	ResetMinSpeed	; Less than memory
    239  f0d1		       4c dc f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    240  f0d4
    241  f0d4				   ResetMinSpeed
    242  f0d4		       a9 00		      LDA	#CAR_MIN_SPEED_H
    243  f0d6		       85 89		      STA	Car0SpeedH
    244  f0d8		       a9 00		      LDA	#CAR_MIN_SPEED_L
    245  f0da		       85 88		      STA	Car0SpeedL
    246  f0dc				   SkipBreak
    247  f0dc
    248  f0dc							;Updates all offsets 24 bits
    249  f0dc		       a2 00		      LDX	#0	; Memory Offset 24 bit
    250  f0de		       a0 00		      LDY	#0	; Line Speeds 16 bits
    251  f0e0				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    252  f0e0		       38		      SEC
    253  f0e1		       a5 88		      LDA	Car0SpeedL
    254  f0e3		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    255  f0e6		       85 b0		      STA	Tmp0
    256  f0e8		       c8		      INY
    257  f0e9		       a5 89		      LDA	Car0SpeedH
    258  f0eb		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    259  f0ee		       85 b1		      STA	Tmp1
    260  f0f0		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    261  f0f2		       e9 00		      SBC	#0
    262  f0f4		       85 b2		      STA	Tmp2
    263  f0f6
    264  f0f6
    265  f0f6							;Adds the result
    266  f0f6		       18		      CLC
    267  f0f7		       a5 b0		      LDA	Tmp0
    268  f0f9		       75 90		      ADC	TrafficOffset0,X
    269  f0fb		       95 90		      STA	TrafficOffset0,X
    270  f0fd		       e8		      INX
    271  f0fe		       a5 b1		      LDA	Tmp1
    272  f100		       75 90		      ADC	TrafficOffset0,X
    273  f102		       95 90		      STA	TrafficOffset0,X
    274  f104		       e8		      INX
    275  f105		       a5 b2		      LDA	Tmp2	; Carry
    276  f107		       75 90		      ADC	TrafficOffset0,X
    277  f109		       95 90		      STA	TrafficOffset0,X
    278  f10b		       e8		      INX
    279  f10c		       38		      SEC
    280  f10d		       69 00		      ADC	#0	;Increment by one
    281  f10f		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    282  f111
    283  f111
    284  f111				   PrepareNextUpdateLoop
    285  f111		       c8		      INY
    286  f112		       e8		      INX
    287  f113		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    288  f115		       d0 c9		      BNE	UpdateOffsets
    289  f117
    290  f117				   TestCollision		;
    291  f117							; see if car0 and playfield collide, and change the background color if so
    292  f117		       a9 80		      LDA	#%10000000
    293  f119		       24 02		      BIT	CXP0FB
    294  f11b		       f0 04		      BEQ	NoCollision	;skip if not hitting...
    295  f11d		       a5 86		      LDA	FrameCount0	;must be a hit! Change rand color bg
    296  f11f		       85 ba		      STA	Collision	;and store as colision (will do more with it!)
    297  f121				   NoCollision
    298  f121		       85 2c		      STA	CXCLR	;reset the collision detection for next frame
    299  f123
    300  f123				   SkipUpdateLogic
    301  f123
    302  f123							;DELETE THIS!
    303  f123		       a9 09		      LDA	#<N1 + #SCORE_SIZE -1
    304  f125		       85 d0		      STA	ScoreD0
    305  f127		       a9 0e		      LDA	#<N2 + #SCORE_SIZE -1
    306  f129		       85 d1		      STA	ScoreD1
    307  f12b		       a9 13		      LDA	#<N3 + #SCORE_SIZE -1
    308  f12d		       85 d2		      STA	ScoreD2
    309  f12f		       a9 18		      LDA	#<N4 + #SCORE_SIZE -1
    310  f131		       85 d3		      STA	ScoreD3
    311  f133		       a9 1d		      LDA	#<N5 + #SCORE_SIZE -1
    312  f135		       85 d4		      STA	ScoreD4
    313  f137
    314  f137		       a9 22		      LDA	#<N6 + #SCORE_SIZE -1
    315  f139		       85 d5		      STA	ScoreD5
    316  f13b		       a9 27		      LDA	#<N7 + #SCORE_SIZE -1
    317  f13d		       85 d6		      STA	ScoreD6
    318  f13f		       a9 2c		      LDA	#<N8 + #SCORE_SIZE -1
    319  f141		       85 d7		      STA	ScoreD7
    320  f143		       a9 31		      LDA	#<N9 + #SCORE_SIZE -1
    321  f145		       85 d8		      STA	ScoreD8
    322  f147		       a9 36		      LDA	#<N0 + #SCORE_SIZE -1
    323  f149		       85 d9		      STA	ScoreD9
    324  f14b							;END DELETE THIS
    325  f14b
    326  f14b		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    327  f14d		       85 09		      STA	COLUBK
    328  f14f		       a9 0f		      LDA	#SCORE_FONT_COLOR
    329  f151		       85 08		      STA	COLUPF
    330  f153		       20 dd f2 	      JSR	ClearPF
    331  f156		       a9 02		      LDA	#%00000010	; Score mode
    332  f158		       85 0a		      STA	CTRLPF
    333  f15a		       a0 04		      LDY	#SCORE_SIZE - 1
    334  f15c		       a2 00		      LDX	#0
    335  f15e
    336  f15e		       a5 86		      LDA	FrameCount0	;3
    337  f160		       29 01		      AND	#%00000001	;2
    338  f162		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    339  f164				   LeftScoreOn
    340  f164		       a9 0f		      LDA	#SCORE_FONT_COLOR
    341  f166		       85 07		      STA	COLUP1
    342  f168		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    343  f16a		       85 06		      STA	COLUP0
    344  f16c		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    345  f16e		       85 b1		      STA	Tmp1
    346  f170		       4c 7f f1 	      JMP	WaitForVblankEnd
    347  f173				   RightScoreOn
    348  f173		       a9 0f		      LDA	#SCORE_FONT_COLOR
    349  f175		       85 06		      STA	COLUP0
    350  f177		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    351  f179		       85 07		      STA	COLUP1
    352  f17b		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    353  f17d		       85 b1		      STA	Tmp1
    354  f17f
    355  f17f							; After here we are going to update the screen, No more heavy code
    356  f17f				   WaitForVblankEnd
    357  f17f		       ad 84 02 	      LDA	INTIM
    358  f182		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    359  f184							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    360  f184		       85 01		      STA	VBLANK
    361  f186
    362  f186				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    363  f186		       85 02		      STA	WSYNC
    364  f188
    365  f188		       a5 82		      LDA	PF0Cache	;3 Move to a macro?
    366  f18a		       85 0d		      STA	PF0	;3
    367  f18c
    368  f18c		       a5 83		      LDA	PF1Cache	;3
    369  f18e		       85 0e		      STA	PF1	;3
    370  f190
    371  f190		       a5 84		      LDA	PF2Cache	;3
    372  f192		       85 0f		      STA	PF2	;3
    373  f194
    374  f194		       84 b0		      STY	Tmp0	; 3 Keep Y Value, will be use to load the correct chars
    375  f196
    376  f196		       a5 b1		      LDA	Tmp1	;3 Was previouly loaded
    377  f198		       f0 02		      BEQ	DrawScore	;2
    378  f19a				   RightScoreOffset
    379  f19a		       a2 05		      LDX	#5	;3 Points to D5 6 7...
    380  f19c
    381  f19c							;39
    382  f19c				   DrawScore
    383  f19c		       b4 d0		      LDY	ScoreD0,X	; 4
    384  f19e		       b9 00 fd 	      LDA	Font,Y	;4
    385  f1a1		       85 82		      STA	PF0Cache	;3
    386  f1a3		       d6 d0		      DEC	ScoreD0,X	;6 Can only DEC with X
    387  f1a5							;17
    388  f1a5
    389  f1a5		       b4 d1		      LDY	ScoreD1,X	; 4
    390  f1a7		       b9 00 fd 	      LDA	Font,Y	;4
    391  f1aa		       0a		      ASL		;2
    392  f1ab		       0a		      ASL		;2
    393  f1ac		       0a		      ASL		;2
    394  f1ad		       0a		      ASL		;2
    395  f1ae		       85 83		      STA	PF1Cache	;3
    396  f1b0		       d6 d1		      DEC	ScoreD1,X	;6
    397  f1b2							;9 (After Wsync)
    398  f1b2
    399  f1b2		       b4 d2		      LDY	ScoreD2,X	; 4
    400  f1b4		       b9 00 fd 	      LDA	Font,Y	;4
    401  f1b7		       29 0f		      AND	#%00001111
    402  f1b9		       05 83		      ORA	PF1Cache	;3
    403  f1bb		       85 83		      STA	PF1Cache	;3
    404  f1bd		       d6 d2		      DEC	ScoreD2,X	;6
    405  f1bf							;20
    406  f1bf
    407  f1bf		       b4 d3		      LDY	ScoreD3,X	; 3
    408  f1c1		       b9 00 fd 	      LDA	Font,Y	;4
    409  f1c4		       4a		      LSR		;2
    410  f1c5		       4a		      LSR		;2
    411  f1c6		       4a		      LSR		;2
    412  f1c7		       4a		      LSR		;2
    413  f1c8		       85 84		      STA	PF2Cache	;3
    414  f1ca		       d6 d3		      DEC	ScoreD3,X	;5
    415  f1cc							;23
    416  f1cc
    417  f1cc		       b4 d4		      LDY	ScoreD4,X	; 3
    418  f1ce		       b9 00 fd 	      LDA	Font,Y	;4
    419  f1d1		       29 f0		      AND	#%11110000
    420  f1d3		       05 84		      ORA	PF2Cache	;3
    421  f1d5		       85 84		      STA	PF2Cache	;3
    422  f1d7		       d6 d4		      DEC	ScoreD4,X	;5
    423  f1d9							;18
    424  f1d9
    425  f1d9		       a4 b0		      LDY	Tmp0	; 3 Restore the current line
    426  f1db		       88		      DEY		;2
    427  f1dc		       10 a8		      BPL	ScoreLoop	;4
    428  f1de
    429  f1de		       85 02		      STA	WSYNC
    430  f1e0
    431  f1e0		       20 ec f2 	      JSR	LoadPF
    432  f1e3
    433  f1e3		       85 02		      STA	WSYNC
    434  f1e5		       85 02		      STA	WSYNC
    435  f1e7
    436  f1e7		       a9 1c		      LDA	#PLAYER_1_COLOR
    437  f1e9		       85 06		      STA	COLUP0
    438  f1eb		       20 dd f2 	      JSR	ClearPF
    439  f1ee
    440  f1ee				   PrepareForTraffic
    441  f1ee							; LDA #%00000001
    442  f1ee							; STA CTRLPF
    443  f1ee							;19 cycles worse case before the VSync 
    444  f1ee
    445  f1ee		       a5 ba		      LDA	Collision	; Rando color after Collision
    446  f1f0		       85 06		      STA	COLUP0
    447  f1f2
    448  f1f2		       a9 00		      LDA	#BACKGROUND_COLOR
    449  f1f4		       85 07		      STA	COLUP1
    450  f1f6
    451  f1f6		       20 dd f2 	      JSR	ClearPF	;30
    452  f1f9							;Traffic colour
    453  f1f9		       a9 34		      LDA	#TRAFFIC_COLOR
    454  f1fb		       85 08		      STA	COLUPF
    455  f1fd
    456  f1fd		       a0 3a		      LDY	#SCREEN_SIZE - 6	;2 #63 ; (Score)
    457  f1ff
    458  f1ff		       a9 00		      LDA	#BACKGROUND_COLOR	;2 Make it in the very end, so we have one mor nice blue line
    459  f201		       85 09		      STA	COLUBK	;3
    460  f203
    461  f203							;main scanline loop...
    462  f203				   ScanLoop
    463  f203		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    464  f205
    465  f205							;Start of next line!			
    466  f205				   DrawCache		;24 Is the last line going to the top of the next frame?
    467  f205
    468  f205		       a5 82		      LDA	PF0Cache	;3
    469  f207		       85 0d		      STA	PF0	;3
    470  f209
    471  f209		       a5 81		      LDA	GRP0Cache	;3 ;buffer was set during last scanline
    472  f20b		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    473  f20d
    474  f20d		       a5 83		      LDA	PF1Cache	;3
    475  f20f		       85 0e		      STA	PF1	;3
    476  f211
    477  f211		       a5 84		      LDA	PF2Cache	;3
    478  f213		       85 0f		      STA	PF2	;3
    479  f215
    480  f215		       a9 00		      LDA	#0	;2
    481  f217		       85 82		      STA	PF0Cache	;3
    482  f219		       85 83		      STA	PF1Cache	;3
    483  f21b		       85 84		      STA	PF2Cache	;3
    484  f21d
    485  f21d				   BeginDrawCar0Block		;20 is the max, since if draw, does not check active
    486  f21d		       a6 80		      LDX	Car0Line	;3 check the visible player line...
    487  f21f		       f0 0a		      BEQ	FinishDrawCar0	;2	skip the drawing if its zero...
    488  f221				   DrawCar0
    489  f221		       bd ff fe 	      LDA	CarSprite-1,X	;4 (no page cross) otherwise, load the correct line from CarSprite
    490  f224							;section below... it's off by 1 though, since at zero
    491  f224							;we stop drawing
    492  f224		       85 81		      STA	GRP0Cache	;3	;put that line as player graphic for the next line
    493  f226		       c6 80		      DEC	Car0Line	;5	and decrement the line count
    494  f228							;STA WSYNC
    495  f228		       4c 33 f2 	      JMP	SkipActivateCar0	;3 save some cpu time
    496  f22b				   FinishDrawCar0
    497  f22b
    498  f22b				   CheckActivateCar0		;9 max
    499  f22b		       c0 08		      CPY	#CAR_0_Y	;2
    500  f22d		       d0 04		      BNE	SkipActivateCar0	;2
    501  f22f		       a9 07		      LDA	#CAR_SIZE	;2
    502  f231		       85 80		      STA	Car0Line	;3
    503  f233							;STA WSYNC
    504  f233				   SkipActivateCar0		;EndDrawCar0Block
    505  f233
    506  f233							;STA WSYNC ; 3 71 max
    507  f233
    508  f233							;NOP
    509  f233							; LDA #TRAFFIC_COLOR ;2
    510  f233							; STA COLUPF ;3
    511  f233
    512  f233							;Will set the initial value for PF1Cache
    513  f233				   DrawTraffic1 		; 
    514  f233		       98		      TYA		; 2
    515  f234		       18		      CLC		; 2 
    516  f235		       65 95		      ADC	TrafficOffset1 + 1	;3
    517  f237		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    518  f239		       b0 05		      BCS	EorOffsetWithCarry	; 4 max if branch max, 2 otherwise
    519  f23b		       45 96		      EOR	TrafficOffset1 + 2	; 2
    520  f23d		       4c 42 f2 	      JMP	AfterEorOffsetWithCarry	; 3
    521  f240				   EorOffsetWithCarry
    522  f240		       45 97		      EOR	TrafficOffset1 + 3	; 3
    523  f242				   AfterEorOffsetWithCarry		;18
    524  f242		       aa		      TAX		;2
    525  f243		       bd 00 fe 	      LDA	AesTable,X	; 4
    526  f246		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    527  f248		       b0 04		      BCS	FinishDrawTraffic1	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    528  f24a		       a9 60		      LDA	#%01100000	;2
    529  f24c		       85 83		      STA	PF1Cache	;3
    530  f24e				   FinishDrawTraffic1
    531  f24e
    532  f24e				   DrawTraffic2 		;
    533  f24e		       98		      TYA		; 2
    534  f24f		       18		      CLC		; 2 
    535  f250		       65 99		      ADC	TrafficOffset2 + 1	;3
    536  f252		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    537  f254		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    538  f256		       45 9a		      EOR	TrafficOffset2 + 2	; 2
    539  f258		       4c 5d f2 	      JMP	AfterEorOffsetWithCarry2	; 3
    540  f25b				   EorOffsetWithCarry2
    541  f25b		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    542  f25d				   AfterEorOffsetWithCarry2		;18
    543  f25d		       aa		      TAX		;2
    544  f25e		       bd 00 fe 	      LDA	AesTable,X	; 4
    545  f261		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    546  f263		       b0 06		      BCS	FinishDrawTraffic2	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    547  f265		       a5 83		      LDA	PF1Cache	;3
    548  f267		       09 0c		      ORA	#%00001100	;2
    549  f269		       85 83		      STA	PF1Cache	;3
    550  f26b				   FinishDrawTraffic2
    551  f26b							;36 cyles worse case!
    552  f26b
    553  f26b							;STA WSYNC ;65 / 137
    554  f26b
    555  f26b				   DrawTraffic3 		;
    556  f26b		       98		      TYA		; 2
    557  f26c		       18		      CLC		; 2 
    558  f26d		       65 9d		      ADC	TrafficOffset3 + 1	;3
    559  f26f		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    560  f271		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    561  f273		       45 9e		      EOR	TrafficOffset3 + 2	; 2
    562  f275		       4c 7a f2 	      JMP	AfterEorOffsetWithCarry3	; 3
    563  f278				   EorOffsetWithCarry3
    564  f278		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    565  f27a				   AfterEorOffsetWithCarry3		;18
    566  f27a		       aa		      TAX		;2
    567  f27b		       bd 00 fe 	      LDA	AesTable,X	; 4
    568  f27e		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    569  f280		       b0 08		      BCS	FinishDrawTraffic3	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    570  f282		       a9 01		      LDA	#%00000001	;2
    571  f284		       85 84		      STA	PF2Cache	;3
    572  f286		       05 83		      ORA	PF1Cache
    573  f288		       85 83		      STA	PF1Cache
    574  f28a				   FinishDrawTraffic3
    575  f28a							;36 max
    576  f28a
    577  f28a
    578  f28a							;SLEEP 80
    579  f28a				   DrawTraffic4 		;
    580  f28a		       98		      TYA		; 2
    581  f28b		       18		      CLC		; 2 
    582  f28c		       65 a1		      ADC	TrafficOffset4 + 1	;3
    583  f28e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    584  f290		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    585  f292		       45 a2		      EOR	TrafficOffset4 + 2	; 2
    586  f294		       4c 99 f2 	      JMP	AfterEorOffsetWithCarry4	; 3
    587  f297				   EorOffsetWithCarry4
    588  f297		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    589  f299				   AfterEorOffsetWithCarry4		;18
    590  f299		       aa		      TAX		;2
    591  f29a		       bd 00 fe 	      LDA	AesTable,X	; 4
    592  f29d		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    593  f29f		       b0 06		      BCS	FinishDrawTraffic4	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    594  f2a1		       a5 84		      LDA	PF2Cache	;3
    595  f2a3		       09 0c		      ORA	#%00001100	;2
    596  f2a5		       85 84		      STA	PF2Cache	;3	
    597  f2a7				   FinishDrawTraffic4
    598  f2a7
    599  f2a7
    600  f2a7				   DrawTraffic0 		; 16 max, 14 min, traffic 0 is the border
    601  f2a7		       98		      TYA		;2
    602  f2a8		       18		      CLC		;2
    603  f2a9		       65 91		      ADC	TrafficOffset0 + 1	; 3
    604  f2ab		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    605  f2ad		       f0 0a		      BEQ	SkipDrawTraffic0	; 2
    606  f2af		       a9 f0		      LDA	#%11110000	; 2
    607  f2b1		       85 82		      STA	PF0Cache	;3
    608  f2b3		       a5 84		      LDA	PF2Cache	;3
    609  f2b5		       09 e0		      ORA	#%11100000	;2
    610  f2b7		       85 84		      STA	PF2Cache
    611  f2b9				   SkipDrawTraffic0
    612  f2b9
    613  f2b9				   WhileScanLoop
    614  f2b9		       88		      DEY		;2
    615  f2ba		       30 03		      BMI	FinishScanLoop	;2 or 3 ;two big Breach	
    616  f2bc		       4c 03 f2 	      JMP	ScanLoop	;3
    617  f2bf				   FinishScanLoop		; 7 209 of 222
    618  f2bf
    619  f2bf		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    620  f2c1
    621  f2c1		       20 ec f2 	      JSR	LoadPF
    622  f2c4
    623  f2c4		       85 02		      STA	WSYNC	; do stuff!
    624  f2c6		       85 02		      STA	WSYNC
    625  f2c8		       85 02		      STA	WSYNC
    626  f2ca							;42 cycles to use here
    627  f2ca
    628  f2ca				   PrepareOverscan
    629  f2ca		       a9 02		      LDA	#2
    630  f2cc		       85 02		      STA	WSYNC
    631  f2ce		       85 01		      STA	VBLANK
    632  f2d0
    633  f2d0		       a9 23		      LDA	#35	; two more lines before overscan...
    634  f2d2		       8d 96 02 	      STA	TIM64T
    635  f2d5							;LDA #0
    636  f2d5							;STA VSYNC Is it needed? Why is this here, I don't remember		
    637  f2d5
    638  f2d5							;Do more logic
    639  f2d5
    640  f2d5				   OverScanWait
    641  f2d5		       ad 84 02 	      LDA	INTIM
    642  f2d8		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    643  f2da		       4c 2d f0 	      JMP	MainLoop
    644  f2dd
    645  f2dd				   ClearPF		; 26
    646  f2dd		       a9 00		      LDA	#0	;2
    647  f2df		       85 0d		      STA	PF0	;3
    648  f2e1		       85 0e		      STA	PF1	;3
    649  f2e3		       85 0f		      STA	PF2	;3	
    650  f2e5		       85 82		      STA	PF0Cache	;3
    651  f2e7		       85 83		      STA	PF1Cache	;3
    652  f2e9		       85 84		      STA	PF2Cache	;3 
    653  f2eb		       60		      RTS		;6
    654  f2ec
    655  f2ec				   LoadPF		; 24
    656  f2ec		       a5 82		      LDA	PF0Cache	;3
    657  f2ee		       85 0d		      STA	PF0	;3
    658  f2f0
    659  f2f0		       a5 83		      LDA	PF1Cache	;3
    660  f2f2		       85 0e		      STA	PF1	;3
    661  f2f4
    662  f2f4		       a5 84		      LDA	PF2Cache	;3
    663  f2f6		       85 0f		      STA	PF2	;3
    664  f2f8
    665  f2f8		       60		      RTS		;6
    666  f2f9
    667  f2f9							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
    668  fd00					      org	$FD00
    669  fd00				   Font
    670  fd00				   Space
    671  fd00		       00		      .byte.b	%0	;
    672  fd01		       00		      .byte.b	#0	;
    673  fd02		       00		      .byte.b	#0	;
    674  fd03		       00		      .byte.b	#0	;
    675  fd04		       00		      .byte.b	#0	;
    676  fd05				   N1
    677  fd05		       e7		      .byte.b	#%11100111	;
    678  fd06		       42		      .byte.b	#%01000010	; 
    679  fd07		       42		      .byte.b	#%01000010	; 
    680  fd08		       42		      .byte.b	#%01000010	; 
    681  fd09		       66		      .byte.b	#%01100110	;
    682  fd0a				   N2
    683  fd0a		       e7		      .byte.b	#%11100111	;
    684  fd0b		       24		      .byte.b	#%00100100	; 
    685  fd0c		       e7		      .byte.b	#%11100111	; 
    686  fd0d		       81		      .byte.b	#%10000001	; 
    687  fd0e		       e7		      .byte.b	#%11100111	;
    688  fd0f				   N3
    689  fd0f		       e7		      .byte.b	#%11100111	;
    690  fd10		       81		      .byte.b	#%10000001	; 
    691  fd11		       e7		      .byte.b	#%11100111	; 
    692  fd12		       81		      .byte.b	#%10000001	; 
    693  fd13		       e7		      .byte.b	#%11100111	;
    694  fd14				   N4
    695  fd14		       81		      .byte.b	#%10000001	;
    696  fd15		       81		      .byte.b	#%10000001	; 
    697  fd16		       e7		      .byte.b	#%11100111	; 
    698  fd17		       a5		      .byte.b	#%10100101	; 
    699  fd18		       a5		      .byte.b	#%10100101	;
    700  fd19				   N5
    701  fd19		       e7		      .byte.b	#%11100111	;
    702  fd1a		       81		      .byte.b	#%10000001	; 
    703  fd1b		       e7		      .byte.b	#%11100111	; 
    704  fd1c		       24		      .byte.b	#%00100100	; 
    705  fd1d		       e7		      .byte.b	#%11100111	;
    706  fd1e				   N6
    707  fd1e		       e7		      .byte.b	#%11100111	;
    708  fd1f		       a5		      .byte.b	#%10100101	; 
    709  fd20		       e7		      .byte.b	#%11100111	; 
    710  fd21		       24		      .byte.b	#%00100100	; 
    711  fd22		       e7		      .byte.b	#%11100111	;
    712  fd23				   N7
    713  fd23		       81		      .byte.b	#%10000001	;
    714  fd24		       81		      .byte.b	#%10000001	; 
    715  fd25		       81		      .byte.b	#%10000001	; 
    716  fd26		       81		      .byte.b	#%10000001	; 
    717  fd27		       e7		      .byte.b	#%11100111	;
    718  fd28				   N8
    719  fd28		       e7		      .byte.b	#%11100111	;
    720  fd29		       a5		      .byte.b	#%10100101	; 
    721  fd2a		       e7		      .byte.b	#%11100111	; 
    722  fd2b		       a5		      .byte.b	#%10100101	; 
    723  fd2c		       e7		      .byte.b	#%11100111	;
    724  fd2d				   N9
    725  fd2d		       e7		      .byte.b	#%11100111	;
    726  fd2e		       81		      .byte.b	#%10000001	; 
    727  fd2f		       e7		      .byte.b	#%11100111	; 
    728  fd30		       a5		      .byte.b	#%10100101	; 
    729  fd31		       e7		      .byte.b	#%11100111	;
    730  fd32				   N0
    731  fd32		       e7		      .byte.b	#%11100111	;
    732  fd33		       a5		      .byte.b	#%10100101	; 
    733  fd34		       a5		      .byte.b	#%10100101	; 
    734  fd35		       a5		      .byte.b	#%10100101	; 
    735  fd36		       e7		      .byte.b	#%11100111	;
    736  fd37
    737  fe00					      org	$FE00
    738  fe00				   AesTable
    739  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    740  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    741  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    742  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    743  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    744  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    745  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    746  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    747  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    748  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    749  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    750  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    751  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    752  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    753  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    754  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    755  ff00
    756  ff00							; From FF00 to FFFB (122 bytes) to use here
    757  ff00
    758  ff00				   CarSprite		; Upside down
    759  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    760  ff01		       ff		      .byte.b	#%11111111
    761  ff02		       24		      .byte.b	#%00100100
    762  ff03		       bd		      .byte.b	#%10111101
    763  ff04		       3c		      .byte.b	#%00111100
    764  ff05		       bd		      .byte.b	#%10111101
    765  ff06		       3c		      .byte.b	#%00111100
    766  ff07
    767  ff07
    768  ff07				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    769  ff07		       00		      .byte.b	#$00	;  Trafic0 L
    770  ff08		       00		      .byte.b	#$00	;  Trafic0 H
    771  ff09		       0a		      .byte.b	#$0A	;  Trafic1 L
    772  ff0a		       01		      .byte.b	#$01	;  Trafic1 H
    773  ff0b		       e6		      .byte.b	#$E6	;  Trafic2 L
    774  ff0c		       00		      .byte.b	#$00	;  Trafic2 H
    775  ff0d		       c2		      .byte.b	#$C2	;  Trafic3 L
    776  ff0e		       00		      .byte.b	#$00	;  Trafic3 H
    777  ff0f		       9e		      .byte.b	#$9E	;  Trafic4 L
    778  ff10		       00		      .byte.b	#$00	;  Trafic4 H
    779  ff11
    780  ff11
    781  fffc					      org	$FFFC
    782  fffc		       00 f0		      .word.w	Start
    783  fffe		       00 f0		      .word.w	Start
