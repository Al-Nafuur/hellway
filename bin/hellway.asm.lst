------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 0a	   BREAK_SPEED =	10
     26  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     28  f000
     29  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     30  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     31  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     32  f000
     33  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     34  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     35  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     36  f000
     37  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     38  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     39  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     40  f000
     41  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     42  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     43  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     44  f000
     45  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     46  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     47  f000
     48  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     49  f000
     50  f000		       00 96	   PLAYER1_COLOR =	$96
     51  f000
     52  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     53  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     54  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     55  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     56  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     57  f000
     58  f000		       00 35	   PLAYER_0_X_START =	$35	;
     59  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     60  f000
     61  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     62  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     63  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     64  f000		       00 03	   TIMEOVER_BREAK_INTERVAL =	%00000011	; Every 4 frames
     65  f000
     66  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     67  f000
     68  f000		       00 00	   BLACK      =	$00	;
     69  f000
     70  f000		       00 10	   MAX_GAME_MODE =	16
     71  f000
     72  f000		       00 08	   PARALLAX_SIZE =	8
     73  f000
     74  f000		       00 05	   HALF_TEXT_SIZE =	5
     75  f000
     76  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     77  f000
     78  f000		       00 49	   VERSION_COLOR =	$49
     79  f000
     80  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     81  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     82  f000		       00 00	   QR_CODE_COLOR =	$00
     83  f000		       00 19	   QR_CODE_SIZE =	25
     84  f000
     85  f000		       00 80	   GRP0Cache  =	$80
     86  f000		       00 81	   PF0Cache   =	$81
     87  f000		       00 82	   PF1Cache   =	$82
     88  f000		       00 83	   PF2Cache   =	$83
     89  f000		       00 84	   GRP1Cache  =	$84
     90  f000		       00 85	   ENABLCache =	$85
     91  f000		       00 86	   ENAM0Cache =	$86
     92  f000		       00 87	   ENAM1Cache =	$87
     93  f000
     94  f000		       00 88	   ParallaxMode =	$88
     95  f000
     96  f000		       00 8c	   FrameCount0 =	$8C	;
     97  f000		       00 8d	   FrameCount1 =	$8D	;
     98  f000
     99  f000		       00 8e	   Player0SpeedL =	$8E
    100  f000		       00 8f	   Player0SpeedH =	$8F
    101  f000
    102  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    103  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    104  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    105  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    106  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    107  f000
    108  f000		       00 a4	   CheckpointBcd0 =	$A4
    109  f000		       00 a5	   CheckpointBcd1 =	$A5
    110  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    111  f000
    112  f000							;Temporary variables, multiple uses
    113  f000		       00 b0	   Tmp0       =	$B0
    114  f000		       00 b1	   Tmp1       =	$B1
    115  f000		       00 b2	   Tmp2       =	$B2
    116  f000		       00 b3	   Tmp3       =	$B3
    117  f000
    118  f000		       00 b4	   ScoreBcd0  =	$B4
    119  f000		       00 b5	   ScoreBcd1  =	$B5
    120  f000		       00 b6	   ScoreBcd2  =	$B6
    121  f000		       00 b7	   ScoreBcd3  =	$B7
    122  f000
    123  f000		       00 b8	   CollisionCounter =	$B8
    124  f000		       00 b9	   Player0X   =	$B9
    125  f000		       00 ba	   CountdownTimer =	$BA
    126  f000		       00 bb	   Traffic0Msb =	$BB
    127  f000		       00 bc	   SwitchDebounceCounter =	$BC
    128  f000
    129  f000		       00 bd	   TimeBcd0   =	$BD
    130  f000		       00 be	   TimeBcd1   =	$BE
    131  f000		       00 bf	   TimeBcd2   =	$BF
    132  f000
    133  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    134  f000		       00 c1	   TrafficChance =	$C1
    135  f000		       00 c2	   CheckpointTime =	$C2
    136  f000		       00 c3	   TrafficColor =	$C3
    137  f000		       00 c4	   CurrentDifficulty =	$C4
    138  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    139  f000
    140  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    141  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    142  f000
    143  f000		       00 ca	   BorderType =	$CA
    144  f000
    145  f000		       00 cb	   HitCountBcd0 =	$CB
    146  f000		       00 cc	   HitCountBcd1 =	$CC
    147  f000
    148  f000		       00 cd	   GlideTimeBcd0 =	$CD
    149  f000		       00 ce	   GlideTimeBcd1 =	$CE
    150  f000
    151  f000		       00 cf	   OneSecondConter =	$CF
    152  f000
    153  f000		       00 d0	   ScoreD0    =	$D0
    154  f000		       00 d1	   ScoreD1    =	$D1
    155  f000		       00 d2	   ScoreD2    =	$D2
    156  f000		       00 d3	   ScoreD3    =	$D3
    157  f000		       00 d4	   ScoreD4    =	$D4
    158  f000		       00 d5	   ScoreFontColor =	$D5
    159  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    160  f000		       00 d7	   NextCheckpoint =	$D7
    161  f000
    162  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    163  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    164  f000
    165  f000
    166  f000							;generic start up stuff, put zero in all...
    167  f000				   BeforeStart		;All variables that are kept on game reset or select
    168  f000		       a0 00		      LDY	#0
    169  f002		       84 bc		      STY	SwitchDebounceCounter
    170  f004		       a0 10		      LDY	#16
    171  f006		       84 c5		      STY	GameMode
    172  f008		       a0 e0		      LDY	#%11100000	; Default Parallax
    173  f00a		       84 88		      STY	ParallaxMode
    174  f00c
    175  f00c				   Start
    176  f00c		       78		      SEI
    177  f00d		       d8		      CLD
    178  f00e		       a2 ff		      LDX	#$FF
    179  f010		       9a		      TXS
    180  f011		       a9 00		      LDA	#0
    181  f013				   ClearMem
    182  f013		       e0 bc		      CPX	#SwitchDebounceCounter
    183  f015		       f0 0a		      BEQ	SkipClean
    184  f017		       e0 c5		      CPX	#GameMode
    185  f019		       f0 06		      BEQ	SkipClean
    186  f01b		       e0 88		      CPX	#ParallaxMode
    187  f01d		       f0 02		      BEQ	SkipClean
    188  f01f		       95 00		      STA	0,X
    189  f021				   SkipClean
    190  f021		       ca		      DEX
    191  f022		       d0 ef		      BNE	ClearMem
    192  f024
    193  f024							;Setting some variables...
    194  f024
    195  f024				   SettingTrafficOffsets		; Time sensitive with player H position
    196  f024		       85 02		      STA	WSYNC	;We will set player position
    197  f026		       20 3f f7 	      JSR	DefaultOffsets
    198  f029
    199  f029		       ad d2 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    200  f02c		       85 8e		      STA	Player0SpeedL
    201  f02e
      0  f02e					      SLEEP	11	;18
      1  f02e				   .CYCLES    SET	11
      2  f02e
      3  f02e				  -	      IF	.CYCLES < 2
      4  f02e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f02e				  -	      ERR
      6  f02e					      ENDIF
      7  f02e
      8  f02e					      IF	.CYCLES & 1
      9  f02e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f02e				  -	      nop	0
     11  f02e					      ELSE
     12  f02e		       24 00		      bit	VSYNC
     13  f030					      ENDIF
     14  f030				   .CYCLES    SET	.CYCLES - 3
     15  f030					      ENDIF
     16  f030
     17  f030					      REPEAT	.CYCLES / 2
     18  f030		       ea		      nop
     17  f030					      REPEND
     18  f031		       ea		      nop
     17  f031					      REPEND
     18  f032		       ea		      nop
     17  f032					      REPEND
     18  f033		       ea		      nop
     19  f034					      REPEND
    203  f034		       85 10		      STA	RESP0
    204  f036
    205  f036		       a2 00		      LDX	#0
    206  f038		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    207  f03b		       85 a6		      STA	StartSWCHB	; For game over
    208  f03d		       29 c0		      AND	#%11000000
    209  f03f		       f0 0b		      BEQ	CallConfigureDifficulty
    210  f041		       e8		      INX
    211  f042		       c9 80		      CMP	#%10000000
    212  f044		       f0 06		      BEQ	CallConfigureDifficulty
    213  f046		       e8		      INX
    214  f047		       c9 40		      CMP	#%01000000
    215  f049		       f0 01		      BEQ	CallConfigureDifficulty
    216  f04b		       e8		      INX
    217  f04c
    218  f04c				   CallConfigureDifficulty
    219  f04c		       86 c4		      STX	CurrentDifficulty
    220  f04e		       20 f7 f6 	      JSR	ConfigureDifficulty
    221  f051
    222  f051				   ConfigureOneSecondTimer
    223  f051		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    224  f053		       85 cf		      STA	OneSecondConter
    225  f055
    226  f055				   HPositioning
    227  f055		       85 02		      STA	WSYNC
    228  f057
    229  f057		       a9 30		      LDA	#%00110000	;2 Missile Size
    230  f059		       85 04		      STA	NUSIZ0	;3
    231  f05b		       85 05		      STA	NUSIZ1	;3
    232  f05d
    233  f05d		       a9 35		      LDA	#PLAYER_0_X_START	;2
    234  f05f		       85 b9		      STA	Player0X	;3
    235  f061
    236  f061		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    237  f063		       85 ba		      STA	CountdownTimer	;3
    238  f065
    239  f065		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    240  f067		       85 d7		      STA	NextCheckpoint
    241  f069
    242  f069		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f06b					      SLEEP	11	;
      1  f06b				   .CYCLES    SET	11
      2  f06b
      3  f06b				  -	      IF	.CYCLES < 2
      4  f06b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f06b				  -	      ERR
      6  f06b					      ENDIF
      7  f06b
      8  f06b					      IF	.CYCLES & 1
      9  f06b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f06b				  -	      nop	0
     11  f06b					      ELSE
     12  f06b		       24 00		      bit	VSYNC
     13  f06d					      ENDIF
     14  f06d				   .CYCLES    SET	.CYCLES - 3
     15  f06d					      ENDIF
     16  f06d
     17  f06d					      REPEAT	.CYCLES / 2
     18  f06d		       ea		      nop
     17  f06d					      REPEND
     18  f06e		       ea		      nop
     17  f06e					      REPEND
     18  f06f		       ea		      nop
     17  f06f					      REPEND
     18  f070		       ea		      nop
     19  f071					      REPEND
    244  f071		       85 11		      STA	RESP1
      0  f073					      SLEEP	2	;
      1  f073				   .CYCLES    SET	2
      2  f073
      3  f073				  -	      IF	.CYCLES < 2
      4  f073				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f073				  -	      ERR
      6  f073					      ENDIF
      7  f073
      8  f073				  -	      IF	.CYCLES & 1
      9  f073				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f073				  -	      nop	0
     11  f073				  -	      ELSE
     12  f073				  -	      bit	VSYNC
     13  f073				  -	      ENDIF
     14  f073				  -.CYCLES    SET	.CYCLES - 3
     15  f073					      ENDIF
     16  f073
     17  f073					      REPEAT	.CYCLES / 2
     18  f073		       ea		      nop
     19  f074					      REPEND
    246  f074		       85 14		      STA	RESBL
      0  f076					      SLEEP	2	;
      1  f076				   .CYCLES    SET	2
      2  f076
      3  f076				  -	      IF	.CYCLES < 2
      4  f076				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f076				  -	      ERR
      6  f076					      ENDIF
      7  f076
      8  f076				  -	      IF	.CYCLES & 1
      9  f076				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f076				  -	      nop	0
     11  f076				  -	      ELSE
     12  f076				  -	      bit	VSYNC
     13  f076				  -	      ENDIF
     14  f076				  -.CYCLES    SET	.CYCLES - 3
     15  f076					      ENDIF
     16  f076
     17  f076					      REPEAT	.CYCLES / 2
     18  f076		       ea		      nop
     19  f077					      REPEND
    248  f077		       85 12		      STA	RESM0
      0  f079					      SLEEP	2
      1  f079				   .CYCLES    SET	2
      2  f079
      3  f079				  -	      IF	.CYCLES < 2
      4  f079				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f079				  -	      ERR
      6  f079					      ENDIF
      7  f079
      8  f079				  -	      IF	.CYCLES & 1
      9  f079				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f079				  -	      nop	0
     11  f079				  -	      ELSE
     12  f079				  -	      bit	VSYNC
     13  f079				  -	      ENDIF
     14  f079				  -.CYCLES    SET	.CYCLES - 3
     15  f079					      ENDIF
     16  f079
     17  f079					      REPEAT	.CYCLES / 2
     18  f079		       ea		      nop
     19  f07a					      REPEND
    250  f07a		       85 13		      STA	RESM1
    251  f07c
    252  f07c		       a9 f0		      LDA	#$F0
    253  f07e		       85 24		      STA	HMBL
    254  f080		       85 22		      STA	HMM0
    255  f082		       85 23		      STA	HMM1
    256  f084		       85 02		      STA	WSYNC
    257  f086		       85 2a		      STA	HMOVE
    258  f088		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    259  f08a		       85 2b		      STA	HMCLR
    260  f08c
    261  f08c							;SLEEP 24
    262  f08c							;STA HMCLR
    263  f08c
    264  f08c							;VSYNC time
    265  f08c				   MainLoop
    266  f08c		       a9 02		      LDA	#2
    267  f08e		       85 00		      STA	VSYNC
    268  f090		       85 02		      STA	WSYNC
    269  f092		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    270  f094		       85 2a		      STA	HMOVE	;2
    271  f096		       85 02		      STA	WSYNC	;3
    272  f098		       a9 29		      LDA	#41	;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    273  f09a		       8d 96 02 	      STA	TIM64T	;3	
    274  f09d		       a9 00		      LDA	#0	;2
    275  f09f		       85 00		      STA	VSYNC	;3	
    276  f0a1
    277  f0a1							;Read Fire Button before, will make it start the game for now.
    278  f0a1				   StartGame
    279  f0a1		       a5 0c		      LDA	INPT4	;3
    280  f0a3		       30 2e		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    281  f0a5		       a5 c0		      LDA	GameStatus	;3
    282  f0a7		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
    283  f0a9		       d0 28		      BNE	SkipGameStart
    284  f0ab		       a5 c5		      LDA	GameMode
    285  f0ad		       c9 10		      CMP	#MAX_GAME_MODE
    286  f0af		       d0 0b		      BNE	SetGameRunning
    287  f0b1		       a9 00		      LDA	#0
    288  f0b3		       85 c5		      STA	GameMode
    289  f0b5		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    290  f0b7		       85 bc		      STA	SwitchDebounceCounter
    291  f0b9		       4c d3 f0 	      JMP	SkipGameStart
    292  f0bc				   SetGameRunning
    293  f0bc		       e6 c0		      INC	GameStatus
    294  f0be		       a9 00		      LDA	#0	;
    295  f0c0		       85 8c		      STA	FrameCount0
    296  f0c2		       85 8d		      STA	FrameCount1
    297  f0c4		       a9 0a		      LDA	#10
    298  f0c6		       85 19		      STA	AUDV0
    299  f0c8		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    300  f0ca		       85 d5		      STA	ScoreFontColor
    301  f0cc		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    302  f0ce		       85 d6		      STA	ScoreFontColorHoldChange
    303  f0d0		       4c 4f f1 	      JMP	SkipIncFC1	; Make the worse case stable
    304  f0d3				   SkipGameStart
    305  f0d3
    306  f0d3				   RandomizeGame
    307  f0d3		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    308  f0d5		       d0 30		      BNE	EndRandomizeGame
    309  f0d7		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    310  f0d9		       29 02		      AND	#%00000010
    311  f0db		       f0 27		      BEQ	DeterministicGame
    312  f0dd		       a6 96		      LDX	TrafficOffset1 + 2
    313  f0df		       bd 00 fe 	      LDA	AesTable,X
    314  f0e2		       45 8c		      EOR	FrameCount0
    315  f0e4		       85 96		      STA	TrafficOffset1 + 2
    316  f0e6		       a6 9a		      LDX	TrafficOffset2 + 2
    317  f0e8		       bd 00 fe 	      LDA	AesTable,X
    318  f0eb		       45 8c		      EOR	FrameCount0
    319  f0ed		       85 9a		      STA	TrafficOffset2 + 2
    320  f0ef		       a6 9e		      LDX	TrafficOffset3 + 2
    321  f0f1		       bd 00 fe 	      LDA	AesTable,X
    322  f0f4		       45 8c		      EOR	FrameCount0
    323  f0f6		       85 9e		      STA	TrafficOffset3 + 2
    324  f0f8		       a6 a2		      LDX	TrafficOffset4 + 2
    325  f0fa		       bd 00 fe 	      LDA	AesTable,X
    326  f0fd		       45 8c		      EOR	FrameCount0
    327  f0ff		       85 a2		      STA	TrafficOffset4 + 2
    328  f101		       4c 07 f1 	      JMP	EndRandomizeGame
    329  f104
    330  f104				   DeterministicGame
    331  f104		       20 3f f7 	      JSR	DefaultOffsets
    332  f107
    333  f107				   EndRandomizeGame
    334  f107
    335  f107				   ReadSwitches
    336  f107		       a6 bc		      LDX	SwitchDebounceCounter
    337  f109		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    338  f10b		       a9 01		      LDA	#%00000001
    339  f10d		       2c 82 02 	      BIT	SWCHB
    340  f110		       d0 07		      BNE	SkipReset
    341  f112		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    342  f114		       85 bc		      STA	SwitchDebounceCounter
    343  f116		       4c 0c f0 	      JMP	Start
    344  f119				   SkipReset
    345  f119
    346  f119				   GameModeSelect
    347  f119		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    348  f11b		       d0 27		      BNE	SkipGameSelect
    349  f11d		       20 f7 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    350  f120				   ReadDpadParallax
    351  f120		       ad 80 02 	      LDA	SWCHA
    352  f123		       29 f0		      AND	#%11110000
    353  f125		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    354  f127		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    355  f129		       85 88		      STA	ParallaxMode
    356  f12b				   ContinueGameSelect
    357  f12b		       a9 02		      LDA	#%00000010
    358  f12d		       2c 82 02 	      BIT	SWCHB
    359  f130		       d0 12		      BNE	SkipGameSelect
    360  f132		       a6 c5		      LDX	GameMode
    361  f134		       e0 10		      CPX	#MAX_GAME_MODE
    362  f136		       f0 04		      BEQ	ResetGameMode
    363  f138		       e8		      INX
    364  f139		       4c 3e f1 	      JMP	StoreGameMode
    365  f13c				   ResetGameMode
    366  f13c		       a2 00		      LDX	#0
    367  f13e				   StoreGameMode
    368  f13e		       86 c5		      STX	GameMode
    369  f140		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    370  f142		       85 bc		      STA	SwitchDebounceCounter
    371  f144				   SkipGameSelect
    372  f144		       4c 49 f1 	      JMP	EndReadSwitches
    373  f147				   DecrementSwitchDebounceCounter
    374  f147		       c6 bc		      DEC	SwitchDebounceCounter
    375  f149				   EndReadSwitches
    376  f149
    377  f149				   CountFrame
    378  f149		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    379  f14b		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    380  f14d		       e6 8d		      INC	FrameCount1	; 5 Still not used
    381  f14f				   SkipIncFC1
    382  f14f
    383  f14f				   CallDrawQrCode
    384  f14f		       a5 c5		      LDA	GameMode
    385  f151		       c9 10		      CMP	#MAX_GAME_MODE
    386  f153		       d0 03		      BNE	TestIsGameRunning
    387  f155		       4c ed fa 	      JMP	DrawQrCode
    388  f158
    389  f158							;Does not update the game if not running
    390  f158				   TestIsGameRunning
    391  f158		       a5 c0		      LDA	GameStatus	;3
    392  f15a		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    393  f15c		       4c 2b f3 	      JMP	SkipUpdateLogic
    394  f15f				   ContinueWithGameLogic
    395  f15f
    396  f15f
    397  f15f				   EverySecond		; 64 frames to be more precise
    398  f15f		       a9 3f		      LDA	#%00111111
    399  f161		       25 8c		      AND	FrameCount0
    400  f163		       d0 06		      BNE	SkipEverySecondAction
    401  f165		       c5 ba		      CMP	CountdownTimer
    402  f167		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    403  f169		       c6 ba		      DEC	CountdownTimer
    404  f16b				   SkipEverySecondAction
    405  f16b
    406  f16b
    407  f16b				   BreakOnTimeOver		; Uses LDX as the breaking speed
    408  f16b		       a2 00		      LDX	#0
    409  f16d		       a5 ba		      LDA	CountdownTimer
    410  f16f		       d0 08		      BNE	Break
    411  f171		       a5 8c		      LDA	FrameCount0
    412  f173		       29 03		      AND	#TIMEOVER_BREAK_INTERVAL
    413  f175		       d0 02		      BNE	Break
    414  f177		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    415  f179
    416  f179				   Break
    417  f179		       a9 20		      LDA	#%00100000	;Down in controller
    418  f17b		       2c 80 02 	      BIT	SWCHA
    419  f17e		       d0 0b		      BNE	BreakNonZero
    420  f180		       a5 0c		      LDA	INPT4	;3
    421  f182		       10 05		      BPL	BreakWhileAccelerating
    422  f184		       a2 0a		      LDX	#BREAK_SPEED
    423  f186		       4c 8b f1 	      JMP	BreakNonZero
    424  f189				   BreakWhileAccelerating		; Allow better control while breaking.
    425  f189		       a2 05		      LDX	#BREAK_SPEED / 2
    426  f18b
    427  f18b				   BreakNonZero
    428  f18b		       e0 00		      CPX	#0
    429  f18d		       f0 2b		      BEQ	SkipBreak
    430  f18f		       86 b0		      STX	Tmp0
    431  f191
    432  f191				   DecreaseSpeed
    433  f191		       38		      SEC
    434  f192		       a5 8e		      LDA	Player0SpeedL
    435  f194		       e5 b0		      SBC	Tmp0
    436  f196		       85 8e		      STA	Player0SpeedL
    437  f198		       a5 8f		      LDA	Player0SpeedH
    438  f19a		       e9 00		      SBC	#0
    439  f19c		       85 8f		      STA	Player0SpeedH
    440  f19e
    441  f19e				   CheckMinSpeed
    442  f19e		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    443  f1a0		       c9 00		      CMP	#CAR_MIN_SPEED_H
    444  f1a2		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    445  f1a4		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    446  f1a6
    447  f1a6				   CompareLBreakSpeed
    448  f1a6		       a5 8e		      LDA	Player0SpeedL
    449  f1a8		       c9 00		      CMP	#CAR_MIN_SPEED_L
    450  f1aa		       90 03		      BCC	ResetMinSpeed	; Less than memory
    451  f1ac		       4c b7 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    452  f1af
    453  f1af				   ResetMinSpeed
    454  f1af		       a9 00		      LDA	#CAR_MIN_SPEED_H
    455  f1b1		       85 8f		      STA	Player0SpeedH
    456  f1b3		       a9 00		      LDA	#CAR_MIN_SPEED_L
    457  f1b5		       85 8e		      STA	Player0SpeedL
    458  f1b7
    459  f1b7				   SkipAccelerateIfBreaking
    460  f1b7		       4c ea f1 	      JMP	SkipAccelerate
    461  f1ba				   SkipBreak
    462  f1ba
    463  f1ba				   Acelerates
    464  f1ba		       a5 ba		      LDA	CountdownTimer
    465  f1bc		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    466  f1be		       a5 0c		      LDA	INPT4	;3
    467  f1c0		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    468  f1c2		       a9 10		      LDA	#%00010000	;UP in controller
    469  f1c4		       2c 80 02 	      BIT	SWCHA
    470  f1c7		       d0 21		      BNE	SkipAccelerate
    471  f1c9
    472  f1c9				   IncreaseCarSpeed
    473  f1c9							;Adds speed
    474  f1c9		       18		      CLC
    475  f1ca		       a5 8e		      LDA	Player0SpeedL
    476  f1cc		       69 01		      ADC	#ACCELERATE_SPEED
    477  f1ce		       85 8e		      STA	Player0SpeedL
    478  f1d0		       a5 8f		      LDA	Player0SpeedH
    479  f1d2		       69 00		      ADC	#0
    480  f1d4		       85 8f		      STA	Player0SpeedH
    481  f1d6
    482  f1d6				   CheckIfAlreadyMaxSpeed
    483  f1d6		       c9 02		      CMP	#CAR_MAX_SPEED_H
    484  f1d8		       90 10		      BCC	SkipAccelerate	; less than my max speed
    485  f1da		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    486  f1dc							;High bit is max, compare the low
    487  f1dc		       a5 8e		      LDA	Player0SpeedL
    488  f1de		       c9 80		      CMP	#CAR_MAX_SPEED_L
    489  f1e0		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    490  f1e2							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    491  f1e2
    492  f1e2				   ResetToMaxSpeed		; Speed is more, or is already max
    493  f1e2		       a9 02		      LDA	#CAR_MAX_SPEED_H
    494  f1e4		       85 8f		      STA	Player0SpeedH
    495  f1e6		       a9 80		      LDA	#CAR_MAX_SPEED_L
    496  f1e8		       85 8e		      STA	Player0SpeedL
    497  f1ea				   SkipAccelerate
    498  f1ea
    499  f1ea				   InitUpdateOffsets
    500  f1ea		       a2 00		      LDX	#0	; Memory Offset 24 bit
    501  f1ec		       a0 00		      LDY	#0	; Line Speeds 16 bits
    502  f1ee		       a5 91		      LDA	TrafficOffset0 + 1	;
    503  f1f0		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    504  f1f2		       a5 c5		      LDA	GameMode
    505  f1f4		       29 04		      AND	#%00000100	; GameModes with high delta
    506  f1f6		       f0 02		      BEQ	UpdateOffsets
    507  f1f8		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    508  f1fa
    509  f1fa				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    510  f1fa		       38		      SEC
    511  f1fb		       a5 8e		      LDA	Player0SpeedL
    512  f1fd		       f9 ca ff 	      SBC	TrafficSpeeds,Y
    513  f200		       85 b0		      STA	Tmp0
    514  f202		       c8		      INY
    515  f203		       a5 8f		      LDA	Player0SpeedH
    516  f205		       f9 ca ff 	      SBC	TrafficSpeeds,Y
    517  f208		       85 b1		      STA	Tmp1
    518  f20a		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    519  f20c		       e9 00		      SBC	#0
    520  f20e		       85 b2		      STA	Tmp2
    521  f210
    522  f210				   AddsTheResult
    523  f210		       18		      CLC
    524  f211		       a5 b0		      LDA	Tmp0
    525  f213		       75 90		      ADC	TrafficOffset0,X
    526  f215		       95 90		      STA	TrafficOffset0,X
    527  f217		       e8		      INX
    528  f218		       a5 b1		      LDA	Tmp1
    529  f21a		       75 90		      ADC	TrafficOffset0,X
    530  f21c		       95 90		      STA	TrafficOffset0,X
    531  f21e		       e8		      INX
    532  f21f		       a5 b2		      LDA	Tmp2	; Carry
    533  f221		       75 90		      ADC	TrafficOffset0,X
    534  f223		       95 90		      STA	TrafficOffset0,X
    535  f225		       90 06		      BCC	CalculateOffsetCache
    536  f227		       e0 02		      CPX	#2	;MSB offset 0
    537  f229		       d0 02		      BNE	CalculateOffsetCache
    538  f22b		       e6 bb		      INC	Traffic0Msb
    539  f22d
    540  f22d				   CalculateOffsetCache
    541  f22d		       e8		      INX
    542  f22e		       38		      SEC
    543  f22f		       69 00		      ADC	#0	;Increment by one
    544  f231		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    545  f233
    546  f233				   PrepareNextUpdateLoop
    547  f233		       c8		      INY
    548  f234		       e8		      INX
    549  f235		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    550  f237		       d0 c1		      BNE	UpdateOffsets
    551  f239
    552  f239				   BcdScore		; 48
    553  f239		       a5 91		      LDA	TrafficOffset0 + 1	;3
    554  f23b		       45 b3		      EOR	Tmp3	;3
    555  f23d		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    556  f23f		       f0 1b		      BEQ	FinishBcdScore	;2
    557  f241
    558  f241				   ContinueBcdScore
    559  f241		       f8		      SED		;2
    560  f242		       18		      CLC		;2
    561  f243		       a5 b4		      LDA	ScoreBcd0	;3
    562  f245		       69 01		      ADC	#1	;2
    563  f247		       85 b4		      STA	ScoreBcd0	;3
    564  f249		       a5 b5		      LDA	ScoreBcd1	;3
    565  f24b		       69 00		      ADC	#0	;2
    566  f24d		       85 b5		      STA	ScoreBcd1	;3
    567  f24f		       a5 b6		      LDA	ScoreBcd2	;3
    568  f251		       69 00		      ADC	#0	;2
    569  f253		       85 b6		      STA	ScoreBcd2	;3
    570  f255		       a5 b7		      LDA	ScoreBcd3	;3
    571  f257		       69 00		      ADC	#0	;2
    572  f259		       85 b7		      STA	ScoreBcd3	;3
    573  f25b		       d8		      CLD		;2
    574  f25c				   FinishBcdScore
    575  f25c
    576  f25c							;Until store the movemnt, LDX contains the value to be stored.
    577  f25c				   TestCollision		;
    578  f25c							; see if player0 colides with the rest
    579  f25c		       a5 00		      LDA	CXM0P
    580  f25e		       05 01		      ORA	CXM1P
    581  f260		       05 01		      ORA	CXM1P
    582  f262		       05 02		      ORA	CXP0FB
    583  f264		       05 07		      ORA	CXPPMM
    584  f266		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    585  f268		       f0 38		      BEQ	NoCollision	;skip if not hitting...
    586  f26a		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    587  f26c		       d0 34		      BNE	NoCollision
    588  f26e		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    589  f270		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    590  f272		       f0 2e		      BEQ	NoCollision
    591  f274		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    592  f276		       f0 2a		      BEQ	NoCollision
    593  f278		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    594  f27a		       85 b8		      STA	CollisionCounter	;and store as colision.
    595  f27c				   CountBcdColision
    596  f27c		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    597  f27e		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    598  f280		       f0 17		      BEQ	SkipSetColisionSpeed
    599  f282		       f8		      SED		;2
    600  f283		       18		      CLC		;2
    601  f284		       a5 cb		      LDA	HitCountBcd0	;3
    602  f286		       69 01		      ADC	#1	;3
    603  f288		       85 cb		      STA	HitCountBcd0	;3
    604  f28a		       a5 cc		      LDA	HitCountBcd1	;3
    605  f28c		       69 00		      ADC	#0	;2
    606  f28e		       85 cc		      STA	HitCountBcd1	;3
    607  f290		       d8		      CLD		;2
    608  f291				   EndCountBcdColision
    609  f291		       a9 10		      LDA	#COLLISION_SPEED_L	;
    610  f293		       c5 8e		      CMP	Player0SpeedL
    611  f295		       b0 02		      BCS	SkipSetColisionSpeed
    612  f297		       85 8e		      STA	Player0SpeedL
    613  f299				   SkipSetColisionSpeed
    614  f299		       a9 00		      LDA	#0
    615  f29b		       85 8f		      STA	Player0SpeedH
    616  f29d		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    617  f29f		       4c df f2 	      JMP	StoreHMove	; We keep position consistent
    618  f2a2				   NoCollision
    619  f2a2
    620  f2a2				   DecrementCollision
    621  f2a2		       a4 b8		      LDY	CollisionCounter
    622  f2a4		       f0 07		      BEQ	FinishDecrementCollision
    623  f2a6		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    624  f2a8		       85 04		      STA	NUSIZ0
    625  f2aa		       88		      DEY
    626  f2ab		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    627  f2ad				   FinishDecrementCollision
    628  f2ad
    629  f2ad				   ResetPlayerSize
    630  f2ad		       d0 04		      BNE	FinishResetPlayerSize
    631  f2af		       a9 30		      LDA	#%00110000
    632  f2b1		       85 04		      STA	NUSIZ0	;
    633  f2b3				   FinishResetPlayerSize
    634  f2b3
    635  f2b3				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    636  f2b3		       c0 01		      CPY	#1	; Last frame before reset
    637  f2b5		       d0 05		      BNE	SkipResetPlayerPosition
    638  f2b7		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    639  f2b9		       4c df f2 	      JMP	StoreHMove
    640  f2bc				   SkipResetPlayerPosition
    641  f2bc
    642  f2bc							; for left and right, we're gonna 
    643  f2bc							; set the horizontal speed, and then do
    644  f2bc							; a single HMOVE.  We'll use X to hold the
    645  f2bc							; horizontal speed, then store it in the 
    646  f2bc							; appropriate register
    647  f2bc				   PrepareReadXAxis
    648  f2bc		       a2 00		      LDX	#0
    649  f2be		       a4 b9		      LDY	Player0X
    650  f2c0				   BeginReadLeft
    651  f2c0		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    652  f2c2		       a9 40		      LDA	#%01000000	;Left
    653  f2c4		       2c 80 02 	      BIT	SWCHA
    654  f2c7		       d0 07		      BNE	SkipMoveLeft
    655  f2c9		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    656  f2cb		       c6 b9		      DEC	Player0X
    657  f2cd		       4c df f2 	      JMP	StoreHMove	; Cannot move left and right...
    658  f2d0				   SkipMoveLeft
    659  f2d0				   BeginReadRight
    660  f2d0		       c0 36		      CPY	#PLAYER_0_MAX_X
    661  f2d2		       f0 0b		      BEQ	SkipMoveRight	; At max already
    662  f2d4		       a9 80		      LDA	#%10000000	;Right
    663  f2d6		       2c 80 02 	      BIT	SWCHA
    664  f2d9		       d0 04		      BNE	SkipMoveRight
    665  f2db		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    666  f2dd		       e6 b9		      INC	Player0X
    667  f2df				   SkipMoveRight
    668  f2df				   StoreHMove
    669  f2df		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    670  f2e1		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    671  f2e3
    672  f2e3				   DividePlayerSpeedBy4
    673  f2e3		       a5 8f		      LDA	Player0SpeedH
    674  f2e5		       0a		      ASL
    675  f2e6		       0a		      ASL
    676  f2e7		       0a		      ASL
    677  f2e8		       0a		      ASL
    678  f2e9		       0a		      ASL
    679  f2ea		       0a		      ASL
    680  f2eb		       85 b1		      STA	Tmp1
    681  f2ed		       a5 8e		      LDA	Player0SpeedL
    682  f2ef		       4a		      LSR
    683  f2f0		       4a		      LSR
    684  f2f1		       29 3f		      AND	#%00111111
    685  f2f3		       05 b1		      ORA	Tmp1
    686  f2f5		       85 b0		      STA	Tmp0	; Division Result
    687  f2f7
    688  f2f7				   CalculateParallax1Offset		; 7/8 speed
    689  f2f7		       38		      SEC
    690  f2f8		       a5 8e		      LDA	Player0SpeedL
    691  f2fa		       e5 b0		      SBC	Tmp0
    692  f2fc		       85 b2		      STA	Tmp2
    693  f2fe		       a5 8f		      LDA	Player0SpeedH
    694  f300		       e9 00		      SBC	#0
    695  f302		       85 b3		      STA	Tmp3
    696  f304
    697  f304		       18		      CLC
    698  f305		       a5 c6		      LDA	ParallaxOffset1
    699  f307		       65 b2		      ADC	Tmp2
    700  f309		       85 c6		      STA	ParallaxOffset1
    701  f30b		       a5 c7		      LDA	ParallaxOffset1 + 1
    702  f30d		       65 b3		      ADC	Tmp3
    703  f30f		       85 c7		      STA	ParallaxOffset1 + 1
    704  f311
    705  f311				   CalculateParallax2Offset		; 6/8 speed
    706  f311		       38		      SEC
    707  f312		       a5 b2		      LDA	Tmp2
    708  f314		       e5 b0		      SBC	Tmp0
    709  f316		       85 b2		      STA	Tmp2
    710  f318		       a5 b3		      LDA	Tmp3
    711  f31a		       e9 00		      SBC	#0
    712  f31c		       85 b3		      STA	Tmp3
    713  f31e
    714  f31e		       18		      CLC
    715  f31f		       a5 c8		      LDA	ParallaxOffset2
    716  f321		       65 b2		      ADC	Tmp2
    717  f323		       85 c8		      STA	ParallaxOffset2
    718  f325		       a5 c9		      LDA	ParallaxOffset2 + 1
    719  f327		       65 b3		      ADC	Tmp3
    720  f329		       85 c9		      STA	ParallaxOffset2 + 1
    721  f32b
    722  f32b				   SkipUpdateLogic		; Continue here if not paused
    723  f32b
    724  f32b
    725  f32b				   ProcessBorder		;Can be optimized (probably)
    726  f32b		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    727  f32d		       a5 88		      LDA	ParallaxMode
    728  f32f		       c9 70		      CMP	#%01110000
    729  f331		       f0 1a		      BEQ	HorizontalParallaxMode
    730  f333		       c9 d0		      CMP	#%11010000
    731  f335		       f0 0a		      BEQ	VerticalParallaxMode
    732  f337		       c9 b0		      CMP	#%10110000
    733  f339		       f0 0c		      BEQ	TachometerMode
    734  f33b
    735  f33b				   DefaultBorderMode
    736  f33b		       20 be f7 	      JSR	DefaultBorderLoop
    737  f33e		       4c 50 f3 	      JMP	EndProcessingBorder
    738  f341				   VerticalParallaxMode
    739  f341		       20 2d f8 	      JSR	VerticalParallaxLoop
    740  f344		       4c 50 f3 	      JMP	EndProcessingBorder
    741  f347				   TachometerMode
    742  f347		       20 d9 f7 	      JSR	PrepareTachometerBorderLoop
    743  f34a		       4c 50 f3 	      JMP	EndProcessingBorder
    744  f34d				   HorizontalParallaxMode
    745  f34d		       20 70 f7 	      JSR	HorizontalParallaxLoop
    746  f350
    747  f350				   EndProcessingBorder
    748  f350
    749  f350				   ProcessScoreFontColor
    750  f350		       a6 d6		      LDX	ScoreFontColorHoldChange
    751  f352		       f0 06		      BEQ	ResetScoreFontColor
    752  f354		       ca		      DEX
    753  f355		       86 d6		      STX	ScoreFontColorHoldChange
    754  f357		       4c 5e f3 	      JMP	SkipScoreFontColor
    755  f35a				   ResetScoreFontColor
    756  f35a		       a9 f9		      LDA	#SCORE_FONT_COLOR
    757  f35c		       85 d5		      STA	ScoreFontColor
    758  f35e				   SkipScoreFontColor
    759  f35e
    760  f35e				   IsGameOver
    761  f35e		       a5 ba		      LDA	CountdownTimer
    762  f360		       05 8e		      ORA	Player0SpeedL
    763  f362		       05 8f		      ORA	Player0SpeedH
    764  f364		       d0 0b		      BNE	IsCheckpoint
    765  f366		       a9 01		      LDA	#1
    766  f368		       85 d6		      STA	ScoreFontColorHoldChange
    767  f36a		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    768  f36c		       85 d5		      STA	ScoreFontColor
    769  f36e		       4c b2 f3 	      JMP	SkipIsTimeOver
    770  f371
    771  f371				   IsCheckpoint
    772  f371		       a5 d7		      LDA	NextCheckpoint
    773  f373		       c5 92		      CMP	TrafficOffset0 + 2
    774  f375		       d0 2f		      BNE	SkipIsCheckpoint
    775  f377		       18		      CLC
    776  f378		       69 10		      ADC	#CHECKPOINT_INTERVAL
    777  f37a		       85 d7		      STA	NextCheckpoint
    778  f37c		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    779  f37e		       85 d5		      STA	ScoreFontColor
    780  f380		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    781  f382		       85 d6		      STA	ScoreFontColorHoldChange
    782  f384				   AddCheckpointBcd
    783  f384		       f8		      SED		;2
    784  f385		       18		      CLC		;2
    785  f386		       a5 a4		      LDA	CheckpointBcd0	;3
    786  f388		       69 01		      ADC	#1	;3
    787  f38a		       85 a4		      STA	CheckpointBcd0	;3
    788  f38c		       a5 a5		      LDA	CheckpointBcd1	;3
    789  f38e		       69 00		      ADC	#0	;2
    790  f390		       85 a5		      STA	CheckpointBcd1	;3
    791  f392		       d8		      CLD		;2
    792  f393				   EndCheckpointBcd
    793  f393		       a5 ba		      LDA	CountdownTimer
    794  f395		       18		      CLC
    795  f396		       65 c2		      ADC	CheckpointTime
    796  f398		       85 ba		      STA	CountdownTimer
    797  f39a		       90 04		      BCC	JumpSkipTimeOver
    798  f39c		       a9 ff		      LDA	#$FF
    799  f39e		       85 ba		      STA	CountdownTimer	; Does not overflow!
    800  f3a0				   JumpSkipTimeOver
    801  f3a0		       20 e8 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    802  f3a3		       4c b2 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    803  f3a6				   SkipIsCheckpoint
    804  f3a6
    805  f3a6				   IsTimeOver
    806  f3a6		       a5 ba		      LDA	CountdownTimer
    807  f3a8		       d0 08		      BNE	SkipIsTimeOver
    808  f3aa		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    809  f3ac		       85 d6		      STA	ScoreFontColorHoldChange
    810  f3ae		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    811  f3b0		       85 d5		      STA	ScoreFontColor
    812  f3b2				   SkipIsTimeOver
    813  f3b2
    814  f3b2				   PrintEasterEggCondition
    815  f3b2		       a5 8d		      LDA	FrameCount1
    816  f3b4		       29 38		      AND	#%00111000
    817  f3b6		       05 c0		      ORA	GameStatus
    818  f3b8		       c9 38		      CMP	#%00111000
    819  f3ba		       d0 06		      BNE	ChooseTextSide
    820  f3bc		       20 81 f8 	      JSR	PrintEasterEgg
    821  f3bf		       4c b3 f4 	      JMP	RightScoreWriteEnd
    822  f3c2
    823  f3c2							;Could be done during on vblank to save this comparisson time (before draw score), 
    824  f3c2							;but I am saving vblank cycles for now, in case of 2 players.
    825  f3c2				   ChooseTextSide		; 
    826  f3c2		       a5 8c		      LDA	FrameCount0	;3
    827  f3c4		       29 01		      AND	#%00000001	;2
    828  f3c6		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    829  f3c8		       4c 49 f4 	      JMP	RightScoreWrite
    830  f3cb
    831  f3cb				   LeftScoreWrite
    832  f3cb		       a5 d5		      LDA	ScoreFontColor
    833  f3cd		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    834  f3cf		       f0 4e		      BEQ	PrintCheckpoint
    835  f3d1		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    836  f3d3		       f0 52		      BEQ	PrintStartGame
    837  f3d5		       a5 c0		      LDA	GameStatus
    838  f3d7		       f0 56		      BEQ	PrintHellwayLeft
    839  f3d9				   WriteDistance		;Not optimized yet, ugly code.
    840  f3d9				   Digit0Distance
    841  f3d9		       a5 91		      LDA	TrafficOffset0 + 1	;3
    842  f3db		       4a		      LSR		; 2
    843  f3dc		       4a		      LSR		; 2
    844  f3dd		       4a		      LSR		; 2
    845  f3de		       4a		      LSR		; 2
    846  f3df		       aa		      TAX		; 2
    847  f3e0		       bd be fd 	      LDA	FontLookup,X	;4
    848  f3e3		       85 d3		      STA	ScoreD3	;3
    849  f3e5
    850  f3e5				   Digit1Distance
    851  f3e5		       a5 92		      LDA	TrafficOffset0 + 2	;3
    852  f3e7		       29 0f		      AND	#%00001111	;2
    853  f3e9		       aa		      TAX		; 2
    854  f3ea		       bd be fd 	      LDA	FontLookup,X	;4 
    855  f3ed		       85 d2		      STA	ScoreD2	;3
    856  f3ef
    857  f3ef				   Digit2Distance
    858  f3ef		       a5 92		      LDA	TrafficOffset0 + 2	;3
    859  f3f1		       4a		      LSR		; 2
    860  f3f2		       4a		      LSR		; 2
    861  f3f3		       4a		      LSR		; 2
    862  f3f4		       4a		      LSR		; 2
    863  f3f5		       aa		      TAX		; 2
    864  f3f6		       bd be fd 	      LDA	FontLookup,X	;4
    865  f3f9		       85 d1		      STA	ScoreD1	;3
    866  f3fb
    867  f3fb				   Digit3Distance
    868  f3fb		       a5 bb		      LDA	Traffic0Msb	;3
    869  f3fd		       29 0f		      AND	#%00001111	;2
    870  f3ff		       aa		      TAX		; 2
    871  f400		       bd be fd 	      LDA	FontLookup,X	;4 
    872  f403		       85 d0		      STA	ScoreD0	;3
    873  f405
    874  f405				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    875  f405		       a5 bb		      LDA	Traffic0Msb
    876  f407		       29 f0		      AND	#%11110000	;2
    877  f409		       d0 07		      BNE	DrawDistanceExtraDigit
    878  f40b		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    879  f40d		       85 d4		      STA	ScoreD4	;3
    880  f40f		       4c 1c f4 	      JMP	EndDrawDistance
    881  f412				   DrawDistanceExtraDigit
    882  f412		       4a		      LSR		; 2
    883  f413		       4a		      LSR		; 2
    884  f414		       4a		      LSR		; 2
    885  f415		       4a		      LSR		; 2
    886  f416		       aa		      TAX		; 2
    887  f417		       bd be fd 	      LDA	FontLookup,X	;4
    888  f41a		       85 d4		      STA	ScoreD4	;3
    889  f41c
    890  f41c				   EndDrawDistance
    891  f41c		       4c b3 f4 	      JMP	RightScoreWriteEnd	;3
    892  f41f
    893  f41f				   PrintCheckpoint
    894  f41f		       a2 00		      LDX	#<CheckpointText
    895  f421		       20 52 f7 	      JSR	PrintStaticText
    896  f424		       4c b3 f4 	      JMP	RightScoreWriteEnd	;3
    897  f427				   PrintStartGame
    898  f427		       a2 23		      LDX	#<GoText
    899  f429		       20 52 f7 	      JSR	PrintStaticText
    900  f42c		       4c b3 f4 	      JMP	RightScoreWriteEnd	;3
    901  f42f
    902  f42f				   PrintHellwayLeft
    903  f42f		       a5 8d		      LDA	FrameCount1
    904  f431		       29 01		      AND	#1
    905  f433		       d0 05		      BNE	PrintCreditsLeft
    906  f435		       a2 05		      LDX	#<HellwayLeftText
    907  f437		       4c 3c f4 	      JMP	PrintGameMode
    908  f43a				   PrintCreditsLeft
    909  f43a		       a2 0f		      LDX	#<OpbText
    910  f43c
    911  f43c				   PrintGameMode
    912  f43c		       20 52 f7 	      JSR	PrintStaticText
    913  f43f		       a6 c5		      LDX	GameMode
    914  f441		       bd be fd 	      LDA	FontLookup,X	;4 
    915  f444		       85 d0		      STA	ScoreD0	;3
    916  f446		       4c b3 f4 	      JMP	RightScoreWriteEnd	;3
    917  f449
    918  f449				   RightScoreWrite
    919  f449		       a5 c0		      LDA	GameStatus
    920  f44b		       f0 45		      BEQ	PrintHellwayRight
    921  f44d		       a5 d5		      LDA	ScoreFontColor
    922  f44f		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    923  f451		       f0 52		      BEQ	PrintGameOver
    924  f453				   Digit0Timer
    925  f453		       a5 ba		      LDA	CountdownTimer	;3
    926  f455		       29 0f		      AND	#%00001111	;2
    927  f457		       aa		      TAX		; 2
    928  f458		       bd be fd 	      LDA	FontLookup,X	;4 
    929  f45b		       85 d1		      STA	ScoreD1	;3
    930  f45d
    931  f45d				   Digit1Timer
    932  f45d		       a5 ba		      LDA	CountdownTimer	;3
    933  f45f		       4a		      LSR		; 2
    934  f460		       4a		      LSR		; 2
    935  f461		       4a		      LSR		; 2
    936  f462		       4a		      LSR		; 2
    937  f463		       aa		      TAX		; 2
    938  f464		       bd be fd 	      LDA	FontLookup,X	;4
    939  f467		       85 d0		      STA	ScoreD0	;3
    940  f469
    941  f469		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    942  f46b		       85 d2		      STA	ScoreD2	;3
    943  f46d
    944  f46d				   Digit0Speed
    945  f46d		       a5 8e		      LDA	Player0SpeedL
    946  f46f		       29 3c		      AND	#%00111100	;2 Discard the last bits
    947  f471		       4a		      LSR		; 2
    948  f472		       4a		      LSR		; 2
    949  f473		       aa		      TAX		; 2
    950  f474		       bd be fd 	      LDA	FontLookup,X	;4
    951  f477		       85 d4		      STA	ScoreD4	;3
    952  f479
    953  f479				   Digit1Speed
    954  f479		       a5 8e		      LDA	Player0SpeedL
    955  f47b		       29 c0		      AND	#%11000000	;2 Discard the last bits
    956  f47d		       18		      CLC
    957  f47e		       2a		      ROL		;First goes into carry
    958  f47f		       2a		      ROL
    959  f480		       2a		      ROL
    960  f481		       85 b0		      STA	Tmp0
    961  f483		       a5 8f		      LDA	Player0SpeedH
    962  f485		       0a		      ASL
    963  f486		       0a		      ASL
    964  f487		       05 b0		      ORA	Tmp0
    965  f489		       aa		      TAX		; 2
    966  f48a		       bd be fd 	      LDA	FontLookup,X	;4
    967  f48d		       85 d3		      STA	ScoreD3	;3
    968  f48f		       4c b3 f4 	      JMP	RightScoreWriteEnd
    969  f492
    970  f492				   PrintHellwayRight
    971  f492		       a5 8d		      LDA	FrameCount1
    972  f494		       29 01		      AND	#1
    973  f496		       d0 05		      BNE	PrintCreditsRight
    974  f498		       a2 0a		      LDX	#<HellwayRightText
    975  f49a		       4c 9f f4 	      JMP	PrintRightIntro
    976  f49d				   PrintCreditsRight
    977  f49d		       a2 14		      LDX	#<YearText
    978  f49f				   PrintRightIntro
    979  f49f		       20 52 f7 	      JSR	PrintStaticText
    980  f4a2		       4c b3 f4 	      JMP	RightScoreWriteEnd
    981  f4a5				   PrintGameOver
    982  f4a5		       a5 8c		      LDA	FrameCount0
    983  f4a7		       30 05		      BMI	PrintOverText
    984  f4a9		       a2 19		      LDX	#<GameText
    985  f4ab		       4c b0 f4 	      JMP	StoreGameOverText
    986  f4ae				   PrintOverText
    987  f4ae		       a2 1e		      LDX	#<OverText
    988  f4b0				   StoreGameOverText
    989  f4b0		       20 52 f7 	      JSR	PrintStaticText
    990  f4b3				   RightScoreWriteEnd
    991  f4b3
    992  f4b3
    993  f4b3				   ScoreBackgroundColor
    994  f4b3		       a2 00		      LDX	#0
    995  f4b5		       ad 82 02 	      LDA	SWCHB
    996  f4b8		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    997  f4ba		       f0 04		      BEQ	BlackAndWhiteScoreBg
    998  f4bc		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    999  f4be		       a2 03		      LDX	#BACKGROUND_COLOR
   1000  f4c0				   BlackAndWhiteScoreBg
   1001  f4c0		       85 b2		      STA	Tmp2	; Score Background
   1002  f4c2		       86 b3		      STX	Tmp3	; Traffic Background
   1003  f4c4
   1004  f4c4				   ConfigurePFForScore
   1005  f4c4							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1006  f4c4		       85 09		      STA	COLUBK
   1007  f4c6		       20 aa f6 	      JSR	ClearAll
   1008  f4c9		       a9 02		      LDA	#%00000010	; Score mode
   1009  f4cb		       85 0a		      STA	CTRLPF
   1010  f4cd		       a5 8c		      LDA	FrameCount0	;3
   1011  f4cf		       29 01		      AND	#%00000001	;2
   1012  f4d1		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
   1013  f4d3				   LeftScoreOn
   1014  f4d3		       a5 d5		      LDA	ScoreFontColor
   1015  f4d5		       85 07		      STA	COLUP1
   1016  f4d7		       a5 b2		      LDA	Tmp2
   1017  f4d9		       85 06		      STA	COLUP0
   1018  f4db		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1019  f4dd		       85 b1		      STA	Tmp1
   1020  f4df		       4c ee f4 	      JMP	CallWaitForVblankEnd
   1021  f4e2				   RightScoreOn
   1022  f4e2		       a5 d5		      LDA	ScoreFontColor
   1023  f4e4		       85 06		      STA	COLUP0
   1024  f4e6		       a5 b2		      LDA	Tmp2
   1025  f4e8		       85 07		      STA	COLUP1
   1026  f4ea		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1027  f4ec		       85 b1		      STA	Tmp1
   1028  f4ee
   1029  f4ee							; After here we are going to update the screen, No more heavy code
   1030  f4ee				   CallWaitForVblankEnd
   1031  f4ee		       20 51 fb 	      JSR	WaitForVblankEnd
   1032  f4f1
   1033  f4f1				   DrawScoreHud
   1034  f4f1		       20 f3 f8 	      JSR	PrintScore
   1035  f4f4
   1036  f4f4		       85 02		      STA	WSYNC
   1037  f4f6
   1038  f4f6		       a5 0c		      LDA	INPT4	;3
   1039  f4f8		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1040  f4fa		       a5 d5		      LDA	ScoreFontColor
   1041  f4fc		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1042  f4fe		       d0 0c		      BNE	WaitAnotherScoreLine
   1043  f500		       a5 8c		      LDA	FrameCount0	;3
   1044  f502		       29 01		      AND	#%00000001	;2
   1045  f504		       f0 03		      BEQ	LeftScoreOnGameOver
   1046  f506		       4c 7a fa 	      JMP	DrawGameOverScreenRight
   1047  f509				   LeftScoreOnGameOver
   1048  f509		       4c b0 f9 	      JMP	DrawGameOverScreenLeft
   1049  f50c
   1050  f50c				   WaitAnotherScoreLine
   1051  f50c		       85 02		      STA	WSYNC
   1052  f50e
   1053  f50e				   PrepareForTraffic
   1054  f50e		       20 bc f6 	      JSR	ClearPF	; 32
   1055  f511
   1056  f511		       a9 31		      LDA	#%00110001	; Score mode
   1057  f513		       85 0a		      STA	CTRLPF
   1058  f515
   1059  f515		       a5 c3		      LDA	TrafficColor	;2
   1060  f517		       85 08		      STA	COLUPF
   1061  f519
   1062  f519		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1063  f51b		       85 07		      STA	COLUP1	;3
   1064  f51d
   1065  f51d		       a5 d5		      LDA	ScoreFontColor	;3
   1066  f51f		       85 06		      STA	COLUP0	;3
   1067  f521
   1068  f521		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1069  f523
   1070  f523		       85 02		      STA	WSYNC
   1071  f525		       85 02		      STA	WSYNC
   1072  f527
   1073  f527							;main scanline loop...
   1074  f527				   ScanLoop
   1075  f527		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1076  f529
   1077  f529							;Start of next line!			
   1078  f529				   DrawCache		;63 Is the last line going to the top of the next frame?
   1079  f529							;Supper wastefull, but I had 17 cycles, This only avoids the score line to finish a litle earlier...
   1080  f529		       a5 b3		      LDA	Tmp3	;3
   1081  f52b		       85 09		      STA	COLUBK	;3
   1082  f52d
   1083  f52d		       a5 81		      LDA	PF0Cache	;3
   1084  f52f		       85 0d		      STA	PF0	;3
   1085  f531
   1086  f531		       b9 7d ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
   1087  f534		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1088  f536
   1089  f536		       a5 82		      LDA	PF1Cache	;3
   1090  f538		       85 0e		      STA	PF1	;3
   1091  f53a
   1092  f53a		       a5 84		      LDA	GRP1Cache	;3
   1093  f53c		       85 1c		      STA	GRP1	;3
   1094  f53e
   1095  f53e		       a5 85		      LDA	ENABLCache	;3
   1096  f540		       85 1f		      STA	ENABL	;3
   1097  f542
   1098  f542		       a5 86		      LDA	ENAM0Cache	;3
   1099  f544		       85 1d		      STA	ENAM0	;3
   1100  f546
   1101  f546		       a5 87		      LDA	ENAM1Cache	;3
   1102  f548		       85 1e		      STA	ENAM1	;3
   1103  f54a
   1104  f54a		       a9 00		      LDA	#0	;2
   1105  f54c							;STA PF1Cache ;3
   1106  f54c		       85 84		      STA	GRP1Cache	;3
   1107  f54e		       85 85		      STA	ENABLCache	;3
   1108  f550		       85 86		      STA	ENAM0Cache	;3
   1109  f552		       85 87		      STA	ENAM1Cache	; 3
   1110  f554
   1111  f554							;BEQ DrawTraffic3
   1112  f554				   DrawTraffic1 		; 33
   1113  f554		       98		      TYA		; 2
   1114  f555		       18		      CLC		; 2 
   1115  f556		       65 95		      ADC	TrafficOffset1 + 1	;3
   1116  f558		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1117  f55a		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1118  f55c		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1119  f55e		       4c 63 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1120  f561				   EorOffsetWithCarry
   1121  f561		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1122  f563				   AfterEorOffsetWithCarry		;17
   1123  f563		       aa		      TAX		;2
   1124  f564		       bd 00 fe 	      LDA	AesTable,X	; 4
   1125  f567		       c5 c1		      CMP	TrafficChance	;3
   1126  f569		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1127  f56b		       a9 ff		      LDA	#$FF	;2
   1128  f56d		       85 84		      STA	GRP1Cache	;3
   1129  f56f				   FinishDrawTraffic1
   1130  f56f
   1131  f56f				   DrawTraffic2 		; 33
   1132  f56f		       98		      TYA		; 2
   1133  f570		       18		      CLC		; 2 
   1134  f571		       65 99		      ADC	TrafficOffset2 + 1	;3
   1135  f573		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1136  f575		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1137  f577		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1138  f579		       4c 7e f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1139  f57c				   EorOffsetWithCarry2
   1140  f57c		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1141  f57e				   AfterEorOffsetWithCarry2		;17
   1142  f57e		       aa		      TAX		;2
   1143  f57f		       bd 00 fe 	      LDA	AesTable,X	; 4
   1144  f582		       c5 c1		      CMP	TrafficChance	;3
   1145  f584		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1146  f586		       a9 02		      LDA	#%00000010	;2
   1147  f588		       85 85		      STA	ENABLCache	;3
   1148  f58a				   FinishDrawTraffic2
   1149  f58a
   1150  f58a							;STA WSYNC ;65 / 137
   1151  f58a
   1152  f58a							; LDA Tmp0 ; Flicker this line if drawing car
   1153  f58a							; BEQ FinishDrawTraffic4
   1154  f58a				   DrawTraffic3 		; 33
   1155  f58a		       98		      TYA		; 2
   1156  f58b		       18		      CLC		; 2 
   1157  f58c		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1158  f58e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1159  f590		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1160  f592		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1161  f594		       4c 99 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1162  f597				   EorOffsetWithCarry3
   1163  f597		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1164  f599				   AfterEorOffsetWithCarry3		;17
   1165  f599		       aa		      TAX		;2
   1166  f59a		       bd 00 fe 	      LDA	AesTable,X	; 4
   1167  f59d		       c5 c1		      CMP	TrafficChance	;3
   1168  f59f		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1169  f5a1		       a9 02		      LDA	#%00000010	;2
   1170  f5a3		       85 86		      STA	ENAM0Cache
   1171  f5a5				   FinishDrawTraffic3
   1172  f5a5
   1173  f5a5				   DrawTraffic4 		; 33
   1174  f5a5		       98		      TYA		; 2
   1175  f5a6		       18		      CLC		; 2 
   1176  f5a7		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1177  f5a9		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1178  f5ab		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1179  f5ad		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1180  f5af		       4c b4 f5 	      JMP	AfterEorOffsetWithCarry4	; 3
   1181  f5b2				   EorOffsetWithCarry4
   1182  f5b2		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1183  f5b4				   AfterEorOffsetWithCarry4		;17
   1184  f5b4		       aa		      TAX		;2
   1185  f5b5		       bd 00 fe 	      LDA	AesTable,X	; 4
   1186  f5b8		       c5 c1		      CMP	TrafficChance	;3
   1187  f5ba		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1188  f5bc		       a9 02		      LDA	#%00000010	;2
   1189  f5be		       85 87		      STA	ENAM1Cache	;3
   1190  f5c0				   FinishDrawTraffic4
   1191  f5c0
   1192  f5c0				   DrawTraffic0 		; 15
   1193  f5c0		       98		      TYA		;2
   1194  f5c1		       29 07		      AND	#%00000111	;2
   1195  f5c3		       aa		      TAX		;2
   1196  f5c4		       b5 d8		      LDA	ParallaxCache,X	;4
   1197  f5c6		       85 82		      STA	PF1Cache	;3
   1198  f5c8		       b5 f0		      LDA	ParallaxCache2,X	;4
   1199  f5ca		       85 81		      STA	PF0Cache	;3
   1200  f5cc
   1201  f5cc				   SkipDrawTraffic0
   1202  f5cc
   1203  f5cc				   WhileScanLoop
   1204  f5cc		       88		      DEY		;2
   1205  f5cd		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1206  f5cf		       4c 27 f5 	      JMP	ScanLoop	;3
   1207  f5d2				   FinishScanLoop		; 7 209 of 222
   1208  f5d2
   1209  f5d2		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1210  f5d4		       20 cb f6 	      JSR	LoadAll
   1211  f5d7		       85 02		      STA	WSYNC	; do stuff!
   1212  f5d9		       85 02		      STA	WSYNC
   1213  f5db		       85 02		      STA	WSYNC
   1214  f5dd							;42 cycles to use here
   1215  f5dd
   1216  f5dd				   PrepareOverscan
   1217  f5dd		       a9 02		      LDA	#2
   1218  f5df		       85 02		      STA	WSYNC
   1219  f5e1		       85 01		      STA	VBLANK
   1220  f5e3
   1221  f5e3		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1222  f5e5		       8d 96 02 	      STA	TIM64T
   1223  f5e8
   1224  f5e8				   LeftSound		;58
   1225  f5e8		       a5 ba		      LDA	CountdownTimer	;3
   1226  f5ea		       f0 24		      BEQ	EngineOff	;2
   1227  f5ec		       a5 8e		      LDA	Player0SpeedL	;3
   1228  f5ee		       29 80		      AND	#%10000000	;2
   1229  f5f0		       05 8f		      ORA	Player0SpeedH	;3
   1230  f5f2		       18		      CLC		;2
   1231  f5f3		       2a		      ROL		;2
   1232  f5f4		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1233  f5f6		       aa		      TAX		;2
   1234  f5f7		       a5 8e		      LDA	Player0SpeedL	;3
   1235  f5f9		       4a		      LSR		;2
   1236  f5fa		       4a		      LSR		;2
   1237  f5fb		       4a		      LSR		;2
   1238  f5fc		       29 0f		      AND	#%00001111	;2
   1239  f5fe		       85 b0		      STA	Tmp0	;3
   1240  f600		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1241  f603		       38		      SEC		;2
   1242  f604		       e5 b0		      SBC	Tmp0	;3
   1243  f606		       85 17		      STA	AUDF0	;3
   1244  f608		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1245  f60b		       85 15		      STA	AUDC0	;3
   1246  f60d		       4c 14 f6 	      JMP	EndLeftSound	;3
   1247  f610				   EngineOff
   1248  f610		       a9 00		      LDA	#0
   1249  f612		       85 15		      STA	AUDC0
   1250  f614
   1251  f614				   EndLeftSound
   1252  f614
   1253  f614
   1254  f614				   RightSound		; 56 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1255  f614		       a5 d5		      LDA	ScoreFontColor	;3
   1256  f616		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1257  f618		       f0 4a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1258  f61a		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1259  f61c		       f0 21		      BEQ	PlayCheckpoint	;2
   1260  f61e		       a5 b8		      LDA	CollisionCounter	;3
   1261  f620		       c9 e0		      CMP	#$E0	;2
   1262  f622		       b0 0c		      BCS	PlayColision	;2
   1263  f624		       a5 d7		      LDA	NextCheckpoint	;3
   1264  f626		       38		      SEC		;2
   1265  f627		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1266  f629		       c9 02		      CMP	#$02	;2
   1267  f62b		       90 24		      BCC	PlayBeforeCheckpoint	;4
   1268  f62d		       4c 64 f6 	      JMP	MuteRightSound
   1269  f630				   PlayColision
   1270  f630		       a9 1f		      LDA	#31
   1271  f632		       85 18		      STA	AUDF1
   1272  f634		       a9 08		      LDA	#8
   1273  f636		       85 16		      STA	AUDC1
   1274  f638		       a9 08		      LDA	#8
   1275  f63a		       85 1a		      STA	AUDV1
   1276  f63c		       4c 68 f6 	      JMP	EndRightSound
   1277  f63f
   1278  f63f				   PlayCheckpoint
   1279  f63f		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1280  f641		       4a		      LSR		;2
   1281  f642		       4a		      LSR		;2
   1282  f643		       4a		      LSR		;2
   1283  f644		       85 18		      STA	AUDF1	;3
   1284  f646		       a9 0c		      LDA	#12	;2
   1285  f648		       85 16		      STA	AUDC1	;3
   1286  f64a		       a9 06		      LDA	#6	;2
   1287  f64c		       85 1a		      STA	AUDV1	;3
   1288  f64e		       4c 68 f6 	      JMP	EndRightSound	;3
   1289  f651
   1290  f651				   PlayBeforeCheckpoint
   1291  f651		       a5 8c		      LDA	FrameCount0	;3
   1292  f653		       29 1c		      AND	#%00011100	;2
   1293  f655		       09 03		      ORA	#%00000011	;2
   1294  f657		       85 18		      STA	AUDF1	;3
   1295  f659		       a9 0c		      LDA	#12	;2
   1296  f65b		       85 16		      STA	AUDC1	;3
   1297  f65d		       a9 03		      LDA	#3	;2
   1298  f65f		       85 1a		      STA	AUDV1	;3
   1299  f661		       4c 68 f6 	      JMP	EndRightSound	;3
   1300  f664
   1301  f664				   MuteRightSound
   1302  f664		       a9 00		      LDA	#0
   1303  f666		       85 1a		      STA	AUDV1
   1304  f668				   EndRightSound
   1305  f668
   1306  f668				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1307  f668		       a5 c0		      LDA	GameStatus	;3
   1308  f66a		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1309  f66c		       a5 d5		      LDA	ScoreFontColor	;3
   1310  f66e		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1311  f670		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1312  f672		       c6 cf		      DEC	OneSecondConter	;5
   1313  f674		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1314  f676
   1315  f676		       f8		      SED		;2 BCD Operations after this point
   1316  f677				   CountGlideTimeBcd
   1317  f677		       a5 d5		      LDA	ScoreFontColor	;3
   1318  f679		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1319  f67b		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1320  f67d		       18		      CLC		;2
   1321  f67e		       a5 cd		      LDA	GlideTimeBcd0	;3
   1322  f680		       69 01		      ADC	#1	;3
   1323  f682		       85 cd		      STA	GlideTimeBcd0	;3
   1324  f684		       a5 ce		      LDA	GlideTimeBcd1	;3
   1325  f686		       69 00		      ADC	#0	;2
   1326  f688		       85 ce		      STA	GlideTimeBcd1	;3
   1327  f68a				   EndCountGlideTimeBcd
   1328  f68a				   IncreaseTotalTimerBcd
   1329  f68a		       18		      CLC		;2
   1330  f68b		       a5 bd		      LDA	TimeBcd0	;3
   1331  f68d		       69 01		      ADC	#1	;2
   1332  f68f		       85 bd		      STA	TimeBcd0	;3
   1333  f691		       a5 be		      LDA	TimeBcd1	;3
   1334  f693		       69 00		      ADC	#0	;2
   1335  f695		       85 be		      STA	TimeBcd1	;3
   1336  f697		       a5 bf		      LDA	TimeBcd2	;3
   1337  f699		       69 00		      ADC	#0	;2
   1338  f69b		       85 bf		      STA	TimeBcd2	;3
   1339  f69d
   1340  f69d				   ResetOneSecondCounter
   1341  f69d		       d8		      CLD		;2
   1342  f69e		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1343  f6a0		       85 cf		      STA	OneSecondConter	;3
   1344  f6a2
   1345  f6a2				   EndExactlyEverySecond
   1346  f6a2
   1347  f6a2				   OverScanWait
   1348  f6a2		       ad 84 02 	      LDA	INTIM
   1349  f6a5		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1350  f6a7		       4c 8c f0 	      JMP	MainLoop
   1351  f6aa
   1352  f6aa				   Subroutines
   1353  f6aa
   1354  f6aa				   ClearAll		; 52
   1355  f6aa		       a9 00		      LDA	#0	;2
   1356  f6ac		       85 1c		      STA	GRP1	;3
   1357  f6ae		       85 1f		      STA	ENABL	;3
   1358  f6b0		       85 1d		      STA	ENAM0	;3
   1359  f6b2		       85 1e		      STA	ENAM1	;3
   1360  f6b4		       85 84		      STA	GRP1Cache	;3
   1361  f6b6		       85 85		      STA	ENABLCache	;3
   1362  f6b8		       85 86		      STA	ENAM0Cache	;3
   1363  f6ba		       85 87		      STA	ENAM1Cache	;3
   1364  f6bc
   1365  f6bc				   ClearPF		; 26
   1366  f6bc		       a9 00		      LDA	#0	;2
   1367  f6be				   ClearPFSkipLDA0
   1368  f6be		       85 0d		      STA	PF0	;3
   1369  f6c0		       85 0e		      STA	PF1	;3
   1370  f6c2		       85 0f		      STA	PF2	;3	
   1371  f6c4		       85 81		      STA	PF0Cache	;3
   1372  f6c6		       85 82		      STA	PF1Cache	;3
   1373  f6c8		       85 83		      STA	PF2Cache	;3 
   1374  f6ca		       60		      RTS		;6
   1375  f6cb				   EndClearAll
   1376  f6cb
   1377  f6cb				   LoadAll		; 48
   1378  f6cb		       a5 81		      LDA	PF0Cache	;3
   1379  f6cd		       85 0d		      STA	PF0	;3
   1380  f6cf
   1381  f6cf		       a5 82		      LDA	PF1Cache	;3
   1382  f6d1		       85 0e		      STA	PF1	;3
   1383  f6d3
   1384  f6d3		       a5 83		      LDA	PF2Cache	;3
   1385  f6d5		       85 0f		      STA	PF2	;3
   1386  f6d7
   1387  f6d7		       a5 84		      LDA	GRP1Cache	;3
   1388  f6d9		       85 1c		      STA	GRP1	;3
   1389  f6db
   1390  f6db		       a5 85		      LDA	ENABLCache	;3
   1391  f6dd		       85 1f		      STA	ENABL	;3
   1392  f6df
   1393  f6df		       a5 86		      LDA	ENAM0Cache	;3
   1394  f6e1		       85 1d		      STA	ENAM0	;3
   1395  f6e3
   1396  f6e3		       a5 87		      LDA	ENAM1Cache	;3
   1397  f6e5		       85 1e		      STA	ENAM1	;3
   1398  f6e7
   1399  f6e7		       60		      RTS		;6
   1400  f6e8				   EndLoadAll
   1401  f6e8
   1402  f6e8				   NextDifficulty
   1403  f6e8		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1404  f6ea		       29 01		      AND	#%00000001
   1405  f6ec		       d0 3f		      BNE	CheckRandomDifficulty
   1406  f6ee
   1407  f6ee		       a5 c4		      LDA	CurrentDifficulty
   1408  f6f0		       18		      CLC
   1409  f6f1		       69 01		      ADC	#1
   1410  f6f3		       29 03		      AND	#%00000011	; 0 to 3
   1411  f6f5		       85 c4		      STA	CurrentDifficulty
   1412  f6f7
   1413  f6f7				   ConfigureDifficulty
   1414  f6f7		       a5 c4		      LDA	CurrentDifficulty
   1415  f6f9		       f0 0b		      BEQ	ConfigureLightTraffic
   1416  f6fb		       c9 01		      CMP	#1
   1417  f6fd		       f0 10		      BEQ	ConfigureRegularTraffic
   1418  f6ff		       c9 02		      CMP	#2
   1419  f701		       f0 15		      BEQ	ConfigureIntenseTraffic
   1420  f703		       4c 21 f7 	      JMP	ConfigureRushHourTraffic
   1421  f706
   1422  f706				   ConfigureLightTraffic
   1423  f706		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1424  f708		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1425  f70a		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1426  f70c		       4c 27 f7 	      JMP	StoreTrafficChance
   1427  f70f				   ConfigureRegularTraffic
   1428  f70f		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1429  f711		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1430  f713		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1431  f715		       4c 27 f7 	      JMP	StoreTrafficChance
   1432  f718				   ConfigureIntenseTraffic
   1433  f718		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1434  f71a		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1435  f71c		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1436  f71e		       4c 27 f7 	      JMP	StoreTrafficChance
   1437  f721				   ConfigureRushHourTraffic
   1438  f721		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1439  f723		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1440  f725		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1441  f727
   1442  f727				   StoreTrafficChance
   1443  f727		       86 c1		      STX	TrafficChance
   1444  f729		       84 c2		      STY	CheckpointTime
   1445  f72b		       85 c3		      STA	TrafficColor
   1446  f72d
   1447  f72d				   CheckRandomDifficulty
   1448  f72d		       a5 c5		      LDA	GameMode
   1449  f72f		       29 08		      AND	#%00001000	; Random difficulties
   1450  f731		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1451  f733				   RandomDificulty
   1452  f733		       a6 8c		      LDX	FrameCount0
   1453  f735		       bd 00 fe 	      LDA	AesTable,X
   1454  f738		       45 c1		      EOR	TrafficChance
   1455  f73a		       29 3f		      AND	#%00111111
   1456  f73c		       85 c1		      STA	TrafficChance
   1457  f73e
   1458  f73e				   ReturnFromNextDifficulty
   1459  f73e		       60		      RTS
   1460  f73f				   EndNextDifficulty
   1461  f73f
   1462  f73f				   DefaultOffsets
   1463  f73f		       a9 20		      LDA	#$20
   1464  f741		       85 96		      STA	TrafficOffset1 + 2
   1465  f743		       a9 40		      LDA	#$40
   1466  f745		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1467  f747		       a9 60		      LDA	#$60
   1468  f749		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1469  f74b		       a9 80		      LDA	#$80
   1470  f74d		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1471  f74f		       a9 a0		      LDA	#$A0
   1472  f751		       60		      RTS
   1473  f752
   1474  f752				   PrintStaticText		; Preload X with the offset referent to StaticText
   1475  f752		       bd 00 ff 	      LDA	StaticText,X
   1476  f755		       85 d0		      STA	ScoreD0
   1477  f757		       e8		      INX
   1478  f758		       bd 00 ff 	      LDA	StaticText,X
   1479  f75b		       85 d1		      STA	ScoreD1
   1480  f75d		       e8		      INX
   1481  f75e		       bd 00 ff 	      LDA	StaticText,X
   1482  f761		       85 d2		      STA	ScoreD2
   1483  f763		       e8		      INX
   1484  f764		       bd 00 ff 	      LDA	StaticText,X
   1485  f767		       85 d3		      STA	ScoreD3
   1486  f769		       e8		      INX
   1487  f76a		       bd 00 ff 	      LDA	StaticText,X
   1488  f76d		       85 d4		      STA	ScoreD4
   1489  f76f		       60		      RTS
   1490  f770
   1491  f770				   HorizontalParallaxLoop
   1492  f770		       a9 ef		      LDA	#%11101111	; Clear the house
   1493  f772		       39 d8 00 	      AND	ParallaxCache,Y
   1494  f775		       99 d8 00 	      STA	ParallaxCache,Y
   1495  f778				   CalculateParallax0
   1496  f778		       98		      TYA
   1497  f779		       18		      CLC
   1498  f77a		       65 91		      ADC	TrafficOffset0 + 1
   1499  f77c		       29 04		      AND	#%00000100
   1500  f77e		       f0 08		      BEQ	HasEmptySpace0
   1501  f780				   HasBorder0
   1502  f780		       b9 d8 00 	      LDA	ParallaxCache,Y
   1503  f783		       09 0f		      ORA	#%00001111
   1504  f785		       4c 8d f7 	      JMP	StoreParallax0
   1505  f788				   HasEmptySpace0
   1506  f788		       b9 d8 00 	      LDA	ParallaxCache,Y
   1507  f78b		       29 f0		      AND	#%11110000
   1508  f78d
   1509  f78d				   StoreParallax0
   1510  f78d		       99 d8 00 	      STA	ParallaxCache,Y
   1511  f790
   1512  f790				   CalculateParallax1
   1513  f790		       98		      TYA
   1514  f791		       18		      CLC
   1515  f792		       65 c7		      ADC	ParallaxOffset1 + 1
   1516  f794		       29 04		      AND	#%00000100
   1517  f796		       f0 08		      BEQ	HasEmptySpace1
   1518  f798				   HasBorder1
   1519  f798		       b9 d8 00 	      LDA	ParallaxCache,Y
   1520  f79b		       09 e0		      ORA	#%11100000
   1521  f79d		       4c a5 f7 	      JMP	StoreParallax1
   1522  f7a0				   HasEmptySpace1
   1523  f7a0		       b9 d8 00 	      LDA	ParallaxCache,Y
   1524  f7a3		       29 1f		      AND	#%00011111
   1525  f7a5
   1526  f7a5				   StoreParallax1
   1527  f7a5		       99 d8 00 	      STA	ParallaxCache,Y
   1528  f7a8
   1529  f7a8				   CalculateParallax2
   1530  f7a8		       98		      TYA
   1531  f7a9		       18		      CLC
   1532  f7aa		       65 c9		      ADC	ParallaxOffset2 + 1
   1533  f7ac		       29 04		      AND	#%00000100
   1534  f7ae		       f0 05		      BEQ	HasEmptySpace2
   1535  f7b0				   HasBorder2
   1536  f7b0		       a9 60		      LDA	#%01100000
   1537  f7b2		       4c b7 f7 	      JMP	StoreParallax2
   1538  f7b5				   HasEmptySpace2
   1539  f7b5		       a9 00		      LDA	#0
   1540  f7b7
   1541  f7b7				   StoreParallax2
   1542  f7b7		       99 f0 00 	      STA	ParallaxCache2,Y
   1543  f7ba
   1544  f7ba				   ContinueHorizontalParallaxLoop
   1545  f7ba		       88		      DEY
   1546  f7bb		       10 b3		      BPL	HorizontalParallaxLoop
   1547  f7bd		       60		      RTS
   1548  f7be
   1549  f7be				   DefaultBorderLoop
   1550  f7be				   CalculateDefaultBorder
   1551  f7be		       98		      TYA
   1552  f7bf		       18		      CLC
   1553  f7c0		       65 91		      ADC	TrafficOffset0 + 1
   1554  f7c2		       29 04		      AND	#%00000100
   1555  f7c4		       f0 05		      BEQ	HasEmptySpace
   1556  f7c6				   HasBorder
   1557  f7c6		       a9 ff		      LDA	#$FF
   1558  f7c8		       4c cd f7 	      JMP	StoreBorder
   1559  f7cb				   HasEmptySpace
   1560  f7cb		       a9 00		      LDA	#0
   1561  f7cd
   1562  f7cd				   StoreBorder
   1563  f7cd		       99 d8 00 	      STA	ParallaxCache,Y
   1564  f7d0		       a9 00		      LDA	#0
   1565  f7d2		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1566  f7d5
   1567  f7d5				   ContinueDefaultBorderLoop
   1568  f7d5		       88		      DEY
   1569  f7d6		       10 e6		      BPL	DefaultBorderLoop
   1570  f7d8		       60		      RTS
   1571  f7d9
   1572  f7d9				   PrepareTachometerBorderLoop
   1573  f7d9		       a5 8e		      LDA	Player0SpeedL
   1574  f7db		       29 80		      AND	#%10000000
   1575  f7dd		       05 8f		      ORA	Player0SpeedH
   1576  f7df		       18		      CLC
   1577  f7e0		       2a		      ROL
   1578  f7e1		       69 00		      ADC	#0
   1579  f7e3		       85 b0		      STA	Tmp0	; Gear
   1580  f7e5		       a5 8e		      LDA	Player0SpeedL
   1581  f7e7		       4a		      LSR
   1582  f7e8		       4a		      LSR
   1583  f7e9		       4a		      LSR
   1584  f7ea		       4a		      LSR
   1585  f7eb		       29 07		      AND	#%00000111
   1586  f7ed		       85 b1		      STA	Tmp1	; RPM
   1587  f7ef
   1588  f7ef				   TachometerBorderLoop
   1589  f7ef		       98		      TYA
   1590  f7f0		       18		      CLC
   1591  f7f1		       65 91		      ADC	TrafficOffset0 + 1
   1592  f7f3		       29 04		      AND	#%00000100
   1593  f7f5		       f0 10		      BEQ	HasBorderTac
   1594  f7f7		       a6 b0		      LDX	Tmp0
   1595  f7f9		       bd eb fd 	      LDA	TachometerGearLookup,X
   1596  f7fc		       99 d8 00 	      STA	ParallaxCache,Y
   1597  f7ff		       a9 00		      LDA	#0
   1598  f801		       99 f0 00 	      STA	ParallaxCache2,Y
   1599  f804		       4c 29 f8 	      JMP	ContinueBorderTac
   1600  f807				   HasBorderTac
   1601  f807		       a9 05		      LDA	#5
   1602  f809		       c5 b0		      CMP	Tmp0	; Only on max speed
   1603  f80b		       f0 11		      BEQ	FullBorderTac
   1604  f80d		       a6 b1		      LDX	Tmp1
   1605  f80f		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1606  f812		       99 d8 00 	      STA	ParallaxCache,Y
   1607  f815		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1608  f818		       99 f0 00 	      STA	ParallaxCache2,Y
   1609  f81b		       4c 29 f8 	      JMP	ContinueBorderTac
   1610  f81e
   1611  f81e				   FullBorderTac
   1612  f81e		       a9 ff		      LDA	#$FF
   1613  f820		       99 d8 00 	      STA	ParallaxCache,Y
   1614  f823		       99 f0 00 	      STA	ParallaxCache2,Y
   1615  f826		       4c 29 f8 	      JMP	ContinueBorderTac
   1616  f829
   1617  f829				   ContinueBorderTac
   1618  f829		       88		      DEY
   1619  f82a		       10 c3		      BPL	TachometerBorderLoop
   1620  f82c		       60		      RTS
   1621  f82d
   1622  f82d				   VerticalParallaxLoop
   1623  f82d				   CalculateVerticalParallax0
   1624  f82d		       98		      TYA
   1625  f82e		       18		      CLC
   1626  f82f		       65 91		      ADC	TrafficOffset0 + 1
   1627  f831		       29 06		      AND	#%00000110
   1628  f833		       d0 0b		      BNE	HasNoVerticalLine0
   1629  f835				   HasVerticalLine0
   1630  f835		       a9 ff		      LDA	#$FF
   1631  f837		       99 d8 00 	      STA	ParallaxCache,Y
   1632  f83a		       99 f0 00 	      STA	ParallaxCache2,Y
   1633  f83d		       4c 7d f8 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1634  f840				   HasNoVerticalLine0
   1635  f840		       a9 00		      LDA	#0
   1636  f842		       99 d8 00 	      STA	ParallaxCache,Y
   1637  f845		       99 f0 00 	      STA	ParallaxCache2,Y
   1638  f848
   1639  f848				   CalculateVerticalParallax1
   1640  f848		       98		      TYA
   1641  f849		       18		      CLC
   1642  f84a		       65 c7		      ADC	ParallaxOffset1 + 1
   1643  f84c		       29 07		      AND	#%00000111
   1644  f84e		       d0 0d		      BNE	HasNoVerticalLine1
   1645  f850
   1646  f850				   HasVerticalLine1
   1647  f850		       a9 fc		      LDA	#%11111100
   1648  f852		       99 d8 00 	      STA	ParallaxCache,Y
   1649  f855		       a9 c0		      LDA	#%11000000
   1650  f857		       99 f0 00 	      STA	ParallaxCache2,Y
   1651  f85a		       4c 7d f8 	      JMP	ContinueVerticalParallaxLoop
   1652  f85d				   HasNoVerticalLine1
   1653  f85d		       a9 00		      LDA	#0
   1654  f85f		       99 d8 00 	      STA	ParallaxCache,Y
   1655  f862		       99 f0 00 	      STA	ParallaxCache2,Y
   1656  f865
   1657  f865				   CalculateVerticalParallax2
   1658  f865		       98		      TYA
   1659  f866		       18		      CLC
   1660  f867		       65 c9		      ADC	ParallaxOffset2 + 1
   1661  f869		       29 07		      AND	#%00000111
   1662  f86b		       d0 08		      BNE	HasNoVerticalLine2
   1663  f86d
   1664  f86d				   HasVerticalLine2
   1665  f86d		       a9 f0		      LDA	#%11110000
   1666  f86f		       99 d8 00 	      STA	ParallaxCache,Y
   1667  f872		       4c 7d f8 	      JMP	ContinueVerticalParallaxLoop
   1668  f875				   HasNoVerticalLine2
   1669  f875		       a9 00		      LDA	#0
   1670  f877		       99 d8 00 	      STA	ParallaxCache,Y
   1671  f87a		       99 f0 00 	      STA	ParallaxCache2,Y
   1672  f87d
   1673  f87d				   ContinueVerticalParallaxLoop
   1674  f87d		       88		      DEY
   1675  f87e		       10 ad		      BPL	VerticalParallaxLoop
   1676  f880		       60		      RTS
   1677  f881
   1678  f881				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1679  f881		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1680  f883		       85 d5		      STA	ScoreFontColor
   1681  f885		       a9 01		      LDA	#1
   1682  f887		       85 d6		      STA	ScoreFontColorHoldChange
   1683  f889
   1684  f889		       a5 8d		      LDA	FrameCount1
   1685  f88b		       29 07		      AND	#%00000111
   1686  f88d		       85 b3		      STA	Tmp3
   1687  f88f							;0 is Zelda Name, (default)
   1688  f88f		       a9 01		      LDA	#1
   1689  f891		       c5 b3		      CMP	Tmp3
   1690  f893		       f0 38		      BEQ	PrintZeldaDateLeft
   1691  f895
   1692  f895		       a9 02		      LDA	#2
   1693  f897		       c5 b3		      CMP	Tmp3
   1694  f899		       f0 23		      BEQ	PrintPolvinhosLeft
   1695  f89b
   1696  f89b		       a9 03		      LDA	#3
   1697  f89d		       c5 b3		      CMP	Tmp3
   1698  f89f		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1699  f8a1
   1700  f8a1		       a9 04		      LDA	#4
   1701  f8a3		       c5 b3		      CMP	Tmp3
   1702  f8a5		       f0 1c		      BEQ	PrintIvonneLeft
   1703  f8a7
   1704  f8a7		       a9 05		      LDA	#5
   1705  f8a9		       c5 b3		      CMP	Tmp3
   1706  f8ab		       f0 2a		      BEQ	PrintIvonneDateLeft
   1707  f8ad
   1708  f8ad		       a9 06		      LDA	#6
   1709  f8af		       c5 b3		      CMP	Tmp3
   1710  f8b1		       f0 15		      BEQ	PrintArtLeft
   1711  f8b3
   1712  f8b3		       a9 07		      LDA	#7
   1713  f8b5		       c5 b3		      CMP	Tmp3
   1714  f8b7		       f0 23		      BEQ	PrintLeonardoLeft
   1715  f8b9
   1716  f8b9				   PrintZeldaLeft
   1717  f8b9		       a2 28		      LDX	#<ZeldaTextLeft
   1718  f8bb		       4c e1 f8 	      JMP	ProcessPrintEasterEgg
   1719  f8be				   PrintPolvinhosLeft
   1720  f8be		       a2 3c		      LDX	#<PolvinhosTextLeft
   1721  f8c0		       4c e1 f8 	      JMP	ProcessPrintEasterEgg
   1722  f8c3				   PrintIvonneLeft
   1723  f8c3		       a2 50		      LDX	#<IvonneTextLeft
   1724  f8c5		       4c e1 f8 	      JMP	ProcessPrintEasterEgg
   1725  f8c8				   PrintArtLeft
   1726  f8c8		       a2 64		      LDX	#<PaperArtTextLeft
   1727  f8ca		       4c e1 f8 	      JMP	ProcessPrintEasterEgg
   1728  f8cd
   1729  f8cd				   PrintZeldaDateLeft
   1730  f8cd		       a2 32		      LDX	#<ZeldaDateLeft
   1731  f8cf		       4c e1 f8 	      JMP	ProcessPrintEasterEgg
   1732  f8d2				   PrintPolvinhosDateLeft
   1733  f8d2		       a2 46		      LDX	#<PolvinhosDateLeft
   1734  f8d4		       4c e1 f8 	      JMP	ProcessPrintEasterEgg
   1735  f8d7				   PrintIvonneDateLeft
   1736  f8d7		       a2 5a		      LDX	#<IvonneDateLeft
   1737  f8d9		       4c e1 f8 	      JMP	ProcessPrintEasterEgg
   1738  f8dc				   PrintLeonardoLeft
   1739  f8dc		       a2 6e		      LDX	#<LeonardoTextLeft
   1740  f8de		       4c e1 f8 	      JMP	ProcessPrintEasterEgg
   1741  f8e1
   1742  f8e1				   ProcessPrintEasterEgg
   1743  f8e1		       a5 8c		      LDA	FrameCount0	;3
   1744  f8e3		       29 01		      AND	#%00000001	;2
   1745  f8e5		       d0 03		      BNE	TranformIntoRightText
   1746  f8e7		       4c ef f8 	      JMP	PrintEasterEggText
   1747  f8ea				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1748  f8ea		       8a		      TXA
   1749  f8eb		       18		      CLC
   1750  f8ec		       69 05		      ADC	#HALF_TEXT_SIZE
   1751  f8ee		       aa		      TAX
   1752  f8ef
   1753  f8ef				   PrintEasterEggText
   1754  f8ef		       20 52 f7 	      JSR	PrintStaticText
   1755  f8f2		       60		      RTS
   1756  f8f3
   1757  f8f3				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1758  f8f3		       a2 00		      LDX	#0
   1759  f8f5		       a0 04		      LDY	#FONT_OFFSET
   1760  f8f7
   1761  f8f7				   ScoreLoop		; 20 
   1762  f8f7		       85 02		      STA	WSYNC	;2
   1763  f8f9
   1764  f8f9		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1765  f8fb		       85 0d		      STA	PF0	;3
   1766  f8fd
   1767  f8fd		       a5 82		      LDA	PF1Cache	;3
   1768  f8ff		       85 0e		      STA	PF1	;3
   1769  f901
   1770  f901		       a5 83		      LDA	PF2Cache	;3
   1771  f903		       85 0f		      STA	PF2	;3
   1772  f905
   1773  f905				   DrawScoreD0		; 15
   1774  f905		       a6 d0		      LDX	ScoreD0	; 3
   1775  f907		       bd 00 fd 	      LDA	Font,X	;4
   1776  f90a		       85 81		      STA	PF0Cache	;3
   1777  f90c		       c6 d0		      DEC	ScoreD0	;5
   1778  f90e
   1779  f90e				   DrawScoreD1		; 23	
   1780  f90e		       a6 d1		      LDX	ScoreD1	; 3
   1781  f910		       bd 00 fd 	      LDA	Font,X	;4
   1782  f913		       0a		      ASL		;2
   1783  f914		       0a		      ASL		;2
   1784  f915		       0a		      ASL		;2
   1785  f916		       0a		      ASL		;2
   1786  f917		       85 82		      STA	PF1Cache	;3
   1787  f919		       c6 d1		      DEC	ScoreD1	;5
   1788  f91b
   1789  f91b				   DrawScoreD2		; 20
   1790  f91b		       a6 d2		      LDX	ScoreD2	; 3
   1791  f91d		       bd 00 fd 	      LDA	Font,X	;4
   1792  f920		       29 0f		      AND	#%00001111	;2
   1793  f922		       05 82		      ORA	PF1Cache	;3
   1794  f924		       85 82		      STA	PF1Cache	;3
   1795  f926		       c6 d2		      DEC	ScoreD2	;5
   1796  f928
   1797  f928				   DrawScoreD3		; 23
   1798  f928		       a6 d3		      LDX	ScoreD3	; 3
   1799  f92a		       bd 00 fd 	      LDA	Font,X	;4
   1800  f92d		       4a		      LSR		;2
   1801  f92e		       4a		      LSR		;2
   1802  f92f		       4a		      LSR		;2
   1803  f930		       4a		      LSR		;2
   1804  f931		       85 83		      STA	PF2Cache	;3
   1805  f933		       c6 d3		      DEC	ScoreD3	;5
   1806  f935
   1807  f935				   DrawScoreD4		; 20
   1808  f935		       a6 d4		      LDX	ScoreD4	; 3
   1809  f937		       bd 00 fd 	      LDA	Font,X	;4
   1810  f93a		       29 f0		      AND	#%11110000	;2
   1811  f93c		       05 83		      ORA	PF2Cache	;3
   1812  f93e		       85 83		      STA	PF2Cache	;3
   1813  f940		       c6 d4		      DEC	ScoreD4	;5
   1814  f942
   1815  f942
   1816  f942		       88		      DEY		;2
   1817  f943		       10 b2		      BPL	ScoreLoop	;4
   1818  f945
   1819  f945		       85 02		      STA	WSYNC
   1820  f947		       20 cb f6 	      JSR	LoadAll
   1821  f94a		       60		      RTS		; 6
   1822  f94b
   1823  f94b				   PrintRightDecimalDigits
   1824  f94b		       b9 00 00 	      LDA	0,Y
   1825  f94e		       4a		      LSR
   1826  f94f		       4a		      LSR
   1827  f950		       4a		      LSR
   1828  f951		       4a		      LSR
   1829  f952		       aa		      TAX
   1830  f953		       bd be fd 	      LDA	FontLookup,X	;4
   1831  f956		       85 d2		      STA	ScoreD2	;3
   1832  f958
   1833  f958		       b9 00 00 	      LDA	0,Y
   1834  f95b		       29 0f		      AND	#%00001111
   1835  f95d		       aa		      TAX
   1836  f95e		       bd be fd 	      LDA	FontLookup,X	;4
   1837  f961		       85 d3		      STA	ScoreD3	;3
   1838  f963
   1839  f963		       c8		      INY
   1840  f964		       b9 00 00 	      LDA	0,Y
   1841  f967		       4a		      LSR
   1842  f968		       4a		      LSR
   1843  f969		       4a		      LSR
   1844  f96a		       4a		      LSR
   1845  f96b		       aa		      TAX
   1846  f96c		       bd be fd 	      LDA	FontLookup,X	;4
   1847  f96f		       85 d0		      STA	ScoreD0	;3
   1848  f971
   1849  f971		       b9 00 00 	      LDA	0,Y
   1850  f974		       29 0f		      AND	#%00001111
   1851  f976		       aa		      TAX
   1852  f977		       bd be fd 	      LDA	FontLookup,X	;4
   1853  f97a		       85 d1		      STA	ScoreD1	;3
   1854  f97c
   1855  f97c		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1856  f97e		       85 d4		      STA	ScoreD4
   1857  f980		       60		      RTS
   1858  f981
   1859  f981				   PrintLastLeftDecimalDigits
   1860  f981		       b9 00 00 	      LDA	0,Y
   1861  f984		       4a		      LSR
   1862  f985		       4a		      LSR
   1863  f986		       4a		      LSR
   1864  f987		       4a		      LSR
   1865  f988		       aa		      TAX
   1866  f989		       bd be fd 	      LDA	FontLookup,X	;4
   1867  f98c		       85 d3		      STA	ScoreD3	;3
   1868  f98e		       b9 00 00 	      LDA	0,Y
   1869  f991		       29 0f		      AND	#%00001111
   1870  f993		       aa		      TAX
   1871  f994		       bd be fd 	      LDA	FontLookup,X	;4
   1872  f997		       85 d4		      STA	ScoreD4	;3
   1873  f999		       60		      RTS
   1874  f99a
   1875  f99a				   PrintZerosLeft
   1876  f99a		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1877  f99c		       85 d2		      STA	ScoreD2
   1878  f99e		       85 d3		      STA	ScoreD3
   1879  f9a0		       85 d4		      STA	ScoreD4
   1880  f9a2		       60		      RTS
   1881  f9a3
   1882  f9a3				   DrawGameOverScoreLine
   1883  f9a3		       85 02		      STA	WSYNC
   1884  f9a5		       20 f3 f8 	      JSR	PrintScore
   1885  f9a8		       85 02		      STA	WSYNC
   1886  f9aa		       85 02		      STA	WSYNC
   1887  f9ac		       20 bc f6 	      JSR	ClearPF
   1888  f9af		       60		      RTS
   1889  f9b0
   1890  f9b0				   DrawGameOverScreenLeft
   1891  f9b0		       85 02		      STA	WSYNC
   1892  f9b2		       20 bc f6 	      JSR	ClearPF
   1893  f9b5
   1894  f9b5				   DrawBcdScoreLeft
   1895  f9b5		       20 64 fb 	      JSR	Sleep8Lines
   1896  f9b8		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1897  f9ba		       85 06		      STA	COLUP0
   1898  f9bc		       85 02		      STA	WSYNC
   1899  f9be		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1900  f9c0		       85 d0		      STA	ScoreD0
   1901  f9c2
   1902  f9c2		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1903  f9c4		       85 d1		      STA	ScoreD1
   1904  f9c6
   1905  f9c6		       a5 b7		      LDA	ScoreBcd3
   1906  f9c8		       29 0f		      AND	#%00001111
   1907  f9ca		       aa		      TAX
   1908  f9cb		       bd be fd 	      LDA	FontLookup,X	;4
   1909  f9ce		       85 d2		      STA	ScoreD2	;3
   1910  f9d0
   1911  f9d0		       a0 b6		      LDY	#ScoreBcd2
   1912  f9d2		       20 81 f9 	      JSR	PrintLastLeftDecimalDigits
   1913  f9d5
   1914  f9d5		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   1915  f9d8
   1916  f9d8				   DrawTimerLeft
   1917  f9d8		       20 64 fb 	      JSR	Sleep8Lines
   1918  f9db		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1919  f9dd		       85 06		      STA	COLUP0
   1920  f9df		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1921  f9e1		       85 d0		      STA	ScoreD0
   1922  f9e3		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1923  f9e5		       85 d1		      STA	ScoreD1
   1924  f9e7		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1925  f9e9		       85 d2		      STA	ScoreD2
   1926  f9eb		       a0 bf		      LDY	#TimeBcd2
   1927  f9ed		       85 02		      STA	WSYNC
   1928  f9ef		       20 81 f9 	      JSR	PrintLastLeftDecimalDigits
   1929  f9f2		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   1930  f9f5
   1931  f9f5				   DrawGlideTimerLeft
   1932  f9f5		       20 64 fb 	      JSR	Sleep8Lines
   1933  f9f8		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1934  f9fa		       85 06		      STA	COLUP0
   1935  f9fc		       85 02		      STA	WSYNC
   1936  f9fe		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1937  fa00		       85 d0		      STA	ScoreD0
   1938  fa02		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1939  fa04		       85 d1		      STA	ScoreD1
   1940  fa06		       20 9a f9 	      JSR	PrintZerosLeft
   1941  fa09		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   1942  fa0c
   1943  fa0c				   DrawHitCountLeft
   1944  fa0c		       20 64 fb 	      JSR	Sleep8Lines
   1945  fa0f		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1946  fa11		       85 06		      STA	COLUP0
   1947  fa13		       85 02		      STA	WSYNC
   1948  fa15		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1949  fa17		       85 d0		      STA	ScoreD0
   1950  fa19		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1951  fa1b		       85 d1		      STA	ScoreD1
   1952  fa1d		       20 9a f9 	      JSR	PrintZerosLeft
   1953  fa20		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   1954  fa23
   1955  fa23				   DrawCheckpointCountLeft
   1956  fa23		       20 64 fb 	      JSR	Sleep8Lines
   1957  fa26		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1958  fa28		       85 06		      STA	COLUP0
   1959  fa2a		       85 02		      STA	WSYNC
   1960  fa2c		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1961  fa2e		       85 d0		      STA	ScoreD0
   1962  fa30		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1963  fa32		       85 d1		      STA	ScoreD1
   1964  fa34		       20 9a f9 	      JSR	PrintZerosLeft
   1965  fa37		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   1966  fa3a
   1967  fa3a				   DrawGameVersionLeft
   1968  fa3a		       20 64 fb 	      JSR	Sleep8Lines
   1969  fa3d		       a9 49		      LDA	#VERSION_COLOR
   1970  fa3f		       85 06		      STA	COLUP0
   1971  fa41
   1972  fa41		       a5 c5		      LDA	GameMode
   1973  fa43		       aa		      TAX
   1974  fa44		       bd be fd 	      LDA	FontLookup,X	;4
   1975  fa47		       85 d0		      STA	ScoreD0	;3
   1976  fa49		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1977  fa4b		       85 d1		      STA	ScoreD1
   1978  fa4d
   1979  fa4d		       a5 a6		      LDA	StartSWCHB
   1980  fa4f		       29 40		      AND	#%01000000	; P0 difficulty
   1981  fa51		       49 40		      EOR	#%01000000	; Reverse bytes
   1982  fa53		       2a		      ROL
   1983  fa54		       2a		      ROL
   1984  fa55		       2a		      ROL
   1985  fa56		       18		      CLC
   1986  fa57		       69 0a		      ADC	#10
   1987  fa59		       aa		      TAX
   1988  fa5a		       bd be fd 	      LDA	FontLookup,X	;4
   1989  fa5d		       85 d2		      STA	ScoreD2	;3
   1990  fa5f
   1991  fa5f		       a5 a6		      LDA	StartSWCHB
   1992  fa61		       29 80		      AND	#%10000000	; P0 difficulty
   1993  fa63		       49 80		      EOR	#%10000000	; Reverse bytes
   1994  fa65		       2a		      ROL
   1995  fa66		       2a		      ROL
   1996  fa67		       18		      CLC
   1997  fa68		       69 0a		      ADC	#10
   1998  fa6a		       aa		      TAX
   1999  fa6b		       bd be fd 	      LDA	FontLookup,X	;4
   2000  fa6e		       85 d3		      STA	ScoreD3	;3
   2001  fa70
   2002  fa70		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2003  fa72		       85 d4		      STA	ScoreD4
   2004  fa74
   2005  fa74		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   2006  fa77
   2007  fa77		       4c dd fa 	      JMP	FinalizeDrawGameOver
   2008  fa7a
   2009  fa7a				   DrawGameOverScreenRight
   2010  fa7a		       85 02		      STA	WSYNC
   2011  fa7c		       20 bc f6 	      JSR	ClearPF
   2012  fa7f
   2013  fa7f				   DrawBcdScoreRight
   2014  fa7f		       20 64 fb 	      JSR	Sleep8Lines
   2015  fa82		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2016  fa84		       85 07		      STA	COLUP1
   2017  fa86		       85 02		      STA	WSYNC
   2018  fa88		       a0 b4		      LDY	#ScoreBcd0
   2019  fa8a		       20 4b f9 	      JSR	PrintRightDecimalDigits
   2020  fa8d
   2021  fa8d		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   2022  fa90
   2023  fa90				   DrawTimerRight
   2024  fa90		       20 64 fb 	      JSR	Sleep8Lines
   2025  fa93		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2026  fa95		       85 07		      STA	COLUP1
   2027  fa97		       a0 bd		      LDY	#TimeBcd0
   2028  fa99		       20 4b f9 	      JSR	PrintRightDecimalDigits
   2029  fa9c
   2030  fa9c		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   2031  fa9f				   DrawGlideTimeRight
   2032  fa9f		       20 64 fb 	      JSR	Sleep8Lines
   2033  faa2		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2034  faa4		       85 07		      STA	COLUP1
   2035  faa6		       a0 cd		      LDY	#GlideTimeBcd0
   2036  faa8		       20 4b f9 	      JSR	PrintRightDecimalDigits
   2037  faab		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   2038  faae
   2039  faae				   DrawHitCountRight
   2040  faae		       20 64 fb 	      JSR	Sleep8Lines
   2041  fab1		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2042  fab3		       85 07		      STA	COLUP1
   2043  fab5		       a0 cb		      LDY	#HitCountBcd0
   2044  fab7		       20 4b f9 	      JSR	PrintRightDecimalDigits
   2045  faba		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   2046  fabd
   2047  fabd				   DrawCheckpointCountRight
   2048  fabd		       20 64 fb 	      JSR	Sleep8Lines
   2049  fac0		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2050  fac2		       85 07		      STA	COLUP1
   2051  fac4		       a0 a4		      LDY	#CheckpointBcd0
   2052  fac6		       20 4b f9 	      JSR	PrintRightDecimalDigits
   2053  fac9		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   2054  facc
   2055  facc				   DrawVersionRight
   2056  facc		       20 64 fb 	      JSR	Sleep8Lines
   2057  facf		       a9 49		      LDA	#VERSION_COLOR
   2058  fad1		       85 07		      STA	COLUP1
   2059  fad3		       85 02		      STA	WSYNC
   2060  fad5		       a2 78		      LDX	#<VersionText
   2061  fad7		       20 52 f7 	      JSR	PrintStaticText
   2062  fada		       20 a3 f9 	      JSR	DrawGameOverScoreLine
   2063  fadd
   2064  fadd				   FinalizeDrawGameOver
   2065  fadd		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2066  fadf		       85 d5		      STA	ScoreFontColor
   2067  fae1		       20 5b fb 	      JSR	Sleep4Lines
   2068  fae4		       20 6b fb 	      JSR	Sleep32Lines
   2069  fae7		       20 6b fb 	      JSR	Sleep32Lines
   2070  faea		       4c dd f5 	      JMP	PrepareOverscan
   2071  faed
   2072  faed				   DrawQrCode
   2073  faed		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2074  faef		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2075  faf1		       a9 01		      LDA	#%00000001	; Mirror playfield
   2076  faf3		       85 0a		      STA	CTRLPF
   2077  faf5		       20 aa f6 	      JSR	ClearAll	; To be 100 sure!
   2078  faf8		       ad 82 02 	      LDA	SWCHB
   2079  fafb		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2080  fafd		       f0 07		      BEQ	StoreReversedQrCode
   2081  faff		       86 09		      STX	COLUBK
   2082  fb01		       84 08		      STY	COLUPF
   2083  fb03		       4c 0a fb 	      JMP	ContinueQrCode
   2084  fb06				   StoreReversedQrCode
   2085  fb06		       86 08		      STX	COLUPF
   2086  fb08		       84 09		      STY	COLUBK
   2087  fb0a
   2088  fb0a				   ContinueQrCode
   2089  fb0a		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2090  fb0c		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2091  fb0e		       20 51 fb 	      JSR	WaitForVblankEnd
   2092  fb11		       20 64 fb 	      JSR	Sleep8Lines
   2093  fb14		       20 5b fb 	      JSR	Sleep4Lines
   2094  fb17
   2095  fb17				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2096  fb17		       85 02		      STA	WSYNC
   2097  fb19		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2098  fb1c		       85 0e		      STA	PF1	;3
   2099  fb1e		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2100  fb21		       85 0f		      STA	PF2	;3
      0  fb23					      SLEEP	27	; 
      1  fb23				   .CYCLES    SET	27
      2  fb23
      3  fb23				  -	      IF	.CYCLES < 2
      4  fb23				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb23				  -	      ERR
      6  fb23					      ENDIF
      7  fb23
      8  fb23					      IF	.CYCLES & 1
      9  fb23				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb23				  -	      nop	0
     11  fb23					      ELSE
     12  fb23		       24 00		      bit	VSYNC
     13  fb25					      ENDIF
     14  fb25				   .CYCLES    SET	.CYCLES - 3
     15  fb25					      ENDIF
     16  fb25
     17  fb25					      REPEAT	.CYCLES / 2
     18  fb25		       ea		      nop
     17  fb25					      REPEND
     18  fb26		       ea		      nop
     17  fb26					      REPEND
     18  fb27		       ea		      nop
     17  fb27					      REPEND
     18  fb28		       ea		      nop
     17  fb28					      REPEND
     18  fb29		       ea		      nop
     17  fb29					      REPEND
     18  fb2a		       ea		      nop
     17  fb2a					      REPEND
     18  fb2b		       ea		      nop
     17  fb2b					      REPEND
     18  fb2c		       ea		      nop
     17  fb2c					      REPEND
     18  fb2d		       ea		      nop
     17  fb2d					      REPEND
     18  fb2e		       ea		      nop
     17  fb2e					      REPEND
     18  fb2f		       ea		      nop
     17  fb2f					      REPEND
     18  fb30		       ea		      nop
     19  fb31					      REPEND
   2102  fb31		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2103  fb34		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2104  fb36		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2105  fb39		       85 0e		      STA	PF1	;3
   2106  fb3b
   2107  fb3b		       ca		      DEX		;2
   2108  fb3c		       d0 d9		      BNE	QrCodeLoop	;2
   2109  fb3e		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2110  fb40		       88		      DEY		;2
   2111  fb41		       10 d4		      BPL	QrCodeLoop	;4
   2112  fb43
   2113  fb43				   EndQrCodeLoop
   2114  fb43		       85 02		      STA	WSYNC	;
   2115  fb45		       a9 00		      LDA	#0
   2116  fb47		       85 0e		      STA	PF1	;3
   2117  fb49		       85 0f		      STA	PF2	;3
   2118  fb4b
   2119  fb4b		       20 6b fb 	      JSR	Sleep32Lines
   2120  fb4e		       4c dd f5 	      JMP	PrepareOverscan
   2121  fb51
   2122  fb51				   WaitForVblankEnd
   2123  fb51		       ad 84 02 	      LDA	INTIM
   2124  fb54		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
   2125  fb56		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline? 
   2126  fb58		       85 01		      STA	VBLANK
   2127  fb5a		       60		      RTS
   2128  fb5b
   2129  fb5b				   Sleep4Lines
   2130  fb5b		       85 02		      STA	WSYNC
   2131  fb5d		       85 02		      STA	WSYNC
   2132  fb5f		       85 02		      STA	WSYNC
   2133  fb61		       85 02		      STA	WSYNC
   2134  fb63		       60		      RTS
   2135  fb64
   2136  fb64				   Sleep8Lines
   2137  fb64		       20 5b fb 	      JSR	Sleep4Lines
   2138  fb67		       20 5b fb 	      JSR	Sleep4Lines
   2139  fb6a		       60		      RTS
   2140  fb6b
   2141  fb6b				   Sleep32Lines
   2142  fb6b		       20 64 fb 	      JSR	Sleep8Lines
   2143  fb6e		       20 64 fb 	      JSR	Sleep8Lines
   2144  fb71		       20 64 fb 	      JSR	Sleep8Lines
   2145  fb74		       20 64 fb 	      JSR	Sleep8Lines
   2146  fb77		       60		      RTS
   2147  fb78
   2148  fb78							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   2149  fc00					      org	$FC00
   2150  fc00				   QrCode1
   2151  fc00		       1f		      .byte.b	#%00011111
   2152  fc01		       10		      .byte.b	#%00010000
   2153  fc02		       17		      .byte.b	#%00010111
   2154  fc03		       17		      .byte.b	#%00010111
   2155  fc04		       17		      .byte.b	#%00010111
   2156  fc05		       10		      .byte.b	#%00010000
   2157  fc06		       1f		      .byte.b	#%00011111
   2158  fc07		       00		      .byte.b	#%00000000
   2159  fc08		       17		      .byte.b	#%00010111
   2160  fc09		       10		      .byte.b	#%00010000
   2161  fc0a		       1d		      .byte.b	#%00011101
   2162  fc0b		       16		      .byte.b	#%00010110
   2163  fc0c		       03		      .byte.b	#%00000011
   2164  fc0d		       19		      .byte.b	#%00011001
   2165  fc0e		       13		      .byte.b	#%00010011
   2166  fc0f		       1c		      .byte.b	#%00011100
   2167  fc10		       0b		      .byte.b	#%00001011
   2168  fc11		       00		      .byte.b	#%00000000
   2169  fc12		       1f		      .byte.b	#%00011111
   2170  fc13		       10		      .byte.b	#%00010000
   2171  fc14		       17		      .byte.b	#%00010111
   2172  fc15		       17		      .byte.b	#%00010111
   2173  fc16		       17		      .byte.b	#%00010111
   2174  fc17		       10		      .byte.b	#%00010000
   2175  fc18		       1f		      .byte.b	#%00011111
   2176  fc19
   2177  fc19				   QrCode2
   2178  fc19		       c3		      .byte.b	#%11000011
   2179  fc1a		       9a		      .byte.b	#%10011010
   2180  fc1b		       82		      .byte.b	#%10000010
   2181  fc1c		       da		      .byte.b	#%11011010
   2182  fc1d		       aa		      .byte.b	#%10101010
   2183  fc1e		       ca		      .byte.b	#%11001010
   2184  fc1f		       f3		      .byte.b	#%11110011
   2185  fc20		       78		      .byte.b	#%01111000
   2186  fc21		       df		      .byte.b	#%11011111
   2187  fc22		       fc		      .byte.b	#%11111100
   2188  fc23		       c7		      .byte.b	#%11000111
   2189  fc24		       98		      .byte.b	#%10011000
   2190  fc25		       23		      .byte.b	#%00100011
   2191  fc26		       b9		      .byte.b	#%10111001
   2192  fc27		       d2		      .byte.b	#%11010010
   2193  fc28		       30		      .byte.b	#%00110000
   2194  fc29		       eb		      .byte.b	#%11101011
   2195  fc2a		       28		      .byte.b	#%00101000
   2196  fc2b		       ab		      .byte.b	#%10101011
   2197  fc2c		       72		      .byte.b	#%01110010
   2198  fc2d		       fa		      .byte.b	#%11111010
   2199  fc2e		       7a		      .byte.b	#%01111010
   2200  fc2f		       32		      .byte.b	#%00110010
   2201  fc30		       3a		      .byte.b	#%00111010
   2202  fc31		       63		      .byte.b	#%01100011
   2203  fc32
   2204  fc32				   QrCode3
   2205  fc32		       98		      .byte.b	#%10011000
   2206  fc33		       c3		      .byte.b	#%11000011
   2207  fc34		       39		      .byte.b	#%00111001
   2208  fc35		       34		      .byte.b	#%00110100
   2209  fc36		       ff		      .byte.b	#%11111111
   2210  fc37		       71		      .byte.b	#%01110001
   2211  fc38		       d5		      .byte.b	#%11010101
   2212  fc39		       d1		      .byte.b	#%11010001
   2213  fc3a		       5f		      .byte.b	#%01011111
   2214  fc3b		       26		      .byte.b	#%00100110
   2215  fc3c		       2d		      .byte.b	#%00101101
   2216  fc3d		       e9		      .byte.b	#%11101001
   2217  fc3e		       d6		      .byte.b	#%11010110
   2218  fc3f		       26		      .byte.b	#%00100110
   2219  fc40		       ba		      .byte.b	#%10111010
   2220  fc41		       03		      .byte.b	#%00000011
   2221  fc42		       dd		      .byte.b	#%11011101
   2222  fc43		       e0		      .byte.b	#%11100000
   2223  fc44		       57		      .byte.b	#%01010111
   2224  fc45		       14		      .byte.b	#%00010100
   2225  fc46		       35		      .byte.b	#%00110101
   2226  fc47		       e5		      .byte.b	#%11100101
   2227  fc48		       b5		      .byte.b	#%10110101
   2228  fc49		       d4		      .byte.b	#%11010100
   2229  fc4a		       97		      .byte.b	#%10010111
   2230  fc4b
   2231  fc4b				   QrCode4
   2232  fc4b		       09		      .byte.b	#%00001001
   2233  fc4c		       0e		      .byte.b	#%00001110
   2234  fc4d		       0f		      .byte.b	#%00001111
   2235  fc4e		       0c		      .byte.b	#%00001100
   2236  fc4f		       0c		      .byte.b	#%00001100
   2237  fc50		       08		      .byte.b	#%00001000
   2238  fc51		       08		      .byte.b	#%00001000
   2239  fc52		       06		      .byte.b	#%00000110
   2240  fc53		       06		      .byte.b	#%00000110
   2241  fc54		       0b		      .byte.b	#%00001011
   2242  fc55		       0f		      .byte.b	#%00001111
   2243  fc56		       04		      .byte.b	#%00000100
   2244  fc57		       08		      .byte.b	#%00001000
   2245  fc58		       0f		      .byte.b	#%00001111
   2246  fc59		       09		      .byte.b	#%00001001
   2247  fc5a		       07		      .byte.b	#%00000111
   2248  fc5b		       05		      .byte.b	#%00000101
   2249  fc5c		       00		      .byte.b	#%00000000
   2250  fc5d		       0f		      .byte.b	#%00001111
   2251  fc5e		       08		      .byte.b	#%00001000
   2252  fc5f		       0b		      .byte.b	#%00001011
   2253  fc60		       0b		      .byte.b	#%00001011
   2254  fc61		       0b		      .byte.b	#%00001011
   2255  fc62		       08		      .byte.b	#%00001000
   2256  fc63		       0f		      .byte.b	#%00001111
   2257  fc64
   2258  fd00					      org	$FD00
   2259  fd00				   Font
   2260  fd00				   C0
   2261  fd00		       e7		      .byte.b	#%11100111	;
   2262  fd01		       a5		      .byte.b	#%10100101	; 
   2263  fd02		       a5		      .byte.b	#%10100101	; 
   2264  fd03		       a5		      .byte.b	#%10100101	; 
   2265  fd04		       e7		      .byte.b	#%11100111	;	
   2266  fd05				   C1
   2267  fd05		       e7		      .byte.b	#%11100111	;
   2268  fd06		       42		      .byte.b	#%01000010	; 
   2269  fd07		       42		      .byte.b	#%01000010	; 
   2270  fd08		       42		      .byte.b	#%01000010	; 
   2271  fd09		       66		      .byte.b	#%01100110	;
   2272  fd0a				   C2
   2273  fd0a		       e7		      .byte.b	#%11100111	;
   2274  fd0b		       24		      .byte.b	#%00100100	; 
   2275  fd0c		       e7		      .byte.b	#%11100111	; 
   2276  fd0d		       81		      .byte.b	#%10000001	; 
   2277  fd0e		       e7		      .byte.b	#%11100111	;
   2278  fd0f				   C3
   2279  fd0f		       e7		      .byte.b	#%11100111	;
   2280  fd10		       81		      .byte.b	#%10000001	; 
   2281  fd11		       e7		      .byte.b	#%11100111	; 
   2282  fd12		       81		      .byte.b	#%10000001	; 
   2283  fd13		       e7		      .byte.b	#%11100111	;
   2284  fd14				   C4
   2285  fd14		       81		      .byte.b	#%10000001	;
   2286  fd15		       81		      .byte.b	#%10000001	; 
   2287  fd16		       e7		      .byte.b	#%11100111	; 
   2288  fd17		       a5		      .byte.b	#%10100101	; 
   2289  fd18		       a5		      .byte.b	#%10100101	;
   2290  fd19				   C5
   2291  fd19		       e7		      .byte.b	#%11100111	;
   2292  fd1a		       81		      .byte.b	#%10000001	; 
   2293  fd1b		       e7		      .byte.b	#%11100111	; 
   2294  fd1c		       24		      .byte.b	#%00100100	; 
   2295  fd1d		       e7		      .byte.b	#%11100111	;
   2296  fd1e				   C6
   2297  fd1e		       e7		      .byte.b	#%11100111	;
   2298  fd1f		       a5		      .byte.b	#%10100101	; 
   2299  fd20		       e7		      .byte.b	#%11100111	; 
   2300  fd21		       24		      .byte.b	#%00100100	; 
   2301  fd22		       e7		      .byte.b	#%11100111	;
   2302  fd23				   C7
   2303  fd23		       81		      .byte.b	#%10000001	;
   2304  fd24		       81		      .byte.b	#%10000001	; 
   2305  fd25		       81		      .byte.b	#%10000001	; 
   2306  fd26		       81		      .byte.b	#%10000001	; 
   2307  fd27		       e7		      .byte.b	#%11100111	;
   2308  fd28				   C8
   2309  fd28		       e7		      .byte.b	#%11100111	;
   2310  fd29		       a5		      .byte.b	#%10100101	; 
   2311  fd2a		       e7		      .byte.b	#%11100111	; 
   2312  fd2b		       a5		      .byte.b	#%10100101	; 
   2313  fd2c		       e7		      .byte.b	#%11100111	;
   2314  fd2d				   C9
   2315  fd2d		       e7		      .byte.b	#%11100111	;
   2316  fd2e		       81		      .byte.b	#%10000001	; 
   2317  fd2f		       e7		      .byte.b	#%11100111	; 
   2318  fd30		       a5		      .byte.b	#%10100101	; 
   2319  fd31		       e7		      .byte.b	#%11100111	;
   2320  fd32				   CA
   2321  fd32		       a5		      .byte.b	#%10100101	;
   2322  fd33		       a5		      .byte.b	#%10100101	; 
   2323  fd34		       e7		      .byte.b	#%11100111	; 
   2324  fd35		       a5		      .byte.b	#%10100101	; 
   2325  fd36		       e7		      .byte.b	#%11100111	;
   2326  fd37				   CB
   2327  fd37		       66		      .byte.b	#%01100110	;
   2328  fd38		       a5		      .byte.b	#%10100101	; 
   2329  fd39		       66		      .byte.b	#%01100110	; 
   2330  fd3a		       a5		      .byte.b	#%10100101	;
   2331  fd3b		       66		      .byte.b	#%01100110	;
   2332  fd3c				   CC
   2333  fd3c		       e7		      .byte.b	#%11100111	;
   2334  fd3d		       24		      .byte.b	#%00100100	; 
   2335  fd3e		       24		      .byte.b	#%00100100	; 
   2336  fd3f		       24		      .byte.b	#%00100100	;
   2337  fd40		       e7		      .byte.b	#%11100111	;
   2338  fd41
   2339  fd41				   CD
   2340  fd41		       66		      .byte.b	#%01100110	;
   2341  fd42		       a5		      .byte.b	#%10100101	; 
   2342  fd43		       a5		      .byte.b	#%10100101	; 
   2343  fd44		       a5		      .byte.b	#%10100101	;
   2344  fd45		       66		      .byte.b	#%01100110	;
   2345  fd46
   2346  fd46				   CE
   2347  fd46		       e7		      .byte.b	#%11100111	;
   2348  fd47		       24		      .byte.b	#%00100100	; 
   2349  fd48		       e7		      .byte.b	#%11100111	; 
   2350  fd49		       24		      .byte.b	#%00100100	; 
   2351  fd4a		       e7		      .byte.b	#%11100111	;
   2352  fd4b
   2353  fd4b				   CF
   2354  fd4b		       24		      .byte.b	#%00100100	;
   2355  fd4c		       24		      .byte.b	#%00100100	; 
   2356  fd4d		       e7		      .byte.b	#%11100111	; 
   2357  fd4e		       24		      .byte.b	#%00100100	; 
   2358  fd4f		       e7		      .byte.b	#%11100111	;
   2359  fd50
   2360  fd50				   CG
   2361  fd50		       c3		      .byte.b	#%11000011	;
   2362  fd51		       a5		      .byte.b	#%10100101	; 
   2363  fd52		       a5		      .byte.b	#%10100101	; 
   2364  fd53		       24		      .byte.b	#%00100100	; 
   2365  fd54		       c3		      .byte.b	#%11000011	;	
   2366  fd55
   2367  fd55				   CH
   2368  fd55		       a5		      .byte.b	#%10100101	;
   2369  fd56		       a5		      .byte.b	#%10100101	; 
   2370  fd57		       e7		      .byte.b	#%11100111	; 
   2371  fd58		       a5		      .byte.b	#%10100101	; 
   2372  fd59		       a5		      .byte.b	#%10100101	;
   2373  fd5a
   2374  fd5a				   CK
   2375  fd5a		       a5		      .byte.b	#%10100101	;
   2376  fd5b		       a5		      .byte.b	#%10100101	; 
   2377  fd5c		       66		      .byte.b	#%01100110	; 
   2378  fd5d		       a5		      .byte.b	#%10100101	; 
   2379  fd5e		       a5		      .byte.b	#%10100101	;
   2380  fd5f
   2381  fd5f				   CL
   2382  fd5f		       e7		      .byte.b	#%11100111	;
   2383  fd60		       24		      .byte.b	#%00100100	; 
   2384  fd61		       24		      .byte.b	#%00100100	; 
   2385  fd62		       24		      .byte.b	#%00100100	; 
   2386  fd63		       24		      .byte.b	#%00100100	;
   2387  fd64
   2388  fd64				   CI
   2389  fd64		       42		      .byte.b	#%01000010	;
   2390  fd65		       42		      .byte.b	#%01000010	; 
   2391  fd66		       42		      .byte.b	#%01000010	; 
   2392  fd67		       42		      .byte.b	#%01000010	; 
   2393  fd68		       42		      .byte.b	#%01000010	;
   2394  fd69
   2395  fd69				   CM
   2396  fd69		       a5		      .byte.b	#%10100101	;
   2397  fd6a		       a5		      .byte.b	#%10100101	; 
   2398  fd6b		       a5		      .byte.b	#%10100101	; 
   2399  fd6c		       e7		      .byte.b	#%11100111	; 
   2400  fd6d		       a5		      .byte.b	#%10100101	;
   2401  fd6e
   2402  fd6e				   CN
   2403  fd6e		       a5		      .byte.b	#%10100101	;
   2404  fd6f		       a5		      .byte.b	#%10100101	; 
   2405  fd70		       a5		      .byte.b	#%10100101	; 
   2406  fd71		       a5		      .byte.b	#%10100101	; 
   2407  fd72		       66		      .byte.b	#%01100110	;	
   2408  fd73
   2409  fd73
   2410  fd73				   CO
   2411  fd73		       42		      .byte.b	#%01000010	;
   2412  fd74		       a5		      .byte.b	#%10100101	; 
   2413  fd75		       a5		      .byte.b	#%10100101	; 
   2414  fd76		       a5		      .byte.b	#%10100101	; 
   2415  fd77		       42		      .byte.b	#%01000010	;	
   2416  fd78
   2417  fd78				   CP
   2418  fd78		       24		      .byte.b	#%00100100	;
   2419  fd79		       24		      .byte.b	#%00100100	; 
   2420  fd7a		       e7		      .byte.b	#%11100111	; 
   2421  fd7b		       a5		      .byte.b	#%10100101	; 
   2422  fd7c		       e7		      .byte.b	#%11100111	;
   2423  fd7d
   2424  fd7d				   CR
   2425  fd7d		       a5		      .byte.b	#%10100101	;
   2426  fd7e		       a5		      .byte.b	#%10100101	; 
   2427  fd7f		       66		      .byte.b	#%01100110	; 
   2428  fd80		       a5		      .byte.b	#%10100101	; 
   2429  fd81		       66		      .byte.b	#%01100110	;
   2430  fd82
   2431  fd82				   CS
   2432  fd82		       66		      .byte.b	#%01100110	;
   2433  fd83		       81		      .byte.b	#%10000001	; 
   2434  fd84		       42		      .byte.b	#%01000010	; 
   2435  fd85		       24		      .byte.b	#%00100100	; 
   2436  fd86		       c3		      .byte.b	#%11000011	;
   2437  fd87
   2438  fd87				   CT
   2439  fd87		       42		      .byte.b	#%01000010	;
   2440  fd88		       42		      .byte.b	#%01000010	; 
   2441  fd89		       42		      .byte.b	#%01000010	; 
   2442  fd8a		       42		      .byte.b	#%01000010	; 
   2443  fd8b		       e7		      .byte.b	#%11100111	;
   2444  fd8c
   2445  fd8c				   CV
   2446  fd8c		       42		      .byte.b	#%01000010	;
   2447  fd8d		       a5		      .byte.b	#%10100101	; 
   2448  fd8e		       a5		      .byte.b	#%10100101	; 
   2449  fd8f		       a5		      .byte.b	#%10100101	; 
   2450  fd90		       a5		      .byte.b	#%10100101	;	
   2451  fd91
   2452  fd91				   CY
   2453  fd91		       42		      .byte.b	#%01000010	;
   2454  fd92		       42		      .byte.b	#%01000010	; 
   2455  fd93		       42		      .byte.b	#%01000010	; 
   2456  fd94		       a5		      .byte.b	#%10100101	; 
   2457  fd95		       a5		      .byte.b	#%10100101	;
   2458  fd96
   2459  fd96				   CW
   2460  fd96		       a5		      .byte.b	#%10100101	;
   2461  fd97		       e7		      .byte.b	#%11100111	; 
   2462  fd98		       a5		      .byte.b	#%10100101	; 
   2463  fd99		       a5		      .byte.b	#%10100101	; 
   2464  fd9a		       a5		      .byte.b	#%10100101	;
   2465  fd9b
   2466  fd9b				   CZ
   2467  fd9b		       e7		      .byte.b	#%11100111	;
   2468  fd9c		       24		      .byte.b	#%00100100	; 
   2469  fd9d		       42		      .byte.b	#%01000010	; 
   2470  fd9e		       81		      .byte.b	#%10000001	; 
   2471  fd9f		       e7		      .byte.b	#%11100111	;
   2472  fda0
   2473  fda0				   Pipe
   2474  fda0		       42		      .byte.b	#%01000010	;
   2475  fda1		       00		      .byte.b	#%00000000	; 
   2476  fda2		       42		      .byte.b	#%01000010	; 
   2477  fda3		       00		      .byte.b	#%00000000	; 
   2478  fda4		       42		      .byte.b	#%01000010	;
   2479  fda5
   2480  fda5				   Exclamation
   2481  fda5		       42		      .byte.b	#%01000010	;
   2482  fda6		       00		      .byte.b	#%00000000	; 
   2483  fda7		       42		      .byte.b	#%01000010	; 
   2484  fda8		       42		      .byte.b	#%01000010	; 
   2485  fda9		       42		      .byte.b	#%01000010	;
   2486  fdaa
   2487  fdaa				   Dot
   2488  fdaa		       42		      .byte.b	#%01000010	;
   2489  fdab		       42		      .byte.b	#%01000010	; 
   2490  fdac		       00		      .byte.b	#%00000000	; 
   2491  fdad		       00		      .byte.b	#%00000000	; 
   2492  fdae		       00		      .byte.b	#%00000000	;
   2493  fdaf
   2494  fdaf				   Colon
   2495  fdaf		       42		      .byte.b	#%01000010	;
   2496  fdb0		       42		      .byte.b	#%01000010	; 
   2497  fdb1		       00		      .byte.b	#%00000000	; 
   2498  fdb2		       42		      .byte.b	#%01000010	; 
   2499  fdb3		       42		      .byte.b	#%01000010	;
   2500  fdb4
   2501  fdb4				   Triangle
   2502  fdb4		       81		      .byte.b	#%10000001	;
   2503  fdb5		       c3		      .byte.b	#%11000011	; 
   2504  fdb6		       e7		      .byte.b	#%11100111	; 
   2505  fdb7		       c3		      .byte.b	#%11000011	; 
   2506  fdb8		       81		      .byte.b	#%10000001	;
   2507  fdb9
   2508  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2509  fdb9		       00		      .byte.b	#0	;
   2510  fdba		       00		      .byte.b	#0	;
   2511  fdbb		       00		      .byte.b	#0	;
   2512  fdbc		       00		      .byte.b	#0	;
   2513  fdbd		       00		      .byte.b	#0	;
   2514  fdbe
   2515  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2516  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2517  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2518  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2519  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2520  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2521  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2522  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2523  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2524  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2525  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2526  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2527  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2528  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2529  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2530  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2531  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2532  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2533  fdcf
   2534  fdcf				   EngineSoundType
   2535  fdcf		       02		      .byte.b	#2
   2536  fdd0		       02		      .byte.b	#2
   2537  fdd1		       0e		      .byte.b	#14
   2538  fdd2		       06		      .byte.b	#6
   2539  fdd3		       06		      .byte.b	#6
   2540  fdd4		       0e		      .byte.b	#14
   2541  fdd5
   2542  fdd5				   EngineBaseFrequence
   2543  fdd5		       1f		      .byte.b	#31
   2544  fdd6		       15		      .byte.b	#21
   2545  fdd7		       14		      .byte.b	#20
   2546  fdd8		       1f		      .byte.b	#31
   2547  fdd9		       16		      .byte.b	#22
   2548  fdda		       03		      .byte.b	#3
   2549  fddb
   2550  fddb				   TachometerSizeLookup1
   2551  fddb		       1f		      .byte.b	#%00011111
   2552  fddc		       3f		      .byte.b	#%00111111
   2553  fddd		       7f		      .byte.b	#%01111111
   2554  fdde		       ff		      .byte.b	#%11111111
   2555  fddf		       ff		      .byte.b	#%11111111
   2556  fde0		       ff		      .byte.b	#%11111111
   2557  fde1		       ff		      .byte.b	#%11111111
   2558  fde2		       ff		      .byte.b	#%11111111
   2559  fde3
   2560  fde3				   TachometerSizeLookup2
   2561  fde3		       00		      .byte.b	#%00000000
   2562  fde4		       00		      .byte.b	#%00000000
   2563  fde5		       00		      .byte.b	#%00000000
   2564  fde6		       00		      .byte.b	#%00000000
   2565  fde7		       80		      .byte.b	#%10000000
   2566  fde8		       c0		      .byte.b	#%11000000
   2567  fde9		       e0		      .byte.b	#%11100000
   2568  fdea		       f0		      .byte.b	#%11110000
   2569  fdeb
   2570  fdeb				   TachometerGearLookup
   2571  fdeb		       01		      .byte.b	#%00000001
   2572  fdec		       02		      .byte.b	#%00000010
   2573  fded		       04		      .byte.b	#%00000100
   2574  fdee		       08		      .byte.b	#%00001000
   2575  fdef		       10		      .byte.b	#%00010000
   2576  fdf0		       30		      .byte.b	#%00110000
   2577  fdf1
   2578  fe00					      org	$FE00
   2579  fe00				   AesTable
   2580  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2581  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2582  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2583  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2584  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2585  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2586  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2587  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2588  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2589  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2590  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2591  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2592  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2593  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2594  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2595  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2596  ff00
   2597  ff00							; From FF00 to FFFB (122 bytes) to use here
   2598  ff00
   2599  ff00				   StaticText		; All static text must be on the same MSB block. 
   2600  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2601  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2602  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2603  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2604  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2605  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2606  ff05
   2607  ff05				   HellwayLeftText
   2608  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2609  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2610  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2611  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2612  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2613  ff0a
   2614  ff0a				   HellwayRightText
   2615  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2616  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2617  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2618  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2619  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2620  ff0f
   2621  ff0f				   OpbText
   2622  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2623  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2624  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2625  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2626  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2627  ff14
   2628  ff14				   YearText
   2629  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2630  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2631  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2632  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2633  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2634  ff19
   2635  ff19				   GameText
   2636  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2637  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2638  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2639  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2640  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2641  ff1e
   2642  ff1e				   OverText
   2643  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2644  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2645  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2646  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2647  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2648  ff23				   GoText
   2649  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2650  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2651  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2652  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2653  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2654  ff28
   2655  ff28				   ZeldaTextLeft
   2656  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2657  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2658  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2659  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2660  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2661  ff2d
   2662  ff2d				   ZeldaTextRight
   2663  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2664  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2665  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2666  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2667  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2668  ff32
   2669  ff32				   ZeldaDateLeft
   2670  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2671  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2672  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2673  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2674  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2675  ff37
   2676  ff37				   ZeldaDateRight
   2677  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2678  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2679  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2680  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2681  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2682  ff3c
   2683  ff3c				   PolvinhosTextLeft
   2684  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2685  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2686  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2687  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2688  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2689  ff41
   2690  ff41				   PolvinhosTextRight
   2691  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2692  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2693  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2694  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2695  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2696  ff46
   2697  ff46				   PolvinhosDateLeft
   2698  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2699  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2700  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2701  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2702  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2703  ff4b
   2704  ff4b				   PolvinhosDateRight
   2705  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2706  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2707  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2708  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2709  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2710  ff50
   2711  ff50				   IvonneTextLeft
   2712  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2713  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2714  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2715  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2716  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2717  ff55
   2718  ff55				   IvonneTextRight
   2719  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2720  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2721  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2722  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2723  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2724  ff5a
   2725  ff5a				   IvonneDateLeft
   2726  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2727  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2728  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2729  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2730  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2731  ff5f
   2732  ff5f				   IvonneDateRight
   2733  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2734  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2735  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2736  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2737  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2738  ff64
   2739  ff64				   PaperArtTextLeft
   2740  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2741  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2742  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2743  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2744  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2745  ff69
   2746  ff69				   PaperArtTextRight
   2747  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2748  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2749  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2750  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2751  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2752  ff6e
   2753  ff6e				   LeonardoTextLeft
   2754  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2755  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2756  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2757  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2758  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2759  ff73
   2760  ff73				   LeonardoTextRight
   2761  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2762  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2763  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2764  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2765  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2766  ff78
   2767  ff78				   VersionText
   2768  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2769  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2770  ff7a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2771  ff7b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2772  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2773  ff7d
   2774  ff7d
   2775  ff7d				   EndStaticText
   2776  ff7d
   2777  ff7d				   CarSprite		; Upside down
   2778  ff7d		       00 00 00 00*	      ds	6
   2779  ff83		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   2780  ff84		       7e		      .byte.b	#%01111110
   2781  ff85		       24		      .byte.b	#%00100100
   2782  ff86		       bd		      .byte.b	#%10111101
   2783  ff87		       3c		      .byte.b	#%00111100
   2784  ff88		       bd		      .byte.b	#%10111101
   2785  ff89		       3c		      .byte.b	#%00111100
   2786  ff8a		       00 00 00 00*	      ds	GAMEPLAY_AREA - 2
   2787  ffca
   2788  ffca				   TrafficSpeeds
   2789  ffca		       00		      .byte.b	#$00	;  Trafic0 L
   2790  ffcb		       00		      .byte.b	#$00	;  Trafic0 H
   2791  ffcc		       0a		      .byte.b	#$0A	;  Trafic1 L
   2792  ffcd		       01		      .byte.b	#$01	;  Trafic1 H
   2793  ffce		       e6		      .byte.b	#$E6	;  Trafic2 L
   2794  ffcf		       00		      .byte.b	#$00	;  Trafic2 H
   2795  ffd0		       c2		      .byte.b	#$C2	;  Trafic3 L
   2796  ffd1		       00		      .byte.b	#$00	;  Trafic3 H
   2797  ffd2		       9e		      .byte.b	#$9E	;  Trafic4 L
   2798  ffd3		       00		      .byte.b	#$00	;  Trafic4 H
   2799  ffd4				   TrafficSpeedsHighDelta
   2800  ffd4		       00		      .byte.b	#$00	;  Trafic0 L
   2801  ffd5		       00		      .byte.b	#$00	;  Trafic0 H
   2802  ffd6		       0a		      .byte.b	#$0A	;  Trafic1 L
   2803  ffd7		       01		      .byte.b	#$01	;  Trafic1 H
   2804  ffd8		       c8		      .byte.b	#$C8	;  Trafic2 L
   2805  ffd9		       00		      .byte.b	#$00	;  Trafic2 H
   2806  ffda		       86		      .byte.b	#$86	;  Trafic3 L
   2807  ffdb		       00		      .byte.b	#$00	;  Trafic3 H
   2808  ffdc		       44		      .byte.b	#$44	;  Trafic4 L
   2809  ffdd		       00		      .byte.b	#$00	;  Trafic4 H
   2810  ffde
   2811  fffc					      org	$FFFC
   2812  fffc		       00 f0		      .word.w	BeforeStart
   2813  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
