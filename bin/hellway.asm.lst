------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     13  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     14  f000
     15  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     16  f000							;16 bit precision
     17  f000							;640 max speed!
     18  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     19  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     20  f000		       00 00	   CAR_MIN_SPEED_H =	0
     21  f000		       00 00	   CAR_MIN_SPEED_L =	0
     22  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     23  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 06	   BREAK_SPEED =	6
     26  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000	;Min car size... Maybe make different per track
     28  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     29  f000
     30  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     31  f000		       00 34	   TRAFFIC_COLOR =	$34
     32  f000		       00 87	   SCORE_BACKGROUND_COLOR =	$87
     33  f000		       00 0c	   SCORE_FONT_COLOR =	$0C
     34  f000		       00 28	   PLAYER_0_X_START =	$28	;
     35  f000		       00 2a	   PLAYER_0_MAX_X =	$2A	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     36  f000
     37  f000
     38  f000		       00 80	   GRP0Cache  =	$80
     39  f000		       00 81	   PF0Cache   =	$81
     40  f000		       00 82	   PF1Cache   =	$82
     41  f000		       00 83	   PF2Cache   =	$83
     42  f000
     43  f000		       00 86	   FrameCount0 =	$86	;
     44  f000		       00 87	   FrameCount1 =	$87	;
     45  f000
     46  f000		       00 88	   Player0SpeedL =	$88
     47  f000		       00 89	   Player0SpeedH =	$89
     48  f000
     49  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     50  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     51  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     52  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     53  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     54  f000
     55  f000							;Temporary variables, multiple uses
     56  f000		       00 b0	   Tmp0       =	$B0
     57  f000		       00 b1	   Tmp1       =	$B1
     58  f000		       00 b2	   Tmp2       =	$B2
     59  f000
     60  f000		       00 ba	   CollisionCounter =	$BA
     61  f000		       00 bb	   Player0X   =	$BB
     62  f000
     63  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, D6 = player 0 outside area
     64  f000
     65  f000		       00 d0	   ScoreD0    =	$D0
     66  f000		       00 d1	   ScoreD1    =	$D1
     67  f000		       00 d2	   ScoreD2    =	$D2
     68  f000		       00 d3	   ScoreD3    =	$D3
     69  f000		       00 d4	   ScoreD4    =	$D4
     70  f000
     71  f000							;generic start up stuff, put zero in all...
     72  f000				   Start
     73  f000		       78		      SEI
     74  f001		       d8		      CLD
     75  f002		       a2 ff		      LDX	#$FF
     76  f004		       9a		      TXS
     77  f005		       a9 00		      LDA	#0
     78  f007				   ClearMem
     79  f007		       95 00		      STA	0,X
     80  f009		       ca		      DEX
     81  f00a		       d0 fb		      BNE	ClearMem
     82  f00c
     83  f00c							;Setting some variables...
     84  f00c
     85  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     86  f00e		       85 06		      STA	COLUP0
     87  f010
     88  f010		       a9 85		      LDA	#PLAYER_2_COLOR
     89  f012		       85 07		      STA	COLUP1
     90  f014
     91  f014							;Loop ?
     92  f014		       a9 20		      LDA	#$20
     93  f016		       85 96		      STA	TrafficOffset1 + 2
     94  f018		       a9 40		      LDA	#$40
     95  f01a		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
     96  f01c		       a9 60		      LDA	#$60
     97  f01e		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
     98  f020		       a9 80		      LDA	#$80
     99  f022		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
    100  f024		       a9 a0		      LDA	#$A0
    101  f026
    102  f026		       ad 41 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    103  f029		       85 88		      STA	Player0SpeedL
    104  f02b
    105  f02b		       a5 28		      LDA	PLAYER_0_X_START
    106  f02d		       85 bb		      STA	Player0X
    107  f02f
    108  f02f							;VSYNC time
    109  f02f				   MainLoop
    110  f02f		       a9 02		      LDA	#2
    111  f031		       85 00		      STA	VSYNC
    112  f033		       85 02		      STA	WSYNC
    113  f035		       85 02		      STA	WSYNC
    114  f037							;Apply Movement, must be done after a WSYNC
    115  f037		       85 2a		      STA	HMOVE	;2
    116  f039							;This must be done after a WSync, otherwise it is impossible to predict the X position
    117  f039		       a5 c0		      LDA	GameStatus	;3
    118  f03b		       29 80		      AND	#%10000000	;2 game running, we get 0 and not reset the position.
    119  f03d		       d0 11		      BNE	DoNotSetPlayerX	;3
    120  f03f		       a6 28		      LDX	PLAYER_0_X_START	; 2
    121  f041		       86 bb		      STX	Player0X	; 3
    122  f043							;Do something better than sleep
      0  f043					      SLEEP	21	;
      1  f043				   .CYCLES    SET	21
      2  f043
      3  f043				  -	      IF	.CYCLES < 2
      4  f043				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f043				  -	      ERR
      6  f043					      ENDIF
      7  f043
      8  f043					      IF	.CYCLES & 1
      9  f043				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f043				  -	      nop	0
     11  f043					      ELSE
     12  f043		       24 00		      bit	VSYNC
     13  f045					      ENDIF
     14  f045				   .CYCLES    SET	.CYCLES - 3
     15  f045					      ENDIF
     16  f045
     17  f045					      REPEAT	.CYCLES / 2
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     17  f047					      REPEND
     18  f048		       ea		      nop
     17  f048					      REPEND
     18  f049		       ea		      nop
     17  f049					      REPEND
     18  f04a		       ea		      nop
     17  f04a					      REPEND
     18  f04b		       ea		      nop
     17  f04b					      REPEND
     18  f04c		       ea		      nop
     17  f04c					      REPEND
     18  f04d		       ea		      nop
     19  f04e					      REPEND
    124  f04e		       85 10		      STA	RESP0	;3
    125  f050
    126  f050				   DoNotSetPlayerX
    127  f050
    128  f050		       85 02		      STA	WSYNC	;3
    129  f052		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    130  f054		       8d 96 02 	      STA	TIM64T	;3	
    131  f057		       a9 00		      LDA	#0	;2
    132  f059		       85 00		      STA	VSYNC	;3	
    133  f05b
    134  f05b							;Read Fire Button before, will make it start the game for now.
    135  f05b				   StartGame
    136  f05b		       a5 0c		      LDA	INPT4	;3
    137  f05d		       30 06		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    138  f05f		       a5 c0		      LDA	GameStatus	;3
    139  f061		       09 80		      ORA	#%10000000	;2
    140  f063		       85 c0		      STA	GameStatus	;3
    141  f065				   SkipGameStart
    142  f065
    143  f065				   CountFrame
    144  f065		       e6 86		      INC	FrameCount0	; 5 Used to alternate lines
    145  f067		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    146  f069		       e6 87		      INC	FrameCount1	; 5 Still not used
    147  f06b				   SkipIncFC1
    148  f06b
    149  f06b
    150  f06b							;Does not update the game if not running
    151  f06b		       a5 c0		      LDA	GameStatus	;3
    152  f06d		       29 80		      AND	#%10000000	;2 game is running...
    153  f06f		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    154  f071		       4c 62 f1 	      JMP	SkipUpdateLogic
    155  f074
    156  f074				   ContinueWithGameLogic
    157  f074
    158  f074
    159  f074							;Acelerates / breaks the car
    160  f074		       a5 0c		      LDA	INPT4	;3
    161  f076		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    162  f078		       a9 10		      LDA	#%00010000	;UP in controller
    163  f07a		       2c 80 02 	      BIT	SWCHA
    164  f07d		       d0 21		      BNE	SkipAccelerate
    165  f07f
    166  f07f				   IncreaseCarSpeed
    167  f07f							;Adds speed
    168  f07f		       18		      CLC
    169  f080		       a5 88		      LDA	Player0SpeedL
    170  f082		       69 01		      ADC	#ACCELERATE_SPEED
    171  f084		       85 88		      STA	Player0SpeedL
    172  f086		       a5 89		      LDA	Player0SpeedH
    173  f088		       69 00		      ADC	#0
    174  f08a		       85 89		      STA	Player0SpeedH
    175  f08c
    176  f08c							;Checks if already max
    177  f08c		       c9 02		      CMP	#CAR_MAX_SPEED_H
    178  f08e		       90 10		      BCC	SkipAccelerate	; less than my max speed
    179  f090		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    180  f092							;High bit is max, compare the low
    181  f092		       a5 88		      LDA	Player0SpeedL
    182  f094		       c9 80		      CMP	#CAR_MAX_SPEED_L
    183  f096		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    184  f098							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    185  f098
    186  f098				   ResetToMaxSpeed		; Speed is more, or is already max
    187  f098		       a9 02		      LDA	#CAR_MAX_SPEED_H
    188  f09a		       85 89		      STA	Player0SpeedH
    189  f09c		       a9 80		      LDA	#CAR_MAX_SPEED_L
    190  f09e		       85 88		      STA	Player0SpeedL
    191  f0a0
    192  f0a0				   SkipAccelerate
    193  f0a0
    194  f0a0				   Break
    195  f0a0		       a9 20		      LDA	#%00100000	;Down in controller
    196  f0a2		       2c 80 02 	      BIT	SWCHA
    197  f0a5		       d0 26		      BNE	SkipBreak
    198  f0a7
    199  f0a7				   DecreaseSpeed
    200  f0a7		       38		      SEC
    201  f0a8		       a5 88		      LDA	Player0SpeedL
    202  f0aa		       e9 06		      SBC	#BREAK_SPEED
    203  f0ac		       85 88		      STA	Player0SpeedL
    204  f0ae		       a5 89		      LDA	Player0SpeedH
    205  f0b0		       e9 00		      SBC	#0
    206  f0b2		       85 89		      STA	Player0SpeedH
    207  f0b4
    208  f0b4				   ChecksMinSpeed
    209  f0b4		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    210  f0b6		       c9 00		      CMP	#CAR_MIN_SPEED_H
    211  f0b8		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    212  f0ba		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    213  f0bc
    214  f0bc				   CompareLBreakSpeed
    215  f0bc		       a5 88		      LDA	Player0SpeedL
    216  f0be		       c9 00		      CMP	#CAR_MIN_SPEED_L
    217  f0c0		       90 03		      BCC	ResetMinSpeed	; Less than memory
    218  f0c2		       4c cd f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    219  f0c5
    220  f0c5				   ResetMinSpeed
    221  f0c5		       a9 00		      LDA	#CAR_MIN_SPEED_H
    222  f0c7		       85 89		      STA	Player0SpeedH
    223  f0c9		       a9 00		      LDA	#CAR_MIN_SPEED_L
    224  f0cb		       85 88		      STA	Player0SpeedL
    225  f0cd				   SkipBreak
    226  f0cd
    227  f0cd							;Updates all offsets 24 bits
    228  f0cd		       a2 00		      LDX	#0	; Memory Offset 24 bit
    229  f0cf		       a0 00		      LDY	#0	; Line Speeds 16 bits
    230  f0d1				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    231  f0d1		       38		      SEC
    232  f0d2		       a5 88		      LDA	Player0SpeedL
    233  f0d4		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    234  f0d7		       85 b0		      STA	Tmp0
    235  f0d9		       c8		      INY
    236  f0da		       a5 89		      LDA	Player0SpeedH
    237  f0dc		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    238  f0df		       85 b1		      STA	Tmp1
    239  f0e1		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    240  f0e3		       e9 00		      SBC	#0
    241  f0e5		       85 b2		      STA	Tmp2
    242  f0e7
    243  f0e7
    244  f0e7				   AddsTheResult
    245  f0e7		       18		      CLC
    246  f0e8		       a5 b0		      LDA	Tmp0
    247  f0ea		       75 90		      ADC	TrafficOffset0,X
    248  f0ec		       95 90		      STA	TrafficOffset0,X
    249  f0ee		       e8		      INX
    250  f0ef		       a5 b1		      LDA	Tmp1
    251  f0f1		       75 90		      ADC	TrafficOffset0,X
    252  f0f3		       95 90		      STA	TrafficOffset0,X
    253  f0f5		       e8		      INX
    254  f0f6		       a5 b2		      LDA	Tmp2	; Carry
    255  f0f8		       75 90		      ADC	TrafficOffset0,X
    256  f0fa		       95 90		      STA	TrafficOffset0,X
    257  f0fc		       e8		      INX
    258  f0fd		       38		      SEC
    259  f0fe		       69 00		      ADC	#0	;Increment by one
    260  f100		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    261  f102
    262  f102
    263  f102				   PrepareNextUpdateLoop
    264  f102		       c8		      INY
    265  f103		       e8		      INX
    266  f104		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    267  f106		       d0 c9		      BNE	UpdateOffsets
    268  f108
    269  f108							;Until store the movemnt, LDX contains the value to be stored.
    270  f108				   TestCollision		;
    271  f108							; see if car0 and playfield collide, and change the background color if so
    272  f108		       a9 80		      LDA	#%10000000
    273  f10a		       24 02		      BIT	CXP0FB
    274  f10c		       f0 15		      BEQ	NoCollision	;skip if not hitting...
    275  f10e		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    276  f110		       d0 11		      BNE	NoCollision
    277  f112		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    278  f114		       85 ba		      STA	CollisionCounter	;and store as colision (will do more with it!)
    279  f116		       a9 10		      LDA	#COLLISION_SPEED_L	;
    280  f118		       85 88		      STA	Player0SpeedL
    281  f11a		       a9 00		      LDA	#0
    282  f11c		       85 89		      STA	Player0SpeedH
    283  f11e		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    284  f120		       4c 5e f1 	      JMP	StoreHMove	; We keep position consistent
    285  f123				   NoCollision
    286  f123
    287  f123				   DecrementCollision
    288  f123		       a4 ba		      LDY	CollisionCounter
    289  f125		       f0 07		      BEQ	FinishDecrementCollision
    290  f127		       a9 05		      LDA	#%00000101	; Make player bigger to show colision
    291  f129		       85 04		      STA	NUSIZ0
    292  f12b		       88		      DEY
    293  f12c		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    294  f12e				   FinishDecrementCollision
    295  f12e
    296  f12e				   ResetPlayerSize
    297  f12e		       d0 02		      BNE	FinishResetPlayerSize
    298  f130		       84 04		      STY	NUSIZ0	;
    299  f132				   FinishResetPlayerSize
    300  f132
    301  f132				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    302  f132		       c0 01		      CPY	#1	; Last frame before reset
    303  f134		       d0 05		      BNE	SkipResetPlayerPosition
    304  f136		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    305  f138		       4c 5e f1 	      JMP	StoreHMove
    306  f13b				   SkipResetPlayerPosition
    307  f13b
    308  f13b							; for left and right, we're gonna 
    309  f13b							; set the horizontal speed, and then do
    310  f13b							; a single HMOVE.  We'll use X to hold the
    311  f13b							; horizontal speed, then store it in the 
    312  f13b							; appropriate register
    313  f13b				   PrepareReadXAxis
    314  f13b		       a2 00		      LDX	#0
    315  f13d		       a4 bb		      LDY	Player0X
    316  f13f				   BeginReadLeft
    317  f13f		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    318  f141		       a9 40		      LDA	#%01000000	;Left
    319  f143		       2c 80 02 	      BIT	SWCHA
    320  f146		       d0 07		      BNE	SkipMoveLeft
    321  f148		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    322  f14a		       c6 bb		      DEC	Player0X
    323  f14c		       4c 5e f1 	      JMP	StoreHMove	; Cannot move left and right...
    324  f14f				   SkipMoveLeft
    325  f14f				   BeginReadRight
    326  f14f		       c0 2a		      CPY	#PLAYER_0_MAX_X
    327  f151		       f0 0b		      BEQ	SkipMoveRight	; At max already
    328  f153		       a9 80		      LDA	#%10000000	;Right
    329  f155		       2c 80 02 	      BIT	SWCHA
    330  f158		       d0 04		      BNE	SkipMoveRight
    331  f15a		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    332  f15c		       e6 bb		      INC	Player0X
    333  f15e				   SkipMoveRight
    334  f15e				   StoreHMove
    335  f15e		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    336  f160		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    337  f162
    338  f162
    339  f162				   SkipUpdateLogic
    340  f162		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    341  f164		       85 09		      STA	COLUBK
    342  f166		       a9 0c		      LDA	#SCORE_FONT_COLOR
    343  f168		       85 08		      STA	COLUPF
    344  f16a		       20 20 f3 	      JSR	ClearPF
    345  f16d		       a9 02		      LDA	#%00000010	; Score mode
    346  f16f		       85 0a		      STA	CTRLPF
    347  f171		       a0 04		      LDY	#SCORE_SIZE - 1
    348  f173		       a2 00		      LDX	#0
    349  f175
    350  f175		       a5 86		      LDA	FrameCount0	;3
    351  f177		       29 01		      AND	#%00000001	;2
    352  f179		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    353  f17b				   LeftScoreOn
    354  f17b		       a9 0c		      LDA	#SCORE_FONT_COLOR
    355  f17d		       85 07		      STA	COLUP1
    356  f17f		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    357  f181		       85 06		      STA	COLUP0
    358  f183		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    359  f185		       85 b1		      STA	Tmp1
    360  f187		       4c 96 f1 	      JMP	WaitForVblankEnd
    361  f18a				   RightScoreOn
    362  f18a		       a9 0c		      LDA	#SCORE_FONT_COLOR
    363  f18c		       85 06		      STA	COLUP0
    364  f18e		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    365  f190		       85 07		      STA	COLUP1
    366  f192		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    367  f194		       85 b1		      STA	Tmp1
    368  f196
    369  f196
    370  f196							; After here we are going to update the screen, No more heavy code
    371  f196				   WaitForVblankEnd
    372  f196		       ad 84 02 	      LDA	INTIM
    373  f199		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    374  f19b							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    375  f19b		       85 01		      STA	VBLANK
    376  f19d
    377  f19d				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    378  f19d		       85 02		      STA	WSYNC
    379  f19f
    380  f19f		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    381  f1a1		       85 0d		      STA	PF0	;3
    382  f1a3
    383  f1a3		       a5 82		      LDA	PF1Cache	;3
    384  f1a5		       85 0e		      STA	PF1	;3
    385  f1a7
    386  f1a7		       a5 83		      LDA	PF2Cache	;3
    387  f1a9		       85 0f		      STA	PF2	;3
    388  f1ab
    389  f1ab							;39
    390  f1ab				   DrawScore
    391  f1ab		       a6 d0		      LDX	ScoreD0	; 4
    392  f1ad		       bd 00 fd 	      LDA	Font,X	;4
    393  f1b0		       85 81		      STA	PF0Cache	;3
    394  f1b2		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    395  f1b4							;17
    396  f1b4
    397  f1b4		       a6 d1		      LDX	ScoreD1	; 4
    398  f1b6		       bd 00 fd 	      LDA	Font,X	;4
    399  f1b9		       0a		      ASL		;2
    400  f1ba		       0a		      ASL		;2
    401  f1bb		       0a		      ASL		;2
    402  f1bc		       0a		      ASL		;2
    403  f1bd		       85 82		      STA	PF1Cache	;3
    404  f1bf		       c6 d1		      DEC	ScoreD1	;6
    405  f1c1							;9 (After Wsync)
    406  f1c1
    407  f1c1		       a6 d2		      LDX	ScoreD2	; 4
    408  f1c3		       bd 00 fd 	      LDA	Font,X	;4
    409  f1c6		       29 0f		      AND	#%00001111
    410  f1c8		       05 82		      ORA	PF1Cache	;3
    411  f1ca		       85 82		      STA	PF1Cache	;3
    412  f1cc		       c6 d2		      DEC	ScoreD2	;6
    413  f1ce							;20
    414  f1ce
    415  f1ce		       a6 d3		      LDX	ScoreD3	; 3
    416  f1d0		       bd 00 fd 	      LDA	Font,X	;4
    417  f1d3		       4a		      LSR		;2
    418  f1d4		       4a		      LSR		;2
    419  f1d5		       4a		      LSR		;2
    420  f1d6		       4a		      LSR		;2
    421  f1d7		       85 83		      STA	PF2Cache	;3
    422  f1d9		       c6 d3		      DEC	ScoreD3	;5
    423  f1db							;23
    424  f1db
    425  f1db		       a6 d4		      LDX	ScoreD4	; 3
    426  f1dd		       bd 00 fd 	      LDA	Font,X	;4
    427  f1e0		       29 f0		      AND	#%11110000
    428  f1e2		       05 83		      ORA	PF2Cache	;3
    429  f1e4		       85 83		      STA	PF2Cache	;3
    430  f1e6		       c6 d4		      DEC	ScoreD4	;5
    431  f1e8							;18
    432  f1e8
    433  f1e8		       88		      DEY		;2
    434  f1e9		       10 b2		      BPL	ScoreLoop	;4
    435  f1eb
    436  f1eb		       85 02		      STA	WSYNC
    437  f1ed
    438  f1ed		       20 2f f3 	      JSR	LoadPF
    439  f1f0
    440  f1f0		       85 02		      STA	WSYNC
    441  f1f2		       85 02		      STA	WSYNC
    442  f1f4
    443  f1f4				   PrepareForTraffic
    444  f1f4		       20 20 f3 	      JSR	ClearPF	; 32
    445  f1f7
    446  f1f7		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    447  f1f9		       85 06		      STA	COLUP0
    448  f1fb
    449  f1fb		       a9 03		      LDA	#BACKGROUND_COLOR	;2
    450  f1fd		       85 07		      STA	COLUP1	;3
    451  f1ff
    452  f1ff							;Traffic colour
    453  f1ff		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    454  f201		       85 08		      STA	COLUPF	;3
    455  f203
    456  f203		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    457  f205
    458  f205		       a9 03		      LDA	#BACKGROUND_COLOR	;2 Make it in the very end, so we have one more nice blue line
      0  f207					      SLEEP	18	; Wait, so the line stay blue
      1  f207				   .CYCLES    SET	18
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207				  -	      IF	.CYCLES & 1
      9  f207				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207				  -	      nop	0
     11  f207				  -	      ELSE
     12  f207				  -	      bit	VSYNC
     13  f207				  -	      ENDIF
     14  f207				  -.CYCLES    SET	.CYCLES - 3
     15  f207					      ENDIF
     16  f207
     17  f207					      REPEAT	.CYCLES / 2
     18  f207		       ea		      nop
     17  f207					      REPEND
     18  f208		       ea		      nop
     17  f208					      REPEND
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     17  f20a					      REPEND
     18  f20b		       ea		      nop
     17  f20b					      REPEND
     18  f20c		       ea		      nop
     17  f20c					      REPEND
     18  f20d		       ea		      nop
     17  f20d					      REPEND
     18  f20e		       ea		      nop
     17  f20e					      REPEND
     18  f20f		       ea		      nop
     19  f210					      REPEND
    460  f210		       85 09		      STA	COLUBK	;3
    461  f212
    462  f212
    463  f212							;main scanline loop...
    464  f212				   ScanLoop
    465  f212		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    466  f214
    467  f214							;Start of next line!			
    468  f214				   DrawCache		;36 Is the last line going to the top of the next frame?
    469  f214
    470  f214		       a5 81		      LDA	PF0Cache	;3
    471  f216		       85 0d		      STA	PF0	;3
    472  f218
    473  f218		       b9 00 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    474  f21b		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    475  f21d
    476  f21d		       a5 82		      LDA	PF1Cache	;3
    477  f21f		       85 0e		      STA	PF1	;3
    478  f221
    479  f221		       a5 83		      LDA	PF2Cache	;3
    480  f223		       85 0f		      STA	PF2	;3
    481  f225
    482  f225		       a9 00		      LDA	#0	;2
    483  f227		       85 81		      STA	PF0Cache	;3
    484  f229		       85 82		      STA	PF1Cache	;3
    485  f22b		       85 83		      STA	PF2Cache	;3
    486  f22d
    487  f22d							;BEQ DrawTraffic3
    488  f22d				   DrawTraffic1 		; 32 
    489  f22d		       98		      TYA		; 2
    490  f22e		       18		      CLC		; 2 
    491  f22f		       65 95		      ADC	TrafficOffset1 + 1	;3
    492  f231		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    493  f233		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    494  f235		       45 96		      EOR	TrafficOffset1 + 2	; 3
    495  f237		       4c 3c f2 	      JMP	AfterEorOffsetWithCarry	; 3
    496  f23a				   EorOffsetWithCarry
    497  f23a		       45 97		      EOR	TrafficOffset1 + 3	; 3
    498  f23c				   AfterEorOffsetWithCarry		;17
    499  f23c		       aa		      TAX		;2
    500  f23d		       bd 00 fe 	      LDA	AesTable,X	; 4
    501  f240		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    502  f242		       b0 04		      BCS	FinishDrawTraffic1	; 2
    503  f244		       a9 60		      LDA	#%01100000	;2
    504  f246		       85 82		      STA	PF1Cache	;3
    505  f248				   FinishDrawTraffic1
    506  f248
    507  f248				   DrawTraffic2 		; 35
    508  f248		       98		      TYA		; 2
    509  f249		       18		      CLC		; 2 
    510  f24a		       65 99		      ADC	TrafficOffset2 + 1	;3
    511  f24c		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    512  f24e		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    513  f250		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    514  f252		       4c 57 f2 	      JMP	AfterEorOffsetWithCarry2	; 3
    515  f255				   EorOffsetWithCarry2
    516  f255		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    517  f257				   AfterEorOffsetWithCarry2		;17
    518  f257		       aa		      TAX		;2
    519  f258		       bd 00 fe 	      LDA	AesTable,X	; 4
    520  f25b		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    521  f25d		       b0 06		      BCS	FinishDrawTraffic2	; 2
    522  f25f		       a5 82		      LDA	PF1Cache	;3
    523  f261		       09 0c		      ORA	#%00001100	;2
    524  f263		       85 82		      STA	PF1Cache	;3
    525  f265				   FinishDrawTraffic2
    526  f265
    527  f265							;STA WSYNC ;65 / 137
    528  f265
    529  f265							; LDA Tmp0 ; Flicker this line if drawing car
    530  f265							; BEQ FinishDrawTraffic4
    531  f265				   DrawTraffic3 		; 38
    532  f265		       98		      TYA		; 2
    533  f266		       18		      CLC		; 2 
    534  f267		       65 9d		      ADC	TrafficOffset3 + 1	;3
    535  f269		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    536  f26b		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    537  f26d		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    538  f26f		       4c 74 f2 	      JMP	AfterEorOffsetWithCarry3	; 3
    539  f272				   EorOffsetWithCarry3
    540  f272		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    541  f274				   AfterEorOffsetWithCarry3		;17
    542  f274		       aa		      TAX		;2
    543  f275		       bd 00 fe 	      LDA	AesTable,X	; 4
    544  f278		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    545  f27a		       b0 08		      BCS	FinishDrawTraffic3	; 2 
    546  f27c		       a9 01		      LDA	#%00000001	;2
    547  f27e		       85 83		      STA	PF2Cache	;3
    548  f280		       05 82		      ORA	PF1Cache	;3
    549  f282		       85 82		      STA	PF1Cache	;3
    550  f284				   FinishDrawTraffic3
    551  f284
    552  f284				   DrawTraffic4 		; 35
    553  f284		       98		      TYA		; 2
    554  f285		       18		      CLC		; 2 
    555  f286		       65 a1		      ADC	TrafficOffset4 + 1	;3
    556  f288		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    557  f28a		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    558  f28c		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    559  f28e		       4c 93 f2 	      JMP	AfterEorOffsetWithCarry4	; 3
    560  f291				   EorOffsetWithCarry4
    561  f291		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    562  f293				   AfterEorOffsetWithCarry4		;17
    563  f293		       aa		      TAX		;2
    564  f294		       bd 00 fe 	      LDA	AesTable,X	; 4
    565  f297		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    566  f299		       b0 06		      BCS	FinishDrawTraffic4	; 2
    567  f29b		       a5 83		      LDA	PF2Cache	;3
    568  f29d		       09 0c		      ORA	#%00001100	;2
    569  f29f		       85 83		      STA	PF2Cache	;3	
    570  f2a1				   FinishDrawTraffic4
    571  f2a1
    572  f2a1				   DrawTraffic0 		; 24
    573  f2a1		       98		      TYA		;2
    574  f2a2		       18		      CLC		;2
    575  f2a3		       65 91		      ADC	TrafficOffset0 + 1	; 3
    576  f2a5		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    577  f2a7		       f0 0a		      BEQ	SkipDrawTraffic0	; 2
    578  f2a9		       a9 f0		      LDA	#%11110000	; 2
    579  f2ab		       85 81		      STA	PF0Cache	;3
    580  f2ad		       a5 83		      LDA	PF2Cache	;3
    581  f2af		       09 e0		      ORA	#%11100000	;2
    582  f2b1		       85 83		      STA	PF2Cache	; 3
    583  f2b3				   SkipDrawTraffic0
    584  f2b3
    585  f2b3				   WhileScanLoop
    586  f2b3		       88		      DEY		;2
    587  f2b4		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    588  f2b6		       4c 12 f2 	      JMP	ScanLoop	;3
    589  f2b9				   FinishScanLoop		; 7 209 of 222
    590  f2b9
    591  f2b9		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    592  f2bb
    593  f2bb		       20 2f f3 	      JSR	LoadPF
    594  f2be
    595  f2be		       85 02		      STA	WSYNC	; do stuff!
    596  f2c0		       85 02		      STA	WSYNC
    597  f2c2		       85 02		      STA	WSYNC
    598  f2c4							;42 cycles to use here
    599  f2c4
    600  f2c4				   PrepareOverscan
    601  f2c4		       a9 02		      LDA	#2
    602  f2c6		       85 02		      STA	WSYNC
    603  f2c8		       85 01		      STA	VBLANK
    604  f2ca
    605  f2ca		       a9 24		      LDA	#36	; one more line before overscan...
    606  f2cc		       8d 96 02 	      STA	TIM64T
    607  f2cf
    608  f2cf							;Could be done during on vblank to save this comparisson time (before draw score), 
    609  f2cf							;but I am saving vblank cycles for now, in case of 2 players.
    610  f2cf				   ChooseSide		; 
    611  f2cf		       a5 86		      LDA	FrameCount0	;3
    612  f2d1		       29 01		      AND	#%00000001	;2
    613  f2d3		       f0 37		      BEQ	RightScoreWrite	; Half of the screen with the correct colors.
    614  f2d5
    615  f2d5				   LeftScoreWrite
    616  f2d5				   WriteDistance		;Not optimized yet, ugly code.
    617  f2d5				   LetterS
    618  f2d5		       a9 59		      LDA	#<CS + #SCORE_SIZE -1	;3
    619  f2d7		       85 d0		      STA	ScoreD0	;3
    620  f2d9							;We "multiply by 5 to get the real distance in the table"
    621  f2d9				   Digit0Distance
    622  f2d9		       a5 91		      LDA	TrafficOffset0 + 1	;3
    623  f2db		       29 0f		      AND	#%00001111	;2
    624  f2dd		       aa		      TAX		; 2
    625  f2de		       bd 5a fd 	      LDA	FontLookup,X	;4 
    626  f2e1		       85 d4		      STA	ScoreD4	;3
    627  f2e3
    628  f2e3				   Digit1Distance
    629  f2e3		       a5 91		      LDA	TrafficOffset0 + 1	;3
    630  f2e5		       29 f0		      AND	#%11110000	;2
    631  f2e7		       4a		      LSR		; 2
    632  f2e8		       4a		      LSR		; 2
    633  f2e9		       4a		      LSR		; 2
    634  f2ea		       4a		      LSR		; 2
    635  f2eb		       aa		      TAX		; 2
    636  f2ec		       bd 5a fd 	      LDA	FontLookup,X	;4
    637  f2ef		       85 d3		      STA	ScoreD3	;3
    638  f2f1
    639  f2f1				   Digit2Distance
    640  f2f1		       a5 92		      LDA	TrafficOffset0 + 2	;3
    641  f2f3		       29 0f		      AND	#%00001111	;2
    642  f2f5		       aa		      TAX		; 2
    643  f2f6		       bd 5a fd 	      LDA	FontLookup,X	;4 
    644  f2f9		       85 d2		      STA	ScoreD2	;3
    645  f2fb
    646  f2fb				   Digit3Distance
    647  f2fb		       a5 92		      LDA	TrafficOffset0 + 2	;3
    648  f2fd		       29 f0		      AND	#%11110000	;2
    649  f2ff		       4a		      LSR		; 2
    650  f300		       4a		      LSR		; 2
    651  f301		       4a		      LSR		; 2
    652  f302		       4a		      LSR		; 2
    653  f303		       aa		      TAX		; 2
    654  f304		       bd 5a fd 	      LDA	FontLookup,X	;4
    655  f307		       85 d1		      STA	ScoreD1	;3
    656  f309				   EndDrawDistance
    657  f309		       4c 18 f3 	      JMP	RightScoreWriteEnd	;3
    658  f30c
    659  f30c				   RightScoreWrite
    660  f30c		       a9 04		      LDA	#<C0 + #SCORE_SIZE -1	;3
    661  f30e		       85 d0		      STA	ScoreD0	;3
    662  f310		       85 d1		      STA	ScoreD1	;3
    663  f312		       85 d2		      STA	ScoreD2	;3
    664  f314		       85 d3		      STA	ScoreD3	;3
    665  f316		       85 d4		      STA	ScoreD4	;3
    666  f318				   RightScoreWriteEnd
    667  f318
    668  f318				   OverScanWait
    669  f318		       ad 84 02 	      LDA	INTIM
    670  f31b		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    671  f31d		       4c 2f f0 	      JMP	MainLoop
    672  f320
    673  f320				   Subroutines
    674  f320
    675  f320				   ClearPF		; 26
    676  f320		       a9 00		      LDA	#0	;2
    677  f322		       85 0d		      STA	PF0	;3
    678  f324		       85 0e		      STA	PF1	;3
    679  f326		       85 0f		      STA	PF2	;3	
    680  f328		       85 81		      STA	PF0Cache	;3
    681  f32a		       85 82		      STA	PF1Cache	;3
    682  f32c		       85 83		      STA	PF2Cache	;3 
    683  f32e		       60		      RTS		;6
    684  f32f
    685  f32f				   LoadPF		; 24
    686  f32f		       a5 81		      LDA	PF0Cache	;3
    687  f331		       85 0d		      STA	PF0	;3
    688  f333
    689  f333		       a5 82		      LDA	PF1Cache	;3
    690  f335		       85 0e		      STA	PF1	;3
    691  f337
    692  f337		       a5 83		      LDA	PF2Cache	;3
    693  f339		       85 0f		      STA	PF2	;3
    694  f33b
    695  f33b		       60		      RTS		;6
    696  f33c
    697  f33c							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
    698  fd00					      org	$FD00
    699  fd00				   Font
    700  fd00				   C0
    701  fd00		       e7		      .byte.b	#%11100111	;
    702  fd01		       a5		      .byte.b	#%10100101	; 
    703  fd02		       a5		      .byte.b	#%10100101	; 
    704  fd03		       a5		      .byte.b	#%10100101	; 
    705  fd04		       e7		      .byte.b	#%11100111	;	
    706  fd05				   C1
    707  fd05		       e7		      .byte.b	#%11100111	;
    708  fd06		       42		      .byte.b	#%01000010	; 
    709  fd07		       42		      .byte.b	#%01000010	; 
    710  fd08		       42		      .byte.b	#%01000010	; 
    711  fd09		       66		      .byte.b	#%01100110	;
    712  fd0a				   C2
    713  fd0a		       e7		      .byte.b	#%11100111	;
    714  fd0b		       24		      .byte.b	#%00100100	; 
    715  fd0c		       e7		      .byte.b	#%11100111	; 
    716  fd0d		       81		      .byte.b	#%10000001	; 
    717  fd0e		       e7		      .byte.b	#%11100111	;
    718  fd0f				   C3
    719  fd0f		       e7		      .byte.b	#%11100111	;
    720  fd10		       81		      .byte.b	#%10000001	; 
    721  fd11		       e7		      .byte.b	#%11100111	; 
    722  fd12		       81		      .byte.b	#%10000001	; 
    723  fd13		       e7		      .byte.b	#%11100111	;
    724  fd14				   C4
    725  fd14		       81		      .byte.b	#%10000001	;
    726  fd15		       81		      .byte.b	#%10000001	; 
    727  fd16		       e7		      .byte.b	#%11100111	; 
    728  fd17		       a5		      .byte.b	#%10100101	; 
    729  fd18		       a5		      .byte.b	#%10100101	;
    730  fd19				   C5
    731  fd19		       e7		      .byte.b	#%11100111	;
    732  fd1a		       81		      .byte.b	#%10000001	; 
    733  fd1b		       e7		      .byte.b	#%11100111	; 
    734  fd1c		       24		      .byte.b	#%00100100	; 
    735  fd1d		       e7		      .byte.b	#%11100111	;
    736  fd1e				   C6
    737  fd1e		       e7		      .byte.b	#%11100111	;
    738  fd1f		       a5		      .byte.b	#%10100101	; 
    739  fd20		       e7		      .byte.b	#%11100111	; 
    740  fd21		       24		      .byte.b	#%00100100	; 
    741  fd22		       e7		      .byte.b	#%11100111	;
    742  fd23				   C7
    743  fd23		       81		      .byte.b	#%10000001	;
    744  fd24		       81		      .byte.b	#%10000001	; 
    745  fd25		       81		      .byte.b	#%10000001	; 
    746  fd26		       81		      .byte.b	#%10000001	; 
    747  fd27		       e7		      .byte.b	#%11100111	;
    748  fd28				   C8
    749  fd28		       e7		      .byte.b	#%11100111	;
    750  fd29		       a5		      .byte.b	#%10100101	; 
    751  fd2a		       e7		      .byte.b	#%11100111	; 
    752  fd2b		       a5		      .byte.b	#%10100101	; 
    753  fd2c		       e7		      .byte.b	#%11100111	;
    754  fd2d				   C9
    755  fd2d		       e7		      .byte.b	#%11100111	;
    756  fd2e		       81		      .byte.b	#%10000001	; 
    757  fd2f		       e7		      .byte.b	#%11100111	; 
    758  fd30		       a5		      .byte.b	#%10100101	; 
    759  fd31		       e7		      .byte.b	#%11100111	;
    760  fd32				   CA
    761  fd32		       a5		      .byte.b	#%10100101	;
    762  fd33		       a5		      .byte.b	#%10100101	; 
    763  fd34		       e7		      .byte.b	#%11100111	; 
    764  fd35		       a5		      .byte.b	#%10100101	; 
    765  fd36		       e7		      .byte.b	#%11100111	;
    766  fd37				   CB
    767  fd37		       66		      .byte.b	#%01100110	;
    768  fd38		       a5		      .byte.b	#%10100101	; 
    769  fd39		       66		      .byte.b	#%01100110	; 
    770  fd3a		       a5		      .byte.b	#%10100101	;
    771  fd3b		       66		      .byte.b	#%01100110	;
    772  fd3c				   CC
    773  fd3c		       e7		      .byte.b	#%11100111	;
    774  fd3d		       24		      .byte.b	#%00100100	; 
    775  fd3e		       24		      .byte.b	#%00100100	; 
    776  fd3f		       24		      .byte.b	#%00100100	;
    777  fd40		       e7		      .byte.b	#%11100111	;
    778  fd41
    779  fd41				   CD
    780  fd41		       66		      .byte.b	#%01100110	;
    781  fd42		       a5		      .byte.b	#%10100101	; 
    782  fd43		       a5		      .byte.b	#%10100101	; 
    783  fd44		       a5		      .byte.b	#%10100101	;
    784  fd45		       66		      .byte.b	#%01100110	;
    785  fd46
    786  fd46				   CE
    787  fd46		       e7		      .byte.b	#%11100111	;
    788  fd47		       24		      .byte.b	#%00100100	; 
    789  fd48		       e7		      .byte.b	#%11100111	; 
    790  fd49		       24		      .byte.b	#%00100100	; 
    791  fd4a		       e7		      .byte.b	#%11100111	;
    792  fd4b
    793  fd4b				   CF
    794  fd4b		       24		      .byte.b	#%00100100	;
    795  fd4c		       24		      .byte.b	#%00100100	; 
    796  fd4d		       e7		      .byte.b	#%11100111	; 
    797  fd4e		       24		      .byte.b	#%00100100	; 
    798  fd4f		       e7		      .byte.b	#%11100111	;
    799  fd50
    800  fd50				   Space		; Moved from the beggining so 0 to F is fast to draw.
    801  fd50		       00		      .byte.b	%0	;
    802  fd51		       00		      .byte.b	#0	;
    803  fd52		       00		      .byte.b	#0	;
    804  fd53		       00		      .byte.b	#0	;
    805  fd54		       00		      .byte.b	#0	;
    806  fd55
    807  fd55				   CS
    808  fd55		       66		      .byte.b	#%01100110	;
    809  fd56		       81		      .byte.b	#%10000001	; 
    810  fd57		       42		      .byte.b	#%01000010	; 
    811  fd58		       24		      .byte.b	#%00100100	; 
    812  fd59		       c3		      .byte.b	#%11000011	;
    813  fd5a
    814  fd5a				   FontLookup		; Very fast font lookup for dynamic values!
    815  fd5a		       04		      .byte.b	#<C0 + #SCORE_SIZE -1
    816  fd5b		       09		      .byte.b	#<C1 + #SCORE_SIZE -1
    817  fd5c		       0e		      .byte.b	#<C2 + #SCORE_SIZE -1
    818  fd5d		       13		      .byte.b	#<C3 + #SCORE_SIZE -1
    819  fd5e		       18		      .byte.b	#<C4 + #SCORE_SIZE -1
    820  fd5f		       1d		      .byte.b	#<C5 + #SCORE_SIZE -1
    821  fd60		       22		      .byte.b	#<C6 + #SCORE_SIZE -1
    822  fd61		       27		      .byte.b	#<C7 + #SCORE_SIZE -1
    823  fd62		       2c		      .byte.b	#<C8 + #SCORE_SIZE -1
    824  fd63		       31		      .byte.b	#<C9 + #SCORE_SIZE -1
    825  fd64		       36		      .byte.b	#<CA + #SCORE_SIZE -1
    826  fd65		       3b		      .byte.b	#<CB + #SCORE_SIZE -1
    827  fd66		       40		      .byte.b	#<CC + #SCORE_SIZE -1
    828  fd67		       45		      .byte.b	#<CD + #SCORE_SIZE -1
    829  fd68		       4a		      .byte.b	#<CE + #SCORE_SIZE -1
    830  fd69		       4f		      .byte.b	#<CF + #SCORE_SIZE -1
    831  fd6a
    832  fd6a
    833  fe00					      org	$FE00
    834  fe00				   AesTable
    835  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    836  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    837  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    838  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    839  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    840  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    841  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    842  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    843  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    844  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    845  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    846  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    847  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    848  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    849  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    850  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    851  ff00
    852  ff00							; From FF00 to FFFB (122 bytes) to use here
    853  ff00
    854  ff00				   CarSprite		; Upside down
    855  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    856  ff01		       7e		      .byte.b	#%01111110
    857  ff02		       24		      .byte.b	#%00100100
    858  ff03		       bd		      .byte.b	#%10111101
    859  ff04		       3c		      .byte.b	#%00111100
    860  ff05		       bd		      .byte.b	#%10111101
    861  ff06		       3c		      .byte.b	#%00111100
    862  ff07		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
    863  ff39
    864  ff39
    865  ff39				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    866  ff39		       00		      .byte.b	#$00	;  Trafic0 L
    867  ff3a		       00		      .byte.b	#$00	;  Trafic0 H
    868  ff3b		       0a		      .byte.b	#$0A	;  Trafic1 L
    869  ff3c		       01		      .byte.b	#$01	;  Trafic1 H
    870  ff3d		       e6		      .byte.b	#$E6	;  Trafic2 L
    871  ff3e		       00		      .byte.b	#$00	;  Trafic2 H
    872  ff3f		       c2		      .byte.b	#$C2	;  Trafic3 L
    873  ff40		       00		      .byte.b	#$00	;  Trafic3 H
    874  ff41		       9e		      .byte.b	#$9E	;  Trafic4 L
    875  ff42		       00		      .byte.b	#$00	;  Trafic4 H
    876  ff43
    877  ff43
    878  fffc					      org	$FFFC
    879  fffc		       00 f0		      .word.w	Start
    880  fffe		       00 f0		      .word.w	Start
