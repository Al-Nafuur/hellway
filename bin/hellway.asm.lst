------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 0a	   BREAK_SPEED =	10
     26  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     28  f000
     29  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     30  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     31  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     32  f000
     33  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     34  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     35  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     36  f000
     37  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     38  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     39  f000		       00 f2	   TRAFFIC_COLOR_INTENSE =	$F2
     40  f000
     41  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     42  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     43  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     44  f000
     45  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     46  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     47  f000
     48  f000		       00 96	   PLAYER1_COLOR =	$96
     49  f000
     50  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     51  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     52  f000		       00 30	   SCORE_FONT_COLOR_BAD =	$30
     53  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     54  f000
     55  f000		       00 35	   PLAYER_0_X_START =	$35	;
     56  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     57  f000
     58  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     59  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     60  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     61  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	%00000111	; Every 8 frames
     62  f000
     63  f000		       00 28	   SWITCHES_DEBOUNCE_TIME =	40	; Frames
     64  f000
     65  f000		       00 00	   BLACK      =	$00	;
     66  f000
     67  f000		       00 01	   MAX_GAME_MODE =	1
     68  f000
     69  f000		       00 80	   GRP0Cache  =	$80
     70  f000		       00 81	   PF0Cache   =	$81
     71  f000		       00 82	   PF1Cache   =	$82
     72  f000		       00 83	   PF2Cache   =	$83
     73  f000		       00 84	   GRP1Cache  =	$84
     74  f000		       00 85	   ENABLCache =	$85
     75  f000		       00 86	   ENAM0Cache =	$86
     76  f000		       00 87	   ENAM1Cache =	$87
     77  f000
     78  f000		       00 8c	   FrameCount0 =	$8C	;
     79  f000		       00 8d	   FrameCount1 =	$8D	;
     80  f000
     81  f000		       00 8e	   Player0SpeedL =	$8E
     82  f000		       00 8f	   Player0SpeedH =	$8F
     83  f000
     84  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     85  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     86  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     87  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     88  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     89  f000
     90  f000							;Temporary variables, multiple uses
     91  f000		       00 b0	   Tmp0       =	$B0
     92  f000		       00 b1	   Tmp1       =	$B1
     93  f000		       00 b2	   Tmp2       =	$B2
     94  f000		       00 b3	   Tmp3       =	$B3
     95  f000
     96  f000		       00 ba	   CollisionCounter =	$BA
     97  f000		       00 bb	   Player0X   =	$BB
     98  f000		       00 bc	   CountdownTimer =	$BC
     99  f000		       00 bd	   Traffic0Msb =	$BD
    100  f000		       00 be	   SwitchDebounceCounter =	$BE
    101  f000
    102  f000
    103  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    104  f000		       00 c1	   TrafficChance =	$C1
    105  f000		       00 c2	   CheckpointTime =	$C2
    106  f000		       00 c3	   TrafficColor =	$C3
    107  f000		       00 c4	   CurrentDifficulty =	$C4
    108  f000		       00 c5	   GameMode   =	$C5
    109  f000
    110  f000		       00 d0	   ScoreD0    =	$D0
    111  f000		       00 d1	   ScoreD1    =	$D1
    112  f000		       00 d2	   ScoreD2    =	$D2
    113  f000		       00 d3	   ScoreD3    =	$D3
    114  f000		       00 d4	   ScoreD4    =	$D4
    115  f000		       00 d5	   ScoreFontColor =	$D5
    116  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    117  f000		       00 d7	   NextCheckpoint =	$D7
    118  f000
    119  f000
    120  f000							;generic start up stuff, put zero in all...
    121  f000				   BeforeStart		;All variables that are kept on game reset or select
    122  f000		       a0 00		      LDY	#0
    123  f002		       84 be		      STY	SwitchDebounceCounter
    124  f004		       84 c5		      STY	GameMode
    125  f006
    126  f006				   Start
    127  f006		       78		      SEI
    128  f007		       d8		      CLD
    129  f008		       a2 ff		      LDX	#$FF
    130  f00a		       9a		      TXS
    131  f00b		       a9 00		      LDA	#0
    132  f00d				   ClearMem
    133  f00d		       e0 be		      CPX	#SwitchDebounceCounter
    134  f00f		       f0 06		      BEQ	SkipClean
    135  f011		       e0 c5		      CPX	#GameMode
    136  f013		       f0 02		      BEQ	SkipClean
    137  f015		       95 00		      STA	0,X
    138  f017				   SkipClean
    139  f017		       ca		      DEX
    140  f018		       d0 f3		      BNE	ClearMem
    141  f01a
    142  f01a							;Setting some variables...
    143  f01a
    144  f01a		       85 02		      STA	WSYNC	;We will set player position
    145  f01c		       a9 01		      LDA	#1
    146  f01e		       85 94		      STA	TrafficOffset1 + 0	; So we can detect loop
    147  f020		       a9 20		      LDA	#$20
    148  f022		       85 96		      STA	TrafficOffset1 + 2
    149  f024		       a9 40		      LDA	#$40
    150  f026		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
    151  f028		       a9 60		      LDA	#$60
    152  f02a		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
    153  f02c		       a9 80		      LDA	#$80
    154  f02e		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
    155  f030		       a9 a0		      LDA	#$A0
    156  f032
    157  f032		       ad 64 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    158  f035		       85 8e		      STA	Player0SpeedL
    159  f037
      0  f037					      SLEEP	18
      1  f037				   .CYCLES    SET	18
      2  f037
      3  f037				  -	      IF	.CYCLES < 2
      4  f037				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f037				  -	      ERR
      6  f037					      ENDIF
      7  f037
      8  f037				  -	      IF	.CYCLES & 1
      9  f037				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f037				  -	      nop	0
     11  f037				  -	      ELSE
     12  f037				  -	      bit	VSYNC
     13  f037				  -	      ENDIF
     14  f037				  -.CYCLES    SET	.CYCLES - 3
     15  f037					      ENDIF
     16  f037
     17  f037					      REPEAT	.CYCLES / 2
     18  f037		       ea		      nop
     17  f037					      REPEND
     18  f038		       ea		      nop
     17  f038					      REPEND
     18  f039		       ea		      nop
     17  f039					      REPEND
     18  f03a		       ea		      nop
     17  f03a					      REPEND
     18  f03b		       ea		      nop
     17  f03b					      REPEND
     18  f03c		       ea		      nop
     17  f03c					      REPEND
     18  f03d		       ea		      nop
     17  f03d					      REPEND
     18  f03e		       ea		      nop
     17  f03e					      REPEND
     18  f03f		       ea		      nop
     19  f040					      REPEND
    161  f040		       85 10		      STA	RESP0
    162  f042
    163  f042		       a6 00		      LDX	0
    164  f044		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    165  f047		       29 c0		      AND	#%11000000
    166  f049		       f0 0b		      BEQ	CallConfigureDifficulty
    167  f04b		       e8		      INX
    168  f04c		       c9 80		      CMP	#%10000000
    169  f04e		       f0 06		      BEQ	CallConfigureDifficulty
    170  f050		       e8		      INX
    171  f051		       c9 40		      CMP	#%01000000
    172  f053		       f0 01		      BEQ	CallConfigureDifficulty
    173  f055		       e8		      INX
    174  f056
    175  f056				   CallConfigureDifficulty
    176  f056		       86 c4		      STX	CurrentDifficulty
    177  f058		       20 32 f5 	      JSR	ConfigureDifficulty
    178  f05b
    179  f05b				   HPositioning
    180  f05b		       85 02		      STA	WSYNC
    181  f05d
    182  f05d		       a9 30		      LDA	#%00110000	;2 Missile Size
    183  f05f		       85 04		      STA	NUSIZ0	;3
    184  f061		       85 05		      STA	NUSIZ1	;3
    185  f063
    186  f063		       a9 35		      LDA	#PLAYER_0_X_START	;2
    187  f065		       85 bb		      STA	Player0X	;3
    188  f067
    189  f067		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    190  f069		       85 bc		      STA	CountdownTimer	;3
    191  f06b
    192  f06b		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    193  f06d		       85 d7		      STA	NextCheckpoint
    194  f06f
    195  f06f		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f071					      SLEEP	11	;
      1  f071				   .CYCLES    SET	11
      2  f071
      3  f071				  -	      IF	.CYCLES < 2
      4  f071				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f071				  -	      ERR
      6  f071					      ENDIF
      7  f071
      8  f071					      IF	.CYCLES & 1
      9  f071				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f071				  -	      nop	0
     11  f071					      ELSE
     12  f071		       24 00		      bit	VSYNC
     13  f073					      ENDIF
     14  f073				   .CYCLES    SET	.CYCLES - 3
     15  f073					      ENDIF
     16  f073
     17  f073					      REPEAT	.CYCLES / 2
     18  f073		       ea		      nop
     17  f073					      REPEND
     18  f074		       ea		      nop
     17  f074					      REPEND
     18  f075		       ea		      nop
     17  f075					      REPEND
     18  f076		       ea		      nop
     19  f077					      REPEND
    197  f077		       85 11		      STA	RESP1
      0  f079					      SLEEP	2	;
      1  f079				   .CYCLES    SET	2
      2  f079
      3  f079				  -	      IF	.CYCLES < 2
      4  f079				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f079				  -	      ERR
      6  f079					      ENDIF
      7  f079
      8  f079				  -	      IF	.CYCLES & 1
      9  f079				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f079				  -	      nop	0
     11  f079				  -	      ELSE
     12  f079				  -	      bit	VSYNC
     13  f079				  -	      ENDIF
     14  f079				  -.CYCLES    SET	.CYCLES - 3
     15  f079					      ENDIF
     16  f079
     17  f079					      REPEAT	.CYCLES / 2
     18  f079		       ea		      nop
     19  f07a					      REPEND
    199  f07a		       85 14		      STA	RESBL
      0  f07c					      SLEEP	2	;
      1  f07c				   .CYCLES    SET	2
      2  f07c
      3  f07c				  -	      IF	.CYCLES < 2
      4  f07c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f07c				  -	      ERR
      6  f07c					      ENDIF
      7  f07c
      8  f07c				  -	      IF	.CYCLES & 1
      9  f07c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f07c				  -	      nop	0
     11  f07c				  -	      ELSE
     12  f07c				  -	      bit	VSYNC
     13  f07c				  -	      ENDIF
     14  f07c				  -.CYCLES    SET	.CYCLES - 3
     15  f07c					      ENDIF
     16  f07c
     17  f07c					      REPEAT	.CYCLES / 2
     18  f07c		       ea		      nop
     19  f07d					      REPEND
    201  f07d		       85 12		      STA	RESM0
      0  f07f					      SLEEP	2
      1  f07f				   .CYCLES    SET	2
      2  f07f
      3  f07f				  -	      IF	.CYCLES < 2
      4  f07f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f07f				  -	      ERR
      6  f07f					      ENDIF
      7  f07f
      8  f07f				  -	      IF	.CYCLES & 1
      9  f07f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f07f				  -	      nop	0
     11  f07f				  -	      ELSE
     12  f07f				  -	      bit	VSYNC
     13  f07f				  -	      ENDIF
     14  f07f				  -.CYCLES    SET	.CYCLES - 3
     15  f07f					      ENDIF
     16  f07f
     17  f07f					      REPEAT	.CYCLES / 2
     18  f07f		       ea		      nop
     19  f080					      REPEND
    203  f080		       85 13		      STA	RESM1
    204  f082
    205  f082		       a9 f0		      LDA	#$F0
    206  f084		       85 24		      STA	HMBL
    207  f086		       85 22		      STA	HMM0
    208  f088		       85 23		      STA	HMM1
    209  f08a		       85 02		      STA	WSYNC
    210  f08c		       85 2a		      STA	HMOVE
    211  f08e		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    212  f090		       85 2b		      STA	HMCLR
    213  f092
    214  f092							;SLEEP 24
    215  f092							;STA HMCLR
    216  f092
    217  f092							;VSYNC time
    218  f092				   MainLoop
    219  f092		       a9 02		      LDA	#2
    220  f094		       85 00		      STA	VSYNC
    221  f096		       85 02		      STA	WSYNC
    222  f098		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    223  f09a		       85 2a		      STA	HMOVE	;2
    224  f09c							;This must be done after a WSync, otherwise it is impossible to predict the X position
    225  f09c				   DoNotSetPlayerX
    226  f09c
    227  f09c		       85 02		      STA	WSYNC	;3
    228  f09e		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    229  f0a0		       8d 96 02 	      STA	TIM64T	;3	
    230  f0a3		       a9 00		      LDA	#0	;2
    231  f0a5		       85 00		      STA	VSYNC	;3	
    232  f0a7
    233  f0a7							;Read Fire Button before, will make it start the game for now.
    234  f0a7				   StartGame
    235  f0a7		       a5 0c		      LDA	INPT4	;3
    236  f0a9		       30 17		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    237  f0ab		       a5 c0		      LDA	GameStatus	;3
    238  f0ad		       d0 13		      BNE	SkipGameStart
    239  f0af		       e6 c0		      INC	GameStatus
    240  f0b1		       a9 00		      LDA	#0	;
    241  f0b3		       85 8c		      STA	FrameCount0
    242  f0b5		       85 8d		      STA	FrameCount1
    243  f0b7		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    244  f0b9		       85 d5		      STA	ScoreFontColor
    245  f0bb		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    246  f0bd		       85 d6		      STA	ScoreFontColorHoldChange
    247  f0bf		       4c fc f0 	      JMP	SkipIncFC1	; Make the worse case stable
    248  f0c2				   SkipGameStart
    249  f0c2
    250  f0c2				   ReadSwitches
    251  f0c2		       a6 be		      LDX	SwitchDebounceCounter
    252  f0c4		       d0 2e		      BNE	DecrementSwitchDebounceCounter
    253  f0c6		       a9 01		      LDA	#%00000001
    254  f0c8		       2c 82 02 	      BIT	SWCHB
    255  f0cb		       d0 07		      BNE	SkipReset
    256  f0cd		       a9 28		      LDA	#SWITCHES_DEBOUNCE_TIME
    257  f0cf		       85 be		      STA	SwitchDebounceCounter
    258  f0d1		       4c 06 f0 	      JMP	Start
    259  f0d4				   SkipReset
    260  f0d4		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    261  f0d6		       d0 19		      BNE	SkipGameSelect
    262  f0d8		       a9 02		      LDA	#%00000010
    263  f0da		       2c 82 02 	      BIT	SWCHB
    264  f0dd		       d0 12		      BNE	SkipGameSelect
    265  f0df		       a6 c5		      LDX	GameMode
    266  f0e1		       e0 01		      CPX	#MAX_GAME_MODE
    267  f0e3		       f0 04		      BEQ	ResetGameMode
    268  f0e5		       e8		      INX
    269  f0e6		       4c eb f0 	      JMP	StoreGameMode
    270  f0e9				   ResetGameMode
    271  f0e9		       a2 00		      LDX	#0
    272  f0eb				   StoreGameMode
    273  f0eb		       86 c5		      STX	GameMode
    274  f0ed		       a9 28		      LDA	#SWITCHES_DEBOUNCE_TIME
    275  f0ef		       85 be		      STA	SwitchDebounceCounter
    276  f0f1				   SkipGameSelect
    277  f0f1		       4c f6 f0 	      JMP	EndReadSwitches
    278  f0f4				   DecrementSwitchDebounceCounter
    279  f0f4		       c6 be		      DEC	SwitchDebounceCounter
    280  f0f6				   EndReadSwitches
    281  f0f6
    282  f0f6				   CountFrame
    283  f0f6		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    284  f0f8		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    285  f0fa		       e6 8d		      INC	FrameCount1	; 5 Still not used
    286  f0fc				   SkipIncFC1
    287  f0fc
    288  f0fc							;Does not update the game if not running
    289  f0fc		       a5 c0		      LDA	GameStatus	;3
    290  f0fe		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    291  f100		       4c 3f f2 	      JMP	SkipUpdateLogic
    292  f103				   ContinueWithGameLogic
    293  f103
    294  f103				   EverySecond		; 64 frames to be more precise
    295  f103		       a9 3f		      LDA	#%00111111
    296  f105		       25 8c		      AND	FrameCount0
    297  f107		       d0 06		      BNE	SkipEverySecondAction
    298  f109		       c5 bc		      CMP	CountdownTimer
    299  f10b		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    300  f10d		       c6 bc		      DEC	CountdownTimer
    301  f10f				   SkipEverySecondAction
    302  f10f
    303  f10f
    304  f10f
    305  f10f				   BreakOnTimeOver		; Uses LDX as the breaking speed
    306  f10f		       a2 00		      LDX	#0
    307  f111		       a5 bc		      LDA	CountdownTimer
    308  f113		       d0 08		      BNE	Break
    309  f115		       a5 8c		      LDA	FrameCount0
    310  f117		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    311  f119		       d0 02		      BNE	Break
    312  f11b		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    313  f11d
    314  f11d				   Break
    315  f11d		       a9 20		      LDA	#%00100000	;Down in controller
    316  f11f		       2c 80 02 	      BIT	SWCHA
    317  f122		       d0 0b		      BNE	BreakNonZero
    318  f124		       a5 0c		      LDA	INPT4	;3
    319  f126		       10 05		      BPL	BreakWhileAccelerating
    320  f128		       a2 0a		      LDX	#BREAK_SPEED
    321  f12a		       4c 2f f1 	      JMP	BreakNonZero
    322  f12d				   BreakWhileAccelerating		; Allow better control while breaking.
    323  f12d		       a2 05		      LDX	#BREAK_SPEED / 2
    324  f12f
    325  f12f				   BreakNonZero
    326  f12f		       e0 00		      CPX	#0
    327  f131		       f0 2b		      BEQ	SkipBreak
    328  f133		       86 b0		      STX	Tmp0
    329  f135
    330  f135				   DecreaseSpeed
    331  f135		       38		      SEC
    332  f136		       a5 8e		      LDA	Player0SpeedL
    333  f138		       e5 b0		      SBC	Tmp0
    334  f13a		       85 8e		      STA	Player0SpeedL
    335  f13c		       a5 8f		      LDA	Player0SpeedH
    336  f13e		       e9 00		      SBC	#0
    337  f140		       85 8f		      STA	Player0SpeedH
    338  f142
    339  f142				   CheckMinSpeed
    340  f142		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    341  f144		       c9 00		      CMP	#CAR_MIN_SPEED_H
    342  f146		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    343  f148		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    344  f14a
    345  f14a				   CompareLBreakSpeed
    346  f14a		       a5 8e		      LDA	Player0SpeedL
    347  f14c		       c9 00		      CMP	#CAR_MIN_SPEED_L
    348  f14e		       90 03		      BCC	ResetMinSpeed	; Less than memory
    349  f150		       4c 5b f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    350  f153
    351  f153				   ResetMinSpeed
    352  f153		       a9 00		      LDA	#CAR_MIN_SPEED_H
    353  f155		       85 8f		      STA	Player0SpeedH
    354  f157		       a9 00		      LDA	#CAR_MIN_SPEED_L
    355  f159		       85 8e		      STA	Player0SpeedL
    356  f15b
    357  f15b				   SkipAccelerateIfBreaking
    358  f15b		       4c 8e f1 	      JMP	SkipAccelerate
    359  f15e				   SkipBreak
    360  f15e
    361  f15e				   Acelerates
    362  f15e		       a5 bc		      LDA	CountdownTimer
    363  f160		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    364  f162		       a5 0c		      LDA	INPT4	;3
    365  f164		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    366  f166		       a9 10		      LDA	#%00010000	;UP in controller
    367  f168		       2c 80 02 	      BIT	SWCHA
    368  f16b		       d0 21		      BNE	SkipAccelerate
    369  f16d
    370  f16d				   IncreaseCarSpeed
    371  f16d							;Adds speed
    372  f16d		       18		      CLC
    373  f16e		       a5 8e		      LDA	Player0SpeedL
    374  f170		       69 01		      ADC	#ACCELERATE_SPEED
    375  f172		       85 8e		      STA	Player0SpeedL
    376  f174		       a5 8f		      LDA	Player0SpeedH
    377  f176		       69 00		      ADC	#0
    378  f178		       85 8f		      STA	Player0SpeedH
    379  f17a
    380  f17a							;Checks if already max
    381  f17a		       c9 02		      CMP	#CAR_MAX_SPEED_H
    382  f17c		       90 10		      BCC	SkipAccelerate	; less than my max speed
    383  f17e		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    384  f180							;High bit is max, compare the low
    385  f180		       a5 8e		      LDA	Player0SpeedL
    386  f182		       c9 80		      CMP	#CAR_MAX_SPEED_L
    387  f184		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    388  f186							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    389  f186
    390  f186				   ResetToMaxSpeed		; Speed is more, or is already max
    391  f186		       a9 02		      LDA	#CAR_MAX_SPEED_H
    392  f188		       85 8f		      STA	Player0SpeedH
    393  f18a		       a9 80		      LDA	#CAR_MAX_SPEED_L
    394  f18c		       85 8e		      STA	Player0SpeedL
    395  f18e				   SkipAccelerate
    396  f18e
    397  f18e							;Updates all offsets 24 bits
    398  f18e		       a2 00		      LDX	#0	; Memory Offset 24 bit
    399  f190		       a0 00		      LDY	#0	; Line Speeds 16 bits
    400  f192				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    401  f192		       38		      SEC
    402  f193		       a5 8e		      LDA	Player0SpeedL
    403  f195		       f9 5c ff 	      SBC	TrafficSpeeds,Y
    404  f198		       85 b0		      STA	Tmp0
    405  f19a		       c8		      INY
    406  f19b		       a5 8f		      LDA	Player0SpeedH
    407  f19d		       f9 5c ff 	      SBC	TrafficSpeeds,Y
    408  f1a0		       85 b1		      STA	Tmp1
    409  f1a2		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    410  f1a4		       e9 00		      SBC	#0
    411  f1a6		       85 b2		      STA	Tmp2
    412  f1a8
    413  f1a8
    414  f1a8				   AddsTheResult
    415  f1a8		       18		      CLC
    416  f1a9		       a5 b0		      LDA	Tmp0
    417  f1ab		       75 90		      ADC	TrafficOffset0,X
    418  f1ad		       95 90		      STA	TrafficOffset0,X
    419  f1af		       e8		      INX
    420  f1b0		       a5 b1		      LDA	Tmp1
    421  f1b2		       75 90		      ADC	TrafficOffset0,X
    422  f1b4		       95 90		      STA	TrafficOffset0,X
    423  f1b6		       e8		      INX
    424  f1b7		       a5 b2		      LDA	Tmp2	; Carry
    425  f1b9		       75 90		      ADC	TrafficOffset0,X
    426  f1bb		       95 90		      STA	TrafficOffset0,X
    427  f1bd		       90 06		      BCC	CalculateOffsetCache
    428  f1bf		       e0 02		      CPX	#2	;MSB offset 0
    429  f1c1		       d0 02		      BNE	CalculateOffsetCache
    430  f1c3		       e6 bd		      INC	Traffic0Msb
    431  f1c5
    432  f1c5				   CalculateOffsetCache
    433  f1c5		       e8		      INX
    434  f1c6		       38		      SEC
    435  f1c7		       69 00		      ADC	#0	;Increment by one
    436  f1c9		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    437  f1cb
    438  f1cb				   PrepareNextUpdateLoop
    439  f1cb		       c8		      INY
    440  f1cc		       e8		      INX
    441  f1cd		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    442  f1cf		       d0 c1		      BNE	UpdateOffsets
    443  f1d1
    444  f1d1							;Until store the movemnt, LDX contains the value to be stored.
    445  f1d1				   TestCollision		;
    446  f1d1							; see if player0 colides with the rest
    447  f1d1		       a5 00		      LDA	CXM0P
    448  f1d3		       05 01		      ORA	CXM1P
    449  f1d5		       05 01		      ORA	CXM1P
    450  f1d7		       05 02		      ORA	CXP0FB
    451  f1d9		       05 07		      ORA	CXPPMM
    452  f1db		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    453  f1dd		       f0 1f		      BEQ	NoCollision	;skip if not hitting...
    454  f1df		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    455  f1e1		       d0 1b		      BNE	NoCollision
    456  f1e3		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    457  f1e5		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    458  f1e7		       f0 15		      BEQ	NoCollision
    459  f1e9		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    460  f1eb		       85 ba		      STA	CollisionCounter	;and store as colision.
    461  f1ed		       a9 10		      LDA	#COLLISION_SPEED_L	;
    462  f1ef		       c5 8e		      CMP	Player0SpeedL
    463  f1f1		       b0 02		      BCS	SkipSetColisionSpeed
    464  f1f3		       85 8e		      STA	Player0SpeedL
    465  f1f5				   SkipSetColisionSpeed
    466  f1f5		       a9 00		      LDA	#0
    467  f1f7		       85 8f		      STA	Player0SpeedH
    468  f1f9		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    469  f1fb		       4c 3b f2 	      JMP	StoreHMove	; We keep position consistent
    470  f1fe				   NoCollision
    471  f1fe
    472  f1fe				   DecrementCollision
    473  f1fe		       a4 ba		      LDY	CollisionCounter
    474  f200		       f0 07		      BEQ	FinishDecrementCollision
    475  f202		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    476  f204		       85 04		      STA	NUSIZ0
    477  f206		       88		      DEY
    478  f207		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    479  f209				   FinishDecrementCollision
    480  f209
    481  f209				   ResetPlayerSize
    482  f209		       d0 04		      BNE	FinishResetPlayerSize
    483  f20b		       a9 30		      LDA	#%00110000
    484  f20d		       85 04		      STA	NUSIZ0	;
    485  f20f				   FinishResetPlayerSize
    486  f20f
    487  f20f				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    488  f20f		       c0 01		      CPY	#1	; Last frame before reset
    489  f211		       d0 05		      BNE	SkipResetPlayerPosition
    490  f213		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    491  f215		       4c 3b f2 	      JMP	StoreHMove
    492  f218				   SkipResetPlayerPosition
    493  f218
    494  f218							; for left and right, we're gonna 
    495  f218							; set the horizontal speed, and then do
    496  f218							; a single HMOVE.  We'll use X to hold the
    497  f218							; horizontal speed, then store it in the 
    498  f218							; appropriate register
    499  f218				   PrepareReadXAxis
    500  f218		       a2 00		      LDX	#0
    501  f21a		       a4 bb		      LDY	Player0X
    502  f21c				   BeginReadLeft
    503  f21c		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    504  f21e		       a9 40		      LDA	#%01000000	;Left
    505  f220		       2c 80 02 	      BIT	SWCHA
    506  f223		       d0 07		      BNE	SkipMoveLeft
    507  f225		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    508  f227		       c6 bb		      DEC	Player0X
    509  f229		       4c 3b f2 	      JMP	StoreHMove	; Cannot move left and right...
    510  f22c				   SkipMoveLeft
    511  f22c				   BeginReadRight
    512  f22c		       c0 36		      CPY	#PLAYER_0_MAX_X
    513  f22e		       f0 0b		      BEQ	SkipMoveRight	; At max already
    514  f230		       a9 80		      LDA	#%10000000	;Right
    515  f232		       2c 80 02 	      BIT	SWCHA
    516  f235		       d0 04		      BNE	SkipMoveRight
    517  f237		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    518  f239		       e6 bb		      INC	Player0X
    519  f23b				   SkipMoveRight
    520  f23b				   StoreHMove
    521  f23b		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    522  f23d		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    523  f23f
    524  f23f
    525  f23f				   SkipUpdateLogic
    526  f23f				   ScoreBackgroundColor
    527  f23f		       a2 00		      LDX	#0
    528  f241		       ad 82 02 	      LDA	SWCHB
    529  f244		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    530  f246		       f0 04		      BEQ	BlackAndWhiteScoreBg
    531  f248		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    532  f24a		       a2 03		      LDX	#BACKGROUND_COLOR
    533  f24c				   BlackAndWhiteScoreBg
    534  f24c		       85 b2		      STA	Tmp2	; Score Background
    535  f24e		       86 b3		      STX	Tmp3	; Traffic Background
    536  f250
    537  f250				   ConfigurePFForScore
    538  f250							;LDA #SCORE_BACKGROUND_COLOR; Done above
    539  f250		       85 09		      STA	COLUBK
    540  f252		       a5 d5		      LDA	ScoreFontColor
    541  f254		       85 08		      STA	COLUPF
    542  f256		       20 eb f4 	      JSR	ClearAll
    543  f259		       a9 02		      LDA	#%00000010	; Score mode
    544  f25b		       85 0a		      STA	CTRLPF
    545  f25d		       a0 04		      LDY	#FONT_OFFSET
    546  f25f		       a2 00		      LDX	#0
    547  f261		       a5 8c		      LDA	FrameCount0	;3
    548  f263		       29 01		      AND	#%00000001	;2
    549  f265		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    550  f267				   LeftScoreOn
    551  f267		       a5 d5		      LDA	ScoreFontColor
    552  f269		       85 07		      STA	COLUP1
    553  f26b		       a5 b2		      LDA	Tmp2
    554  f26d		       85 06		      STA	COLUP0
    555  f26f		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    556  f271		       85 b1		      STA	Tmp1
    557  f273		       4c 82 f2 	      JMP	WaitForVblankEnd
    558  f276				   RightScoreOn
    559  f276		       a5 d5		      LDA	ScoreFontColor
    560  f278		       85 06		      STA	COLUP0
    561  f27a		       a5 b2		      LDA	Tmp2
    562  f27c		       85 07		      STA	COLUP1
    563  f27e		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    564  f280		       85 b1		      STA	Tmp1
    565  f282
    566  f282
    567  f282							; After here we are going to update the screen, No more heavy code
    568  f282				   WaitForVblankEnd
    569  f282		       ad 84 02 	      LDA	INTIM
    570  f285		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    571  f287							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    572  f287		       85 01		      STA	VBLANK
    573  f289
    574  f289				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    575  f289		       85 02		      STA	WSYNC
    576  f28b
    577  f28b		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    578  f28d		       85 0d		      STA	PF0	;3
    579  f28f
    580  f28f		       a5 82		      LDA	PF1Cache	;3
    581  f291		       85 0e		      STA	PF1	;3
    582  f293
    583  f293		       a5 83		      LDA	PF2Cache	;3
    584  f295		       85 0f		      STA	PF2	;3
    585  f297
    586  f297							;39
    587  f297				   DrawScore
    588  f297		       a6 d0		      LDX	ScoreD0	; 4
    589  f299		       bd 00 fd 	      LDA	Font,X	;4
    590  f29c		       85 81		      STA	PF0Cache	;3
    591  f29e		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    592  f2a0							;17
    593  f2a0
    594  f2a0		       a6 d1		      LDX	ScoreD1	; 4
    595  f2a2		       bd 00 fd 	      LDA	Font,X	;4
    596  f2a5		       0a		      ASL		;2
    597  f2a6		       0a		      ASL		;2
    598  f2a7		       0a		      ASL		;2
    599  f2a8		       0a		      ASL		;2
    600  f2a9		       85 82		      STA	PF1Cache	;3
    601  f2ab		       c6 d1		      DEC	ScoreD1	;6
    602  f2ad							;9 (After Wsync)
    603  f2ad
    604  f2ad		       a6 d2		      LDX	ScoreD2	; 4
    605  f2af		       bd 00 fd 	      LDA	Font,X	;4
    606  f2b2		       29 0f		      AND	#%00001111
    607  f2b4		       05 82		      ORA	PF1Cache	;3
    608  f2b6		       85 82		      STA	PF1Cache	;3
    609  f2b8		       c6 d2		      DEC	ScoreD2	;6
    610  f2ba							;20
    611  f2ba
    612  f2ba		       a6 d3		      LDX	ScoreD3	; 3
    613  f2bc		       bd 00 fd 	      LDA	Font,X	;4
    614  f2bf		       4a		      LSR		;2
    615  f2c0		       4a		      LSR		;2
    616  f2c1		       4a		      LSR		;2
    617  f2c2		       4a		      LSR		;2
    618  f2c3		       85 83		      STA	PF2Cache	;3
    619  f2c5		       c6 d3		      DEC	ScoreD3	;5
    620  f2c7							;23
    621  f2c7
    622  f2c7		       a6 d4		      LDX	ScoreD4	; 3
    623  f2c9		       bd 00 fd 	      LDA	Font,X	;4
    624  f2cc		       29 f0		      AND	#%11110000
    625  f2ce		       05 83		      ORA	PF2Cache	;3
    626  f2d0		       85 83		      STA	PF2Cache	;3
    627  f2d2		       c6 d4		      DEC	ScoreD4	;5
    628  f2d4							;18
    629  f2d4
    630  f2d4		       88		      DEY		;2
    631  f2d5		       10 b2		      BPL	ScoreLoop	;4
    632  f2d7
    633  f2d7		       85 02		      STA	WSYNC
    634  f2d9
    635  f2d9		       20 0c f5 	      JSR	LoadAll
    636  f2dc
    637  f2dc		       85 02		      STA	WSYNC
    638  f2de		       85 02		      STA	WSYNC
    639  f2e0
    640  f2e0				   PrepareForTraffic
    641  f2e0		       20 fd f4 	      JSR	ClearPF	; 32
    642  f2e3
    643  f2e3		       a9 31		      LDA	#%00110001	; Score mode
    644  f2e5		       85 0a		      STA	CTRLPF
    645  f2e7
    646  f2e7		       a5 c3		      LDA	TrafficColor	;2
    647  f2e9		       85 08		      STA	COLUPF
    648  f2eb
    649  f2eb		       a9 96		      LDA	#PLAYER1_COLOR	;2
    650  f2ed		       85 07		      STA	COLUP1	;3
    651  f2ef
    652  f2ef		       a5 d5		      LDA	ScoreFontColor	;3
    653  f2f1		       85 06		      STA	COLUP0	;3
    654  f2f3
    655  f2f3		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    656  f2f5
    657  f2f5		       a5 b3		      LDA	Tmp3	;3
      0  f2f7					      SLEEP	10	; Make it in the very end, so we have one more nice blue line
      1  f2f7				   .CYCLES    SET	10
      2  f2f7
      3  f2f7				  -	      IF	.CYCLES < 2
      4  f2f7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2f7				  -	      ERR
      6  f2f7					      ENDIF
      7  f2f7
      8  f2f7				  -	      IF	.CYCLES & 1
      9  f2f7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2f7				  -	      nop	0
     11  f2f7				  -	      ELSE
     12  f2f7				  -	      bit	VSYNC
     13  f2f7				  -	      ENDIF
     14  f2f7				  -.CYCLES    SET	.CYCLES - 3
     15  f2f7					      ENDIF
     16  f2f7
     17  f2f7					      REPEAT	.CYCLES / 2
     18  f2f7		       ea		      nop
     17  f2f7					      REPEND
     18  f2f8		       ea		      nop
     17  f2f8					      REPEND
     18  f2f9		       ea		      nop
     17  f2f9					      REPEND
     18  f2fa		       ea		      nop
     17  f2fa					      REPEND
     18  f2fb		       ea		      nop
     19  f2fc					      REPEND
    659  f2fc		       85 09		      STA	COLUBK	;3
    660  f2fe
    661  f2fe							;main scanline loop...
    662  f2fe				   ScanLoop
    663  f2fe		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    664  f300
    665  f300							;Start of next line!			
    666  f300				   DrawCache		;36 Is the last line going to the top of the next frame?
    667  f300
    668  f300		       b9 23 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    669  f303		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    670  f305
    671  f305		       a5 82		      LDA	PF1Cache	;3
    672  f307		       85 0e		      STA	PF1	;3
    673  f309
    674  f309		       a5 84		      LDA	GRP1Cache	;3
    675  f30b		       85 1c		      STA	GRP1	;3
    676  f30d
    677  f30d		       a5 85		      LDA	ENABLCache
    678  f30f		       85 1f		      STA	ENABL
    679  f311
    680  f311		       a5 86		      LDA	ENAM0Cache
    681  f313		       85 1d		      STA	ENAM0
    682  f315
    683  f315		       a5 87		      LDA	ENAM1Cache
    684  f317		       85 1e		      STA	ENAM1
    685  f319
    686  f319		       a9 00		      LDA	#0	;2
    687  f31b		       85 82		      STA	PF1Cache	;3
    688  f31d		       85 84		      STA	GRP1Cache	;3
    689  f31f		       85 85		      STA	ENABLCache	;3
    690  f321		       85 86		      STA	ENAM0Cache	;3
    691  f323		       85 87		      STA	ENAM1Cache	; 3
    692  f325
    693  f325							;BEQ DrawTraffic3
    694  f325				   DrawTraffic1 		; 33
    695  f325		       98		      TYA		; 2
    696  f326		       18		      CLC		; 2 
    697  f327		       65 95		      ADC	TrafficOffset1 + 1	;3
    698  f329		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    699  f32b		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    700  f32d		       45 96		      EOR	TrafficOffset1 + 2	; 3
    701  f32f		       4c 34 f3 	      JMP	AfterEorOffsetWithCarry	; 3
    702  f332				   EorOffsetWithCarry
    703  f332		       45 97		      EOR	TrafficOffset1 + 3	; 3
    704  f334				   AfterEorOffsetWithCarry		;17
    705  f334		       aa		      TAX		;2
    706  f335		       bd 00 fe 	      LDA	AesTable,X	; 4
    707  f338		       c5 c1		      CMP	TrafficChance	;3
    708  f33a		       b0 04		      BCS	FinishDrawTraffic1	; 2
    709  f33c		       a9 ff		      LDA	#$FF	;2
    710  f33e		       85 84		      STA	GRP1Cache	;3
    711  f340				   FinishDrawTraffic1
    712  f340
    713  f340				   DrawTraffic2 		; 35
    714  f340		       98		      TYA		; 2
    715  f341		       18		      CLC		; 2 
    716  f342		       65 99		      ADC	TrafficOffset2 + 1	;3
    717  f344		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    718  f346		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    719  f348		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    720  f34a		       4c 4f f3 	      JMP	AfterEorOffsetWithCarry2	; 3
    721  f34d				   EorOffsetWithCarry2
    722  f34d		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    723  f34f				   AfterEorOffsetWithCarry2		;17
    724  f34f		       aa		      TAX		;2
    725  f350		       bd 00 fe 	      LDA	AesTable,X	; 4
    726  f353		       c5 c1		      CMP	TrafficChance	;2
    727  f355		       b0 04		      BCS	FinishDrawTraffic2	; 2
    728  f357		       a9 02		      LDA	#%00000010	;2
    729  f359		       85 85		      STA	ENABLCache	;3
    730  f35b				   FinishDrawTraffic2
    731  f35b
    732  f35b							;STA WSYNC ;65 / 137
    733  f35b
    734  f35b							; LDA Tmp0 ; Flicker this line if drawing car
    735  f35b							; BEQ FinishDrawTraffic4
    736  f35b				   DrawTraffic3 		; 38
    737  f35b		       98		      TYA		; 2
    738  f35c		       18		      CLC		; 2 
    739  f35d		       65 9d		      ADC	TrafficOffset3 + 1	;3
    740  f35f		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    741  f361		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    742  f363		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    743  f365		       4c 6a f3 	      JMP	AfterEorOffsetWithCarry3	; 3
    744  f368				   EorOffsetWithCarry3
    745  f368		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    746  f36a				   AfterEorOffsetWithCarry3		;17
    747  f36a		       aa		      TAX		;2
    748  f36b		       bd 00 fe 	      LDA	AesTable,X	; 4
    749  f36e		       c5 c1		      CMP	TrafficChance	;2
    750  f370		       b0 04		      BCS	FinishDrawTraffic3	; 2 
    751  f372		       a9 02		      LDA	#%00000010	;2
    752  f374		       85 86		      STA	ENAM0Cache
    753  f376				   FinishDrawTraffic3
    754  f376
    755  f376				   DrawTraffic4 		; 35
    756  f376		       98		      TYA		; 2
    757  f377		       18		      CLC		; 2 
    758  f378		       65 a1		      ADC	TrafficOffset4 + 1	;3
    759  f37a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    760  f37c		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    761  f37e		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    762  f380		       4c 85 f3 	      JMP	AfterEorOffsetWithCarry4	; 3
    763  f383				   EorOffsetWithCarry4
    764  f383		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    765  f385				   AfterEorOffsetWithCarry4		;17
    766  f385		       aa		      TAX		;2
    767  f386		       bd 00 fe 	      LDA	AesTable,X	; 4
    768  f389		       c5 c1		      CMP	TrafficChance	;2
    769  f38b		       b0 04		      BCS	FinishDrawTraffic4	; 2
    770  f38d		       a9 02		      LDA	#%00000010	;2
    771  f38f		       85 87		      STA	ENAM1Cache
    772  f391				   FinishDrawTraffic4
    773  f391
    774  f391				   DrawTraffic0 		; 24
    775  f391		       98		      TYA		;2
    776  f392		       18		      CLC		;2
    777  f393		       65 91		      ADC	TrafficOffset0 + 1	; 3
    778  f395		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    779  f397		       f0 04		      BEQ	SkipDrawTraffic0	; 2
    780  f399		       a9 ff		      LDA	#$FF	; 2
    781  f39b		       85 82		      STA	PF1Cache
    782  f39d
    783  f39d				   SkipDrawTraffic0
    784  f39d
    785  f39d				   WhileScanLoop
    786  f39d		       88		      DEY		;2
    787  f39e		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    788  f3a0		       4c fe f2 	      JMP	ScanLoop	;3
    789  f3a3				   FinishScanLoop		; 7 209 of 222
    790  f3a3
    791  f3a3		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    792  f3a5		       20 0c f5 	      JSR	LoadAll
    793  f3a8		       85 02		      STA	WSYNC	; do stuff!
    794  f3aa		       85 02		      STA	WSYNC
    795  f3ac		       85 02		      STA	WSYNC
    796  f3ae							;42 cycles to use here
    797  f3ae
    798  f3ae				   PrepareOverscan
    799  f3ae		       a9 02		      LDA	#2
    800  f3b0		       85 02		      STA	WSYNC
    801  f3b2		       85 01		      STA	VBLANK
    802  f3b4
    803  f3b4		       a9 24		      LDA	#36	; one more line before overscan...
    804  f3b6		       8d 96 02 	      STA	TIM64T
    805  f3b9
    806  f3b9				   ProcessScoreFontColor
    807  f3b9		       a6 d6		      LDX	ScoreFontColorHoldChange
    808  f3bb		       f0 06		      BEQ	ResetScoreFontColor
    809  f3bd		       ca		      DEX
    810  f3be		       86 d6		      STX	ScoreFontColorHoldChange
    811  f3c0		       4c c7 f3 	      JMP	SkipScoreFontColor
    812  f3c3				   ResetScoreFontColor
    813  f3c3		       a9 f9		      LDA	#SCORE_FONT_COLOR
    814  f3c5		       85 d5		      STA	ScoreFontColor
    815  f3c7				   SkipScoreFontColor
    816  f3c7
    817  f3c7				   IsGameOver
    818  f3c7		       a5 bc		      LDA	CountdownTimer
    819  f3c9		       05 8e		      ORA	Player0SpeedL
    820  f3cb		       05 8f		      ORA	Player0SpeedH
    821  f3cd		       d0 0b		      BNE	IsCheckpoint
    822  f3cf		       a9 01		      LDA	#1
    823  f3d1		       85 d6		      STA	ScoreFontColorHoldChange
    824  f3d3		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    825  f3d5		       85 d5		      STA	ScoreFontColor
    826  f3d7		       4c 0c f4 	      JMP	SkipIsTimeOver
    827  f3da
    828  f3da				   IsCheckpoint
    829  f3da		       a5 d7		      LDA	NextCheckpoint
    830  f3dc		       c5 92		      CMP	TrafficOffset0 + 2
    831  f3de		       d0 20		      BNE	SkipIsCheckpoint
    832  f3e0		       18		      CLC
    833  f3e1		       69 10		      ADC	#CHECKPOINT_INTERVAL
    834  f3e3		       85 d7		      STA	NextCheckpoint
    835  f3e5		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    836  f3e7		       85 d5		      STA	ScoreFontColor
    837  f3e9		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    838  f3eb		       85 d6		      STA	ScoreFontColorHoldChange
    839  f3ed		       a5 bc		      LDA	CountdownTimer
    840  f3ef		       18		      CLC
    841  f3f0		       65 c2		      ADC	CheckpointTime
    842  f3f2		       85 bc		      STA	CountdownTimer
    843  f3f4		       90 04		      BCC	JumpSkipTimeOver
    844  f3f6		       a9 ff		      LDA	#$FF
    845  f3f8		       85 bc		      STA	CountdownTimer	; Does not overflow!
    846  f3fa				   JumpSkipTimeOver
    847  f3fa		       20 25 f5 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    848  f3fd		       4c 0c f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    849  f400				   SkipIsCheckpoint
    850  f400
    851  f400				   IsTimeOver
    852  f400		       a5 bc		      LDA	CountdownTimer
    853  f402		       d0 08		      BNE	SkipIsTimeOver
    854  f404		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    855  f406		       85 d6		      STA	ScoreFontColorHoldChange
    856  f408		       a9 30		      LDA	#SCORE_FONT_COLOR_BAD
    857  f40a		       85 d5		      STA	ScoreFontColor
    858  f40c				   SkipIsTimeOver
    859  f40c
    860  f40c							;Could be done during on vblank to save this comparisson time (before draw score), 
    861  f40c							;but I am saving vblank cycles for now, in case of 2 players.
    862  f40c				   ChooseSide		; 
    863  f40c		       a5 8c		      LDA	FrameCount0	;3
    864  f40e		       29 01		      AND	#%00000001	;2
    865  f410		       f0 66		      BEQ	RightScoreWrite	; Half of the screen with the correct colors.
    866  f412
    867  f412				   LeftScoreWrite
    868  f412		       a5 d5		      LDA	ScoreFontColor
    869  f414		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    870  f416		       f0 3b		      BEQ	PrintCheckpoint
    871  f418		       a5 c0		      LDA	GameStatus
    872  f41a		       f0 3f		      BEQ	PrintHellwayLeft
    873  f41c				   WriteDistance		;Not optimized yet, ugly code.
    874  f41c				   Digit0Distance
    875  f41c		       a5 91		      LDA	TrafficOffset0 + 1	;3
    876  f41e		       29 f0		      AND	#%11110000	;2
    877  f420		       4a		      LSR		; 2
    878  f421		       4a		      LSR		; 2
    879  f422		       4a		      LSR		; 2
    880  f423		       4a		      LSR		; 2
    881  f424		       aa		      TAX		; 2
    882  f425		       bd a0 fd 	      LDA	FontLookup,X	;4
    883  f428		       85 d3		      STA	ScoreD3	;3
    884  f42a
    885  f42a				   Digit1Distance
    886  f42a		       a5 92		      LDA	TrafficOffset0 + 2	;3
    887  f42c		       29 0f		      AND	#%00001111	;2
    888  f42e		       aa		      TAX		; 2
    889  f42f		       bd a0 fd 	      LDA	FontLookup,X	;4 
    890  f432		       85 d2		      STA	ScoreD2	;3
    891  f434
    892  f434				   Digit2Distance
    893  f434		       a5 92		      LDA	TrafficOffset0 + 2	;3
    894  f436		       29 f0		      AND	#%11110000	;2
    895  f438		       4a		      LSR		; 2
    896  f439		       4a		      LSR		; 2
    897  f43a		       4a		      LSR		; 2
    898  f43b		       4a		      LSR		; 2
    899  f43c		       aa		      TAX		; 2
    900  f43d		       bd a0 fd 	      LDA	FontLookup,X	;4
    901  f440		       85 d1		      STA	ScoreD1	;3
    902  f442
    903  f442				   Digit3Distance
    904  f442		       a5 bd		      LDA	Traffic0Msb	;3
    905  f444		       29 0f		      AND	#%00001111	;2
    906  f446		       aa		      TAX		; 2
    907  f447		       bd a0 fd 	      LDA	FontLookup,X	;4 
    908  f44a		       85 d0		      STA	ScoreD0	;3
    909  f44c
    910  f44c		       a9 90		      LDA	#<Pipe + #FONT_OFFSET	;3
    911  f44e		       85 d4		      STA	ScoreD4	;3
    912  f450				   EndDrawDistance
    913  f450		       4c e3 f4 	      JMP	RightScoreWriteEnd	;3
    914  f453
    915  f453				   PrintCheckpoint
    916  f453		       a2 00		      LDX	#<CheckpointText
    917  f455		       20 69 f5 	      JSR	PrintStaticText
    918  f458		       4c e3 f4 	      JMP	RightScoreWriteEnd	;3
    919  f45b
    920  f45b				   PrintHellwayLeft
    921  f45b		       a5 8d		      LDA	FrameCount1
    922  f45d		       29 01		      AND	#1
    923  f45f		       d0 05		      BNE	PrintCreditsLeft
    924  f461		       a2 05		      LDX	#<HellwayLeftText
    925  f463		       4c 68 f4 	      JMP	PrintGameMode
    926  f466				   PrintCreditsLeft
    927  f466		       a2 0f		      LDX	#<OpbText
    928  f468
    929  f468				   PrintGameMode
    930  f468		       20 69 f5 	      JSR	PrintStaticText
    931  f46b		       a5 c5		      LDA	GameMode
    932  f46d		       29 0f		      AND	#%00001111
    933  f46f		       aa		      TAX		; 2
    934  f470		       bd a0 fd 	      LDA	FontLookup,X	;4 
    935  f473		       85 d0		      STA	ScoreD0	;3
    936  f475		       4c e3 f4 	      JMP	RightScoreWriteEnd	;3
    937  f478
    938  f478				   RightScoreWrite
    939  f478		       a5 c0		      LDA	GameStatus
    940  f47a		       f0 46		      BEQ	PrintHellwayRight
    941  f47c		       a5 d5		      LDA	ScoreFontColor
    942  f47e		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    943  f480		       f0 53		      BEQ	PrintGameOver
    944  f482				   Digit0Timer
    945  f482		       a5 bc		      LDA	CountdownTimer	;3
    946  f484		       29 0f		      AND	#%00001111	;2
    947  f486		       aa		      TAX		; 2
    948  f487		       bd a0 fd 	      LDA	FontLookup,X	;4 
    949  f48a		       85 d1		      STA	ScoreD1	;3
    950  f48c
    951  f48c				   Digit1Timer
    952  f48c		       a5 bc		      LDA	CountdownTimer	;3
    953  f48e		       29 f0		      AND	#%11110000	;2
    954  f490		       4a		      LSR		; 2
    955  f491		       4a		      LSR		; 2
    956  f492		       4a		      LSR		; 2
    957  f493		       4a		      LSR		; 2
    958  f494		       aa		      TAX		; 2
    959  f495		       bd a0 fd 	      LDA	FontLookup,X	;4
    960  f498		       85 d0		      STA	ScoreD0	;3
    961  f49a
    962  f49a		       a9 90		      LDA	#<Pipe + #FONT_OFFSET	;3
    963  f49c		       85 d2		      STA	ScoreD2	;3
    964  f49e
    965  f49e				   Digit0Speed
    966  f49e		       a5 8e		      LDA	Player0SpeedL
    967  f4a0		       29 3c		      AND	#%00111100	;2 Discard the last bits
    968  f4a2		       4a		      LSR		; 2
    969  f4a3		       4a		      LSR		; 2
    970  f4a4		       aa		      TAX		; 2
    971  f4a5		       bd a0 fd 	      LDA	FontLookup,X	;4
    972  f4a8		       85 d4		      STA	ScoreD4	;3
    973  f4aa
    974  f4aa				   Digit1Speed
    975  f4aa		       a5 8e		      LDA	Player0SpeedL
    976  f4ac		       29 c0		      AND	#%11000000	;2 Discard the last bits
    977  f4ae		       2a		      ROL		;First goes into carry
    978  f4af		       2a		      ROL
    979  f4b0		       2a		      ROL
    980  f4b1		       85 b0		      STA	Tmp0
    981  f4b3		       a5 8f		      LDA	Player0SpeedH
    982  f4b5		       0a		      ASL
    983  f4b6		       0a		      ASL
    984  f4b7		       05 b0		      ORA	Tmp0
    985  f4b9		       aa		      TAX		; 2
    986  f4ba		       bd a0 fd 	      LDA	FontLookup,X	;4
    987  f4bd		       85 d3		      STA	ScoreD3	;3
    988  f4bf		       4c e3 f4 	      JMP	RightScoreWriteEnd
    989  f4c2
    990  f4c2				   PrintHellwayRight
    991  f4c2		       a5 8d		      LDA	FrameCount1
    992  f4c4		       29 01		      AND	#1
    993  f4c6		       d0 05		      BNE	PrintCreditsRight
    994  f4c8		       a2 0a		      LDX	#<HellwayRightText
    995  f4ca		       4c cf f4 	      JMP	PrintRightIntro
    996  f4cd				   PrintCreditsRight
    997  f4cd		       a2 14		      LDX	#<YearText
    998  f4cf				   PrintRightIntro
    999  f4cf		       20 69 f5 	      JSR	PrintStaticText
   1000  f4d2		       4c e3 f4 	      JMP	RightScoreWriteEnd
   1001  f4d5				   PrintGameOver
   1002  f4d5		       a5 8c		      LDA	FrameCount0
   1003  f4d7		       30 05		      BMI	PrintOverText
   1004  f4d9		       a2 19		      LDX	#<GameText
   1005  f4db		       4c e0 f4 	      JMP	StoreGameOverText
   1006  f4de				   PrintOverText
   1007  f4de		       a2 1e		      LDX	#<OverText
   1008  f4e0				   StoreGameOverText
   1009  f4e0		       20 69 f5 	      JSR	PrintStaticText
   1010  f4e3
   1011  f4e3				   RightScoreWriteEnd
   1012  f4e3
   1013  f4e3				   OverScanWait
   1014  f4e3		       ad 84 02 	      LDA	INTIM
   1015  f4e6		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1016  f4e8		       4c 92 f0 	      JMP	MainLoop
   1017  f4eb
   1018  f4eb				   Subroutines
   1019  f4eb
   1020  f4eb				   ClearAll		; 52
   1021  f4eb		       a9 00		      LDA	#0	;2
   1022  f4ed		       85 1c		      STA	GRP1	;3
   1023  f4ef		       85 1f		      STA	ENABL	;3
   1024  f4f1		       85 1d		      STA	ENAM0	;3
   1025  f4f3		       85 1e		      STA	ENAM1	;3
   1026  f4f5		       85 84		      STA	GRP1Cache	;3
   1027  f4f7		       85 85		      STA	ENABLCache	;3
   1028  f4f9		       85 86		      STA	ENAM0Cache	;3
   1029  f4fb		       85 87		      STA	ENAM1Cache	;3
   1030  f4fd
   1031  f4fd				   ClearPF		; 26
   1032  f4fd		       a9 00		      LDA	#0	;2
   1033  f4ff				   ClearPFSkipLDA0
   1034  f4ff		       85 0d		      STA	PF0	;3
   1035  f501		       85 0e		      STA	PF1	;3
   1036  f503		       85 0f		      STA	PF2	;3	
   1037  f505		       85 81		      STA	PF0Cache	;3
   1038  f507		       85 82		      STA	PF1Cache	;3
   1039  f509		       85 83		      STA	PF2Cache	;3 
   1040  f50b		       60		      RTS		;6
   1041  f50c				   EndClearAll
   1042  f50c
   1043  f50c				   LoadAll		; 36
   1044  f50c		       a5 81		      LDA	PF0Cache	;3
   1045  f50e		       85 0d		      STA	PF0	;3
   1046  f510
   1047  f510		       a5 82		      LDA	PF1Cache	;3
   1048  f512		       85 0e		      STA	PF1	;3
   1049  f514
   1050  f514		       a5 83		      LDA	PF2Cache	;3
   1051  f516		       85 0f		      STA	PF2	;3
   1052  f518
   1053  f518		       a5 84		      LDA	GRP1Cache	;3
   1054  f51a		       85 1c		      STA	GRP1	;3
   1055  f51c
   1056  f51c		       a5 85		      LDA	ENABLCache	;3
   1057  f51e		       85 1f		      STA	ENABL	;3
   1058  f520
   1059  f520		       a5 86		      LDA	ENAM0Cache
   1060  f522		       85 1d		      STA	ENAM0
   1061  f524
   1062  f524		       60		      RTS		;6
   1063  f525				   EndLoadAll
   1064  f525
   1065  f525				   NextDifficulty
   1066  f525		       a5 c5		      LDA	GameMode	; For now, only game zero changes the difficulty
   1067  f527		       d0 3f		      BNE	ReturnNextDifficulty
   1068  f529
   1069  f529		       a5 c4		      LDA	CurrentDifficulty
   1070  f52b		       18		      CLC
   1071  f52c		       69 01		      ADC	#1
   1072  f52e		       29 03		      AND	#%00000011	; 0 to 3
   1073  f530		       85 c4		      STA	CurrentDifficulty
   1074  f532
   1075  f532				   ConfigureDifficulty
   1076  f532		       a5 c4		      LDA	CurrentDifficulty
   1077  f534		       f0 0b		      BEQ	ConfigureLightTraffic
   1078  f536		       c9 01		      CMP	#1
   1079  f538		       f0 10		      BEQ	ConfigureRegularTraffic
   1080  f53a		       c9 02		      CMP	#2
   1081  f53c		       f0 15		      BEQ	ConfigureIntenseTraffic
   1082  f53e		       4c 5c f5 	      JMP	ConfigureRushHourTraffic
   1083  f541
   1084  f541				   ConfigureLightTraffic
   1085  f541		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1086  f543		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1087  f545		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1088  f547		       4c 62 f5 	      JMP	StoreTrafficChance
   1089  f54a				   ConfigureRegularTraffic
   1090  f54a		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1091  f54c		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1092  f54e		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1093  f550		       4c 62 f5 	      JMP	StoreTrafficChance
   1094  f553				   ConfigureIntenseTraffic
   1095  f553		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1096  f555		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1097  f557		       a9 f2		      LDA	#TRAFFIC_COLOR_INTENSE
   1098  f559		       4c 62 f5 	      JMP	StoreTrafficChance
   1099  f55c				   ConfigureRushHourTraffic
   1100  f55c		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1101  f55e		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1102  f560		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1103  f562
   1104  f562				   StoreTrafficChance
   1105  f562		       86 c1		      STX	TrafficChance
   1106  f564		       84 c2		      STY	CheckpointTime
   1107  f566		       85 c3		      STA	TrafficColor
   1108  f568				   ReturnNextDifficulty
   1109  f568		       60		      RTS
   1110  f569				   EndNextDifficulty
   1111  f569
   1112  f569				   PrintStaticText		; Preload X with the offset referent to StaticText
   1113  f569		       bd 00 ff 	      LDA	StaticText,X
   1114  f56c		       85 d0		      STA	ScoreD0
   1115  f56e		       e8		      INX
   1116  f56f		       bd 00 ff 	      LDA	StaticText,X
   1117  f572		       85 d1		      STA	ScoreD1
   1118  f574		       e8		      INX
   1119  f575		       bd 00 ff 	      LDA	StaticText,X
   1120  f578		       85 d2		      STA	ScoreD2
   1121  f57a		       e8		      INX
   1122  f57b		       bd 00 ff 	      LDA	StaticText,X
   1123  f57e		       85 d3		      STA	ScoreD3
   1124  f580		       e8		      INX
   1125  f581		       bd 00 ff 	      LDA	StaticText,X
   1126  f584		       85 d4		      STA	ScoreD4
   1127  f586		       60		      RTS
   1128  f587
   1129  f587							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   1130  fd00					      org	$FD00
   1131  fd00				   Font
   1132  fd00				   C0
   1133  fd00		       e7		      .byte.b	#%11100111	;
   1134  fd01		       a5		      .byte.b	#%10100101	; 
   1135  fd02		       a5		      .byte.b	#%10100101	; 
   1136  fd03		       a5		      .byte.b	#%10100101	; 
   1137  fd04		       e7		      .byte.b	#%11100111	;	
   1138  fd05				   C1
   1139  fd05		       e7		      .byte.b	#%11100111	;
   1140  fd06		       42		      .byte.b	#%01000010	; 
   1141  fd07		       42		      .byte.b	#%01000010	; 
   1142  fd08		       42		      .byte.b	#%01000010	; 
   1143  fd09		       66		      .byte.b	#%01100110	;
   1144  fd0a				   C2
   1145  fd0a		       e7		      .byte.b	#%11100111	;
   1146  fd0b		       24		      .byte.b	#%00100100	; 
   1147  fd0c		       e7		      .byte.b	#%11100111	; 
   1148  fd0d		       81		      .byte.b	#%10000001	; 
   1149  fd0e		       e7		      .byte.b	#%11100111	;
   1150  fd0f				   C3
   1151  fd0f		       e7		      .byte.b	#%11100111	;
   1152  fd10		       81		      .byte.b	#%10000001	; 
   1153  fd11		       e7		      .byte.b	#%11100111	; 
   1154  fd12		       81		      .byte.b	#%10000001	; 
   1155  fd13		       e7		      .byte.b	#%11100111	;
   1156  fd14				   C4
   1157  fd14		       81		      .byte.b	#%10000001	;
   1158  fd15		       81		      .byte.b	#%10000001	; 
   1159  fd16		       e7		      .byte.b	#%11100111	; 
   1160  fd17		       a5		      .byte.b	#%10100101	; 
   1161  fd18		       a5		      .byte.b	#%10100101	;
   1162  fd19				   C5
   1163  fd19		       e7		      .byte.b	#%11100111	;
   1164  fd1a		       81		      .byte.b	#%10000001	; 
   1165  fd1b		       e7		      .byte.b	#%11100111	; 
   1166  fd1c		       24		      .byte.b	#%00100100	; 
   1167  fd1d		       e7		      .byte.b	#%11100111	;
   1168  fd1e				   C6
   1169  fd1e		       e7		      .byte.b	#%11100111	;
   1170  fd1f		       a5		      .byte.b	#%10100101	; 
   1171  fd20		       e7		      .byte.b	#%11100111	; 
   1172  fd21		       24		      .byte.b	#%00100100	; 
   1173  fd22		       e7		      .byte.b	#%11100111	;
   1174  fd23				   C7
   1175  fd23		       81		      .byte.b	#%10000001	;
   1176  fd24		       81		      .byte.b	#%10000001	; 
   1177  fd25		       81		      .byte.b	#%10000001	; 
   1178  fd26		       81		      .byte.b	#%10000001	; 
   1179  fd27		       e7		      .byte.b	#%11100111	;
   1180  fd28				   C8
   1181  fd28		       e7		      .byte.b	#%11100111	;
   1182  fd29		       a5		      .byte.b	#%10100101	; 
   1183  fd2a		       e7		      .byte.b	#%11100111	; 
   1184  fd2b		       a5		      .byte.b	#%10100101	; 
   1185  fd2c		       e7		      .byte.b	#%11100111	;
   1186  fd2d				   C9
   1187  fd2d		       e7		      .byte.b	#%11100111	;
   1188  fd2e		       81		      .byte.b	#%10000001	; 
   1189  fd2f		       e7		      .byte.b	#%11100111	; 
   1190  fd30		       a5		      .byte.b	#%10100101	; 
   1191  fd31		       e7		      .byte.b	#%11100111	;
   1192  fd32				   CA
   1193  fd32		       a5		      .byte.b	#%10100101	;
   1194  fd33		       a5		      .byte.b	#%10100101	; 
   1195  fd34		       e7		      .byte.b	#%11100111	; 
   1196  fd35		       a5		      .byte.b	#%10100101	; 
   1197  fd36		       e7		      .byte.b	#%11100111	;
   1198  fd37				   CB
   1199  fd37		       66		      .byte.b	#%01100110	;
   1200  fd38		       a5		      .byte.b	#%10100101	; 
   1201  fd39		       66		      .byte.b	#%01100110	; 
   1202  fd3a		       a5		      .byte.b	#%10100101	;
   1203  fd3b		       66		      .byte.b	#%01100110	;
   1204  fd3c				   CC
   1205  fd3c		       e7		      .byte.b	#%11100111	;
   1206  fd3d		       24		      .byte.b	#%00100100	; 
   1207  fd3e		       24		      .byte.b	#%00100100	; 
   1208  fd3f		       24		      .byte.b	#%00100100	;
   1209  fd40		       e7		      .byte.b	#%11100111	;
   1210  fd41
   1211  fd41				   CD
   1212  fd41		       66		      .byte.b	#%01100110	;
   1213  fd42		       a5		      .byte.b	#%10100101	; 
   1214  fd43		       a5		      .byte.b	#%10100101	; 
   1215  fd44		       a5		      .byte.b	#%10100101	;
   1216  fd45		       66		      .byte.b	#%01100110	;
   1217  fd46
   1218  fd46				   CE
   1219  fd46		       e7		      .byte.b	#%11100111	;
   1220  fd47		       24		      .byte.b	#%00100100	; 
   1221  fd48		       e7		      .byte.b	#%11100111	; 
   1222  fd49		       24		      .byte.b	#%00100100	; 
   1223  fd4a		       e7		      .byte.b	#%11100111	;
   1224  fd4b
   1225  fd4b				   CF
   1226  fd4b		       24		      .byte.b	#%00100100	;
   1227  fd4c		       24		      .byte.b	#%00100100	; 
   1228  fd4d		       e7		      .byte.b	#%11100111	; 
   1229  fd4e		       24		      .byte.b	#%00100100	; 
   1230  fd4f		       e7		      .byte.b	#%11100111	;
   1231  fd50
   1232  fd50				   CG
   1233  fd50		       c3		      .byte.b	#%11000011	;
   1234  fd51		       a5		      .byte.b	#%10100101	; 
   1235  fd52		       a5		      .byte.b	#%10100101	; 
   1236  fd53		       24		      .byte.b	#%00100100	; 
   1237  fd54		       c3		      .byte.b	#%11000011	;	
   1238  fd55
   1239  fd55				   CL
   1240  fd55		       e7		      .byte.b	#%11100111	;
   1241  fd56		       24		      .byte.b	#%00100100	; 
   1242  fd57		       24		      .byte.b	#%00100100	; 
   1243  fd58		       24		      .byte.b	#%00100100	; 
   1244  fd59		       24		      .byte.b	#%00100100	;
   1245  fd5a
   1246  fd5a
   1247  fd5a				   CH
   1248  fd5a		       a5		      .byte.b	#%10100101	;
   1249  fd5b		       a5		      .byte.b	#%10100101	; 
   1250  fd5c		       e7		      .byte.b	#%11100111	; 
   1251  fd5d		       a5		      .byte.b	#%10100101	; 
   1252  fd5e		       a5		      .byte.b	#%10100101	;
   1253  fd5f
   1254  fd5f				   CM
   1255  fd5f		       a5		      .byte.b	#%10100101	;
   1256  fd60		       a5		      .byte.b	#%10100101	; 
   1257  fd61		       a5		      .byte.b	#%10100101	; 
   1258  fd62		       e7		      .byte.b	#%11100111	; 
   1259  fd63		       a5		      .byte.b	#%10100101	;
   1260  fd64
   1261  fd64
   1262  fd64				   CO
   1263  fd64		       42		      .byte.b	#%01000010	;
   1264  fd65		       a5		      .byte.b	#%10100101	; 
   1265  fd66		       a5		      .byte.b	#%10100101	; 
   1266  fd67		       a5		      .byte.b	#%10100101	; 
   1267  fd68		       42		      .byte.b	#%01000010	;	
   1268  fd69
   1269  fd69				   CP
   1270  fd69		       24		      .byte.b	#%00100100	;
   1271  fd6a		       24		      .byte.b	#%00100100	; 
   1272  fd6b		       e7		      .byte.b	#%11100111	; 
   1273  fd6c		       a5		      .byte.b	#%10100101	; 
   1274  fd6d		       e7		      .byte.b	#%11100111	;
   1275  fd6e
   1276  fd6e				   CR
   1277  fd6e		       a5		      .byte.b	#%10100101	;
   1278  fd6f		       a5		      .byte.b	#%10100101	; 
   1279  fd70		       66		      .byte.b	#%01100110	; 
   1280  fd71		       a5		      .byte.b	#%10100101	; 
   1281  fd72		       66		      .byte.b	#%01100110	;
   1282  fd73
   1283  fd73				   CS
   1284  fd73		       66		      .byte.b	#%01100110	;
   1285  fd74		       81		      .byte.b	#%10000001	; 
   1286  fd75		       42		      .byte.b	#%01000010	; 
   1287  fd76		       24		      .byte.b	#%00100100	; 
   1288  fd77		       c3		      .byte.b	#%11000011	;
   1289  fd78
   1290  fd78				   CT
   1291  fd78		       42		      .byte.b	#%01000010	;
   1292  fd79		       42		      .byte.b	#%01000010	; 
   1293  fd7a		       42		      .byte.b	#%01000010	; 
   1294  fd7b		       42		      .byte.b	#%01000010	; 
   1295  fd7c		       e7		      .byte.b	#%11100111	;
   1296  fd7d
   1297  fd7d				   CV
   1298  fd7d		       42		      .byte.b	#%01000010	;
   1299  fd7e		       a5		      .byte.b	#%10100101	; 
   1300  fd7f		       a5		      .byte.b	#%10100101	; 
   1301  fd80		       a5		      .byte.b	#%10100101	; 
   1302  fd81		       a5		      .byte.b	#%10100101	;	
   1303  fd82
   1304  fd82				   CY
   1305  fd82		       42		      .byte.b	#%01000010	;
   1306  fd83		       42		      .byte.b	#%01000010	; 
   1307  fd84		       42		      .byte.b	#%01000010	; 
   1308  fd85		       a5		      .byte.b	#%10100101	; 
   1309  fd86		       a5		      .byte.b	#%10100101	;
   1310  fd87
   1311  fd87				   CW
   1312  fd87		       a5		      .byte.b	#%10100101	;
   1313  fd88		       e7		      .byte.b	#%11100111	; 
   1314  fd89		       a5		      .byte.b	#%10100101	; 
   1315  fd8a		       a5		      .byte.b	#%10100101	; 
   1316  fd8b		       a5		      .byte.b	#%10100101	;
   1317  fd8c
   1318  fd8c				   Pipe
   1319  fd8c		       42		      .byte.b	#%01000010	;
   1320  fd8d		       00		      .byte.b	#%00000000	; 
   1321  fd8e		       42		      .byte.b	#%01000010	; 
   1322  fd8f		       00		      .byte.b	#%00000000	; 
   1323  fd90		       42		      .byte.b	#%01000010	;
   1324  fd91
   1325  fd91				   Exclamation
   1326  fd91		       42		      .byte.b	#%01000010	;
   1327  fd92		       00		      .byte.b	#%00000000	; 
   1328  fd93		       42		      .byte.b	#%01000010	; 
   1329  fd94		       42		      .byte.b	#%01000010	; 
   1330  fd95		       42		      .byte.b	#%01000010	;
   1331  fd96
   1332  fd96				   Dot
   1333  fd96		       42		      .byte.b	#%01000010	;
   1334  fd97		       42		      .byte.b	#%01000010	; 
   1335  fd98		       00		      .byte.b	#%00000000	; 
   1336  fd99		       00		      .byte.b	#%00000000	; 
   1337  fd9a		       00		      .byte.b	#%00000000	;
   1338  fd9b
   1339  fd9b				   Space		; Moved from the beggining so 0 to F is fast to draw.
   1340  fd9b		       00		      .byte.b	#0	;
   1341  fd9c		       00		      .byte.b	#0	;
   1342  fd9d		       00		      .byte.b	#0	;
   1343  fd9e		       00		      .byte.b	#0	;
   1344  fd9f		       00		      .byte.b	#0	;
   1345  fda0
   1346  fda0				   FontLookup		; Very fast font lookup for dynamic values!
   1347  fda0		       04		      .byte.b	#<C0 + #FONT_OFFSET
   1348  fda1		       09		      .byte.b	#<C1 + #FONT_OFFSET
   1349  fda2		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1350  fda3		       13		      .byte.b	#<C3 + #FONT_OFFSET
   1351  fda4		       18		      .byte.b	#<C4 + #FONT_OFFSET
   1352  fda5		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   1353  fda6		       22		      .byte.b	#<C6 + #FONT_OFFSET
   1354  fda7		       27		      .byte.b	#<C7 + #FONT_OFFSET
   1355  fda8		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   1356  fda9		       31		      .byte.b	#<C9 + #FONT_OFFSET
   1357  fdaa		       36		      .byte.b	#<CA + #FONT_OFFSET
   1358  fdab		       3b		      .byte.b	#<CB + #FONT_OFFSET
   1359  fdac		       40		      .byte.b	#<CC + #FONT_OFFSET
   1360  fdad		       45		      .byte.b	#<CD + #FONT_OFFSET
   1361  fdae		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1362  fdaf		       4f		      .byte.b	#<CF + #FONT_OFFSET
   1363  fdb0
   1364  fe00					      org	$FE00
   1365  fe00				   AesTable
   1366  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   1367  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   1368  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   1369  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   1370  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   1371  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   1372  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   1373  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   1374  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   1375  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   1376  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   1377  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   1378  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   1379  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   1380  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   1381  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   1382  ff00
   1383  ff00							; From FF00 to FFFB (122 bytes) to use here
   1384  ff00
   1385  ff00				   StaticText		; All static text must be on the same MSB block. 
   1386  ff00				   CheckpointText		; Only the LSB, which is the offset.
   1387  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   1388  ff01		       5e		      .byte.b	#<CH + #FONT_OFFSET
   1389  ff02		       6d		      .byte.b	#<CP + #FONT_OFFSET
   1390  ff03		       7c		      .byte.b	#<CT + #FONT_OFFSET
   1391  ff04		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1392  ff05
   1393  ff05				   HellwayLeftText
   1394  ff05		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1395  ff06		       90		      .byte.b	#<Pipe + #FONT_OFFSET
   1396  ff07		       5e		      .byte.b	#<CH + #FONT_OFFSET
   1397  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1398  ff09		       59		      .byte.b	#<CL + #FONT_OFFSET
   1399  ff0a
   1400  ff0a				   HellwayRightText
   1401  ff0a		       59		      .byte.b	#<CL + #FONT_OFFSET
   1402  ff0b		       8b		      .byte.b	#<CW + #FONT_OFFSET
   1403  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   1404  ff0d		       86		      .byte.b	#<CY + #FONT_OFFSET
   1405  ff0e		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1406  ff0f
   1407  ff0f				   OpbText
   1408  ff0f		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1409  ff10		       90		      .byte.b	#<Pipe + #FONT_OFFSET
   1410  ff11		       68		      .byte.b	#<CO + #FONT_OFFSET
   1411  ff12		       6d		      .byte.b	#<CP + #FONT_OFFSET
   1412  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   1413  ff14
   1414  ff14				   YearText
   1415  ff14		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1416  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1417  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   1418  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1419  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   1420  ff19
   1421  ff19				   GameText
   1422  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   1423  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   1424  ff1b		       63		      .byte.b	#<CM + #FONT_OFFSET
   1425  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1426  ff1d		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1427  ff1e
   1428  ff1e				   OverText
   1429  ff1e		       68		      .byte.b	#<CO + #FONT_OFFSET
   1430  ff1f		       81		      .byte.b	#<CV + #FONT_OFFSET
   1431  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1432  ff21		       72		      .byte.b	#<CR + #FONT_OFFSET
   1433  ff22		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1434  ff23
   1435  ff23				   EndStaticText
   1436  ff23
   1437  ff23				   CarSprite		; Upside down
   1438  ff23		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   1439  ff24		       7e		      .byte.b	#%01111110
   1440  ff25		       24		      .byte.b	#%00100100
   1441  ff26		       bd		      .byte.b	#%10111101
   1442  ff27		       3c		      .byte.b	#%00111100
   1443  ff28		       bd		      .byte.b	#%10111101
   1444  ff29		       3c		      .byte.b	#%00111100
   1445  ff2a		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
   1446  ff5c
   1447  ff5c
   1448  ff5c				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
   1449  ff5c		       00		      .byte.b	#$00	;  Trafic0 L
   1450  ff5d		       00		      .byte.b	#$00	;  Trafic0 H
   1451  ff5e		       0a		      .byte.b	#$0A	;  Trafic1 L
   1452  ff5f		       01		      .byte.b	#$01	;  Trafic1 H
   1453  ff60		       e6		      .byte.b	#$E6	;  Trafic2 L
   1454  ff61		       00		      .byte.b	#$00	;  Trafic2 H
   1455  ff62		       c2		      .byte.b	#$C2	;  Trafic3 L
   1456  ff63		       00		      .byte.b	#$00	;  Trafic3 H
   1457  ff64		       9e		      .byte.b	#$9E	;  Trafic4 L
   1458  ff65		       00		      .byte.b	#$00	;  Trafic4 H
   1459  ff66
   1460  fffc					      org	$FFFC
   1461  fffc		       00 f0		      .word.w	BeforeStart
   1462  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
