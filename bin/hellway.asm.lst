------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     13  f000		       00 4a	   COLLISION_SPEED_L =	$4A	;
     14  f000
     15  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     16  f000							;16 bit precision
     17  f000							;640 max speed!
     18  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     19  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     20  f000		       00 00	   CAR_MIN_SPEED_H =	0
     21  f000		       00 00	   CAR_MIN_SPEED_L =	0
     22  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     23  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     24  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     25  f000		       00 01	   ACCELERATE_SPEED =	1
     26  f000		       00 06	   BREAK_SPEED =	6
     27  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     28  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000	;Min car size... Maybe make different per track
     29  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     30  f000
     31  f000		       00 34	   TRAFFIC_COLOR =	$34
     32  f000		       00 81	   SCORE_BACKGROUND_COLOR =	$81
     33  f000		       00 0f	   SCORE_FONT_COLOR =	$0F
     34  f000
     35  f000
     36  f000		       00 80	   GRP0Cache  =	$80
     37  f000		       00 81	   PF0Cache   =	$81
     38  f000		       00 82	   PF1Cache   =	$82
     39  f000		       00 83	   PF2Cache   =	$83
     40  f000
     41  f000		       00 86	   FrameCount0 =	$86	;
     42  f000		       00 87	   FrameCount1 =	$87	;
     43  f000
     44  f000		       00 88	   Car0SpeedL =	$88
     45  f000		       00 89	   Car0SpeedH =	$89
     46  f000
     47  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     48  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     49  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     50  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     51  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     52  f000
     53  f000							;Temporary variables, multiple uses
     54  f000		       00 b0	   Tmp0       =	$B0
     55  f000		       00 b1	   Tmp1       =	$B1
     56  f000		       00 b2	   Tmp2       =	$B2
     57  f000
     58  f000		       00 ba	   CollisionCounter =	$BA
     59  f000
     60  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     61  f000
     62  f000		       00 d0	   ScoreD0    =	$D0
     63  f000		       00 d1	   ScoreD1    =	$D1
     64  f000		       00 d2	   ScoreD2    =	$D2
     65  f000		       00 d3	   ScoreD3    =	$D3
     66  f000		       00 d4	   ScoreD4    =	$D4
     67  f000		       00 d5	   ScoreD5    =	$D5
     68  f000		       00 d6	   ScoreD6    =	$D6
     69  f000		       00 d7	   ScoreD7    =	$D7
     70  f000		       00 d8	   ScoreD8    =	$D8
     71  f000		       00 d9	   ScoreD9    =	$D9
     72  f000
     73  f000							;generic start up stuff, put zero in all...
     74  f000				   Start
     75  f000		       78		      SEI
     76  f001		       d8		      CLD
     77  f002		       a2 ff		      LDX	#$FF
     78  f004		       9a		      TXS
     79  f005		       a9 00		      LDA	#0
     80  f007				   ClearMem
     81  f007		       95 00		      STA	0,X
     82  f009		       ca		      DEX
     83  f00a		       d0 fb		      BNE	ClearMem
     84  f00c
     85  f00c							;Setting some variables...
     86  f00c
     87  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     88  f00e		       85 06		      STA	COLUP0
     89  f010
     90  f010		       a9 85		      LDA	#PLAYER_2_COLOR
     91  f012		       85 07		      STA	COLUP1
     92  f014
     93  f014							;Loop ?
     94  f014		       a9 20		      LDA	#$20
     95  f016		       85 96		      STA	TrafficOffset1 + 2
     96  f018		       a9 40		      LDA	#$40
     97  f01a		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
     98  f01c		       a9 60		      LDA	#$60
     99  f01e		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
    100  f020		       a9 80		      LDA	#$80
    101  f022		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
    102  f024		       a9 a0		      LDA	#$A0
    103  f026
    104  f026		       ad 41 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    105  f029		       85 88		      STA	Car0SpeedL
    106  f02b
    107  f02b
    108  f02b							;VSYNC time
    109  f02b				   MainLoop
    110  f02b		       a9 02		      LDA	#2
    111  f02d		       85 00		      STA	VSYNC
    112  f02f		       85 02		      STA	WSYNC
    113  f031		       85 02		      STA	WSYNC
    114  f033							;Cool, can put code here! It removed the black line on top
    115  f033							;Make Objects move in the X axys
    116  f033		       85 2a		      STA	HMOVE	;2
    117  f035							;This must be done after a WSync, otherwise it is impossible to predict the X position
    118  f035		       a5 c0		      LDA	GameStatus	;3
    119  f037		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    120  f039		       f0 10		      BEQ	DoNotSetPlayerX	;3
    121  f03b							;Do something better with this 32 cycles
      0  f03b					      SLEEP	27	; Maybe fine position with hmove...
      1  f03b				   .CYCLES    SET	27
      2  f03b
      3  f03b				  -	      IF	.CYCLES < 2
      4  f03b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f03b				  -	      ERR
      6  f03b					      ENDIF
      7  f03b
      8  f03b					      IF	.CYCLES & 1
      9  f03b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f03b				  -	      nop	0
     11  f03b					      ELSE
     12  f03b		       24 00		      bit	VSYNC
     13  f03d					      ENDIF
     14  f03d				   .CYCLES    SET	.CYCLES - 3
     15  f03d					      ENDIF
     16  f03d
     17  f03d					      REPEAT	.CYCLES / 2
     18  f03d		       ea		      nop
     17  f03d					      REPEND
     18  f03e		       ea		      nop
     17  f03e					      REPEND
     18  f03f		       ea		      nop
     17  f03f					      REPEND
     18  f040		       ea		      nop
     17  f040					      REPEND
     18  f041		       ea		      nop
     17  f041					      REPEND
     18  f042		       ea		      nop
     17  f042					      REPEND
     18  f043		       ea		      nop
     17  f043					      REPEND
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     17  f047					      REPEND
     18  f048		       ea		      nop
     19  f049					      REPEND
    123  f049		       85 10		      STA	RESP0	;3
    124  f04b
    125  f04b				   DoNotSetPlayerX
    126  f04b
    127  f04b		       85 02		      STA	WSYNC
    128  f04d		       a9 2b		      LDA	#43	; We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    129  f04f		       8d 96 02 	      STA	TIM64T
    130  f052		       a9 00		      LDA	#0
    131  f054		       85 00		      STA	VSYNC
    132  f056
    133  f056							;Read Fire Button before, will make it start the game for now.
    134  f056		       a5 0c		      LDA	INPT4
    135  f058		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    136  f05a		       a5 c0		      LDA	GameStatus
    137  f05c		       09 80		      ORA	#%10000000
    138  f05e		       85 c0		      STA	GameStatus
    139  f060				   SkipGameStart
    140  f060
    141  f060				   CountFrame
    142  f060		       e6 86		      INC	FrameCount0	; Used to alternate lines
    143  f062		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    144  f064		       e6 87		      INC	FrameCount1	; Still not used
    145  f066				   SkipIncFC1
    146  f066
    147  f066				   UpdateCounters4		; Every 4 frames (66.6) ms update counters (times might be off by 66 ms) 
    148  f066		       a5 86		      LDA	FrameCount0
    149  f068		       29 03		      AND	#%00000011
    150  f06a		       f0 04		      BEQ	SkipUpdateCounters4
    151  f06c		       c5 ba		      CMP	CollisionCounter
    152  f06e		       f0 00		      BEQ	SkipCollisionCounter
    153  f070				   SkipCollisionCounter
    154  f070				   SkipUpdateCounters4
    155  f070
    156  f070							;Does not update the game if not running
    157  f070		       a5 c0		      LDA	GameStatus	;3
    158  f072		       49 80		      EOR	#%10000000	;2 game is running...
    159  f074		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    160  f076		       4c 3b f1 	      JMP	SkipUpdateLogic
    161  f079
    162  f079				   ContinueWithGameLogic
    163  f079
    164  f079							; for left and right, we're gonna 
    165  f079							; set the horizontal speed, and then do
    166  f079							; a single HMOVE.  We'll use X to hold the
    167  f079							; horizontal speed, then store it in the 
    168  f079							; appropriate register
    169  f079
    170  f079							;assum horiz speed will be zero
    171  f079
    172  f079							;Begin read dpad
    173  f079		       a2 00		      LDX	#0
    174  f07b
    175  f07b		       a9 40		      LDA	#%01000000	;Left
    176  f07d		       2c 80 02 	      BIT	SWCHA
    177  f080		       d0 02		      BNE	SkipMoveLeft
    178  f082		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    179  f084				   SkipMoveLeft
    180  f084
    181  f084		       a9 80		      LDA	#%10000000	;Right
    182  f086		       2c 80 02 	      BIT	SWCHA
    183  f089		       d0 02		      BNE	SkipMoveRight
    184  f08b		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    185  f08d				   SkipMoveRight
    186  f08d
    187  f08d		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    188  f08f
    189  f08f
    190  f08f							;Acelerates / breaks the car
    191  f08f		       a9 10		      LDA	#%00010000	;UP in controller
    192  f091		       2c 80 02 	      BIT	SWCHA
    193  f094		       d0 21		      BNE	SkipAccelerate
    194  f096
    195  f096							;Adds speed
    196  f096		       18		      CLC
    197  f097		       a5 88		      LDA	Car0SpeedL
    198  f099		       69 01		      ADC	#ACCELERATE_SPEED
    199  f09b		       85 88		      STA	Car0SpeedL
    200  f09d		       a5 89		      LDA	Car0SpeedH
    201  f09f		       69 00		      ADC	#0
    202  f0a1		       85 89		      STA	Car0SpeedH
    203  f0a3
    204  f0a3							;Checks if already max
    205  f0a3		       c9 02		      CMP	#CAR_MAX_SPEED_H
    206  f0a5		       90 10		      BCC	SkipAccelerate	; less than my max speed
    207  f0a7		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    208  f0a9							;High bit is max, compare the low
    209  f0a9		       a5 88		      LDA	Car0SpeedL
    210  f0ab		       c9 80		      CMP	#CAR_MAX_SPEED_L
    211  f0ad		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    212  f0af							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    213  f0af
    214  f0af				   ResetToMaxSpeed		; Speed is more, or is already max
    215  f0af		       a9 02		      LDA	#CAR_MAX_SPEED_H
    216  f0b1		       85 89		      STA	Car0SpeedH
    217  f0b3		       a9 80		      LDA	#CAR_MAX_SPEED_L
    218  f0b5		       85 88		      STA	Car0SpeedL
    219  f0b7
    220  f0b7				   SkipAccelerate
    221  f0b7
    222  f0b7				   Break
    223  f0b7		       a9 20		      LDA	#%00100000	;Down in controller
    224  f0b9		       2c 80 02 	      BIT	SWCHA
    225  f0bc		       d0 26		      BNE	SkipBreak
    226  f0be
    227  f0be							;Decrease speed
    228  f0be		       38		      SEC
    229  f0bf		       a5 88		      LDA	Car0SpeedL
    230  f0c1		       e9 06		      SBC	#BREAK_SPEED
    231  f0c3		       85 88		      STA	Car0SpeedL
    232  f0c5		       a5 89		      LDA	Car0SpeedH
    233  f0c7		       e9 00		      SBC	#0
    234  f0c9		       85 89		      STA	Car0SpeedH
    235  f0cb
    236  f0cb							;Checks if is min speed
    237  f0cb		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    238  f0cd		       c9 00		      CMP	#CAR_MIN_SPEED_H
    239  f0cf		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    240  f0d1		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    241  f0d3
    242  f0d3				   CompareLBreakSpeed
    243  f0d3		       a5 88		      LDA	Car0SpeedL
    244  f0d5		       c9 00		      CMP	#CAR_MIN_SPEED_L
    245  f0d7		       90 03		      BCC	ResetMinSpeed	; Less than memory
    246  f0d9		       4c e4 f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    247  f0dc
    248  f0dc				   ResetMinSpeed
    249  f0dc		       a9 00		      LDA	#CAR_MIN_SPEED_H
    250  f0de		       85 89		      STA	Car0SpeedH
    251  f0e0		       a9 00		      LDA	#CAR_MIN_SPEED_L
    252  f0e2		       85 88		      STA	Car0SpeedL
    253  f0e4				   SkipBreak
    254  f0e4
    255  f0e4							;Updates all offsets 24 bits
    256  f0e4		       a2 00		      LDX	#0	; Memory Offset 24 bit
    257  f0e6		       a0 00		      LDY	#0	; Line Speeds 16 bits
    258  f0e8				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    259  f0e8		       38		      SEC
    260  f0e9		       a5 88		      LDA	Car0SpeedL
    261  f0eb		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    262  f0ee		       85 b0		      STA	Tmp0
    263  f0f0		       c8		      INY
    264  f0f1		       a5 89		      LDA	Car0SpeedH
    265  f0f3		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    266  f0f6		       85 b1		      STA	Tmp1
    267  f0f8		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    268  f0fa		       e9 00		      SBC	#0
    269  f0fc		       85 b2		      STA	Tmp2
    270  f0fe
    271  f0fe
    272  f0fe							;Adds the result
    273  f0fe		       18		      CLC
    274  f0ff		       a5 b0		      LDA	Tmp0
    275  f101		       75 90		      ADC	TrafficOffset0,X
    276  f103		       95 90		      STA	TrafficOffset0,X
    277  f105		       e8		      INX
    278  f106		       a5 b1		      LDA	Tmp1
    279  f108		       75 90		      ADC	TrafficOffset0,X
    280  f10a		       95 90		      STA	TrafficOffset0,X
    281  f10c		       e8		      INX
    282  f10d		       a5 b2		      LDA	Tmp2	; Carry
    283  f10f		       75 90		      ADC	TrafficOffset0,X
    284  f111		       95 90		      STA	TrafficOffset0,X
    285  f113		       e8		      INX
    286  f114		       38		      SEC
    287  f115		       69 00		      ADC	#0	;Increment by one
    288  f117		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    289  f119
    290  f119
    291  f119				   PrepareNextUpdateLoop
    292  f119		       c8		      INY
    293  f11a		       e8		      INX
    294  f11b		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    295  f11d		       d0 c9		      BNE	UpdateOffsets
    296  f11f
    297  f11f				   TestCollision		;
    298  f11f							; see if car0 and playfield collide, and change the background color if so
    299  f11f		       a9 80		      LDA	#%10000000
    300  f121		       24 02		      BIT	CXP0FB
    301  f123		       f0 10		      BEQ	NoCollision	;skip if not hitting...
    302  f125		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    303  f127		       d0 0c		      BNE	NoCollision
    304  f129		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    305  f12b		       85 ba		      STA	CollisionCounter	;and store as colision (will do more with it!)
    306  f12d		       a9 4a		      LDA	#COLLISION_SPEED_L	;
    307  f12f		       85 88		      STA	Car0SpeedL
    308  f131		       a9 00		      LDA	#0
    309  f133		       85 89		      STA	Car0SpeedH
    310  f135				   NoCollision
    311  f135
    312  f135				   DecrementCollision
    313  f135		       a5 ba		      LDA	CollisionCounter
    314  f137		       f0 02		      BEQ	FinishDecrementCollision
    315  f139		       c6 ba		      DEC	CollisionCounter
    316  f13b				   FinishDecrementCollision
    317  f13b
    318  f13b				   SkipUpdateLogic
    319  f13b
    320  f13b							;DELETE THIS!
    321  f13b		       a9 09		      LDA	#<N1 + #SCORE_SIZE -1
    322  f13d		       85 d0		      STA	ScoreD0
    323  f13f		       a9 0e		      LDA	#<N2 + #SCORE_SIZE -1
    324  f141		       85 d1		      STA	ScoreD1
    325  f143		       a9 13		      LDA	#<N3 + #SCORE_SIZE -1
    326  f145		       85 d2		      STA	ScoreD2
    327  f147		       a9 18		      LDA	#<N4 + #SCORE_SIZE -1
    328  f149		       85 d3		      STA	ScoreD3
    329  f14b		       a9 1d		      LDA	#<N5 + #SCORE_SIZE -1
    330  f14d		       85 d4		      STA	ScoreD4
    331  f14f
    332  f14f		       a9 22		      LDA	#<N6 + #SCORE_SIZE -1
    333  f151		       85 d5		      STA	ScoreD5
    334  f153		       a9 27		      LDA	#<N7 + #SCORE_SIZE -1
    335  f155		       85 d6		      STA	ScoreD6
    336  f157		       a9 2c		      LDA	#<N8 + #SCORE_SIZE -1
    337  f159		       85 d7		      STA	ScoreD7
    338  f15b		       a9 31		      LDA	#<N9 + #SCORE_SIZE -1
    339  f15d		       85 d8		      STA	ScoreD8
    340  f15f		       a9 36		      LDA	#<N0 + #SCORE_SIZE -1
    341  f161		       85 d9		      STA	ScoreD9
    342  f163							;END DELETE THIS
    343  f163
    344  f163		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    345  f165		       85 09		      STA	COLUBK
    346  f167		       a9 0f		      LDA	#SCORE_FONT_COLOR
    347  f169		       85 08		      STA	COLUPF
    348  f16b		       20 dd f2 	      JSR	ClearPF
    349  f16e		       a9 02		      LDA	#%00000010	; Score mode
    350  f170		       85 0a		      STA	CTRLPF
    351  f172		       a0 04		      LDY	#SCORE_SIZE - 1
    352  f174		       a2 00		      LDX	#0
    353  f176
    354  f176		       a5 86		      LDA	FrameCount0	;3
    355  f178		       29 01		      AND	#%00000001	;2
    356  f17a		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    357  f17c				   LeftScoreOn
    358  f17c		       a9 0f		      LDA	#SCORE_FONT_COLOR
    359  f17e		       85 07		      STA	COLUP1
    360  f180		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    361  f182		       85 06		      STA	COLUP0
    362  f184		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    363  f186		       85 b1		      STA	Tmp1
    364  f188		       4c 97 f1 	      JMP	WaitForVblankEnd
    365  f18b				   RightScoreOn
    366  f18b		       a9 0f		      LDA	#SCORE_FONT_COLOR
    367  f18d		       85 06		      STA	COLUP0
    368  f18f		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    369  f191		       85 07		      STA	COLUP1
    370  f193		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    371  f195		       85 b1		      STA	Tmp1
    372  f197
    373  f197							; After here we are going to update the screen, No more heavy code
    374  f197				   WaitForVblankEnd
    375  f197		       ad 84 02 	      LDA	INTIM
    376  f19a		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    377  f19c							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    378  f19c		       85 01		      STA	VBLANK
    379  f19e
    380  f19e				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    381  f19e		       85 02		      STA	WSYNC
    382  f1a0
    383  f1a0		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    384  f1a2		       85 0d		      STA	PF0	;3
    385  f1a4
    386  f1a4		       a5 82		      LDA	PF1Cache	;3
    387  f1a6		       85 0e		      STA	PF1	;3
    388  f1a8
    389  f1a8		       a5 83		      LDA	PF2Cache	;3
    390  f1aa		       85 0f		      STA	PF2	;3
    391  f1ac
    392  f1ac		       84 b0		      STY	Tmp0	; 3 Keep Y Value, will be use to load the correct chars
    393  f1ae
    394  f1ae		       a5 b1		      LDA	Tmp1	;3 Was previouly loaded
    395  f1b0		       f0 02		      BEQ	DrawScore	;2
    396  f1b2				   RightScoreOffset
    397  f1b2		       a2 05		      LDX	#5	;3 Points to D5 6 7...
    398  f1b4
    399  f1b4							;39
    400  f1b4				   DrawScore
    401  f1b4		       b4 d0		      LDY	ScoreD0,X	; 4
    402  f1b6		       b9 00 fd 	      LDA	Font,Y	;4
    403  f1b9		       85 81		      STA	PF0Cache	;3
    404  f1bb		       d6 d0		      DEC	ScoreD0,X	;6 Can only DEC with X
    405  f1bd							;17
    406  f1bd
    407  f1bd		       b4 d1		      LDY	ScoreD1,X	; 4
    408  f1bf		       b9 00 fd 	      LDA	Font,Y	;4
    409  f1c2		       0a		      ASL		;2
    410  f1c3		       0a		      ASL		;2
    411  f1c4		       0a		      ASL		;2
    412  f1c5		       0a		      ASL		;2
    413  f1c6		       85 82		      STA	PF1Cache	;3
    414  f1c8		       d6 d1		      DEC	ScoreD1,X	;6
    415  f1ca							;9 (After Wsync)
    416  f1ca
    417  f1ca		       b4 d2		      LDY	ScoreD2,X	; 4
    418  f1cc		       b9 00 fd 	      LDA	Font,Y	;4
    419  f1cf		       29 0f		      AND	#%00001111
    420  f1d1		       05 82		      ORA	PF1Cache	;3
    421  f1d3		       85 82		      STA	PF1Cache	;3
    422  f1d5		       d6 d2		      DEC	ScoreD2,X	;6
    423  f1d7							;20
    424  f1d7
    425  f1d7		       b4 d3		      LDY	ScoreD3,X	; 3
    426  f1d9		       b9 00 fd 	      LDA	Font,Y	;4
    427  f1dc		       4a		      LSR		;2
    428  f1dd		       4a		      LSR		;2
    429  f1de		       4a		      LSR		;2
    430  f1df		       4a		      LSR		;2
    431  f1e0		       85 83		      STA	PF2Cache	;3
    432  f1e2		       d6 d3		      DEC	ScoreD3,X	;5
    433  f1e4							;23
    434  f1e4
    435  f1e4		       b4 d4		      LDY	ScoreD4,X	; 3
    436  f1e6		       b9 00 fd 	      LDA	Font,Y	;4
    437  f1e9		       29 f0		      AND	#%11110000
    438  f1eb		       05 83		      ORA	PF2Cache	;3
    439  f1ed		       85 83		      STA	PF2Cache	;3
    440  f1ef		       d6 d4		      DEC	ScoreD4,X	;5
    441  f1f1							;18
    442  f1f1
    443  f1f1		       a4 b0		      LDY	Tmp0	; 3 Restore the current line
    444  f1f3		       88		      DEY		;2
    445  f1f4		       10 a8		      BPL	ScoreLoop	;4
    446  f1f6
    447  f1f6		       85 02		      STA	WSYNC
    448  f1f8
    449  f1f8		       20 ec f2 	      JSR	LoadPF
    450  f1fb
    451  f1fb		       85 02		      STA	WSYNC
    452  f1fd		       85 02		      STA	WSYNC
    453  f1ff
    454  f1ff				   PrepareForTraffic
    455  f1ff		       20 dd f2 	      JSR	ClearPF	; 32
    456  f202		       85 2c		      STA	CXCLR	;3 reset the collision detection for next frame, must be done here to clean score colisions.
    457  f204
    458  f204		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    459  f206		       85 06		      STA	COLUP0
    460  f208
    461  f208		       a9 00		      LDA	#BACKGROUND_COLOR	;2
    462  f20a		       85 07		      STA	COLUP1	;3
    463  f20c
    464  f20c							;Traffic colour
    465  f20c		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    466  f20e		       85 08		      STA	COLUPF	;3
    467  f210
    468  f210		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    469  f212
    470  f212		       a9 00		      LDA	#BACKGROUND_COLOR	;2 Make it in the very end, so we have one mor nice blue line
    471  f214		       85 09		      STA	COLUBK	;3
    472  f216
    473  f216
    474  f216							;main scanline loop...
    475  f216				   ScanLoop
    476  f216		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    477  f218
    478  f218							;Start of next line!			
    479  f218				   DrawCache		;35 Is the last line going to the top of the next frame?
    480  f218
    481  f218		       a5 81		      LDA	PF0Cache	;3
    482  f21a		       85 0d		      STA	PF0	;3
    483  f21c
    484  f21c		       b9 00 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    485  f21f		       05 ba		      ORA	CollisionCounter
    486  f221		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    487  f223
    488  f223		       a5 82		      LDA	PF1Cache	;3
    489  f225		       85 0e		      STA	PF1	;3
    490  f227
    491  f227		       a5 83		      LDA	PF2Cache	;3
    492  f229		       85 0f		      STA	PF2	;3
    493  f22b
    494  f22b		       a9 00		      LDA	#0	;2
    495  f22d		       85 81		      STA	PF0Cache	;3
    496  f22f		       85 82		      STA	PF1Cache	;3
    497  f231		       85 83		      STA	PF2Cache	;3
    498  f233
    499  f233							;BEQ DrawTraffic3
    500  f233				   DrawTraffic1 		; 32 
    501  f233		       98		      TYA		; 2
    502  f234		       18		      CLC		; 2 
    503  f235		       65 95		      ADC	TrafficOffset1 + 1	;3
    504  f237		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    505  f239		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    506  f23b		       45 96		      EOR	TrafficOffset1 + 2	; 3
    507  f23d		       4c 42 f2 	      JMP	AfterEorOffsetWithCarry	; 3
    508  f240				   EorOffsetWithCarry
    509  f240		       45 97		      EOR	TrafficOffset1 + 3	; 3
    510  f242				   AfterEorOffsetWithCarry		;17
    511  f242		       aa		      TAX		;2
    512  f243		       bd 00 fe 	      LDA	AesTable,X	; 4
    513  f246		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    514  f248		       b0 04		      BCS	FinishDrawTraffic1	; 2
    515  f24a		       a9 60		      LDA	#%01100000	;2
    516  f24c		       85 82		      STA	PF1Cache	;3
    517  f24e				   FinishDrawTraffic1
    518  f24e
    519  f24e				   DrawTraffic2 		; 35
    520  f24e		       98		      TYA		; 2
    521  f24f		       18		      CLC		; 2 
    522  f250		       65 99		      ADC	TrafficOffset2 + 1	;3
    523  f252		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    524  f254		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    525  f256		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    526  f258		       4c 5d f2 	      JMP	AfterEorOffsetWithCarry2	; 3
    527  f25b				   EorOffsetWithCarry2
    528  f25b		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    529  f25d				   AfterEorOffsetWithCarry2		;17
    530  f25d		       aa		      TAX		;2
    531  f25e		       bd 00 fe 	      LDA	AesTable,X	; 4
    532  f261		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    533  f263		       b0 06		      BCS	FinishDrawTraffic2	; 2
    534  f265		       a5 82		      LDA	PF1Cache	;3
    535  f267		       09 0c		      ORA	#%00001100	;2
    536  f269		       85 82		      STA	PF1Cache	;3
    537  f26b				   FinishDrawTraffic2
    538  f26b
    539  f26b							;STA WSYNC ;65 / 137
    540  f26b
    541  f26b							; LDA Tmp0 ; Flicker this line if drawing car
    542  f26b							; BEQ FinishDrawTraffic4
    543  f26b				   DrawTraffic3 		; 38
    544  f26b		       98		      TYA		; 2
    545  f26c		       18		      CLC		; 2 
    546  f26d		       65 9d		      ADC	TrafficOffset3 + 1	;3
    547  f26f		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    548  f271		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    549  f273		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    550  f275		       4c 7a f2 	      JMP	AfterEorOffsetWithCarry3	; 3
    551  f278				   EorOffsetWithCarry3
    552  f278		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    553  f27a				   AfterEorOffsetWithCarry3		;17
    554  f27a		       aa		      TAX		;2
    555  f27b		       bd 00 fe 	      LDA	AesTable,X	; 4
    556  f27e		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    557  f280		       b0 08		      BCS	FinishDrawTraffic3	; 2 
    558  f282		       a9 01		      LDA	#%00000001	;2
    559  f284		       85 83		      STA	PF2Cache	;3
    560  f286		       05 82		      ORA	PF1Cache	;3
    561  f288		       85 82		      STA	PF1Cache	;3
    562  f28a				   FinishDrawTraffic3
    563  f28a
    564  f28a				   DrawTraffic4 		; 35
    565  f28a		       98		      TYA		; 2
    566  f28b		       18		      CLC		; 2 
    567  f28c		       65 a1		      ADC	TrafficOffset4 + 1	;3
    568  f28e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    569  f290		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    570  f292		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    571  f294		       4c 99 f2 	      JMP	AfterEorOffsetWithCarry4	; 3
    572  f297				   EorOffsetWithCarry4
    573  f297		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    574  f299				   AfterEorOffsetWithCarry4		;17
    575  f299		       aa		      TAX		;2
    576  f29a		       bd 00 fe 	      LDA	AesTable,X	; 4
    577  f29d		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    578  f29f		       b0 06		      BCS	FinishDrawTraffic4	; 2
    579  f2a1		       a5 83		      LDA	PF2Cache	;3
    580  f2a3		       09 0c		      ORA	#%00001100	;2
    581  f2a5		       85 83		      STA	PF2Cache	;3	
    582  f2a7				   FinishDrawTraffic4
    583  f2a7
    584  f2a7				   DrawTraffic0 		; 24
    585  f2a7		       98		      TYA		;2
    586  f2a8		       18		      CLC		;2
    587  f2a9		       65 91		      ADC	TrafficOffset0 + 1	; 3
    588  f2ab		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    589  f2ad		       f0 0a		      BEQ	SkipDrawTraffic0	; 2
    590  f2af		       a9 f0		      LDA	#%11110000	; 2
    591  f2b1		       85 81		      STA	PF0Cache	;3
    592  f2b3		       a5 83		      LDA	PF2Cache	;3
    593  f2b5		       09 e0		      ORA	#%11100000	;2
    594  f2b7		       85 83		      STA	PF2Cache	; 3
    595  f2b9				   SkipDrawTraffic0
    596  f2b9
    597  f2b9				   WhileScanLoop
    598  f2b9		       88		      DEY		;2
    599  f2ba		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    600  f2bc		       4c 16 f2 	      JMP	ScanLoop	;3
    601  f2bf				   FinishScanLoop		; 7 209 of 222
    602  f2bf
    603  f2bf		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    604  f2c1
    605  f2c1		       20 ec f2 	      JSR	LoadPF
    606  f2c4
    607  f2c4		       85 02		      STA	WSYNC	; do stuff!
    608  f2c6		       85 02		      STA	WSYNC
    609  f2c8		       85 02		      STA	WSYNC
    610  f2ca							;42 cycles to use here
    611  f2ca
    612  f2ca				   PrepareOverscan
    613  f2ca		       a9 02		      LDA	#2
    614  f2cc		       85 02		      STA	WSYNC
    615  f2ce		       85 01		      STA	VBLANK
    616  f2d0
    617  f2d0		       a9 23		      LDA	#35	; two more lines before overscan...
    618  f2d2		       8d 96 02 	      STA	TIM64T
    619  f2d5							;LDA #0
    620  f2d5							;STA VSYNC Is it needed? Why is this here, I don't remember		
    621  f2d5
    622  f2d5							;Do more logic
    623  f2d5
    624  f2d5				   OverScanWait
    625  f2d5		       ad 84 02 	      LDA	INTIM
    626  f2d8		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    627  f2da		       4c 2b f0 	      JMP	MainLoop
    628  f2dd
    629  f2dd				   ClearPF		; 26
    630  f2dd		       a9 00		      LDA	#0	;2
    631  f2df		       85 0d		      STA	PF0	;3
    632  f2e1		       85 0e		      STA	PF1	;3
    633  f2e3		       85 0f		      STA	PF2	;3	
    634  f2e5		       85 81		      STA	PF0Cache	;3
    635  f2e7		       85 82		      STA	PF1Cache	;3
    636  f2e9		       85 83		      STA	PF2Cache	;3 
    637  f2eb		       60		      RTS		;6
    638  f2ec
    639  f2ec				   LoadPF		; 24
    640  f2ec		       a5 81		      LDA	PF0Cache	;3
    641  f2ee		       85 0d		      STA	PF0	;3
    642  f2f0
    643  f2f0		       a5 82		      LDA	PF1Cache	;3
    644  f2f2		       85 0e		      STA	PF1	;3
    645  f2f4
    646  f2f4		       a5 83		      LDA	PF2Cache	;3
    647  f2f6		       85 0f		      STA	PF2	;3
    648  f2f8
    649  f2f8		       60		      RTS		;6
    650  f2f9
    651  f2f9							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
    652  fd00					      org	$FD00
    653  fd00				   Font
    654  fd00				   Space
    655  fd00		       00		      .byte.b	%0	;
    656  fd01		       00		      .byte.b	#0	;
    657  fd02		       00		      .byte.b	#0	;
    658  fd03		       00		      .byte.b	#0	;
    659  fd04		       00		      .byte.b	#0	;
    660  fd05				   N1
    661  fd05		       e7		      .byte.b	#%11100111	;
    662  fd06		       42		      .byte.b	#%01000010	; 
    663  fd07		       42		      .byte.b	#%01000010	; 
    664  fd08		       42		      .byte.b	#%01000010	; 
    665  fd09		       66		      .byte.b	#%01100110	;
    666  fd0a				   N2
    667  fd0a		       e7		      .byte.b	#%11100111	;
    668  fd0b		       24		      .byte.b	#%00100100	; 
    669  fd0c		       e7		      .byte.b	#%11100111	; 
    670  fd0d		       81		      .byte.b	#%10000001	; 
    671  fd0e		       e7		      .byte.b	#%11100111	;
    672  fd0f				   N3
    673  fd0f		       e7		      .byte.b	#%11100111	;
    674  fd10		       81		      .byte.b	#%10000001	; 
    675  fd11		       e7		      .byte.b	#%11100111	; 
    676  fd12		       81		      .byte.b	#%10000001	; 
    677  fd13		       e7		      .byte.b	#%11100111	;
    678  fd14				   N4
    679  fd14		       81		      .byte.b	#%10000001	;
    680  fd15		       81		      .byte.b	#%10000001	; 
    681  fd16		       e7		      .byte.b	#%11100111	; 
    682  fd17		       a5		      .byte.b	#%10100101	; 
    683  fd18		       a5		      .byte.b	#%10100101	;
    684  fd19				   N5
    685  fd19		       e7		      .byte.b	#%11100111	;
    686  fd1a		       81		      .byte.b	#%10000001	; 
    687  fd1b		       e7		      .byte.b	#%11100111	; 
    688  fd1c		       24		      .byte.b	#%00100100	; 
    689  fd1d		       e7		      .byte.b	#%11100111	;
    690  fd1e				   N6
    691  fd1e		       e7		      .byte.b	#%11100111	;
    692  fd1f		       a5		      .byte.b	#%10100101	; 
    693  fd20		       e7		      .byte.b	#%11100111	; 
    694  fd21		       24		      .byte.b	#%00100100	; 
    695  fd22		       e7		      .byte.b	#%11100111	;
    696  fd23				   N7
    697  fd23		       81		      .byte.b	#%10000001	;
    698  fd24		       81		      .byte.b	#%10000001	; 
    699  fd25		       81		      .byte.b	#%10000001	; 
    700  fd26		       81		      .byte.b	#%10000001	; 
    701  fd27		       e7		      .byte.b	#%11100111	;
    702  fd28				   N8
    703  fd28		       e7		      .byte.b	#%11100111	;
    704  fd29		       a5		      .byte.b	#%10100101	; 
    705  fd2a		       e7		      .byte.b	#%11100111	; 
    706  fd2b		       a5		      .byte.b	#%10100101	; 
    707  fd2c		       e7		      .byte.b	#%11100111	;
    708  fd2d				   N9
    709  fd2d		       e7		      .byte.b	#%11100111	;
    710  fd2e		       81		      .byte.b	#%10000001	; 
    711  fd2f		       e7		      .byte.b	#%11100111	; 
    712  fd30		       a5		      .byte.b	#%10100101	; 
    713  fd31		       e7		      .byte.b	#%11100111	;
    714  fd32				   N0
    715  fd32		       e7		      .byte.b	#%11100111	;
    716  fd33		       a5		      .byte.b	#%10100101	; 
    717  fd34		       a5		      .byte.b	#%10100101	; 
    718  fd35		       a5		      .byte.b	#%10100101	; 
    719  fd36		       e7		      .byte.b	#%11100111	;
    720  fd37
    721  fe00					      org	$FE00
    722  fe00				   AesTable
    723  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    724  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    725  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    726  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    727  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    728  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    729  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    730  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    731  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    732  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    733  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    734  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    735  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    736  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    737  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    738  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    739  ff00
    740  ff00							; From FF00 to FFFB (122 bytes) to use here
    741  ff00
    742  ff00				   CarSprite		; Upside down
    743  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    744  ff01		       7e		      .byte.b	#%01111110
    745  ff02		       24		      .byte.b	#%00100100
    746  ff03		       bd		      .byte.b	#%10111101
    747  ff04		       3c		      .byte.b	#%00111100
    748  ff05		       bd		      .byte.b	#%10111101
    749  ff06		       3c		      .byte.b	#%00111100
    750  ff07		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
    751  ff39
    752  ff39
    753  ff39				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    754  ff39		       00		      .byte.b	#$00	;  Trafic0 L
    755  ff3a		       00		      .byte.b	#$00	;  Trafic0 H
    756  ff3b		       0a		      .byte.b	#$0A	;  Trafic1 L
    757  ff3c		       01		      .byte.b	#$01	;  Trafic1 H
    758  ff3d		       e6		      .byte.b	#$E6	;  Trafic2 L
    759  ff3e		       00		      .byte.b	#$00	;  Trafic2 H
    760  ff3f		       c2		      .byte.b	#$C2	;  Trafic3 L
    761  ff40		       00		      .byte.b	#$00	;  Trafic3 H
    762  ff41		       9e		      .byte.b	#$9E	;  Trafic4 L
    763  ff42		       00		      .byte.b	#$00	;  Trafic4 H
    764  ff43
    765  ff43
    766  fffc					      org	$FFFC
    767  fffc		       00 f0		      .word.w	Start
    768  fffe		       00 f0		      .word.w	Start
