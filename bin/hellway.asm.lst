------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     13  f000		       00 42	   COLLISION_SPEED_L =	$42	;
     14  f000
     15  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     16  f000							;16 bit precision
     17  f000							;640 max speed!
     18  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     19  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     20  f000		       00 00	   CAR_MIN_SPEED_H =	0
     21  f000		       00 00	   CAR_MIN_SPEED_L =	0
     22  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     23  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     24  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     25  f000		       00 01	   ACCELERATE_SPEED =	1
     26  f000		       00 06	   BREAK_SPEED =	6
     27  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     28  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000	;Min car size... Maybe make different per track
     29  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     30  f000
     31  f000		       00 34	   TRAFFIC_COLOR =	$34
     32  f000		       00 81	   SCORE_BACKGROUND_COLOR =	$81
     33  f000		       00 0f	   SCORE_FONT_COLOR =	$0F
     34  f000
     35  f000
     36  f000		       00 80	   GRP0Cache  =	$80
     37  f000		       00 81	   PF0Cache   =	$81
     38  f000		       00 82	   PF1Cache   =	$82
     39  f000		       00 83	   PF2Cache   =	$83
     40  f000
     41  f000		       00 86	   FrameCount0 =	$86	;
     42  f000		       00 87	   FrameCount1 =	$87	;
     43  f000
     44  f000		       00 88	   Car0SpeedL =	$88
     45  f000		       00 89	   Car0SpeedH =	$89
     46  f000
     47  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     48  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     49  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     50  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     51  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     52  f000
     53  f000							;Temporary variables, multiple uses
     54  f000		       00 b0	   Tmp0       =	$B0
     55  f000		       00 b1	   Tmp1       =	$B1
     56  f000		       00 b2	   Tmp2       =	$B2
     57  f000
     58  f000		       00 ba	   CollisionCounter =	$BA
     59  f000
     60  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     61  f000
     62  f000		       00 d0	   ScoreD0    =	$D0
     63  f000		       00 d1	   ScoreD1    =	$D1
     64  f000		       00 d2	   ScoreD2    =	$D2
     65  f000		       00 d3	   ScoreD3    =	$D3
     66  f000		       00 d4	   ScoreD4    =	$D4
     67  f000
     68  f000							;generic start up stuff, put zero in all...
     69  f000				   Start
     70  f000		       78		      SEI
     71  f001		       d8		      CLD
     72  f002		       a2 ff		      LDX	#$FF
     73  f004		       9a		      TXS
     74  f005		       a9 00		      LDA	#0
     75  f007				   ClearMem
     76  f007		       95 00		      STA	0,X
     77  f009		       ca		      DEX
     78  f00a		       d0 fb		      BNE	ClearMem
     79  f00c
     80  f00c							;Setting some variables...
     81  f00c
     82  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     83  f00e		       85 06		      STA	COLUP0
     84  f010
     85  f010		       a9 85		      LDA	#PLAYER_2_COLOR
     86  f012		       85 07		      STA	COLUP1
     87  f014
     88  f014							;Loop ?
     89  f014		       a9 20		      LDA	#$20
     90  f016		       85 96		      STA	TrafficOffset1 + 2
     91  f018		       a9 40		      LDA	#$40
     92  f01a		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
     93  f01c		       a9 60		      LDA	#$60
     94  f01e		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
     95  f020		       a9 80		      LDA	#$80
     96  f022		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
     97  f024		       a9 a0		      LDA	#$A0
     98  f026
     99  f026		       ad 41 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    100  f029		       85 88		      STA	Car0SpeedL
    101  f02b
    102  f02b
    103  f02b							;VSYNC time
    104  f02b				   MainLoop
    105  f02b		       a9 02		      LDA	#2
    106  f02d		       85 00		      STA	VSYNC
    107  f02f		       85 02		      STA	WSYNC
    108  f031		       85 02		      STA	WSYNC
    109  f033							;Cool, can put code here! It removed the black line on top
    110  f033							;Make Objects move in the X axys
    111  f033		       85 2a		      STA	HMOVE	;2
    112  f035							;This must be done after a WSync, otherwise it is impossible to predict the X position
    113  f035		       a5 c0		      LDA	GameStatus	;3
    114  f037		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    115  f039		       f0 10		      BEQ	DoNotSetPlayerX	;3
    116  f03b							;Do something better with this 32 cycles
      0  f03b					      SLEEP	27	; Maybe fine position with hmove...
      1  f03b				   .CYCLES    SET	27
      2  f03b
      3  f03b				  -	      IF	.CYCLES < 2
      4  f03b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f03b				  -	      ERR
      6  f03b					      ENDIF
      7  f03b
      8  f03b					      IF	.CYCLES & 1
      9  f03b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f03b				  -	      nop	0
     11  f03b					      ELSE
     12  f03b		       24 00		      bit	VSYNC
     13  f03d					      ENDIF
     14  f03d				   .CYCLES    SET	.CYCLES - 3
     15  f03d					      ENDIF
     16  f03d
     17  f03d					      REPEAT	.CYCLES / 2
     18  f03d		       ea		      nop
     17  f03d					      REPEND
     18  f03e		       ea		      nop
     17  f03e					      REPEND
     18  f03f		       ea		      nop
     17  f03f					      REPEND
     18  f040		       ea		      nop
     17  f040					      REPEND
     18  f041		       ea		      nop
     17  f041					      REPEND
     18  f042		       ea		      nop
     17  f042					      REPEND
     18  f043		       ea		      nop
     17  f043					      REPEND
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     17  f047					      REPEND
     18  f048		       ea		      nop
     19  f049					      REPEND
    118  f049		       85 10		      STA	RESP0	;3
    119  f04b
    120  f04b				   DoNotSetPlayerX
    121  f04b
    122  f04b		       85 02		      STA	WSYNC	;3
    123  f04d		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    124  f04f		       8d 96 02 	      STA	TIM64T	;3	
    125  f052		       a9 00		      LDA	#0	;2
    126  f054		       85 00		      STA	VSYNC	;3	
    127  f056
    128  f056							;Read Fire Button before, will make it start the game for now.
    129  f056				   StartGame
    130  f056		       a5 0c		      LDA	INPT4	;3
    131  f058		       30 06		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    132  f05a		       a5 c0		      LDA	GameStatus	;3
    133  f05c		       09 80		      ORA	#%10000000	;2
    134  f05e		       85 c0		      STA	GameStatus	;3
    135  f060				   SkipGameStart
    136  f060
    137  f060				   CountFrame
    138  f060		       e6 86		      INC	FrameCount0	; 5 Used to alternate lines
    139  f062		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    140  f064		       e6 87		      INC	FrameCount1	; 5 Still not used
    141  f066				   SkipIncFC1
    142  f066
    143  f066
    144  f066							;Does not update the game if not running
    145  f066		       a5 c0		      LDA	GameStatus	;3
    146  f068		       49 80		      EOR	#%10000000	;2 game is running...
    147  f06a		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    148  f06c		       4c 4c f1 	      JMP	SkipUpdateLogic
    149  f06f
    150  f06f				   ContinueWithGameLogic
    151  f06f
    152  f06f							; for left and right, we're gonna 
    153  f06f							; set the horizontal speed, and then do
    154  f06f							; a single HMOVE.  We'll use X to hold the
    155  f06f							; horizontal speed, then store it in the 
    156  f06f							; appropriate register
    157  f06f
    158  f06f							;assum horiz speed will be zero
    159  f06f
    160  f06f				   BeginReadDpad
    161  f06f		       a2 00		      LDX	#0
    162  f071		       a9 40		      LDA	#%01000000	;Left
    163  f073		       2c 80 02 	      BIT	SWCHA
    164  f076		       d0 02		      BNE	SkipMoveLeft
    165  f078		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    166  f07a				   SkipMoveLeft
    167  f07a
    168  f07a		       a9 80		      LDA	#%10000000	;Right
    169  f07c		       2c 80 02 	      BIT	SWCHA
    170  f07f		       d0 02		      BNE	SkipMoveRight
    171  f081		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    172  f083				   SkipMoveRight
    173  f083
    174  f083		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    175  f085
    176  f085
    177  f085							;Acelerates / breaks the car
    178  f085		       a5 0c		      LDA	INPT4	;3
    179  f087		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    180  f089		       a9 10		      LDA	#%00010000	;UP in controller
    181  f08b		       2c 80 02 	      BIT	SWCHA
    182  f08e		       d0 21		      BNE	SkipAccelerate
    183  f090
    184  f090				   IncreaseCarSpeed
    185  f090							;Adds speed
    186  f090		       18		      CLC
    187  f091		       a5 88		      LDA	Car0SpeedL
    188  f093		       69 01		      ADC	#ACCELERATE_SPEED
    189  f095		       85 88		      STA	Car0SpeedL
    190  f097		       a5 89		      LDA	Car0SpeedH
    191  f099		       69 00		      ADC	#0
    192  f09b		       85 89		      STA	Car0SpeedH
    193  f09d
    194  f09d							;Checks if already max
    195  f09d		       c9 02		      CMP	#CAR_MAX_SPEED_H
    196  f09f		       90 10		      BCC	SkipAccelerate	; less than my max speed
    197  f0a1		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    198  f0a3							;High bit is max, compare the low
    199  f0a3		       a5 88		      LDA	Car0SpeedL
    200  f0a5		       c9 80		      CMP	#CAR_MAX_SPEED_L
    201  f0a7		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    202  f0a9							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    203  f0a9
    204  f0a9				   ResetToMaxSpeed		; Speed is more, or is already max
    205  f0a9		       a9 02		      LDA	#CAR_MAX_SPEED_H
    206  f0ab		       85 89		      STA	Car0SpeedH
    207  f0ad		       a9 80		      LDA	#CAR_MAX_SPEED_L
    208  f0af		       85 88		      STA	Car0SpeedL
    209  f0b1
    210  f0b1				   SkipAccelerate
    211  f0b1
    212  f0b1				   Break
    213  f0b1		       a9 20		      LDA	#%00100000	;Down in controller
    214  f0b3		       2c 80 02 	      BIT	SWCHA
    215  f0b6		       d0 26		      BNE	SkipBreak
    216  f0b8
    217  f0b8				   DecreaseSpeed
    218  f0b8		       38		      SEC
    219  f0b9		       a5 88		      LDA	Car0SpeedL
    220  f0bb		       e9 06		      SBC	#BREAK_SPEED
    221  f0bd		       85 88		      STA	Car0SpeedL
    222  f0bf		       a5 89		      LDA	Car0SpeedH
    223  f0c1		       e9 00		      SBC	#0
    224  f0c3		       85 89		      STA	Car0SpeedH
    225  f0c5
    226  f0c5				   ChecksMinSpeed
    227  f0c5		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    228  f0c7		       c9 00		      CMP	#CAR_MIN_SPEED_H
    229  f0c9		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    230  f0cb		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    231  f0cd
    232  f0cd				   CompareLBreakSpeed
    233  f0cd		       a5 88		      LDA	Car0SpeedL
    234  f0cf		       c9 00		      CMP	#CAR_MIN_SPEED_L
    235  f0d1		       90 03		      BCC	ResetMinSpeed	; Less than memory
    236  f0d3		       4c de f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    237  f0d6
    238  f0d6				   ResetMinSpeed
    239  f0d6		       a9 00		      LDA	#CAR_MIN_SPEED_H
    240  f0d8		       85 89		      STA	Car0SpeedH
    241  f0da		       a9 00		      LDA	#CAR_MIN_SPEED_L
    242  f0dc		       85 88		      STA	Car0SpeedL
    243  f0de				   SkipBreak
    244  f0de
    245  f0de							;Updates all offsets 24 bits
    246  f0de		       a2 00		      LDX	#0	; Memory Offset 24 bit
    247  f0e0		       a0 00		      LDY	#0	; Line Speeds 16 bits
    248  f0e2				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    249  f0e2		       38		      SEC
    250  f0e3		       a5 88		      LDA	Car0SpeedL
    251  f0e5		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    252  f0e8		       85 b0		      STA	Tmp0
    253  f0ea		       c8		      INY
    254  f0eb		       a5 89		      LDA	Car0SpeedH
    255  f0ed		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    256  f0f0		       85 b1		      STA	Tmp1
    257  f0f2		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    258  f0f4		       e9 00		      SBC	#0
    259  f0f6		       85 b2		      STA	Tmp2
    260  f0f8
    261  f0f8
    262  f0f8				   AddsTheResult
    263  f0f8		       18		      CLC
    264  f0f9		       a5 b0		      LDA	Tmp0
    265  f0fb		       75 90		      ADC	TrafficOffset0,X
    266  f0fd		       95 90		      STA	TrafficOffset0,X
    267  f0ff		       e8		      INX
    268  f100		       a5 b1		      LDA	Tmp1
    269  f102		       75 90		      ADC	TrafficOffset0,X
    270  f104		       95 90		      STA	TrafficOffset0,X
    271  f106		       e8		      INX
    272  f107		       a5 b2		      LDA	Tmp2	; Carry
    273  f109		       75 90		      ADC	TrafficOffset0,X
    274  f10b		       95 90		      STA	TrafficOffset0,X
    275  f10d		       e8		      INX
    276  f10e		       38		      SEC
    277  f10f		       69 00		      ADC	#0	;Increment by one
    278  f111		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    279  f113
    280  f113
    281  f113				   PrepareNextUpdateLoop
    282  f113		       c8		      INY
    283  f114		       e8		      INX
    284  f115		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    285  f117		       d0 c9		      BNE	UpdateOffsets
    286  f119
    287  f119				   TestCollision		;
    288  f119							; see if car0 and playfield collide, and change the background color if so
    289  f119		       a9 80		      LDA	#%10000000
    290  f11b		       24 02		      BIT	CXP0FB
    291  f11d		       f0 14		      BEQ	NoCollision	;skip if not hitting...
    292  f11f		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    293  f121		       d0 10		      BNE	NoCollision
    294  f123		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    295  f125		       85 ba		      STA	CollisionCounter	;and store as colision (will do more with it!)
    296  f127		       a9 42		      LDA	#COLLISION_SPEED_L	;
    297  f129		       85 88		      STA	Car0SpeedL
    298  f12b		       a9 00		      LDA	#0
    299  f12d		       85 89		      STA	Car0SpeedH
    300  f12f		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    301  f131		       86 20		      STX	HMP0
    302  f133				   NoCollision
    303  f133		       85 2c		      STA	CXCLR	;3 reset the collision detection for next frame.
    304  f135
    305  f135				   DecrementCollision
    306  f135		       a4 ba		      LDY	CollisionCounter
    307  f137		       f0 07		      BEQ	FinishDecrementCollision
    308  f139		       a2 05		      LDX	#%00000101	; Make player bigger to show colision
    309  f13b		       86 04		      STX	NUSIZ0
    310  f13d		       88		      DEY
    311  f13e		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    312  f140				   FinishDecrementCollision
    313  f140
    314  f140				   ResetPlayerSize
    315  f140		       d0 02		      BNE	FinishResetPlayerSize
    316  f142		       84 04		      STY	NUSIZ0	;
    317  f144				   FinishResetPlayerSize
    318  f144
    319  f144				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    320  f144		       c0 01		      CPY	#1	; Last frame before reset
    321  f146		       d0 04		      BNE	SkipResetPlayerPosition
    322  f148		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    323  f14a		       86 20		      STX	HMP0
    324  f14c				   SkipResetPlayerPosition
    325  f14c
    326  f14c				   SkipUpdateLogic
    327  f14c
    328  f14c		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    329  f14e		       85 09		      STA	COLUBK
    330  f150		       a9 0f		      LDA	#SCORE_FONT_COLOR
    331  f152		       85 08		      STA	COLUPF
    332  f154		       20 0a f3 	      JSR	ClearPF
    333  f157		       a9 02		      LDA	#%00000010	; Score mode
    334  f159		       85 0a		      STA	CTRLPF
    335  f15b		       a0 04		      LDY	#SCORE_SIZE - 1
    336  f15d		       a2 00		      LDX	#0
    337  f15f
    338  f15f		       a5 86		      LDA	FrameCount0	;3
    339  f161		       29 01		      AND	#%00000001	;2
    340  f163		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    341  f165				   LeftScoreOn
    342  f165		       a9 0f		      LDA	#SCORE_FONT_COLOR
    343  f167		       85 07		      STA	COLUP1
    344  f169		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    345  f16b		       85 06		      STA	COLUP0
    346  f16d		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    347  f16f		       85 b1		      STA	Tmp1
    348  f171		       4c 80 f1 	      JMP	WaitForVblankEnd
    349  f174				   RightScoreOn
    350  f174		       a9 0f		      LDA	#SCORE_FONT_COLOR
    351  f176		       85 06		      STA	COLUP0
    352  f178		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    353  f17a		       85 07		      STA	COLUP1
    354  f17c		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    355  f17e		       85 b1		      STA	Tmp1
    356  f180
    357  f180
    358  f180							; After here we are going to update the screen, No more heavy code
    359  f180				   WaitForVblankEnd
    360  f180		       ad 84 02 	      LDA	INTIM
    361  f183		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    362  f185							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    363  f185		       85 01		      STA	VBLANK
    364  f187
    365  f187				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    366  f187		       85 02		      STA	WSYNC
    367  f189
    368  f189		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    369  f18b		       85 0d		      STA	PF0	;3
    370  f18d
    371  f18d		       a5 82		      LDA	PF1Cache	;3
    372  f18f		       85 0e		      STA	PF1	;3
    373  f191
    374  f191		       a5 83		      LDA	PF2Cache	;3
    375  f193		       85 0f		      STA	PF2	;3
    376  f195
    377  f195							;39
    378  f195				   DrawScore
    379  f195		       a6 d0		      LDX	ScoreD0	; 4
    380  f197		       bd 00 fd 	      LDA	Font,X	;4
    381  f19a		       85 81		      STA	PF0Cache	;3
    382  f19c		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    383  f19e							;17
    384  f19e
    385  f19e		       a6 d1		      LDX	ScoreD1	; 4
    386  f1a0		       bd 00 fd 	      LDA	Font,X	;4
    387  f1a3		       0a		      ASL		;2
    388  f1a4		       0a		      ASL		;2
    389  f1a5		       0a		      ASL		;2
    390  f1a6		       0a		      ASL		;2
    391  f1a7		       85 82		      STA	PF1Cache	;3
    392  f1a9		       c6 d1		      DEC	ScoreD1	;6
    393  f1ab							;9 (After Wsync)
    394  f1ab
    395  f1ab		       a6 d2		      LDX	ScoreD2	; 4
    396  f1ad		       bd 00 fd 	      LDA	Font,X	;4
    397  f1b0		       29 0f		      AND	#%00001111
    398  f1b2		       05 82		      ORA	PF1Cache	;3
    399  f1b4		       85 82		      STA	PF1Cache	;3
    400  f1b6		       c6 d2		      DEC	ScoreD2	;6
    401  f1b8							;20
    402  f1b8
    403  f1b8		       a6 d3		      LDX	ScoreD3	; 3
    404  f1ba		       bd 00 fd 	      LDA	Font,X	;4
    405  f1bd		       4a		      LSR		;2
    406  f1be		       4a		      LSR		;2
    407  f1bf		       4a		      LSR		;2
    408  f1c0		       4a		      LSR		;2
    409  f1c1		       85 83		      STA	PF2Cache	;3
    410  f1c3		       c6 d3		      DEC	ScoreD3	;5
    411  f1c5							;23
    412  f1c5
    413  f1c5		       a6 d4		      LDX	ScoreD4	; 3
    414  f1c7		       bd 00 fd 	      LDA	Font,X	;4
    415  f1ca		       29 f0		      AND	#%11110000
    416  f1cc		       05 83		      ORA	PF2Cache	;3
    417  f1ce		       85 83		      STA	PF2Cache	;3
    418  f1d0		       c6 d4		      DEC	ScoreD4	;5
    419  f1d2							;18
    420  f1d2
    421  f1d2		       88		      DEY		;2
    422  f1d3		       10 b2		      BPL	ScoreLoop	;4
    423  f1d5
    424  f1d5		       85 02		      STA	WSYNC
    425  f1d7
    426  f1d7		       20 19 f3 	      JSR	LoadPF
    427  f1da
    428  f1da		       85 02		      STA	WSYNC
    429  f1dc		       85 02		      STA	WSYNC
    430  f1de
    431  f1de				   PrepareForTraffic
    432  f1de		       20 0a f3 	      JSR	ClearPF	; 32
    433  f1e1
    434  f1e1		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    435  f1e3		       85 06		      STA	COLUP0
    436  f1e5
    437  f1e5		       a9 00		      LDA	#BACKGROUND_COLOR	;2
    438  f1e7		       85 07		      STA	COLUP1	;3
    439  f1e9
    440  f1e9							;Traffic colour
    441  f1e9		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    442  f1eb		       85 08		      STA	COLUPF	;3
    443  f1ed
    444  f1ed		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    445  f1ef
    446  f1ef		       a9 00		      LDA	#BACKGROUND_COLOR	;2 Make it in the very end, so we have one more nice blue line
      0  f1f1					      SLEEP	18	; Wait, so the line stay blue
      1  f1f1				   .CYCLES    SET	18
      2  f1f1
      3  f1f1				  -	      IF	.CYCLES < 2
      4  f1f1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1f1				  -	      ERR
      6  f1f1					      ENDIF
      7  f1f1
      8  f1f1				  -	      IF	.CYCLES & 1
      9  f1f1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1f1				  -	      nop	0
     11  f1f1				  -	      ELSE
     12  f1f1				  -	      bit	VSYNC
     13  f1f1				  -	      ENDIF
     14  f1f1				  -.CYCLES    SET	.CYCLES - 3
     15  f1f1					      ENDIF
     16  f1f1
     17  f1f1					      REPEAT	.CYCLES / 2
     18  f1f1		       ea		      nop
     17  f1f1					      REPEND
     18  f1f2		       ea		      nop
     17  f1f2					      REPEND
     18  f1f3		       ea		      nop
     17  f1f3					      REPEND
     18  f1f4		       ea		      nop
     17  f1f4					      REPEND
     18  f1f5		       ea		      nop
     17  f1f5					      REPEND
     18  f1f6		       ea		      nop
     17  f1f6					      REPEND
     18  f1f7		       ea		      nop
     17  f1f7					      REPEND
     18  f1f8		       ea		      nop
     17  f1f8					      REPEND
     18  f1f9		       ea		      nop
     19  f1fa					      REPEND
    448  f1fa		       85 09		      STA	COLUBK	;3
    449  f1fc
    450  f1fc
    451  f1fc							;main scanline loop...
    452  f1fc				   ScanLoop
    453  f1fc		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    454  f1fe
    455  f1fe							;Start of next line!			
    456  f1fe				   DrawCache		;36 Is the last line going to the top of the next frame?
    457  f1fe
    458  f1fe		       a5 81		      LDA	PF0Cache	;3
    459  f200		       85 0d		      STA	PF0	;3
    460  f202
    461  f202		       b9 00 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    462  f205		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    463  f207
    464  f207		       a5 82		      LDA	PF1Cache	;3
    465  f209		       85 0e		      STA	PF1	;3
    466  f20b
    467  f20b		       a5 83		      LDA	PF2Cache	;3
    468  f20d		       85 0f		      STA	PF2	;3
    469  f20f
    470  f20f		       a9 00		      LDA	#0	;2
    471  f211		       85 81		      STA	PF0Cache	;3
    472  f213		       85 82		      STA	PF1Cache	;3
    473  f215		       85 83		      STA	PF2Cache	;3
    474  f217
    475  f217							;BEQ DrawTraffic3
    476  f217				   DrawTraffic1 		; 32 
    477  f217		       98		      TYA		; 2
    478  f218		       18		      CLC		; 2 
    479  f219		       65 95		      ADC	TrafficOffset1 + 1	;3
    480  f21b		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    481  f21d		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    482  f21f		       45 96		      EOR	TrafficOffset1 + 2	; 3
    483  f221		       4c 26 f2 	      JMP	AfterEorOffsetWithCarry	; 3
    484  f224				   EorOffsetWithCarry
    485  f224		       45 97		      EOR	TrafficOffset1 + 3	; 3
    486  f226				   AfterEorOffsetWithCarry		;17
    487  f226		       aa		      TAX		;2
    488  f227		       bd 00 fe 	      LDA	AesTable,X	; 4
    489  f22a		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    490  f22c		       b0 04		      BCS	FinishDrawTraffic1	; 2
    491  f22e		       a9 60		      LDA	#%01100000	;2
    492  f230		       85 82		      STA	PF1Cache	;3
    493  f232				   FinishDrawTraffic1
    494  f232
    495  f232				   DrawTraffic2 		; 35
    496  f232		       98		      TYA		; 2
    497  f233		       18		      CLC		; 2 
    498  f234		       65 99		      ADC	TrafficOffset2 + 1	;3
    499  f236		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    500  f238		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    501  f23a		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    502  f23c		       4c 41 f2 	      JMP	AfterEorOffsetWithCarry2	; 3
    503  f23f				   EorOffsetWithCarry2
    504  f23f		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    505  f241				   AfterEorOffsetWithCarry2		;17
    506  f241		       aa		      TAX		;2
    507  f242		       bd 00 fe 	      LDA	AesTable,X	; 4
    508  f245		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    509  f247		       b0 06		      BCS	FinishDrawTraffic2	; 2
    510  f249		       a5 82		      LDA	PF1Cache	;3
    511  f24b		       09 0c		      ORA	#%00001100	;2
    512  f24d		       85 82		      STA	PF1Cache	;3
    513  f24f				   FinishDrawTraffic2
    514  f24f
    515  f24f							;STA WSYNC ;65 / 137
    516  f24f
    517  f24f							; LDA Tmp0 ; Flicker this line if drawing car
    518  f24f							; BEQ FinishDrawTraffic4
    519  f24f				   DrawTraffic3 		; 38
    520  f24f		       98		      TYA		; 2
    521  f250		       18		      CLC		; 2 
    522  f251		       65 9d		      ADC	TrafficOffset3 + 1	;3
    523  f253		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    524  f255		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    525  f257		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    526  f259		       4c 5e f2 	      JMP	AfterEorOffsetWithCarry3	; 3
    527  f25c				   EorOffsetWithCarry3
    528  f25c		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    529  f25e				   AfterEorOffsetWithCarry3		;17
    530  f25e		       aa		      TAX		;2
    531  f25f		       bd 00 fe 	      LDA	AesTable,X	; 4
    532  f262		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    533  f264		       b0 08		      BCS	FinishDrawTraffic3	; 2 
    534  f266		       a9 01		      LDA	#%00000001	;2
    535  f268		       85 83		      STA	PF2Cache	;3
    536  f26a		       05 82		      ORA	PF1Cache	;3
    537  f26c		       85 82		      STA	PF1Cache	;3
    538  f26e				   FinishDrawTraffic3
    539  f26e
    540  f26e				   DrawTraffic4 		; 35
    541  f26e		       98		      TYA		; 2
    542  f26f		       18		      CLC		; 2 
    543  f270		       65 a1		      ADC	TrafficOffset4 + 1	;3
    544  f272		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    545  f274		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    546  f276		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    547  f278		       4c 7d f2 	      JMP	AfterEorOffsetWithCarry4	; 3
    548  f27b				   EorOffsetWithCarry4
    549  f27b		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    550  f27d				   AfterEorOffsetWithCarry4		;17
    551  f27d		       aa		      TAX		;2
    552  f27e		       bd 00 fe 	      LDA	AesTable,X	; 4
    553  f281		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    554  f283		       b0 06		      BCS	FinishDrawTraffic4	; 2
    555  f285		       a5 83		      LDA	PF2Cache	;3
    556  f287		       09 0c		      ORA	#%00001100	;2
    557  f289		       85 83		      STA	PF2Cache	;3	
    558  f28b				   FinishDrawTraffic4
    559  f28b
    560  f28b				   DrawTraffic0 		; 24
    561  f28b		       98		      TYA		;2
    562  f28c		       18		      CLC		;2
    563  f28d		       65 91		      ADC	TrafficOffset0 + 1	; 3
    564  f28f		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    565  f291		       f0 0a		      BEQ	SkipDrawTraffic0	; 2
    566  f293		       a9 f0		      LDA	#%11110000	; 2
    567  f295		       85 81		      STA	PF0Cache	;3
    568  f297		       a5 83		      LDA	PF2Cache	;3
    569  f299		       09 e0		      ORA	#%11100000	;2
    570  f29b		       85 83		      STA	PF2Cache	; 3
    571  f29d				   SkipDrawTraffic0
    572  f29d
    573  f29d				   WhileScanLoop
    574  f29d		       88		      DEY		;2
    575  f29e		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    576  f2a0		       4c fc f1 	      JMP	ScanLoop	;3
    577  f2a3				   FinishScanLoop		; 7 209 of 222
    578  f2a3
    579  f2a3		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    580  f2a5
    581  f2a5		       20 19 f3 	      JSR	LoadPF
    582  f2a8
    583  f2a8		       85 02		      STA	WSYNC	; do stuff!
    584  f2aa		       85 02		      STA	WSYNC
    585  f2ac		       85 02		      STA	WSYNC
    586  f2ae							;42 cycles to use here
    587  f2ae
    588  f2ae				   PrepareOverscan
    589  f2ae		       a9 02		      LDA	#2
    590  f2b0		       85 02		      STA	WSYNC
    591  f2b2		       85 01		      STA	VBLANK
    592  f2b4
    593  f2b4		       a9 24		      LDA	#36	; one more line before overscan...
    594  f2b6		       8d 96 02 	      STA	TIM64T
    595  f2b9
    596  f2b9							;Could be done during on vblank to save this comparisson time (before draw score), 
    597  f2b9							;but I am saving vblank cycles for now, in case of 2 players.
    598  f2b9				   ChooseSide		; 
    599  f2b9		       a5 86		      LDA	FrameCount0	;3
    600  f2bb		       29 01		      AND	#%00000001	;2
    601  f2bd		       f0 37		      BEQ	RightScoreWrite	; Half of the screen with the correct colors.
    602  f2bf
    603  f2bf				   LeftScoreWrite
    604  f2bf				   WriteDistance		;Not optimized yet, ugly code.
    605  f2bf				   LetterS
    606  f2bf		       a9 59		      LDA	#<CS + #SCORE_SIZE -1	;3
    607  f2c1		       85 d0		      STA	ScoreD0	;3
    608  f2c3							;We "multiply by 5 to get the real distance in the table"
    609  f2c3				   Digit0Distance
    610  f2c3		       a5 91		      LDA	TrafficOffset0 + 1	;3
    611  f2c5		       29 0f		      AND	#%00001111	;2
    612  f2c7		       aa		      TAX		; 2
    613  f2c8		       bd 5a fd 	      LDA	FontLookup,X	;4 
    614  f2cb		       85 d4		      STA	ScoreD4	;3
    615  f2cd
    616  f2cd				   Digit1Distance
    617  f2cd		       a5 91		      LDA	TrafficOffset0 + 1	;3
    618  f2cf		       29 f0		      AND	#%11110000	;2
    619  f2d1		       4a		      LSR		; 2
    620  f2d2		       4a		      LSR		; 2
    621  f2d3		       4a		      LSR		; 2
    622  f2d4		       4a		      LSR		; 2
    623  f2d5		       aa		      TAX		; 2
    624  f2d6		       bd 5a fd 	      LDA	FontLookup,X	;4
    625  f2d9		       85 d3		      STA	ScoreD3	;3
    626  f2db
    627  f2db				   Digit2Distance
    628  f2db		       a5 92		      LDA	TrafficOffset0 + 2	;3
    629  f2dd		       29 0f		      AND	#%00001111	;2
    630  f2df		       aa		      TAX		; 2
    631  f2e0		       bd 5a fd 	      LDA	FontLookup,X	;4 
    632  f2e3		       85 d2		      STA	ScoreD2	;3
    633  f2e5
    634  f2e5				   Digit3Distance
    635  f2e5		       a5 92		      LDA	TrafficOffset0 + 2	;3
    636  f2e7		       29 f0		      AND	#%11110000	;2
    637  f2e9		       4a		      LSR		; 2
    638  f2ea		       4a		      LSR		; 2
    639  f2eb		       4a		      LSR		; 2
    640  f2ec		       4a		      LSR		; 2
    641  f2ed		       aa		      TAX		; 2
    642  f2ee		       bd 5a fd 	      LDA	FontLookup,X	;4
    643  f2f1		       85 d1		      STA	ScoreD1	;3
    644  f2f3				   EndDrawDistance
    645  f2f3		       4c 02 f3 	      JMP	RightScoreWriteEnd	;3
    646  f2f6
    647  f2f6				   RightScoreWrite
    648  f2f6		       a9 04		      LDA	#<C0 + #SCORE_SIZE -1	;3
    649  f2f8		       85 d0		      STA	ScoreD0	;3
    650  f2fa		       85 d1		      STA	ScoreD1	;3
    651  f2fc		       85 d2		      STA	ScoreD2	;3
    652  f2fe		       85 d3		      STA	ScoreD3	;3
    653  f300		       85 d4		      STA	ScoreD4	;3
    654  f302				   RightScoreWriteEnd
    655  f302
    656  f302				   OverScanWait
    657  f302		       ad 84 02 	      LDA	INTIM
    658  f305		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    659  f307		       4c 2b f0 	      JMP	MainLoop
    660  f30a
    661  f30a				   Subroutines
    662  f30a
    663  f30a				   ClearPF		; 26
    664  f30a		       a9 00		      LDA	#0	;2
    665  f30c		       85 0d		      STA	PF0	;3
    666  f30e		       85 0e		      STA	PF1	;3
    667  f310		       85 0f		      STA	PF2	;3	
    668  f312		       85 81		      STA	PF0Cache	;3
    669  f314		       85 82		      STA	PF1Cache	;3
    670  f316		       85 83		      STA	PF2Cache	;3 
    671  f318		       60		      RTS		;6
    672  f319
    673  f319				   LoadPF		; 24
    674  f319		       a5 81		      LDA	PF0Cache	;3
    675  f31b		       85 0d		      STA	PF0	;3
    676  f31d
    677  f31d		       a5 82		      LDA	PF1Cache	;3
    678  f31f		       85 0e		      STA	PF1	;3
    679  f321
    680  f321		       a5 83		      LDA	PF2Cache	;3
    681  f323		       85 0f		      STA	PF2	;3
    682  f325
    683  f325		       60		      RTS		;6
    684  f326
    685  f326							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
    686  fd00					      org	$FD00
    687  fd00				   Font
    688  fd00				   C0
    689  fd00		       e7		      .byte.b	#%11100111	;
    690  fd01		       a5		      .byte.b	#%10100101	; 
    691  fd02		       a5		      .byte.b	#%10100101	; 
    692  fd03		       a5		      .byte.b	#%10100101	; 
    693  fd04		       e7		      .byte.b	#%11100111	;	
    694  fd05				   C1
    695  fd05		       e7		      .byte.b	#%11100111	;
    696  fd06		       42		      .byte.b	#%01000010	; 
    697  fd07		       42		      .byte.b	#%01000010	; 
    698  fd08		       42		      .byte.b	#%01000010	; 
    699  fd09		       66		      .byte.b	#%01100110	;
    700  fd0a				   C2
    701  fd0a		       e7		      .byte.b	#%11100111	;
    702  fd0b		       24		      .byte.b	#%00100100	; 
    703  fd0c		       e7		      .byte.b	#%11100111	; 
    704  fd0d		       81		      .byte.b	#%10000001	; 
    705  fd0e		       e7		      .byte.b	#%11100111	;
    706  fd0f				   C3
    707  fd0f		       e7		      .byte.b	#%11100111	;
    708  fd10		       81		      .byte.b	#%10000001	; 
    709  fd11		       e7		      .byte.b	#%11100111	; 
    710  fd12		       81		      .byte.b	#%10000001	; 
    711  fd13		       e7		      .byte.b	#%11100111	;
    712  fd14				   C4
    713  fd14		       81		      .byte.b	#%10000001	;
    714  fd15		       81		      .byte.b	#%10000001	; 
    715  fd16		       e7		      .byte.b	#%11100111	; 
    716  fd17		       a5		      .byte.b	#%10100101	; 
    717  fd18		       a5		      .byte.b	#%10100101	;
    718  fd19				   C5
    719  fd19		       e7		      .byte.b	#%11100111	;
    720  fd1a		       81		      .byte.b	#%10000001	; 
    721  fd1b		       e7		      .byte.b	#%11100111	; 
    722  fd1c		       24		      .byte.b	#%00100100	; 
    723  fd1d		       e7		      .byte.b	#%11100111	;
    724  fd1e				   C6
    725  fd1e		       e7		      .byte.b	#%11100111	;
    726  fd1f		       a5		      .byte.b	#%10100101	; 
    727  fd20		       e7		      .byte.b	#%11100111	; 
    728  fd21		       24		      .byte.b	#%00100100	; 
    729  fd22		       e7		      .byte.b	#%11100111	;
    730  fd23				   C7
    731  fd23		       81		      .byte.b	#%10000001	;
    732  fd24		       81		      .byte.b	#%10000001	; 
    733  fd25		       81		      .byte.b	#%10000001	; 
    734  fd26		       81		      .byte.b	#%10000001	; 
    735  fd27		       e7		      .byte.b	#%11100111	;
    736  fd28				   C8
    737  fd28		       e7		      .byte.b	#%11100111	;
    738  fd29		       a5		      .byte.b	#%10100101	; 
    739  fd2a		       e7		      .byte.b	#%11100111	; 
    740  fd2b		       a5		      .byte.b	#%10100101	; 
    741  fd2c		       e7		      .byte.b	#%11100111	;
    742  fd2d				   C9
    743  fd2d		       e7		      .byte.b	#%11100111	;
    744  fd2e		       81		      .byte.b	#%10000001	; 
    745  fd2f		       e7		      .byte.b	#%11100111	; 
    746  fd30		       a5		      .byte.b	#%10100101	; 
    747  fd31		       e7		      .byte.b	#%11100111	;
    748  fd32				   CA
    749  fd32		       a5		      .byte.b	#%10100101	;
    750  fd33		       a5		      .byte.b	#%10100101	; 
    751  fd34		       e7		      .byte.b	#%11100111	; 
    752  fd35		       a5		      .byte.b	#%10100101	; 
    753  fd36		       e7		      .byte.b	#%11100111	;
    754  fd37				   CB
    755  fd37		       66		      .byte.b	#%01100110	;
    756  fd38		       a5		      .byte.b	#%10100101	; 
    757  fd39		       66		      .byte.b	#%01100110	; 
    758  fd3a		       a5		      .byte.b	#%10100101	;
    759  fd3b		       66		      .byte.b	#%01100110	;
    760  fd3c				   CC
    761  fd3c		       e7		      .byte.b	#%11100111	;
    762  fd3d		       24		      .byte.b	#%00100100	; 
    763  fd3e		       24		      .byte.b	#%00100100	; 
    764  fd3f		       24		      .byte.b	#%00100100	;
    765  fd40		       e7		      .byte.b	#%11100111	;
    766  fd41
    767  fd41				   CD
    768  fd41		       66		      .byte.b	#%01100110	;
    769  fd42		       a5		      .byte.b	#%10100101	; 
    770  fd43		       a5		      .byte.b	#%10100101	; 
    771  fd44		       a5		      .byte.b	#%10100101	;
    772  fd45		       66		      .byte.b	#%01100110	;
    773  fd46
    774  fd46				   CE
    775  fd46		       e7		      .byte.b	#%11100111	;
    776  fd47		       24		      .byte.b	#%00100100	; 
    777  fd48		       e7		      .byte.b	#%11100111	; 
    778  fd49		       24		      .byte.b	#%00100100	; 
    779  fd4a		       e7		      .byte.b	#%11100111	;
    780  fd4b
    781  fd4b				   CF
    782  fd4b		       24		      .byte.b	#%00100100	;
    783  fd4c		       24		      .byte.b	#%00100100	; 
    784  fd4d		       e7		      .byte.b	#%11100111	; 
    785  fd4e		       24		      .byte.b	#%00100100	; 
    786  fd4f		       e7		      .byte.b	#%11100111	;
    787  fd50
    788  fd50				   Space		; Moved from the beggining so 0 to F is fast to draw.
    789  fd50		       00		      .byte.b	%0	;
    790  fd51		       00		      .byte.b	#0	;
    791  fd52		       00		      .byte.b	#0	;
    792  fd53		       00		      .byte.b	#0	;
    793  fd54		       00		      .byte.b	#0	;
    794  fd55
    795  fd55				   CS
    796  fd55		       66		      .byte.b	#%01100110	;
    797  fd56		       81		      .byte.b	#%10000001	; 
    798  fd57		       42		      .byte.b	#%01000010	; 
    799  fd58		       24		      .byte.b	#%00100100	; 
    800  fd59		       c3		      .byte.b	#%11000011	;
    801  fd5a
    802  fd5a				   FontLookup		; Very fast font lookup for dynamic values!
    803  fd5a		       04		      .byte.b	#<C0 + #SCORE_SIZE -1
    804  fd5b		       09		      .byte.b	#<C1 + #SCORE_SIZE -1
    805  fd5c		       0e		      .byte.b	#<C2 + #SCORE_SIZE -1
    806  fd5d		       13		      .byte.b	#<C3 + #SCORE_SIZE -1
    807  fd5e		       18		      .byte.b	#<C4 + #SCORE_SIZE -1
    808  fd5f		       1d		      .byte.b	#<C5 + #SCORE_SIZE -1
    809  fd60		       22		      .byte.b	#<C6 + #SCORE_SIZE -1
    810  fd61		       27		      .byte.b	#<C7 + #SCORE_SIZE -1
    811  fd62		       2c		      .byte.b	#<C8 + #SCORE_SIZE -1
    812  fd63		       31		      .byte.b	#<C9 + #SCORE_SIZE -1
    813  fd64		       36		      .byte.b	#<CA + #SCORE_SIZE -1
    814  fd65		       3b		      .byte.b	#<CB + #SCORE_SIZE -1
    815  fd66		       40		      .byte.b	#<CC + #SCORE_SIZE -1
    816  fd67		       45		      .byte.b	#<CD + #SCORE_SIZE -1
    817  fd68		       4a		      .byte.b	#<CE + #SCORE_SIZE -1
    818  fd69		       4f		      .byte.b	#<CF + #SCORE_SIZE -1
    819  fd6a
    820  fd6a
    821  fe00					      org	$FE00
    822  fe00				   AesTable
    823  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    824  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    825  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    826  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    827  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    828  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    829  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    830  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    831  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    832  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    833  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    834  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    835  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    836  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    837  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    838  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    839  ff00
    840  ff00							; From FF00 to FFFB (122 bytes) to use here
    841  ff00
    842  ff00				   CarSprite		; Upside down
    843  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    844  ff01		       7e		      .byte.b	#%01111110
    845  ff02		       24		      .byte.b	#%00100100
    846  ff03		       bd		      .byte.b	#%10111101
    847  ff04		       3c		      .byte.b	#%00111100
    848  ff05		       bd		      .byte.b	#%10111101
    849  ff06		       3c		      .byte.b	#%00111100
    850  ff07		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
    851  ff39
    852  ff39
    853  ff39				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    854  ff39		       00		      .byte.b	#$00	;  Trafic0 L
    855  ff3a		       00		      .byte.b	#$00	;  Trafic0 H
    856  ff3b		       0a		      .byte.b	#$0A	;  Trafic1 L
    857  ff3c		       01		      .byte.b	#$01	;  Trafic1 H
    858  ff3d		       e6		      .byte.b	#$E6	;  Trafic2 L
    859  ff3e		       00		      .byte.b	#$00	;  Trafic2 H
    860  ff3f		       c2		      .byte.b	#$C2	;  Trafic3 L
    861  ff40		       00		      .byte.b	#$00	;  Trafic3 H
    862  ff41		       9e		      .byte.b	#$9E	;  Trafic4 L
    863  ff42		       00		      .byte.b	#$00	;  Trafic4 H
    864  ff43
    865  ff43
    866  fffc					      org	$FFFC
    867  fffc		       00 f0		      .word.w	Start
    868  fffe		       00 f0		      .word.w	Start
