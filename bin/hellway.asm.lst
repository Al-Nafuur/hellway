------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0c	   BREAK_SPEED =	12
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 88	   ParallaxMode =	$88
    111  f000
    112  f000		       00 8c	   FrameCount0 =	$8C	;
    113  f000		       00 8d	   FrameCount1 =	$8D	;
    114  f000
    115  f000		       00 8e	   Player0SpeedL =	$8E
    116  f000		       00 8f	   Player0SpeedH =	$8F
    117  f000
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    123  f000
    124  f000		       00 a4	   CheckpointBcd0 =	$A4
    125  f000		       00 a5	   CheckpointBcd1 =	$A5
    126  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    127  f000		       00 a7	   CarSpritePointerL =	$A7
    128  f000		       00 a8	   CarSpritePointerH =	$A8
    129  f000		       00 a9	   CurrentCarId =	$A9
    130  f000		       00 aa	   AccelerateBuffer =	$AA	; Chnage speed on buffer overflow.
    131  f000
    132  f000							;Temporary variables, multiple uses
    133  f000		       00 b0	   Tmp0       =	$B0
    134  f000		       00 b1	   Tmp1       =	$B1
    135  f000		       00 b2	   Tmp2       =	$B2
    136  f000		       00 b3	   Tmp3       =	$B3
    137  f000
    138  f000		       00 b4	   ScoreBcd0  =	$B4
    139  f000		       00 b5	   ScoreBcd1  =	$B5
    140  f000		       00 b6	   ScoreBcd2  =	$B6
    141  f000		       00 b7	   ScoreBcd3  =	$B7
    142  f000
    143  f000		       00 b8	   CollisionCounter =	$B8
    144  f000		       00 b9	   Player0X   =	$B9
    145  f000		       00 ba	   CountdownTimer =	$BA
    146  f000		       00 bb	   Traffic0Msb =	$BB
    147  f000		       00 bc	   SwitchDebounceCounter =	$BC
    148  f000
    149  f000		       00 bd	   TimeBcd0   =	$BD
    150  f000		       00 be	   TimeBcd1   =	$BE
    151  f000		       00 bf	   TimeBcd2   =	$BF
    152  f000
    153  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    154  f000		       00 c1	   TrafficChance =	$C1
    155  f000		       00 c2	   CheckpointTime =	$C2
    156  f000		       00 c3	   TrafficColor =	$C3
    157  f000		       00 c4	   CurrentDifficulty =	$C4
    158  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    159  f000							;Bit 2 speed delta, Bit 3 random traffic 
    160  f000
    161  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    162  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    163  f000
    164  f000		       00 ca	   BorderType =	$CA
    165  f000
    166  f000		       00 cb	   HitCountBcd0 =	$CB
    167  f000		       00 cc	   HitCountBcd1 =	$CC
    168  f000
    169  f000		       00 cd	   GlideTimeBcd0 =	$CD
    170  f000		       00 ce	   GlideTimeBcd1 =	$CE
    171  f000
    172  f000		       00 cf	   OneSecondConter =	$CF
    173  f000
    174  f000		       00 d0	   ScoreD0    =	$D0
    175  f000		       00 d1	   ScoreD1    =	$D1
    176  f000		       00 d2	   ScoreD2    =	$D2
    177  f000		       00 d3	   ScoreD3    =	$D3
    178  f000		       00 d4	   ScoreD4    =	$D4
    179  f000		       00 d5	   ScoreFontColor =	$D5
    180  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    181  f000		       00 d7	   NextCheckpoint =	$D7
    182  f000
    183  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    184  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    185  f000
    186  f000
    187  f000							;generic start up stuff, put zero in almost all...
    188  f000				   BeforeStart		;All variables that are kept on game reset or select
    189  f000		       a0 00		      LDY	#0
    190  f002		       84 bc		      STY	SwitchDebounceCounter
    191  f004		       84 c4		      STY	CurrentDifficulty
    192  f006		       84 c0		      STY	GameStatus
    193  f008		       a0 10		      LDY	#16
    194  f00a		       84 c5		      STY	GameMode
    195  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    196  f00e		       84 88		      STY	ParallaxMode
    197  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    198  f012		       84 a9		      STY	CurrentCarId
    199  f014
    200  f014				   Start
    201  f014		       78		      SEI
    202  f015		       d8		      CLD
    203  f016		       a2 ff		      LDX	#$FF
    204  f018		       9a		      TXS
    205  f019		       a9 00		      LDA	#0
    206  f01b				   ClearMem
    207  f01b		       e0 bc		      CPX	#SwitchDebounceCounter
    208  f01d		       f0 16		      BEQ	SkipClean
    209  f01f		       e0 c5		      CPX	#GameMode
    210  f021		       f0 12		      BEQ	SkipClean
    211  f023		       e0 88		      CPX	#ParallaxMode
    212  f025		       f0 0e		      BEQ	SkipClean
    213  f027		       e0 a9		      CPX	#CurrentCarId
    214  f029		       f0 0a		      BEQ	SkipClean
    215  f02b		       e0 c4		      CPX	#CurrentDifficulty
    216  f02d		       f0 06		      BEQ	SkipClean
    217  f02f		       e0 c0		      CPX	#GameStatus
    218  f031		       f0 02		      BEQ	SkipClean
    219  f033		       95 00		      STA	0,X
    220  f035				   SkipClean
    221  f035		       ca		      DEX
    222  f036		       d0 e3		      BNE	ClearMem
    223  f038
    224  f038							;Setting some variables...
    225  f038
    226  f038				   SettingTrafficOffsets		; Time sensitive with player H position
    227  f038		       85 02		      STA	WSYNC	;We will set player position
    228  f03a		       20 d7 f7 	      JSR	DefaultOffsets
    229  f03d
    230  f03d		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    231  f040		       85 8e		      STA	Player0SpeedL
    232  f042
      0  f042					      SLEEP	11	;18
      1  f042				   .CYCLES    SET	11
      2  f042
      3  f042				  -	      IF	.CYCLES < 2
      4  f042				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f042				  -	      ERR
      6  f042					      ENDIF
      7  f042
      8  f042					      IF	.CYCLES & 1
      9  f042				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f042				  -	      nop	0
     11  f042					      ELSE
     12  f042		       24 00		      bit	VSYNC
     13  f044					      ENDIF
     14  f044				   .CYCLES    SET	.CYCLES - 3
     15  f044					      ENDIF
     16  f044
     17  f044					      REPEAT	.CYCLES / 2
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     19  f048					      REPEND
    234  f048		       85 10		      STA	RESP0
    235  f04a
    236  f04a		       a2 00		      LDX	#0
    237  f04c		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    238  f04f		       85 a6		      STA	StartSWCHB	; For game over
    239  f051		       29 c0		      AND	#%11000000
    240  f053		       f0 0b		      BEQ	CallConfigureDifficulty
    241  f055		       e8		      INX
    242  f056		       c9 80		      CMP	#%10000000
    243  f058		       f0 06		      BEQ	CallConfigureDifficulty
    244  f05a		       e8		      INX
    245  f05b		       c9 40		      CMP	#%01000000
    246  f05d		       f0 01		      BEQ	CallConfigureDifficulty
    247  f05f		       e8		      INX
    248  f060
    249  f060				   CallConfigureDifficulty
    250  f060		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    251  f062		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    252  f064		       a5 c0		      LDA	GameStatus
    253  f066		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    254  f068				   NextCar
    255  f068		       a4 a9		      LDY	CurrentCarId
    256  f06a		       c8		      INY
    257  f06b		       98		      TYA
    258  f06c		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    259  f06e		       85 a9		      STA	CurrentCarId
    260  f070				   StoreCurrentDifficulty
    261  f070		       86 c4		      STX	CurrentDifficulty
    262  f072		       20 8f f7 	      JSR	ConfigureDifficulty
    263  f075
    264  f075				   ConfigureCarSprite
    265  f075		       a4 a9		      LDY	CurrentCarId
    266  f077		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    267  f07a		       85 a7		      STA	CarSpritePointerL
    268  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    269  f07f		       85 a8		      STA	CarSpritePointerH
    270  f081
    271  f081				   SetGameNotRunning
    272  f081		       a9 00		      LDA	#0
    273  f083		       85 c0		      STA	GameStatus
    274  f085
    275  f085				   ConfigureOneSecondTimer
    276  f085		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    277  f087		       85 cf		      STA	OneSecondConter
    278  f089
    279  f089				   HPositioning
    280  f089		       85 02		      STA	WSYNC
    281  f08b
    282  f08b		       a9 30		      LDA	#%00110000	;2 Missile Size
    283  f08d		       85 04		      STA	NUSIZ0	;3
    284  f08f		       85 05		      STA	NUSIZ1	;3
    285  f091
    286  f091		       a9 35		      LDA	#PLAYER_0_X_START	;2
    287  f093		       85 b9		      STA	Player0X	;3
    288  f095
    289  f095		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    290  f097		       85 ba		      STA	CountdownTimer	;3
    291  f099
    292  f099		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    293  f09b		       85 d7		      STA	NextCheckpoint
    294  f09d
    295  f09d		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f09f					      SLEEP	11	;
      1  f09f				   .CYCLES    SET	11
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f					      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f					      ELSE
     12  f09f		       24 00		      bit	VSYNC
     13  f0a1					      ENDIF
     14  f0a1				   .CYCLES    SET	.CYCLES - 3
     15  f0a1					      ENDIF
     16  f0a1
     17  f0a1					      REPEAT	.CYCLES / 2
     18  f0a1		       ea		      nop
     17  f0a1					      REPEND
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     17  f0a3					      REPEND
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    297  f0a5		       85 11		      STA	RESP1
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    299  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2	;
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    301  f0ab		       85 12		      STA	RESM0
      0  f0ad					      SLEEP	2
      1  f0ad				   .CYCLES    SET	2
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad				  -	      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad				  -	      ELSE
     12  f0ad				  -	      bit	VSYNC
     13  f0ad				  -	      ENDIF
     14  f0ad				  -.CYCLES    SET	.CYCLES - 3
     15  f0ad					      ENDIF
     16  f0ad
     17  f0ad					      REPEAT	.CYCLES / 2
     18  f0ad		       ea		      nop
     19  f0ae					      REPEND
    303  f0ae		       85 13		      STA	RESM1
    304  f0b0
    305  f0b0		       a9 f0		      LDA	#$F0
    306  f0b2		       85 24		      STA	HMBL
    307  f0b4		       85 22		      STA	HMM0
    308  f0b6		       85 23		      STA	HMM1
    309  f0b8		       85 02		      STA	WSYNC
    310  f0ba		       85 2a		      STA	HMOVE
    311  f0bc		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    312  f0be		       85 2b		      STA	HMCLR
    313  f0c0
    314  f0c0							;SLEEP 24
    315  f0c0							;STA HMCLR
    316  f0c0
    317  f0c0							;VSYNC time
    318  f0c0				   MainLoop
    319  f0c0		       a9 02		      LDA	#2
    320  f0c2		       85 00		      STA	VSYNC
    321  f0c4		       85 02		      STA	WSYNC
    322  f0c6		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    323  f0c8		       85 2a		      STA	HMOVE	;2
    324  f0ca				   ConfigVBlankTimer
    325  f0ca		       a5 c5		      LDA	GameMode
    326  f0cc		       c9 10		      CMP	#MAX_GAME_MODE
    327  f0ce		       f0 05		      BEQ	SetVblankTimerQrCode
    328  f0d0		       a9 29		      LDA	#VBLANK_TIMER
    329  f0d2		       4c d7 f0 	      JMP	SetVblankTimer
    330  f0d5				   SetVblankTimerQrCode
    331  f0d5		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    332  f0d7				   SetVblankTimer
    333  f0d7		       85 02		      STA	WSYNC	;3
    334  f0d9		       8d 96 02 	      STA	TIM64T	;3	
    335  f0dc		       a9 00		      LDA	#0	;2
    336  f0de		       85 00		      STA	VSYNC	;3	
    337  f0e0
    338  f0e0							;Read Fire Button before, will make it start the game for now.
    339  f0e0				   StartGame
    340  f0e0		       a5 0c		      LDA	INPT4	;3
    341  f0e2		       30 2e		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    342  f0e4		       a5 c0		      LDA	GameStatus	;3
    343  f0e6		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
    344  f0e8		       d0 28		      BNE	SkipGameStart
    345  f0ea		       a5 c5		      LDA	GameMode
    346  f0ec		       c9 10		      CMP	#MAX_GAME_MODE
    347  f0ee		       d0 0b		      BNE	SetGameRunning
    348  f0f0		       a9 00		      LDA	#0
    349  f0f2		       85 c5		      STA	GameMode
    350  f0f4		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    351  f0f6		       85 bc		      STA	SwitchDebounceCounter
    352  f0f8		       4c 12 f1 	      JMP	SkipGameStart
    353  f0fb				   SetGameRunning
    354  f0fb		       e6 c0		      INC	GameStatus
    355  f0fd		       a9 00		      LDA	#0	;
    356  f0ff		       85 8c		      STA	FrameCount0
    357  f101		       85 8d		      STA	FrameCount1
    358  f103		       a9 0a		      LDA	#10
    359  f105		       85 19		      STA	AUDV0
    360  f107		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    361  f109		       85 d5		      STA	ScoreFontColor
    362  f10b		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    363  f10d		       85 d6		      STA	ScoreFontColorHoldChange
    364  f10f		       4c 8e f1 	      JMP	SkipIncFC1	; Make the worse case stable
    365  f112				   SkipGameStart
    366  f112
    367  f112				   RandomizeGame
    368  f112		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    369  f114		       d0 30		      BNE	EndRandomizeGame
    370  f116		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    371  f118		       29 02		      AND	#%00000010
    372  f11a		       f0 27		      BEQ	DeterministicGame
    373  f11c		       a6 96		      LDX	TrafficOffset1 + 2
    374  f11e		       bd 00 fe 	      LDA	AesTable,X
    375  f121		       45 8c		      EOR	FrameCount0
    376  f123		       85 96		      STA	TrafficOffset1 + 2
    377  f125		       a6 9a		      LDX	TrafficOffset2 + 2
    378  f127		       bd 00 fe 	      LDA	AesTable,X
    379  f12a		       45 8c		      EOR	FrameCount0
    380  f12c		       85 9a		      STA	TrafficOffset2 + 2
    381  f12e		       a6 9e		      LDX	TrafficOffset3 + 2
    382  f130		       bd 00 fe 	      LDA	AesTable,X
    383  f133		       45 8c		      EOR	FrameCount0
    384  f135		       85 9e		      STA	TrafficOffset3 + 2
    385  f137		       a6 a2		      LDX	TrafficOffset4 + 2
    386  f139		       bd 00 fe 	      LDA	AesTable,X
    387  f13c		       45 8c		      EOR	FrameCount0
    388  f13e		       85 a2		      STA	TrafficOffset4 + 2
    389  f140		       4c 46 f1 	      JMP	EndRandomizeGame
    390  f143
    391  f143				   DeterministicGame
    392  f143		       20 d7 f7 	      JSR	DefaultOffsets
    393  f146
    394  f146				   EndRandomizeGame
    395  f146
    396  f146				   ReadSwitches
    397  f146		       a6 bc		      LDX	SwitchDebounceCounter
    398  f148		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    399  f14a		       a9 01		      LDA	#%00000001
    400  f14c		       2c 82 02 	      BIT	SWCHB
    401  f14f		       d0 07		      BNE	SkipReset
    402  f151		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    403  f153		       85 bc		      STA	SwitchDebounceCounter
    404  f155		       4c 14 f0 	      JMP	Start
    405  f158				   SkipReset
    406  f158
    407  f158				   GameModeSelect
    408  f158		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    409  f15a		       d0 27		      BNE	SkipGameSelect
    410  f15c		       20 8f f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    411  f15f				   ReadDpadParallax
    412  f15f		       ad 80 02 	      LDA	SWCHA
    413  f162		       29 f0		      AND	#%11110000
    414  f164		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    415  f166		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    416  f168		       85 88		      STA	ParallaxMode
    417  f16a				   ContinueGameSelect
    418  f16a		       a9 02		      LDA	#%00000010
    419  f16c		       2c 82 02 	      BIT	SWCHB
    420  f16f		       d0 12		      BNE	SkipGameSelect
    421  f171		       a6 c5		      LDX	GameMode
    422  f173		       e0 10		      CPX	#MAX_GAME_MODE
    423  f175		       f0 04		      BEQ	ResetGameMode
    424  f177		       e8		      INX
    425  f178		       4c 7d f1 	      JMP	StoreGameMode
    426  f17b				   ResetGameMode
    427  f17b		       a2 00		      LDX	#0
    428  f17d				   StoreGameMode
    429  f17d		       86 c5		      STX	GameMode
    430  f17f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    431  f181		       85 bc		      STA	SwitchDebounceCounter
    432  f183				   SkipGameSelect
    433  f183		       4c 88 f1 	      JMP	EndReadSwitches
    434  f186				   DecrementSwitchDebounceCounter
    435  f186		       c6 bc		      DEC	SwitchDebounceCounter
    436  f188				   EndReadSwitches
    437  f188
    438  f188				   CountFrame
    439  f188		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    440  f18a		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    441  f18c		       e6 8d		      INC	FrameCount1	; 5 Still not used
    442  f18e				   SkipIncFC1
    443  f18e
    444  f18e				   CallDrawQrCode
    445  f18e		       a5 c5		      LDA	GameMode
    446  f190		       c9 10		      CMP	#MAX_GAME_MODE
    447  f192		       d0 03		      BNE	TestIsGameRunning
    448  f194		       4c 64 fc 	      JMP	DrawQrCode
    449  f197
    450  f197							;Does not update the game if not running
    451  f197				   TestIsGameRunning
    452  f197		       a5 c0		      LDA	GameStatus	;3
    453  f199		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    454  f19b		       4c 93 f3 	      JMP	SkipUpdateLogic
    455  f19e				   ContinueWithGameLogic
    456  f19e
    457  f19e
    458  f19e				   EverySecond		; 64 frames to be more precise
    459  f19e		       a9 3f		      LDA	#%00111111
    460  f1a0		       25 8c		      AND	FrameCount0
    461  f1a2		       d0 06		      BNE	SkipEverySecondAction
    462  f1a4		       c5 ba		      CMP	CountdownTimer
    463  f1a6		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    464  f1a8		       c6 ba		      DEC	CountdownTimer
    465  f1aa				   SkipEverySecondAction
    466  f1aa
    467  f1aa
    468  f1aa				   BreakOnTimeOver		; Uses LDX as the breaking speed
    469  f1aa		       a2 00		      LDX	#0
    470  f1ac		       a5 ba		      LDA	CountdownTimer
    471  f1ae		       d0 0b		      BNE	Break
    472  f1b0		       a4 a9		      LDY	CurrentCarId
    473  f1b2		       a5 8c		      LDA	FrameCount0
    474  f1b4		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    475  f1b7		       d0 02		      BNE	Break
    476  f1b9		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    477  f1bb
    478  f1bb				   Break
    479  f1bb		       a9 20		      LDA	#%00100000	;Down in controller
    480  f1bd		       2c 80 02 	      BIT	SWCHA
    481  f1c0		       d0 0b		      BNE	BreakNonZero
    482  f1c2		       a5 0c		      LDA	INPT4	;3
    483  f1c4		       10 05		      BPL	BreakWhileAccelerating
    484  f1c6		       a2 0c		      LDX	#BREAK_SPEED
    485  f1c8		       4c cd f1 	      JMP	BreakNonZero
    486  f1cb				   BreakWhileAccelerating		; Allow better control while breaking.
    487  f1cb		       a2 06		      LDX	#(BREAK_SPEED / 2)
    488  f1cd
    489  f1cd				   BreakNonZero
    490  f1cd		       e0 00		      CPX	#0
    491  f1cf		       f0 2b		      BEQ	SkipBreak
    492  f1d1		       86 b0		      STX	Tmp0
    493  f1d3
    494  f1d3				   DecreaseSpeed
    495  f1d3		       38		      SEC
    496  f1d4		       a5 8e		      LDA	Player0SpeedL
    497  f1d6		       e5 b0		      SBC	Tmp0
    498  f1d8		       85 8e		      STA	Player0SpeedL
    499  f1da		       a5 8f		      LDA	Player0SpeedH
    500  f1dc		       e9 00		      SBC	#0
    501  f1de		       85 8f		      STA	Player0SpeedH
    502  f1e0
    503  f1e0				   CheckMinSpeed
    504  f1e0		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    505  f1e2		       c9 00		      CMP	#CAR_MIN_SPEED_H
    506  f1e4		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    507  f1e6		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    508  f1e8
    509  f1e8				   CompareLBreakSpeed
    510  f1e8		       a5 8e		      LDA	Player0SpeedL
    511  f1ea		       c9 00		      CMP	#CAR_MIN_SPEED_L
    512  f1ec		       90 03		      BCC	ResetMinSpeed	; Less than memory
    513  f1ee		       4c f9 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    514  f1f1
    515  f1f1				   ResetMinSpeed
    516  f1f1		       a9 00		      LDA	#CAR_MIN_SPEED_H
    517  f1f3		       85 8f		      STA	Player0SpeedH
    518  f1f5		       a9 00		      LDA	#CAR_MIN_SPEED_L
    519  f1f7		       85 8e		      STA	Player0SpeedL
    520  f1f9
    521  f1f9				   SkipAccelerateIfBreaking
    522  f1f9		       4c 3e f2 	      JMP	SkipAccelerate
    523  f1fc				   SkipBreak
    524  f1fc
    525  f1fc				   Acelerates
    526  f1fc		       a5 ba		      LDA	CountdownTimer
    527  f1fe		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    528  f200
    529  f200				   ContinueAccelerateTest
    530  f200		       a5 0c		      LDA	INPT4	;3
    531  f202		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    532  f204		       a9 10		      LDA	#%00010000	;UP in controller
    533  f206		       2c 80 02 	      BIT	SWCHA
    534  f209		       d0 33		      BNE	SkipAccelerate
    535  f20b
    536  f20b				   IncreaseCarSpeed
    537  f20b		       a2 02		      LDX	#2
    538  f20d		       a4 a9		      LDY	CurrentCarId
    539  f20f				   IncreaseCarSpeedLoop
    540  f20f							;Adds speed
    541  f20f		       18		      CLC
    542  f210		       a5 aa		      LDA	AccelerateBuffer
    543  f212		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    544  f215		       85 aa		      STA	AccelerateBuffer
    545  f217		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    546  f219		       e6 8e		      INC	Player0SpeedL
    547  f21b		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    548  f21d		       e6 8f		      INC	Player0SpeedH
    549  f21f				   ContinueIncreaseSpeedLoop
    550  f21f		       ca		      DEX
    551  f220		       d0 ed		      BNE	IncreaseCarSpeedLoop
    552  f222				   SkipIncreaseCarSpeed
    553  f222
    554  f222				   CheckIfAlreadyMaxSpeed
    555  f222		       a5 8f		      LDA	Player0SpeedH
    556  f224		       c9 02		      CMP	#CAR_MAX_SPEED_H
    557  f226		       90 16		      BCC	SkipAccelerate	; less than my max speed
    558  f228		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    559  f22a							;High bit is max, compare the low
    560  f22a		       a4 a9		      LDY	CurrentCarId
    561  f22c		       a5 8e		      LDA	Player0SpeedL
    562  f22e		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    563  f231		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    564  f233							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    565  f233
    566  f233				   ResetToMaxSpeed		; Speed is more, or is already max
    567  f233		       a9 02		      LDA	#CAR_MAX_SPEED_H
    568  f235		       85 8f		      STA	Player0SpeedH
    569  f237		       a4 a9		      LDY	CurrentCarId
    570  f239		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    571  f23c		       85 8e		      STA	Player0SpeedL
    572  f23e				   SkipAccelerate
    573  f23e
    574  f23e				   InitUpdateOffsets
    575  f23e		       a2 00		      LDX	#0	; Memory Offset 24 bit
    576  f240		       a0 00		      LDY	#0	; Line Speeds 16 bits
    577  f242		       a5 91		      LDA	TrafficOffset0 + 1	;
    578  f244		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    579  f246		       a5 c5		      LDA	GameMode
    580  f248		       29 04		      AND	#%00000100	; GameModes with high delta
    581  f24a		       f0 02		      BEQ	UpdateOffsets
    582  f24c		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    583  f24e
    584  f24e				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    585  f24e		       38		      SEC
    586  f24f		       a5 8e		      LDA	Player0SpeedL
    587  f251		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    588  f254		       85 b0		      STA	Tmp0
    589  f256		       c8		      INY
    590  f257		       a5 8f		      LDA	Player0SpeedH
    591  f259		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    592  f25c		       85 b1		      STA	Tmp1
    593  f25e		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    594  f260		       e9 00		      SBC	#0
    595  f262		       85 b2		      STA	Tmp2
    596  f264
    597  f264				   AddsTheResult
    598  f264		       18		      CLC
    599  f265		       a5 b0		      LDA	Tmp0
    600  f267		       75 90		      ADC	TrafficOffset0,X
    601  f269		       95 90		      STA	TrafficOffset0,X
    602  f26b		       e8		      INX
    603  f26c		       a5 b1		      LDA	Tmp1
    604  f26e		       75 90		      ADC	TrafficOffset0,X
    605  f270		       95 90		      STA	TrafficOffset0,X
    606  f272		       e8		      INX
    607  f273		       a5 b2		      LDA	Tmp2	; Carry
    608  f275		       75 90		      ADC	TrafficOffset0,X
    609  f277		       95 90		      STA	TrafficOffset0,X
    610  f279		       90 06		      BCC	CalculateOffsetCache
    611  f27b		       e0 02		      CPX	#2	;MSB offset 0
    612  f27d		       d0 02		      BNE	CalculateOffsetCache
    613  f27f		       e6 bb		      INC	Traffic0Msb
    614  f281
    615  f281				   CalculateOffsetCache
    616  f281		       e8		      INX
    617  f282		       38		      SEC
    618  f283		       69 00		      ADC	#0	;Increment by one
    619  f285		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    620  f287
    621  f287				   PrepareNextUpdateLoop
    622  f287		       c8		      INY
    623  f288		       e8		      INX
    624  f289		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    625  f28b		       d0 c1		      BNE	UpdateOffsets
    626  f28d
    627  f28d				   BcdScore		; 48
    628  f28d		       a5 91		      LDA	TrafficOffset0 + 1	;3
    629  f28f		       45 b3		      EOR	Tmp3	;3
    630  f291		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    631  f293		       f0 1b		      BEQ	FinishBcdScore	;2
    632  f295
    633  f295				   ContinueBcdScore
    634  f295		       f8		      SED		;2
    635  f296		       18		      CLC		;2
    636  f297		       a5 b4		      LDA	ScoreBcd0	;3
    637  f299		       69 01		      ADC	#1	;2
    638  f29b		       85 b4		      STA	ScoreBcd0	;3
    639  f29d		       a5 b5		      LDA	ScoreBcd1	;3
    640  f29f		       69 00		      ADC	#0	;2
    641  f2a1		       85 b5		      STA	ScoreBcd1	;3
    642  f2a3		       a5 b6		      LDA	ScoreBcd2	;3
    643  f2a5		       69 00		      ADC	#0	;2
    644  f2a7		       85 b6		      STA	ScoreBcd2	;3
    645  f2a9		       a5 b7		      LDA	ScoreBcd3	;3
    646  f2ab		       69 00		      ADC	#0	;2
    647  f2ad		       85 b7		      STA	ScoreBcd3	;3
    648  f2af		       d8		      CLD		;2
    649  f2b0				   FinishBcdScore
    650  f2b0
    651  f2b0							;Until store the movemnt, LDX contains the value to be stored.
    652  f2b0				   TestCollision		;
    653  f2b0							; see if player0 colides with the rest
    654  f2b0		       a5 00		      LDA	CXM0P
    655  f2b2		       05 01		      ORA	CXM1P
    656  f2b4		       05 01		      ORA	CXM1P
    657  f2b6		       05 02		      ORA	CXP0FB
    658  f2b8		       05 07		      ORA	CXPPMM
    659  f2ba		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    660  f2bc		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    661  f2be		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    662  f2c0		       d0 3a		      BNE	NoCollision
    663  f2c2		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    664  f2c4		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    665  f2c6		       f0 34		      BEQ	NoCollision
    666  f2c8		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    667  f2ca		       f0 30		      BEQ	NoCollision
    668  f2cc		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    669  f2ce		       85 b8		      STA	CollisionCounter	;and store as colision.
    670  f2d0				   CountBcdColision
    671  f2d0		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    672  f2d2		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    673  f2d4		       f0 1d		      BEQ	SkipSetColisionSpeedL
    674  f2d6		       f8		      SED		;2
    675  f2d7		       18		      CLC		;2
    676  f2d8		       a5 cb		      LDA	HitCountBcd0	;3
    677  f2da		       69 01		      ADC	#1	;3
    678  f2dc		       85 cb		      STA	HitCountBcd0	;3
    679  f2de		       a5 cc		      LDA	HitCountBcd1	;3
    680  f2e0		       69 00		      ADC	#0	;2
    681  f2e2		       85 cc		      STA	HitCountBcd1	;3
    682  f2e4		       d8		      CLD		;2
    683  f2e5				   EndCountBcdColision
    684  f2e5		       a5 8f		      LDA	Player0SpeedH
    685  f2e7		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    686  f2e9		       a9 10		      LDA	#COLLISION_SPEED_L
    687  f2eb		       c5 8e		      CMP	Player0SpeedL
    688  f2ed		       b0 04		      BCS	SkipSetColisionSpeedL
    689  f2ef				   SetColisionSpeedL
    690  f2ef		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    691  f2f1		       85 8e		      STA	Player0SpeedL
    692  f2f3				   SkipSetColisionSpeedL
    693  f2f3		       a9 00		      LDA	#0
    694  f2f5		       85 8f		      STA	Player0SpeedH
    695  f2f7		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    696  f2f9		       4c 47 f3 	      JMP	StoreHMove	; We keep position consistent
    697  f2fc				   NoCollision
    698  f2fc
    699  f2fc				   DecrementCollision
    700  f2fc		       a4 b8		      LDY	CollisionCounter
    701  f2fe		       f0 07		      BEQ	FinishDecrementCollision
    702  f300		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    703  f302		       85 04		      STA	NUSIZ0
    704  f304		       88		      DEY
    705  f305		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    706  f307				   FinishDecrementCollision
    707  f307
    708  f307				   ResetPlayerSize
    709  f307		       d0 04		      BNE	FinishResetPlayerSize
    710  f309		       a9 30		      LDA	#%00110000
    711  f30b		       85 04		      STA	NUSIZ0	;
    712  f30d				   FinishResetPlayerSize
    713  f30d
    714  f30d				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    715  f30d		       c0 01		      CPY	#1	; Last frame before reset
    716  f30f		       d0 05		      BNE	SkipResetPlayerPosition
    717  f311		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    718  f313		       4c 47 f3 	      JMP	StoreHMove
    719  f316				   SkipResetPlayerPosition
    720  f316
    721  f316				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    722  f316		       a5 a9		      LDA	CurrentCarId
    723  f318		       c9 03		      CMP	#CAR_ID_DRAGSTER
    724  f31a		       d0 08		      BNE	PrepareReadXAxis
    725  f31c		       a2 00		      LDX	#0
    726  f31e		       a5 8c		      LDA	FrameCount0
    727  f320		       29 01		      AND	#DRAGSTER_TURN_MASK
    728  f322		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    729  f324
    730  f324							; for left and right, we're gonna 
    731  f324							; set the horizontal speed, and then do
    732  f324							; a single HMOVE.  We'll use X to hold the
    733  f324							; horizontal speed, then store it in the 
    734  f324							; appropriate register
    735  f324				   PrepareReadXAxis
    736  f324		       a2 00		      LDX	#0
    737  f326		       a4 b9		      LDY	Player0X
    738  f328				   BeginReadLeft
    739  f328		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    740  f32a		       a9 40		      LDA	#%01000000	;Left
    741  f32c		       2c 80 02 	      BIT	SWCHA
    742  f32f		       d0 07		      BNE	SkipMoveLeft
    743  f331		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    744  f333		       c6 b9		      DEC	Player0X
    745  f335		       4c 47 f3 	      JMP	StoreHMove	; Cannot move left and right...
    746  f338				   SkipMoveLeft
    747  f338				   BeginReadRight
    748  f338		       c0 36		      CPY	#PLAYER_0_MAX_X
    749  f33a		       f0 0b		      BEQ	SkipMoveRight	; At max already
    750  f33c		       a9 80		      LDA	#%10000000	;Right
    751  f33e		       2c 80 02 	      BIT	SWCHA
    752  f341		       d0 04		      BNE	SkipMoveRight
    753  f343		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    754  f345		       e6 b9		      INC	Player0X
    755  f347				   SkipMoveRight
    756  f347				   StoreHMove
    757  f347		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    758  f349		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    759  f34b
    760  f34b				   DividePlayerSpeedBy4
    761  f34b		       a5 8f		      LDA	Player0SpeedH
    762  f34d		       0a		      ASL
    763  f34e		       0a		      ASL
    764  f34f		       0a		      ASL
    765  f350		       0a		      ASL
    766  f351		       0a		      ASL
    767  f352		       0a		      ASL
    768  f353		       85 b1		      STA	Tmp1
    769  f355		       a5 8e		      LDA	Player0SpeedL
    770  f357		       4a		      LSR
    771  f358		       4a		      LSR
    772  f359		       29 3f		      AND	#%00111111
    773  f35b		       05 b1		      ORA	Tmp1
    774  f35d		       85 b0		      STA	Tmp0	; Division Result
    775  f35f
    776  f35f				   CalculateParallax1Offset		; 7/8 speed
    777  f35f		       38		      SEC
    778  f360		       a5 8e		      LDA	Player0SpeedL
    779  f362		       e5 b0		      SBC	Tmp0
    780  f364		       85 b2		      STA	Tmp2
    781  f366		       a5 8f		      LDA	Player0SpeedH
    782  f368		       e9 00		      SBC	#0
    783  f36a		       85 b3		      STA	Tmp3
    784  f36c
    785  f36c		       18		      CLC
    786  f36d		       a5 c6		      LDA	ParallaxOffset1
    787  f36f		       65 b2		      ADC	Tmp2
    788  f371		       85 c6		      STA	ParallaxOffset1
    789  f373		       a5 c7		      LDA	ParallaxOffset1 + 1
    790  f375		       65 b3		      ADC	Tmp3
    791  f377		       85 c7		      STA	ParallaxOffset1 + 1
    792  f379
    793  f379				   CalculateParallax2Offset		; 6/8 speed
    794  f379		       38		      SEC
    795  f37a		       a5 b2		      LDA	Tmp2
    796  f37c		       e5 b0		      SBC	Tmp0
    797  f37e		       85 b2		      STA	Tmp2
    798  f380		       a5 b3		      LDA	Tmp3
    799  f382		       e9 00		      SBC	#0
    800  f384		       85 b3		      STA	Tmp3
    801  f386
    802  f386		       18		      CLC
    803  f387		       a5 c8		      LDA	ParallaxOffset2
    804  f389		       65 b2		      ADC	Tmp2
    805  f38b		       85 c8		      STA	ParallaxOffset2
    806  f38d		       a5 c9		      LDA	ParallaxOffset2 + 1
    807  f38f		       65 b3		      ADC	Tmp3
    808  f391		       85 c9		      STA	ParallaxOffset2 + 1
    809  f393
    810  f393				   SkipUpdateLogic		; Continue here if not paused
    811  f393
    812  f393
    813  f393				   ProcessBorder		;Can be optimized (probably)
    814  f393		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    815  f395		       a5 88		      LDA	ParallaxMode
    816  f397		       c9 70		      CMP	#%01110000
    817  f399		       f0 1a		      BEQ	HorizontalParallaxMode
    818  f39b		       c9 d0		      CMP	#%11010000
    819  f39d		       f0 0a		      BEQ	VerticalParallaxMode
    820  f39f		       c9 b0		      CMP	#%10110000
    821  f3a1		       f0 0c		      BEQ	TachometerMode
    822  f3a3
    823  f3a3				   DefaultBorderMode
    824  f3a3		       20 56 f8 	      JSR	DefaultBorderLoop
    825  f3a6		       4c b8 f3 	      JMP	EndProcessingBorder
    826  f3a9				   VerticalParallaxMode
    827  f3a9		       20 cc f8 	      JSR	VerticalParallaxLoop
    828  f3ac		       4c b8 f3 	      JMP	EndProcessingBorder
    829  f3af				   TachometerMode
    830  f3af		       20 71 f8 	      JSR	PrepareTachometerBorderLoop
    831  f3b2		       4c b8 f3 	      JMP	EndProcessingBorder
    832  f3b5				   HorizontalParallaxMode
    833  f3b5		       20 08 f8 	      JSR	HorizontalParallaxLoop
    834  f3b8
    835  f3b8				   EndProcessingBorder
    836  f3b8
    837  f3b8				   ProcessScoreFontColor
    838  f3b8		       a6 d6		      LDX	ScoreFontColorHoldChange
    839  f3ba		       f0 06		      BEQ	ResetScoreFontColor
    840  f3bc		       ca		      DEX
    841  f3bd		       86 d6		      STX	ScoreFontColorHoldChange
    842  f3bf		       4c c6 f3 	      JMP	SkipScoreFontColor
    843  f3c2				   ResetScoreFontColor
    844  f3c2		       a9 f9		      LDA	#SCORE_FONT_COLOR
    845  f3c4		       85 d5		      STA	ScoreFontColor
    846  f3c6				   SkipScoreFontColor
    847  f3c6
    848  f3c6				   IsGameOver
    849  f3c6		       a5 ba		      LDA	CountdownTimer
    850  f3c8		       05 8e		      ORA	Player0SpeedL
    851  f3ca		       05 8f		      ORA	Player0SpeedH
    852  f3cc		       d0 0b		      BNE	IsCheckpoint
    853  f3ce		       a9 01		      LDA	#1
    854  f3d0		       85 d6		      STA	ScoreFontColorHoldChange
    855  f3d2		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    856  f3d4		       85 d5		      STA	ScoreFontColor
    857  f3d6		       4c 1a f4 	      JMP	SkipIsTimeOver
    858  f3d9
    859  f3d9				   IsCheckpoint
    860  f3d9		       a5 d7		      LDA	NextCheckpoint
    861  f3db		       c5 92		      CMP	TrafficOffset0 + 2
    862  f3dd		       d0 2f		      BNE	SkipIsCheckpoint
    863  f3df		       18		      CLC
    864  f3e0		       69 10		      ADC	#CHECKPOINT_INTERVAL
    865  f3e2		       85 d7		      STA	NextCheckpoint
    866  f3e4		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    867  f3e6		       85 d5		      STA	ScoreFontColor
    868  f3e8		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    869  f3ea		       85 d6		      STA	ScoreFontColorHoldChange
    870  f3ec				   AddCheckpointBcd
    871  f3ec		       f8		      SED		;2
    872  f3ed		       18		      CLC		;2
    873  f3ee		       a5 a4		      LDA	CheckpointBcd0	;3
    874  f3f0		       69 01		      ADC	#1	;3
    875  f3f2		       85 a4		      STA	CheckpointBcd0	;3
    876  f3f4		       a5 a5		      LDA	CheckpointBcd1	;3
    877  f3f6		       69 00		      ADC	#0	;2
    878  f3f8		       85 a5		      STA	CheckpointBcd1	;3
    879  f3fa		       d8		      CLD		;2
    880  f3fb				   EndCheckpointBcd
    881  f3fb		       a5 ba		      LDA	CountdownTimer
    882  f3fd		       18		      CLC
    883  f3fe		       65 c2		      ADC	CheckpointTime
    884  f400		       85 ba		      STA	CountdownTimer
    885  f402		       90 04		      BCC	JumpSkipTimeOver
    886  f404		       a9 ff		      LDA	#$FF
    887  f406		       85 ba		      STA	CountdownTimer	; Does not overflow!
    888  f408				   JumpSkipTimeOver
    889  f408		       20 80 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    890  f40b		       4c 1a f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    891  f40e				   SkipIsCheckpoint
    892  f40e
    893  f40e				   IsTimeOver
    894  f40e		       a5 ba		      LDA	CountdownTimer
    895  f410		       d0 08		      BNE	SkipIsTimeOver
    896  f412		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    897  f414		       85 d6		      STA	ScoreFontColorHoldChange
    898  f416		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    899  f418		       85 d5		      STA	ScoreFontColor
    900  f41a				   SkipIsTimeOver
    901  f41a
    902  f41a				   PrintEasterEggCondition
    903  f41a		       a5 8d		      LDA	FrameCount1
    904  f41c		       29 38		      AND	#%00111000
    905  f41e		       05 c0		      ORA	GameStatus
    906  f420		       c9 38		      CMP	#%00111000
    907  f422		       d0 06		      BNE	ChooseTextSide
    908  f424		       20 20 f9 	      JSR	PrintEasterEgg
    909  f427		       4c 1b f5 	      JMP	RightScoreWriteEnd
    910  f42a
    911  f42a							;Could be done during on vblank to save this comparisson time (before draw score), 
    912  f42a							;but I am saving vblank cycles for now, in case of 2 players.
    913  f42a				   ChooseTextSide		; 
    914  f42a		       a5 8c		      LDA	FrameCount0	;3
    915  f42c		       29 01		      AND	#%00000001	;2
    916  f42e		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    917  f430		       4c b1 f4 	      JMP	RightScoreWrite
    918  f433
    919  f433				   LeftScoreWrite
    920  f433		       a5 d5		      LDA	ScoreFontColor
    921  f435		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    922  f437		       f0 4e		      BEQ	PrintCheckpoint
    923  f439		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    924  f43b		       f0 52		      BEQ	PrintStartGame
    925  f43d		       a5 c0		      LDA	GameStatus
    926  f43f		       f0 56		      BEQ	PrintHellwayLeft
    927  f441				   WriteDistance		;Not optimized yet, ugly code.
    928  f441				   Digit0Distance
    929  f441		       a5 91		      LDA	TrafficOffset0 + 1	;3
    930  f443		       4a		      LSR		; 2
    931  f444		       4a		      LSR		; 2
    932  f445		       4a		      LSR		; 2
    933  f446		       4a		      LSR		; 2
    934  f447		       aa		      TAX		; 2
    935  f448		       bd be fd 	      LDA	FontLookup,X	;4
    936  f44b		       85 d3		      STA	ScoreD3	;3
    937  f44d
    938  f44d				   Digit1Distance
    939  f44d		       a5 92		      LDA	TrafficOffset0 + 2	;3
    940  f44f		       29 0f		      AND	#%00001111	;2
    941  f451		       aa		      TAX		; 2
    942  f452		       bd be fd 	      LDA	FontLookup,X	;4 
    943  f455		       85 d2		      STA	ScoreD2	;3
    944  f457
    945  f457				   Digit2Distance
    946  f457		       a5 92		      LDA	TrafficOffset0 + 2	;3
    947  f459		       4a		      LSR		; 2
    948  f45a		       4a		      LSR		; 2
    949  f45b		       4a		      LSR		; 2
    950  f45c		       4a		      LSR		; 2
    951  f45d		       aa		      TAX		; 2
    952  f45e		       bd be fd 	      LDA	FontLookup,X	;4
    953  f461		       85 d1		      STA	ScoreD1	;3
    954  f463
    955  f463				   Digit3Distance
    956  f463		       a5 bb		      LDA	Traffic0Msb	;3
    957  f465		       29 0f		      AND	#%00001111	;2
    958  f467		       aa		      TAX		; 2
    959  f468		       bd be fd 	      LDA	FontLookup,X	;4 
    960  f46b		       85 d0		      STA	ScoreD0	;3
    961  f46d
    962  f46d				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    963  f46d		       a5 bb		      LDA	Traffic0Msb
    964  f46f		       29 f0		      AND	#%11110000	;2
    965  f471		       d0 07		      BNE	DrawDistanceExtraDigit
    966  f473		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    967  f475		       85 d4		      STA	ScoreD4	;3
    968  f477		       4c 84 f4 	      JMP	EndDrawDistance
    969  f47a				   DrawDistanceExtraDigit
    970  f47a		       4a		      LSR		; 2
    971  f47b		       4a		      LSR		; 2
    972  f47c		       4a		      LSR		; 2
    973  f47d		       4a		      LSR		; 2
    974  f47e		       aa		      TAX		; 2
    975  f47f		       bd be fd 	      LDA	FontLookup,X	;4
    976  f482		       85 d4		      STA	ScoreD4	;3
    977  f484
    978  f484				   EndDrawDistance
    979  f484		       4c 1b f5 	      JMP	RightScoreWriteEnd	;3
    980  f487
    981  f487				   PrintCheckpoint
    982  f487		       a2 00		      LDX	#<CheckpointText
    983  f489		       20 ea f7 	      JSR	PrintStaticText
    984  f48c		       4c 1b f5 	      JMP	RightScoreWriteEnd	;3
    985  f48f				   PrintStartGame
    986  f48f		       a2 23		      LDX	#<GoText
    987  f491		       20 ea f7 	      JSR	PrintStaticText
    988  f494		       4c 1b f5 	      JMP	RightScoreWriteEnd	;3
    989  f497
    990  f497				   PrintHellwayLeft
    991  f497		       a5 8d		      LDA	FrameCount1
    992  f499		       29 01		      AND	#1
    993  f49b		       d0 05		      BNE	PrintCreditsLeft
    994  f49d		       a2 05		      LDX	#<HellwayLeftText
    995  f49f		       4c a4 f4 	      JMP	PrintGameMode
    996  f4a2				   PrintCreditsLeft
    997  f4a2		       a2 0f		      LDX	#<OpbText
    998  f4a4
    999  f4a4				   PrintGameMode
   1000  f4a4		       20 ea f7 	      JSR	PrintStaticText
   1001  f4a7		       a6 c5		      LDX	GameMode
   1002  f4a9		       bd be fd 	      LDA	FontLookup,X	;4 
   1003  f4ac		       85 d0		      STA	ScoreD0	;3
   1004  f4ae		       4c 1b f5 	      JMP	RightScoreWriteEnd	;3
   1005  f4b1
   1006  f4b1				   RightScoreWrite
   1007  f4b1		       a5 c0		      LDA	GameStatus
   1008  f4b3		       f0 45		      BEQ	PrintHellwayRight
   1009  f4b5		       a5 d5		      LDA	ScoreFontColor
   1010  f4b7		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1011  f4b9		       f0 52		      BEQ	PrintGameOver
   1012  f4bb				   Digit0Timer
   1013  f4bb		       a5 ba		      LDA	CountdownTimer	;3
   1014  f4bd		       29 0f		      AND	#%00001111	;2
   1015  f4bf		       aa		      TAX		; 2
   1016  f4c0		       bd be fd 	      LDA	FontLookup,X	;4 
   1017  f4c3		       85 d1		      STA	ScoreD1	;3
   1018  f4c5
   1019  f4c5				   Digit1Timer
   1020  f4c5		       a5 ba		      LDA	CountdownTimer	;3
   1021  f4c7		       4a		      LSR		; 2
   1022  f4c8		       4a		      LSR		; 2
   1023  f4c9		       4a		      LSR		; 2
   1024  f4ca		       4a		      LSR		; 2
   1025  f4cb		       aa		      TAX		; 2
   1026  f4cc		       bd be fd 	      LDA	FontLookup,X	;4
   1027  f4cf		       85 d0		      STA	ScoreD0	;3
   1028  f4d1
   1029  f4d1		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1030  f4d3		       85 d2		      STA	ScoreD2	;3
   1031  f4d5
   1032  f4d5				   Digit0Speed
   1033  f4d5		       a5 8e		      LDA	Player0SpeedL
   1034  f4d7		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1035  f4d9		       4a		      LSR		; 2
   1036  f4da		       4a		      LSR		; 2
   1037  f4db		       aa		      TAX		; 2
   1038  f4dc		       bd be fd 	      LDA	FontLookup,X	;4
   1039  f4df		       85 d4		      STA	ScoreD4	;3
   1040  f4e1
   1041  f4e1				   Digit1Speed
   1042  f4e1		       a5 8e		      LDA	Player0SpeedL
   1043  f4e3		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1044  f4e5		       18		      CLC
   1045  f4e6		       2a		      ROL		;First goes into carry
   1046  f4e7		       2a		      ROL
   1047  f4e8		       2a		      ROL
   1048  f4e9		       85 b0		      STA	Tmp0
   1049  f4eb		       a5 8f		      LDA	Player0SpeedH
   1050  f4ed		       0a		      ASL
   1051  f4ee		       0a		      ASL
   1052  f4ef		       05 b0		      ORA	Tmp0
   1053  f4f1		       aa		      TAX		; 2
   1054  f4f2		       bd be fd 	      LDA	FontLookup,X	;4
   1055  f4f5		       85 d3		      STA	ScoreD3	;3
   1056  f4f7		       4c 1b f5 	      JMP	RightScoreWriteEnd
   1057  f4fa
   1058  f4fa				   PrintHellwayRight
   1059  f4fa		       a5 8d		      LDA	FrameCount1
   1060  f4fc		       29 01		      AND	#1
   1061  f4fe		       d0 05		      BNE	PrintCreditsRight
   1062  f500		       a2 0a		      LDX	#<HellwayRightText
   1063  f502		       4c 07 f5 	      JMP	PrintRightIntro
   1064  f505				   PrintCreditsRight
   1065  f505		       a2 14		      LDX	#<YearText
   1066  f507				   PrintRightIntro
   1067  f507		       20 ea f7 	      JSR	PrintStaticText
   1068  f50a		       4c 1b f5 	      JMP	RightScoreWriteEnd
   1069  f50d				   PrintGameOver
   1070  f50d		       a5 8c		      LDA	FrameCount0
   1071  f50f		       30 05		      BMI	PrintOverText
   1072  f511		       a2 19		      LDX	#<GameText
   1073  f513		       4c 18 f5 	      JMP	StoreGameOverText
   1074  f516				   PrintOverText
   1075  f516		       a2 1e		      LDX	#<OverText
   1076  f518				   StoreGameOverText
   1077  f518		       20 ea f7 	      JSR	PrintStaticText
   1078  f51b				   RightScoreWriteEnd
   1079  f51b
   1080  f51b
   1081  f51b				   ScoreBackgroundColor
   1082  f51b		       a2 00		      LDX	#0
   1083  f51d		       ad 82 02 	      LDA	SWCHB
   1084  f520		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1085  f522		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1086  f524		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1087  f526		       a2 03		      LDX	#BACKGROUND_COLOR
   1088  f528				   BlackAndWhiteScoreBg
   1089  f528		       85 b2		      STA	Tmp2	; Score Background
   1090  f52a		       86 b3		      STX	Tmp3	; Traffic Background
   1091  f52c
   1092  f52c				   ConfigurePFForScore
   1093  f52c							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1094  f52c		       85 09		      STA	COLUBK
   1095  f52e		       20 42 f7 	      JSR	ClearAll
   1096  f531		       a9 02		      LDA	#%00000010	; Score mode
   1097  f533		       85 0a		      STA	CTRLPF
   1098  f535		       a5 8c		      LDA	FrameCount0	;3
   1099  f537		       29 01		      AND	#%00000001	;2
   1100  f539		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
   1101  f53b				   LeftScoreOn
   1102  f53b		       a5 d5		      LDA	ScoreFontColor
   1103  f53d		       85 07		      STA	COLUP1
   1104  f53f		       a5 b2		      LDA	Tmp2
   1105  f541		       85 06		      STA	COLUP0
   1106  f543		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1107  f545		       85 b1		      STA	Tmp1
   1108  f547		       4c 56 f5 	      JMP	CallWaitForVblankEnd
   1109  f54a				   RightScoreOn
   1110  f54a		       a5 d5		      LDA	ScoreFontColor
   1111  f54c		       85 06		      STA	COLUP0
   1112  f54e		       a5 b2		      LDA	Tmp2
   1113  f550		       85 07		      STA	COLUP1
   1114  f552		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1115  f554		       85 b1		      STA	Tmp1
   1116  f556
   1117  f556							; After here we are going to update the screen, No more heavy code
   1118  f556				   CallWaitForVblankEnd
   1119  f556		       20 90 fb 	      JSR	WaitForVblankEnd
   1120  f559
   1121  f559				   DrawScoreHud
   1122  f559		       20 92 f9 	      JSR	PrintScore
   1123  f55c
   1124  f55c		       85 02		      STA	WSYNC
   1125  f55e
   1126  f55e		       a5 0c		      LDA	INPT4	;3
   1127  f560		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1128  f562		       a5 d5		      LDA	ScoreFontColor
   1129  f564		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1130  f566		       d0 0c		      BNE	WaitAnotherScoreLine
   1131  f568		       a5 8c		      LDA	FrameCount0	;3
   1132  f56a		       29 01		      AND	#%00000001	;2
   1133  f56c		       f0 03		      BEQ	LeftScoreOnGameOver
   1134  f56e		       4c 1d fb 	      JMP	DrawGameOverScreenRight
   1135  f571				   LeftScoreOnGameOver
   1136  f571		       4c 4f fa 	      JMP	DrawGameOverScreenLeft
   1137  f574
   1138  f574				   WaitAnotherScoreLine
   1139  f574		       85 02		      STA	WSYNC
   1140  f576
   1141  f576				   PrepareForTraffic
   1142  f576		       20 54 f7 	      JSR	ClearPF	; 32
   1143  f579
   1144  f579		       85 02		      STA	WSYNC
   1145  f57b		       85 02		      STA	WSYNC
   1146  f57d
   1147  f57d		       a9 31		      LDA	#%00110001	; 2 Score mode
   1148  f57f		       85 0a		      STA	CTRLPF	;3
   1149  f581
   1150  f581		       a5 c3		      LDA	TrafficColor	;3
   1151  f583		       85 08		      STA	COLUPF	;3
   1152  f585
   1153  f585		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1154  f587		       85 07		      STA	COLUP1	;3
   1155  f589
   1156  f589		       a5 d5		      LDA	ScoreFontColor	;3
   1157  f58b		       85 06		      STA	COLUP0	;3
   1158  f58d
   1159  f58d		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1160  f58f
   1161  f58f		       20 54 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1162  f592
      0  f592					      SLEEP	14
      1  f592				   .CYCLES    SET	14
      2  f592
      3  f592				  -	      IF	.CYCLES < 2
      4  f592				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f592				  -	      ERR
      6  f592					      ENDIF
      7  f592
      8  f592				  -	      IF	.CYCLES & 1
      9  f592				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f592				  -	      nop	0
     11  f592				  -	      ELSE
     12  f592				  -	      bit	VSYNC
     13  f592				  -	      ENDIF
     14  f592				  -.CYCLES    SET	.CYCLES - 3
     15  f592					      ENDIF
     16  f592
     17  f592					      REPEAT	.CYCLES / 2
     18  f592		       ea		      nop
     17  f592					      REPEND
     18  f593		       ea		      nop
     17  f593					      REPEND
     18  f594		       ea		      nop
     17  f594					      REPEND
     18  f595		       ea		      nop
     17  f595					      REPEND
     18  f596		       ea		      nop
     17  f596					      REPEND
     18  f597		       ea		      nop
     17  f597					      REPEND
     18  f598		       ea		      nop
     19  f599					      REPEND
   1164  f599
   1165  f599		       a5 b3		      LDA	Tmp3	;3
   1166  f59b		       85 09		      STA	COLUBK	;3
   1167  f59d		       4c a2 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1168  f5a0							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1169  f5a0
   1170  f5a0							;main scanline loop...
   1171  f5a0				   ScanLoop
   1172  f5a0		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1173  f5a2
   1174  f5a2							;Start of next line!			
   1175  f5a2				   DrawCache		;63 Is the last line going to the top of the next frame?
   1176  f5a2		       a5 81		      LDA	PF0Cache	;3
   1177  f5a4		       85 0d		      STA	PF0	;3
   1178  f5a6
   1179  f5a6		       a5 82		      LDA	PF1Cache	;3
   1180  f5a8		       85 0e		      STA	PF1	;3
   1181  f5aa
   1182  f5aa		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1183  f5ac		       b0 04		      BCS	SkipDrawCar	;2
   1184  f5ae		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1185  f5b0		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1186  f5b2				   SkipDrawCar
   1187  f5b2
   1188  f5b2		       a5 84		      LDA	GRP1Cache	;3
   1189  f5b4		       85 1c		      STA	GRP1	;3
   1190  f5b6
   1191  f5b6		       a5 85		      LDA	ENABLCache	;3
   1192  f5b8		       85 1f		      STA	ENABL	;3
   1193  f5ba
   1194  f5ba		       a5 86		      LDA	ENAM0Cache	;3
   1195  f5bc		       85 1d		      STA	ENAM0	;3
   1196  f5be
   1197  f5be		       a5 87		      LDA	ENAM1Cache	;3
   1198  f5c0		       85 1e		      STA	ENAM1	;3
   1199  f5c2
   1200  f5c2		       a9 00		      LDA	#0	;2
   1201  f5c4							;STA PF1Cache ;3
   1202  f5c4		       85 84		      STA	GRP1Cache	;3
   1203  f5c6		       85 85		      STA	ENABLCache	;3
   1204  f5c8		       85 86		      STA	ENAM0Cache	;3
   1205  f5ca		       85 87		      STA	ENAM1Cache	; 3
   1206  f5cc
   1207  f5cc							;BEQ DrawTraffic3
   1208  f5cc				   DrawTraffic1 		; 33
   1209  f5cc		       98		      TYA		; 2
   1210  f5cd		       18		      CLC		; 2 
   1211  f5ce		       65 95		      ADC	TrafficOffset1 + 1	;3
   1212  f5d0		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1213  f5d2		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1214  f5d4		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1215  f5d6		       4c db f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1216  f5d9				   EorOffsetWithCarry
   1217  f5d9		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1218  f5db				   AfterEorOffsetWithCarry		;17
   1219  f5db		       aa		      TAX		;2
   1220  f5dc		       bd 00 fe 	      LDA	AesTable,X	; 4
   1221  f5df		       c5 c1		      CMP	TrafficChance	;3
   1222  f5e1		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1223  f5e3		       a9 ff		      LDA	#$FF	;2
   1224  f5e5		       85 84		      STA	GRP1Cache	;3
   1225  f5e7				   FinishDrawTraffic1
   1226  f5e7
   1227  f5e7				   DrawTraffic2 		; 33
   1228  f5e7		       98		      TYA		; 2
   1229  f5e8		       18		      CLC		; 2 
   1230  f5e9		       65 99		      ADC	TrafficOffset2 + 1	;3
   1231  f5eb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1232  f5ed		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1233  f5ef		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1234  f5f1		       4c f6 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1235  f5f4				   EorOffsetWithCarry2
   1236  f5f4		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1237  f5f6				   AfterEorOffsetWithCarry2		;17
   1238  f5f6		       aa		      TAX		;2
   1239  f5f7		       bd 00 fe 	      LDA	AesTable,X	; 4
   1240  f5fa		       c5 c1		      CMP	TrafficChance	;3
   1241  f5fc		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1242  f5fe		       a9 02		      LDA	#%00000010	;2
   1243  f600		       85 85		      STA	ENABLCache	;3
   1244  f602				   FinishDrawTraffic2
   1245  f602
   1246  f602							;STA WSYNC ;65 / 137
   1247  f602
   1248  f602							; LDA Tmp0 ; Flicker this line if drawing car
   1249  f602							; BEQ FinishDrawTraffic4
   1250  f602				   DrawTraffic3 		; 33
   1251  f602		       98		      TYA		; 2
   1252  f603		       18		      CLC		; 2 
   1253  f604		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1254  f606		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1255  f608		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1256  f60a		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1257  f60c		       4c 11 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1258  f60f				   EorOffsetWithCarry3
   1259  f60f		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1260  f611				   AfterEorOffsetWithCarry3		;17
   1261  f611		       aa		      TAX		;2
   1262  f612		       bd 00 fe 	      LDA	AesTable,X	; 4
   1263  f615		       c5 c1		      CMP	TrafficChance	;3
   1264  f617		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1265  f619		       a9 02		      LDA	#%00000010	;2
   1266  f61b		       85 86		      STA	ENAM0Cache
   1267  f61d				   FinishDrawTraffic3
   1268  f61d
   1269  f61d				   DrawTraffic4 		; 33
   1270  f61d		       98		      TYA		; 2
   1271  f61e		       18		      CLC		; 2 
   1272  f61f		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1273  f621		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1274  f623		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1275  f625		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1276  f627		       4c 2c f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1277  f62a				   EorOffsetWithCarry4
   1278  f62a		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1279  f62c				   AfterEorOffsetWithCarry4		;17
   1280  f62c		       aa		      TAX		;2
   1281  f62d		       bd 00 fe 	      LDA	AesTable,X	; 4
   1282  f630		       c5 c1		      CMP	TrafficChance	;3
   1283  f632		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1284  f634		       a9 02		      LDA	#%00000010	;2
   1285  f636		       85 87		      STA	ENAM1Cache	;3
   1286  f638				   FinishDrawTraffic4
   1287  f638
   1288  f638				   DrawTraffic0 		; 20
   1289  f638		       98		      TYA		;2
   1290  f639		       29 07		      AND	#%00000111	;2
   1291  f63b		       aa		      TAX		;2
   1292  f63c		       b5 d8		      LDA	ParallaxCache,X	;4
   1293  f63e		       85 82		      STA	PF1Cache	;3
   1294  f640		       b5 f0		      LDA	ParallaxCache2,X	;4
   1295  f642		       85 81		      STA	PF0Cache	;3
   1296  f644
   1297  f644				   SkipDrawTraffic0
   1298  f644
   1299  f644				   WhileScanLoop
   1300  f644		       88		      DEY		;2
   1301  f645		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1302  f647		       4c a0 f5 	      JMP	ScanLoop	;3
   1303  f64a				   FinishScanLoop		; 7 209 of 222
   1304  f64a
   1305  f64a		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1306  f64c		       20 63 f7 	      JSR	LoadAll
   1307  f64f		       85 02		      STA	WSYNC	; do stuff!
   1308  f651		       85 02		      STA	WSYNC
   1309  f653		       85 02		      STA	WSYNC
   1310  f655							;42 cycles to use here
   1311  f655
   1312  f655				   PrepareOverscan
   1313  f655		       a9 02		      LDA	#2
   1314  f657		       85 02		      STA	WSYNC
   1315  f659		       85 01		      STA	VBLANK
   1316  f65b
   1317  f65b		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1318  f65d		       8d 96 02 	      STA	TIM64T
   1319  f660
   1320  f660				   LeftSound		;58
   1321  f660		       a5 ba		      LDA	CountdownTimer	;3
   1322  f662		       f0 24		      BEQ	EngineOff	;2
   1323  f664		       a5 8e		      LDA	Player0SpeedL	;3
   1324  f666		       29 80		      AND	#%10000000	;2
   1325  f668		       05 8f		      ORA	Player0SpeedH	;3
   1326  f66a		       18		      CLC		;2
   1327  f66b		       2a		      ROL		;2
   1328  f66c		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1329  f66e		       aa		      TAX		;2
   1330  f66f		       a5 8e		      LDA	Player0SpeedL	;3
   1331  f671		       4a		      LSR		;2
   1332  f672		       4a		      LSR		;2
   1333  f673		       4a		      LSR		;2
   1334  f674		       29 0f		      AND	#%00001111	;2
   1335  f676		       85 b0		      STA	Tmp0	;3
   1336  f678		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1337  f67b		       38		      SEC		;2
   1338  f67c		       e5 b0		      SBC	Tmp0	;3
   1339  f67e		       85 17		      STA	AUDF0	;3
   1340  f680		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1341  f683		       85 15		      STA	AUDC0	;3
   1342  f685		       4c 8c f6 	      JMP	EndLeftSound	;3
   1343  f688				   EngineOff
   1344  f688		       a9 00		      LDA	#0
   1345  f68a		       85 15		      STA	AUDC0
   1346  f68c
   1347  f68c				   EndLeftSound
   1348  f68c
   1349  f68c
   1350  f68c				   RightSound		; 70 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1351  f68c		       a5 d5		      LDA	ScoreFontColor	;3
   1352  f68e		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1353  f690		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1354  f692		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1355  f694		       f0 29		      BEQ	PlayCheckpoint	;2
   1356  f696		       a5 b8		      LDA	CollisionCounter	;3
   1357  f698		       c9 e0		      CMP	#$E0	;2
   1358  f69a		       b0 14		      BCS	PlayColision	;2
   1359  f69c		       a5 d7		      LDA	NextCheckpoint	;3
   1360  f69e		       38		      SEC		;2
   1361  f69f		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1362  f6a1		       c9 02		      CMP	#$02	;2
   1363  f6a3		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1364  f6a5		       a5 ba		      LDA	CountdownTimer	; 3
   1365  f6a7		       f0 53		      BEQ	MuteRightSound	;2
   1366  f6a9		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1367  f6ab		       90 37		      BCC	PlayWarnTimeEnding	;4
   1368  f6ad		       4c fc f6 	      JMP	MuteRightSound	;3
   1369  f6b0				   PlayColision
   1370  f6b0		       a9 1f		      LDA	#31
   1371  f6b2		       85 18		      STA	AUDF1
   1372  f6b4		       a9 08		      LDA	#8
   1373  f6b6		       85 16		      STA	AUDC1
   1374  f6b8		       a9 08		      LDA	#8
   1375  f6ba		       85 1a		      STA	AUDV1
   1376  f6bc		       4c 00 f7 	      JMP	EndRightSound
   1377  f6bf
   1378  f6bf				   PlayCheckpoint
   1379  f6bf		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1380  f6c1		       4a		      LSR		;2
   1381  f6c2		       4a		      LSR		;2
   1382  f6c3		       4a		      LSR		;2
   1383  f6c4		       85 18		      STA	AUDF1	;3
   1384  f6c6		       a9 0c		      LDA	#12	;2
   1385  f6c8		       85 16		      STA	AUDC1	;3
   1386  f6ca		       a9 06		      LDA	#6	;2
   1387  f6cc		       85 1a		      STA	AUDV1	;3
   1388  f6ce		       4c 00 f7 	      JMP	EndRightSound	;3
   1389  f6d1
   1390  f6d1				   PlayBeforeCheckpoint
   1391  f6d1		       a5 8c		      LDA	FrameCount0	;3
   1392  f6d3		       29 1c		      AND	#%00011100	;2
   1393  f6d5		       09 03		      ORA	#%00000011	;2
   1394  f6d7		       85 18		      STA	AUDF1	;3
   1395  f6d9		       a9 0c		      LDA	#12	;2
   1396  f6db		       85 16		      STA	AUDC1	;3
   1397  f6dd		       a9 03		      LDA	#3	;2
   1398  f6df		       85 1a		      STA	AUDV1	;3
   1399  f6e1		       4c 00 f7 	      JMP	EndRightSound	;3
   1400  f6e4
   1401  f6e4				   PlayWarnTimeEnding
   1402  f6e4		       a5 8c		      LDA	FrameCount0	;3
   1403  f6e6		       29 04		      AND	#%00000100	;2
   1404  f6e8		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1405  f6ea		       18		      CLC		;2
   1406  f6eb		       a9 0a		      LDA	#10	;2
   1407  f6ed		       65 ba		      ADC	CountdownTimer
   1408  f6ef		       85 18		      STA	AUDF1	;3
   1409  f6f1		       a9 0c		      LDA	#12	;2
   1410  f6f3		       85 16		      STA	AUDC1	;3
   1411  f6f5		       a9 03		      LDA	#3	;2
   1412  f6f7		       85 1a		      STA	AUDV1	;3
   1413  f6f9		       4c 00 f7 	      JMP	EndRightSound	;3
   1414  f6fc
   1415  f6fc				   MuteRightSound
   1416  f6fc		       a9 00		      LDA	#0
   1417  f6fe		       85 1a		      STA	AUDV1
   1418  f700				   EndRightSound
   1419  f700
   1420  f700				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1421  f700		       a5 c0		      LDA	GameStatus	;3
   1422  f702		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1423  f704		       a5 d5		      LDA	ScoreFontColor	;3
   1424  f706		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1425  f708		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1426  f70a		       c6 cf		      DEC	OneSecondConter	;5
   1427  f70c		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1428  f70e
   1429  f70e		       f8		      SED		;2 BCD Operations after this point
   1430  f70f				   CountGlideTimeBcd
   1431  f70f		       a5 d5		      LDA	ScoreFontColor	;3
   1432  f711		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1433  f713		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1434  f715		       18		      CLC		;2
   1435  f716		       a5 cd		      LDA	GlideTimeBcd0	;3
   1436  f718		       69 01		      ADC	#1	;3
   1437  f71a		       85 cd		      STA	GlideTimeBcd0	;3
   1438  f71c		       a5 ce		      LDA	GlideTimeBcd1	;3
   1439  f71e		       69 00		      ADC	#0	;2
   1440  f720		       85 ce		      STA	GlideTimeBcd1	;3
   1441  f722				   EndCountGlideTimeBcd
   1442  f722				   IncreaseTotalTimerBcd
   1443  f722		       18		      CLC		;2
   1444  f723		       a5 bd		      LDA	TimeBcd0	;3
   1445  f725		       69 01		      ADC	#1	;2
   1446  f727		       85 bd		      STA	TimeBcd0	;3
   1447  f729		       a5 be		      LDA	TimeBcd1	;3
   1448  f72b		       69 00		      ADC	#0	;2
   1449  f72d		       85 be		      STA	TimeBcd1	;3
   1450  f72f		       a5 bf		      LDA	TimeBcd2	;3
   1451  f731		       69 00		      ADC	#0	;2
   1452  f733		       85 bf		      STA	TimeBcd2	;3
   1453  f735
   1454  f735				   ResetOneSecondCounter
   1455  f735		       d8		      CLD		;2
   1456  f736		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1457  f738		       85 cf		      STA	OneSecondConter	;3
   1458  f73a
   1459  f73a				   EndExactlyEverySecond
   1460  f73a
   1461  f73a				   OverScanWait
   1462  f73a		       ad 84 02 	      LDA	INTIM
   1463  f73d		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1464  f73f		       4c c0 f0 	      JMP	MainLoop
   1465  f742
   1466  f742				   Subroutines
   1467  f742
   1468  f742				   ClearAll		; 52
   1469  f742		       a9 00		      LDA	#0	;2
   1470  f744		       85 1c		      STA	GRP1	;3
   1471  f746		       85 1f		      STA	ENABL	;3
   1472  f748		       85 1d		      STA	ENAM0	;3
   1473  f74a		       85 1e		      STA	ENAM1	;3
   1474  f74c		       85 84		      STA	GRP1Cache	;3
   1475  f74e		       85 85		      STA	ENABLCache	;3
   1476  f750		       85 86		      STA	ENAM0Cache	;3
   1477  f752		       85 87		      STA	ENAM1Cache	;3
   1478  f754
   1479  f754				   ClearPF		; 26
   1480  f754		       a9 00		      LDA	#0	;2
   1481  f756				   ClearPFSkipLDA0
   1482  f756		       85 0d		      STA	PF0	;3
   1483  f758		       85 0e		      STA	PF1	;3
   1484  f75a		       85 0f		      STA	PF2	;3	
   1485  f75c		       85 81		      STA	PF0Cache	;3
   1486  f75e		       85 82		      STA	PF1Cache	;3
   1487  f760		       85 83		      STA	PF2Cache	;3 
   1488  f762		       60		      RTS		;6
   1489  f763				   EndClearAll
   1490  f763
   1491  f763				   LoadAll		; 48
   1492  f763		       a5 81		      LDA	PF0Cache	;3
   1493  f765		       85 0d		      STA	PF0	;3
   1494  f767
   1495  f767		       a5 82		      LDA	PF1Cache	;3
   1496  f769		       85 0e		      STA	PF1	;3
   1497  f76b
   1498  f76b		       a5 83		      LDA	PF2Cache	;3
   1499  f76d		       85 0f		      STA	PF2	;3
   1500  f76f
   1501  f76f		       a5 84		      LDA	GRP1Cache	;3
   1502  f771		       85 1c		      STA	GRP1	;3
   1503  f773
   1504  f773		       a5 85		      LDA	ENABLCache	;3
   1505  f775		       85 1f		      STA	ENABL	;3
   1506  f777
   1507  f777		       a5 86		      LDA	ENAM0Cache	;3
   1508  f779		       85 1d		      STA	ENAM0	;3
   1509  f77b
   1510  f77b		       a5 87		      LDA	ENAM1Cache	;3
   1511  f77d		       85 1e		      STA	ENAM1	;3
   1512  f77f
   1513  f77f		       60		      RTS		;6
   1514  f780				   EndLoadAll
   1515  f780
   1516  f780				   NextDifficulty
   1517  f780		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1518  f782		       29 01		      AND	#%00000001
   1519  f784		       d0 3f		      BNE	CheckRandomDifficulty
   1520  f786
   1521  f786		       a5 c4		      LDA	CurrentDifficulty
   1522  f788		       18		      CLC
   1523  f789		       69 01		      ADC	#1
   1524  f78b		       29 03		      AND	#%00000011	; 0 to 3
   1525  f78d		       85 c4		      STA	CurrentDifficulty
   1526  f78f
   1527  f78f				   ConfigureDifficulty
   1528  f78f		       a5 c4		      LDA	CurrentDifficulty
   1529  f791		       f0 0b		      BEQ	ConfigureLightTraffic
   1530  f793		       c9 01		      CMP	#1
   1531  f795		       f0 10		      BEQ	ConfigureRegularTraffic
   1532  f797		       c9 02		      CMP	#2
   1533  f799		       f0 15		      BEQ	ConfigureIntenseTraffic
   1534  f79b		       4c b9 f7 	      JMP	ConfigureRushHourTraffic
   1535  f79e
   1536  f79e				   ConfigureLightTraffic
   1537  f79e		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1538  f7a0		       a0 1d		      LDY	#CHECKPOINT_TIME_LIGHT
   1539  f7a2		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1540  f7a4		       4c bf f7 	      JMP	StoreTrafficChance
   1541  f7a7				   ConfigureRegularTraffic
   1542  f7a7		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1543  f7a9		       a0 22		      LDY	#CHECKPOINT_TIME_REGULAR
   1544  f7ab		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1545  f7ad		       4c bf f7 	      JMP	StoreTrafficChance
   1546  f7b0				   ConfigureIntenseTraffic
   1547  f7b0		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1548  f7b2		       a0 27		      LDY	#CHECKPOINT_TIME_INTENSE
   1549  f7b4		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1550  f7b6		       4c bf f7 	      JMP	StoreTrafficChance
   1551  f7b9				   ConfigureRushHourTraffic
   1552  f7b9		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1553  f7bb		       a0 2c		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1554  f7bd		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1555  f7bf
   1556  f7bf				   StoreTrafficChance
   1557  f7bf		       86 c1		      STX	TrafficChance
   1558  f7c1		       84 c2		      STY	CheckpointTime
   1559  f7c3		       85 c3		      STA	TrafficColor
   1560  f7c5
   1561  f7c5				   CheckRandomDifficulty
   1562  f7c5		       a5 c5		      LDA	GameMode
   1563  f7c7		       29 08		      AND	#%00001000	; Random difficulties
   1564  f7c9		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1565  f7cb				   RandomDificulty
   1566  f7cb		       a6 8c		      LDX	FrameCount0
   1567  f7cd		       bd 00 fe 	      LDA	AesTable,X
   1568  f7d0		       45 c1		      EOR	TrafficChance
   1569  f7d2		       29 3f		      AND	#%00111111
   1570  f7d4		       85 c1		      STA	TrafficChance
   1571  f7d6
   1572  f7d6				   ReturnFromNextDifficulty
   1573  f7d6		       60		      RTS
   1574  f7d7				   EndNextDifficulty
   1575  f7d7
   1576  f7d7				   DefaultOffsets
   1577  f7d7		       a9 20		      LDA	#$20
   1578  f7d9		       85 96		      STA	TrafficOffset1 + 2
   1579  f7db		       a9 40		      LDA	#$40
   1580  f7dd		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1581  f7df		       a9 60		      LDA	#$60
   1582  f7e1		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1583  f7e3		       a9 80		      LDA	#$80
   1584  f7e5		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1585  f7e7		       a9 a0		      LDA	#$A0
   1586  f7e9		       60		      RTS
   1587  f7ea
   1588  f7ea				   PrintStaticText		; Preload X with the offset referent to StaticText
   1589  f7ea		       bd 00 ff 	      LDA	StaticText,X
   1590  f7ed		       85 d0		      STA	ScoreD0
   1591  f7ef		       e8		      INX
   1592  f7f0		       bd 00 ff 	      LDA	StaticText,X
   1593  f7f3		       85 d1		      STA	ScoreD1
   1594  f7f5		       e8		      INX
   1595  f7f6		       bd 00 ff 	      LDA	StaticText,X
   1596  f7f9		       85 d2		      STA	ScoreD2
   1597  f7fb		       e8		      INX
   1598  f7fc		       bd 00 ff 	      LDA	StaticText,X
   1599  f7ff		       85 d3		      STA	ScoreD3
   1600  f801		       e8		      INX
   1601  f802		       bd 00 ff 	      LDA	StaticText,X
   1602  f805		       85 d4		      STA	ScoreD4
   1603  f807		       60		      RTS
   1604  f808
   1605  f808				   HorizontalParallaxLoop
   1606  f808		       a9 ef		      LDA	#%11101111	; Clear the house
   1607  f80a		       39 d8 00 	      AND	ParallaxCache,Y
   1608  f80d		       99 d8 00 	      STA	ParallaxCache,Y
   1609  f810				   CalculateParallax0
   1610  f810		       98		      TYA
   1611  f811		       18		      CLC
   1612  f812		       65 91		      ADC	TrafficOffset0 + 1
   1613  f814		       29 04		      AND	#%00000100
   1614  f816		       f0 08		      BEQ	HasEmptySpace0
   1615  f818				   HasBorder0
   1616  f818		       b9 d8 00 	      LDA	ParallaxCache,Y
   1617  f81b		       09 0f		      ORA	#%00001111
   1618  f81d		       4c 25 f8 	      JMP	StoreParallax0
   1619  f820				   HasEmptySpace0
   1620  f820		       b9 d8 00 	      LDA	ParallaxCache,Y
   1621  f823		       29 f0		      AND	#%11110000
   1622  f825
   1623  f825				   StoreParallax0
   1624  f825		       99 d8 00 	      STA	ParallaxCache,Y
   1625  f828
   1626  f828				   CalculateParallax1
   1627  f828		       98		      TYA
   1628  f829		       18		      CLC
   1629  f82a		       65 c7		      ADC	ParallaxOffset1 + 1
   1630  f82c		       29 04		      AND	#%00000100
   1631  f82e		       f0 08		      BEQ	HasEmptySpace1
   1632  f830				   HasBorder1
   1633  f830		       b9 d8 00 	      LDA	ParallaxCache,Y
   1634  f833		       09 e0		      ORA	#%11100000
   1635  f835		       4c 3d f8 	      JMP	StoreParallax1
   1636  f838				   HasEmptySpace1
   1637  f838		       b9 d8 00 	      LDA	ParallaxCache,Y
   1638  f83b		       29 1f		      AND	#%00011111
   1639  f83d
   1640  f83d				   StoreParallax1
   1641  f83d		       99 d8 00 	      STA	ParallaxCache,Y
   1642  f840
   1643  f840				   CalculateParallax2
   1644  f840		       98		      TYA
   1645  f841		       18		      CLC
   1646  f842		       65 c9		      ADC	ParallaxOffset2 + 1
   1647  f844		       29 04		      AND	#%00000100
   1648  f846		       f0 05		      BEQ	HasEmptySpace2
   1649  f848				   HasBorder2
   1650  f848		       a9 60		      LDA	#%01100000
   1651  f84a		       4c 4f f8 	      JMP	StoreParallax2
   1652  f84d				   HasEmptySpace2
   1653  f84d		       a9 00		      LDA	#0
   1654  f84f
   1655  f84f				   StoreParallax2
   1656  f84f		       99 f0 00 	      STA	ParallaxCache2,Y
   1657  f852
   1658  f852				   ContinueHorizontalParallaxLoop
   1659  f852		       88		      DEY
   1660  f853		       10 b3		      BPL	HorizontalParallaxLoop
   1661  f855		       60		      RTS
   1662  f856
   1663  f856				   DefaultBorderLoop
   1664  f856				   CalculateDefaultBorder
   1665  f856		       98		      TYA
   1666  f857		       18		      CLC
   1667  f858		       65 91		      ADC	TrafficOffset0 + 1
   1668  f85a		       29 04		      AND	#%00000100
   1669  f85c		       f0 05		      BEQ	HasEmptySpace
   1670  f85e				   HasBorder
   1671  f85e		       a9 ff		      LDA	#$FF
   1672  f860		       4c 65 f8 	      JMP	StoreBorder
   1673  f863				   HasEmptySpace
   1674  f863		       a9 00		      LDA	#0
   1675  f865
   1676  f865				   StoreBorder
   1677  f865		       99 d8 00 	      STA	ParallaxCache,Y
   1678  f868		       a9 00		      LDA	#0
   1679  f86a		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1680  f86d
   1681  f86d				   ContinueDefaultBorderLoop
   1682  f86d		       88		      DEY
   1683  f86e		       10 e6		      BPL	DefaultBorderLoop
   1684  f870		       60		      RTS
   1685  f871
   1686  f871				   PrepareTachometerBorderLoop
   1687  f871		       a5 8e		      LDA	Player0SpeedL
   1688  f873		       29 80		      AND	#%10000000
   1689  f875		       05 8f		      ORA	Player0SpeedH
   1690  f877		       18		      CLC
   1691  f878		       2a		      ROL
   1692  f879		       69 00		      ADC	#0
   1693  f87b		       85 b0		      STA	Tmp0	; Gear
   1694  f87d		       a5 8e		      LDA	Player0SpeedL
   1695  f87f		       4a		      LSR
   1696  f880		       4a		      LSR
   1697  f881		       4a		      LSR
   1698  f882		       4a		      LSR
   1699  f883		       29 07		      AND	#%00000111
   1700  f885		       85 b1		      STA	Tmp1	; RPM
   1701  f887		       a6 a9		      LDX	CurrentCarId	; Y cannot be destroyed here
   1702  f889		       bd d9 ff 	      LDA	CarIdToMaxGear,X
   1703  f88c		       85 b2		      STA	Tmp2	; Max Gear
   1704  f88e
   1705  f88e				   TachometerBorderLoop
   1706  f88e		       98		      TYA
   1707  f88f		       18		      CLC
   1708  f890		       65 91		      ADC	TrafficOffset0 + 1
   1709  f892		       29 04		      AND	#%00000100
   1710  f894		       f0 10		      BEQ	HasBorderTac
   1711  f896		       a6 b0		      LDX	Tmp0
   1712  f898		       bd eb fd 	      LDA	TachometerGearLookup,X
   1713  f89b		       99 d8 00 	      STA	ParallaxCache,Y
   1714  f89e		       a9 00		      LDA	#0
   1715  f8a0		       99 f0 00 	      STA	ParallaxCache2,Y
   1716  f8a3		       4c c8 f8 	      JMP	ContinueBorderTac
   1717  f8a6				   HasBorderTac
   1718  f8a6		       a5 b2		      LDA	Tmp2	; Max Gear
   1719  f8a8		       c5 b0		      CMP	Tmp0	; Only on max speed
   1720  f8aa		       f0 11		      BEQ	FullBorderTac
   1721  f8ac		       a6 b1		      LDX	Tmp1
   1722  f8ae		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1723  f8b1		       99 d8 00 	      STA	ParallaxCache,Y
   1724  f8b4		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1725  f8b7		       99 f0 00 	      STA	ParallaxCache2,Y
   1726  f8ba		       4c c8 f8 	      JMP	ContinueBorderTac
   1727  f8bd
   1728  f8bd				   FullBorderTac
   1729  f8bd		       a9 ff		      LDA	#$FF
   1730  f8bf		       99 d8 00 	      STA	ParallaxCache,Y
   1731  f8c2		       99 f0 00 	      STA	ParallaxCache2,Y
   1732  f8c5		       4c c8 f8 	      JMP	ContinueBorderTac
   1733  f8c8
   1734  f8c8				   ContinueBorderTac
   1735  f8c8		       88		      DEY
   1736  f8c9		       10 c3		      BPL	TachometerBorderLoop
   1737  f8cb		       60		      RTS
   1738  f8cc
   1739  f8cc				   VerticalParallaxLoop
   1740  f8cc				   CalculateVerticalParallax0
   1741  f8cc		       98		      TYA
   1742  f8cd		       18		      CLC
   1743  f8ce		       65 91		      ADC	TrafficOffset0 + 1
   1744  f8d0		       29 06		      AND	#%00000110
   1745  f8d2		       d0 0b		      BNE	HasNoVerticalLine0
   1746  f8d4				   HasVerticalLine0
   1747  f8d4		       a9 ff		      LDA	#$FF
   1748  f8d6		       99 d8 00 	      STA	ParallaxCache,Y
   1749  f8d9		       99 f0 00 	      STA	ParallaxCache2,Y
   1750  f8dc		       4c 1c f9 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1751  f8df				   HasNoVerticalLine0
   1752  f8df		       a9 00		      LDA	#0
   1753  f8e1		       99 d8 00 	      STA	ParallaxCache,Y
   1754  f8e4		       99 f0 00 	      STA	ParallaxCache2,Y
   1755  f8e7
   1756  f8e7				   CalculateVerticalParallax1
   1757  f8e7		       98		      TYA
   1758  f8e8		       18		      CLC
   1759  f8e9		       65 c7		      ADC	ParallaxOffset1 + 1
   1760  f8eb		       29 07		      AND	#%00000111
   1761  f8ed		       d0 0d		      BNE	HasNoVerticalLine1
   1762  f8ef
   1763  f8ef				   HasVerticalLine1
   1764  f8ef		       a9 fc		      LDA	#%11111100
   1765  f8f1		       99 d8 00 	      STA	ParallaxCache,Y
   1766  f8f4		       a9 c0		      LDA	#%11000000
   1767  f8f6		       99 f0 00 	      STA	ParallaxCache2,Y
   1768  f8f9		       4c 1c f9 	      JMP	ContinueVerticalParallaxLoop
   1769  f8fc				   HasNoVerticalLine1
   1770  f8fc		       a9 00		      LDA	#0
   1771  f8fe		       99 d8 00 	      STA	ParallaxCache,Y
   1772  f901		       99 f0 00 	      STA	ParallaxCache2,Y
   1773  f904
   1774  f904				   CalculateVerticalParallax2
   1775  f904		       98		      TYA
   1776  f905		       18		      CLC
   1777  f906		       65 c9		      ADC	ParallaxOffset2 + 1
   1778  f908		       29 07		      AND	#%00000111
   1779  f90a		       d0 08		      BNE	HasNoVerticalLine2
   1780  f90c
   1781  f90c				   HasVerticalLine2
   1782  f90c		       a9 f0		      LDA	#%11110000
   1783  f90e		       99 d8 00 	      STA	ParallaxCache,Y
   1784  f911		       4c 1c f9 	      JMP	ContinueVerticalParallaxLoop
   1785  f914				   HasNoVerticalLine2
   1786  f914		       a9 00		      LDA	#0
   1787  f916		       99 d8 00 	      STA	ParallaxCache,Y
   1788  f919		       99 f0 00 	      STA	ParallaxCache2,Y
   1789  f91c
   1790  f91c				   ContinueVerticalParallaxLoop
   1791  f91c		       88		      DEY
   1792  f91d		       10 ad		      BPL	VerticalParallaxLoop
   1793  f91f		       60		      RTS
   1794  f920
   1795  f920				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1796  f920		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1797  f922		       85 d5		      STA	ScoreFontColor
   1798  f924		       a9 01		      LDA	#1
   1799  f926		       85 d6		      STA	ScoreFontColorHoldChange
   1800  f928
   1801  f928		       a5 8d		      LDA	FrameCount1
   1802  f92a		       29 07		      AND	#%00000111
   1803  f92c		       85 b3		      STA	Tmp3
   1804  f92e							;0 is Zelda Name, (default)
   1805  f92e		       a9 01		      LDA	#1
   1806  f930		       c5 b3		      CMP	Tmp3
   1807  f932		       f0 38		      BEQ	PrintZeldaDateLeft
   1808  f934
   1809  f934		       a9 02		      LDA	#2
   1810  f936		       c5 b3		      CMP	Tmp3
   1811  f938		       f0 23		      BEQ	PrintPolvinhosLeft
   1812  f93a
   1813  f93a		       a9 03		      LDA	#3
   1814  f93c		       c5 b3		      CMP	Tmp3
   1815  f93e		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1816  f940
   1817  f940		       a9 04		      LDA	#4
   1818  f942		       c5 b3		      CMP	Tmp3
   1819  f944		       f0 1c		      BEQ	PrintIvonneLeft
   1820  f946
   1821  f946		       a9 05		      LDA	#5
   1822  f948		       c5 b3		      CMP	Tmp3
   1823  f94a		       f0 2a		      BEQ	PrintIvonneDateLeft
   1824  f94c
   1825  f94c		       a9 06		      LDA	#6
   1826  f94e		       c5 b3		      CMP	Tmp3
   1827  f950		       f0 15		      BEQ	PrintArtLeft
   1828  f952
   1829  f952		       a9 07		      LDA	#7
   1830  f954		       c5 b3		      CMP	Tmp3
   1831  f956		       f0 23		      BEQ	PrintLeonardoLeft
   1832  f958
   1833  f958				   PrintZeldaLeft
   1834  f958		       a2 28		      LDX	#<ZeldaTextLeft
   1835  f95a		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1836  f95d				   PrintPolvinhosLeft
   1837  f95d		       a2 3c		      LDX	#<PolvinhosTextLeft
   1838  f95f		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1839  f962				   PrintIvonneLeft
   1840  f962		       a2 50		      LDX	#<IvonneTextLeft
   1841  f964		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1842  f967				   PrintArtLeft
   1843  f967		       a2 64		      LDX	#<PaperArtTextLeft
   1844  f969		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1845  f96c
   1846  f96c				   PrintZeldaDateLeft
   1847  f96c		       a2 32		      LDX	#<ZeldaDateLeft
   1848  f96e		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1849  f971				   PrintPolvinhosDateLeft
   1850  f971		       a2 46		      LDX	#<PolvinhosDateLeft
   1851  f973		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1852  f976				   PrintIvonneDateLeft
   1853  f976		       a2 5a		      LDX	#<IvonneDateLeft
   1854  f978		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1855  f97b				   PrintLeonardoLeft
   1856  f97b		       a2 6e		      LDX	#<LeonardoTextLeft
   1857  f97d		       4c 80 f9 	      JMP	ProcessPrintEasterEgg
   1858  f980
   1859  f980				   ProcessPrintEasterEgg
   1860  f980		       a5 8c		      LDA	FrameCount0	;3
   1861  f982		       29 01		      AND	#%00000001	;2
   1862  f984		       d0 03		      BNE	TranformIntoRightText
   1863  f986		       4c 8e f9 	      JMP	PrintEasterEggText
   1864  f989				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1865  f989		       8a		      TXA
   1866  f98a		       18		      CLC
   1867  f98b		       69 05		      ADC	#HALF_TEXT_SIZE
   1868  f98d		       aa		      TAX
   1869  f98e
   1870  f98e				   PrintEasterEggText
   1871  f98e		       20 ea f7 	      JSR	PrintStaticText
   1872  f991		       60		      RTS
   1873  f992
   1874  f992				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1875  f992		       a2 00		      LDX	#0
   1876  f994		       a0 04		      LDY	#FONT_OFFSET
   1877  f996
   1878  f996				   ScoreLoop		; 20 
   1879  f996		       85 02		      STA	WSYNC	;2
   1880  f998
   1881  f998		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1882  f99a		       85 0d		      STA	PF0	;3
   1883  f99c
   1884  f99c		       a5 82		      LDA	PF1Cache	;3
   1885  f99e		       85 0e		      STA	PF1	;3
   1886  f9a0
   1887  f9a0		       a5 83		      LDA	PF2Cache	;3
   1888  f9a2		       85 0f		      STA	PF2	;3
   1889  f9a4
   1890  f9a4				   DrawScoreD0		; 15
   1891  f9a4		       a6 d0		      LDX	ScoreD0	; 3
   1892  f9a6		       bd 00 fd 	      LDA	Font,X	;4
   1893  f9a9		       85 81		      STA	PF0Cache	;3
   1894  f9ab		       c6 d0		      DEC	ScoreD0	;5
   1895  f9ad
   1896  f9ad				   DrawScoreD1		; 23	
   1897  f9ad		       a6 d1		      LDX	ScoreD1	; 3
   1898  f9af		       bd 00 fd 	      LDA	Font,X	;4
   1899  f9b2		       0a		      ASL		;2
   1900  f9b3		       0a		      ASL		;2
   1901  f9b4		       0a		      ASL		;2
   1902  f9b5		       0a		      ASL		;2
   1903  f9b6		       85 82		      STA	PF1Cache	;3
   1904  f9b8		       c6 d1		      DEC	ScoreD1	;5
   1905  f9ba
   1906  f9ba				   DrawScoreD2		; 20
   1907  f9ba		       a6 d2		      LDX	ScoreD2	; 3
   1908  f9bc		       bd 00 fd 	      LDA	Font,X	;4
   1909  f9bf		       29 0f		      AND	#%00001111	;2
   1910  f9c1		       05 82		      ORA	PF1Cache	;3
   1911  f9c3		       85 82		      STA	PF1Cache	;3
   1912  f9c5		       c6 d2		      DEC	ScoreD2	;5
   1913  f9c7
   1914  f9c7				   DrawScoreD3		; 23
   1915  f9c7		       a6 d3		      LDX	ScoreD3	; 3
   1916  f9c9		       bd 00 fd 	      LDA	Font,X	;4
   1917  f9cc		       4a		      LSR		;2
   1918  f9cd		       4a		      LSR		;2
   1919  f9ce		       4a		      LSR		;2
   1920  f9cf		       4a		      LSR		;2
   1921  f9d0		       85 83		      STA	PF2Cache	;3
   1922  f9d2		       c6 d3		      DEC	ScoreD3	;5
   1923  f9d4
   1924  f9d4				   DrawScoreD4		; 20
   1925  f9d4		       a6 d4		      LDX	ScoreD4	; 3
   1926  f9d6		       bd 00 fd 	      LDA	Font,X	;4
   1927  f9d9		       29 f0		      AND	#%11110000	;2
   1928  f9db		       05 83		      ORA	PF2Cache	;3
   1929  f9dd		       85 83		      STA	PF2Cache	;3
   1930  f9df		       c6 d4		      DEC	ScoreD4	;5
   1931  f9e1
   1932  f9e1
   1933  f9e1		       88		      DEY		;2
   1934  f9e2		       10 b2		      BPL	ScoreLoop	;4
   1935  f9e4
   1936  f9e4		       85 02		      STA	WSYNC
   1937  f9e6		       20 63 f7 	      JSR	LoadAll
   1938  f9e9		       60		      RTS		; 6
   1939  f9ea
   1940  f9ea				   PrintRightDecimalDigits
   1941  f9ea		       b9 00 00 	      LDA	0,Y
   1942  f9ed		       4a		      LSR
   1943  f9ee		       4a		      LSR
   1944  f9ef		       4a		      LSR
   1945  f9f0		       4a		      LSR
   1946  f9f1		       aa		      TAX
   1947  f9f2		       bd be fd 	      LDA	FontLookup,X	;4
   1948  f9f5		       85 d2		      STA	ScoreD2	;3
   1949  f9f7
   1950  f9f7		       b9 00 00 	      LDA	0,Y
   1951  f9fa		       29 0f		      AND	#%00001111
   1952  f9fc		       aa		      TAX
   1953  f9fd		       bd be fd 	      LDA	FontLookup,X	;4
   1954  fa00		       85 d3		      STA	ScoreD3	;3
   1955  fa02
   1956  fa02		       c8		      INY
   1957  fa03		       b9 00 00 	      LDA	0,Y
   1958  fa06		       4a		      LSR
   1959  fa07		       4a		      LSR
   1960  fa08		       4a		      LSR
   1961  fa09		       4a		      LSR
   1962  fa0a		       aa		      TAX
   1963  fa0b		       bd be fd 	      LDA	FontLookup,X	;4
   1964  fa0e		       85 d0		      STA	ScoreD0	;3
   1965  fa10
   1966  fa10		       b9 00 00 	      LDA	0,Y
   1967  fa13		       29 0f		      AND	#%00001111
   1968  fa15		       aa		      TAX
   1969  fa16		       bd be fd 	      LDA	FontLookup,X	;4
   1970  fa19		       85 d1		      STA	ScoreD1	;3
   1971  fa1b
   1972  fa1b		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1973  fa1d		       85 d4		      STA	ScoreD4
   1974  fa1f		       60		      RTS
   1975  fa20
   1976  fa20				   PrintLastLeftDecimalDigits
   1977  fa20		       b9 00 00 	      LDA	0,Y
   1978  fa23		       4a		      LSR
   1979  fa24		       4a		      LSR
   1980  fa25		       4a		      LSR
   1981  fa26		       4a		      LSR
   1982  fa27		       aa		      TAX
   1983  fa28		       bd be fd 	      LDA	FontLookup,X	;4
   1984  fa2b		       85 d3		      STA	ScoreD3	;3
   1985  fa2d		       b9 00 00 	      LDA	0,Y
   1986  fa30		       29 0f		      AND	#%00001111
   1987  fa32		       aa		      TAX
   1988  fa33		       bd be fd 	      LDA	FontLookup,X	;4
   1989  fa36		       85 d4		      STA	ScoreD4	;3
   1990  fa38		       60		      RTS
   1991  fa39
   1992  fa39				   PrintZerosLeft
   1993  fa39		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1994  fa3b		       85 d2		      STA	ScoreD2
   1995  fa3d		       85 d3		      STA	ScoreD3
   1996  fa3f		       85 d4		      STA	ScoreD4
   1997  fa41		       60		      RTS
   1998  fa42
   1999  fa42				   DrawGameOverScoreLine
   2000  fa42		       85 02		      STA	WSYNC
   2001  fa44		       20 92 f9 	      JSR	PrintScore
   2002  fa47		       85 02		      STA	WSYNC
   2003  fa49		       85 02		      STA	WSYNC
   2004  fa4b		       20 54 f7 	      JSR	ClearPF
   2005  fa4e		       60		      RTS
   2006  fa4f
   2007  fa4f				   DrawGameOverScreenLeft
   2008  fa4f		       85 02		      STA	WSYNC
   2009  fa51		       20 54 f7 	      JSR	ClearPF
   2010  fa54
   2011  fa54				   DrawBcdScoreLeft
   2012  fa54		       20 a3 fb 	      JSR	Sleep8Lines
   2013  fa57		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2014  fa59		       85 06		      STA	COLUP0
   2015  fa5b		       85 02		      STA	WSYNC
   2016  fa5d		       a9 86		      LDA	#<CS + #FONT_OFFSET
   2017  fa5f		       85 d0		      STA	ScoreD0
   2018  fa61
   2019  fa61		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2020  fa63		       85 d1		      STA	ScoreD1
   2021  fa65
   2022  fa65		       a5 b7		      LDA	ScoreBcd3
   2023  fa67		       29 0f		      AND	#%00001111
   2024  fa69		       aa		      TAX
   2025  fa6a		       bd be fd 	      LDA	FontLookup,X	;4
   2026  fa6d		       85 d2		      STA	ScoreD2	;3
   2027  fa6f
   2028  fa6f		       a0 b6		      LDY	#ScoreBcd2
   2029  fa71		       20 20 fa 	      JSR	PrintLastLeftDecimalDigits
   2030  fa74
   2031  fa74		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2032  fa77
   2033  fa77				   DrawTimerLeft
   2034  fa77		       20 a3 fb 	      JSR	Sleep8Lines
   2035  fa7a		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2036  fa7c		       85 06		      STA	COLUP0
   2037  fa7e		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   2038  fa80		       85 d0		      STA	ScoreD0
   2039  fa82		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2040  fa84		       85 d1		      STA	ScoreD1
   2041  fa86		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   2042  fa88		       85 d2		      STA	ScoreD2
   2043  fa8a		       a0 bf		      LDY	#TimeBcd2
   2044  fa8c		       85 02		      STA	WSYNC
   2045  fa8e		       20 20 fa 	      JSR	PrintLastLeftDecimalDigits
   2046  fa91		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2047  fa94
   2048  fa94				   DrawGlideTimerLeft
   2049  fa94		       20 a3 fb 	      JSR	Sleep8Lines
   2050  fa97		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2051  fa99		       85 06		      STA	COLUP0
   2052  fa9b		       85 02		      STA	WSYNC
   2053  fa9d		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2054  fa9f		       85 d0		      STA	ScoreD0
   2055  faa1		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2056  faa3		       85 d1		      STA	ScoreD1
   2057  faa5		       20 39 fa 	      JSR	PrintZerosLeft
   2058  faa8		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2059  faab
   2060  faab				   DrawHitCountLeft
   2061  faab		       20 a3 fb 	      JSR	Sleep8Lines
   2062  faae		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2063  fab0		       85 06		      STA	COLUP0
   2064  fab2		       85 02		      STA	WSYNC
   2065  fab4		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2066  fab6		       85 d0		      STA	ScoreD0
   2067  fab8		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2068  faba		       85 d1		      STA	ScoreD1
   2069  fabc		       20 39 fa 	      JSR	PrintZerosLeft
   2070  fabf		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2071  fac2
   2072  fac2				   DrawCheckpointCountLeft
   2073  fac2		       20 a3 fb 	      JSR	Sleep8Lines
   2074  fac5		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2075  fac7		       85 06		      STA	COLUP0
   2076  fac9		       85 02		      STA	WSYNC
   2077  facb		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2078  facd		       85 d0		      STA	ScoreD0
   2079  facf		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2080  fad1		       85 d1		      STA	ScoreD1
   2081  fad3		       20 39 fa 	      JSR	PrintZerosLeft
   2082  fad6		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2083  fad9
   2084  fad9				   DrawGameVersionLeft
   2085  fad9		       20 a3 fb 	      JSR	Sleep8Lines
   2086  fadc		       a9 49		      LDA	#VERSION_COLOR
   2087  fade		       85 06		      STA	COLUP0
   2088  fae0
   2089  fae0		       a5 c5		      LDA	GameMode
   2090  fae2		       aa		      TAX
   2091  fae3		       bd be fd 	      LDA	FontLookup,X	;4
   2092  fae6		       85 d0		      STA	ScoreD0	;3
   2093  fae8
   2094  fae8		       a5 a9		      LDA	CurrentCarId
   2095  faea		       aa		      TAX
   2096  faeb		       bd be fd 	      LDA	FontLookup,X	;4
   2097  faee		       85 d1		      STA	ScoreD1	;3
   2098  faf0
   2099  faf0		       a5 a6		      LDA	StartSWCHB
   2100  faf2		       29 40		      AND	#%01000000	; P0 difficulty
   2101  faf4		       49 40		      EOR	#%01000000	; Reverse bytes
   2102  faf6		       2a		      ROL
   2103  faf7		       2a		      ROL
   2104  faf8		       2a		      ROL
   2105  faf9		       18		      CLC
   2106  fafa		       69 0a		      ADC	#10
   2107  fafc		       aa		      TAX
   2108  fafd		       bd be fd 	      LDA	FontLookup,X	;4
   2109  fb00		       85 d2		      STA	ScoreD2	;3
   2110  fb02
   2111  fb02		       a5 a6		      LDA	StartSWCHB
   2112  fb04		       29 80		      AND	#%10000000	; P0 difficulty
   2113  fb06		       49 80		      EOR	#%10000000	; Reverse bytes
   2114  fb08		       2a		      ROL
   2115  fb09		       2a		      ROL
   2116  fb0a		       18		      CLC
   2117  fb0b		       69 0a		      ADC	#10
   2118  fb0d		       aa		      TAX
   2119  fb0e		       bd be fd 	      LDA	FontLookup,X	;4
   2120  fb11		       85 d3		      STA	ScoreD3	;3
   2121  fb13
   2122  fb13		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2123  fb15		       85 d4		      STA	ScoreD4
   2124  fb17
   2125  fb17		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2126  fb1a
   2127  fb1a		       4c 80 fb 	      JMP	FinalizeDrawGameOver
   2128  fb1d
   2129  fb1d				   DrawGameOverScreenRight
   2130  fb1d		       85 02		      STA	WSYNC
   2131  fb1f		       20 54 f7 	      JSR	ClearPF
   2132  fb22
   2133  fb22				   DrawBcdScoreRight
   2134  fb22		       20 a3 fb 	      JSR	Sleep8Lines
   2135  fb25		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2136  fb27		       85 07		      STA	COLUP1
   2137  fb29		       85 02		      STA	WSYNC
   2138  fb2b		       a0 b4		      LDY	#ScoreBcd0
   2139  fb2d		       20 ea f9 	      JSR	PrintRightDecimalDigits
   2140  fb30
   2141  fb30		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2142  fb33
   2143  fb33				   DrawTimerRight
   2144  fb33		       20 a3 fb 	      JSR	Sleep8Lines
   2145  fb36		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2146  fb38		       85 07		      STA	COLUP1
   2147  fb3a		       a0 bd		      LDY	#TimeBcd0
   2148  fb3c		       20 ea f9 	      JSR	PrintRightDecimalDigits
   2149  fb3f
   2150  fb3f		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2151  fb42				   DrawGlideTimeRight
   2152  fb42		       20 a3 fb 	      JSR	Sleep8Lines
   2153  fb45		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2154  fb47		       85 07		      STA	COLUP1
   2155  fb49		       a0 cd		      LDY	#GlideTimeBcd0
   2156  fb4b		       20 ea f9 	      JSR	PrintRightDecimalDigits
   2157  fb4e		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2158  fb51
   2159  fb51				   DrawHitCountRight
   2160  fb51		       20 a3 fb 	      JSR	Sleep8Lines
   2161  fb54		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2162  fb56		       85 07		      STA	COLUP1
   2163  fb58		       a0 cb		      LDY	#HitCountBcd0
   2164  fb5a		       20 ea f9 	      JSR	PrintRightDecimalDigits
   2165  fb5d		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2166  fb60
   2167  fb60				   DrawCheckpointCountRight
   2168  fb60		       20 a3 fb 	      JSR	Sleep8Lines
   2169  fb63		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2170  fb65		       85 07		      STA	COLUP1
   2171  fb67		       a0 a4		      LDY	#CheckpointBcd0
   2172  fb69		       20 ea f9 	      JSR	PrintRightDecimalDigits
   2173  fb6c		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2174  fb6f
   2175  fb6f				   DrawVersionRight
   2176  fb6f		       20 a3 fb 	      JSR	Sleep8Lines
   2177  fb72		       a9 49		      LDA	#VERSION_COLOR
   2178  fb74		       85 07		      STA	COLUP1
   2179  fb76		       85 02		      STA	WSYNC
   2180  fb78		       a2 78		      LDX	#<VersionText
   2181  fb7a		       20 ea f7 	      JSR	PrintStaticText
   2182  fb7d		       20 42 fa 	      JSR	DrawGameOverScoreLine
   2183  fb80
   2184  fb80				   FinalizeDrawGameOver
   2185  fb80		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2186  fb82		       85 d5		      STA	ScoreFontColor
   2187  fb84		       20 9a fb 	      JSR	Sleep4Lines
   2188  fb87		       20 aa fb 	      JSR	Sleep32Lines
   2189  fb8a		       20 aa fb 	      JSR	Sleep32Lines
   2190  fb8d		       4c 55 f6 	      JMP	PrepareOverscan
   2191  fb90
   2192  fb90				   WaitForVblankEnd
   2193  fb90		       ad 84 02 	      LDA	INTIM
   2194  fb93		       d0 fb		      BNE	WaitForVblankEnd
   2195  fb95		       85 02		      STA	WSYNC
   2196  fb97		       85 01		      STA	VBLANK
   2197  fb99		       60		      RTS
   2198  fb9a
   2199  fb9a				   Sleep4Lines
   2200  fb9a		       85 02		      STA	WSYNC
   2201  fb9c		       85 02		      STA	WSYNC
   2202  fb9e		       85 02		      STA	WSYNC
   2203  fba0		       85 02		      STA	WSYNC
   2204  fba2		       60		      RTS
   2205  fba3
   2206  fba3				   Sleep8Lines
   2207  fba3		       20 9a fb 	      JSR	Sleep4Lines
   2208  fba6		       20 9a fb 	      JSR	Sleep4Lines
   2209  fba9		       60		      RTS
   2210  fbaa
   2211  fbaa				   Sleep32Lines
   2212  fbaa		       20 a3 fb 	      JSR	Sleep8Lines
   2213  fbad		       20 a3 fb 	      JSR	Sleep8Lines
   2214  fbb0		       20 a3 fb 	      JSR	Sleep8Lines
   2215  fbb3		       20 a3 fb 	      JSR	Sleep8Lines
   2216  fbb6		       60		      RTS
   2217  fbb7
   2218  fbb7							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2219  fc00					      org	$FC00
   2220  fc00				   QrCode1
   2221  fc00		       1f		      .byte.b	#%00011111
   2222  fc01		       10		      .byte.b	#%00010000
   2223  fc02		       17		      .byte.b	#%00010111
   2224  fc03		       17		      .byte.b	#%00010111
   2225  fc04		       17		      .byte.b	#%00010111
   2226  fc05		       10		      .byte.b	#%00010000
   2227  fc06		       1f		      .byte.b	#%00011111
   2228  fc07		       00		      .byte.b	#%00000000
   2229  fc08		       17		      .byte.b	#%00010111
   2230  fc09		       10		      .byte.b	#%00010000
   2231  fc0a		       1d		      .byte.b	#%00011101
   2232  fc0b		       16		      .byte.b	#%00010110
   2233  fc0c		       03		      .byte.b	#%00000011
   2234  fc0d		       19		      .byte.b	#%00011001
   2235  fc0e		       13		      .byte.b	#%00010011
   2236  fc0f		       1c		      .byte.b	#%00011100
   2237  fc10		       0b		      .byte.b	#%00001011
   2238  fc11		       00		      .byte.b	#%00000000
   2239  fc12		       1f		      .byte.b	#%00011111
   2240  fc13		       10		      .byte.b	#%00010000
   2241  fc14		       17		      .byte.b	#%00010111
   2242  fc15		       17		      .byte.b	#%00010111
   2243  fc16		       17		      .byte.b	#%00010111
   2244  fc17		       10		      .byte.b	#%00010000
   2245  fc18		       1f		      .byte.b	#%00011111
   2246  fc19
   2247  fc19				   QrCode2
   2248  fc19		       c3		      .byte.b	#%11000011
   2249  fc1a		       9a		      .byte.b	#%10011010
   2250  fc1b		       82		      .byte.b	#%10000010
   2251  fc1c		       da		      .byte.b	#%11011010
   2252  fc1d		       aa		      .byte.b	#%10101010
   2253  fc1e		       ca		      .byte.b	#%11001010
   2254  fc1f		       f3		      .byte.b	#%11110011
   2255  fc20		       78		      .byte.b	#%01111000
   2256  fc21		       df		      .byte.b	#%11011111
   2257  fc22		       fc		      .byte.b	#%11111100
   2258  fc23		       c7		      .byte.b	#%11000111
   2259  fc24		       98		      .byte.b	#%10011000
   2260  fc25		       23		      .byte.b	#%00100011
   2261  fc26		       b9		      .byte.b	#%10111001
   2262  fc27		       d2		      .byte.b	#%11010010
   2263  fc28		       30		      .byte.b	#%00110000
   2264  fc29		       eb		      .byte.b	#%11101011
   2265  fc2a		       28		      .byte.b	#%00101000
   2266  fc2b		       ab		      .byte.b	#%10101011
   2267  fc2c		       72		      .byte.b	#%01110010
   2268  fc2d		       fa		      .byte.b	#%11111010
   2269  fc2e		       7a		      .byte.b	#%01111010
   2270  fc2f		       32		      .byte.b	#%00110010
   2271  fc30		       3a		      .byte.b	#%00111010
   2272  fc31		       63		      .byte.b	#%01100011
   2273  fc32
   2274  fc32				   QrCode3
   2275  fc32		       98		      .byte.b	#%10011000
   2276  fc33		       c3		      .byte.b	#%11000011
   2277  fc34		       39		      .byte.b	#%00111001
   2278  fc35		       34		      .byte.b	#%00110100
   2279  fc36		       ff		      .byte.b	#%11111111
   2280  fc37		       71		      .byte.b	#%01110001
   2281  fc38		       d5		      .byte.b	#%11010101
   2282  fc39		       d1		      .byte.b	#%11010001
   2283  fc3a		       5f		      .byte.b	#%01011111
   2284  fc3b		       26		      .byte.b	#%00100110
   2285  fc3c		       2d		      .byte.b	#%00101101
   2286  fc3d		       e9		      .byte.b	#%11101001
   2287  fc3e		       d6		      .byte.b	#%11010110
   2288  fc3f		       26		      .byte.b	#%00100110
   2289  fc40		       ba		      .byte.b	#%10111010
   2290  fc41		       03		      .byte.b	#%00000011
   2291  fc42		       dd		      .byte.b	#%11011101
   2292  fc43		       e0		      .byte.b	#%11100000
   2293  fc44		       57		      .byte.b	#%01010111
   2294  fc45		       14		      .byte.b	#%00010100
   2295  fc46		       35		      .byte.b	#%00110101
   2296  fc47		       e5		      .byte.b	#%11100101
   2297  fc48		       b5		      .byte.b	#%10110101
   2298  fc49		       d4		      .byte.b	#%11010100
   2299  fc4a		       97		      .byte.b	#%10010111
   2300  fc4b
   2301  fc4b				   QrCode4
   2302  fc4b		       09		      .byte.b	#%00001001
   2303  fc4c		       0e		      .byte.b	#%00001110
   2304  fc4d		       0f		      .byte.b	#%00001111
   2305  fc4e		       0c		      .byte.b	#%00001100
   2306  fc4f		       0c		      .byte.b	#%00001100
   2307  fc50		       08		      .byte.b	#%00001000
   2308  fc51		       08		      .byte.b	#%00001000
   2309  fc52		       06		      .byte.b	#%00000110
   2310  fc53		       06		      .byte.b	#%00000110
   2311  fc54		       0b		      .byte.b	#%00001011
   2312  fc55		       0f		      .byte.b	#%00001111
   2313  fc56		       04		      .byte.b	#%00000100
   2314  fc57		       08		      .byte.b	#%00001000
   2315  fc58		       0f		      .byte.b	#%00001111
   2316  fc59		       09		      .byte.b	#%00001001
   2317  fc5a		       07		      .byte.b	#%00000111
   2318  fc5b		       05		      .byte.b	#%00000101
   2319  fc5c		       00		      .byte.b	#%00000000
   2320  fc5d		       0f		      .byte.b	#%00001111
   2321  fc5e		       08		      .byte.b	#%00001000
   2322  fc5f		       0b		      .byte.b	#%00001011
   2323  fc60		       0b		      .byte.b	#%00001011
   2324  fc61		       0b		      .byte.b	#%00001011
   2325  fc62		       08		      .byte.b	#%00001000
   2326  fc63		       0f		      .byte.b	#%00001111
   2327  fc64
   2328  fc64							; Moved here because of rom space.
   2329  fc64							; The only SBR in constants space
   2330  fc64				   DrawQrCode
   2331  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2332  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2333  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2334  fc6a		       85 0a		      STA	CTRLPF
   2335  fc6c		       20 42 f7 	      JSR	ClearAll	; To be 100 sure!
   2336  fc6f		       ad 82 02 	      LDA	SWCHB
   2337  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2338  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2339  fc76		       86 09		      STX	COLUBK
   2340  fc78		       84 08		      STY	COLUPF
   2341  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2342  fc7d				   StoreReversedQrCode
   2343  fc7d		       86 08		      STX	COLUPF
   2344  fc7f		       84 09		      STY	COLUBK
   2345  fc81
   2346  fc81				   ContinueQrCode
   2347  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2348  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2349  fc85		       20 90 fb 	      JSR	WaitForVblankEnd
   2350  fc88		       20 a3 fb 	      JSR	Sleep8Lines
   2351  fc8b		       20 a3 fb 	      JSR	Sleep8Lines
   2352  fc8e		       20 a3 fb 	      JSR	Sleep8Lines
   2353  fc91
   2354  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2355  fc91		       85 02		      STA	WSYNC
   2356  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2357  fc96		       85 0e		      STA	PF1	;3
   2358  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2359  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2361  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2362  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2363  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2364  fcb3		       85 0e		      STA	PF1	;3
   2365  fcb5
   2366  fcb5		       ca		      DEX		;2
   2367  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2368  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2369  fcba		       88		      DEY		;2
   2370  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2371  fcbd
   2372  fcbd				   EndQrCodeLoop
   2373  fcbd		       85 02		      STA	WSYNC	;
   2374  fcbf		       a9 00		      LDA	#0
   2375  fcc1		       85 0e		      STA	PF1	;3
   2376  fcc3		       85 0f		      STA	PF2	;3
   2377  fcc5
   2378  fcc5		       20 aa fb 	      JSR	Sleep32Lines
   2379  fcc8		       4c 55 f6 	      JMP	PrepareOverscan
   2380  fccb
   2381  fd00					      org	$FD00
   2382  fd00				   Font
   2383  fd00				   C0
   2384  fd00		       e7		      .byte.b	#%11100111	;
   2385  fd01		       a5		      .byte.b	#%10100101	; 
   2386  fd02		       a5		      .byte.b	#%10100101	; 
   2387  fd03		       a5		      .byte.b	#%10100101	; 
   2388  fd04		       e7		      .byte.b	#%11100111	;	
   2389  fd05				   C1
   2390  fd05		       e7		      .byte.b	#%11100111	;
   2391  fd06		       42		      .byte.b	#%01000010	; 
   2392  fd07		       42		      .byte.b	#%01000010	; 
   2393  fd08		       42		      .byte.b	#%01000010	; 
   2394  fd09		       66		      .byte.b	#%01100110	;
   2395  fd0a				   C2
   2396  fd0a		       e7		      .byte.b	#%11100111	;
   2397  fd0b		       24		      .byte.b	#%00100100	; 
   2398  fd0c		       e7		      .byte.b	#%11100111	; 
   2399  fd0d		       81		      .byte.b	#%10000001	; 
   2400  fd0e		       e7		      .byte.b	#%11100111	;
   2401  fd0f				   C3
   2402  fd0f		       e7		      .byte.b	#%11100111	;
   2403  fd10		       81		      .byte.b	#%10000001	; 
   2404  fd11		       e7		      .byte.b	#%11100111	; 
   2405  fd12		       81		      .byte.b	#%10000001	; 
   2406  fd13		       e7		      .byte.b	#%11100111	;
   2407  fd14				   C4
   2408  fd14		       81		      .byte.b	#%10000001	;
   2409  fd15		       81		      .byte.b	#%10000001	; 
   2410  fd16		       e7		      .byte.b	#%11100111	; 
   2411  fd17		       a5		      .byte.b	#%10100101	; 
   2412  fd18		       a5		      .byte.b	#%10100101	;
   2413  fd19				   C5
   2414  fd19		       e7		      .byte.b	#%11100111	;
   2415  fd1a		       81		      .byte.b	#%10000001	; 
   2416  fd1b		       e7		      .byte.b	#%11100111	; 
   2417  fd1c		       24		      .byte.b	#%00100100	; 
   2418  fd1d		       e7		      .byte.b	#%11100111	;
   2419  fd1e				   C6
   2420  fd1e		       e7		      .byte.b	#%11100111	;
   2421  fd1f		       a5		      .byte.b	#%10100101	; 
   2422  fd20		       e7		      .byte.b	#%11100111	; 
   2423  fd21		       24		      .byte.b	#%00100100	; 
   2424  fd22		       e7		      .byte.b	#%11100111	;
   2425  fd23				   C7
   2426  fd23		       81		      .byte.b	#%10000001	;
   2427  fd24		       81		      .byte.b	#%10000001	; 
   2428  fd25		       81		      .byte.b	#%10000001	; 
   2429  fd26		       81		      .byte.b	#%10000001	; 
   2430  fd27		       e7		      .byte.b	#%11100111	;
   2431  fd28				   C8
   2432  fd28		       e7		      .byte.b	#%11100111	;
   2433  fd29		       a5		      .byte.b	#%10100101	; 
   2434  fd2a		       e7		      .byte.b	#%11100111	; 
   2435  fd2b		       a5		      .byte.b	#%10100101	; 
   2436  fd2c		       e7		      .byte.b	#%11100111	;
   2437  fd2d				   C9
   2438  fd2d		       e7		      .byte.b	#%11100111	;
   2439  fd2e		       81		      .byte.b	#%10000001	; 
   2440  fd2f		       e7		      .byte.b	#%11100111	; 
   2441  fd30		       a5		      .byte.b	#%10100101	; 
   2442  fd31		       e7		      .byte.b	#%11100111	;
   2443  fd32				   CA
   2444  fd32		       a5		      .byte.b	#%10100101	;
   2445  fd33		       a5		      .byte.b	#%10100101	; 
   2446  fd34		       e7		      .byte.b	#%11100111	; 
   2447  fd35		       a5		      .byte.b	#%10100101	; 
   2448  fd36		       e7		      .byte.b	#%11100111	;
   2449  fd37				   CB
   2450  fd37		       66		      .byte.b	#%01100110	;
   2451  fd38		       a5		      .byte.b	#%10100101	; 
   2452  fd39		       66		      .byte.b	#%01100110	; 
   2453  fd3a		       a5		      .byte.b	#%10100101	;
   2454  fd3b		       66		      .byte.b	#%01100110	;
   2455  fd3c				   CC
   2456  fd3c		       e7		      .byte.b	#%11100111	;
   2457  fd3d		       24		      .byte.b	#%00100100	; 
   2458  fd3e		       24		      .byte.b	#%00100100	; 
   2459  fd3f		       24		      .byte.b	#%00100100	;
   2460  fd40		       e7		      .byte.b	#%11100111	;
   2461  fd41
   2462  fd41				   CD
   2463  fd41		       66		      .byte.b	#%01100110	;
   2464  fd42		       a5		      .byte.b	#%10100101	; 
   2465  fd43		       a5		      .byte.b	#%10100101	; 
   2466  fd44		       a5		      .byte.b	#%10100101	;
   2467  fd45		       66		      .byte.b	#%01100110	;
   2468  fd46
   2469  fd46				   CE
   2470  fd46		       e7		      .byte.b	#%11100111	;
   2471  fd47		       24		      .byte.b	#%00100100	; 
   2472  fd48		       e7		      .byte.b	#%11100111	; 
   2473  fd49		       24		      .byte.b	#%00100100	; 
   2474  fd4a		       e7		      .byte.b	#%11100111	;
   2475  fd4b
   2476  fd4b				   CF
   2477  fd4b		       24		      .byte.b	#%00100100	;
   2478  fd4c		       24		      .byte.b	#%00100100	; 
   2479  fd4d		       e7		      .byte.b	#%11100111	; 
   2480  fd4e		       24		      .byte.b	#%00100100	; 
   2481  fd4f		       e7		      .byte.b	#%11100111	;
   2482  fd50
   2483  fd50				   CG
   2484  fd50		       c3		      .byte.b	#%11000011	;
   2485  fd51		       a5		      .byte.b	#%10100101	; 
   2486  fd52		       a5		      .byte.b	#%10100101	; 
   2487  fd53		       24		      .byte.b	#%00100100	; 
   2488  fd54		       c3		      .byte.b	#%11000011	;	
   2489  fd55
   2490  fd55				   CH
   2491  fd55		       a5		      .byte.b	#%10100101	;
   2492  fd56		       a5		      .byte.b	#%10100101	; 
   2493  fd57		       e7		      .byte.b	#%11100111	; 
   2494  fd58		       a5		      .byte.b	#%10100101	; 
   2495  fd59		       a5		      .byte.b	#%10100101	;
   2496  fd5a
   2497  fd5a				   CK
   2498  fd5a		       a5		      .byte.b	#%10100101	;
   2499  fd5b		       a5		      .byte.b	#%10100101	; 
   2500  fd5c		       66		      .byte.b	#%01100110	; 
   2501  fd5d		       a5		      .byte.b	#%10100101	; 
   2502  fd5e		       a5		      .byte.b	#%10100101	;
   2503  fd5f
   2504  fd5f				   CL
   2505  fd5f		       e7		      .byte.b	#%11100111	;
   2506  fd60		       24		      .byte.b	#%00100100	; 
   2507  fd61		       24		      .byte.b	#%00100100	; 
   2508  fd62		       24		      .byte.b	#%00100100	; 
   2509  fd63		       24		      .byte.b	#%00100100	;
   2510  fd64
   2511  fd64				   CI
   2512  fd64		       42		      .byte.b	#%01000010	;
   2513  fd65		       42		      .byte.b	#%01000010	; 
   2514  fd66		       42		      .byte.b	#%01000010	; 
   2515  fd67		       42		      .byte.b	#%01000010	; 
   2516  fd68		       42		      .byte.b	#%01000010	;
   2517  fd69
   2518  fd69				   CM
   2519  fd69		       a5		      .byte.b	#%10100101	;
   2520  fd6a		       a5		      .byte.b	#%10100101	; 
   2521  fd6b		       a5		      .byte.b	#%10100101	; 
   2522  fd6c		       e7		      .byte.b	#%11100111	; 
   2523  fd6d		       a5		      .byte.b	#%10100101	;
   2524  fd6e
   2525  fd6e				   CN
   2526  fd6e		       a5		      .byte.b	#%10100101	;
   2527  fd6f		       a5		      .byte.b	#%10100101	; 
   2528  fd70		       a5		      .byte.b	#%10100101	; 
   2529  fd71		       a5		      .byte.b	#%10100101	; 
   2530  fd72		       66		      .byte.b	#%01100110	;	
   2531  fd73
   2532  fd73
   2533  fd73				   CO
   2534  fd73		       42		      .byte.b	#%01000010	;
   2535  fd74		       a5		      .byte.b	#%10100101	; 
   2536  fd75		       a5		      .byte.b	#%10100101	; 
   2537  fd76		       a5		      .byte.b	#%10100101	; 
   2538  fd77		       42		      .byte.b	#%01000010	;	
   2539  fd78
   2540  fd78				   CP
   2541  fd78		       24		      .byte.b	#%00100100	;
   2542  fd79		       24		      .byte.b	#%00100100	; 
   2543  fd7a		       e7		      .byte.b	#%11100111	; 
   2544  fd7b		       a5		      .byte.b	#%10100101	; 
   2545  fd7c		       e7		      .byte.b	#%11100111	;
   2546  fd7d
   2547  fd7d				   CR
   2548  fd7d		       a5		      .byte.b	#%10100101	;
   2549  fd7e		       a5		      .byte.b	#%10100101	; 
   2550  fd7f		       66		      .byte.b	#%01100110	; 
   2551  fd80		       a5		      .byte.b	#%10100101	; 
   2552  fd81		       66		      .byte.b	#%01100110	;
   2553  fd82
   2554  fd82				   CS
   2555  fd82		       66		      .byte.b	#%01100110	;
   2556  fd83		       81		      .byte.b	#%10000001	; 
   2557  fd84		       42		      .byte.b	#%01000010	; 
   2558  fd85		       24		      .byte.b	#%00100100	; 
   2559  fd86		       c3		      .byte.b	#%11000011	;
   2560  fd87
   2561  fd87				   CT
   2562  fd87		       42		      .byte.b	#%01000010	;
   2563  fd88		       42		      .byte.b	#%01000010	; 
   2564  fd89		       42		      .byte.b	#%01000010	; 
   2565  fd8a		       42		      .byte.b	#%01000010	; 
   2566  fd8b		       e7		      .byte.b	#%11100111	;
   2567  fd8c
   2568  fd8c				   CV
   2569  fd8c		       42		      .byte.b	#%01000010	;
   2570  fd8d		       a5		      .byte.b	#%10100101	; 
   2571  fd8e		       a5		      .byte.b	#%10100101	; 
   2572  fd8f		       a5		      .byte.b	#%10100101	; 
   2573  fd90		       a5		      .byte.b	#%10100101	;	
   2574  fd91
   2575  fd91				   CY
   2576  fd91		       42		      .byte.b	#%01000010	;
   2577  fd92		       42		      .byte.b	#%01000010	; 
   2578  fd93		       42		      .byte.b	#%01000010	; 
   2579  fd94		       a5		      .byte.b	#%10100101	; 
   2580  fd95		       a5		      .byte.b	#%10100101	;
   2581  fd96
   2582  fd96				   CW
   2583  fd96		       a5		      .byte.b	#%10100101	;
   2584  fd97		       e7		      .byte.b	#%11100111	; 
   2585  fd98		       a5		      .byte.b	#%10100101	; 
   2586  fd99		       a5		      .byte.b	#%10100101	; 
   2587  fd9a		       a5		      .byte.b	#%10100101	;
   2588  fd9b
   2589  fd9b				   CZ
   2590  fd9b		       e7		      .byte.b	#%11100111	;
   2591  fd9c		       24		      .byte.b	#%00100100	; 
   2592  fd9d		       42		      .byte.b	#%01000010	; 
   2593  fd9e		       81		      .byte.b	#%10000001	; 
   2594  fd9f		       e7		      .byte.b	#%11100111	;
   2595  fda0
   2596  fda0				   Pipe
   2597  fda0		       42		      .byte.b	#%01000010	;
   2598  fda1		       00		      .byte.b	#%00000000	; 
   2599  fda2		       42		      .byte.b	#%01000010	; 
   2600  fda3		       00		      .byte.b	#%00000000	; 
   2601  fda4		       42		      .byte.b	#%01000010	;
   2602  fda5
   2603  fda5				   Exclamation
   2604  fda5		       42		      .byte.b	#%01000010	;
   2605  fda6		       00		      .byte.b	#%00000000	; 
   2606  fda7		       42		      .byte.b	#%01000010	; 
   2607  fda8		       42		      .byte.b	#%01000010	; 
   2608  fda9		       42		      .byte.b	#%01000010	;
   2609  fdaa
   2610  fdaa				   Dot
   2611  fdaa		       42		      .byte.b	#%01000010	;
   2612  fdab		       42		      .byte.b	#%01000010	; 
   2613  fdac		       00		      .byte.b	#%00000000	; 
   2614  fdad		       00		      .byte.b	#%00000000	; 
   2615  fdae		       00		      .byte.b	#%00000000	;
   2616  fdaf
   2617  fdaf				   Colon
   2618  fdaf		       42		      .byte.b	#%01000010	;
   2619  fdb0		       42		      .byte.b	#%01000010	; 
   2620  fdb1		       00		      .byte.b	#%00000000	; 
   2621  fdb2		       42		      .byte.b	#%01000010	; 
   2622  fdb3		       42		      .byte.b	#%01000010	;
   2623  fdb4
   2624  fdb4				   Triangle
   2625  fdb4		       81		      .byte.b	#%10000001	;
   2626  fdb5		       c3		      .byte.b	#%11000011	; 
   2627  fdb6		       e7		      .byte.b	#%11100111	; 
   2628  fdb7		       c3		      .byte.b	#%11000011	; 
   2629  fdb8		       81		      .byte.b	#%10000001	;
   2630  fdb9
   2631  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2632  fdb9		       00		      .byte.b	#0	;
   2633  fdba		       00		      .byte.b	#0	;
   2634  fdbb		       00		      .byte.b	#0	;
   2635  fdbc		       00		      .byte.b	#0	;
   2636  fdbd		       00		      .byte.b	#0	;
   2637  fdbe
   2638  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2639  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2640  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2641  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2642  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2643  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2644  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2645  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2646  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2647  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2648  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2649  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2650  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2651  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2652  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2653  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2654  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2655  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2656  fdcf
   2657  fdcf				   EngineSoundType
   2658  fdcf		       02		      .byte.b	#2
   2659  fdd0		       02		      .byte.b	#2
   2660  fdd1		       0e		      .byte.b	#14
   2661  fdd2		       06		      .byte.b	#6
   2662  fdd3		       06		      .byte.b	#6
   2663  fdd4		       0e		      .byte.b	#14
   2664  fdd5
   2665  fdd5				   EngineBaseFrequence
   2666  fdd5		       1f		      .byte.b	#31
   2667  fdd6		       15		      .byte.b	#21
   2668  fdd7		       14		      .byte.b	#20
   2669  fdd8		       1f		      .byte.b	#31
   2670  fdd9		       16		      .byte.b	#22
   2671  fdda		       03		      .byte.b	#3
   2672  fddb
   2673  fddb				   TachometerSizeLookup1
   2674  fddb		       1f		      .byte.b	#%00011111
   2675  fddc		       3f		      .byte.b	#%00111111
   2676  fddd		       7f		      .byte.b	#%01111111
   2677  fdde		       ff		      .byte.b	#%11111111
   2678  fddf		       ff		      .byte.b	#%11111111
   2679  fde0		       ff		      .byte.b	#%11111111
   2680  fde1		       ff		      .byte.b	#%11111111
   2681  fde2		       ff		      .byte.b	#%11111111
   2682  fde3
   2683  fde3				   TachometerSizeLookup2
   2684  fde3		       00		      .byte.b	#%00000000
   2685  fde4		       00		      .byte.b	#%00000000
   2686  fde5		       00		      .byte.b	#%00000000
   2687  fde6		       00		      .byte.b	#%00000000
   2688  fde7		       80		      .byte.b	#%10000000
   2689  fde8		       c0		      .byte.b	#%11000000
   2690  fde9		       e0		      .byte.b	#%11100000
   2691  fdea		       f0		      .byte.b	#%11110000
   2692  fdeb
   2693  fdeb				   TachometerGearLookup
   2694  fdeb		       01		      .byte.b	#%00000001
   2695  fdec		       02		      .byte.b	#%00000010
   2696  fded		       04		      .byte.b	#%00000100
   2697  fdee		       08		      .byte.b	#%00001000
   2698  fdef		       10		      .byte.b	#%00010000
   2699  fdf0		       30		      .byte.b	#%00110000
   2700  fdf1
   2701  fe00					      org	$FE00
   2702  fe00				   AesTable
   2703  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2704  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2705  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2706  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2707  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2708  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2709  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2710  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2711  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2712  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2713  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2714  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2715  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2716  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2717  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2718  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2719  ff00
   2720  ff00							; From FF00 to FFFB (122 bytes) to use here
   2721  ff00
   2722  ff00				   StaticText		; All static text must be on the same MSB block. 
   2723  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2724  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2725  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2726  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2727  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2728  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2729  ff05
   2730  ff05				   HellwayLeftText
   2731  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2732  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2733  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2734  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2735  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2736  ff0a
   2737  ff0a				   HellwayRightText
   2738  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2739  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2740  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2741  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2742  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2743  ff0f
   2744  ff0f				   OpbText
   2745  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2746  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2747  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2748  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2749  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2750  ff14
   2751  ff14				   YearText
   2752  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2753  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2754  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2755  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2756  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2757  ff19
   2758  ff19				   GameText
   2759  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2760  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2761  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2762  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2763  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2764  ff1e
   2765  ff1e				   OverText
   2766  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2767  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2768  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2769  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2770  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2771  ff23				   GoText
   2772  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2773  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2774  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2775  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2776  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2777  ff28
   2778  ff28				   ZeldaTextLeft
   2779  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2780  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2781  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2782  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2783  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2784  ff2d
   2785  ff2d				   ZeldaTextRight
   2786  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2787  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2788  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2789  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2790  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2791  ff32
   2792  ff32				   ZeldaDateLeft
   2793  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2794  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2795  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2796  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2797  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2798  ff37
   2799  ff37				   ZeldaDateRight
   2800  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2801  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2802  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2803  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2804  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2805  ff3c
   2806  ff3c				   PolvinhosTextLeft
   2807  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2808  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2809  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2810  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2811  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2812  ff41
   2813  ff41				   PolvinhosTextRight
   2814  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2815  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2816  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2817  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2818  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2819  ff46
   2820  ff46				   PolvinhosDateLeft
   2821  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2822  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2823  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2824  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2825  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2826  ff4b
   2827  ff4b				   PolvinhosDateRight
   2828  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2829  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2830  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2831  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2832  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2833  ff50
   2834  ff50				   IvonneTextLeft
   2835  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2836  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2837  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2838  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2839  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2840  ff55
   2841  ff55				   IvonneTextRight
   2842  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2843  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2844  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2845  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2846  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2847  ff5a
   2848  ff5a				   IvonneDateLeft
   2849  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2850  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2851  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2852  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2853  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2854  ff5f
   2855  ff5f				   IvonneDateRight
   2856  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2857  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2858  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2859  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2860  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2861  ff64
   2862  ff64				   PaperArtTextLeft
   2863  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2864  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2865  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2866  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2867  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2868  ff69
   2869  ff69				   PaperArtTextRight
   2870  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2871  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2872  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2873  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2874  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2875  ff6e
   2876  ff6e				   LeonardoTextLeft
   2877  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2878  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2879  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2880  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2881  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2882  ff73
   2883  ff73				   LeonardoTextRight
   2884  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2885  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2886  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2887  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2888  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2889  ff78
   2890  ff78				   VersionText
   2891  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2892  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2893  ff7a		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2894  ff7b		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2895  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2896  ff7d
   2897  ff7d
   2898  ff7d				   EndStaticText
   2899  ff7d
   2900  ff7d				   CarSprite0		; Upside down, Original Car
   2901  ff7d		       00 00 00 00*	      ds	7
   2902  ff84		       7e		      .byte.b	#%01111110
   2903  ff85		       24		      .byte.b	#%00100100
   2904  ff86		       bd		      .byte.b	#%10111101
   2905  ff87		       3c		      .byte.b	#%00111100
   2906  ff88		       bd		      .byte.b	#%10111101
   2907  ff89		       3c		      .byte.b	#%00111100
   2908  ff8a
   2909  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2910  ff8a		       00 00 00 00*	      ds	7
   2911  ff91		       bd		      .byte.b	#%10111101
   2912  ff92		       7e		      .byte.b	#%01111110
   2913  ff93		       5a		      .byte.b	#%01011010
   2914  ff94		       66		      .byte.b	#%01100110
   2915  ff95		       bd		      .byte.b	#%10111101
   2916  ff96		       3c		      .byte.b	#%00111100
   2917  ff97
   2918  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2919  ff97		       00 00 00 00*	      ds	7
   2920  ff9e		       7e		      .byte.b	#%01111110
   2921  ff9f		       a5		      .byte.b	#%10100101
   2922  ffa0		       42		      .byte.b	#%01000010
   2923  ffa1		       42		      .byte.b	#%01000010
   2924  ffa2		       bd		      .byte.b	#%10111101
   2925  ffa3		       7e		      .byte.b	#%01111110
   2926  ffa4
   2927  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2928  ffa4		       00 00 00 00*	      ds	7
   2929  ffab		       3c		      .byte.b	#%00111100
   2930  ffac		       db		      .byte.b	#%11011011
   2931  ffad		       db		      .byte.b	#%11011011
   2932  ffae		       3c		      .byte.b	#%00111100
   2933  ffaf		       5a		      .byte.b	#%01011010
   2934  ffb0		       3c		      .byte.b	#%00111100
   2935  ffb1
   2936  ffb1				   TrafficSpeeds
   2937  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2938  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2939  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2940  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2941  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2942  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2943  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2944  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2945  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2946  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2947  ffbb				   TrafficSpeedsHighDelta
   2948  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2949  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2950  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2951  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2952  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2953  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2954  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2955  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2956  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2957  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2958  ffc5
   2959  ffc5				   CarIdToSpriteAddressL
   2960  ffc5		       7d		      .byte.b	#<CarSprite0
   2961  ffc6		       8a		      .byte.b	#<CarSprite1
   2962  ffc7		       97		      .byte.b	#<CarSprite2
   2963  ffc8		       a4		      .byte.b	#<CarSprite3
   2964  ffc9
   2965  ffc9				   CarIdToSpriteAddressH
   2966  ffc9		       ff		      .byte.b	#>CarSprite0
   2967  ffca		       ff		      .byte.b	#>CarSprite1
   2968  ffcb		       ff		      .byte.b	#>CarSprite2
   2969  ffcc		       ff		      .byte.b	#>CarSprite3
   2970  ffcd
   2971  ffcd				   CarIdToAccelerateSpeed
   2972  ffcd		       80		      .byte.b	#128
   2973  ffce		       c0		      .byte.b	#192
   2974  ffcf		       60		      .byte.b	#96
   2975  ffd0		       c0		      .byte.b	#192
   2976  ffd1
   2977  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2978  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   2979  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   2980  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   2981  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   2982  ffd5
   2983  ffd5				   CarIdToMaxSpeedL
   2984  ffd5		       80		      .byte.b	#$80
   2985  ffd6		       00		      .byte.b	#$00	; One less gear
   2986  ffd7		       80		      .byte.b	#$80
   2987  ffd8		       80		      .byte.b	#$80
   2988  ffd9
   2989  ffd9				   CarIdToMaxGear
   2990  ffd9		       05		      .byte.b	#5
   2991  ffda		       04		      .byte.b	#4	; One less gear
   2992  ffdb		       05		      .byte.b	#5
   2993  ffdc		       05		      .byte.b	#5
   2994  ffdd
   2995  ffdd
   2996  fffc					      org	$FFFC
   2997  fffc		       00 f0		      .word.w	BeforeStart
   2998  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
