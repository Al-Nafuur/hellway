------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     25  f000
     26  f000		       00 00	   CAR_ID_DEFAULT =	0
     27  f000		       00 01	   CAR_ID_HATCHBACK =	1
     28  f000		       00 02	   CAR_ID_SEDAN =	2
     29  f000		       00 03	   CAR_ID_DRAGSTER =	3
     30  f000
     31  f000		       00 0a	   BREAK_SPEED =	10
     32  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     33  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     34  f000
     35  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     36  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     37  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     38  f000
     39  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     40  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     41  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     42  f000
     43  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     44  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     45  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     46  f000
     47  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     48  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     49  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     50  f000
     51  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     52  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     53  f000
     54  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     55  f000
     56  f000		       00 96	   PLAYER1_COLOR =	$96
     57  f000
     58  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     59  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     62  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     63  f000
     64  f000		       00 35	   PLAYER_0_X_START =	$35	;
     65  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     66  f000
     67  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     68  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     69  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     70  f000
     71  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     72  f000
     73  f000		       00 00	   BLACK      =	$00	;
     74  f000
     75  f000		       00 10	   MAX_GAME_MODE =	16
     76  f000
     77  f000		       00 08	   PARALLAX_SIZE =	8
     78  f000
     79  f000		       00 05	   HALF_TEXT_SIZE =	5
     80  f000
     81  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     82  f000
     83  f000		       00 49	   VERSION_COLOR =	$49
     84  f000
     85  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     86  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     87  f000		       00 00	   QR_CODE_COLOR =	$00
     88  f000		       00 19	   QR_CODE_SIZE =	25
     89  f000
     90  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     91  f000
     92  f000		       00 80	   GRP0Cache  =	$80
     93  f000		       00 81	   PF0Cache   =	$81
     94  f000		       00 82	   PF1Cache   =	$82
     95  f000		       00 83	   PF2Cache   =	$83
     96  f000		       00 84	   GRP1Cache  =	$84
     97  f000		       00 85	   ENABLCache =	$85
     98  f000		       00 86	   ENAM0Cache =	$86
     99  f000		       00 87	   ENAM1Cache =	$87
    100  f000
    101  f000		       00 88	   ParallaxMode =	$88
    102  f000
    103  f000		       00 8c	   FrameCount0 =	$8C	;
    104  f000		       00 8d	   FrameCount1 =	$8D	;
    105  f000
    106  f000		       00 8e	   Player0SpeedL =	$8E
    107  f000		       00 8f	   Player0SpeedH =	$8F
    108  f000
    109  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    110  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    111  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    112  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    113  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    114  f000
    115  f000		       00 a4	   CheckpointBcd0 =	$A4
    116  f000		       00 a5	   CheckpointBcd1 =	$A5
    117  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    118  f000		       00 a7	   CarSpritePointerL =	$A7
    119  f000		       00 a8	   CarSpritePointerH =	$A8
    120  f000		       00 a9	   CurrentCarId =	$A9
    121  f000
    122  f000							;Temporary variables, multiple uses
    123  f000		       00 b0	   Tmp0       =	$B0
    124  f000		       00 b1	   Tmp1       =	$B1
    125  f000		       00 b2	   Tmp2       =	$B2
    126  f000		       00 b3	   Tmp3       =	$B3
    127  f000
    128  f000		       00 b4	   ScoreBcd0  =	$B4
    129  f000		       00 b5	   ScoreBcd1  =	$B5
    130  f000		       00 b6	   ScoreBcd2  =	$B6
    131  f000		       00 b7	   ScoreBcd3  =	$B7
    132  f000
    133  f000		       00 b8	   CollisionCounter =	$B8
    134  f000		       00 b9	   Player0X   =	$B9
    135  f000		       00 ba	   CountdownTimer =	$BA
    136  f000		       00 bb	   Traffic0Msb =	$BB
    137  f000		       00 bc	   SwitchDebounceCounter =	$BC
    138  f000
    139  f000		       00 bd	   TimeBcd0   =	$BD
    140  f000		       00 be	   TimeBcd1   =	$BE
    141  f000		       00 bf	   TimeBcd2   =	$BF
    142  f000
    143  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    144  f000		       00 c1	   TrafficChance =	$C1
    145  f000		       00 c2	   CheckpointTime =	$C2
    146  f000		       00 c3	   TrafficColor =	$C3
    147  f000		       00 c4	   CurrentDifficulty =	$C4
    148  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    149  f000
    150  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    151  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    152  f000
    153  f000		       00 ca	   BorderType =	$CA
    154  f000
    155  f000		       00 cb	   HitCountBcd0 =	$CB
    156  f000		       00 cc	   HitCountBcd1 =	$CC
    157  f000
    158  f000		       00 cd	   GlideTimeBcd0 =	$CD
    159  f000		       00 ce	   GlideTimeBcd1 =	$CE
    160  f000
    161  f000		       00 cf	   OneSecondConter =	$CF
    162  f000
    163  f000		       00 d0	   ScoreD0    =	$D0
    164  f000		       00 d1	   ScoreD1    =	$D1
    165  f000		       00 d2	   ScoreD2    =	$D2
    166  f000		       00 d3	   ScoreD3    =	$D3
    167  f000		       00 d4	   ScoreD4    =	$D4
    168  f000		       00 d5	   ScoreFontColor =	$D5
    169  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    170  f000		       00 d7	   NextCheckpoint =	$D7
    171  f000
    172  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    173  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    174  f000
    175  f000
    176  f000							;generic start up stuff, put zero in all...
    177  f000				   BeforeStart		;All variables that are kept on game reset or select
    178  f000		       a0 00		      LDY	#0
    179  f002		       84 bc		      STY	SwitchDebounceCounter
    180  f004		       84 c4		      STY	CurrentDifficulty
    181  f006		       84 c0		      STY	GameStatus
    182  f008		       a0 10		      LDY	#16
    183  f00a		       84 c5		      STY	GameMode
    184  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    185  f00e		       84 88		      STY	ParallaxMode
    186  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    187  f012		       84 a9		      STY	CurrentCarId
    188  f014
    189  f014				   Start
    190  f014		       78		      SEI
    191  f015		       d8		      CLD
    192  f016		       a2 ff		      LDX	#$FF
    193  f018		       9a		      TXS
    194  f019		       a9 00		      LDA	#0
    195  f01b				   ClearMem
    196  f01b		       e0 bc		      CPX	#SwitchDebounceCounter
    197  f01d		       f0 16		      BEQ	SkipClean
    198  f01f		       e0 c5		      CPX	#GameMode
    199  f021		       f0 12		      BEQ	SkipClean
    200  f023		       e0 88		      CPX	#ParallaxMode
    201  f025		       f0 0e		      BEQ	SkipClean
    202  f027		       e0 a9		      CPX	#CurrentCarId
    203  f029		       f0 0a		      BEQ	SkipClean
    204  f02b		       e0 c4		      CPX	#CurrentDifficulty
    205  f02d		       f0 06		      BEQ	SkipClean
    206  f02f		       e0 c0		      CPX	#GameStatus
    207  f031		       f0 02		      BEQ	SkipClean
    208  f033		       95 00		      STA	0,X
    209  f035				   SkipClean
    210  f035		       ca		      DEX
    211  f036		       d0 e3		      BNE	ClearMem
    212  f038
    213  f038							;Setting some variables...
    214  f038
    215  f038				   SettingTrafficOffsets		; Time sensitive with player H position
    216  f038		       85 02		      STA	WSYNC	;We will set player position
    217  f03a		       20 a3 f7 	      JSR	DefaultOffsets
    218  f03d
    219  f03d		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    220  f040		       85 8e		      STA	Player0SpeedL
    221  f042
      0  f042					      SLEEP	11	;18
      1  f042				   .CYCLES    SET	11
      2  f042
      3  f042				  -	      IF	.CYCLES < 2
      4  f042				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f042				  -	      ERR
      6  f042					      ENDIF
      7  f042
      8  f042					      IF	.CYCLES & 1
      9  f042				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f042				  -	      nop	0
     11  f042					      ELSE
     12  f042		       24 00		      bit	VSYNC
     13  f044					      ENDIF
     14  f044				   .CYCLES    SET	.CYCLES - 3
     15  f044					      ENDIF
     16  f044
     17  f044					      REPEAT	.CYCLES / 2
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     19  f048					      REPEND
    223  f048		       85 10		      STA	RESP0
    224  f04a
    225  f04a		       a2 00		      LDX	#0
    226  f04c		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    227  f04f		       85 a6		      STA	StartSWCHB	; For game over
    228  f051		       29 c0		      AND	#%11000000
    229  f053		       f0 0b		      BEQ	CallConfigureDifficulty
    230  f055		       e8		      INX
    231  f056		       c9 80		      CMP	#%10000000
    232  f058		       f0 06		      BEQ	CallConfigureDifficulty
    233  f05a		       e8		      INX
    234  f05b		       c9 40		      CMP	#%01000000
    235  f05d		       f0 01		      BEQ	CallConfigureDifficulty
    236  f05f		       e8		      INX
    237  f060
    238  f060				   CallConfigureDifficulty
    239  f060		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    240  f062		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    241  f064		       a5 c0		      LDA	GameStatus
    242  f066		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    243  f068				   NextCar
    244  f068		       a4 a9		      LDY	CurrentCarId
    245  f06a		       c8		      INY
    246  f06b		       98		      TYA
    247  f06c		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    248  f06e		       85 a9		      STA	CurrentCarId
    249  f070				   StoreCurrentDifficulty
    250  f070		       86 c4		      STX	CurrentDifficulty
    251  f072		       20 5b f7 	      JSR	ConfigureDifficulty
    252  f075
    253  f075				   ConfigureCarSprite
    254  f075		       a4 a9		      LDY	CurrentCarId
    255  f077		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    256  f07a		       85 a7		      STA	CarSpritePointerL
    257  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    258  f07f		       85 a8		      STA	CarSpritePointerH
    259  f081
    260  f081				   SetGameNotRunning
    261  f081		       a9 00		      LDA	#0
    262  f083		       85 c0		      STA	GameStatus
    263  f085
    264  f085				   ConfigureOneSecondTimer
    265  f085		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    266  f087		       85 cf		      STA	OneSecondConter
    267  f089
    268  f089				   HPositioning
    269  f089		       85 02		      STA	WSYNC
    270  f08b
    271  f08b		       a9 30		      LDA	#%00110000	;2 Missile Size
    272  f08d		       85 04		      STA	NUSIZ0	;3
    273  f08f		       85 05		      STA	NUSIZ1	;3
    274  f091
    275  f091		       a9 35		      LDA	#PLAYER_0_X_START	;2
    276  f093		       85 b9		      STA	Player0X	;3
    277  f095
    278  f095		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    279  f097		       85 ba		      STA	CountdownTimer	;3
    280  f099
    281  f099		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    282  f09b		       85 d7		      STA	NextCheckpoint
    283  f09d
    284  f09d		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f09f					      SLEEP	11	;
      1  f09f				   .CYCLES    SET	11
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f					      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f					      ELSE
     12  f09f		       24 00		      bit	VSYNC
     13  f0a1					      ENDIF
     14  f0a1				   .CYCLES    SET	.CYCLES - 3
     15  f0a1					      ENDIF
     16  f0a1
     17  f0a1					      REPEAT	.CYCLES / 2
     18  f0a1		       ea		      nop
     17  f0a1					      REPEND
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     17  f0a3					      REPEND
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    286  f0a5		       85 11		      STA	RESP1
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    288  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2	;
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    290  f0ab		       85 12		      STA	RESM0
      0  f0ad					      SLEEP	2
      1  f0ad				   .CYCLES    SET	2
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad				  -	      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad				  -	      ELSE
     12  f0ad				  -	      bit	VSYNC
     13  f0ad				  -	      ENDIF
     14  f0ad				  -.CYCLES    SET	.CYCLES - 3
     15  f0ad					      ENDIF
     16  f0ad
     17  f0ad					      REPEAT	.CYCLES / 2
     18  f0ad		       ea		      nop
     19  f0ae					      REPEND
    292  f0ae		       85 13		      STA	RESM1
    293  f0b0
    294  f0b0		       a9 f0		      LDA	#$F0
    295  f0b2		       85 24		      STA	HMBL
    296  f0b4		       85 22		      STA	HMM0
    297  f0b6		       85 23		      STA	HMM1
    298  f0b8		       85 02		      STA	WSYNC
    299  f0ba		       85 2a		      STA	HMOVE
    300  f0bc		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    301  f0be		       85 2b		      STA	HMCLR
    302  f0c0
    303  f0c0							;SLEEP 24
    304  f0c0							;STA HMCLR
    305  f0c0
    306  f0c0							;VSYNC time
    307  f0c0				   MainLoop
    308  f0c0		       a9 02		      LDA	#2
    309  f0c2		       85 00		      STA	VSYNC
    310  f0c4		       85 02		      STA	WSYNC
    311  f0c6		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    312  f0c8		       85 2a		      STA	HMOVE	;2
    313  f0ca		       85 02		      STA	WSYNC	;3
    314  f0cc		       a9 29		      LDA	#41	;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    315  f0ce		       8d 96 02 	      STA	TIM64T	;3	
    316  f0d1		       a9 00		      LDA	#0	;2
    317  f0d3		       85 00		      STA	VSYNC	;3	
    318  f0d5
    319  f0d5							;Read Fire Button before, will make it start the game for now.
    320  f0d5				   StartGame
    321  f0d5		       a5 0c		      LDA	INPT4	;3
    322  f0d7		       30 2e		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    323  f0d9		       a5 c0		      LDA	GameStatus	;3
    324  f0db		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
    325  f0dd		       d0 28		      BNE	SkipGameStart
    326  f0df		       a5 c5		      LDA	GameMode
    327  f0e1		       c9 10		      CMP	#MAX_GAME_MODE
    328  f0e3		       d0 0b		      BNE	SetGameRunning
    329  f0e5		       a9 00		      LDA	#0
    330  f0e7		       85 c5		      STA	GameMode
    331  f0e9		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    332  f0eb		       85 bc		      STA	SwitchDebounceCounter
    333  f0ed		       4c 07 f1 	      JMP	SkipGameStart
    334  f0f0				   SetGameRunning
    335  f0f0		       e6 c0		      INC	GameStatus
    336  f0f2		       a9 00		      LDA	#0	;
    337  f0f4		       85 8c		      STA	FrameCount0
    338  f0f6		       85 8d		      STA	FrameCount1
    339  f0f8		       a9 0a		      LDA	#10
    340  f0fa		       85 19		      STA	AUDV0
    341  f0fc		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    342  f0fe		       85 d5		      STA	ScoreFontColor
    343  f100		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    344  f102		       85 d6		      STA	ScoreFontColorHoldChange
    345  f104		       4c 83 f1 	      JMP	SkipIncFC1	; Make the worse case stable
    346  f107				   SkipGameStart
    347  f107
    348  f107				   RandomizeGame
    349  f107		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    350  f109		       d0 30		      BNE	EndRandomizeGame
    351  f10b		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    352  f10d		       29 02		      AND	#%00000010
    353  f10f		       f0 27		      BEQ	DeterministicGame
    354  f111		       a6 96		      LDX	TrafficOffset1 + 2
    355  f113		       bd 00 fe 	      LDA	AesTable,X
    356  f116		       45 8c		      EOR	FrameCount0
    357  f118		       85 96		      STA	TrafficOffset1 + 2
    358  f11a		       a6 9a		      LDX	TrafficOffset2 + 2
    359  f11c		       bd 00 fe 	      LDA	AesTable,X
    360  f11f		       45 8c		      EOR	FrameCount0
    361  f121		       85 9a		      STA	TrafficOffset2 + 2
    362  f123		       a6 9e		      LDX	TrafficOffset3 + 2
    363  f125		       bd 00 fe 	      LDA	AesTable,X
    364  f128		       45 8c		      EOR	FrameCount0
    365  f12a		       85 9e		      STA	TrafficOffset3 + 2
    366  f12c		       a6 a2		      LDX	TrafficOffset4 + 2
    367  f12e		       bd 00 fe 	      LDA	AesTable,X
    368  f131		       45 8c		      EOR	FrameCount0
    369  f133		       85 a2		      STA	TrafficOffset4 + 2
    370  f135		       4c 3b f1 	      JMP	EndRandomizeGame
    371  f138
    372  f138				   DeterministicGame
    373  f138		       20 a3 f7 	      JSR	DefaultOffsets
    374  f13b
    375  f13b				   EndRandomizeGame
    376  f13b
    377  f13b				   ReadSwitches
    378  f13b		       a6 bc		      LDX	SwitchDebounceCounter
    379  f13d		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    380  f13f		       a9 01		      LDA	#%00000001
    381  f141		       2c 82 02 	      BIT	SWCHB
    382  f144		       d0 07		      BNE	SkipReset
    383  f146		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    384  f148		       85 bc		      STA	SwitchDebounceCounter
    385  f14a		       4c 14 f0 	      JMP	Start
    386  f14d				   SkipReset
    387  f14d
    388  f14d				   GameModeSelect
    389  f14d		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    390  f14f		       d0 27		      BNE	SkipGameSelect
    391  f151		       20 5b f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    392  f154				   ReadDpadParallax
    393  f154		       ad 80 02 	      LDA	SWCHA
    394  f157		       29 f0		      AND	#%11110000
    395  f159		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    396  f15b		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    397  f15d		       85 88		      STA	ParallaxMode
    398  f15f				   ContinueGameSelect
    399  f15f		       a9 02		      LDA	#%00000010
    400  f161		       2c 82 02 	      BIT	SWCHB
    401  f164		       d0 12		      BNE	SkipGameSelect
    402  f166		       a6 c5		      LDX	GameMode
    403  f168		       e0 10		      CPX	#MAX_GAME_MODE
    404  f16a		       f0 04		      BEQ	ResetGameMode
    405  f16c		       e8		      INX
    406  f16d		       4c 72 f1 	      JMP	StoreGameMode
    407  f170				   ResetGameMode
    408  f170		       a2 00		      LDX	#0
    409  f172				   StoreGameMode
    410  f172		       86 c5		      STX	GameMode
    411  f174		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    412  f176		       85 bc		      STA	SwitchDebounceCounter
    413  f178				   SkipGameSelect
    414  f178		       4c 7d f1 	      JMP	EndReadSwitches
    415  f17b				   DecrementSwitchDebounceCounter
    416  f17b		       c6 bc		      DEC	SwitchDebounceCounter
    417  f17d				   EndReadSwitches
    418  f17d
    419  f17d				   CountFrame
    420  f17d		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    421  f17f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    422  f181		       e6 8d		      INC	FrameCount1	; 5 Still not used
    423  f183				   SkipIncFC1
    424  f183
    425  f183				   CallDrawQrCode
    426  f183		       a5 c5		      LDA	GameMode
    427  f185		       c9 10		      CMP	#MAX_GAME_MODE
    428  f187		       d0 03		      BNE	TestIsGameRunning
    429  f189		       4c 55 fb 	      JMP	DrawQrCode
    430  f18c
    431  f18c							;Does not update the game if not running
    432  f18c				   TestIsGameRunning
    433  f18c		       a5 c0		      LDA	GameStatus	;3
    434  f18e		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    435  f190		       4c 7f f3 	      JMP	SkipUpdateLogic
    436  f193				   ContinueWithGameLogic
    437  f193
    438  f193
    439  f193				   EverySecond		; 64 frames to be more precise
    440  f193		       a9 3f		      LDA	#%00111111
    441  f195		       25 8c		      AND	FrameCount0
    442  f197		       d0 06		      BNE	SkipEverySecondAction
    443  f199		       c5 ba		      CMP	CountdownTimer
    444  f19b		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    445  f19d		       c6 ba		      DEC	CountdownTimer
    446  f19f				   SkipEverySecondAction
    447  f19f
    448  f19f
    449  f19f				   BreakOnTimeOver		; Uses LDX as the breaking speed
    450  f19f		       a2 00		      LDX	#0
    451  f1a1		       a5 ba		      LDA	CountdownTimer
    452  f1a3		       d0 0b		      BNE	Break
    453  f1a5		       a4 a9		      LDY	CurrentCarId
    454  f1a7		       a5 8c		      LDA	FrameCount0
    455  f1a9		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    456  f1ac		       d0 02		      BNE	Break
    457  f1ae		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    458  f1b0
    459  f1b0				   Break
    460  f1b0		       a9 20		      LDA	#%00100000	;Down in controller
    461  f1b2		       2c 80 02 	      BIT	SWCHA
    462  f1b5		       d0 0b		      BNE	BreakNonZero
    463  f1b7		       a5 0c		      LDA	INPT4	;3
    464  f1b9		       10 05		      BPL	BreakWhileAccelerating
    465  f1bb		       a2 0a		      LDX	#BREAK_SPEED
    466  f1bd		       4c c2 f1 	      JMP	BreakNonZero
    467  f1c0				   BreakWhileAccelerating		; Allow better control while breaking.
    468  f1c0		       a2 05		      LDX	#BREAK_SPEED / 2
    469  f1c2
    470  f1c2				   BreakNonZero
    471  f1c2		       e0 00		      CPX	#0
    472  f1c4		       f0 2b		      BEQ	SkipBreak
    473  f1c6		       86 b0		      STX	Tmp0
    474  f1c8
    475  f1c8				   DecreaseSpeed
    476  f1c8		       38		      SEC
    477  f1c9		       a5 8e		      LDA	Player0SpeedL
    478  f1cb		       e5 b0		      SBC	Tmp0
    479  f1cd		       85 8e		      STA	Player0SpeedL
    480  f1cf		       a5 8f		      LDA	Player0SpeedH
    481  f1d1		       e9 00		      SBC	#0
    482  f1d3		       85 8f		      STA	Player0SpeedH
    483  f1d5
    484  f1d5				   CheckMinSpeed
    485  f1d5		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    486  f1d7		       c9 00		      CMP	#CAR_MIN_SPEED_H
    487  f1d9		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    488  f1db		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    489  f1dd
    490  f1dd				   CompareLBreakSpeed
    491  f1dd		       a5 8e		      LDA	Player0SpeedL
    492  f1df		       c9 00		      CMP	#CAR_MIN_SPEED_L
    493  f1e1		       90 03		      BCC	ResetMinSpeed	; Less than memory
    494  f1e3		       4c ee f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    495  f1e6
    496  f1e6				   ResetMinSpeed
    497  f1e6		       a9 00		      LDA	#CAR_MIN_SPEED_H
    498  f1e8		       85 8f		      STA	Player0SpeedH
    499  f1ea		       a9 00		      LDA	#CAR_MIN_SPEED_L
    500  f1ec		       85 8e		      STA	Player0SpeedL
    501  f1ee
    502  f1ee				   SkipAccelerateIfBreaking
    503  f1ee		       4c 30 f2 	      JMP	SkipAccelerate
    504  f1f1				   SkipBreak
    505  f1f1
    506  f1f1				   Acelerates
    507  f1f1		       a5 ba		      LDA	CountdownTimer
    508  f1f3		       f0 3b		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    509  f1f5				   HalfAccelerationForSedan
    510  f1f5		       a5 a9		      LDA	CurrentCarId
    511  f1f7		       c9 02		      CMP	#CAR_ID_SEDAN
    512  f1f9		       d0 06		      BNE	ContinueAccelerateTest
    513  f1fb		       a5 8c		      LDA	FrameCount0
    514  f1fd		       29 03		      AND	#%00000011
    515  f1ff		       f0 2f		      BEQ	SkipAccelerate
    516  f201				   ContinueAccelerateTest
    517  f201		       a5 0c		      LDA	INPT4	;3
    518  f203		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    519  f205		       a9 10		      LDA	#%00010000	;UP in controller
    520  f207		       2c 80 02 	      BIT	SWCHA
    521  f20a		       d0 24		      BNE	SkipAccelerate
    522  f20c
    523  f20c				   IncreaseCarSpeed
    524  f20c							;Adds speed
    525  f20c		       18		      CLC
    526  f20d		       a5 8e		      LDA	Player0SpeedL
    527  f20f		       a4 a9		      LDY	CurrentCarId
    528  f211		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    529  f214		       85 8e		      STA	Player0SpeedL
    530  f216		       a5 8f		      LDA	Player0SpeedH
    531  f218		       69 00		      ADC	#0
    532  f21a		       85 8f		      STA	Player0SpeedH
    533  f21c
    534  f21c				   CheckIfAlreadyMaxSpeed
    535  f21c		       c9 02		      CMP	#CAR_MAX_SPEED_H
    536  f21e		       90 10		      BCC	SkipAccelerate	; less than my max speed
    537  f220		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    538  f222							;High bit is max, compare the low
    539  f222		       a5 8e		      LDA	Player0SpeedL
    540  f224		       c9 80		      CMP	#CAR_MAX_SPEED_L
    541  f226		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    542  f228							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    543  f228
    544  f228				   ResetToMaxSpeed		; Speed is more, or is already max
    545  f228		       a9 02		      LDA	#CAR_MAX_SPEED_H
    546  f22a		       85 8f		      STA	Player0SpeedH
    547  f22c		       a9 80		      LDA	#CAR_MAX_SPEED_L
    548  f22e		       85 8e		      STA	Player0SpeedL
    549  f230				   SkipAccelerate
    550  f230
    551  f230				   InitUpdateOffsets
    552  f230		       a2 00		      LDX	#0	; Memory Offset 24 bit
    553  f232		       a0 00		      LDY	#0	; Line Speeds 16 bits
    554  f234		       a5 91		      LDA	TrafficOffset0 + 1	;
    555  f236		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    556  f238		       a5 c5		      LDA	GameMode
    557  f23a		       29 04		      AND	#%00000100	; GameModes with high delta
    558  f23c		       f0 02		      BEQ	UpdateOffsets
    559  f23e		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    560  f240
    561  f240				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    562  f240		       38		      SEC
    563  f241		       a5 8e		      LDA	Player0SpeedL
    564  f243		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    565  f246		       85 b0		      STA	Tmp0
    566  f248		       c8		      INY
    567  f249		       a5 8f		      LDA	Player0SpeedH
    568  f24b		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    569  f24e		       85 b1		      STA	Tmp1
    570  f250		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    571  f252		       e9 00		      SBC	#0
    572  f254		       85 b2		      STA	Tmp2
    573  f256
    574  f256				   AddsTheResult
    575  f256		       18		      CLC
    576  f257		       a5 b0		      LDA	Tmp0
    577  f259		       75 90		      ADC	TrafficOffset0,X
    578  f25b		       95 90		      STA	TrafficOffset0,X
    579  f25d		       e8		      INX
    580  f25e		       a5 b1		      LDA	Tmp1
    581  f260		       75 90		      ADC	TrafficOffset0,X
    582  f262		       95 90		      STA	TrafficOffset0,X
    583  f264		       e8		      INX
    584  f265		       a5 b2		      LDA	Tmp2	; Carry
    585  f267		       75 90		      ADC	TrafficOffset0,X
    586  f269		       95 90		      STA	TrafficOffset0,X
    587  f26b		       90 06		      BCC	CalculateOffsetCache
    588  f26d		       e0 02		      CPX	#2	;MSB offset 0
    589  f26f		       d0 02		      BNE	CalculateOffsetCache
    590  f271		       e6 bb		      INC	Traffic0Msb
    591  f273
    592  f273				   CalculateOffsetCache
    593  f273		       e8		      INX
    594  f274		       38		      SEC
    595  f275		       69 00		      ADC	#0	;Increment by one
    596  f277		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    597  f279
    598  f279				   PrepareNextUpdateLoop
    599  f279		       c8		      INY
    600  f27a		       e8		      INX
    601  f27b		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    602  f27d		       d0 c1		      BNE	UpdateOffsets
    603  f27f
    604  f27f				   BcdScore		; 48
    605  f27f		       a5 91		      LDA	TrafficOffset0 + 1	;3
    606  f281		       45 b3		      EOR	Tmp3	;3
    607  f283		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    608  f285		       f0 1b		      BEQ	FinishBcdScore	;2
    609  f287
    610  f287				   ContinueBcdScore
    611  f287		       f8		      SED		;2
    612  f288		       18		      CLC		;2
    613  f289		       a5 b4		      LDA	ScoreBcd0	;3
    614  f28b		       69 01		      ADC	#1	;2
    615  f28d		       85 b4		      STA	ScoreBcd0	;3
    616  f28f		       a5 b5		      LDA	ScoreBcd1	;3
    617  f291		       69 00		      ADC	#0	;2
    618  f293		       85 b5		      STA	ScoreBcd1	;3
    619  f295		       a5 b6		      LDA	ScoreBcd2	;3
    620  f297		       69 00		      ADC	#0	;2
    621  f299		       85 b6		      STA	ScoreBcd2	;3
    622  f29b		       a5 b7		      LDA	ScoreBcd3	;3
    623  f29d		       69 00		      ADC	#0	;2
    624  f29f		       85 b7		      STA	ScoreBcd3	;3
    625  f2a1		       d8		      CLD		;2
    626  f2a2				   FinishBcdScore
    627  f2a2
    628  f2a2							;Until store the movemnt, LDX contains the value to be stored.
    629  f2a2				   TestCollision		;
    630  f2a2							; see if player0 colides with the rest
    631  f2a2		       a5 00		      LDA	CXM0P
    632  f2a4		       05 01		      ORA	CXM1P
    633  f2a6		       05 01		      ORA	CXM1P
    634  f2a8		       05 02		      ORA	CXP0FB
    635  f2aa		       05 07		      ORA	CXPPMM
    636  f2ac		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    637  f2ae		       f0 38		      BEQ	NoCollision	;skip if not hitting...
    638  f2b0		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    639  f2b2		       d0 34		      BNE	NoCollision
    640  f2b4		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    641  f2b6		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    642  f2b8		       f0 2e		      BEQ	NoCollision
    643  f2ba		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    644  f2bc		       f0 2a		      BEQ	NoCollision
    645  f2be		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    646  f2c0		       85 b8		      STA	CollisionCounter	;and store as colision.
    647  f2c2				   CountBcdColision
    648  f2c2		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    649  f2c4		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    650  f2c6		       f0 17		      BEQ	SkipSetColisionSpeed
    651  f2c8		       f8		      SED		;2
    652  f2c9		       18		      CLC		;2
    653  f2ca		       a5 cb		      LDA	HitCountBcd0	;3
    654  f2cc		       69 01		      ADC	#1	;3
    655  f2ce		       85 cb		      STA	HitCountBcd0	;3
    656  f2d0		       a5 cc		      LDA	HitCountBcd1	;3
    657  f2d2		       69 00		      ADC	#0	;2
    658  f2d4		       85 cc		      STA	HitCountBcd1	;3
    659  f2d6		       d8		      CLD		;2
    660  f2d7				   EndCountBcdColision
    661  f2d7		       a9 10		      LDA	#COLLISION_SPEED_L	;
    662  f2d9		       c5 8e		      CMP	Player0SpeedL
    663  f2db		       b0 02		      BCS	SkipSetColisionSpeed
    664  f2dd		       85 8e		      STA	Player0SpeedL
    665  f2df				   SkipSetColisionSpeed
    666  f2df		       a9 00		      LDA	#0
    667  f2e1		       85 8f		      STA	Player0SpeedH
    668  f2e3		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    669  f2e5		       4c 33 f3 	      JMP	StoreHMove	; We keep position consistent
    670  f2e8				   NoCollision
    671  f2e8
    672  f2e8				   DecrementCollision
    673  f2e8		       a4 b8		      LDY	CollisionCounter
    674  f2ea		       f0 07		      BEQ	FinishDecrementCollision
    675  f2ec		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    676  f2ee		       85 04		      STA	NUSIZ0
    677  f2f0		       88		      DEY
    678  f2f1		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    679  f2f3				   FinishDecrementCollision
    680  f2f3
    681  f2f3				   ResetPlayerSize
    682  f2f3		       d0 04		      BNE	FinishResetPlayerSize
    683  f2f5		       a9 30		      LDA	#%00110000
    684  f2f7		       85 04		      STA	NUSIZ0	;
    685  f2f9				   FinishResetPlayerSize
    686  f2f9
    687  f2f9				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    688  f2f9		       c0 01		      CPY	#1	; Last frame before reset
    689  f2fb		       d0 05		      BNE	SkipResetPlayerPosition
    690  f2fd		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    691  f2ff		       4c 33 f3 	      JMP	StoreHMove
    692  f302				   SkipResetPlayerPosition
    693  f302
    694  f302				   MakeDragsterTurnSlow
    695  f302		       a5 a9		      LDA	CurrentCarId
    696  f304		       c9 03		      CMP	#CAR_ID_DRAGSTER
    697  f306		       d0 08		      BNE	PrepareReadXAxis
    698  f308		       a2 00		      LDX	#0
    699  f30a		       a5 8c		      LDA	FrameCount0
    700  f30c		       29 01		      AND	#%00000001
    701  f30e		       f0 23		      BEQ	StoreHMove	; Ignore movement on odd frames for dragster
    702  f310
    703  f310							; for left and right, we're gonna 
    704  f310							; set the horizontal speed, and then do
    705  f310							; a single HMOVE.  We'll use X to hold the
    706  f310							; horizontal speed, then store it in the 
    707  f310							; appropriate register
    708  f310				   PrepareReadXAxis
    709  f310		       a2 00		      LDX	#0
    710  f312		       a4 b9		      LDY	Player0X
    711  f314				   BeginReadLeft
    712  f314		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    713  f316		       a9 40		      LDA	#%01000000	;Left
    714  f318		       2c 80 02 	      BIT	SWCHA
    715  f31b		       d0 07		      BNE	SkipMoveLeft
    716  f31d		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    717  f31f		       c6 b9		      DEC	Player0X
    718  f321		       4c 33 f3 	      JMP	StoreHMove	; Cannot move left and right...
    719  f324				   SkipMoveLeft
    720  f324				   BeginReadRight
    721  f324		       c0 36		      CPY	#PLAYER_0_MAX_X
    722  f326		       f0 0b		      BEQ	SkipMoveRight	; At max already
    723  f328		       a9 80		      LDA	#%10000000	;Right
    724  f32a		       2c 80 02 	      BIT	SWCHA
    725  f32d		       d0 04		      BNE	SkipMoveRight
    726  f32f		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    727  f331		       e6 b9		      INC	Player0X
    728  f333				   SkipMoveRight
    729  f333				   StoreHMove
    730  f333		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    731  f335		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    732  f337
    733  f337				   DividePlayerSpeedBy4
    734  f337		       a5 8f		      LDA	Player0SpeedH
    735  f339		       0a		      ASL
    736  f33a		       0a		      ASL
    737  f33b		       0a		      ASL
    738  f33c		       0a		      ASL
    739  f33d		       0a		      ASL
    740  f33e		       0a		      ASL
    741  f33f		       85 b1		      STA	Tmp1
    742  f341		       a5 8e		      LDA	Player0SpeedL
    743  f343		       4a		      LSR
    744  f344		       4a		      LSR
    745  f345		       29 3f		      AND	#%00111111
    746  f347		       05 b1		      ORA	Tmp1
    747  f349		       85 b0		      STA	Tmp0	; Division Result
    748  f34b
    749  f34b				   CalculateParallax1Offset		; 7/8 speed
    750  f34b		       38		      SEC
    751  f34c		       a5 8e		      LDA	Player0SpeedL
    752  f34e		       e5 b0		      SBC	Tmp0
    753  f350		       85 b2		      STA	Tmp2
    754  f352		       a5 8f		      LDA	Player0SpeedH
    755  f354		       e9 00		      SBC	#0
    756  f356		       85 b3		      STA	Tmp3
    757  f358
    758  f358		       18		      CLC
    759  f359		       a5 c6		      LDA	ParallaxOffset1
    760  f35b		       65 b2		      ADC	Tmp2
    761  f35d		       85 c6		      STA	ParallaxOffset1
    762  f35f		       a5 c7		      LDA	ParallaxOffset1 + 1
    763  f361		       65 b3		      ADC	Tmp3
    764  f363		       85 c7		      STA	ParallaxOffset1 + 1
    765  f365
    766  f365				   CalculateParallax2Offset		; 6/8 speed
    767  f365		       38		      SEC
    768  f366		       a5 b2		      LDA	Tmp2
    769  f368		       e5 b0		      SBC	Tmp0
    770  f36a		       85 b2		      STA	Tmp2
    771  f36c		       a5 b3		      LDA	Tmp3
    772  f36e		       e9 00		      SBC	#0
    773  f370		       85 b3		      STA	Tmp3
    774  f372
    775  f372		       18		      CLC
    776  f373		       a5 c8		      LDA	ParallaxOffset2
    777  f375		       65 b2		      ADC	Tmp2
    778  f377		       85 c8		      STA	ParallaxOffset2
    779  f379		       a5 c9		      LDA	ParallaxOffset2 + 1
    780  f37b		       65 b3		      ADC	Tmp3
    781  f37d		       85 c9		      STA	ParallaxOffset2 + 1
    782  f37f
    783  f37f				   SkipUpdateLogic		; Continue here if not paused
    784  f37f
    785  f37f
    786  f37f				   ProcessBorder		;Can be optimized (probably)
    787  f37f		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    788  f381		       a5 88		      LDA	ParallaxMode
    789  f383		       c9 70		      CMP	#%01110000
    790  f385		       f0 1a		      BEQ	HorizontalParallaxMode
    791  f387		       c9 d0		      CMP	#%11010000
    792  f389		       f0 0a		      BEQ	VerticalParallaxMode
    793  f38b		       c9 b0		      CMP	#%10110000
    794  f38d		       f0 0c		      BEQ	TachometerMode
    795  f38f
    796  f38f				   DefaultBorderMode
    797  f38f		       20 22 f8 	      JSR	DefaultBorderLoop
    798  f392		       4c a4 f3 	      JMP	EndProcessingBorder
    799  f395				   VerticalParallaxMode
    800  f395		       20 91 f8 	      JSR	VerticalParallaxLoop
    801  f398		       4c a4 f3 	      JMP	EndProcessingBorder
    802  f39b				   TachometerMode
    803  f39b		       20 3d f8 	      JSR	PrepareTachometerBorderLoop
    804  f39e		       4c a4 f3 	      JMP	EndProcessingBorder
    805  f3a1				   HorizontalParallaxMode
    806  f3a1		       20 d4 f7 	      JSR	HorizontalParallaxLoop
    807  f3a4
    808  f3a4				   EndProcessingBorder
    809  f3a4
    810  f3a4				   ProcessScoreFontColor
    811  f3a4		       a6 d6		      LDX	ScoreFontColorHoldChange
    812  f3a6		       f0 06		      BEQ	ResetScoreFontColor
    813  f3a8		       ca		      DEX
    814  f3a9		       86 d6		      STX	ScoreFontColorHoldChange
    815  f3ab		       4c b2 f3 	      JMP	SkipScoreFontColor
    816  f3ae				   ResetScoreFontColor
    817  f3ae		       a9 f9		      LDA	#SCORE_FONT_COLOR
    818  f3b0		       85 d5		      STA	ScoreFontColor
    819  f3b2				   SkipScoreFontColor
    820  f3b2
    821  f3b2				   IsGameOver
    822  f3b2		       a5 ba		      LDA	CountdownTimer
    823  f3b4		       05 8e		      ORA	Player0SpeedL
    824  f3b6		       05 8f		      ORA	Player0SpeedH
    825  f3b8		       d0 0b		      BNE	IsCheckpoint
    826  f3ba		       a9 01		      LDA	#1
    827  f3bc		       85 d6		      STA	ScoreFontColorHoldChange
    828  f3be		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    829  f3c0		       85 d5		      STA	ScoreFontColor
    830  f3c2		       4c 06 f4 	      JMP	SkipIsTimeOver
    831  f3c5
    832  f3c5				   IsCheckpoint
    833  f3c5		       a5 d7		      LDA	NextCheckpoint
    834  f3c7		       c5 92		      CMP	TrafficOffset0 + 2
    835  f3c9		       d0 2f		      BNE	SkipIsCheckpoint
    836  f3cb		       18		      CLC
    837  f3cc		       69 10		      ADC	#CHECKPOINT_INTERVAL
    838  f3ce		       85 d7		      STA	NextCheckpoint
    839  f3d0		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    840  f3d2		       85 d5		      STA	ScoreFontColor
    841  f3d4		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    842  f3d6		       85 d6		      STA	ScoreFontColorHoldChange
    843  f3d8				   AddCheckpointBcd
    844  f3d8		       f8		      SED		;2
    845  f3d9		       18		      CLC		;2
    846  f3da		       a5 a4		      LDA	CheckpointBcd0	;3
    847  f3dc		       69 01		      ADC	#1	;3
    848  f3de		       85 a4		      STA	CheckpointBcd0	;3
    849  f3e0		       a5 a5		      LDA	CheckpointBcd1	;3
    850  f3e2		       69 00		      ADC	#0	;2
    851  f3e4		       85 a5		      STA	CheckpointBcd1	;3
    852  f3e6		       d8		      CLD		;2
    853  f3e7				   EndCheckpointBcd
    854  f3e7		       a5 ba		      LDA	CountdownTimer
    855  f3e9		       18		      CLC
    856  f3ea		       65 c2		      ADC	CheckpointTime
    857  f3ec		       85 ba		      STA	CountdownTimer
    858  f3ee		       90 04		      BCC	JumpSkipTimeOver
    859  f3f0		       a9 ff		      LDA	#$FF
    860  f3f2		       85 ba		      STA	CountdownTimer	; Does not overflow!
    861  f3f4				   JumpSkipTimeOver
    862  f3f4		       20 4c f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    863  f3f7		       4c 06 f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    864  f3fa				   SkipIsCheckpoint
    865  f3fa
    866  f3fa				   IsTimeOver
    867  f3fa		       a5 ba		      LDA	CountdownTimer
    868  f3fc		       d0 08		      BNE	SkipIsTimeOver
    869  f3fe		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    870  f400		       85 d6		      STA	ScoreFontColorHoldChange
    871  f402		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    872  f404		       85 d5		      STA	ScoreFontColor
    873  f406				   SkipIsTimeOver
    874  f406
    875  f406				   PrintEasterEggCondition
    876  f406		       a5 8d		      LDA	FrameCount1
    877  f408		       29 38		      AND	#%00111000
    878  f40a		       05 c0		      ORA	GameStatus
    879  f40c		       c9 38		      CMP	#%00111000
    880  f40e		       d0 06		      BNE	ChooseTextSide
    881  f410		       20 e5 f8 	      JSR	PrintEasterEgg
    882  f413		       4c 07 f5 	      JMP	RightScoreWriteEnd
    883  f416
    884  f416							;Could be done during on vblank to save this comparisson time (before draw score), 
    885  f416							;but I am saving vblank cycles for now, in case of 2 players.
    886  f416				   ChooseTextSide		; 
    887  f416		       a5 8c		      LDA	FrameCount0	;3
    888  f418		       29 01		      AND	#%00000001	;2
    889  f41a		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    890  f41c		       4c 9d f4 	      JMP	RightScoreWrite
    891  f41f
    892  f41f				   LeftScoreWrite
    893  f41f		       a5 d5		      LDA	ScoreFontColor
    894  f421		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    895  f423		       f0 4e		      BEQ	PrintCheckpoint
    896  f425		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    897  f427		       f0 52		      BEQ	PrintStartGame
    898  f429		       a5 c0		      LDA	GameStatus
    899  f42b		       f0 56		      BEQ	PrintHellwayLeft
    900  f42d				   WriteDistance		;Not optimized yet, ugly code.
    901  f42d				   Digit0Distance
    902  f42d		       a5 91		      LDA	TrafficOffset0 + 1	;3
    903  f42f		       4a		      LSR		; 2
    904  f430		       4a		      LSR		; 2
    905  f431		       4a		      LSR		; 2
    906  f432		       4a		      LSR		; 2
    907  f433		       aa		      TAX		; 2
    908  f434		       bd be fd 	      LDA	FontLookup,X	;4
    909  f437		       85 d3		      STA	ScoreD3	;3
    910  f439
    911  f439				   Digit1Distance
    912  f439		       a5 92		      LDA	TrafficOffset0 + 2	;3
    913  f43b		       29 0f		      AND	#%00001111	;2
    914  f43d		       aa		      TAX		; 2
    915  f43e		       bd be fd 	      LDA	FontLookup,X	;4 
    916  f441		       85 d2		      STA	ScoreD2	;3
    917  f443
    918  f443				   Digit2Distance
    919  f443		       a5 92		      LDA	TrafficOffset0 + 2	;3
    920  f445		       4a		      LSR		; 2
    921  f446		       4a		      LSR		; 2
    922  f447		       4a		      LSR		; 2
    923  f448		       4a		      LSR		; 2
    924  f449		       aa		      TAX		; 2
    925  f44a		       bd be fd 	      LDA	FontLookup,X	;4
    926  f44d		       85 d1		      STA	ScoreD1	;3
    927  f44f
    928  f44f				   Digit3Distance
    929  f44f		       a5 bb		      LDA	Traffic0Msb	;3
    930  f451		       29 0f		      AND	#%00001111	;2
    931  f453		       aa		      TAX		; 2
    932  f454		       bd be fd 	      LDA	FontLookup,X	;4 
    933  f457		       85 d0		      STA	ScoreD0	;3
    934  f459
    935  f459				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    936  f459		       a5 bb		      LDA	Traffic0Msb
    937  f45b		       29 f0		      AND	#%11110000	;2
    938  f45d		       d0 07		      BNE	DrawDistanceExtraDigit
    939  f45f		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    940  f461		       85 d4		      STA	ScoreD4	;3
    941  f463		       4c 70 f4 	      JMP	EndDrawDistance
    942  f466				   DrawDistanceExtraDigit
    943  f466		       4a		      LSR		; 2
    944  f467		       4a		      LSR		; 2
    945  f468		       4a		      LSR		; 2
    946  f469		       4a		      LSR		; 2
    947  f46a		       aa		      TAX		; 2
    948  f46b		       bd be fd 	      LDA	FontLookup,X	;4
    949  f46e		       85 d4		      STA	ScoreD4	;3
    950  f470
    951  f470				   EndDrawDistance
    952  f470		       4c 07 f5 	      JMP	RightScoreWriteEnd	;3
    953  f473
    954  f473				   PrintCheckpoint
    955  f473		       a2 00		      LDX	#<CheckpointText
    956  f475		       20 b6 f7 	      JSR	PrintStaticText
    957  f478		       4c 07 f5 	      JMP	RightScoreWriteEnd	;3
    958  f47b				   PrintStartGame
    959  f47b		       a2 23		      LDX	#<GoText
    960  f47d		       20 b6 f7 	      JSR	PrintStaticText
    961  f480		       4c 07 f5 	      JMP	RightScoreWriteEnd	;3
    962  f483
    963  f483				   PrintHellwayLeft
    964  f483		       a5 8d		      LDA	FrameCount1
    965  f485		       29 01		      AND	#1
    966  f487		       d0 05		      BNE	PrintCreditsLeft
    967  f489		       a2 05		      LDX	#<HellwayLeftText
    968  f48b		       4c 90 f4 	      JMP	PrintGameMode
    969  f48e				   PrintCreditsLeft
    970  f48e		       a2 0f		      LDX	#<OpbText
    971  f490
    972  f490				   PrintGameMode
    973  f490		       20 b6 f7 	      JSR	PrintStaticText
    974  f493		       a6 c5		      LDX	GameMode
    975  f495		       bd be fd 	      LDA	FontLookup,X	;4 
    976  f498		       85 d0		      STA	ScoreD0	;3
    977  f49a		       4c 07 f5 	      JMP	RightScoreWriteEnd	;3
    978  f49d
    979  f49d				   RightScoreWrite
    980  f49d		       a5 c0		      LDA	GameStatus
    981  f49f		       f0 45		      BEQ	PrintHellwayRight
    982  f4a1		       a5 d5		      LDA	ScoreFontColor
    983  f4a3		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    984  f4a5		       f0 52		      BEQ	PrintGameOver
    985  f4a7				   Digit0Timer
    986  f4a7		       a5 ba		      LDA	CountdownTimer	;3
    987  f4a9		       29 0f		      AND	#%00001111	;2
    988  f4ab		       aa		      TAX		; 2
    989  f4ac		       bd be fd 	      LDA	FontLookup,X	;4 
    990  f4af		       85 d1		      STA	ScoreD1	;3
    991  f4b1
    992  f4b1				   Digit1Timer
    993  f4b1		       a5 ba		      LDA	CountdownTimer	;3
    994  f4b3		       4a		      LSR		; 2
    995  f4b4		       4a		      LSR		; 2
    996  f4b5		       4a		      LSR		; 2
    997  f4b6		       4a		      LSR		; 2
    998  f4b7		       aa		      TAX		; 2
    999  f4b8		       bd be fd 	      LDA	FontLookup,X	;4
   1000  f4bb		       85 d0		      STA	ScoreD0	;3
   1001  f4bd
   1002  f4bd		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1003  f4bf		       85 d2		      STA	ScoreD2	;3
   1004  f4c1
   1005  f4c1				   Digit0Speed
   1006  f4c1		       a5 8e		      LDA	Player0SpeedL
   1007  f4c3		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1008  f4c5		       4a		      LSR		; 2
   1009  f4c6		       4a		      LSR		; 2
   1010  f4c7		       aa		      TAX		; 2
   1011  f4c8		       bd be fd 	      LDA	FontLookup,X	;4
   1012  f4cb		       85 d4		      STA	ScoreD4	;3
   1013  f4cd
   1014  f4cd				   Digit1Speed
   1015  f4cd		       a5 8e		      LDA	Player0SpeedL
   1016  f4cf		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1017  f4d1		       18		      CLC
   1018  f4d2		       2a		      ROL		;First goes into carry
   1019  f4d3		       2a		      ROL
   1020  f4d4		       2a		      ROL
   1021  f4d5		       85 b0		      STA	Tmp0
   1022  f4d7		       a5 8f		      LDA	Player0SpeedH
   1023  f4d9		       0a		      ASL
   1024  f4da		       0a		      ASL
   1025  f4db		       05 b0		      ORA	Tmp0
   1026  f4dd		       aa		      TAX		; 2
   1027  f4de		       bd be fd 	      LDA	FontLookup,X	;4
   1028  f4e1		       85 d3		      STA	ScoreD3	;3
   1029  f4e3		       4c 07 f5 	      JMP	RightScoreWriteEnd
   1030  f4e6
   1031  f4e6				   PrintHellwayRight
   1032  f4e6		       a5 8d		      LDA	FrameCount1
   1033  f4e8		       29 01		      AND	#1
   1034  f4ea		       d0 05		      BNE	PrintCreditsRight
   1035  f4ec		       a2 0a		      LDX	#<HellwayRightText
   1036  f4ee		       4c f3 f4 	      JMP	PrintRightIntro
   1037  f4f1				   PrintCreditsRight
   1038  f4f1		       a2 14		      LDX	#<YearText
   1039  f4f3				   PrintRightIntro
   1040  f4f3		       20 b6 f7 	      JSR	PrintStaticText
   1041  f4f6		       4c 07 f5 	      JMP	RightScoreWriteEnd
   1042  f4f9				   PrintGameOver
   1043  f4f9		       a5 8c		      LDA	FrameCount0
   1044  f4fb		       30 05		      BMI	PrintOverText
   1045  f4fd		       a2 19		      LDX	#<GameText
   1046  f4ff		       4c 04 f5 	      JMP	StoreGameOverText
   1047  f502				   PrintOverText
   1048  f502		       a2 1e		      LDX	#<OverText
   1049  f504				   StoreGameOverText
   1050  f504		       20 b6 f7 	      JSR	PrintStaticText
   1051  f507				   RightScoreWriteEnd
   1052  f507
   1053  f507
   1054  f507				   ScoreBackgroundColor
   1055  f507		       a2 00		      LDX	#0
   1056  f509		       ad 82 02 	      LDA	SWCHB
   1057  f50c		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1058  f50e		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1059  f510		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1060  f512		       a2 03		      LDX	#BACKGROUND_COLOR
   1061  f514				   BlackAndWhiteScoreBg
   1062  f514		       85 b2		      STA	Tmp2	; Score Background
   1063  f516		       86 b3		      STX	Tmp3	; Traffic Background
   1064  f518
   1065  f518				   ConfigurePFForScore
   1066  f518							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1067  f518		       85 09		      STA	COLUBK
   1068  f51a		       20 0e f7 	      JSR	ClearAll
   1069  f51d		       a9 02		      LDA	#%00000010	; Score mode
   1070  f51f		       85 0a		      STA	CTRLPF
   1071  f521		       a5 8c		      LDA	FrameCount0	;3
   1072  f523		       29 01		      AND	#%00000001	;2
   1073  f525		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
   1074  f527				   LeftScoreOn
   1075  f527		       a5 d5		      LDA	ScoreFontColor
   1076  f529		       85 07		      STA	COLUP1
   1077  f52b		       a5 b2		      LDA	Tmp2
   1078  f52d		       85 06		      STA	COLUP0
   1079  f52f		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1080  f531		       85 b1		      STA	Tmp1
   1081  f533		       4c 42 f5 	      JMP	CallWaitForVblankEnd
   1082  f536				   RightScoreOn
   1083  f536		       a5 d5		      LDA	ScoreFontColor
   1084  f538		       85 06		      STA	COLUP0
   1085  f53a		       a5 b2		      LDA	Tmp2
   1086  f53c		       85 07		      STA	COLUP1
   1087  f53e		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1088  f540		       85 b1		      STA	Tmp1
   1089  f542
   1090  f542							; After here we are going to update the screen, No more heavy code
   1091  f542				   CallWaitForVblankEnd
   1092  f542		       20 b9 fb 	      JSR	WaitForVblankEnd
   1093  f545
   1094  f545				   DrawScoreHud
   1095  f545		       20 57 f9 	      JSR	PrintScore
   1096  f548
   1097  f548		       85 02		      STA	WSYNC
   1098  f54a
   1099  f54a		       a5 0c		      LDA	INPT4	;3
   1100  f54c		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1101  f54e		       a5 d5		      LDA	ScoreFontColor
   1102  f550		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1103  f552		       d0 0c		      BNE	WaitAnotherScoreLine
   1104  f554		       a5 8c		      LDA	FrameCount0	;3
   1105  f556		       29 01		      AND	#%00000001	;2
   1106  f558		       f0 03		      BEQ	LeftScoreOnGameOver
   1107  f55a		       4c e2 fa 	      JMP	DrawGameOverScreenRight
   1108  f55d				   LeftScoreOnGameOver
   1109  f55d		       4c 14 fa 	      JMP	DrawGameOverScreenLeft
   1110  f560
   1111  f560				   WaitAnotherScoreLine
   1112  f560		       85 02		      STA	WSYNC
   1113  f562
   1114  f562				   PrepareForTraffic
   1115  f562		       20 20 f7 	      JSR	ClearPF	; 32
   1116  f565
   1117  f565		       85 02		      STA	WSYNC
   1118  f567		       85 02		      STA	WSYNC
   1119  f569
   1120  f569		       a9 31		      LDA	#%00110001	; 2 Score mode
   1121  f56b		       85 0a		      STA	CTRLPF	;3
   1122  f56d
   1123  f56d		       a5 c3		      LDA	TrafficColor	;3
   1124  f56f		       85 08		      STA	COLUPF	;3
   1125  f571
   1126  f571		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1127  f573		       85 07		      STA	COLUP1	;3
   1128  f575
   1129  f575		       a5 d5		      LDA	ScoreFontColor	;3
   1130  f577		       85 06		      STA	COLUP0	;3
   1131  f579
   1132  f579		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1133  f57b
   1134  f57b		       20 20 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1135  f57e
      0  f57e					      SLEEP	14
      1  f57e				   .CYCLES    SET	14
      2  f57e
      3  f57e				  -	      IF	.CYCLES < 2
      4  f57e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f57e				  -	      ERR
      6  f57e					      ENDIF
      7  f57e
      8  f57e				  -	      IF	.CYCLES & 1
      9  f57e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f57e				  -	      nop	0
     11  f57e				  -	      ELSE
     12  f57e				  -	      bit	VSYNC
     13  f57e				  -	      ENDIF
     14  f57e				  -.CYCLES    SET	.CYCLES - 3
     15  f57e					      ENDIF
     16  f57e
     17  f57e					      REPEAT	.CYCLES / 2
     18  f57e		       ea		      nop
     17  f57e					      REPEND
     18  f57f		       ea		      nop
     17  f57f					      REPEND
     18  f580		       ea		      nop
     17  f580					      REPEND
     18  f581		       ea		      nop
     17  f581					      REPEND
     18  f582		       ea		      nop
     17  f582					      REPEND
     18  f583		       ea		      nop
     17  f583					      REPEND
     18  f584		       ea		      nop
     19  f585					      REPEND
   1137  f585
   1138  f585		       a5 b3		      LDA	Tmp3	;3
   1139  f587		       85 09		      STA	COLUBK	;3
   1140  f589		       4c 8e f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1141  f58c							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1142  f58c
   1143  f58c							;main scanline loop...
   1144  f58c				   ScanLoop
   1145  f58c		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1146  f58e
   1147  f58e							;Start of next line!			
   1148  f58e				   DrawCache		;63 Is the last line going to the top of the next frame?
   1149  f58e		       a5 81		      LDA	PF0Cache	;3
   1150  f590		       85 0d		      STA	PF0	;3
   1151  f592
   1152  f592		       a5 82		      LDA	PF1Cache	;3
   1153  f594		       85 0e		      STA	PF1	;3
   1154  f596
   1155  f596		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1156  f598		       b0 04		      BCS	SkipDrawCar	;2
   1157  f59a		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1158  f59c		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1159  f59e				   SkipDrawCar
   1160  f59e
   1161  f59e		       a5 84		      LDA	GRP1Cache	;3
   1162  f5a0		       85 1c		      STA	GRP1	;3
   1163  f5a2
   1164  f5a2		       a5 85		      LDA	ENABLCache	;3
   1165  f5a4		       85 1f		      STA	ENABL	;3
   1166  f5a6
   1167  f5a6		       a5 86		      LDA	ENAM0Cache	;3
   1168  f5a8		       85 1d		      STA	ENAM0	;3
   1169  f5aa
   1170  f5aa		       a5 87		      LDA	ENAM1Cache	;3
   1171  f5ac		       85 1e		      STA	ENAM1	;3
   1172  f5ae
   1173  f5ae		       a9 00		      LDA	#0	;2
   1174  f5b0							;STA PF1Cache ;3
   1175  f5b0		       85 84		      STA	GRP1Cache	;3
   1176  f5b2		       85 85		      STA	ENABLCache	;3
   1177  f5b4		       85 86		      STA	ENAM0Cache	;3
   1178  f5b6		       85 87		      STA	ENAM1Cache	; 3
   1179  f5b8
   1180  f5b8							;BEQ DrawTraffic3
   1181  f5b8				   DrawTraffic1 		; 33
   1182  f5b8		       98		      TYA		; 2
   1183  f5b9		       18		      CLC		; 2 
   1184  f5ba		       65 95		      ADC	TrafficOffset1 + 1	;3
   1185  f5bc		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1186  f5be		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1187  f5c0		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1188  f5c2		       4c c7 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1189  f5c5				   EorOffsetWithCarry
   1190  f5c5		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1191  f5c7				   AfterEorOffsetWithCarry		;17
   1192  f5c7		       aa		      TAX		;2
   1193  f5c8		       bd 00 fe 	      LDA	AesTable,X	; 4
   1194  f5cb		       c5 c1		      CMP	TrafficChance	;3
   1195  f5cd		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1196  f5cf		       a9 ff		      LDA	#$FF	;2
   1197  f5d1		       85 84		      STA	GRP1Cache	;3
   1198  f5d3				   FinishDrawTraffic1
   1199  f5d3
   1200  f5d3				   DrawTraffic2 		; 33
   1201  f5d3		       98		      TYA		; 2
   1202  f5d4		       18		      CLC		; 2 
   1203  f5d5		       65 99		      ADC	TrafficOffset2 + 1	;3
   1204  f5d7		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1205  f5d9		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1206  f5db		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1207  f5dd		       4c e2 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1208  f5e0				   EorOffsetWithCarry2
   1209  f5e0		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1210  f5e2				   AfterEorOffsetWithCarry2		;17
   1211  f5e2		       aa		      TAX		;2
   1212  f5e3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1213  f5e6		       c5 c1		      CMP	TrafficChance	;3
   1214  f5e8		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1215  f5ea		       a9 02		      LDA	#%00000010	;2
   1216  f5ec		       85 85		      STA	ENABLCache	;3
   1217  f5ee				   FinishDrawTraffic2
   1218  f5ee
   1219  f5ee							;STA WSYNC ;65 / 137
   1220  f5ee
   1221  f5ee							; LDA Tmp0 ; Flicker this line if drawing car
   1222  f5ee							; BEQ FinishDrawTraffic4
   1223  f5ee				   DrawTraffic3 		; 33
   1224  f5ee		       98		      TYA		; 2
   1225  f5ef		       18		      CLC		; 2 
   1226  f5f0		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1227  f5f2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1228  f5f4		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1229  f5f6		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1230  f5f8		       4c fd f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1231  f5fb				   EorOffsetWithCarry3
   1232  f5fb		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1233  f5fd				   AfterEorOffsetWithCarry3		;17
   1234  f5fd		       aa		      TAX		;2
   1235  f5fe		       bd 00 fe 	      LDA	AesTable,X	; 4
   1236  f601		       c5 c1		      CMP	TrafficChance	;3
   1237  f603		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1238  f605		       a9 02		      LDA	#%00000010	;2
   1239  f607		       85 86		      STA	ENAM0Cache
   1240  f609				   FinishDrawTraffic3
   1241  f609
   1242  f609				   DrawTraffic4 		; 33
   1243  f609		       98		      TYA		; 2
   1244  f60a		       18		      CLC		; 2 
   1245  f60b		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1246  f60d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1247  f60f		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1248  f611		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1249  f613		       4c 18 f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1250  f616				   EorOffsetWithCarry4
   1251  f616		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1252  f618				   AfterEorOffsetWithCarry4		;17
   1253  f618		       aa		      TAX		;2
   1254  f619		       bd 00 fe 	      LDA	AesTable,X	; 4
   1255  f61c		       c5 c1		      CMP	TrafficChance	;3
   1256  f61e		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1257  f620		       a9 02		      LDA	#%00000010	;2
   1258  f622		       85 87		      STA	ENAM1Cache	;3
   1259  f624				   FinishDrawTraffic4
   1260  f624
   1261  f624				   DrawTraffic0 		; 20
   1262  f624		       98		      TYA		;2
   1263  f625		       29 07		      AND	#%00000111	;2
   1264  f627		       aa		      TAX		;2
   1265  f628		       b5 d8		      LDA	ParallaxCache,X	;4
   1266  f62a		       85 82		      STA	PF1Cache	;3
   1267  f62c		       b5 f0		      LDA	ParallaxCache2,X	;4
   1268  f62e		       85 81		      STA	PF0Cache	;3
   1269  f630
   1270  f630				   SkipDrawTraffic0
   1271  f630
   1272  f630				   WhileScanLoop
   1273  f630		       88		      DEY		;2
   1274  f631		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1275  f633		       4c 8c f5 	      JMP	ScanLoop	;3
   1276  f636				   FinishScanLoop		; 7 209 of 222
   1277  f636
   1278  f636		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1279  f638		       20 2f f7 	      JSR	LoadAll
   1280  f63b		       85 02		      STA	WSYNC	; do stuff!
   1281  f63d		       85 02		      STA	WSYNC
   1282  f63f		       85 02		      STA	WSYNC
   1283  f641							;42 cycles to use here
   1284  f641
   1285  f641				   PrepareOverscan
   1286  f641		       a9 02		      LDA	#2
   1287  f643		       85 02		      STA	WSYNC
   1288  f645		       85 01		      STA	VBLANK
   1289  f647
   1290  f647		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1291  f649		       8d 96 02 	      STA	TIM64T
   1292  f64c
   1293  f64c				   LeftSound		;58
   1294  f64c		       a5 ba		      LDA	CountdownTimer	;3
   1295  f64e		       f0 24		      BEQ	EngineOff	;2
   1296  f650		       a5 8e		      LDA	Player0SpeedL	;3
   1297  f652		       29 80		      AND	#%10000000	;2
   1298  f654		       05 8f		      ORA	Player0SpeedH	;3
   1299  f656		       18		      CLC		;2
   1300  f657		       2a		      ROL		;2
   1301  f658		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1302  f65a		       aa		      TAX		;2
   1303  f65b		       a5 8e		      LDA	Player0SpeedL	;3
   1304  f65d		       4a		      LSR		;2
   1305  f65e		       4a		      LSR		;2
   1306  f65f		       4a		      LSR		;2
   1307  f660		       29 0f		      AND	#%00001111	;2
   1308  f662		       85 b0		      STA	Tmp0	;3
   1309  f664		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1310  f667		       38		      SEC		;2
   1311  f668		       e5 b0		      SBC	Tmp0	;3
   1312  f66a		       85 17		      STA	AUDF0	;3
   1313  f66c		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1314  f66f		       85 15		      STA	AUDC0	;3
   1315  f671		       4c 78 f6 	      JMP	EndLeftSound	;3
   1316  f674				   EngineOff
   1317  f674		       a9 00		      LDA	#0
   1318  f676		       85 15		      STA	AUDC0
   1319  f678
   1320  f678				   EndLeftSound
   1321  f678
   1322  f678
   1323  f678				   RightSound		; 56 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1324  f678		       a5 d5		      LDA	ScoreFontColor	;3
   1325  f67a		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1326  f67c		       f0 4a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1327  f67e		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1328  f680		       f0 21		      BEQ	PlayCheckpoint	;2
   1329  f682		       a5 b8		      LDA	CollisionCounter	;3
   1330  f684		       c9 e0		      CMP	#$E0	;2
   1331  f686		       b0 0c		      BCS	PlayColision	;2
   1332  f688		       a5 d7		      LDA	NextCheckpoint	;3
   1333  f68a		       38		      SEC		;2
   1334  f68b		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1335  f68d		       c9 02		      CMP	#$02	;2
   1336  f68f		       90 24		      BCC	PlayBeforeCheckpoint	;4
   1337  f691		       4c c8 f6 	      JMP	MuteRightSound
   1338  f694				   PlayColision
   1339  f694		       a9 1f		      LDA	#31
   1340  f696		       85 18		      STA	AUDF1
   1341  f698		       a9 08		      LDA	#8
   1342  f69a		       85 16		      STA	AUDC1
   1343  f69c		       a9 08		      LDA	#8
   1344  f69e		       85 1a		      STA	AUDV1
   1345  f6a0		       4c cc f6 	      JMP	EndRightSound
   1346  f6a3
   1347  f6a3				   PlayCheckpoint
   1348  f6a3		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1349  f6a5		       4a		      LSR		;2
   1350  f6a6		       4a		      LSR		;2
   1351  f6a7		       4a		      LSR		;2
   1352  f6a8		       85 18		      STA	AUDF1	;3
   1353  f6aa		       a9 0c		      LDA	#12	;2
   1354  f6ac		       85 16		      STA	AUDC1	;3
   1355  f6ae		       a9 06		      LDA	#6	;2
   1356  f6b0		       85 1a		      STA	AUDV1	;3
   1357  f6b2		       4c cc f6 	      JMP	EndRightSound	;3
   1358  f6b5
   1359  f6b5				   PlayBeforeCheckpoint
   1360  f6b5		       a5 8c		      LDA	FrameCount0	;3
   1361  f6b7		       29 1c		      AND	#%00011100	;2
   1362  f6b9		       09 03		      ORA	#%00000011	;2
   1363  f6bb		       85 18		      STA	AUDF1	;3
   1364  f6bd		       a9 0c		      LDA	#12	;2
   1365  f6bf		       85 16		      STA	AUDC1	;3
   1366  f6c1		       a9 03		      LDA	#3	;2
   1367  f6c3		       85 1a		      STA	AUDV1	;3
   1368  f6c5		       4c cc f6 	      JMP	EndRightSound	;3
   1369  f6c8
   1370  f6c8				   MuteRightSound
   1371  f6c8		       a9 00		      LDA	#0
   1372  f6ca		       85 1a		      STA	AUDV1
   1373  f6cc				   EndRightSound
   1374  f6cc
   1375  f6cc				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1376  f6cc		       a5 c0		      LDA	GameStatus	;3
   1377  f6ce		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1378  f6d0		       a5 d5		      LDA	ScoreFontColor	;3
   1379  f6d2		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1380  f6d4		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1381  f6d6		       c6 cf		      DEC	OneSecondConter	;5
   1382  f6d8		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1383  f6da
   1384  f6da		       f8		      SED		;2 BCD Operations after this point
   1385  f6db				   CountGlideTimeBcd
   1386  f6db		       a5 d5		      LDA	ScoreFontColor	;3
   1387  f6dd		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1388  f6df		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1389  f6e1		       18		      CLC		;2
   1390  f6e2		       a5 cd		      LDA	GlideTimeBcd0	;3
   1391  f6e4		       69 01		      ADC	#1	;3
   1392  f6e6		       85 cd		      STA	GlideTimeBcd0	;3
   1393  f6e8		       a5 ce		      LDA	GlideTimeBcd1	;3
   1394  f6ea		       69 00		      ADC	#0	;2
   1395  f6ec		       85 ce		      STA	GlideTimeBcd1	;3
   1396  f6ee				   EndCountGlideTimeBcd
   1397  f6ee				   IncreaseTotalTimerBcd
   1398  f6ee		       18		      CLC		;2
   1399  f6ef		       a5 bd		      LDA	TimeBcd0	;3
   1400  f6f1		       69 01		      ADC	#1	;2
   1401  f6f3		       85 bd		      STA	TimeBcd0	;3
   1402  f6f5		       a5 be		      LDA	TimeBcd1	;3
   1403  f6f7		       69 00		      ADC	#0	;2
   1404  f6f9		       85 be		      STA	TimeBcd1	;3
   1405  f6fb		       a5 bf		      LDA	TimeBcd2	;3
   1406  f6fd		       69 00		      ADC	#0	;2
   1407  f6ff		       85 bf		      STA	TimeBcd2	;3
   1408  f701
   1409  f701				   ResetOneSecondCounter
   1410  f701		       d8		      CLD		;2
   1411  f702		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1412  f704		       85 cf		      STA	OneSecondConter	;3
   1413  f706
   1414  f706				   EndExactlyEverySecond
   1415  f706
   1416  f706				   OverScanWait
   1417  f706		       ad 84 02 	      LDA	INTIM
   1418  f709		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1419  f70b		       4c c0 f0 	      JMP	MainLoop
   1420  f70e
   1421  f70e				   Subroutines
   1422  f70e
   1423  f70e				   ClearAll		; 52
   1424  f70e		       a9 00		      LDA	#0	;2
   1425  f710		       85 1c		      STA	GRP1	;3
   1426  f712		       85 1f		      STA	ENABL	;3
   1427  f714		       85 1d		      STA	ENAM0	;3
   1428  f716		       85 1e		      STA	ENAM1	;3
   1429  f718		       85 84		      STA	GRP1Cache	;3
   1430  f71a		       85 85		      STA	ENABLCache	;3
   1431  f71c		       85 86		      STA	ENAM0Cache	;3
   1432  f71e		       85 87		      STA	ENAM1Cache	;3
   1433  f720
   1434  f720				   ClearPF		; 26
   1435  f720		       a9 00		      LDA	#0	;2
   1436  f722				   ClearPFSkipLDA0
   1437  f722		       85 0d		      STA	PF0	;3
   1438  f724		       85 0e		      STA	PF1	;3
   1439  f726		       85 0f		      STA	PF2	;3	
   1440  f728		       85 81		      STA	PF0Cache	;3
   1441  f72a		       85 82		      STA	PF1Cache	;3
   1442  f72c		       85 83		      STA	PF2Cache	;3 
   1443  f72e		       60		      RTS		;6
   1444  f72f				   EndClearAll
   1445  f72f
   1446  f72f				   LoadAll		; 48
   1447  f72f		       a5 81		      LDA	PF0Cache	;3
   1448  f731		       85 0d		      STA	PF0	;3
   1449  f733
   1450  f733		       a5 82		      LDA	PF1Cache	;3
   1451  f735		       85 0e		      STA	PF1	;3
   1452  f737
   1453  f737		       a5 83		      LDA	PF2Cache	;3
   1454  f739		       85 0f		      STA	PF2	;3
   1455  f73b
   1456  f73b		       a5 84		      LDA	GRP1Cache	;3
   1457  f73d		       85 1c		      STA	GRP1	;3
   1458  f73f
   1459  f73f		       a5 85		      LDA	ENABLCache	;3
   1460  f741		       85 1f		      STA	ENABL	;3
   1461  f743
   1462  f743		       a5 86		      LDA	ENAM0Cache	;3
   1463  f745		       85 1d		      STA	ENAM0	;3
   1464  f747
   1465  f747		       a5 87		      LDA	ENAM1Cache	;3
   1466  f749		       85 1e		      STA	ENAM1	;3
   1467  f74b
   1468  f74b		       60		      RTS		;6
   1469  f74c				   EndLoadAll
   1470  f74c
   1471  f74c				   NextDifficulty
   1472  f74c		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1473  f74e		       29 01		      AND	#%00000001
   1474  f750		       d0 3f		      BNE	CheckRandomDifficulty
   1475  f752
   1476  f752		       a5 c4		      LDA	CurrentDifficulty
   1477  f754		       18		      CLC
   1478  f755		       69 01		      ADC	#1
   1479  f757		       29 03		      AND	#%00000011	; 0 to 3
   1480  f759		       85 c4		      STA	CurrentDifficulty
   1481  f75b
   1482  f75b				   ConfigureDifficulty
   1483  f75b		       a5 c4		      LDA	CurrentDifficulty
   1484  f75d		       f0 0b		      BEQ	ConfigureLightTraffic
   1485  f75f		       c9 01		      CMP	#1
   1486  f761		       f0 10		      BEQ	ConfigureRegularTraffic
   1487  f763		       c9 02		      CMP	#2
   1488  f765		       f0 15		      BEQ	ConfigureIntenseTraffic
   1489  f767		       4c 85 f7 	      JMP	ConfigureRushHourTraffic
   1490  f76a
   1491  f76a				   ConfigureLightTraffic
   1492  f76a		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1493  f76c		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1494  f76e		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1495  f770		       4c 8b f7 	      JMP	StoreTrafficChance
   1496  f773				   ConfigureRegularTraffic
   1497  f773		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1498  f775		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1499  f777		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1500  f779		       4c 8b f7 	      JMP	StoreTrafficChance
   1501  f77c				   ConfigureIntenseTraffic
   1502  f77c		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1503  f77e		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1504  f780		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1505  f782		       4c 8b f7 	      JMP	StoreTrafficChance
   1506  f785				   ConfigureRushHourTraffic
   1507  f785		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1508  f787		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1509  f789		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1510  f78b
   1511  f78b				   StoreTrafficChance
   1512  f78b		       86 c1		      STX	TrafficChance
   1513  f78d		       84 c2		      STY	CheckpointTime
   1514  f78f		       85 c3		      STA	TrafficColor
   1515  f791
   1516  f791				   CheckRandomDifficulty
   1517  f791		       a5 c5		      LDA	GameMode
   1518  f793		       29 08		      AND	#%00001000	; Random difficulties
   1519  f795		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1520  f797				   RandomDificulty
   1521  f797		       a6 8c		      LDX	FrameCount0
   1522  f799		       bd 00 fe 	      LDA	AesTable,X
   1523  f79c		       45 c1		      EOR	TrafficChance
   1524  f79e		       29 3f		      AND	#%00111111
   1525  f7a0		       85 c1		      STA	TrafficChance
   1526  f7a2
   1527  f7a2				   ReturnFromNextDifficulty
   1528  f7a2		       60		      RTS
   1529  f7a3				   EndNextDifficulty
   1530  f7a3
   1531  f7a3				   DefaultOffsets
   1532  f7a3		       a9 20		      LDA	#$20
   1533  f7a5		       85 96		      STA	TrafficOffset1 + 2
   1534  f7a7		       a9 40		      LDA	#$40
   1535  f7a9		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1536  f7ab		       a9 60		      LDA	#$60
   1537  f7ad		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1538  f7af		       a9 80		      LDA	#$80
   1539  f7b1		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1540  f7b3		       a9 a0		      LDA	#$A0
   1541  f7b5		       60		      RTS
   1542  f7b6
   1543  f7b6				   PrintStaticText		; Preload X with the offset referent to StaticText
   1544  f7b6		       bd 00 ff 	      LDA	StaticText,X
   1545  f7b9		       85 d0		      STA	ScoreD0
   1546  f7bb		       e8		      INX
   1547  f7bc		       bd 00 ff 	      LDA	StaticText,X
   1548  f7bf		       85 d1		      STA	ScoreD1
   1549  f7c1		       e8		      INX
   1550  f7c2		       bd 00 ff 	      LDA	StaticText,X
   1551  f7c5		       85 d2		      STA	ScoreD2
   1552  f7c7		       e8		      INX
   1553  f7c8		       bd 00 ff 	      LDA	StaticText,X
   1554  f7cb		       85 d3		      STA	ScoreD3
   1555  f7cd		       e8		      INX
   1556  f7ce		       bd 00 ff 	      LDA	StaticText,X
   1557  f7d1		       85 d4		      STA	ScoreD4
   1558  f7d3		       60		      RTS
   1559  f7d4
   1560  f7d4				   HorizontalParallaxLoop
   1561  f7d4		       a9 ef		      LDA	#%11101111	; Clear the house
   1562  f7d6		       39 d8 00 	      AND	ParallaxCache,Y
   1563  f7d9		       99 d8 00 	      STA	ParallaxCache,Y
   1564  f7dc				   CalculateParallax0
   1565  f7dc		       98		      TYA
   1566  f7dd		       18		      CLC
   1567  f7de		       65 91		      ADC	TrafficOffset0 + 1
   1568  f7e0		       29 04		      AND	#%00000100
   1569  f7e2		       f0 08		      BEQ	HasEmptySpace0
   1570  f7e4				   HasBorder0
   1571  f7e4		       b9 d8 00 	      LDA	ParallaxCache,Y
   1572  f7e7		       09 0f		      ORA	#%00001111
   1573  f7e9		       4c f1 f7 	      JMP	StoreParallax0
   1574  f7ec				   HasEmptySpace0
   1575  f7ec		       b9 d8 00 	      LDA	ParallaxCache,Y
   1576  f7ef		       29 f0		      AND	#%11110000
   1577  f7f1
   1578  f7f1				   StoreParallax0
   1579  f7f1		       99 d8 00 	      STA	ParallaxCache,Y
   1580  f7f4
   1581  f7f4				   CalculateParallax1
   1582  f7f4		       98		      TYA
   1583  f7f5		       18		      CLC
   1584  f7f6		       65 c7		      ADC	ParallaxOffset1 + 1
   1585  f7f8		       29 04		      AND	#%00000100
   1586  f7fa		       f0 08		      BEQ	HasEmptySpace1
   1587  f7fc				   HasBorder1
   1588  f7fc		       b9 d8 00 	      LDA	ParallaxCache,Y
   1589  f7ff		       09 e0		      ORA	#%11100000
   1590  f801		       4c 09 f8 	      JMP	StoreParallax1
   1591  f804				   HasEmptySpace1
   1592  f804		       b9 d8 00 	      LDA	ParallaxCache,Y
   1593  f807		       29 1f		      AND	#%00011111
   1594  f809
   1595  f809				   StoreParallax1
   1596  f809		       99 d8 00 	      STA	ParallaxCache,Y
   1597  f80c
   1598  f80c				   CalculateParallax2
   1599  f80c		       98		      TYA
   1600  f80d		       18		      CLC
   1601  f80e		       65 c9		      ADC	ParallaxOffset2 + 1
   1602  f810		       29 04		      AND	#%00000100
   1603  f812		       f0 05		      BEQ	HasEmptySpace2
   1604  f814				   HasBorder2
   1605  f814		       a9 60		      LDA	#%01100000
   1606  f816		       4c 1b f8 	      JMP	StoreParallax2
   1607  f819				   HasEmptySpace2
   1608  f819		       a9 00		      LDA	#0
   1609  f81b
   1610  f81b				   StoreParallax2
   1611  f81b		       99 f0 00 	      STA	ParallaxCache2,Y
   1612  f81e
   1613  f81e				   ContinueHorizontalParallaxLoop
   1614  f81e		       88		      DEY
   1615  f81f		       10 b3		      BPL	HorizontalParallaxLoop
   1616  f821		       60		      RTS
   1617  f822
   1618  f822				   DefaultBorderLoop
   1619  f822				   CalculateDefaultBorder
   1620  f822		       98		      TYA
   1621  f823		       18		      CLC
   1622  f824		       65 91		      ADC	TrafficOffset0 + 1
   1623  f826		       29 04		      AND	#%00000100
   1624  f828		       f0 05		      BEQ	HasEmptySpace
   1625  f82a				   HasBorder
   1626  f82a		       a9 ff		      LDA	#$FF
   1627  f82c		       4c 31 f8 	      JMP	StoreBorder
   1628  f82f				   HasEmptySpace
   1629  f82f		       a9 00		      LDA	#0
   1630  f831
   1631  f831				   StoreBorder
   1632  f831		       99 d8 00 	      STA	ParallaxCache,Y
   1633  f834		       a9 00		      LDA	#0
   1634  f836		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1635  f839
   1636  f839				   ContinueDefaultBorderLoop
   1637  f839		       88		      DEY
   1638  f83a		       10 e6		      BPL	DefaultBorderLoop
   1639  f83c		       60		      RTS
   1640  f83d
   1641  f83d				   PrepareTachometerBorderLoop
   1642  f83d		       a5 8e		      LDA	Player0SpeedL
   1643  f83f		       29 80		      AND	#%10000000
   1644  f841		       05 8f		      ORA	Player0SpeedH
   1645  f843		       18		      CLC
   1646  f844		       2a		      ROL
   1647  f845		       69 00		      ADC	#0
   1648  f847		       85 b0		      STA	Tmp0	; Gear
   1649  f849		       a5 8e		      LDA	Player0SpeedL
   1650  f84b		       4a		      LSR
   1651  f84c		       4a		      LSR
   1652  f84d		       4a		      LSR
   1653  f84e		       4a		      LSR
   1654  f84f		       29 07		      AND	#%00000111
   1655  f851		       85 b1		      STA	Tmp1	; RPM
   1656  f853
   1657  f853				   TachometerBorderLoop
   1658  f853		       98		      TYA
   1659  f854		       18		      CLC
   1660  f855		       65 91		      ADC	TrafficOffset0 + 1
   1661  f857		       29 04		      AND	#%00000100
   1662  f859		       f0 10		      BEQ	HasBorderTac
   1663  f85b		       a6 b0		      LDX	Tmp0
   1664  f85d		       bd eb fd 	      LDA	TachometerGearLookup,X
   1665  f860		       99 d8 00 	      STA	ParallaxCache,Y
   1666  f863		       a9 00		      LDA	#0
   1667  f865		       99 f0 00 	      STA	ParallaxCache2,Y
   1668  f868		       4c 8d f8 	      JMP	ContinueBorderTac
   1669  f86b				   HasBorderTac
   1670  f86b		       a9 05		      LDA	#5
   1671  f86d		       c5 b0		      CMP	Tmp0	; Only on max speed
   1672  f86f		       f0 11		      BEQ	FullBorderTac
   1673  f871		       a6 b1		      LDX	Tmp1
   1674  f873		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1675  f876		       99 d8 00 	      STA	ParallaxCache,Y
   1676  f879		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1677  f87c		       99 f0 00 	      STA	ParallaxCache2,Y
   1678  f87f		       4c 8d f8 	      JMP	ContinueBorderTac
   1679  f882
   1680  f882				   FullBorderTac
   1681  f882		       a9 ff		      LDA	#$FF
   1682  f884		       99 d8 00 	      STA	ParallaxCache,Y
   1683  f887		       99 f0 00 	      STA	ParallaxCache2,Y
   1684  f88a		       4c 8d f8 	      JMP	ContinueBorderTac
   1685  f88d
   1686  f88d				   ContinueBorderTac
   1687  f88d		       88		      DEY
   1688  f88e		       10 c3		      BPL	TachometerBorderLoop
   1689  f890		       60		      RTS
   1690  f891
   1691  f891				   VerticalParallaxLoop
   1692  f891				   CalculateVerticalParallax0
   1693  f891		       98		      TYA
   1694  f892		       18		      CLC
   1695  f893		       65 91		      ADC	TrafficOffset0 + 1
   1696  f895		       29 06		      AND	#%00000110
   1697  f897		       d0 0b		      BNE	HasNoVerticalLine0
   1698  f899				   HasVerticalLine0
   1699  f899		       a9 ff		      LDA	#$FF
   1700  f89b		       99 d8 00 	      STA	ParallaxCache,Y
   1701  f89e		       99 f0 00 	      STA	ParallaxCache2,Y
   1702  f8a1		       4c e1 f8 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1703  f8a4				   HasNoVerticalLine0
   1704  f8a4		       a9 00		      LDA	#0
   1705  f8a6		       99 d8 00 	      STA	ParallaxCache,Y
   1706  f8a9		       99 f0 00 	      STA	ParallaxCache2,Y
   1707  f8ac
   1708  f8ac				   CalculateVerticalParallax1
   1709  f8ac		       98		      TYA
   1710  f8ad		       18		      CLC
   1711  f8ae		       65 c7		      ADC	ParallaxOffset1 + 1
   1712  f8b0		       29 07		      AND	#%00000111
   1713  f8b2		       d0 0d		      BNE	HasNoVerticalLine1
   1714  f8b4
   1715  f8b4				   HasVerticalLine1
   1716  f8b4		       a9 fc		      LDA	#%11111100
   1717  f8b6		       99 d8 00 	      STA	ParallaxCache,Y
   1718  f8b9		       a9 c0		      LDA	#%11000000
   1719  f8bb		       99 f0 00 	      STA	ParallaxCache2,Y
   1720  f8be		       4c e1 f8 	      JMP	ContinueVerticalParallaxLoop
   1721  f8c1				   HasNoVerticalLine1
   1722  f8c1		       a9 00		      LDA	#0
   1723  f8c3		       99 d8 00 	      STA	ParallaxCache,Y
   1724  f8c6		       99 f0 00 	      STA	ParallaxCache2,Y
   1725  f8c9
   1726  f8c9				   CalculateVerticalParallax2
   1727  f8c9		       98		      TYA
   1728  f8ca		       18		      CLC
   1729  f8cb		       65 c9		      ADC	ParallaxOffset2 + 1
   1730  f8cd		       29 07		      AND	#%00000111
   1731  f8cf		       d0 08		      BNE	HasNoVerticalLine2
   1732  f8d1
   1733  f8d1				   HasVerticalLine2
   1734  f8d1		       a9 f0		      LDA	#%11110000
   1735  f8d3		       99 d8 00 	      STA	ParallaxCache,Y
   1736  f8d6		       4c e1 f8 	      JMP	ContinueVerticalParallaxLoop
   1737  f8d9				   HasNoVerticalLine2
   1738  f8d9		       a9 00		      LDA	#0
   1739  f8db		       99 d8 00 	      STA	ParallaxCache,Y
   1740  f8de		       99 f0 00 	      STA	ParallaxCache2,Y
   1741  f8e1
   1742  f8e1				   ContinueVerticalParallaxLoop
   1743  f8e1		       88		      DEY
   1744  f8e2		       10 ad		      BPL	VerticalParallaxLoop
   1745  f8e4		       60		      RTS
   1746  f8e5
   1747  f8e5				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1748  f8e5		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1749  f8e7		       85 d5		      STA	ScoreFontColor
   1750  f8e9		       a9 01		      LDA	#1
   1751  f8eb		       85 d6		      STA	ScoreFontColorHoldChange
   1752  f8ed
   1753  f8ed		       a5 8d		      LDA	FrameCount1
   1754  f8ef		       29 07		      AND	#%00000111
   1755  f8f1		       85 b3		      STA	Tmp3
   1756  f8f3							;0 is Zelda Name, (default)
   1757  f8f3		       a9 01		      LDA	#1
   1758  f8f5		       c5 b3		      CMP	Tmp3
   1759  f8f7		       f0 38		      BEQ	PrintZeldaDateLeft
   1760  f8f9
   1761  f8f9		       a9 02		      LDA	#2
   1762  f8fb		       c5 b3		      CMP	Tmp3
   1763  f8fd		       f0 23		      BEQ	PrintPolvinhosLeft
   1764  f8ff
   1765  f8ff		       a9 03		      LDA	#3
   1766  f901		       c5 b3		      CMP	Tmp3
   1767  f903		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1768  f905
   1769  f905		       a9 04		      LDA	#4
   1770  f907		       c5 b3		      CMP	Tmp3
   1771  f909		       f0 1c		      BEQ	PrintIvonneLeft
   1772  f90b
   1773  f90b		       a9 05		      LDA	#5
   1774  f90d		       c5 b3		      CMP	Tmp3
   1775  f90f		       f0 2a		      BEQ	PrintIvonneDateLeft
   1776  f911
   1777  f911		       a9 06		      LDA	#6
   1778  f913		       c5 b3		      CMP	Tmp3
   1779  f915		       f0 15		      BEQ	PrintArtLeft
   1780  f917
   1781  f917		       a9 07		      LDA	#7
   1782  f919		       c5 b3		      CMP	Tmp3
   1783  f91b		       f0 23		      BEQ	PrintLeonardoLeft
   1784  f91d
   1785  f91d				   PrintZeldaLeft
   1786  f91d		       a2 28		      LDX	#<ZeldaTextLeft
   1787  f91f		       4c 45 f9 	      JMP	ProcessPrintEasterEgg
   1788  f922				   PrintPolvinhosLeft
   1789  f922		       a2 3c		      LDX	#<PolvinhosTextLeft
   1790  f924		       4c 45 f9 	      JMP	ProcessPrintEasterEgg
   1791  f927				   PrintIvonneLeft
   1792  f927		       a2 50		      LDX	#<IvonneTextLeft
   1793  f929		       4c 45 f9 	      JMP	ProcessPrintEasterEgg
   1794  f92c				   PrintArtLeft
   1795  f92c		       a2 64		      LDX	#<PaperArtTextLeft
   1796  f92e		       4c 45 f9 	      JMP	ProcessPrintEasterEgg
   1797  f931
   1798  f931				   PrintZeldaDateLeft
   1799  f931		       a2 32		      LDX	#<ZeldaDateLeft
   1800  f933		       4c 45 f9 	      JMP	ProcessPrintEasterEgg
   1801  f936				   PrintPolvinhosDateLeft
   1802  f936		       a2 46		      LDX	#<PolvinhosDateLeft
   1803  f938		       4c 45 f9 	      JMP	ProcessPrintEasterEgg
   1804  f93b				   PrintIvonneDateLeft
   1805  f93b		       a2 5a		      LDX	#<IvonneDateLeft
   1806  f93d		       4c 45 f9 	      JMP	ProcessPrintEasterEgg
   1807  f940				   PrintLeonardoLeft
   1808  f940		       a2 6e		      LDX	#<LeonardoTextLeft
   1809  f942		       4c 45 f9 	      JMP	ProcessPrintEasterEgg
   1810  f945
   1811  f945				   ProcessPrintEasterEgg
   1812  f945		       a5 8c		      LDA	FrameCount0	;3
   1813  f947		       29 01		      AND	#%00000001	;2
   1814  f949		       d0 03		      BNE	TranformIntoRightText
   1815  f94b		       4c 53 f9 	      JMP	PrintEasterEggText
   1816  f94e				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1817  f94e		       8a		      TXA
   1818  f94f		       18		      CLC
   1819  f950		       69 05		      ADC	#HALF_TEXT_SIZE
   1820  f952		       aa		      TAX
   1821  f953
   1822  f953				   PrintEasterEggText
   1823  f953		       20 b6 f7 	      JSR	PrintStaticText
   1824  f956		       60		      RTS
   1825  f957
   1826  f957				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1827  f957		       a2 00		      LDX	#0
   1828  f959		       a0 04		      LDY	#FONT_OFFSET
   1829  f95b
   1830  f95b				   ScoreLoop		; 20 
   1831  f95b		       85 02		      STA	WSYNC	;2
   1832  f95d
   1833  f95d		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1834  f95f		       85 0d		      STA	PF0	;3
   1835  f961
   1836  f961		       a5 82		      LDA	PF1Cache	;3
   1837  f963		       85 0e		      STA	PF1	;3
   1838  f965
   1839  f965		       a5 83		      LDA	PF2Cache	;3
   1840  f967		       85 0f		      STA	PF2	;3
   1841  f969
   1842  f969				   DrawScoreD0		; 15
   1843  f969		       a6 d0		      LDX	ScoreD0	; 3
   1844  f96b		       bd 00 fd 	      LDA	Font,X	;4
   1845  f96e		       85 81		      STA	PF0Cache	;3
   1846  f970		       c6 d0		      DEC	ScoreD0	;5
   1847  f972
   1848  f972				   DrawScoreD1		; 23	
   1849  f972		       a6 d1		      LDX	ScoreD1	; 3
   1850  f974		       bd 00 fd 	      LDA	Font,X	;4
   1851  f977		       0a		      ASL		;2
   1852  f978		       0a		      ASL		;2
   1853  f979		       0a		      ASL		;2
   1854  f97a		       0a		      ASL		;2
   1855  f97b		       85 82		      STA	PF1Cache	;3
   1856  f97d		       c6 d1		      DEC	ScoreD1	;5
   1857  f97f
   1858  f97f				   DrawScoreD2		; 20
   1859  f97f		       a6 d2		      LDX	ScoreD2	; 3
   1860  f981		       bd 00 fd 	      LDA	Font,X	;4
   1861  f984		       29 0f		      AND	#%00001111	;2
   1862  f986		       05 82		      ORA	PF1Cache	;3
   1863  f988		       85 82		      STA	PF1Cache	;3
   1864  f98a		       c6 d2		      DEC	ScoreD2	;5
   1865  f98c
   1866  f98c				   DrawScoreD3		; 23
   1867  f98c		       a6 d3		      LDX	ScoreD3	; 3
   1868  f98e		       bd 00 fd 	      LDA	Font,X	;4
   1869  f991		       4a		      LSR		;2
   1870  f992		       4a		      LSR		;2
   1871  f993		       4a		      LSR		;2
   1872  f994		       4a		      LSR		;2
   1873  f995		       85 83		      STA	PF2Cache	;3
   1874  f997		       c6 d3		      DEC	ScoreD3	;5
   1875  f999
   1876  f999				   DrawScoreD4		; 20
   1877  f999		       a6 d4		      LDX	ScoreD4	; 3
   1878  f99b		       bd 00 fd 	      LDA	Font,X	;4
   1879  f99e		       29 f0		      AND	#%11110000	;2
   1880  f9a0		       05 83		      ORA	PF2Cache	;3
   1881  f9a2		       85 83		      STA	PF2Cache	;3
   1882  f9a4		       c6 d4		      DEC	ScoreD4	;5
   1883  f9a6
   1884  f9a6
   1885  f9a6		       88		      DEY		;2
   1886  f9a7		       10 b2		      BPL	ScoreLoop	;4
   1887  f9a9
   1888  f9a9		       85 02		      STA	WSYNC
   1889  f9ab		       20 2f f7 	      JSR	LoadAll
   1890  f9ae		       60		      RTS		; 6
   1891  f9af
   1892  f9af				   PrintRightDecimalDigits
   1893  f9af		       b9 00 00 	      LDA	0,Y
   1894  f9b2		       4a		      LSR
   1895  f9b3		       4a		      LSR
   1896  f9b4		       4a		      LSR
   1897  f9b5		       4a		      LSR
   1898  f9b6		       aa		      TAX
   1899  f9b7		       bd be fd 	      LDA	FontLookup,X	;4
   1900  f9ba		       85 d2		      STA	ScoreD2	;3
   1901  f9bc
   1902  f9bc		       b9 00 00 	      LDA	0,Y
   1903  f9bf		       29 0f		      AND	#%00001111
   1904  f9c1		       aa		      TAX
   1905  f9c2		       bd be fd 	      LDA	FontLookup,X	;4
   1906  f9c5		       85 d3		      STA	ScoreD3	;3
   1907  f9c7
   1908  f9c7		       c8		      INY
   1909  f9c8		       b9 00 00 	      LDA	0,Y
   1910  f9cb		       4a		      LSR
   1911  f9cc		       4a		      LSR
   1912  f9cd		       4a		      LSR
   1913  f9ce		       4a		      LSR
   1914  f9cf		       aa		      TAX
   1915  f9d0		       bd be fd 	      LDA	FontLookup,X	;4
   1916  f9d3		       85 d0		      STA	ScoreD0	;3
   1917  f9d5
   1918  f9d5		       b9 00 00 	      LDA	0,Y
   1919  f9d8		       29 0f		      AND	#%00001111
   1920  f9da		       aa		      TAX
   1921  f9db		       bd be fd 	      LDA	FontLookup,X	;4
   1922  f9de		       85 d1		      STA	ScoreD1	;3
   1923  f9e0
   1924  f9e0		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1925  f9e2		       85 d4		      STA	ScoreD4
   1926  f9e4		       60		      RTS
   1927  f9e5
   1928  f9e5				   PrintLastLeftDecimalDigits
   1929  f9e5		       b9 00 00 	      LDA	0,Y
   1930  f9e8		       4a		      LSR
   1931  f9e9		       4a		      LSR
   1932  f9ea		       4a		      LSR
   1933  f9eb		       4a		      LSR
   1934  f9ec		       aa		      TAX
   1935  f9ed		       bd be fd 	      LDA	FontLookup,X	;4
   1936  f9f0		       85 d3		      STA	ScoreD3	;3
   1937  f9f2		       b9 00 00 	      LDA	0,Y
   1938  f9f5		       29 0f		      AND	#%00001111
   1939  f9f7		       aa		      TAX
   1940  f9f8		       bd be fd 	      LDA	FontLookup,X	;4
   1941  f9fb		       85 d4		      STA	ScoreD4	;3
   1942  f9fd		       60		      RTS
   1943  f9fe
   1944  f9fe				   PrintZerosLeft
   1945  f9fe		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1946  fa00		       85 d2		      STA	ScoreD2
   1947  fa02		       85 d3		      STA	ScoreD3
   1948  fa04		       85 d4		      STA	ScoreD4
   1949  fa06		       60		      RTS
   1950  fa07
   1951  fa07				   DrawGameOverScoreLine
   1952  fa07		       85 02		      STA	WSYNC
   1953  fa09		       20 57 f9 	      JSR	PrintScore
   1954  fa0c		       85 02		      STA	WSYNC
   1955  fa0e		       85 02		      STA	WSYNC
   1956  fa10		       20 20 f7 	      JSR	ClearPF
   1957  fa13		       60		      RTS
   1958  fa14
   1959  fa14				   DrawGameOverScreenLeft
   1960  fa14		       85 02		      STA	WSYNC
   1961  fa16		       20 20 f7 	      JSR	ClearPF
   1962  fa19
   1963  fa19				   DrawBcdScoreLeft
   1964  fa19		       20 cc fb 	      JSR	Sleep8Lines
   1965  fa1c		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1966  fa1e		       85 06		      STA	COLUP0
   1967  fa20		       85 02		      STA	WSYNC
   1968  fa22		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1969  fa24		       85 d0		      STA	ScoreD0
   1970  fa26
   1971  fa26		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1972  fa28		       85 d1		      STA	ScoreD1
   1973  fa2a
   1974  fa2a		       a5 b7		      LDA	ScoreBcd3
   1975  fa2c		       29 0f		      AND	#%00001111
   1976  fa2e		       aa		      TAX
   1977  fa2f		       bd be fd 	      LDA	FontLookup,X	;4
   1978  fa32		       85 d2		      STA	ScoreD2	;3
   1979  fa34
   1980  fa34		       a0 b6		      LDY	#ScoreBcd2
   1981  fa36		       20 e5 f9 	      JSR	PrintLastLeftDecimalDigits
   1982  fa39
   1983  fa39		       20 07 fa 	      JSR	DrawGameOverScoreLine
   1984  fa3c
   1985  fa3c				   DrawTimerLeft
   1986  fa3c		       20 cc fb 	      JSR	Sleep8Lines
   1987  fa3f		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1988  fa41		       85 06		      STA	COLUP0
   1989  fa43		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1990  fa45		       85 d0		      STA	ScoreD0
   1991  fa47		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1992  fa49		       85 d1		      STA	ScoreD1
   1993  fa4b		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1994  fa4d		       85 d2		      STA	ScoreD2
   1995  fa4f		       a0 bf		      LDY	#TimeBcd2
   1996  fa51		       85 02		      STA	WSYNC
   1997  fa53		       20 e5 f9 	      JSR	PrintLastLeftDecimalDigits
   1998  fa56		       20 07 fa 	      JSR	DrawGameOverScoreLine
   1999  fa59
   2000  fa59				   DrawGlideTimerLeft
   2001  fa59		       20 cc fb 	      JSR	Sleep8Lines
   2002  fa5c		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2003  fa5e		       85 06		      STA	COLUP0
   2004  fa60		       85 02		      STA	WSYNC
   2005  fa62		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2006  fa64		       85 d0		      STA	ScoreD0
   2007  fa66		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2008  fa68		       85 d1		      STA	ScoreD1
   2009  fa6a		       20 fe f9 	      JSR	PrintZerosLeft
   2010  fa6d		       20 07 fa 	      JSR	DrawGameOverScoreLine
   2011  fa70
   2012  fa70				   DrawHitCountLeft
   2013  fa70		       20 cc fb 	      JSR	Sleep8Lines
   2014  fa73		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2015  fa75		       85 06		      STA	COLUP0
   2016  fa77		       85 02		      STA	WSYNC
   2017  fa79		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2018  fa7b		       85 d0		      STA	ScoreD0
   2019  fa7d		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2020  fa7f		       85 d1		      STA	ScoreD1
   2021  fa81		       20 fe f9 	      JSR	PrintZerosLeft
   2022  fa84		       20 07 fa 	      JSR	DrawGameOverScoreLine
   2023  fa87
   2024  fa87				   DrawCheckpointCountLeft
   2025  fa87		       20 cc fb 	      JSR	Sleep8Lines
   2026  fa8a		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2027  fa8c		       85 06		      STA	COLUP0
   2028  fa8e		       85 02		      STA	WSYNC
   2029  fa90		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2030  fa92		       85 d0		      STA	ScoreD0
   2031  fa94		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2032  fa96		       85 d1		      STA	ScoreD1
   2033  fa98		       20 fe f9 	      JSR	PrintZerosLeft
   2034  fa9b		       20 07 fa 	      JSR	DrawGameOverScoreLine
   2035  fa9e
   2036  fa9e				   DrawGameVersionLeft
   2037  fa9e		       20 cc fb 	      JSR	Sleep8Lines
   2038  faa1		       a9 49		      LDA	#VERSION_COLOR
   2039  faa3		       85 06		      STA	COLUP0
   2040  faa5
   2041  faa5		       a5 c5		      LDA	GameMode
   2042  faa7		       aa		      TAX
   2043  faa8		       bd be fd 	      LDA	FontLookup,X	;4
   2044  faab		       85 d0		      STA	ScoreD0	;3
   2045  faad
   2046  faad		       a5 a9		      LDA	CurrentCarId
   2047  faaf		       aa		      TAX
   2048  fab0		       bd be fd 	      LDA	FontLookup,X	;4
   2049  fab3		       85 d1		      STA	ScoreD1	;3
   2050  fab5
   2051  fab5		       a5 a6		      LDA	StartSWCHB
   2052  fab7		       29 40		      AND	#%01000000	; P0 difficulty
   2053  fab9		       49 40		      EOR	#%01000000	; Reverse bytes
   2054  fabb		       2a		      ROL
   2055  fabc		       2a		      ROL
   2056  fabd		       2a		      ROL
   2057  fabe		       18		      CLC
   2058  fabf		       69 0a		      ADC	#10
   2059  fac1		       aa		      TAX
   2060  fac2		       bd be fd 	      LDA	FontLookup,X	;4
   2061  fac5		       85 d2		      STA	ScoreD2	;3
   2062  fac7
   2063  fac7		       a5 a6		      LDA	StartSWCHB
   2064  fac9		       29 80		      AND	#%10000000	; P0 difficulty
   2065  facb		       49 80		      EOR	#%10000000	; Reverse bytes
   2066  facd		       2a		      ROL
   2067  face		       2a		      ROL
   2068  facf		       18		      CLC
   2069  fad0		       69 0a		      ADC	#10
   2070  fad2		       aa		      TAX
   2071  fad3		       bd be fd 	      LDA	FontLookup,X	;4
   2072  fad6		       85 d3		      STA	ScoreD3	;3
   2073  fad8
   2074  fad8		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2075  fada		       85 d4		      STA	ScoreD4
   2076  fadc
   2077  fadc		       20 07 fa 	      JSR	DrawGameOverScoreLine
   2078  fadf
   2079  fadf		       4c 45 fb 	      JMP	FinalizeDrawGameOver
   2080  fae2
   2081  fae2				   DrawGameOverScreenRight
   2082  fae2		       85 02		      STA	WSYNC
   2083  fae4		       20 20 f7 	      JSR	ClearPF
   2084  fae7
   2085  fae7				   DrawBcdScoreRight
   2086  fae7		       20 cc fb 	      JSR	Sleep8Lines
   2087  faea		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2088  faec		       85 07		      STA	COLUP1
   2089  faee		       85 02		      STA	WSYNC
   2090  faf0		       a0 b4		      LDY	#ScoreBcd0
   2091  faf2		       20 af f9 	      JSR	PrintRightDecimalDigits
   2092  faf5
   2093  faf5		       20 07 fa 	      JSR	DrawGameOverScoreLine
   2094  faf8
   2095  faf8				   DrawTimerRight
   2096  faf8		       20 cc fb 	      JSR	Sleep8Lines
   2097  fafb		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2098  fafd		       85 07		      STA	COLUP1
   2099  faff		       a0 bd		      LDY	#TimeBcd0
   2100  fb01		       20 af f9 	      JSR	PrintRightDecimalDigits
   2101  fb04
   2102  fb04		       20 07 fa 	      JSR	DrawGameOverScoreLine
   2103  fb07				   DrawGlideTimeRight
   2104  fb07		       20 cc fb 	      JSR	Sleep8Lines
   2105  fb0a		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2106  fb0c		       85 07		      STA	COLUP1
   2107  fb0e		       a0 cd		      LDY	#GlideTimeBcd0
   2108  fb10		       20 af f9 	      JSR	PrintRightDecimalDigits
   2109  fb13		       20 07 fa 	      JSR	DrawGameOverScoreLine
   2110  fb16
   2111  fb16				   DrawHitCountRight
   2112  fb16		       20 cc fb 	      JSR	Sleep8Lines
   2113  fb19		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2114  fb1b		       85 07		      STA	COLUP1
   2115  fb1d		       a0 cb		      LDY	#HitCountBcd0
   2116  fb1f		       20 af f9 	      JSR	PrintRightDecimalDigits
   2117  fb22		       20 07 fa 	      JSR	DrawGameOverScoreLine
   2118  fb25
   2119  fb25				   DrawCheckpointCountRight
   2120  fb25		       20 cc fb 	      JSR	Sleep8Lines
   2121  fb28		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2122  fb2a		       85 07		      STA	COLUP1
   2123  fb2c		       a0 a4		      LDY	#CheckpointBcd0
   2124  fb2e		       20 af f9 	      JSR	PrintRightDecimalDigits
   2125  fb31		       20 07 fa 	      JSR	DrawGameOverScoreLine
   2126  fb34
   2127  fb34				   DrawVersionRight
   2128  fb34		       20 cc fb 	      JSR	Sleep8Lines
   2129  fb37		       a9 49		      LDA	#VERSION_COLOR
   2130  fb39		       85 07		      STA	COLUP1
   2131  fb3b		       85 02		      STA	WSYNC
   2132  fb3d		       a2 78		      LDX	#<VersionText
   2133  fb3f		       20 b6 f7 	      JSR	PrintStaticText
   2134  fb42		       20 07 fa 	      JSR	DrawGameOverScoreLine
   2135  fb45
   2136  fb45				   FinalizeDrawGameOver
   2137  fb45		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2138  fb47		       85 d5		      STA	ScoreFontColor
   2139  fb49		       20 c3 fb 	      JSR	Sleep4Lines
   2140  fb4c		       20 d3 fb 	      JSR	Sleep32Lines
   2141  fb4f		       20 d3 fb 	      JSR	Sleep32Lines
   2142  fb52		       4c 41 f6 	      JMP	PrepareOverscan
   2143  fb55
   2144  fb55				   DrawQrCode
   2145  fb55		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2146  fb57		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2147  fb59		       a9 01		      LDA	#%00000001	; Mirror playfield
   2148  fb5b		       85 0a		      STA	CTRLPF
   2149  fb5d		       20 0e f7 	      JSR	ClearAll	; To be 100 sure!
   2150  fb60		       ad 82 02 	      LDA	SWCHB
   2151  fb63		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2152  fb65		       f0 07		      BEQ	StoreReversedQrCode
   2153  fb67		       86 09		      STX	COLUBK
   2154  fb69		       84 08		      STY	COLUPF
   2155  fb6b		       4c 72 fb 	      JMP	ContinueQrCode
   2156  fb6e				   StoreReversedQrCode
   2157  fb6e		       86 08		      STX	COLUPF
   2158  fb70		       84 09		      STY	COLUBK
   2159  fb72
   2160  fb72				   ContinueQrCode
   2161  fb72		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2162  fb74		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2163  fb76		       20 b9 fb 	      JSR	WaitForVblankEnd
   2164  fb79		       20 cc fb 	      JSR	Sleep8Lines
   2165  fb7c		       20 c3 fb 	      JSR	Sleep4Lines
   2166  fb7f
   2167  fb7f				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2168  fb7f		       85 02		      STA	WSYNC
   2169  fb81		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2170  fb84		       85 0e		      STA	PF1	;3
   2171  fb86		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2172  fb89		       85 0f		      STA	PF2	;3
      0  fb8b					      SLEEP	27	; 
      1  fb8b				   .CYCLES    SET	27
      2  fb8b
      3  fb8b				  -	      IF	.CYCLES < 2
      4  fb8b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb8b				  -	      ERR
      6  fb8b					      ENDIF
      7  fb8b
      8  fb8b					      IF	.CYCLES & 1
      9  fb8b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb8b				  -	      nop	0
     11  fb8b					      ELSE
     12  fb8b		       24 00		      bit	VSYNC
     13  fb8d					      ENDIF
     14  fb8d				   .CYCLES    SET	.CYCLES - 3
     15  fb8d					      ENDIF
     16  fb8d
     17  fb8d					      REPEAT	.CYCLES / 2
     18  fb8d		       ea		      nop
     17  fb8d					      REPEND
     18  fb8e		       ea		      nop
     17  fb8e					      REPEND
     18  fb8f		       ea		      nop
     17  fb8f					      REPEND
     18  fb90		       ea		      nop
     17  fb90					      REPEND
     18  fb91		       ea		      nop
     17  fb91					      REPEND
     18  fb92		       ea		      nop
     17  fb92					      REPEND
     18  fb93		       ea		      nop
     17  fb93					      REPEND
     18  fb94		       ea		      nop
     17  fb94					      REPEND
     18  fb95		       ea		      nop
     17  fb95					      REPEND
     18  fb96		       ea		      nop
     17  fb96					      REPEND
     18  fb97		       ea		      nop
     17  fb97					      REPEND
     18  fb98		       ea		      nop
     19  fb99					      REPEND
   2174  fb99		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2175  fb9c		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2176  fb9e		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2177  fba1		       85 0e		      STA	PF1	;3
   2178  fba3
   2179  fba3		       ca		      DEX		;2
   2180  fba4		       d0 d9		      BNE	QrCodeLoop	;2
   2181  fba6		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2182  fba8		       88		      DEY		;2
   2183  fba9		       10 d4		      BPL	QrCodeLoop	;4
   2184  fbab
   2185  fbab				   EndQrCodeLoop
   2186  fbab		       85 02		      STA	WSYNC	;
   2187  fbad		       a9 00		      LDA	#0
   2188  fbaf		       85 0e		      STA	PF1	;3
   2189  fbb1		       85 0f		      STA	PF2	;3
   2190  fbb3
   2191  fbb3		       20 d3 fb 	      JSR	Sleep32Lines
   2192  fbb6		       4c 41 f6 	      JMP	PrepareOverscan
   2193  fbb9
   2194  fbb9				   WaitForVblankEnd
   2195  fbb9		       ad 84 02 	      LDA	INTIM
   2196  fbbc		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
   2197  fbbe		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline? 
   2198  fbc0		       85 01		      STA	VBLANK
   2199  fbc2		       60		      RTS
   2200  fbc3
   2201  fbc3				   Sleep4Lines
   2202  fbc3		       85 02		      STA	WSYNC
   2203  fbc5		       85 02		      STA	WSYNC
   2204  fbc7		       85 02		      STA	WSYNC
   2205  fbc9		       85 02		      STA	WSYNC
   2206  fbcb		       60		      RTS
   2207  fbcc
   2208  fbcc				   Sleep8Lines
   2209  fbcc		       20 c3 fb 	      JSR	Sleep4Lines
   2210  fbcf		       20 c3 fb 	      JSR	Sleep4Lines
   2211  fbd2		       60		      RTS
   2212  fbd3
   2213  fbd3				   Sleep32Lines
   2214  fbd3		       20 cc fb 	      JSR	Sleep8Lines
   2215  fbd6		       20 cc fb 	      JSR	Sleep8Lines
   2216  fbd9		       20 cc fb 	      JSR	Sleep8Lines
   2217  fbdc		       20 cc fb 	      JSR	Sleep8Lines
   2218  fbdf		       60		      RTS
   2219  fbe0
   2220  fbe0							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   2221  fc00					      org	$FC00
   2222  fc00				   QrCode1
   2223  fc00		       1f		      .byte.b	#%00011111
   2224  fc01		       10		      .byte.b	#%00010000
   2225  fc02		       17		      .byte.b	#%00010111
   2226  fc03		       17		      .byte.b	#%00010111
   2227  fc04		       17		      .byte.b	#%00010111
   2228  fc05		       10		      .byte.b	#%00010000
   2229  fc06		       1f		      .byte.b	#%00011111
   2230  fc07		       00		      .byte.b	#%00000000
   2231  fc08		       17		      .byte.b	#%00010111
   2232  fc09		       10		      .byte.b	#%00010000
   2233  fc0a		       1d		      .byte.b	#%00011101
   2234  fc0b		       16		      .byte.b	#%00010110
   2235  fc0c		       03		      .byte.b	#%00000011
   2236  fc0d		       19		      .byte.b	#%00011001
   2237  fc0e		       13		      .byte.b	#%00010011
   2238  fc0f		       1c		      .byte.b	#%00011100
   2239  fc10		       0b		      .byte.b	#%00001011
   2240  fc11		       00		      .byte.b	#%00000000
   2241  fc12		       1f		      .byte.b	#%00011111
   2242  fc13		       10		      .byte.b	#%00010000
   2243  fc14		       17		      .byte.b	#%00010111
   2244  fc15		       17		      .byte.b	#%00010111
   2245  fc16		       17		      .byte.b	#%00010111
   2246  fc17		       10		      .byte.b	#%00010000
   2247  fc18		       1f		      .byte.b	#%00011111
   2248  fc19
   2249  fc19				   QrCode2
   2250  fc19		       c3		      .byte.b	#%11000011
   2251  fc1a		       9a		      .byte.b	#%10011010
   2252  fc1b		       82		      .byte.b	#%10000010
   2253  fc1c		       da		      .byte.b	#%11011010
   2254  fc1d		       aa		      .byte.b	#%10101010
   2255  fc1e		       ca		      .byte.b	#%11001010
   2256  fc1f		       f3		      .byte.b	#%11110011
   2257  fc20		       78		      .byte.b	#%01111000
   2258  fc21		       df		      .byte.b	#%11011111
   2259  fc22		       fc		      .byte.b	#%11111100
   2260  fc23		       c7		      .byte.b	#%11000111
   2261  fc24		       98		      .byte.b	#%10011000
   2262  fc25		       23		      .byte.b	#%00100011
   2263  fc26		       b9		      .byte.b	#%10111001
   2264  fc27		       d2		      .byte.b	#%11010010
   2265  fc28		       30		      .byte.b	#%00110000
   2266  fc29		       eb		      .byte.b	#%11101011
   2267  fc2a		       28		      .byte.b	#%00101000
   2268  fc2b		       ab		      .byte.b	#%10101011
   2269  fc2c		       72		      .byte.b	#%01110010
   2270  fc2d		       fa		      .byte.b	#%11111010
   2271  fc2e		       7a		      .byte.b	#%01111010
   2272  fc2f		       32		      .byte.b	#%00110010
   2273  fc30		       3a		      .byte.b	#%00111010
   2274  fc31		       63		      .byte.b	#%01100011
   2275  fc32
   2276  fc32				   QrCode3
   2277  fc32		       98		      .byte.b	#%10011000
   2278  fc33		       c3		      .byte.b	#%11000011
   2279  fc34		       39		      .byte.b	#%00111001
   2280  fc35		       34		      .byte.b	#%00110100
   2281  fc36		       ff		      .byte.b	#%11111111
   2282  fc37		       71		      .byte.b	#%01110001
   2283  fc38		       d5		      .byte.b	#%11010101
   2284  fc39		       d1		      .byte.b	#%11010001
   2285  fc3a		       5f		      .byte.b	#%01011111
   2286  fc3b		       26		      .byte.b	#%00100110
   2287  fc3c		       2d		      .byte.b	#%00101101
   2288  fc3d		       e9		      .byte.b	#%11101001
   2289  fc3e		       d6		      .byte.b	#%11010110
   2290  fc3f		       26		      .byte.b	#%00100110
   2291  fc40		       ba		      .byte.b	#%10111010
   2292  fc41		       03		      .byte.b	#%00000011
   2293  fc42		       dd		      .byte.b	#%11011101
   2294  fc43		       e0		      .byte.b	#%11100000
   2295  fc44		       57		      .byte.b	#%01010111
   2296  fc45		       14		      .byte.b	#%00010100
   2297  fc46		       35		      .byte.b	#%00110101
   2298  fc47		       e5		      .byte.b	#%11100101
   2299  fc48		       b5		      .byte.b	#%10110101
   2300  fc49		       d4		      .byte.b	#%11010100
   2301  fc4a		       97		      .byte.b	#%10010111
   2302  fc4b
   2303  fc4b				   QrCode4
   2304  fc4b		       09		      .byte.b	#%00001001
   2305  fc4c		       0e		      .byte.b	#%00001110
   2306  fc4d		       0f		      .byte.b	#%00001111
   2307  fc4e		       0c		      .byte.b	#%00001100
   2308  fc4f		       0c		      .byte.b	#%00001100
   2309  fc50		       08		      .byte.b	#%00001000
   2310  fc51		       08		      .byte.b	#%00001000
   2311  fc52		       06		      .byte.b	#%00000110
   2312  fc53		       06		      .byte.b	#%00000110
   2313  fc54		       0b		      .byte.b	#%00001011
   2314  fc55		       0f		      .byte.b	#%00001111
   2315  fc56		       04		      .byte.b	#%00000100
   2316  fc57		       08		      .byte.b	#%00001000
   2317  fc58		       0f		      .byte.b	#%00001111
   2318  fc59		       09		      .byte.b	#%00001001
   2319  fc5a		       07		      .byte.b	#%00000111
   2320  fc5b		       05		      .byte.b	#%00000101
   2321  fc5c		       00		      .byte.b	#%00000000
   2322  fc5d		       0f		      .byte.b	#%00001111
   2323  fc5e		       08		      .byte.b	#%00001000
   2324  fc5f		       0b		      .byte.b	#%00001011
   2325  fc60		       0b		      .byte.b	#%00001011
   2326  fc61		       0b		      .byte.b	#%00001011
   2327  fc62		       08		      .byte.b	#%00001000
   2328  fc63		       0f		      .byte.b	#%00001111
   2329  fc64
   2330  fd00					      org	$FD00
   2331  fd00				   Font
   2332  fd00				   C0
   2333  fd00		       e7		      .byte.b	#%11100111	;
   2334  fd01		       a5		      .byte.b	#%10100101	; 
   2335  fd02		       a5		      .byte.b	#%10100101	; 
   2336  fd03		       a5		      .byte.b	#%10100101	; 
   2337  fd04		       e7		      .byte.b	#%11100111	;	
   2338  fd05				   C1
   2339  fd05		       e7		      .byte.b	#%11100111	;
   2340  fd06		       42		      .byte.b	#%01000010	; 
   2341  fd07		       42		      .byte.b	#%01000010	; 
   2342  fd08		       42		      .byte.b	#%01000010	; 
   2343  fd09		       66		      .byte.b	#%01100110	;
   2344  fd0a				   C2
   2345  fd0a		       e7		      .byte.b	#%11100111	;
   2346  fd0b		       24		      .byte.b	#%00100100	; 
   2347  fd0c		       e7		      .byte.b	#%11100111	; 
   2348  fd0d		       81		      .byte.b	#%10000001	; 
   2349  fd0e		       e7		      .byte.b	#%11100111	;
   2350  fd0f				   C3
   2351  fd0f		       e7		      .byte.b	#%11100111	;
   2352  fd10		       81		      .byte.b	#%10000001	; 
   2353  fd11		       e7		      .byte.b	#%11100111	; 
   2354  fd12		       81		      .byte.b	#%10000001	; 
   2355  fd13		       e7		      .byte.b	#%11100111	;
   2356  fd14				   C4
   2357  fd14		       81		      .byte.b	#%10000001	;
   2358  fd15		       81		      .byte.b	#%10000001	; 
   2359  fd16		       e7		      .byte.b	#%11100111	; 
   2360  fd17		       a5		      .byte.b	#%10100101	; 
   2361  fd18		       a5		      .byte.b	#%10100101	;
   2362  fd19				   C5
   2363  fd19		       e7		      .byte.b	#%11100111	;
   2364  fd1a		       81		      .byte.b	#%10000001	; 
   2365  fd1b		       e7		      .byte.b	#%11100111	; 
   2366  fd1c		       24		      .byte.b	#%00100100	; 
   2367  fd1d		       e7		      .byte.b	#%11100111	;
   2368  fd1e				   C6
   2369  fd1e		       e7		      .byte.b	#%11100111	;
   2370  fd1f		       a5		      .byte.b	#%10100101	; 
   2371  fd20		       e7		      .byte.b	#%11100111	; 
   2372  fd21		       24		      .byte.b	#%00100100	; 
   2373  fd22		       e7		      .byte.b	#%11100111	;
   2374  fd23				   C7
   2375  fd23		       81		      .byte.b	#%10000001	;
   2376  fd24		       81		      .byte.b	#%10000001	; 
   2377  fd25		       81		      .byte.b	#%10000001	; 
   2378  fd26		       81		      .byte.b	#%10000001	; 
   2379  fd27		       e7		      .byte.b	#%11100111	;
   2380  fd28				   C8
   2381  fd28		       e7		      .byte.b	#%11100111	;
   2382  fd29		       a5		      .byte.b	#%10100101	; 
   2383  fd2a		       e7		      .byte.b	#%11100111	; 
   2384  fd2b		       a5		      .byte.b	#%10100101	; 
   2385  fd2c		       e7		      .byte.b	#%11100111	;
   2386  fd2d				   C9
   2387  fd2d		       e7		      .byte.b	#%11100111	;
   2388  fd2e		       81		      .byte.b	#%10000001	; 
   2389  fd2f		       e7		      .byte.b	#%11100111	; 
   2390  fd30		       a5		      .byte.b	#%10100101	; 
   2391  fd31		       e7		      .byte.b	#%11100111	;
   2392  fd32				   CA
   2393  fd32		       a5		      .byte.b	#%10100101	;
   2394  fd33		       a5		      .byte.b	#%10100101	; 
   2395  fd34		       e7		      .byte.b	#%11100111	; 
   2396  fd35		       a5		      .byte.b	#%10100101	; 
   2397  fd36		       e7		      .byte.b	#%11100111	;
   2398  fd37				   CB
   2399  fd37		       66		      .byte.b	#%01100110	;
   2400  fd38		       a5		      .byte.b	#%10100101	; 
   2401  fd39		       66		      .byte.b	#%01100110	; 
   2402  fd3a		       a5		      .byte.b	#%10100101	;
   2403  fd3b		       66		      .byte.b	#%01100110	;
   2404  fd3c				   CC
   2405  fd3c		       e7		      .byte.b	#%11100111	;
   2406  fd3d		       24		      .byte.b	#%00100100	; 
   2407  fd3e		       24		      .byte.b	#%00100100	; 
   2408  fd3f		       24		      .byte.b	#%00100100	;
   2409  fd40		       e7		      .byte.b	#%11100111	;
   2410  fd41
   2411  fd41				   CD
   2412  fd41		       66		      .byte.b	#%01100110	;
   2413  fd42		       a5		      .byte.b	#%10100101	; 
   2414  fd43		       a5		      .byte.b	#%10100101	; 
   2415  fd44		       a5		      .byte.b	#%10100101	;
   2416  fd45		       66		      .byte.b	#%01100110	;
   2417  fd46
   2418  fd46				   CE
   2419  fd46		       e7		      .byte.b	#%11100111	;
   2420  fd47		       24		      .byte.b	#%00100100	; 
   2421  fd48		       e7		      .byte.b	#%11100111	; 
   2422  fd49		       24		      .byte.b	#%00100100	; 
   2423  fd4a		       e7		      .byte.b	#%11100111	;
   2424  fd4b
   2425  fd4b				   CF
   2426  fd4b		       24		      .byte.b	#%00100100	;
   2427  fd4c		       24		      .byte.b	#%00100100	; 
   2428  fd4d		       e7		      .byte.b	#%11100111	; 
   2429  fd4e		       24		      .byte.b	#%00100100	; 
   2430  fd4f		       e7		      .byte.b	#%11100111	;
   2431  fd50
   2432  fd50				   CG
   2433  fd50		       c3		      .byte.b	#%11000011	;
   2434  fd51		       a5		      .byte.b	#%10100101	; 
   2435  fd52		       a5		      .byte.b	#%10100101	; 
   2436  fd53		       24		      .byte.b	#%00100100	; 
   2437  fd54		       c3		      .byte.b	#%11000011	;	
   2438  fd55
   2439  fd55				   CH
   2440  fd55		       a5		      .byte.b	#%10100101	;
   2441  fd56		       a5		      .byte.b	#%10100101	; 
   2442  fd57		       e7		      .byte.b	#%11100111	; 
   2443  fd58		       a5		      .byte.b	#%10100101	; 
   2444  fd59		       a5		      .byte.b	#%10100101	;
   2445  fd5a
   2446  fd5a				   CK
   2447  fd5a		       a5		      .byte.b	#%10100101	;
   2448  fd5b		       a5		      .byte.b	#%10100101	; 
   2449  fd5c		       66		      .byte.b	#%01100110	; 
   2450  fd5d		       a5		      .byte.b	#%10100101	; 
   2451  fd5e		       a5		      .byte.b	#%10100101	;
   2452  fd5f
   2453  fd5f				   CL
   2454  fd5f		       e7		      .byte.b	#%11100111	;
   2455  fd60		       24		      .byte.b	#%00100100	; 
   2456  fd61		       24		      .byte.b	#%00100100	; 
   2457  fd62		       24		      .byte.b	#%00100100	; 
   2458  fd63		       24		      .byte.b	#%00100100	;
   2459  fd64
   2460  fd64				   CI
   2461  fd64		       42		      .byte.b	#%01000010	;
   2462  fd65		       42		      .byte.b	#%01000010	; 
   2463  fd66		       42		      .byte.b	#%01000010	; 
   2464  fd67		       42		      .byte.b	#%01000010	; 
   2465  fd68		       42		      .byte.b	#%01000010	;
   2466  fd69
   2467  fd69				   CM
   2468  fd69		       a5		      .byte.b	#%10100101	;
   2469  fd6a		       a5		      .byte.b	#%10100101	; 
   2470  fd6b		       a5		      .byte.b	#%10100101	; 
   2471  fd6c		       e7		      .byte.b	#%11100111	; 
   2472  fd6d		       a5		      .byte.b	#%10100101	;
   2473  fd6e
   2474  fd6e				   CN
   2475  fd6e		       a5		      .byte.b	#%10100101	;
   2476  fd6f		       a5		      .byte.b	#%10100101	; 
   2477  fd70		       a5		      .byte.b	#%10100101	; 
   2478  fd71		       a5		      .byte.b	#%10100101	; 
   2479  fd72		       66		      .byte.b	#%01100110	;	
   2480  fd73
   2481  fd73
   2482  fd73				   CO
   2483  fd73		       42		      .byte.b	#%01000010	;
   2484  fd74		       a5		      .byte.b	#%10100101	; 
   2485  fd75		       a5		      .byte.b	#%10100101	; 
   2486  fd76		       a5		      .byte.b	#%10100101	; 
   2487  fd77		       42		      .byte.b	#%01000010	;	
   2488  fd78
   2489  fd78				   CP
   2490  fd78		       24		      .byte.b	#%00100100	;
   2491  fd79		       24		      .byte.b	#%00100100	; 
   2492  fd7a		       e7		      .byte.b	#%11100111	; 
   2493  fd7b		       a5		      .byte.b	#%10100101	; 
   2494  fd7c		       e7		      .byte.b	#%11100111	;
   2495  fd7d
   2496  fd7d				   CR
   2497  fd7d		       a5		      .byte.b	#%10100101	;
   2498  fd7e		       a5		      .byte.b	#%10100101	; 
   2499  fd7f		       66		      .byte.b	#%01100110	; 
   2500  fd80		       a5		      .byte.b	#%10100101	; 
   2501  fd81		       66		      .byte.b	#%01100110	;
   2502  fd82
   2503  fd82				   CS
   2504  fd82		       66		      .byte.b	#%01100110	;
   2505  fd83		       81		      .byte.b	#%10000001	; 
   2506  fd84		       42		      .byte.b	#%01000010	; 
   2507  fd85		       24		      .byte.b	#%00100100	; 
   2508  fd86		       c3		      .byte.b	#%11000011	;
   2509  fd87
   2510  fd87				   CT
   2511  fd87		       42		      .byte.b	#%01000010	;
   2512  fd88		       42		      .byte.b	#%01000010	; 
   2513  fd89		       42		      .byte.b	#%01000010	; 
   2514  fd8a		       42		      .byte.b	#%01000010	; 
   2515  fd8b		       e7		      .byte.b	#%11100111	;
   2516  fd8c
   2517  fd8c				   CV
   2518  fd8c		       42		      .byte.b	#%01000010	;
   2519  fd8d		       a5		      .byte.b	#%10100101	; 
   2520  fd8e		       a5		      .byte.b	#%10100101	; 
   2521  fd8f		       a5		      .byte.b	#%10100101	; 
   2522  fd90		       a5		      .byte.b	#%10100101	;	
   2523  fd91
   2524  fd91				   CY
   2525  fd91		       42		      .byte.b	#%01000010	;
   2526  fd92		       42		      .byte.b	#%01000010	; 
   2527  fd93		       42		      .byte.b	#%01000010	; 
   2528  fd94		       a5		      .byte.b	#%10100101	; 
   2529  fd95		       a5		      .byte.b	#%10100101	;
   2530  fd96
   2531  fd96				   CW
   2532  fd96		       a5		      .byte.b	#%10100101	;
   2533  fd97		       e7		      .byte.b	#%11100111	; 
   2534  fd98		       a5		      .byte.b	#%10100101	; 
   2535  fd99		       a5		      .byte.b	#%10100101	; 
   2536  fd9a		       a5		      .byte.b	#%10100101	;
   2537  fd9b
   2538  fd9b				   CZ
   2539  fd9b		       e7		      .byte.b	#%11100111	;
   2540  fd9c		       24		      .byte.b	#%00100100	; 
   2541  fd9d		       42		      .byte.b	#%01000010	; 
   2542  fd9e		       81		      .byte.b	#%10000001	; 
   2543  fd9f		       e7		      .byte.b	#%11100111	;
   2544  fda0
   2545  fda0				   Pipe
   2546  fda0		       42		      .byte.b	#%01000010	;
   2547  fda1		       00		      .byte.b	#%00000000	; 
   2548  fda2		       42		      .byte.b	#%01000010	; 
   2549  fda3		       00		      .byte.b	#%00000000	; 
   2550  fda4		       42		      .byte.b	#%01000010	;
   2551  fda5
   2552  fda5				   Exclamation
   2553  fda5		       42		      .byte.b	#%01000010	;
   2554  fda6		       00		      .byte.b	#%00000000	; 
   2555  fda7		       42		      .byte.b	#%01000010	; 
   2556  fda8		       42		      .byte.b	#%01000010	; 
   2557  fda9		       42		      .byte.b	#%01000010	;
   2558  fdaa
   2559  fdaa				   Dot
   2560  fdaa		       42		      .byte.b	#%01000010	;
   2561  fdab		       42		      .byte.b	#%01000010	; 
   2562  fdac		       00		      .byte.b	#%00000000	; 
   2563  fdad		       00		      .byte.b	#%00000000	; 
   2564  fdae		       00		      .byte.b	#%00000000	;
   2565  fdaf
   2566  fdaf				   Colon
   2567  fdaf		       42		      .byte.b	#%01000010	;
   2568  fdb0		       42		      .byte.b	#%01000010	; 
   2569  fdb1		       00		      .byte.b	#%00000000	; 
   2570  fdb2		       42		      .byte.b	#%01000010	; 
   2571  fdb3		       42		      .byte.b	#%01000010	;
   2572  fdb4
   2573  fdb4				   Triangle
   2574  fdb4		       81		      .byte.b	#%10000001	;
   2575  fdb5		       c3		      .byte.b	#%11000011	; 
   2576  fdb6		       e7		      .byte.b	#%11100111	; 
   2577  fdb7		       c3		      .byte.b	#%11000011	; 
   2578  fdb8		       81		      .byte.b	#%10000001	;
   2579  fdb9
   2580  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2581  fdb9		       00		      .byte.b	#0	;
   2582  fdba		       00		      .byte.b	#0	;
   2583  fdbb		       00		      .byte.b	#0	;
   2584  fdbc		       00		      .byte.b	#0	;
   2585  fdbd		       00		      .byte.b	#0	;
   2586  fdbe
   2587  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2588  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2589  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2590  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2591  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2592  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2593  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2594  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2595  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2596  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2597  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2598  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2599  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2600  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2601  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2602  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2603  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2604  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2605  fdcf
   2606  fdcf				   EngineSoundType
   2607  fdcf		       02		      .byte.b	#2
   2608  fdd0		       02		      .byte.b	#2
   2609  fdd1		       0e		      .byte.b	#14
   2610  fdd2		       06		      .byte.b	#6
   2611  fdd3		       06		      .byte.b	#6
   2612  fdd4		       0e		      .byte.b	#14
   2613  fdd5
   2614  fdd5				   EngineBaseFrequence
   2615  fdd5		       1f		      .byte.b	#31
   2616  fdd6		       15		      .byte.b	#21
   2617  fdd7		       14		      .byte.b	#20
   2618  fdd8		       1f		      .byte.b	#31
   2619  fdd9		       16		      .byte.b	#22
   2620  fdda		       03		      .byte.b	#3
   2621  fddb
   2622  fddb				   TachometerSizeLookup1
   2623  fddb		       1f		      .byte.b	#%00011111
   2624  fddc		       3f		      .byte.b	#%00111111
   2625  fddd		       7f		      .byte.b	#%01111111
   2626  fdde		       ff		      .byte.b	#%11111111
   2627  fddf		       ff		      .byte.b	#%11111111
   2628  fde0		       ff		      .byte.b	#%11111111
   2629  fde1		       ff		      .byte.b	#%11111111
   2630  fde2		       ff		      .byte.b	#%11111111
   2631  fde3
   2632  fde3				   TachometerSizeLookup2
   2633  fde3		       00		      .byte.b	#%00000000
   2634  fde4		       00		      .byte.b	#%00000000
   2635  fde5		       00		      .byte.b	#%00000000
   2636  fde6		       00		      .byte.b	#%00000000
   2637  fde7		       80		      .byte.b	#%10000000
   2638  fde8		       c0		      .byte.b	#%11000000
   2639  fde9		       e0		      .byte.b	#%11100000
   2640  fdea		       f0		      .byte.b	#%11110000
   2641  fdeb
   2642  fdeb				   TachometerGearLookup
   2643  fdeb		       01		      .byte.b	#%00000001
   2644  fdec		       02		      .byte.b	#%00000010
   2645  fded		       04		      .byte.b	#%00000100
   2646  fdee		       08		      .byte.b	#%00001000
   2647  fdef		       10		      .byte.b	#%00010000
   2648  fdf0		       30		      .byte.b	#%00110000
   2649  fdf1
   2650  fe00					      org	$FE00
   2651  fe00				   AesTable
   2652  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2653  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2654  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2655  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2656  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2657  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2658  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2659  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2660  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2661  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2662  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2663  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2664  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2665  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2666  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2667  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2668  ff00
   2669  ff00							; From FF00 to FFFB (122 bytes) to use here
   2670  ff00
   2671  ff00				   StaticText		; All static text must be on the same MSB block. 
   2672  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2673  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2674  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2675  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2676  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2677  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2678  ff05
   2679  ff05				   HellwayLeftText
   2680  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2681  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2682  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2683  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2684  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2685  ff0a
   2686  ff0a				   HellwayRightText
   2687  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2688  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2689  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2690  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2691  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2692  ff0f
   2693  ff0f				   OpbText
   2694  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2695  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2696  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2697  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2698  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2699  ff14
   2700  ff14				   YearText
   2701  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2702  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2703  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2704  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2705  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2706  ff19
   2707  ff19				   GameText
   2708  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2709  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2710  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2711  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2712  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2713  ff1e
   2714  ff1e				   OverText
   2715  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2716  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2717  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2718  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2719  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2720  ff23				   GoText
   2721  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2722  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2723  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2724  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2725  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2726  ff28
   2727  ff28				   ZeldaTextLeft
   2728  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2729  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2730  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2731  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2732  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2733  ff2d
   2734  ff2d				   ZeldaTextRight
   2735  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2736  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2737  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2738  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2739  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2740  ff32
   2741  ff32				   ZeldaDateLeft
   2742  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2743  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2744  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2745  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2746  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2747  ff37
   2748  ff37				   ZeldaDateRight
   2749  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2750  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2751  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2752  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2753  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2754  ff3c
   2755  ff3c				   PolvinhosTextLeft
   2756  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2757  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2758  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2759  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2760  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2761  ff41
   2762  ff41				   PolvinhosTextRight
   2763  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2764  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2765  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2766  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2767  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2768  ff46
   2769  ff46				   PolvinhosDateLeft
   2770  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2771  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2772  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2773  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2774  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2775  ff4b
   2776  ff4b				   PolvinhosDateRight
   2777  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2778  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2779  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2780  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2781  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2782  ff50
   2783  ff50				   IvonneTextLeft
   2784  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2785  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2786  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2787  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2788  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2789  ff55
   2790  ff55				   IvonneTextRight
   2791  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2792  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2793  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2794  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2795  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2796  ff5a
   2797  ff5a				   IvonneDateLeft
   2798  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2799  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2800  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2801  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2802  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2803  ff5f
   2804  ff5f				   IvonneDateRight
   2805  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2806  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2807  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2808  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2809  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2810  ff64
   2811  ff64				   PaperArtTextLeft
   2812  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2813  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2814  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2815  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2816  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2817  ff69
   2818  ff69				   PaperArtTextRight
   2819  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2820  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2821  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2822  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2823  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2824  ff6e
   2825  ff6e				   LeonardoTextLeft
   2826  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2827  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2828  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2829  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2830  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2831  ff73
   2832  ff73				   LeonardoTextRight
   2833  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2834  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2835  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2836  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2837  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2838  ff78
   2839  ff78				   VersionText
   2840  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2841  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2842  ff7a		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2843  ff7b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2844  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2845  ff7d
   2846  ff7d
   2847  ff7d				   EndStaticText
   2848  ff7d
   2849  ff7d				   CarSprite0		; Upside down, Original Car
   2850  ff7d		       00 00 00 00*	      ds	7
   2851  ff84		       7e		      .byte.b	#%01111110
   2852  ff85		       24		      .byte.b	#%00100100
   2853  ff86		       bd		      .byte.b	#%10111101
   2854  ff87		       3c		      .byte.b	#%00111100
   2855  ff88		       bd		      .byte.b	#%10111101
   2856  ff89		       3c		      .byte.b	#%00111100
   2857  ff8a
   2858  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2859  ff8a		       00 00 00 00*	      ds	7
   2860  ff91		       bd		      .byte.b	#%10111101
   2861  ff92		       7e		      .byte.b	#%01111110
   2862  ff93		       5a		      .byte.b	#%01011010
   2863  ff94		       66		      .byte.b	#%01100110
   2864  ff95		       bd		      .byte.b	#%10111101
   2865  ff96		       3c		      .byte.b	#%00111100
   2866  ff97
   2867  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2868  ff97		       00 00 00 00*	      ds	7
   2869  ff9e		       7e		      .byte.b	#%01111110
   2870  ff9f		       a5		      .byte.b	#%10100101
   2871  ffa0		       42		      .byte.b	#%01000010
   2872  ffa1		       42		      .byte.b	#%01000010
   2873  ffa2		       bd		      .byte.b	#%10111101
   2874  ffa3		       7e		      .byte.b	#%01111110
   2875  ffa4
   2876  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2877  ffa4		       00 00 00 00*	      ds	7
   2878  ffab		       3c		      .byte.b	#%00111100
   2879  ffac		       db		      .byte.b	#%11011011
   2880  ffad		       db		      .byte.b	#%11011011
   2881  ffae		       3c		      .byte.b	#%00111100
   2882  ffaf		       5a		      .byte.b	#%01011010
   2883  ffb0		       3c		      .byte.b	#%00111100
   2884  ffb1
   2885  ffb1				   TrafficSpeeds
   2886  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2887  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2888  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2889  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2890  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2891  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2892  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2893  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2894  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2895  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2896  ffbb				   TrafficSpeedsHighDelta
   2897  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2898  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2899  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2900  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2901  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2902  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2903  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2904  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2905  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2906  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2907  ffc5
   2908  ffc5				   CarIdToSpriteAddressL
   2909  ffc5		       7d		      .byte.b	#<CarSprite0
   2910  ffc6		       8a		      .byte.b	#<CarSprite1
   2911  ffc7		       97		      .byte.b	#<CarSprite2
   2912  ffc8		       a4		      .byte.b	#<CarSprite3
   2913  ffc9
   2914  ffc9				   CarIdToSpriteAddressH
   2915  ffc9		       ff		      .byte.b	#>CarSprite0
   2916  ffca		       ff		      .byte.b	#>CarSprite1
   2917  ffcb		       ff		      .byte.b	#>CarSprite2
   2918  ffcc		       ff		      .byte.b	#>CarSprite3
   2919  ffcd
   2920  ffcd				   CarIdToAccelerateSpeed
   2921  ffcd		       01		      .byte.b	#1
   2922  ffce		       01		      .byte.b	#1
   2923  ffcf		       01		      .byte.b	#1
   2924  ffd0		       02		      .byte.b	#2
   2925  ffd1
   2926  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2927  ffd1		       03		      .byte.b	#%00000011
   2928  ffd2		       03		      .byte.b	#%00000011
   2929  ffd3		       0f		      .byte.b	#%00001111
   2930  ffd4		       03		      .byte.b	#%00000011
   2931  ffd5
   2932  ffd5
   2933  fffc					      org	$FFFC
   2934  fffc		       00 f0		      .word.w	BeforeStart
   2935  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
