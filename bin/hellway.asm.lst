------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     13  f000		       00 42	   COLLISION_SPEED_L =	$42	;
     14  f000
     15  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     16  f000							;16 bit precision
     17  f000							;640 max speed!
     18  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     19  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     20  f000		       00 00	   CAR_MIN_SPEED_H =	0
     21  f000		       00 00	   CAR_MIN_SPEED_L =	0
     22  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     23  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     24  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     25  f000		       00 01	   ACCELERATE_SPEED =	1
     26  f000		       00 06	   BREAK_SPEED =	6
     27  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     28  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000	;Min car size... Maybe make different per track
     29  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     30  f000
     31  f000		       00 34	   TRAFFIC_COLOR =	$34
     32  f000		       00 81	   SCORE_BACKGROUND_COLOR =	$81
     33  f000		       00 0f	   SCORE_FONT_COLOR =	$0F
     34  f000
     35  f000
     36  f000		       00 80	   GRP0Cache  =	$80
     37  f000		       00 81	   PF0Cache   =	$81
     38  f000		       00 82	   PF1Cache   =	$82
     39  f000		       00 83	   PF2Cache   =	$83
     40  f000
     41  f000		       00 86	   FrameCount0 =	$86	;
     42  f000		       00 87	   FrameCount1 =	$87	;
     43  f000
     44  f000		       00 88	   Car0SpeedL =	$88
     45  f000		       00 89	   Car0SpeedH =	$89
     46  f000
     47  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     48  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     49  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     50  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     51  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     52  f000
     53  f000							;Temporary variables, multiple uses
     54  f000		       00 b0	   Tmp0       =	$B0
     55  f000		       00 b1	   Tmp1       =	$B1
     56  f000		       00 b2	   Tmp2       =	$B2
     57  f000
     58  f000		       00 ba	   CollisionCounter =	$BA
     59  f000
     60  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     61  f000
     62  f000		       00 d0	   ScoreD0    =	$D0
     63  f000		       00 d1	   ScoreD1    =	$D1
     64  f000		       00 d2	   ScoreD2    =	$D2
     65  f000		       00 d3	   ScoreD3    =	$D3
     66  f000		       00 d4	   ScoreD4    =	$D4
     67  f000
     68  f000							;generic start up stuff, put zero in all...
     69  f000				   Start
     70  f000		       78		      SEI
     71  f001		       d8		      CLD
     72  f002		       a2 ff		      LDX	#$FF
     73  f004		       9a		      TXS
     74  f005		       a9 00		      LDA	#0
     75  f007				   ClearMem
     76  f007		       95 00		      STA	0,X
     77  f009		       ca		      DEX
     78  f00a		       d0 fb		      BNE	ClearMem
     79  f00c
     80  f00c							;Setting some variables...
     81  f00c
     82  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     83  f00e		       85 06		      STA	COLUP0
     84  f010
     85  f010		       a9 85		      LDA	#PLAYER_2_COLOR
     86  f012		       85 07		      STA	COLUP1
     87  f014
     88  f014							;Loop ?
     89  f014		       a9 20		      LDA	#$20
     90  f016		       85 96		      STA	TrafficOffset1 + 2
     91  f018		       a9 40		      LDA	#$40
     92  f01a		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
     93  f01c		       a9 60		      LDA	#$60
     94  f01e		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
     95  f020		       a9 80		      LDA	#$80
     96  f022		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
     97  f024		       a9 a0		      LDA	#$A0
     98  f026
     99  f026		       ad 41 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    100  f029		       85 88		      STA	Car0SpeedL
    101  f02b
    102  f02b
    103  f02b							;VSYNC time
    104  f02b				   MainLoop
    105  f02b		       a9 02		      LDA	#2
    106  f02d		       85 00		      STA	VSYNC
    107  f02f		       85 02		      STA	WSYNC
    108  f031		       85 02		      STA	WSYNC
    109  f033							;Cool, can put code here! It removed the black line on top
    110  f033							;Make Objects move in the X axys
    111  f033		       85 2a		      STA	HMOVE	;2
    112  f035							;This must be done after a WSync, otherwise it is impossible to predict the X position
    113  f035		       a5 c0		      LDA	GameStatus	;3
    114  f037		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    115  f039		       f0 10		      BEQ	DoNotSetPlayerX	;3
    116  f03b							;Do something better with this 32 cycles
      0  f03b					      SLEEP	27	; Maybe fine position with hmove...
      1  f03b				   .CYCLES    SET	27
      2  f03b
      3  f03b				  -	      IF	.CYCLES < 2
      4  f03b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f03b				  -	      ERR
      6  f03b					      ENDIF
      7  f03b
      8  f03b					      IF	.CYCLES & 1
      9  f03b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f03b				  -	      nop	0
     11  f03b					      ELSE
     12  f03b		       24 00		      bit	VSYNC
     13  f03d					      ENDIF
     14  f03d				   .CYCLES    SET	.CYCLES - 3
     15  f03d					      ENDIF
     16  f03d
     17  f03d					      REPEAT	.CYCLES / 2
     18  f03d		       ea		      nop
     17  f03d					      REPEND
     18  f03e		       ea		      nop
     17  f03e					      REPEND
     18  f03f		       ea		      nop
     17  f03f					      REPEND
     18  f040		       ea		      nop
     17  f040					      REPEND
     18  f041		       ea		      nop
     17  f041					      REPEND
     18  f042		       ea		      nop
     17  f042					      REPEND
     18  f043		       ea		      nop
     17  f043					      REPEND
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     17  f047					      REPEND
     18  f048		       ea		      nop
     19  f049					      REPEND
    118  f049		       85 10		      STA	RESP0	;3
    119  f04b
    120  f04b				   DoNotSetPlayerX
    121  f04b
    122  f04b		       85 02		      STA	WSYNC
    123  f04d		       a9 2b		      LDA	#43	; We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    124  f04f		       8d 96 02 	      STA	TIM64T
    125  f052		       a9 00		      LDA	#0
    126  f054		       85 00		      STA	VSYNC
    127  f056
    128  f056							;Read Fire Button before, will make it start the game for now.
    129  f056		       a5 0c		      LDA	INPT4
    130  f058		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    131  f05a		       a5 c0		      LDA	GameStatus
    132  f05c		       09 80		      ORA	#%10000000
    133  f05e		       85 c0		      STA	GameStatus
    134  f060				   SkipGameStart
    135  f060
    136  f060				   CountFrame
    137  f060		       e6 86		      INC	FrameCount0	; Used to alternate lines
    138  f062		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    139  f064		       e6 87		      INC	FrameCount1	; Still not used
    140  f066				   SkipIncFC1
    141  f066
    142  f066
    143  f066							;Does not update the game if not running
    144  f066		       a5 c0		      LDA	GameStatus	;3
    145  f068		       49 80		      EOR	#%10000000	;2 game is running...
    146  f06a		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    147  f06c		       4c 3c f1 	      JMP	SkipUpdateLogic
    148  f06f
    149  f06f				   ContinueWithGameLogic
    150  f06f
    151  f06f							; for left and right, we're gonna 
    152  f06f							; set the horizontal speed, and then do
    153  f06f							; a single HMOVE.  We'll use X to hold the
    154  f06f							; horizontal speed, then store it in the 
    155  f06f							; appropriate register
    156  f06f
    157  f06f							;assum horiz speed will be zero
    158  f06f
    159  f06f				   BeginReadDpad
    160  f06f		       a2 00		      LDX	#0
    161  f071		       a9 40		      LDA	#%01000000	;Left
    162  f073		       2c 80 02 	      BIT	SWCHA
    163  f076		       d0 02		      BNE	SkipMoveLeft
    164  f078		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    165  f07a				   SkipMoveLeft
    166  f07a
    167  f07a		       a9 80		      LDA	#%10000000	;Right
    168  f07c		       2c 80 02 	      BIT	SWCHA
    169  f07f		       d0 02		      BNE	SkipMoveRight
    170  f081		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    171  f083				   SkipMoveRight
    172  f083
    173  f083		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    174  f085
    175  f085
    176  f085							;Acelerates / breaks the car
    177  f085		       a9 10		      LDA	#%00010000	;UP in controller
    178  f087		       2c 80 02 	      BIT	SWCHA
    179  f08a		       d0 21		      BNE	SkipAccelerate
    180  f08c
    181  f08c							;Adds speed
    182  f08c		       18		      CLC
    183  f08d		       a5 88		      LDA	Car0SpeedL
    184  f08f		       69 01		      ADC	#ACCELERATE_SPEED
    185  f091		       85 88		      STA	Car0SpeedL
    186  f093		       a5 89		      LDA	Car0SpeedH
    187  f095		       69 00		      ADC	#0
    188  f097		       85 89		      STA	Car0SpeedH
    189  f099
    190  f099							;Checks if already max
    191  f099		       c9 02		      CMP	#CAR_MAX_SPEED_H
    192  f09b		       90 10		      BCC	SkipAccelerate	; less than my max speed
    193  f09d		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    194  f09f							;High bit is max, compare the low
    195  f09f		       a5 88		      LDA	Car0SpeedL
    196  f0a1		       c9 80		      CMP	#CAR_MAX_SPEED_L
    197  f0a3		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    198  f0a5							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    199  f0a5
    200  f0a5				   ResetToMaxSpeed		; Speed is more, or is already max
    201  f0a5		       a9 02		      LDA	#CAR_MAX_SPEED_H
    202  f0a7		       85 89		      STA	Car0SpeedH
    203  f0a9		       a9 80		      LDA	#CAR_MAX_SPEED_L
    204  f0ab		       85 88		      STA	Car0SpeedL
    205  f0ad
    206  f0ad				   SkipAccelerate
    207  f0ad
    208  f0ad				   Break
    209  f0ad		       a9 20		      LDA	#%00100000	;Down in controller
    210  f0af		       2c 80 02 	      BIT	SWCHA
    211  f0b2		       d0 26		      BNE	SkipBreak
    212  f0b4
    213  f0b4							;Decrease speed
    214  f0b4		       38		      SEC
    215  f0b5		       a5 88		      LDA	Car0SpeedL
    216  f0b7		       e9 06		      SBC	#BREAK_SPEED
    217  f0b9		       85 88		      STA	Car0SpeedL
    218  f0bb		       a5 89		      LDA	Car0SpeedH
    219  f0bd		       e9 00		      SBC	#0
    220  f0bf		       85 89		      STA	Car0SpeedH
    221  f0c1
    222  f0c1							;Checks if is min speed
    223  f0c1		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    224  f0c3		       c9 00		      CMP	#CAR_MIN_SPEED_H
    225  f0c5		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    226  f0c7		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    227  f0c9
    228  f0c9				   CompareLBreakSpeed
    229  f0c9		       a5 88		      LDA	Car0SpeedL
    230  f0cb		       c9 00		      CMP	#CAR_MIN_SPEED_L
    231  f0cd		       90 03		      BCC	ResetMinSpeed	; Less than memory
    232  f0cf		       4c da f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    233  f0d2
    234  f0d2				   ResetMinSpeed
    235  f0d2		       a9 00		      LDA	#CAR_MIN_SPEED_H
    236  f0d4		       85 89		      STA	Car0SpeedH
    237  f0d6		       a9 00		      LDA	#CAR_MIN_SPEED_L
    238  f0d8		       85 88		      STA	Car0SpeedL
    239  f0da				   SkipBreak
    240  f0da
    241  f0da							;Updates all offsets 24 bits
    242  f0da		       a2 00		      LDX	#0	; Memory Offset 24 bit
    243  f0dc		       a0 00		      LDY	#0	; Line Speeds 16 bits
    244  f0de				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    245  f0de		       38		      SEC
    246  f0df		       a5 88		      LDA	Car0SpeedL
    247  f0e1		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    248  f0e4		       85 b0		      STA	Tmp0
    249  f0e6		       c8		      INY
    250  f0e7		       a5 89		      LDA	Car0SpeedH
    251  f0e9		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    252  f0ec		       85 b1		      STA	Tmp1
    253  f0ee		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    254  f0f0		       e9 00		      SBC	#0
    255  f0f2		       85 b2		      STA	Tmp2
    256  f0f4
    257  f0f4
    258  f0f4							;Adds the result
    259  f0f4		       18		      CLC
    260  f0f5		       a5 b0		      LDA	Tmp0
    261  f0f7		       75 90		      ADC	TrafficOffset0,X
    262  f0f9		       95 90		      STA	TrafficOffset0,X
    263  f0fb		       e8		      INX
    264  f0fc		       a5 b1		      LDA	Tmp1
    265  f0fe		       75 90		      ADC	TrafficOffset0,X
    266  f100		       95 90		      STA	TrafficOffset0,X
    267  f102		       e8		      INX
    268  f103		       a5 b2		      LDA	Tmp2	; Carry
    269  f105		       75 90		      ADC	TrafficOffset0,X
    270  f107		       95 90		      STA	TrafficOffset0,X
    271  f109		       e8		      INX
    272  f10a		       38		      SEC
    273  f10b		       69 00		      ADC	#0	;Increment by one
    274  f10d		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    275  f10f
    276  f10f
    277  f10f				   PrepareNextUpdateLoop
    278  f10f		       c8		      INY
    279  f110		       e8		      INX
    280  f111		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    281  f113		       d0 c9		      BNE	UpdateOffsets
    282  f115
    283  f115				   TestCollision		;
    284  f115							; see if car0 and playfield collide, and change the background color if so
    285  f115		       a9 80		      LDA	#%10000000
    286  f117		       24 02		      BIT	CXP0FB
    287  f119		       f0 10		      BEQ	NoCollision	;skip if not hitting...
    288  f11b		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    289  f11d		       d0 0c		      BNE	NoCollision
    290  f11f		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    291  f121		       85 ba		      STA	CollisionCounter	;and store as colision (will do more with it!)
    292  f123		       a9 42		      LDA	#COLLISION_SPEED_L	;
    293  f125		       85 88		      STA	Car0SpeedL
    294  f127		       a9 00		      LDA	#0
    295  f129		       85 89		      STA	Car0SpeedH
    296  f12b				   NoCollision
    297  f12b		       85 2c		      STA	CXCLR	;3 reset the collision detection for next frame.
    298  f12d
    299  f12d				   DecrementCollision
    300  f12d		       a4 ba		      LDY	CollisionCounter
    301  f12f		       f0 07		      BEQ	FinishDecrementCollision
    302  f131		       a2 05		      LDX	#%00000101	; Make player bigger to show colision
    303  f133		       86 04		      STX	NUSIZ0
    304  f135		       88		      DEY
    305  f136		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    306  f138				   FinishDecrementCollision
    307  f138
    308  f138				   ResetPlayerSize
    309  f138		       d0 02		      BNE	FinishResetPlayerSize
    310  f13a		       84 04		      STY	NUSIZ0	;
    311  f13c				   FinishResetPlayerSize
    312  f13c
    313  f13c				   SkipUpdateLogic
    314  f13c
    315  f13c		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    316  f13e		       85 09		      STA	COLUBK
    317  f140		       a9 0f		      LDA	#SCORE_FONT_COLOR
    318  f142		       85 08		      STA	COLUPF
    319  f144		       20 e5 f2 	      JSR	ClearPF
    320  f147		       a9 02		      LDA	#%00000010	; Score mode
    321  f149		       85 0a		      STA	CTRLPF
    322  f14b		       a0 04		      LDY	#SCORE_SIZE - 1
    323  f14d		       a2 00		      LDX	#0
    324  f14f
    325  f14f		       a5 86		      LDA	FrameCount0	;3
    326  f151		       29 01		      AND	#%00000001	;2
    327  f153		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    328  f155				   LeftScoreOn
    329  f155		       a9 0f		      LDA	#SCORE_FONT_COLOR
    330  f157		       85 07		      STA	COLUP1
    331  f159		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    332  f15b		       85 06		      STA	COLUP0
    333  f15d		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    334  f15f		       85 b1		      STA	Tmp1
    335  f161		       4c 70 f1 	      JMP	WaitForVblankEnd
    336  f164				   RightScoreOn
    337  f164		       a9 0f		      LDA	#SCORE_FONT_COLOR
    338  f166		       85 06		      STA	COLUP0
    339  f168		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    340  f16a		       85 07		      STA	COLUP1
    341  f16c		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    342  f16e		       85 b1		      STA	Tmp1
    343  f170
    344  f170							; After here we are going to update the screen, No more heavy code
    345  f170				   WaitForVblankEnd
    346  f170		       ad 84 02 	      LDA	INTIM
    347  f173		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    348  f175							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    349  f175		       85 01		      STA	VBLANK
    350  f177
    351  f177				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    352  f177		       85 02		      STA	WSYNC
    353  f179
    354  f179		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    355  f17b		       85 0d		      STA	PF0	;3
    356  f17d
    357  f17d		       a5 82		      LDA	PF1Cache	;3
    358  f17f		       85 0e		      STA	PF1	;3
    359  f181
    360  f181		       a5 83		      LDA	PF2Cache	;3
    361  f183		       85 0f		      STA	PF2	;3
    362  f185
    363  f185							;39
    364  f185				   DrawScore
    365  f185		       a6 d0		      LDX	ScoreD0	; 4
    366  f187		       bd 00 fd 	      LDA	Font,X	;4
    367  f18a		       85 81		      STA	PF0Cache	;3
    368  f18c		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    369  f18e							;17
    370  f18e
    371  f18e		       a6 d1		      LDX	ScoreD1	; 4
    372  f190		       bd 00 fd 	      LDA	Font,X	;4
    373  f193		       0a		      ASL		;2
    374  f194		       0a		      ASL		;2
    375  f195		       0a		      ASL		;2
    376  f196		       0a		      ASL		;2
    377  f197		       85 82		      STA	PF1Cache	;3
    378  f199		       c6 d1		      DEC	ScoreD1	;6
    379  f19b							;9 (After Wsync)
    380  f19b
    381  f19b		       a6 d2		      LDX	ScoreD2	; 4
    382  f19d		       bd 00 fd 	      LDA	Font,X	;4
    383  f1a0		       29 0f		      AND	#%00001111
    384  f1a2		       05 82		      ORA	PF1Cache	;3
    385  f1a4		       85 82		      STA	PF1Cache	;3
    386  f1a6		       c6 d2		      DEC	ScoreD2	;6
    387  f1a8							;20
    388  f1a8
    389  f1a8		       a6 d3		      LDX	ScoreD3	; 3
    390  f1aa		       bd 00 fd 	      LDA	Font,X	;4
    391  f1ad		       4a		      LSR		;2
    392  f1ae		       4a		      LSR		;2
    393  f1af		       4a		      LSR		;2
    394  f1b0		       4a		      LSR		;2
    395  f1b1		       85 83		      STA	PF2Cache	;3
    396  f1b3		       c6 d3		      DEC	ScoreD3	;5
    397  f1b5							;23
    398  f1b5
    399  f1b5		       a6 d4		      LDX	ScoreD4	; 3
    400  f1b7		       bd 00 fd 	      LDA	Font,X	;4
    401  f1ba		       29 f0		      AND	#%11110000
    402  f1bc		       05 83		      ORA	PF2Cache	;3
    403  f1be		       85 83		      STA	PF2Cache	;3
    404  f1c0		       c6 d4		      DEC	ScoreD4	;5
    405  f1c2							;18
    406  f1c2
    407  f1c2		       88		      DEY		;2
    408  f1c3		       10 b2		      BPL	ScoreLoop	;4
    409  f1c5
    410  f1c5		       85 02		      STA	WSYNC
    411  f1c7
    412  f1c7		       20 f4 f2 	      JSR	LoadPF
    413  f1ca
    414  f1ca		       85 02		      STA	WSYNC
    415  f1cc		       85 02		      STA	WSYNC
    416  f1ce
    417  f1ce				   PrepareForTraffic
    418  f1ce		       20 e5 f2 	      JSR	ClearPF	; 32
    419  f1d1
    420  f1d1		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    421  f1d3		       85 06		      STA	COLUP0
    422  f1d5
    423  f1d5		       a9 00		      LDA	#BACKGROUND_COLOR	;2
    424  f1d7		       85 07		      STA	COLUP1	;3
    425  f1d9
    426  f1d9							;Traffic colour
    427  f1d9		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    428  f1db		       85 08		      STA	COLUPF	;3
    429  f1dd
    430  f1dd		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    431  f1df
    432  f1df		       a9 00		      LDA	#BACKGROUND_COLOR	;2 Make it in the very end, so we have one more nice blue line
      0  f1e1					      SLEEP	18	; Wait, so the line stay blue
      1  f1e1				   .CYCLES    SET	18
      2  f1e1
      3  f1e1				  -	      IF	.CYCLES < 2
      4  f1e1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1e1				  -	      ERR
      6  f1e1					      ENDIF
      7  f1e1
      8  f1e1				  -	      IF	.CYCLES & 1
      9  f1e1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1e1				  -	      nop	0
     11  f1e1				  -	      ELSE
     12  f1e1				  -	      bit	VSYNC
     13  f1e1				  -	      ENDIF
     14  f1e1				  -.CYCLES    SET	.CYCLES - 3
     15  f1e1					      ENDIF
     16  f1e1
     17  f1e1					      REPEAT	.CYCLES / 2
     18  f1e1		       ea		      nop
     17  f1e1					      REPEND
     18  f1e2		       ea		      nop
     17  f1e2					      REPEND
     18  f1e3		       ea		      nop
     17  f1e3					      REPEND
     18  f1e4		       ea		      nop
     17  f1e4					      REPEND
     18  f1e5		       ea		      nop
     17  f1e5					      REPEND
     18  f1e6		       ea		      nop
     17  f1e6					      REPEND
     18  f1e7		       ea		      nop
     17  f1e7					      REPEND
     18  f1e8		       ea		      nop
     17  f1e8					      REPEND
     18  f1e9		       ea		      nop
     19  f1ea					      REPEND
    434  f1ea		       85 09		      STA	COLUBK	;3
    435  f1ec
    436  f1ec
    437  f1ec							;main scanline loop...
    438  f1ec				   ScanLoop
    439  f1ec		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    440  f1ee
    441  f1ee							;Start of next line!			
    442  f1ee				   DrawCache		;36 Is the last line going to the top of the next frame?
    443  f1ee
    444  f1ee		       a5 81		      LDA	PF0Cache	;3
    445  f1f0		       85 0d		      STA	PF0	;3
    446  f1f2
    447  f1f2		       b9 00 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    448  f1f5		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    449  f1f7
    450  f1f7		       a5 82		      LDA	PF1Cache	;3
    451  f1f9		       85 0e		      STA	PF1	;3
    452  f1fb
    453  f1fb		       a5 83		      LDA	PF2Cache	;3
    454  f1fd		       85 0f		      STA	PF2	;3
    455  f1ff
    456  f1ff		       a9 00		      LDA	#0	;2
    457  f201		       85 81		      STA	PF0Cache	;3
    458  f203		       85 82		      STA	PF1Cache	;3
    459  f205		       85 83		      STA	PF2Cache	;3
    460  f207
    461  f207							;BEQ DrawTraffic3
    462  f207				   DrawTraffic1 		; 32 
    463  f207		       98		      TYA		; 2
    464  f208		       18		      CLC		; 2 
    465  f209		       65 95		      ADC	TrafficOffset1 + 1	;3
    466  f20b		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    467  f20d		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    468  f20f		       45 96		      EOR	TrafficOffset1 + 2	; 3
    469  f211		       4c 16 f2 	      JMP	AfterEorOffsetWithCarry	; 3
    470  f214				   EorOffsetWithCarry
    471  f214		       45 97		      EOR	TrafficOffset1 + 3	; 3
    472  f216				   AfterEorOffsetWithCarry		;17
    473  f216		       aa		      TAX		;2
    474  f217		       bd 00 fe 	      LDA	AesTable,X	; 4
    475  f21a		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    476  f21c		       b0 04		      BCS	FinishDrawTraffic1	; 2
    477  f21e		       a9 60		      LDA	#%01100000	;2
    478  f220		       85 82		      STA	PF1Cache	;3
    479  f222				   FinishDrawTraffic1
    480  f222
    481  f222				   DrawTraffic2 		; 35
    482  f222		       98		      TYA		; 2
    483  f223		       18		      CLC		; 2 
    484  f224		       65 99		      ADC	TrafficOffset2 + 1	;3
    485  f226		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    486  f228		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    487  f22a		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    488  f22c		       4c 31 f2 	      JMP	AfterEorOffsetWithCarry2	; 3
    489  f22f				   EorOffsetWithCarry2
    490  f22f		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    491  f231				   AfterEorOffsetWithCarry2		;17
    492  f231		       aa		      TAX		;2
    493  f232		       bd 00 fe 	      LDA	AesTable,X	; 4
    494  f235		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    495  f237		       b0 06		      BCS	FinishDrawTraffic2	; 2
    496  f239		       a5 82		      LDA	PF1Cache	;3
    497  f23b		       09 0c		      ORA	#%00001100	;2
    498  f23d		       85 82		      STA	PF1Cache	;3
    499  f23f				   FinishDrawTraffic2
    500  f23f
    501  f23f							;STA WSYNC ;65 / 137
    502  f23f
    503  f23f							; LDA Tmp0 ; Flicker this line if drawing car
    504  f23f							; BEQ FinishDrawTraffic4
    505  f23f				   DrawTraffic3 		; 38
    506  f23f		       98		      TYA		; 2
    507  f240		       18		      CLC		; 2 
    508  f241		       65 9d		      ADC	TrafficOffset3 + 1	;3
    509  f243		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    510  f245		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    511  f247		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    512  f249		       4c 4e f2 	      JMP	AfterEorOffsetWithCarry3	; 3
    513  f24c				   EorOffsetWithCarry3
    514  f24c		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    515  f24e				   AfterEorOffsetWithCarry3		;17
    516  f24e		       aa		      TAX		;2
    517  f24f		       bd 00 fe 	      LDA	AesTable,X	; 4
    518  f252		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    519  f254		       b0 08		      BCS	FinishDrawTraffic3	; 2 
    520  f256		       a9 01		      LDA	#%00000001	;2
    521  f258		       85 83		      STA	PF2Cache	;3
    522  f25a		       05 82		      ORA	PF1Cache	;3
    523  f25c		       85 82		      STA	PF1Cache	;3
    524  f25e				   FinishDrawTraffic3
    525  f25e
    526  f25e				   DrawTraffic4 		; 35
    527  f25e		       98		      TYA		; 2
    528  f25f		       18		      CLC		; 2 
    529  f260		       65 a1		      ADC	TrafficOffset4 + 1	;3
    530  f262		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    531  f264		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    532  f266		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    533  f268		       4c 6d f2 	      JMP	AfterEorOffsetWithCarry4	; 3
    534  f26b				   EorOffsetWithCarry4
    535  f26b		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    536  f26d				   AfterEorOffsetWithCarry4		;17
    537  f26d		       aa		      TAX		;2
    538  f26e		       bd 00 fe 	      LDA	AesTable,X	; 4
    539  f271		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    540  f273		       b0 06		      BCS	FinishDrawTraffic4	; 2
    541  f275		       a5 83		      LDA	PF2Cache	;3
    542  f277		       09 0c		      ORA	#%00001100	;2
    543  f279		       85 83		      STA	PF2Cache	;3	
    544  f27b				   FinishDrawTraffic4
    545  f27b
    546  f27b				   DrawTraffic0 		; 24
    547  f27b		       98		      TYA		;2
    548  f27c		       18		      CLC		;2
    549  f27d		       65 91		      ADC	TrafficOffset0 + 1	; 3
    550  f27f		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    551  f281		       f0 0a		      BEQ	SkipDrawTraffic0	; 2
    552  f283		       a9 f0		      LDA	#%11110000	; 2
    553  f285		       85 81		      STA	PF0Cache	;3
    554  f287		       a5 83		      LDA	PF2Cache	;3
    555  f289		       09 e0		      ORA	#%11100000	;2
    556  f28b		       85 83		      STA	PF2Cache	; 3
    557  f28d				   SkipDrawTraffic0
    558  f28d
    559  f28d				   WhileScanLoop
    560  f28d		       88		      DEY		;2
    561  f28e		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    562  f290		       4c ec f1 	      JMP	ScanLoop	;3
    563  f293				   FinishScanLoop		; 7 209 of 222
    564  f293
    565  f293		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    566  f295
    567  f295		       20 f4 f2 	      JSR	LoadPF
    568  f298
    569  f298		       85 02		      STA	WSYNC	; do stuff!
    570  f29a		       85 02		      STA	WSYNC
    571  f29c		       85 02		      STA	WSYNC
    572  f29e							;42 cycles to use here
    573  f29e
    574  f29e				   PrepareOverscan
    575  f29e		       a9 02		      LDA	#2
    576  f2a0		       85 02		      STA	WSYNC
    577  f2a2		       85 01		      STA	VBLANK
    578  f2a4
    579  f2a4		       a9 24		      LDA	#36	; one more line before overscan...
    580  f2a6		       8d 96 02 	      STA	TIM64T
    581  f2a9							;Do more logic
    582  f2a9
    583  f2a9				   WriteDistance
    584  f2a9				   LetterS
    585  f2a9		       a9 59		      LDA	#<CS + #SCORE_SIZE -1	;3
    586  f2ab		       85 d0		      STA	ScoreD0	;3
    587  f2ad							;We "multiply by 5 to get the real distance in the table"
    588  f2ad				   Digit0Distance
    589  f2ad		       a5 91		      LDA	TrafficOffset0 + 1	;3
    590  f2af		       29 0f		      AND	#%00001111	;2
    591  f2b1		       aa		      TAX		; 2
    592  f2b2		       bd 5a fd 	      LDA	FontLookup,X	;4 
    593  f2b5		       85 d4		      STA	ScoreD4	;3
    594  f2b7
    595  f2b7				   Digit1Distance
    596  f2b7		       a5 91		      LDA	TrafficOffset0 + 1	;3
    597  f2b9		       29 f0		      AND	#%11110000	;2
    598  f2bb		       4a		      LSR		; 2
    599  f2bc		       4a		      LSR		; 2
    600  f2bd		       4a		      LSR		; 2
    601  f2be		       4a		      LSR		; 2
    602  f2bf		       aa		      TAX		; 2
    603  f2c0		       bd 5a fd 	      LDA	FontLookup,X	;4
    604  f2c3		       85 d3		      STA	ScoreD3	;3
    605  f2c5
    606  f2c5				   Digit2Distance
    607  f2c5		       a5 92		      LDA	TrafficOffset0 + 2	;3
    608  f2c7		       29 0f		      AND	#%00001111	;2
    609  f2c9		       aa		      TAX		; 2
    610  f2ca		       bd 5a fd 	      LDA	FontLookup,X	;4 
    611  f2cd		       85 d2		      STA	ScoreD2	;3
    612  f2cf
    613  f2cf				   Digit3Distance
    614  f2cf		       a5 92		      LDA	TrafficOffset0 + 2	;3
    615  f2d1		       29 f0		      AND	#%11110000	;2
    616  f2d3		       4a		      LSR		; 2
    617  f2d4		       4a		      LSR		; 2
    618  f2d5		       4a		      LSR		; 2
    619  f2d6		       4a		      LSR		; 2
    620  f2d7		       aa		      TAX		; 2
    621  f2d8		       bd 5a fd 	      LDA	FontLookup,X	;4
    622  f2db		       85 d1		      STA	ScoreD1	;3
    623  f2dd
    624  f2dd
    625  f2dd				   OverScanWait
    626  f2dd		       ad 84 02 	      LDA	INTIM
    627  f2e0		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    628  f2e2		       4c 2b f0 	      JMP	MainLoop
    629  f2e5
    630  f2e5				   Subroutines
    631  f2e5				   ClearPF		; 26
    632  f2e5		       a9 00		      LDA	#0	;2
    633  f2e7		       85 0d		      STA	PF0	;3
    634  f2e9		       85 0e		      STA	PF1	;3
    635  f2eb		       85 0f		      STA	PF2	;3	
    636  f2ed		       85 81		      STA	PF0Cache	;3
    637  f2ef		       85 82		      STA	PF1Cache	;3
    638  f2f1		       85 83		      STA	PF2Cache	;3 
    639  f2f3		       60		      RTS		;6
    640  f2f4
    641  f2f4				   LoadPF		; 24
    642  f2f4		       a5 81		      LDA	PF0Cache	;3
    643  f2f6		       85 0d		      STA	PF0	;3
    644  f2f8
    645  f2f8		       a5 82		      LDA	PF1Cache	;3
    646  f2fa		       85 0e		      STA	PF1	;3
    647  f2fc
    648  f2fc		       a5 83		      LDA	PF2Cache	;3
    649  f2fe		       85 0f		      STA	PF2	;3
    650  f300
    651  f300		       60		      RTS		;6
    652  f301
    653  f301							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
    654  fd00					      org	$FD00
    655  fd00				   Font
    656  fd00				   C0
    657  fd00		       e7		      .byte.b	#%11100111	;
    658  fd01		       a5		      .byte.b	#%10100101	; 
    659  fd02		       a5		      .byte.b	#%10100101	; 
    660  fd03		       a5		      .byte.b	#%10100101	; 
    661  fd04		       e7		      .byte.b	#%11100111	;	
    662  fd05				   C1
    663  fd05		       e7		      .byte.b	#%11100111	;
    664  fd06		       42		      .byte.b	#%01000010	; 
    665  fd07		       42		      .byte.b	#%01000010	; 
    666  fd08		       42		      .byte.b	#%01000010	; 
    667  fd09		       66		      .byte.b	#%01100110	;
    668  fd0a				   C2
    669  fd0a		       e7		      .byte.b	#%11100111	;
    670  fd0b		       24		      .byte.b	#%00100100	; 
    671  fd0c		       e7		      .byte.b	#%11100111	; 
    672  fd0d		       81		      .byte.b	#%10000001	; 
    673  fd0e		       e7		      .byte.b	#%11100111	;
    674  fd0f				   C3
    675  fd0f		       e7		      .byte.b	#%11100111	;
    676  fd10		       81		      .byte.b	#%10000001	; 
    677  fd11		       e7		      .byte.b	#%11100111	; 
    678  fd12		       81		      .byte.b	#%10000001	; 
    679  fd13		       e7		      .byte.b	#%11100111	;
    680  fd14				   C4
    681  fd14		       81		      .byte.b	#%10000001	;
    682  fd15		       81		      .byte.b	#%10000001	; 
    683  fd16		       e7		      .byte.b	#%11100111	; 
    684  fd17		       a5		      .byte.b	#%10100101	; 
    685  fd18		       a5		      .byte.b	#%10100101	;
    686  fd19				   C5
    687  fd19		       e7		      .byte.b	#%11100111	;
    688  fd1a		       81		      .byte.b	#%10000001	; 
    689  fd1b		       e7		      .byte.b	#%11100111	; 
    690  fd1c		       24		      .byte.b	#%00100100	; 
    691  fd1d		       e7		      .byte.b	#%11100111	;
    692  fd1e				   C6
    693  fd1e		       e7		      .byte.b	#%11100111	;
    694  fd1f		       a5		      .byte.b	#%10100101	; 
    695  fd20		       e7		      .byte.b	#%11100111	; 
    696  fd21		       24		      .byte.b	#%00100100	; 
    697  fd22		       e7		      .byte.b	#%11100111	;
    698  fd23				   C7
    699  fd23		       81		      .byte.b	#%10000001	;
    700  fd24		       81		      .byte.b	#%10000001	; 
    701  fd25		       81		      .byte.b	#%10000001	; 
    702  fd26		       81		      .byte.b	#%10000001	; 
    703  fd27		       e7		      .byte.b	#%11100111	;
    704  fd28				   C8
    705  fd28		       e7		      .byte.b	#%11100111	;
    706  fd29		       a5		      .byte.b	#%10100101	; 
    707  fd2a		       e7		      .byte.b	#%11100111	; 
    708  fd2b		       a5		      .byte.b	#%10100101	; 
    709  fd2c		       e7		      .byte.b	#%11100111	;
    710  fd2d				   C9
    711  fd2d		       e7		      .byte.b	#%11100111	;
    712  fd2e		       81		      .byte.b	#%10000001	; 
    713  fd2f		       e7		      .byte.b	#%11100111	; 
    714  fd30		       a5		      .byte.b	#%10100101	; 
    715  fd31		       e7		      .byte.b	#%11100111	;
    716  fd32				   CA
    717  fd32		       a5		      .byte.b	#%10100101	;
    718  fd33		       a5		      .byte.b	#%10100101	; 
    719  fd34		       e7		      .byte.b	#%11100111	; 
    720  fd35		       a5		      .byte.b	#%10100101	; 
    721  fd36		       e7		      .byte.b	#%11100111	;
    722  fd37				   CB
    723  fd37		       66		      .byte.b	#%01100110	;
    724  fd38		       a5		      .byte.b	#%10100101	; 
    725  fd39		       66		      .byte.b	#%01100110	; 
    726  fd3a		       a5		      .byte.b	#%10100101	;
    727  fd3b		       66		      .byte.b	#%01100110	;
    728  fd3c				   CC
    729  fd3c		       e7		      .byte.b	#%11100111	;
    730  fd3d		       24		      .byte.b	#%00100100	; 
    731  fd3e		       24		      .byte.b	#%00100100	; 
    732  fd3f		       24		      .byte.b	#%00100100	;
    733  fd40		       e7		      .byte.b	#%11100111	;
    734  fd41
    735  fd41				   CD
    736  fd41		       66		      .byte.b	#%01100110	;
    737  fd42		       a5		      .byte.b	#%10100101	; 
    738  fd43		       a5		      .byte.b	#%10100101	; 
    739  fd44		       a5		      .byte.b	#%10100101	;
    740  fd45		       66		      .byte.b	#%01100110	;
    741  fd46
    742  fd46				   CE
    743  fd46		       e7		      .byte.b	#%11100111	;
    744  fd47		       24		      .byte.b	#%00100100	; 
    745  fd48		       e7		      .byte.b	#%11100111	; 
    746  fd49		       24		      .byte.b	#%00100100	; 
    747  fd4a		       e7		      .byte.b	#%11100111	;
    748  fd4b
    749  fd4b				   CF
    750  fd4b		       24		      .byte.b	#%00100100	;
    751  fd4c		       24		      .byte.b	#%00100100	; 
    752  fd4d		       e7		      .byte.b	#%11100111	; 
    753  fd4e		       24		      .byte.b	#%00100100	; 
    754  fd4f		       e7		      .byte.b	#%11100111	;
    755  fd50
    756  fd50				   Space		; Moved from the beggining so 0 to F is fast to draw.
    757  fd50		       00		      .byte.b	%0	;
    758  fd51		       00		      .byte.b	#0	;
    759  fd52		       00		      .byte.b	#0	;
    760  fd53		       00		      .byte.b	#0	;
    761  fd54		       00		      .byte.b	#0	;
    762  fd55
    763  fd55				   CS
    764  fd55		       66		      .byte.b	#%01100110	;
    765  fd56		       81		      .byte.b	#%10000001	; 
    766  fd57		       42		      .byte.b	#%01000010	; 
    767  fd58		       24		      .byte.b	#%00100100	; 
    768  fd59		       c3		      .byte.b	#%11000011	;
    769  fd5a
    770  fd5a				   FontLookup		; Very fast font lookup for dynamic values!
    771  fd5a		       04		      .byte.b	#<C0 + #SCORE_SIZE -1
    772  fd5b		       09		      .byte.b	#<C1 + #SCORE_SIZE -1
    773  fd5c		       0e		      .byte.b	#<C2 + #SCORE_SIZE -1
    774  fd5d		       13		      .byte.b	#<C3 + #SCORE_SIZE -1
    775  fd5e		       18		      .byte.b	#<C4 + #SCORE_SIZE -1
    776  fd5f		       1d		      .byte.b	#<C5 + #SCORE_SIZE -1
    777  fd60		       22		      .byte.b	#<C6 + #SCORE_SIZE -1
    778  fd61		       27		      .byte.b	#<C7 + #SCORE_SIZE -1
    779  fd62		       2c		      .byte.b	#<C8 + #SCORE_SIZE -1
    780  fd63		       31		      .byte.b	#<C9 + #SCORE_SIZE -1
    781  fd64		       36		      .byte.b	#<CA + #SCORE_SIZE -1
    782  fd65		       3b		      .byte.b	#<CB + #SCORE_SIZE -1
    783  fd66		       40		      .byte.b	#<CC + #SCORE_SIZE -1
    784  fd67		       45		      .byte.b	#<CD + #SCORE_SIZE -1
    785  fd68		       4a		      .byte.b	#<CE + #SCORE_SIZE -1
    786  fd69		       4f		      .byte.b	#<CF + #SCORE_SIZE -1
    787  fd6a
    788  fd6a
    789  fe00					      org	$FE00
    790  fe00				   AesTable
    791  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    792  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    793  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    794  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    795  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    796  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    797  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    798  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    799  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    800  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    801  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    802  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    803  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    804  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    805  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    806  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    807  ff00
    808  ff00							; From FF00 to FFFB (122 bytes) to use here
    809  ff00
    810  ff00				   CarSprite		; Upside down
    811  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    812  ff01		       7e		      .byte.b	#%01111110
    813  ff02		       24		      .byte.b	#%00100100
    814  ff03		       bd		      .byte.b	#%10111101
    815  ff04		       3c		      .byte.b	#%00111100
    816  ff05		       bd		      .byte.b	#%10111101
    817  ff06		       3c		      .byte.b	#%00111100
    818  ff07		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
    819  ff39
    820  ff39
    821  ff39				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    822  ff39		       00		      .byte.b	#$00	;  Trafic0 L
    823  ff3a		       00		      .byte.b	#$00	;  Trafic0 H
    824  ff3b		       0a		      .byte.b	#$0A	;  Trafic1 L
    825  ff3c		       01		      .byte.b	#$01	;  Trafic1 H
    826  ff3d		       e6		      .byte.b	#$E6	;  Trafic2 L
    827  ff3e		       00		      .byte.b	#$00	;  Trafic2 H
    828  ff3f		       c2		      .byte.b	#$C2	;  Trafic3 L
    829  ff40		       00		      .byte.b	#$00	;  Trafic3 H
    830  ff41		       9e		      .byte.b	#$9E	;  Trafic4 L
    831  ff42		       00		      .byte.b	#$00	;  Trafic4 H
    832  ff43
    833  ff43
    834  fffc					      org	$FFFC
    835  fffc		       00 f0		      .word.w	Start
    836  fffe		       00 f0		      .word.w	Start
