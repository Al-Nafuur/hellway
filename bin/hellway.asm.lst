------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 07	   CAR_SIZE   =	7
     11  f000		       00 06	   TRAFFIC_LINE_COUNT =	6
     12  f000		       00 0a	   CAR_0_Y    =	10
     13  f000							;16 bit precision
     14  f000							;640 max speed!
     15  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     16  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     17  f000		       00 00	   CAR_MIN_SPEED_H =	0
     18  f000		       00 00	   CAR_MIN_SPEED_L =	0
     19  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     20  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     21  f000		       00 01	   ACCELERATE_SPEED =	1
     22  f000		       00 04	   BREAK_SPEED =	4
     23  f000		       00 10	   ROM_START_MSB =	$10
     24  f000							;For now, will use in aal rows until figure out if make it dynamic or not.
     25  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000
     26  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     27  f000
     28  f000		       00 34	   TRAFFIC_COLOR =	$34
     29  f000
     30  f000							;memory	
     31  f000		       00 80	   Car0Line   =	$80
     32  f000
     33  f000		       00 81	   GRP0Cache  =	$81
     34  f000		       00 82	   PF0Cache   =	$82
     35  f000		       00 83	   PF1Cache   =	$83
     36  f000		       00 84	   PF2Cache   =	$84
     37  f000
     38  f000		       00 86	   FrameCount0 =	$86	;
     39  f000		       00 87	   FrameCount1 =	$87	;
     40  f000
     41  f000		       00 88	   Car0SpeedL =	$88
     42  f000		       00 89	   Car0SpeedH =	$89
     43  f000
     44  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     45  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     46  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     47  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     48  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     49  f000		       00 a4	   TrafficOffset5 =	$A4	; Traffic 1 $A5 $A6 (24 bit) $A7 is cache
     50  f000
     51  f000							;Temporary variables, multiple uses
     52  f000		       00 b0	   Tmp0       =	$B0
     53  f000		       00 b1	   Tmp1       =	$B1
     54  f000		       00 b2	   Tmp2       =	$B2
     55  f000
     56  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     57  f000
     58  f000							;generic start up stuff, put zero in all...
     59  f000				   Start
     60  f000		       78		      SEI
     61  f001		       d8		      CLD
     62  f002		       a2 ff		      LDX	#$FF
     63  f004		       9a		      TXS
     64  f005		       a9 00		      LDA	#0
     65  f007				   ClearMem
     66  f007		       95 00		      STA	0,X
     67  f009		       ca		      DEX
     68  f00a		       d0 fb		      BNE	ClearMem
     69  f00c
     70  f00c							;Setting some variables...
     71  f00c
     72  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     73  f00e		       85 06		      STA	COLUP0
     74  f010
     75  f010		       a9 0a		      LDA	#10
     76  f012		       85 94		      STA	TrafficOffset1	;Initial Y Position
     77  f014
     78  f014							;Extract to subrotine? Used also dor the offsets
     79  f014		       a9 00		      LDA	#CAR_MIN_SPEED_L
     80  f016		       85 88		      STA	Car0SpeedL
     81  f018		       a9 00		      LDA	#CAR_MIN_SPEED_H
     82  f01a		       85 89		      STA	Car0SpeedH
     83  f01c
     84  f01c							;Traffic colour
     85  f01c		       a9 34		      LDA	#TRAFFIC_COLOR
     86  f01e		       85 08		      STA	COLUPF
     87  f020
     88  f020
     89  f020							;VSYNC time
     90  f020				   MainLoop
     91  f020		       a9 02		      LDA	#2
     92  f022		       85 00		      STA	VSYNC
     93  f024		       85 02		      STA	WSYNC
     94  f026		       85 02		      STA	WSYNC
     95  f028							;Cool, can put code here! It removed the black line on top
     96  f028							;Make Objects move in the X axys
     97  f028		       85 2a		      STA	HMOVE	;2
     98  f02a							;This must be done after a WSync, otherwise it is impossible to predict the X position
     99  f02a		       a5 c0		      LDA	GameStatus	;3
    100  f02c		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    101  f02e		       f0 12		      BEQ	DoNotSetPlayerX	;3
    102  f030							;Do something better with this 32 cycles
      0  f030					      SLEEP	32	;
      1  f030				   .CYCLES    SET	32
      2  f030
      3  f030				  -	      IF	.CYCLES < 2
      4  f030				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f030				  -	      ERR
      6  f030					      ENDIF
      7  f030
      8  f030				  -	      IF	.CYCLES & 1
      9  f030				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f030				  -	      nop	0
     11  f030				  -	      ELSE
     12  f030				  -	      bit	VSYNC
     13  f030				  -	      ENDIF
     14  f030				  -.CYCLES    SET	.CYCLES - 3
     15  f030					      ENDIF
     16  f030
     17  f030					      REPEAT	.CYCLES / 2
     18  f030		       ea		      nop
     17  f030					      REPEND
     18  f031		       ea		      nop
     17  f031					      REPEND
     18  f032		       ea		      nop
     17  f032					      REPEND
     18  f033		       ea		      nop
     17  f033					      REPEND
     18  f034		       ea		      nop
     17  f034					      REPEND
     18  f035		       ea		      nop
     17  f035					      REPEND
     18  f036		       ea		      nop
     17  f036					      REPEND
     18  f037		       ea		      nop
     17  f037					      REPEND
     18  f038		       ea		      nop
     17  f038					      REPEND
     18  f039		       ea		      nop
     17  f039					      REPEND
     18  f03a		       ea		      nop
     17  f03a					      REPEND
     18  f03b		       ea		      nop
     17  f03b					      REPEND
     18  f03c		       ea		      nop
     17  f03c					      REPEND
     18  f03d		       ea		      nop
     17  f03d					      REPEND
     18  f03e		       ea		      nop
     17  f03e					      REPEND
     18  f03f		       ea		      nop
     19  f040					      REPEND
    104  f040		       85 10		      STA	RESP0	;3
    105  f042				   DoNotSetPlayerX
    106  f042
    107  f042		       85 02		      STA	WSYNC
    108  f044		       a9 2b		      LDA	#43
    109  f046		       8d 96 02 	      STA	TIM64T
    110  f049		       a9 00		      LDA	#0
    111  f04b		       85 00		      STA	VSYNC
    112  f04d
    113  f04d							;Read Fire Button before, will make it start the game for now.
    114  f04d		       a5 0c		      LDA	INPT4
    115  f04f		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    116  f051		       a5 c0		      LDA	GameStatus
    117  f053		       09 80		      ORA	#%10000000
    118  f055		       85 c0		      STA	GameStatus
    119  f057				   SkipGameStart
    120  f057
    121  f057				   CountFrame
    122  f057		       e6 86		      INC	FrameCount0	; Used to alternate lines
    123  f059		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    124  f05b		       e6 87		      INC	FrameCount1	; Still not used
    125  f05d				   SkipIncFC1
    126  f05d
    127  f05d							;Does not update the game if not running
    128  f05d		       a5 c0		      LDA	GameStatus	;3
    129  f05f		       49 80		      EOR	#%10000000	;2 game is running...
    130  f061		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    131  f063		       4c 14 f1 	      JMP	SkipUpdateLogic
    132  f066
    133  f066				   ContinueWithGameLogic
    134  f066
    135  f066							; for left and right, we're gonna 
    136  f066							; set the horizontal speed, and then do
    137  f066							; a single HMOVE.  We'll use X to hold the
    138  f066							; horizontal speed, then store it in the 
    139  f066							; appropriate register
    140  f066
    141  f066							;assum horiz speed will be zero
    142  f066
    143  f066							;Begin read dpad
    144  f066		       a2 00		      LDX	#0
    145  f068
    146  f068		       a9 40		      LDA	#%01000000	;Left
    147  f06a		       2c 80 02 	      BIT	SWCHA
    148  f06d		       d0 02		      BNE	SkipMoveLeft
    149  f06f		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    150  f071				   SkipMoveLeft
    151  f071
    152  f071		       a9 80		      LDA	#%10000000	;Right
    153  f073		       2c 80 02 	      BIT	SWCHA
    154  f076		       d0 02		      BNE	SkipMoveRight
    155  f078		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    156  f07a				   SkipMoveRight
    157  f07a
    158  f07a		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    159  f07c
    160  f07c
    161  f07c							;Acelerates / breaks the car
    162  f07c		       a9 10		      LDA	#%00010000	;UP in controller
    163  f07e		       2c 80 02 	      BIT	SWCHA
    164  f081		       d0 21		      BNE	SkipAccelerate
    165  f083
    166  f083							;Adds speed
    167  f083		       18		      CLC
    168  f084		       a5 88		      LDA	Car0SpeedL
    169  f086		       69 01		      ADC	#ACCELERATE_SPEED
    170  f088		       85 88		      STA	Car0SpeedL
    171  f08a		       a5 89		      LDA	Car0SpeedH
    172  f08c		       69 00		      ADC	#0
    173  f08e		       85 89		      STA	Car0SpeedH
    174  f090
    175  f090							;Checks if already max
    176  f090		       c9 02		      CMP	#CAR_MAX_SPEED_H
    177  f092		       90 10		      BCC	SkipAccelerate	; less than my max speed
    178  f094		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    179  f096							;High bit is max, compare the low
    180  f096		       a5 88		      LDA	Car0SpeedL
    181  f098		       c9 80		      CMP	#CAR_MAX_SPEED_L
    182  f09a		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    183  f09c							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    184  f09c
    185  f09c				   ResetToMaxSpeed		; Speed is more, or is already max
    186  f09c		       a9 02		      LDA	#CAR_MAX_SPEED_H
    187  f09e		       85 89		      STA	Car0SpeedH
    188  f0a0		       a9 80		      LDA	#CAR_MAX_SPEED_L
    189  f0a2		       85 88		      STA	Car0SpeedL
    190  f0a4
    191  f0a4				   SkipAccelerate
    192  f0a4
    193  f0a4				   Break
    194  f0a4		       a9 20		      LDA	#%00100000	;Down in controller
    195  f0a6		       2c 80 02 	      BIT	SWCHA
    196  f0a9		       d0 26		      BNE	SkipBreak
    197  f0ab
    198  f0ab							;Decrease speed
    199  f0ab		       38		      SEC
    200  f0ac		       a5 88		      LDA	Car0SpeedL
    201  f0ae		       e9 04		      SBC	#BREAK_SPEED
    202  f0b0		       85 88		      STA	Car0SpeedL
    203  f0b2		       a5 89		      LDA	Car0SpeedH
    204  f0b4		       e9 00		      SBC	#0
    205  f0b6		       85 89		      STA	Car0SpeedH
    206  f0b8
    207  f0b8							;Checks if is min speed
    208  f0b8		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    209  f0ba		       c9 00		      CMP	#CAR_MIN_SPEED_H
    210  f0bc		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    211  f0be		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    212  f0c0
    213  f0c0				   CompareLBreakSpeed
    214  f0c0		       a5 88		      LDA	Car0SpeedL
    215  f0c2		       c9 00		      CMP	#CAR_MIN_SPEED_L
    216  f0c4		       90 03		      BCC	ResetMinSpeed	; Less than memory
    217  f0c6		       4c d1 f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    218  f0c9
    219  f0c9				   ResetMinSpeed
    220  f0c9		       a9 00		      LDA	#CAR_MIN_SPEED_H
    221  f0cb		       85 89		      STA	Car0SpeedH
    222  f0cd		       a9 00		      LDA	#CAR_MIN_SPEED_L
    223  f0cf		       85 88		      STA	Car0SpeedL
    224  f0d1				   SkipBreak
    225  f0d1
    226  f0d1							;Updates all offsets 24 bits
    227  f0d1		       a2 00		      LDX	#0	; Memory Offset 24 bit
    228  f0d3		       a0 00		      LDY	#0	; Line Speeds 16 bits
    229  f0d5				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    230  f0d5		       38		      SEC
    231  f0d6		       a5 88		      LDA	Car0SpeedL
    232  f0d8		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    233  f0db		       85 b0		      STA	Tmp0
    234  f0dd		       c8		      INY
    235  f0de		       a5 89		      LDA	Car0SpeedH
    236  f0e0		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    237  f0e3		       85 b1		      STA	Tmp1
    238  f0e5		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    239  f0e7		       e9 00		      SBC	#0
    240  f0e9		       85 b2		      STA	Tmp2
    241  f0eb
    242  f0eb
    243  f0eb							;Adds the result
    244  f0eb		       18		      CLC
    245  f0ec		       a5 b0		      LDA	Tmp0
    246  f0ee		       75 90		      ADC	TrafficOffset0,X
    247  f0f0		       95 90		      STA	TrafficOffset0,X
    248  f0f2		       e8		      INX
    249  f0f3		       a5 b1		      LDA	Tmp1
    250  f0f5		       75 90		      ADC	TrafficOffset0,X
    251  f0f7		       95 90		      STA	TrafficOffset0,X
    252  f0f9		       e8		      INX
    253  f0fa		       a5 b2		      LDA	Tmp2	; Carry
    254  f0fc		       75 90		      ADC	TrafficOffset0,X
    255  f0fe		       95 90		      STA	TrafficOffset0,X
    256  f100		       e8		      INX
    257  f101		       38		      SEC
    258  f102		       69 00		      ADC	#0	;Increment by one
    259  f104		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    260  f106
    261  f106
    262  f106				   PrepareNextUpdateLoop
    263  f106		       c8		      INY
    264  f107		       e8		      INX
    265  f108		       e0 18		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    266  f10a		       d0 c9		      BNE	UpdateOffsets
    267  f10c
    268  f10c				   TestCollision		;
    269  f10c							; see if car0 and playfield collide, and change the background color if so
    270  f10c		       a9 80		      LDA	#%10000000
    271  f10e		       24 02		      BIT	CXP0FB
    272  f110		       f0 00		      BEQ	NoCollision	;skip if not hitting...
    273  f112							;LDA FrameCount0	;must be a hit! Change rand color bg
    274  f112							;STA COLUBK	;and store as the bgcolor
    275  f112				   NoCollision
    276  f112		       85 2c		      STA	CXCLR	;reset the collision detection for next frame
    277  f114
    278  f114				   SkipUpdateLogic
    279  f114
    280  f114							; After here we are going to update the screen, No more heavy code
    281  f114				   WaitForVblankEnd
    282  f114		       ad 84 02 	      LDA	INTIM
    283  f117		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    284  f119
    285  f119							;50 cycles worse case before the VSync 
    286  f119		       a0 3f		      LDY	#SCREEN_SIZE - 1	;#63 ; 	
    287  f11b
    288  f11b		       85 02		      STA	WSYNC
    289  f11d
    290  f11d		       a9 01		      LDA	#1
    291  f11f		       85 01		      STA	VBLANK
    292  f121
    293  f121
    294  f121							;main scanline loop...
    295  f121				   ScanLoop
    296  f121		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    297  f123
    298  f123							;Start of next line!			
    299  f123				   DrawCache		;24 Is the last line going to the top of the next frame?
    300  f123
    301  f123		       a5 82		      LDA	PF0Cache	;3
    302  f125		       85 0d		      STA	PF0	;3
    303  f127
    304  f127		       a5 81		      LDA	GRP0Cache	;3 ;buffer was set during last scanline
    305  f129		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    306  f12b
    307  f12b		       a5 83		      LDA	PF1Cache	;3
    308  f12d		       85 0e		      STA	PF1	;3
    309  f12f
    310  f12f		       a5 84		      LDA	PF2Cache	;3
    311  f131		       85 0f		      STA	PF2	;3
    312  f133
    313  f133				   DrawTraffic0 		; 16 max, 14 min, traffic 0 is the border
    314  f133		       98		      TYA		;2
    315  f134		       18		      CLC		;2
    316  f135		       65 91		      ADC	TrafficOffset0 + 1	; 3
    317  f137		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    318  f139		       f0 05		      BEQ	EraseTraffic0	; 2
    319  f13b		       a9 f0		      LDA	#%11110000	; 2
    320  f13d		       4c 42 f1 	      JMP	StoreTraffic0	;3
    321  f140				   EraseTraffic0
    322  f140		       a9 00		      LDA	#0	; 2
    323  f142				   StoreTraffic0
    324  f142		       85 82		      STA	PF0Cache	;3
    325  f144				   SkipDrawTraffic0
    326  f144
    327  f144				   BeginDrawCar0Block		;21 is the max, since if draw, does not check active
    328  f144		       a6 80		      LDX	Car0Line	;3 check the visible player line...
    329  f146		       f0 0a		      BEQ	FinishDrawCar0	;2	skip the drawing if its zero...
    330  f148				   DrawCar0
    331  f148		       bd ff fe 	      LDA	CarSprite-1,X	;5	;otherwise, load the correct line from CarSprite
    332  f14b							;section below... it's off by 1 though, since at zero
    333  f14b							;we stop drawing
    334  f14b		       85 81		      STA	GRP0Cache	;3	;put that line as player graphic for the next line
    335  f14d		       c6 80		      DEC	Car0Line	;5	and decrement the line count
    336  f14f		       4c 5a f1 	      JMP	SkipActivateCar0	;3 save some cpu time
    337  f152				   FinishDrawCar0
    338  f152
    339  f152				   CheckActivateCar0		;9 max
    340  f152		       c0 0a		      CPY	#CAR_0_Y	;2
    341  f154		       d0 04		      BNE	SkipActivateCar0	;2
    342  f156		       a9 07		      LDA	#CAR_SIZE	;2
    343  f158		       85 80		      STA	Car0Line	;3
    344  f15a				   SkipActivateCar0		;EndDrawCar0Block
    345  f15a
    346  f15a		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    347  f15c		       85 08		      STA	COLUPF	;3  
    348  f15e
    349  f15e							;STA WSYNC ;61
    350  f15e
    351  f15e		       98		      TYA		;2
    352  f15f		       45 86		      EOR	FrameCount0	;3
    353  f161		       29 01		      AND	#%00000001	;2
    354  f163		       f0 6c		      BEQ	DrawTraffic4	;2,4
    355  f165							;NOP
    356  f165
    357  f165							;Will set the initial value for PF1Cache
    358  f165				   DrawTraffic1 		; 
    359  f165		       98		      TYA		; 2
    360  f166		       18		      CLC		; 2 
    361  f167		       65 95		      ADC	TrafficOffset1 + 1	;3
    362  f169		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    363  f16b		       b0 05		      BCS	EorOffsetWithCarry	; 4 max if branch max, 2 otherwise
    364  f16d		       45 96		      EOR	TrafficOffset1 + 2	; 2
    365  f16f		       4c 74 f1 	      JMP	AfterEorOffsetWithCarry	; 3
    366  f172				   EorOffsetWithCarry
    367  f172		       45 97		      EOR	TrafficOffset1 + 3	; 3
    368  f174				   AfterEorOffsetWithCarry		;18
    369  f174		       aa		      TAX		;2
    370  f175		       bd 00 fe 	      LDA	AesTable,X	; 4
    371  f178		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    372  f17a		       b0 05		      BCS	EraseTraffic1	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    373  f17c		       a9 60		      LDA	#%01100000	;2
    374  f17e		       4c 83 f1 	      JMP	StoreTraffic1	;3
    375  f181				   EraseTraffic1
    376  f181		       a9 00		      LDA	#0	;2
    377  f183				   StoreTraffic1
    378  f183		       85 83		      STA	PF1Cache	;3
    379  f185				   FinishDrawTraffic1
    380  f185							;36 worse, 35 best
    381  f185
    382  f185				   DrawTraffic2 		;
    383  f185		       98		      TYA		; 2
    384  f186		       18		      CLC		; 2 
    385  f187		       65 99		      ADC	TrafficOffset2 + 1	;3
    386  f189		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    387  f18b		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    388  f18d		       45 9a		      EOR	TrafficOffset2 + 2	; 2
    389  f18f		       4c 94 f1 	      JMP	AfterEorOffsetWithCarry2	; 3
    390  f192				   EorOffsetWithCarry2
    391  f192		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    392  f194				   AfterEorOffsetWithCarry2		;18
    393  f194		       aa		      TAX		;2
    394  f195		       bd 00 fe 	      LDA	AesTable,X	; 4
    395  f198		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    396  f19a		       b0 06		      BCS	FinishDrawTraffic2	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    397  f19c		       a5 83		      LDA	PF1Cache	;3
    398  f19e		       09 0c		      ORA	#%00001100	;2
    399  f1a0		       85 83		      STA	PF1Cache	;3
    400  f1a2				   FinishDrawTraffic2
    401  f1a2							;36 cyles worse case!
    402  f1a2
    403  f1a2							;STA WSYNC ;65 / 137
    404  f1a2
    405  f1a2				   DrawTraffic3 		; PF2 is shared with odd and even lines, needs specific logic to erase
    406  f1a2		       98		      TYA		; 2
    407  f1a3		       18		      CLC		; 2 
    408  f1a4		       65 9d		      ADC	TrafficOffset3 + 1	;3
    409  f1a6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    410  f1a8		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    411  f1aa		       45 9e		      EOR	TrafficOffset3 + 2	; 2
    412  f1ac		       4c b1 f1 	      JMP	AfterEorOffsetWithCarry3	; 3
    413  f1af				   EorOffsetWithCarry3
    414  f1af		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    415  f1b1				   AfterEorOffsetWithCarry3		; 18
    416  f1b1		       aa		      TAX		;2
    417  f1b2		       bd 00 fe 	      LDA	AesTable,X	; 4
    418  f1b5		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    419  f1b7		       90 09		      BCC	EnableTraffic3	; 4 with jump worse case, Less than, we draw, logic is reversed to save 3 cycles on the jmp
    420  f1b9				   EraseTraffic3		; Only have to erase PF2...
    421  f1b9		       a5 84		      LDA	PF2Cache	;3
    422  f1bb		       29 fe		      AND	#%11111110	;2
    423  f1bd		       85 84		      STA	PF2Cache	;3
    424  f1bf		       4c ce f1 	      JMP	FinishDrawTraffic3	;3
    425  f1c2				   EnableTraffic3
    426  f1c2		       a5 83		      LDA	PF1Cache	;3
    427  f1c4		       09 01		      ORA	#%00000001	;2
    428  f1c6		       85 83		      STA	PF1Cache	;3
    429  f1c8		       a5 84		      LDA	PF2Cache	;3
    430  f1ca		       09 01		      ORA	#%00000001	;2
    431  f1cc		       85 84		      STA	PF2Cache	;3
    432  f1ce				   FinishDrawTraffic3
    433  f1ce							;46 cyles worse case!
    434  f1ce
    435  f1ce		       4c 26 f2 	      JMP	WhileScanLoop
    436  f1d1
    437  f1d1				   DrawTraffic4 		;
    438  f1d1		       98		      TYA		; 2
    439  f1d2		       18		      CLC		; 2 
    440  f1d3		       65 a1		      ADC	TrafficOffset4 + 1	;3
    441  f1d5		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    442  f1d7		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    443  f1d9		       45 a2		      EOR	TrafficOffset4 + 2	; 2
    444  f1db		       4c e0 f1 	      JMP	AfterEorOffsetWithCarry4	; 3
    445  f1de				   EorOffsetWithCarry4
    446  f1de		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    447  f1e0				   AfterEorOffsetWithCarry4		;18
    448  f1e0		       aa		      TAX		;2
    449  f1e1		       bd 00 fe 	      LDA	AesTable,X	; 4
    450  f1e4		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    451  f1e6		       90 07		      BCC	EnableTraffic4	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    452  f1e8				   EraseTraffic4		; Is actually setting the initial state, but have to keep the traffic 3 value	
    453  f1e8		       a5 84		      LDA	PF2Cache	;2
    454  f1ea		       29 01		      AND	#%00000001	;2
    455  f1ec		       4c f5 f1 	      JMP	StoreTraffic4	;3
    456  f1ef				   EnableTraffic4
    457  f1ef		       a5 84		      LDA	PF2Cache	;3
    458  f1f1		       29 01		      AND	#%00000001	;2
    459  f1f3		       09 0c		      ORA	#%00001100	;2
    460  f1f5				   StoreTraffic4
    461  f1f5		       85 84		      STA	PF2Cache	;3	
    462  f1f7				   FinishDrawTraffic4
    463  f1f7							;39 max
    464  f1f7
    465  f1f7
    466  f1f7							;SLEEP 80
    467  f1f7				   DrawTraffic5 		;
    468  f1f7		       98		      TYA		; 2
    469  f1f8		       18		      CLC		; 2 
    470  f1f9		       65 a5		      ADC	TrafficOffset5 + 1	;3
    471  f1fb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    472  f1fd		       b0 05		      BCS	EorOffsetWithCarry5	; 4 max if branch max, 2 otherwise
    473  f1ff		       45 a6		      EOR	TrafficOffset5 + 2	; 2
    474  f201		       4c 06 f2 	      JMP	AfterEorOffsetWithCarry5	; 3
    475  f204				   EorOffsetWithCarry5
    476  f204		       45 a7		      EOR	TrafficOffset5 + 3	; 3
    477  f206				   AfterEorOffsetWithCarry5		;18
    478  f206		       aa		      TAX		;2
    479  f207		       bd 00 fe 	      LDA	AesTable,X	; 4
    480  f20a		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    481  f20c		       b0 06		      BCS	FinishDrawTraffic5	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    482  f20e		       a5 84		      LDA	PF2Cache	;3
    483  f210		       09 60		      ORA	#%01100000	;2
    484  f212		       85 84		      STA	PF2Cache	;3	
    485  f214				   FinishDrawTraffic5
    486  f214							;36 max	
      0  f214					      SLEEP	36
      1  f214				   .CYCLES    SET	36
      2  f214
      3  f214				  -	      IF	.CYCLES < 2
      4  f214				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f214				  -	      ERR
      6  f214					      ENDIF
      7  f214
      8  f214				  -	      IF	.CYCLES & 1
      9  f214				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f214				  -	      nop	0
     11  f214				  -	      ELSE
     12  f214				  -	      bit	VSYNC
     13  f214				  -	      ENDIF
     14  f214				  -.CYCLES    SET	.CYCLES - 3
     15  f214					      ENDIF
     16  f214
     17  f214					      REPEAT	.CYCLES / 2
     18  f214		       ea		      nop
     17  f214					      REPEND
     18  f215		       ea		      nop
     17  f215					      REPEND
     18  f216		       ea		      nop
     17  f216					      REPEND
     18  f217		       ea		      nop
     17  f217					      REPEND
     18  f218		       ea		      nop
     17  f218					      REPEND
     18  f219		       ea		      nop
     17  f219					      REPEND
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     17  f21c					      REPEND
     18  f21d		       ea		      nop
     17  f21d					      REPEND
     18  f21e		       ea		      nop
     17  f21e					      REPEND
     18  f21f		       ea		      nop
     17  f21f					      REPEND
     18  f220		       ea		      nop
     17  f220					      REPEND
     18  f221		       ea		      nop
     17  f221					      REPEND
     18  f222		       ea		      nop
     17  f222					      REPEND
     18  f223		       ea		      nop
     17  f223					      REPEND
     18  f224		       ea		      nop
     17  f224					      REPEND
     18  f225		       ea		      nop
     19  f226					      REPEND
    488  f226
    489  f226
    490  f226							;STA WSYNC ;65 / 202 of 222
    491  f226
    492  f226				   WhileScanLoop
    493  f226		       88		      DEY		;2
    494  f227		       30 03		      BMI	FinishScanLoop	;2 or 3 ;two big Breach	
    495  f229		       4c 21 f1 	      JMP	ScanLoop	;3
    496  f22c				   FinishScanLoop		; 7 209 of 222
    497  f22c
    498  f22c
    499  f22c				   PrepareOverscan
    500  f22c		       a9 02		      LDA	#2
    501  f22e		       85 02		      STA	WSYNC
    502  f230		       85 01		      STA	VBLANK
    503  f232
    504  f232		       a9 25		      LDA	#37
    505  f234		       8d 96 02 	      STA	TIM64T
    506  f237							;LDA #0
    507  f237							;STA VSYNC Is it needed? Why is this here, I don't remember		
    508  f237
    509  f237							;Do more logic
    510  f237
    511  f237				   OverScanWait
    512  f237		       ad 84 02 	      LDA	INTIM
    513  f23a		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    514  f23c		       4c 20 f0 	      JMP	MainLoop
    515  f23f
    516  f23f
    517  fe00					      org	$FE00
    518  fe00				   AesTable
    519  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    520  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    521  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    522  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    523  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    524  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    525  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    526  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    527  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    528  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    529  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    530  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    531  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    532  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    533  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    534  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    535  ff00
    536  ff00							; From FF00 to FFFB (122 bytes) to use here
    537  ff00
    538  ff00				   CarSprite		; Upside down
    539  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    540  ff01		       ff		      .byte.b	#%11111111
    541  ff02		       24		      .byte.b	#%00100100
    542  ff03		       bd		      .byte.b	#%10111101
    543  ff04		       3c		      .byte.b	#%00111100
    544  ff05		       bd		      .byte.b	#%10111101
    545  ff06		       3c		      .byte.b	#%00111100
    546  ff07
    547  ff07
    548  ff07				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    549  ff07		       00		      .byte.b	#$00	;  Trafic0 L
    550  ff08		       00		      .byte.b	#$00	;  Trafic0 H
    551  ff09		       a0		      .byte.b	#$A0	;  Trafic1 L
    552  ff0a		       00		      .byte.b	#$00	;  Trafic1 H
    553  ff0b		       ea		      .byte.b	#$EA	;  Trafic2 L
    554  ff0c		       00		      .byte.b	#$00	;  Trafic2 H
    555  ff0d		       00		      .byte.b	#$00	;  Trafic3 L
    556  ff0e		       01		      .byte.b	#$01	;  Trafic3 H
    557  ff0f		       a0		      .byte.b	#$A0	;  Trafic4 L
    558  ff10		       01		      .byte.b	#$01	;  Trafic4 H
    559  ff11		       c0		      .byte.b	#$C0	;  Trafic5 L
    560  ff12		       01		      .byte.b	#$01	;  Trafic5 H
    561  ff13
    562  ff13
    563  fffc					      org	$FFFC
    564  fffc		       00 f0		      .word.w	Start
    565  fffe		       00 f0		      .word.w	Start
