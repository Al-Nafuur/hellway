------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000
     12  f000		       00 07	   CAR_SIZE   =	7
     13  f000		       00 07	   TRAFFIC_LINE_COUNT =	7
     14  f000		       00 0a	   CAR_0_Y    =	10
     15  f000							;16 bit precision
     16  f000							;640 max speed!
     17  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     18  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     19  f000		       00 00	   CAR_MIN_SPEED_H =	0
     20  f000		       00 00	   CAR_MIN_SPEED_L =	0
     21  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     22  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     23  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 04	   BREAK_SPEED =	4
     26  f000							;For now, will use in aal rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000
     28  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     29  f000
     30  f000		       00 34	   TRAFFIC_COLOR =	$34
     31  f000		       00 81	   SCORE_BACKGROUND_COLOR =	$81
     32  f000		       00 0f	   SCORE_FONT_COLOR =	$0F
     33  f000
     34  f000							;memory	
     35  f000		       00 80	   Car0Line   =	$80
     36  f000
     37  f000		       00 81	   GRP0Cache  =	$81
     38  f000		       00 82	   PF0Cache   =	$82
     39  f000		       00 83	   PF1Cache   =	$83
     40  f000		       00 84	   PF2Cache   =	$84
     41  f000
     42  f000		       00 86	   FrameCount0 =	$86	;
     43  f000		       00 87	   FrameCount1 =	$87	;
     44  f000
     45  f000		       00 88	   Car0SpeedL =	$88
     46  f000		       00 89	   Car0SpeedH =	$89
     47  f000
     48  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     49  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     50  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     51  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     52  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     53  f000		       00 a4	   TrafficOffset5 =	$A4	; Traffic 1 $A5 $A6 (24 bit) $A7 is cache
     54  f000		       00 a8	   TrafficOffset6 =	$A8	; Traffic 1 $A9 $A0 (24 bit) $AA is cache
     55  f000
     56  f000							;Temporary variables, multiple uses
     57  f000		       00 b0	   Tmp0       =	$B0
     58  f000		       00 b1	   Tmp1       =	$B1
     59  f000		       00 b2	   Tmp2       =	$B2
     60  f000
     61  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     62  f000
     63  f000		       00 d0	   ScoreD0    =	$D0
     64  f000		       00 d1	   ScoreD1    =	$D1
     65  f000		       00 d2	   ScoreD2    =	$D2
     66  f000		       00 d3	   ScoreD3    =	$D3
     67  f000		       00 d4	   ScoreD4    =	$D4
     68  f000		       00 d5	   ScoreD5    =	$D5
     69  f000		       00 d6	   ScoreD6    =	$D6
     70  f000		       00 d7	   ScoreD7    =	$D7
     71  f000		       00 d8	   ScoreD8    =	$D8
     72  f000		       00 d9	   ScoreD9    =	$D9
     73  f000
     74  f000							;generic start up stuff, put zero in all...
     75  f000				   Start
     76  f000		       78		      SEI
     77  f001		       d8		      CLD
     78  f002		       a2 ff		      LDX	#$FF
     79  f004		       9a		      TXS
     80  f005		       a9 00		      LDA	#0
     81  f007				   ClearMem
     82  f007		       95 00		      STA	0,X
     83  f009		       ca		      DEX
     84  f00a		       d0 fb		      BNE	ClearMem
     85  f00c
     86  f00c							;Setting some variables...
     87  f00c
     88  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     89  f00e		       85 06		      STA	COLUP0
     90  f010
     91  f010		       a9 85		      LDA	#PLAYER_2_COLOR
     92  f012		       85 07		      STA	COLUP1
     93  f014
     94  f014							;Loop ?
     95  f014		       a9 20		      LDA	#$20
     96  f016		       85 96		      STA	TrafficOffset1 + 2
     97  f018		       a9 40		      LDA	#$40
     98  f01a		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
     99  f01c		       a9 60		      LDA	#$60
    100  f01e		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
    101  f020		       a9 80		      LDA	#$80
    102  f022		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
    103  f024		       a9 a0		      LDA	#$A0
    104  f026		       85 a6		      STA	TrafficOffset5 + 2	;Initial Y Position
    105  f028		       a9 c0		      LDA	#$C0
    106  f02a		       85 aa		      STA	TrafficOffset6 + 2	;Initial Y Position
    107  f02c
    108  f02c		       ad 13 ff 	      LDA	TrafficSpeeds + 6 * 2	; Same as the line he is in.
    109  f02f		       85 88		      STA	Car0SpeedL
    110  f031
    111  f031
    112  f031							;VSYNC time
    113  f031				   MainLoop
    114  f031		       a9 02		      LDA	#2
    115  f033		       85 00		      STA	VSYNC
    116  f035		       85 02		      STA	WSYNC
    117  f037		       85 02		      STA	WSYNC
    118  f039							;Cool, can put code here! It removed the black line on top
    119  f039							;Make Objects move in the X axys
    120  f039		       85 2a		      STA	HMOVE	;2
    121  f03b							;This must be done after a WSync, otherwise it is impossible to predict the X position
    122  f03b		       a5 c0		      LDA	GameStatus	;3
    123  f03d		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    124  f03f		       f0 13		      BEQ	DoNotSetPlayerX	;3
    125  f041							;Do something better with this 32 cycles
      0  f041					      SLEEP	33	; Maybe fine position with hmove...
      1  f041				   .CYCLES    SET	33
      2  f041
      3  f041				  -	      IF	.CYCLES < 2
      4  f041				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f041				  -	      ERR
      6  f041					      ENDIF
      7  f041
      8  f041					      IF	.CYCLES & 1
      9  f041				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f041				  -	      nop	0
     11  f041					      ELSE
     12  f041		       24 00		      bit	VSYNC
     13  f043					      ENDIF
     14  f043				   .CYCLES    SET	.CYCLES - 3
     15  f043					      ENDIF
     16  f043
     17  f043					      REPEAT	.CYCLES / 2
     18  f043		       ea		      nop
     17  f043					      REPEND
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     17  f047					      REPEND
     18  f048		       ea		      nop
     17  f048					      REPEND
     18  f049		       ea		      nop
     17  f049					      REPEND
     18  f04a		       ea		      nop
     17  f04a					      REPEND
     18  f04b		       ea		      nop
     17  f04b					      REPEND
     18  f04c		       ea		      nop
     17  f04c					      REPEND
     18  f04d		       ea		      nop
     17  f04d					      REPEND
     18  f04e		       ea		      nop
     17  f04e					      REPEND
     18  f04f		       ea		      nop
     17  f04f					      REPEND
     18  f050		       ea		      nop
     17  f050					      REPEND
     18  f051		       ea		      nop
     19  f052					      REPEND
    127  f052		       85 10		      STA	RESP0	;3
    128  f054
    129  f054				   DoNotSetPlayerX
    130  f054
    131  f054		       85 02		      STA	WSYNC
    132  f056		       a9 2b		      LDA	#43	; We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    133  f058		       8d 96 02 	      STA	TIM64T
    134  f05b		       a9 00		      LDA	#0
    135  f05d		       85 00		      STA	VSYNC
    136  f05f
    137  f05f							;Read Fire Button before, will make it start the game for now.
    138  f05f		       a5 0c		      LDA	INPT4
    139  f061		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    140  f063		       a5 c0		      LDA	GameStatus
    141  f065		       09 80		      ORA	#%10000000
    142  f067		       85 c0		      STA	GameStatus
    143  f069				   SkipGameStart
    144  f069
    145  f069				   CountFrame
    146  f069		       e6 86		      INC	FrameCount0	; Used to alternate lines
    147  f06b		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    148  f06d		       e6 87		      INC	FrameCount1	; Still not used
    149  f06f				   SkipIncFC1
    150  f06f
    151  f06f							;Does not update the game if not running
    152  f06f		       a5 c0		      LDA	GameStatus	;3
    153  f071		       49 80		      EOR	#%10000000	;2 game is running...
    154  f073		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    155  f075		       4c 2a f1 	      JMP	SkipUpdateLogic
    156  f078
    157  f078				   ContinueWithGameLogic
    158  f078
    159  f078							; for left and right, we're gonna 
    160  f078							; set the horizontal speed, and then do
    161  f078							; a single HMOVE.  We'll use X to hold the
    162  f078							; horizontal speed, then store it in the 
    163  f078							; appropriate register
    164  f078
    165  f078							;assum horiz speed will be zero
    166  f078
    167  f078							;Begin read dpad
    168  f078		       a2 00		      LDX	#0
    169  f07a
    170  f07a		       a9 40		      LDA	#%01000000	;Left
    171  f07c		       2c 80 02 	      BIT	SWCHA
    172  f07f		       d0 02		      BNE	SkipMoveLeft
    173  f081		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    174  f083				   SkipMoveLeft
    175  f083
    176  f083		       a9 80		      LDA	#%10000000	;Right
    177  f085		       2c 80 02 	      BIT	SWCHA
    178  f088		       d0 02		      BNE	SkipMoveRight
    179  f08a		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    180  f08c				   SkipMoveRight
    181  f08c
    182  f08c		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    183  f08e
    184  f08e
    185  f08e							;Acelerates / breaks the car
    186  f08e		       a9 10		      LDA	#%00010000	;UP in controller
    187  f090		       2c 80 02 	      BIT	SWCHA
    188  f093		       d0 21		      BNE	SkipAccelerate
    189  f095
    190  f095							;Adds speed
    191  f095		       18		      CLC
    192  f096		       a5 88		      LDA	Car0SpeedL
    193  f098		       69 01		      ADC	#ACCELERATE_SPEED
    194  f09a		       85 88		      STA	Car0SpeedL
    195  f09c		       a5 89		      LDA	Car0SpeedH
    196  f09e		       69 00		      ADC	#0
    197  f0a0		       85 89		      STA	Car0SpeedH
    198  f0a2
    199  f0a2							;Checks if already max
    200  f0a2		       c9 02		      CMP	#CAR_MAX_SPEED_H
    201  f0a4		       90 10		      BCC	SkipAccelerate	; less than my max speed
    202  f0a6		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    203  f0a8							;High bit is max, compare the low
    204  f0a8		       a5 88		      LDA	Car0SpeedL
    205  f0aa		       c9 80		      CMP	#CAR_MAX_SPEED_L
    206  f0ac		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    207  f0ae							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    208  f0ae
    209  f0ae				   ResetToMaxSpeed		; Speed is more, or is already max
    210  f0ae		       a9 02		      LDA	#CAR_MAX_SPEED_H
    211  f0b0		       85 89		      STA	Car0SpeedH
    212  f0b2		       a9 80		      LDA	#CAR_MAX_SPEED_L
    213  f0b4		       85 88		      STA	Car0SpeedL
    214  f0b6
    215  f0b6				   SkipAccelerate
    216  f0b6
    217  f0b6				   Break
    218  f0b6		       a9 20		      LDA	#%00100000	;Down in controller
    219  f0b8		       2c 80 02 	      BIT	SWCHA
    220  f0bb		       d0 26		      BNE	SkipBreak
    221  f0bd
    222  f0bd							;Decrease speed
    223  f0bd		       38		      SEC
    224  f0be		       a5 88		      LDA	Car0SpeedL
    225  f0c0		       e9 04		      SBC	#BREAK_SPEED
    226  f0c2		       85 88		      STA	Car0SpeedL
    227  f0c4		       a5 89		      LDA	Car0SpeedH
    228  f0c6		       e9 00		      SBC	#0
    229  f0c8		       85 89		      STA	Car0SpeedH
    230  f0ca
    231  f0ca							;Checks if is min speed
    232  f0ca		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    233  f0cc		       c9 00		      CMP	#CAR_MIN_SPEED_H
    234  f0ce		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    235  f0d0		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    236  f0d2
    237  f0d2				   CompareLBreakSpeed
    238  f0d2		       a5 88		      LDA	Car0SpeedL
    239  f0d4		       c9 00		      CMP	#CAR_MIN_SPEED_L
    240  f0d6		       90 03		      BCC	ResetMinSpeed	; Less than memory
    241  f0d8		       4c e3 f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    242  f0db
    243  f0db				   ResetMinSpeed
    244  f0db		       a9 00		      LDA	#CAR_MIN_SPEED_H
    245  f0dd		       85 89		      STA	Car0SpeedH
    246  f0df		       a9 00		      LDA	#CAR_MIN_SPEED_L
    247  f0e1		       85 88		      STA	Car0SpeedL
    248  f0e3				   SkipBreak
    249  f0e3
    250  f0e3							;Updates all offsets 24 bits
    251  f0e3		       a2 00		      LDX	#0	; Memory Offset 24 bit
    252  f0e5		       a0 00		      LDY	#0	; Line Speeds 16 bits
    253  f0e7				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    254  f0e7		       38		      SEC
    255  f0e8		       a5 88		      LDA	Car0SpeedL
    256  f0ea		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    257  f0ed		       85 b0		      STA	Tmp0
    258  f0ef		       c8		      INY
    259  f0f0		       a5 89		      LDA	Car0SpeedH
    260  f0f2		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    261  f0f5		       85 b1		      STA	Tmp1
    262  f0f7		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    263  f0f9		       e9 00		      SBC	#0
    264  f0fb		       85 b2		      STA	Tmp2
    265  f0fd
    266  f0fd
    267  f0fd							;Adds the result
    268  f0fd		       18		      CLC
    269  f0fe		       a5 b0		      LDA	Tmp0
    270  f100		       75 90		      ADC	TrafficOffset0,X
    271  f102		       95 90		      STA	TrafficOffset0,X
    272  f104		       e8		      INX
    273  f105		       a5 b1		      LDA	Tmp1
    274  f107		       75 90		      ADC	TrafficOffset0,X
    275  f109		       95 90		      STA	TrafficOffset0,X
    276  f10b		       e8		      INX
    277  f10c		       a5 b2		      LDA	Tmp2	; Carry
    278  f10e		       75 90		      ADC	TrafficOffset0,X
    279  f110		       95 90		      STA	TrafficOffset0,X
    280  f112		       e8		      INX
    281  f113		       38		      SEC
    282  f114		       69 00		      ADC	#0	;Increment by one
    283  f116		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    284  f118
    285  f118
    286  f118				   PrepareNextUpdateLoop
    287  f118		       c8		      INY
    288  f119		       e8		      INX
    289  f11a		       e0 1c		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    290  f11c		       d0 c9		      BNE	UpdateOffsets
    291  f11e
    292  f11e				   TestCollision		;
    293  f11e							; see if car0 and playfield collide, and change the background color if so
    294  f11e		       a9 80		      LDA	#%10000000
    295  f120		       24 02		      BIT	CXP0FB
    296  f122		       f0 04		      BEQ	NoCollision	;skip if not hitting...
    297  f124		       a5 86		      LDA	FrameCount0	;must be a hit! Change rand color bg
    298  f126		       85 09		      STA	COLUBK	;and store as the bgcolor
    299  f128				   NoCollision
    300  f128		       85 2c		      STA	CXCLR	;reset the collision detection for next frame
    301  f12a
    302  f12a				   SkipUpdateLogic
    303  f12a
    304  f12a							;DELETE THIS!
    305  f12a		       a9 09		      LDA	#<N1 + #SCORE_SIZE -1
    306  f12c		       85 d0		      STA	ScoreD0
    307  f12e		       85 d1		      STA	ScoreD1
    308  f130		       85 d2		      STA	ScoreD2
    309  f132		       85 d3		      STA	ScoreD3
    310  f134		       85 d4		      STA	ScoreD4
    311  f136
    312  f136		       a9 0e		      LDA	#<N2 + #SCORE_SIZE -1
    313  f138		       85 d5		      STA	ScoreD5
    314  f13a		       85 d6		      STA	ScoreD6
    315  f13c		       85 d7		      STA	ScoreD7
    316  f13e		       85 d8		      STA	ScoreD8
    317  f140		       85 d9		      STA	ScoreD9
    318  f142							;END DELETE THIS
    319  f142
    320  f142		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    321  f144		       85 09		      STA	COLUBK
    322  f146		       a9 0f		      LDA	#SCORE_FONT_COLOR
    323  f148		       85 08		      STA	COLUPF
    324  f14a		       20 16 f3 	      JSR	ClearPF
    325  f14d		       a9 02		      LDA	#%00000010	; Score mode
    326  f14f		       85 0a		      STA	CTRLPF
    327  f151		       a0 04		      LDY	#SCORE_SIZE -1
    328  f153
    329  f153		       a5 86		      LDA	FrameCount0	;3
    330  f155		       29 01		      AND	#%00000001	;2
    331  f157		       f0 0b		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    332  f159				   LeftScoreOn
    333  f159		       a9 0f		      LDA	#SCORE_FONT_COLOR
    334  f15b		       85 07		      STA	COLUP1
    335  f15d		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    336  f15f		       85 06		      STA	COLUP0
    337  f161		       4c 6c f1 	      JMP	WaitForVblankEnd
    338  f164				   RightScoreOn
    339  f164		       a9 0f		      LDA	#SCORE_FONT_COLOR
    340  f166		       85 06		      STA	COLUP0
    341  f168		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    342  f16a		       85 07		      STA	COLUP1
    343  f16c
    344  f16c
    345  f16c							; After here we are going to update the screen, No more heavy code
    346  f16c				   WaitForVblankEnd
    347  f16c		       ad 84 02 	      LDA	INTIM
    348  f16f		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    349  f171		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline?
    350  f173		       85 01		      STA	VBLANK
    351  f175
    352  f175				   ScoreLoop
    353  f175		       85 02		      STA	WSYNC
    354  f177
    355  f177		       a5 82		      LDA	PF0Cache	;3 Move to a macro?
    356  f179		       85 0d		      STA	PF0	;3
    357  f17b
    358  f17b		       a5 83		      LDA	PF1Cache	;3
    359  f17d		       85 0e		      STA	PF1	;3
    360  f17f
    361  f17f		       a5 84		      LDA	PF2Cache	;3
    362  f181		       85 0f		      STA	PF2	;3
    363  f183
    364  f183		       84 b0		      STY	Tmp0	; Keep Y Value, will be use to alternate text left and right
    365  f185		       a2 00		      LDX	#0	; LeftScoreOffset
    366  f187
    367  f187		       a5 86		      LDA	FrameCount0	;3
    368  f189		       29 01		      AND	#%00000001	;2
    369  f18b		       f0 02		      BEQ	DrawScore
    370  f18d				   RightScoreOffset
    371  f18d		       a2 05		      LDX	#5	; Points to D5 6 7...
    372  f18f
    373  f18f				   DrawScore
    374  f18f		       b4 d0		      LDY	ScoreD0,X	; 3
    375  f191		       b9 00 fd 	      LDA	Font,Y	;4
    376  f194		       85 82		      STA	PF0Cache	;3
    377  f196		       d6 d0		      DEC	ScoreD0,X	;5 Can only DEC with X
    378  f198							;14
    379  f198
    380  f198		       b4 d1		      LDY	ScoreD1,X	; 3
    381  f19a		       b9 00 fd 	      LDA	Font,Y	;4
    382  f19d		       0a		      ASL		;2
    383  f19e		       0a		      ASL		;2
    384  f19f		       0a		      ASL		;2
    385  f1a0		       0a		      ASL		;2
    386  f1a1		       85 83		      STA	PF1Cache	;3
    387  f1a3		       d6 d1		      DEC	ScoreD1,X	;5
    388  f1a5							;23
    389  f1a5
    390  f1a5		       85 02		      STA	WSYNC
    391  f1a7
    392  f1a7		       b4 d2		      LDY	ScoreD2,X	; 3
    393  f1a9		       b9 00 fd 	      LDA	Font,Y	;4
    394  f1ac		       29 0f		      AND	#%00001111
    395  f1ae		       05 83		      ORA	PF1Cache	;3
    396  f1b0		       85 83		      STA	PF1Cache	;3
    397  f1b2		       d6 d2		      DEC	ScoreD2,X	;5
    398  f1b4							;18
    399  f1b4
    400  f1b4		       b4 d3		      LDY	ScoreD3,X	; 3
    401  f1b6		       b9 00 fd 	      LDA	Font,Y	;4
    402  f1b9		       29 f0		      AND	#%11110000
    403  f1bb		       85 84		      STA	PF2Cache	;3
    404  f1bd		       d6 d3		      DEC	ScoreD3,X	;5
    405  f1bf							;15
    406  f1bf
    407  f1bf		       b4 d4		      LDY	ScoreD4,X	; 3
    408  f1c1		       b9 00 fd 	      LDA	Font,Y	;4
    409  f1c4		       4a		      LSR		;2
    410  f1c5		       4a		      LSR		;2
    411  f1c6		       4a		      LSR		;2
    412  f1c7		       4a		      LSR		;2
    413  f1c8		       05 84		      ORA	PF2Cache	;3
    414  f1ca		       85 84		      STA	PF2Cache	;3
    415  f1cc		       d6 d4		      DEC	ScoreD4,X	;5
    416  f1ce							;26
    417  f1ce
    418  f1ce		       a4 b0		      LDY	Tmp0	; Restore the current line
    419  f1d0		       88		      DEY
    420  f1d1		       10 a2		      BPL	ScoreLoop
    421  f1d3
    422  f1d3							;STA WSYNC
    423  f1d3
    424  f1d3		       20 25 f3 	      JSR	LoadPF
    425  f1d6		       85 02		      STA	WSYNC
    426  f1d8		       85 02		      STA	WSYNC	; Do stuff?
    427  f1da		       85 02		      STA	WSYNC
    428  f1dc
    429  f1dc		       a9 1c		      LDA	#PLAYER_1_COLOR
    430  f1de		       85 06		      STA	COLUP0
    431  f1e0		       20 16 f3 	      JSR	ClearPF
    432  f1e3
    433  f1e3				   PrepareForTraffic
    434  f1e3		       a9 01		      LDA	#%00000001
    435  f1e5		       85 0a		      STA	CTRLPF
    436  f1e7							;19 cycles worse case before the VSync 
    437  f1e7
    438  f1e7		       20 16 f3 	      JSR	ClearPF	;30
    439  f1ea							;Traffic colour
    440  f1ea		       a9 34		      LDA	#TRAFFIC_COLOR
    441  f1ec		       85 08		      STA	COLUPF
    442  f1ee
    443  f1ee		       a0 3b		      LDY	#SCREEN_SIZE - 5	;2 #63 ; (Score)
    444  f1f0
    445  f1f0		       a9 00		      LDA	#BACKGROUND_COLOR	;2 Make it in the very end, so we have one mor nice blue line
    446  f1f2		       85 09		      STA	COLUBK	;3
    447  f1f4
    448  f1f4							;main scanline loop...
    449  f1f4				   ScanLoop
    450  f1f4		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    451  f1f6
    452  f1f6							;Start of next line!			
    453  f1f6				   DrawCache		;24 Is the last line going to the top of the next frame?
    454  f1f6
    455  f1f6		       a5 82		      LDA	PF0Cache	;3
    456  f1f8		       85 0d		      STA	PF0	;3
    457  f1fa
    458  f1fa		       a5 81		      LDA	GRP0Cache	;3 ;buffer was set during last scanline
    459  f1fc		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    460  f1fe
    461  f1fe		       a5 83		      LDA	PF1Cache	;3
    462  f200		       85 0e		      STA	PF1	;3
    463  f202
    464  f202		       a5 84		      LDA	PF2Cache	;3
    465  f204		       85 0f		      STA	PF2	;3
    466  f206
    467  f206				   DrawTraffic0 		; 16 max, 14 min, traffic 0 is the border
    468  f206		       98		      TYA		;2
    469  f207		       18		      CLC		;2
    470  f208		       65 91		      ADC	TrafficOffset0 + 1	; 3
    471  f20a		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    472  f20c		       f0 05		      BEQ	EraseTraffic0	; 2
    473  f20e		       a9 70		      LDA	#%01110000	; 2
    474  f210		       4c 15 f2 	      JMP	StoreTraffic0	;3
    475  f213				   EraseTraffic0
    476  f213		       a9 00		      LDA	#0	; 2
    477  f215				   StoreTraffic0
    478  f215		       85 82		      STA	PF0Cache	;3
    479  f217				   SkipDrawTraffic0
    480  f217
    481  f217				   BeginDrawCar0Block		;20 is the max, since if draw, does not check active
    482  f217		       a6 80		      LDX	Car0Line	;3 check the visible player line...
    483  f219		       f0 0a		      BEQ	FinishDrawCar0	;2	skip the drawing if its zero...
    484  f21b				   DrawCar0
    485  f21b		       bd ff fe 	      LDA	CarSprite-1,X	;4 (no page cross) otherwise, load the correct line from CarSprite
    486  f21e							;section below... it's off by 1 though, since at zero
    487  f21e							;we stop drawing
    488  f21e		       85 81		      STA	GRP0Cache	;3	;put that line as player graphic for the next line
    489  f220		       c6 80		      DEC	Car0Line	;5	and decrement the line count
    490  f222							;STA WSYNC
    491  f222		       4c 2d f2 	      JMP	SkipActivateCar0	;3 save some cpu time
    492  f225				   FinishDrawCar0
    493  f225
    494  f225				   CheckActivateCar0		;9 max
    495  f225		       c0 0a		      CPY	#CAR_0_Y	;2
    496  f227		       d0 04		      BNE	SkipActivateCar0	;2
    497  f229		       a9 07		      LDA	#CAR_SIZE	;2
    498  f22b		       85 80		      STA	Car0Line	;3
    499  f22d							;STA WSYNC
    500  f22d				   SkipActivateCar0		;EndDrawCar0Block
    501  f22d
    502  f22d							;STA WSYNC ; 3 71 max
    503  f22d
    504  f22d		       98		      TYA		;2
    505  f22e		       45 86		      EOR	FrameCount0	;3
    506  f230		       29 01		      AND	#%00000001	;2
    507  f232		       f0 5d		      BEQ	DrawTraffic4	;2,4
    508  f234							;NOP
    509  f234							; LDA #TRAFFIC_COLOR ;2
    510  f234							; STA COLUPF ;3
    511  f234
    512  f234							;Will set the initial value for PF1Cache
    513  f234				   DrawTraffic1 		; 
    514  f234		       98		      TYA		; 2
    515  f235		       18		      CLC		; 2 
    516  f236		       65 95		      ADC	TrafficOffset1 + 1	;3
    517  f238		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    518  f23a		       b0 05		      BCS	EorOffsetWithCarry	; 4 max if branch max, 2 otherwise
    519  f23c		       45 96		      EOR	TrafficOffset1 + 2	; 2
    520  f23e		       4c 43 f2 	      JMP	AfterEorOffsetWithCarry	; 3
    521  f241				   EorOffsetWithCarry
    522  f241		       45 97		      EOR	TrafficOffset1 + 3	; 3
    523  f243				   AfterEorOffsetWithCarry		;18
    524  f243		       aa		      TAX		;2
    525  f244		       bd 00 fe 	      LDA	AesTable,X	; 4
    526  f247		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    527  f249		       b0 05		      BCS	EraseTraffic1	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    528  f24b		       a9 c0		      LDA	#%11000000	;2
    529  f24d		       4c 52 f2 	      JMP	StoreTraffic1	;3
    530  f250				   EraseTraffic1
    531  f250		       a9 00		      LDA	#0	;2
    532  f252				   StoreTraffic1
    533  f252		       85 83		      STA	PF1Cache	;3
    534  f254				   FinishDrawTraffic1
    535  f254							;36 worse, 35 best
    536  f254
    537  f254				   DrawTraffic2 		;
    538  f254		       98		      TYA		; 2
    539  f255		       18		      CLC		; 2 
    540  f256		       65 99		      ADC	TrafficOffset2 + 1	;3
    541  f258		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    542  f25a		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    543  f25c		       45 9a		      EOR	TrafficOffset2 + 2	; 2
    544  f25e		       4c 63 f2 	      JMP	AfterEorOffsetWithCarry2	; 3
    545  f261				   EorOffsetWithCarry2
    546  f261		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    547  f263				   AfterEorOffsetWithCarry2		;18
    548  f263		       aa		      TAX		;2
    549  f264		       bd 00 fe 	      LDA	AesTable,X	; 4
    550  f267		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    551  f269		       b0 06		      BCS	FinishDrawTraffic2	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    552  f26b		       a5 83		      LDA	PF1Cache	;3
    553  f26d		       09 18		      ORA	#%00011000	;2
    554  f26f		       85 83		      STA	PF1Cache	;3
    555  f271				   FinishDrawTraffic2
    556  f271							;36 cyles worse case!
    557  f271
    558  f271							;STA WSYNC ;65 / 137
    559  f271
    560  f271				   DrawTraffic3 		; PF2 is shared with odd and even lines, needs specific logic to erase
    561  f271		       98		      TYA		; 2
    562  f272		       18		      CLC		; 2 
    563  f273		       65 9d		      ADC	TrafficOffset3 + 1	;3
    564  f275		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    565  f277		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    566  f279		       45 9e		      EOR	TrafficOffset3 + 2	; 2
    567  f27b		       4c 80 f2 	      JMP	AfterEorOffsetWithCarry3	; 3
    568  f27e				   EorOffsetWithCarry3
    569  f27e		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    570  f280				   AfterEorOffsetWithCarry3		; 18
    571  f280		       aa		      TAX		;2
    572  f281		       bd 00 fe 	      LDA	AesTable,X	; 4
    573  f284		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    574  f286		       b0 06		      BCS	FinishDrawTraffic3	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    575  f288		       a5 83		      LDA	PF1Cache	;3
    576  f28a		       09 03		      ORA	#%00000011	;2
    577  f28c		       85 83		      STA	PF1Cache	;3
    578  f28e				   FinishDrawTraffic3
    579  f28e							;36 cyles worse case!
    580  f28e
    581  f28e		       4c eb f2 	      JMP	WhileScanLoop	; 3
    582  f291
    583  f291				   DrawTraffic4 		;
    584  f291		       98		      TYA		; 2
    585  f292		       18		      CLC		; 2 
    586  f293		       65 a1		      ADC	TrafficOffset4 + 1	;3
    587  f295		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    588  f297		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    589  f299		       45 a2		      EOR	TrafficOffset4 + 2	; 2
    590  f29b		       4c a0 f2 	      JMP	AfterEorOffsetWithCarry4	; 3
    591  f29e				   EorOffsetWithCarry4
    592  f29e		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    593  f2a0				   AfterEorOffsetWithCarry4		;18
    594  f2a0		       aa		      TAX		;2
    595  f2a1		       bd 00 fe 	      LDA	AesTable,X	; 4
    596  f2a4		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    597  f2a6		       b0 05		      BCS	EraseTraffic4	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    598  f2a8		       a9 06		      LDA	#%00000110	;2
    599  f2aa		       4c af f2 	      JMP	StoreTraffic4	;3
    600  f2ad				   EraseTraffic4
    601  f2ad		       a9 00		      LDA	#0	;2
    602  f2af				   StoreTraffic4
    603  f2af		       85 84		      STA	PF2Cache	;3
    604  f2b1				   FinishDrawTraffic4
    605  f2b1							;36 max
    606  f2b1
    607  f2b1
    608  f2b1							;SLEEP 80
    609  f2b1				   DrawTraffic5 		;
    610  f2b1		       98		      TYA		; 2
    611  f2b2		       18		      CLC		; 2 
    612  f2b3		       65 a5		      ADC	TrafficOffset5 + 1	;3
    613  f2b5		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    614  f2b7		       b0 05		      BCS	EorOffsetWithCarry5	; 4 max if branch max, 2 otherwise
    615  f2b9		       45 a6		      EOR	TrafficOffset5 + 2	; 2
    616  f2bb		       4c c0 f2 	      JMP	AfterEorOffsetWithCarry5	; 3
    617  f2be				   EorOffsetWithCarry5
    618  f2be		       45 a7		      EOR	TrafficOffset5 + 3	; 3
    619  f2c0				   AfterEorOffsetWithCarry5		;18
    620  f2c0		       aa		      TAX		;2
    621  f2c1		       bd 00 fe 	      LDA	AesTable,X	; 4
    622  f2c4		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    623  f2c6		       b0 06		      BCS	FinishDrawTraffic5	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    624  f2c8		       a5 84		      LDA	PF2Cache	;3
    625  f2ca		       09 30		      ORA	#%00110000	;2
    626  f2cc		       85 84		      STA	PF2Cache	;3	
    627  f2ce				   FinishDrawTraffic5
    628  f2ce
    629  f2ce				   DrawTraffic6 		;
    630  f2ce		       98		      TYA		; 2
    631  f2cf		       18		      CLC		; 2 
    632  f2d0		       65 a9		      ADC	TrafficOffset6 + 1	;3
    633  f2d2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    634  f2d4		       b0 05		      BCS	EorOffsetWithCarry6	; 4 max if branch max, 2 otherwise
    635  f2d6		       45 aa		      EOR	TrafficOffset6 + 2	; 2
    636  f2d8		       4c dd f2 	      JMP	AfterEorOffsetWithCarry6	; 3
    637  f2db				   EorOffsetWithCarry6
    638  f2db		       45 ab		      EOR	TrafficOffset6 + 3	; 3
    639  f2dd				   AfterEorOffsetWithCarry6		;18
    640  f2dd		       aa		      TAX		;2
    641  f2de		       bd 00 fe 	      LDA	AesTable,X	; 4
    642  f2e1		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    643  f2e3		       b0 06		      BCS	FinishDrawTraffic6	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    644  f2e5		       a5 84		      LDA	PF2Cache	;3
    645  f2e7		       09 80		      ORA	#%10000000	;2
    646  f2e9		       85 84		      STA	PF2Cache	;3	
    647  f2eb				   FinishDrawTraffic6
    648  f2eb
    649  f2eb							;36 max	
    650  f2eb							;SLEEP 36
    651  f2eb
    652  f2eb
    653  f2eb							;STA WSYNC ;65 / 202 of 222
    654  f2eb
    655  f2eb				   WhileScanLoop
    656  f2eb		       88		      DEY		;2
    657  f2ec		       30 03		      BMI	FinishScanLoop	;2 or 3 ;two big Breach	
    658  f2ee		       4c f4 f1 	      JMP	ScanLoop	;3
    659  f2f1				   FinishScanLoop		; 7 209 of 222
    660  f2f1
    661  f2f1		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    662  f2f3		       a5 82		      LDA	PF0Cache	;3
    663  f2f5		       85 0d		      STA	PF0	;3
    664  f2f7
    665  f2f7		       a5 81		      LDA	GRP0Cache	;3 
    666  f2f9		       85 1b		      STA	GRP0	;3   
    667  f2fb
    668  f2fb		       a5 83		      LDA	PF1Cache	;3
    669  f2fd		       85 0e		      STA	PF1	;3
    670  f2ff
    671  f2ff		       a5 84		      LDA	PF2Cache	;3
    672  f301		       85 0f		      STA	PF2	;3
    673  f303
    674  f303							;42 cycles to use here
    675  f303
    676  f303				   PrepareOverscan
    677  f303		       a9 02		      LDA	#2
    678  f305		       85 02		      STA	WSYNC
    679  f307		       85 01		      STA	VBLANK
    680  f309
    681  f309		       a9 24		      LDA	#36	; one more line before overscan
    682  f30b		       8d 96 02 	      STA	TIM64T
    683  f30e							;LDA #0
    684  f30e							;STA VSYNC Is it needed? Why is this here, I don't remember		
    685  f30e
    686  f30e							;Do more logic
    687  f30e
    688  f30e				   OverScanWait
    689  f30e		       ad 84 02 	      LDA	INTIM
    690  f311		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    691  f313		       4c 31 f0 	      JMP	MainLoop
    692  f316
    693  f316				   ClearPF		; 26
    694  f316		       a9 00		      LDA	#0	;2
    695  f318		       85 0d		      STA	PF0	;3
    696  f31a		       85 0e		      STA	PF1	;3
    697  f31c		       85 0f		      STA	PF2	;3	
    698  f31e		       85 82		      STA	PF0Cache	;3
    699  f320		       85 83		      STA	PF1Cache	;3
    700  f322		       85 84		      STA	PF2Cache	;3 
    701  f324		       60		      RTS		;6
    702  f325
    703  f325				   LoadPF		; 24
    704  f325		       a5 82		      LDA	PF0Cache	;3
    705  f327		       85 0d		      STA	PF0	;3
    706  f329
    707  f329		       a5 83		      LDA	PF1Cache	;3
    708  f32b		       85 0e		      STA	PF1	;3
    709  f32d
    710  f32d		       a5 84		      LDA	PF2Cache	;3
    711  f32f		       85 0f		      STA	PF2	;3
    712  f331
    713  f331		       60		      RTS		;6
    714  f332
    715  f332							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
    716  fd00					      org	$FD00
    717  fd00				   Font
    718  fd00				   Space
    719  fd00		       00		      .byte.b	%0	;
    720  fd01		       00		      .byte.b	#0	;
    721  fd02		       00		      .byte.b	#0	;
    722  fd03		       00		      .byte.b	#0	;
    723  fd04		       00		      .byte.b	#0	;
    724  fd05				   N1
    725  fd05		       e7		      .byte.b	#%11100111	;
    726  fd06		       42		      .byte.b	#%01000010	; 
    727  fd07		       42		      .byte.b	#%01000010	; 
    728  fd08		       42		      .byte.b	#%01000010	; 
    729  fd09		       66		      .byte.b	#%01100110	;
    730  fd0a				   N2
    731  fd0a		       e7		      .byte.b	#%11100111	;
    732  fd0b		       24		      .byte.b	#%00100100	; 
    733  fd0c		       e7		      .byte.b	#%11100111	; 
    734  fd0d		       81		      .byte.b	#%10000001	; 
    735  fd0e		       e7		      .byte.b	#%11100111	;
    736  fd0f
    737  fe00					      org	$FE00
    738  fe00				   AesTable
    739  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    740  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    741  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    742  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    743  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    744  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    745  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    746  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    747  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    748  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    749  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    750  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    751  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    752  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    753  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    754  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    755  ff00
    756  ff00							; From FF00 to FFFB (122 bytes) to use here
    757  ff00
    758  ff00				   CarSprite		; Upside down
    759  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    760  ff01		       ff		      .byte.b	#%11111111
    761  ff02		       24		      .byte.b	#%00100100
    762  ff03		       bd		      .byte.b	#%10111101
    763  ff04		       3c		      .byte.b	#%00111100
    764  ff05		       bd		      .byte.b	#%10111101
    765  ff06		       3c		      .byte.b	#%00111100
    766  ff07
    767  ff07
    768  ff07				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    769  ff07		       00		      .byte.b	#$00	;  Trafic0 L
    770  ff08		       00		      .byte.b	#$00	;  Trafic0 H
    771  ff09		       0a		      .byte.b	#$0A	;  Trafic1 L
    772  ff0a		       01		      .byte.b	#$01	;  Trafic1 H
    773  ff0b		       e6		      .byte.b	#$E6	;  Trafic2 L
    774  ff0c		       00		      .byte.b	#$00	;  Trafic2 H
    775  ff0d		       c2		      .byte.b	#$C2	;  Trafic3 L
    776  ff0e		       00		      .byte.b	#$00	;  Trafic3 H
    777  ff0f		       9e		      .byte.b	#$9E	;  Trafic4 L
    778  ff10		       00		      .byte.b	#$00	;  Trafic4 H
    779  ff11		       7a		      .byte.b	#$7A	;  Trafic5 L
    780  ff12		       00		      .byte.b	#$00	;  Trafic5 H
    781  ff13		       56		      .byte.b	#$56	;  Trafic6 L
    782  ff14		       00		      .byte.b	#$00	;  Trafic6 H
    783  ff15
    784  ff15
    785  fffc					      org	$FFFC
    786  fffc		       00 f0		      .word.w	Start
    787  fffe		       00 f0		      .word.w	Start
