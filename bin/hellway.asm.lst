------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     13  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     14  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     15  f000
     16  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     17  f000							;16 bit precision
     18  f000							;640 max speed!
     19  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     20  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     21  f000		       00 00	   CAR_MIN_SPEED_H =	0
     22  f000		       00 00	   CAR_MIN_SPEED_L =	0
     23  f000		       00 01	   ACCELERATE_SPEED =	1
     24  f000		       00 0a	   BREAK_SPEED =	10
     25  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     26  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     27  f000
     28  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     29  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     30  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     31  f000
     32  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     33  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     34  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     35  f000
     36  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     37  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     38  f000		       00 99	   TRAFFIC_COLOR_INTENSE =	$99
     39  f000
     40  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     41  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     42  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     43  f000
     44  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     45  f000		       00 87	   SCORE_BACKGROUND_COLOR =	$87
     46  f000
     47  f000		       00 a5	   PLAYER1_COLOR =	$A5
     48  f000
     49  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     50  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     51  f000		       00 34	   SCORE_FONT_COLOR_BAD =	$34
     52  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     53  f000
     54  f000		       00 35	   PLAYER_0_X_START =	$35	;
     55  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     56  f000
     57  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     58  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     59  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     60  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	%00000111	; Every 8 frames
     61  f000
     62  f000		       00 3c	   SWITCHES_DEBOUNCE_TIME =	60	; Frames
     63  f000
     64  f000
     65  f000		       00 80	   GRP0Cache  =	$80
     66  f000		       00 81	   PF0Cache   =	$81
     67  f000		       00 82	   PF1Cache   =	$82
     68  f000		       00 83	   PF2Cache   =	$83
     69  f000		       00 84	   GRP1Cache  =	$84
     70  f000		       00 85	   ENABLCache =	$85
     71  f000		       00 86	   ENAM0Cache =	$86
     72  f000		       00 87	   ENAM1Cache =	$87
     73  f000
     74  f000		       00 8c	   FrameCount0 =	$8C	;
     75  f000		       00 8d	   FrameCount1 =	$8D	;
     76  f000
     77  f000		       00 8e	   Player0SpeedL =	$8E
     78  f000		       00 8f	   Player0SpeedH =	$8F
     79  f000
     80  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     81  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     82  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     83  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     84  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     85  f000
     86  f000							;Temporary variables, multiple uses
     87  f000		       00 b0	   Tmp0       =	$B0
     88  f000		       00 b1	   Tmp1       =	$B1
     89  f000		       00 b2	   Tmp2       =	$B2
     90  f000
     91  f000		       00 ba	   CollisionCounter =	$BA
     92  f000		       00 bb	   Player0X   =	$BB
     93  f000		       00 bc	   CountdownTimer =	$BC
     94  f000		       00 bd	   Traffic0Msb =	$BD
     95  f000		       00 be	   SwitchDebounceCounter =	$BE
     96  f000
     97  f000
     98  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
     99  f000		       00 c1	   TrafficChance =	$C1
    100  f000		       00 c2	   CheckpointTime =	$C2
    101  f000		       00 c3	   TrafficColor =	$C3
    102  f000		       00 c4	   CurrentDifficulty =	$C4
    103  f000
    104  f000		       00 d0	   ScoreD0    =	$D0
    105  f000		       00 d1	   ScoreD1    =	$D1
    106  f000		       00 d2	   ScoreD2    =	$D2
    107  f000		       00 d3	   ScoreD3    =	$D3
    108  f000		       00 d4	   ScoreD4    =	$D4
    109  f000		       00 d5	   ScoreFontColor =	$D5
    110  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    111  f000		       00 d7	   NextCheckpoint =	$D7
    112  f000
    113  f000
    114  f000							;generic start up stuff, put zero in all...
    115  f000				   BeforeStart		;All variables that are kept on game reset or select
    116  f000		       a0 00		      LDY	#0
    117  f002		       84 be		      STY	SwitchDebounceCounter
    118  f004
    119  f004				   Start
    120  f004		       78		      SEI
    121  f005		       d8		      CLD
    122  f006		       a2 ff		      LDX	#$FF
    123  f008		       9a		      TXS
    124  f009		       a9 00		      LDA	#0
    125  f00b				   ClearMem
    126  f00b		       e0 be		      CPX	#SwitchDebounceCounter
    127  f00d		       f0 02		      BEQ	SkipClean
    128  f00f		       95 00		      STA	0,X
    129  f011				   SkipClean
    130  f011		       ca		      DEX
    131  f012		       d0 f7		      BNE	ClearMem
    132  f014
    133  f014							;Setting some variables...
    134  f014
    135  f014		       85 02		      STA	WSYNC	;We will set player position
    136  f016		       a9 01		      LDA	#1
    137  f018		       85 94		      STA	TrafficOffset1 + 0	; So we can detect loop
    138  f01a		       a9 20		      LDA	#$20
    139  f01c		       85 96		      STA	TrafficOffset1 + 2
    140  f01e		       a9 40		      LDA	#$40
    141  f020		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
    142  f022		       a9 60		      LDA	#$60
    143  f024		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
    144  f026		       a9 80		      LDA	#$80
    145  f028		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
    146  f02a		       a9 a0		      LDA	#$A0
    147  f02c
    148  f02c		       ad 41 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    149  f02f		       85 8e		      STA	Player0SpeedL
    150  f031
      0  f031					      SLEEP	18
      1  f031				   .CYCLES    SET	18
      2  f031
      3  f031				  -	      IF	.CYCLES < 2
      4  f031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f031				  -	      ERR
      6  f031					      ENDIF
      7  f031
      8  f031				  -	      IF	.CYCLES & 1
      9  f031				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f031				  -	      nop	0
     11  f031				  -	      ELSE
     12  f031				  -	      bit	VSYNC
     13  f031				  -	      ENDIF
     14  f031				  -.CYCLES    SET	.CYCLES - 3
     15  f031					      ENDIF
     16  f031
     17  f031					      REPEAT	.CYCLES / 2
     18  f031		       ea		      nop
     17  f031					      REPEND
     18  f032		       ea		      nop
     17  f032					      REPEND
     18  f033		       ea		      nop
     17  f033					      REPEND
     18  f034		       ea		      nop
     17  f034					      REPEND
     18  f035		       ea		      nop
     17  f035					      REPEND
     18  f036		       ea		      nop
     17  f036					      REPEND
     18  f037		       ea		      nop
     17  f037					      REPEND
     18  f038		       ea		      nop
     17  f038					      REPEND
     18  f039		       ea		      nop
     19  f03a					      REPEND
    152  f03a		       85 10		      STA	RESP0
    153  f03c
    154  f03c		       a6 00		      LDX	0
    155  f03e		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    156  f041		       29 c0		      AND	#%11000000
    157  f043		       f0 0b		      BEQ	CallConfigureDifficulty
    158  f045		       e8		      INX
    159  f046		       c9 80		      CMP	#%10000000
    160  f048		       f0 06		      BEQ	CallConfigureDifficulty
    161  f04a		       e8		      INX
    162  f04b		       c9 40		      CMP	#%01000000
    163  f04d		       f0 01		      BEQ	CallConfigureDifficulty
    164  f04f		       e8		      INX
    165  f050
    166  f050				   CallConfigureDifficulty
    167  f050		       86 c4		      STX	CurrentDifficulty
    168  f052		       20 a4 f4 	      JSR	ConfigureDifficulty
    169  f055
    170  f055				   HPositioning
    171  f055		       85 02		      STA	WSYNC
    172  f057
    173  f057		       a9 30		      LDA	#%00110000	;2 Missile Size
    174  f059		       85 04		      STA	NUSIZ0	;3
    175  f05b		       85 05		      STA	NUSIZ1	;3
    176  f05d
    177  f05d		       a9 35		      LDA	#PLAYER_0_X_START	;2
    178  f05f		       85 bb		      STA	Player0X	;3
    179  f061
    180  f061		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    181  f063		       85 bc		      STA	CountdownTimer	;3
    182  f065
    183  f065		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    184  f067		       85 d7		      STA	NextCheckpoint
    185  f069
    186  f069		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f06b					      SLEEP	11	;
      1  f06b				   .CYCLES    SET	11
      2  f06b
      3  f06b				  -	      IF	.CYCLES < 2
      4  f06b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f06b				  -	      ERR
      6  f06b					      ENDIF
      7  f06b
      8  f06b					      IF	.CYCLES & 1
      9  f06b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f06b				  -	      nop	0
     11  f06b					      ELSE
     12  f06b		       24 00		      bit	VSYNC
     13  f06d					      ENDIF
     14  f06d				   .CYCLES    SET	.CYCLES - 3
     15  f06d					      ENDIF
     16  f06d
     17  f06d					      REPEAT	.CYCLES / 2
     18  f06d		       ea		      nop
     17  f06d					      REPEND
     18  f06e		       ea		      nop
     17  f06e					      REPEND
     18  f06f		       ea		      nop
     17  f06f					      REPEND
     18  f070		       ea		      nop
     19  f071					      REPEND
    188  f071		       85 11		      STA	RESP1
      0  f073					      SLEEP	2	;
      1  f073				   .CYCLES    SET	2
      2  f073
      3  f073				  -	      IF	.CYCLES < 2
      4  f073				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f073				  -	      ERR
      6  f073					      ENDIF
      7  f073
      8  f073				  -	      IF	.CYCLES & 1
      9  f073				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f073				  -	      nop	0
     11  f073				  -	      ELSE
     12  f073				  -	      bit	VSYNC
     13  f073				  -	      ENDIF
     14  f073				  -.CYCLES    SET	.CYCLES - 3
     15  f073					      ENDIF
     16  f073
     17  f073					      REPEAT	.CYCLES / 2
     18  f073		       ea		      nop
     19  f074					      REPEND
    190  f074		       85 14		      STA	RESBL
      0  f076					      SLEEP	2	;
      1  f076				   .CYCLES    SET	2
      2  f076
      3  f076				  -	      IF	.CYCLES < 2
      4  f076				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f076				  -	      ERR
      6  f076					      ENDIF
      7  f076
      8  f076				  -	      IF	.CYCLES & 1
      9  f076				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f076				  -	      nop	0
     11  f076				  -	      ELSE
     12  f076				  -	      bit	VSYNC
     13  f076				  -	      ENDIF
     14  f076				  -.CYCLES    SET	.CYCLES - 3
     15  f076					      ENDIF
     16  f076
     17  f076					      REPEAT	.CYCLES / 2
     18  f076		       ea		      nop
     19  f077					      REPEND
    192  f077		       85 12		      STA	RESM0
      0  f079					      SLEEP	2
      1  f079				   .CYCLES    SET	2
      2  f079
      3  f079				  -	      IF	.CYCLES < 2
      4  f079				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f079				  -	      ERR
      6  f079					      ENDIF
      7  f079
      8  f079				  -	      IF	.CYCLES & 1
      9  f079				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f079				  -	      nop	0
     11  f079				  -	      ELSE
     12  f079				  -	      bit	VSYNC
     13  f079				  -	      ENDIF
     14  f079				  -.CYCLES    SET	.CYCLES - 3
     15  f079					      ENDIF
     16  f079
     17  f079					      REPEAT	.CYCLES / 2
     18  f079		       ea		      nop
     19  f07a					      REPEND
    194  f07a		       85 13		      STA	RESM1
    195  f07c
    196  f07c		       a9 f0		      LDA	#$F0
    197  f07e		       85 24		      STA	HMBL
    198  f080		       85 22		      STA	HMM0
    199  f082		       85 23		      STA	HMM1
    200  f084		       85 02		      STA	WSYNC
    201  f086		       85 2a		      STA	HMOVE
    202  f088		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    203  f08a		       85 2b		      STA	HMCLR
    204  f08c
    205  f08c							;SLEEP 24
    206  f08c							;STA HMCLR
    207  f08c
    208  f08c							;VSYNC time
    209  f08c				   MainLoop
    210  f08c		       a9 02		      LDA	#2
    211  f08e		       85 00		      STA	VSYNC
    212  f090		       85 02		      STA	WSYNC
    213  f092		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    214  f094		       85 2a		      STA	HMOVE	;2
    215  f096							;This must be done after a WSync, otherwise it is impossible to predict the X position
    216  f096				   DoNotSetPlayerX
    217  f096
    218  f096		       85 02		      STA	WSYNC	;3
    219  f098		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    220  f09a		       8d 96 02 	      STA	TIM64T	;3	
    221  f09d		       a9 00		      LDA	#0	;2
    222  f09f		       85 00		      STA	VSYNC	;3	
    223  f0a1
    224  f0a1							;Read Fire Button before, will make it start the game for now.
    225  f0a1				   StartGame
    226  f0a1		       a5 0c		      LDA	INPT4	;3
    227  f0a3		       30 17		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    228  f0a5		       a5 c0		      LDA	GameStatus	;3
    229  f0a7		       d0 13		      BNE	SkipGameStart
    230  f0a9		       e6 c0		      INC	GameStatus
    231  f0ab		       a9 00		      LDA	#0	;
    232  f0ad		       85 8c		      STA	FrameCount0
    233  f0af		       85 8d		      STA	FrameCount1
    234  f0b1		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    235  f0b3		       85 d5		      STA	ScoreFontColor
    236  f0b5		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    237  f0b7		       85 d6		      STA	ScoreFontColorHoldChange
    238  f0b9		       4c d9 f0 	      JMP	SkipIncFC1	; Make the worse case stable
    239  f0bc				   SkipGameStart
    240  f0bc
    241  f0bc				   ReadSwitches
    242  f0bc		       a6 be		      LDX	SwitchDebounceCounter
    243  f0be		       d0 11		      BNE	DecrementSwitchDebounceCounter
    244  f0c0		       a9 01		      LDA	#%00000001
    245  f0c2		       2c 82 02 	      BIT	SWCHB
    246  f0c5		       d0 07		      BNE	SkipReset
    247  f0c7		       a9 3c		      LDA	#SWITCHES_DEBOUNCE_TIME
    248  f0c9		       85 be		      STA	SwitchDebounceCounter
    249  f0cb		       4c 04 f0 	      JMP	Start
    250  f0ce				   SkipReset
    251  f0ce		       4c d3 f0 	      JMP	EndReadSwitches
    252  f0d1				   DecrementSwitchDebounceCounter
    253  f0d1		       c6 be		      DEC	SwitchDebounceCounter
    254  f0d3				   EndReadSwitches
    255  f0d3
    256  f0d3				   CountFrame
    257  f0d3		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    258  f0d5		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    259  f0d7		       e6 8d		      INC	FrameCount1	; 5 Still not used
    260  f0d9				   SkipIncFC1
    261  f0d9
    262  f0d9							;Does not update the game if not running
    263  f0d9		       a5 c0		      LDA	GameStatus	;3
    264  f0db		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    265  f0dd		       4c 1c f2 	      JMP	SkipUpdateLogic
    266  f0e0				   ContinueWithGameLogic
    267  f0e0
    268  f0e0				   EverySecond		; 64 frames to be more precise
    269  f0e0		       a9 3f		      LDA	#%00111111
    270  f0e2		       25 8c		      AND	FrameCount0
    271  f0e4		       d0 06		      BNE	SkipEverySecondAction
    272  f0e6		       c5 bc		      CMP	CountdownTimer
    273  f0e8		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    274  f0ea		       c6 bc		      DEC	CountdownTimer
    275  f0ec				   SkipEverySecondAction
    276  f0ec
    277  f0ec
    278  f0ec
    279  f0ec				   BreakOnTimeOver		; Uses LDX as the breaking speed
    280  f0ec		       a2 00		      LDX	#0
    281  f0ee		       a5 bc		      LDA	CountdownTimer
    282  f0f0		       d0 08		      BNE	Break
    283  f0f2		       a5 8c		      LDA	FrameCount0
    284  f0f4		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    285  f0f6		       d0 02		      BNE	Break
    286  f0f8		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    287  f0fa
    288  f0fa				   Break
    289  f0fa		       a9 20		      LDA	#%00100000	;Down in controller
    290  f0fc		       2c 80 02 	      BIT	SWCHA
    291  f0ff		       d0 0b		      BNE	BreakNonZero
    292  f101		       a5 0c		      LDA	INPT4	;3
    293  f103		       10 05		      BPL	BreakWhileAccelerating
    294  f105		       a2 0a		      LDX	#BREAK_SPEED
    295  f107		       4c 0c f1 	      JMP	BreakNonZero
    296  f10a				   BreakWhileAccelerating		; Allow better control while breaking.
    297  f10a		       a2 05		      LDX	#BREAK_SPEED / 2
    298  f10c
    299  f10c				   BreakNonZero
    300  f10c		       e0 00		      CPX	#0
    301  f10e		       f0 2b		      BEQ	SkipBreak
    302  f110		       86 b0		      STX	Tmp0
    303  f112
    304  f112				   DecreaseSpeed
    305  f112		       38		      SEC
    306  f113		       a5 8e		      LDA	Player0SpeedL
    307  f115		       e5 b0		      SBC	Tmp0
    308  f117		       85 8e		      STA	Player0SpeedL
    309  f119		       a5 8f		      LDA	Player0SpeedH
    310  f11b		       e9 00		      SBC	#0
    311  f11d		       85 8f		      STA	Player0SpeedH
    312  f11f
    313  f11f				   CheckMinSpeed
    314  f11f		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    315  f121		       c9 00		      CMP	#CAR_MIN_SPEED_H
    316  f123		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    317  f125		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    318  f127
    319  f127				   CompareLBreakSpeed
    320  f127		       a5 8e		      LDA	Player0SpeedL
    321  f129		       c9 00		      CMP	#CAR_MIN_SPEED_L
    322  f12b		       90 03		      BCC	ResetMinSpeed	; Less than memory
    323  f12d		       4c 38 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    324  f130
    325  f130				   ResetMinSpeed
    326  f130		       a9 00		      LDA	#CAR_MIN_SPEED_H
    327  f132		       85 8f		      STA	Player0SpeedH
    328  f134		       a9 00		      LDA	#CAR_MIN_SPEED_L
    329  f136		       85 8e		      STA	Player0SpeedL
    330  f138
    331  f138				   SkipAccelerateIfBreaking
    332  f138		       4c 6b f1 	      JMP	SkipAccelerate
    333  f13b				   SkipBreak
    334  f13b
    335  f13b				   Acelerates
    336  f13b		       a5 bc		      LDA	CountdownTimer
    337  f13d		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    338  f13f		       a5 0c		      LDA	INPT4	;3
    339  f141		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    340  f143		       a9 10		      LDA	#%00010000	;UP in controller
    341  f145		       2c 80 02 	      BIT	SWCHA
    342  f148		       d0 21		      BNE	SkipAccelerate
    343  f14a
    344  f14a				   IncreaseCarSpeed
    345  f14a							;Adds speed
    346  f14a		       18		      CLC
    347  f14b		       a5 8e		      LDA	Player0SpeedL
    348  f14d		       69 01		      ADC	#ACCELERATE_SPEED
    349  f14f		       85 8e		      STA	Player0SpeedL
    350  f151		       a5 8f		      LDA	Player0SpeedH
    351  f153		       69 00		      ADC	#0
    352  f155		       85 8f		      STA	Player0SpeedH
    353  f157
    354  f157							;Checks if already max
    355  f157		       c9 02		      CMP	#CAR_MAX_SPEED_H
    356  f159		       90 10		      BCC	SkipAccelerate	; less than my max speed
    357  f15b		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    358  f15d							;High bit is max, compare the low
    359  f15d		       a5 8e		      LDA	Player0SpeedL
    360  f15f		       c9 80		      CMP	#CAR_MAX_SPEED_L
    361  f161		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    362  f163							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    363  f163
    364  f163				   ResetToMaxSpeed		; Speed is more, or is already max
    365  f163		       a9 02		      LDA	#CAR_MAX_SPEED_H
    366  f165		       85 8f		      STA	Player0SpeedH
    367  f167		       a9 80		      LDA	#CAR_MAX_SPEED_L
    368  f169		       85 8e		      STA	Player0SpeedL
    369  f16b				   SkipAccelerate
    370  f16b
    371  f16b							;Updates all offsets 24 bits
    372  f16b		       a2 00		      LDX	#0	; Memory Offset 24 bit
    373  f16d		       a0 00		      LDY	#0	; Line Speeds 16 bits
    374  f16f				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    375  f16f		       38		      SEC
    376  f170		       a5 8e		      LDA	Player0SpeedL
    377  f172		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    378  f175		       85 b0		      STA	Tmp0
    379  f177		       c8		      INY
    380  f178		       a5 8f		      LDA	Player0SpeedH
    381  f17a		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    382  f17d		       85 b1		      STA	Tmp1
    383  f17f		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    384  f181		       e9 00		      SBC	#0
    385  f183		       85 b2		      STA	Tmp2
    386  f185
    387  f185
    388  f185				   AddsTheResult
    389  f185		       18		      CLC
    390  f186		       a5 b0		      LDA	Tmp0
    391  f188		       75 90		      ADC	TrafficOffset0,X
    392  f18a		       95 90		      STA	TrafficOffset0,X
    393  f18c		       e8		      INX
    394  f18d		       a5 b1		      LDA	Tmp1
    395  f18f		       75 90		      ADC	TrafficOffset0,X
    396  f191		       95 90		      STA	TrafficOffset0,X
    397  f193		       e8		      INX
    398  f194		       a5 b2		      LDA	Tmp2	; Carry
    399  f196		       75 90		      ADC	TrafficOffset0,X
    400  f198		       95 90		      STA	TrafficOffset0,X
    401  f19a		       90 06		      BCC	CalculateOffsetCache
    402  f19c		       e0 02		      CPX	#2	;MSB offset 0
    403  f19e		       d0 02		      BNE	CalculateOffsetCache
    404  f1a0		       e6 bd		      INC	Traffic0Msb
    405  f1a2
    406  f1a2				   CalculateOffsetCache
    407  f1a2		       e8		      INX
    408  f1a3		       38		      SEC
    409  f1a4		       69 00		      ADC	#0	;Increment by one
    410  f1a6		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    411  f1a8
    412  f1a8				   PrepareNextUpdateLoop
    413  f1a8		       c8		      INY
    414  f1a9		       e8		      INX
    415  f1aa		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    416  f1ac		       d0 c1		      BNE	UpdateOffsets
    417  f1ae
    418  f1ae							;Until store the movemnt, LDX contains the value to be stored.
    419  f1ae				   TestCollision		;
    420  f1ae							; see if player0 colides with the rest
    421  f1ae		       a5 00		      LDA	CXM0P
    422  f1b0		       05 01		      ORA	CXM1P
    423  f1b2		       05 01		      ORA	CXM1P
    424  f1b4		       05 02		      ORA	CXP0FB
    425  f1b6		       05 07		      ORA	CXPPMM
    426  f1b8		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    427  f1ba		       f0 1f		      BEQ	NoCollision	;skip if not hitting...
    428  f1bc		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    429  f1be		       d0 1b		      BNE	NoCollision
    430  f1c0		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    431  f1c2		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    432  f1c4		       f0 15		      BEQ	NoCollision
    433  f1c6		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    434  f1c8		       85 ba		      STA	CollisionCounter	;and store as colision.
    435  f1ca		       a9 10		      LDA	#COLLISION_SPEED_L	;
    436  f1cc		       c5 8e		      CMP	Player0SpeedL
    437  f1ce		       b0 02		      BCS	SkipSetColisionSpeed
    438  f1d0		       85 8e		      STA	Player0SpeedL
    439  f1d2				   SkipSetColisionSpeed
    440  f1d2		       a9 00		      LDA	#0
    441  f1d4		       85 8f		      STA	Player0SpeedH
    442  f1d6		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    443  f1d8		       4c 18 f2 	      JMP	StoreHMove	; We keep position consistent
    444  f1db				   NoCollision
    445  f1db
    446  f1db				   DecrementCollision
    447  f1db		       a4 ba		      LDY	CollisionCounter
    448  f1dd		       f0 07		      BEQ	FinishDecrementCollision
    449  f1df		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    450  f1e1		       85 04		      STA	NUSIZ0
    451  f1e3		       88		      DEY
    452  f1e4		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    453  f1e6				   FinishDecrementCollision
    454  f1e6
    455  f1e6				   ResetPlayerSize
    456  f1e6		       d0 04		      BNE	FinishResetPlayerSize
    457  f1e8		       a9 30		      LDA	#%00110000
    458  f1ea		       85 04		      STA	NUSIZ0	;
    459  f1ec				   FinishResetPlayerSize
    460  f1ec
    461  f1ec				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    462  f1ec		       c0 01		      CPY	#1	; Last frame before reset
    463  f1ee		       d0 05		      BNE	SkipResetPlayerPosition
    464  f1f0		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    465  f1f2		       4c 18 f2 	      JMP	StoreHMove
    466  f1f5				   SkipResetPlayerPosition
    467  f1f5
    468  f1f5							; for left and right, we're gonna 
    469  f1f5							; set the horizontal speed, and then do
    470  f1f5							; a single HMOVE.  We'll use X to hold the
    471  f1f5							; horizontal speed, then store it in the 
    472  f1f5							; appropriate register
    473  f1f5				   PrepareReadXAxis
    474  f1f5		       a2 00		      LDX	#0
    475  f1f7		       a4 bb		      LDY	Player0X
    476  f1f9				   BeginReadLeft
    477  f1f9		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    478  f1fb		       a9 40		      LDA	#%01000000	;Left
    479  f1fd		       2c 80 02 	      BIT	SWCHA
    480  f200		       d0 07		      BNE	SkipMoveLeft
    481  f202		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    482  f204		       c6 bb		      DEC	Player0X
    483  f206		       4c 18 f2 	      JMP	StoreHMove	; Cannot move left and right...
    484  f209				   SkipMoveLeft
    485  f209				   BeginReadRight
    486  f209		       c0 36		      CPY	#PLAYER_0_MAX_X
    487  f20b		       f0 0b		      BEQ	SkipMoveRight	; At max already
    488  f20d		       a9 80		      LDA	#%10000000	;Right
    489  f20f		       2c 80 02 	      BIT	SWCHA
    490  f212		       d0 04		      BNE	SkipMoveRight
    491  f214		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    492  f216		       e6 bb		      INC	Player0X
    493  f218				   SkipMoveRight
    494  f218				   StoreHMove
    495  f218		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    496  f21a		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    497  f21c
    498  f21c
    499  f21c				   SkipUpdateLogic
    500  f21c		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    501  f21e		       85 09		      STA	COLUBK
    502  f220		       a5 d5		      LDA	ScoreFontColor
    503  f222		       85 08		      STA	COLUPF
    504  f224		       20 5d f4 	      JSR	ClearAll
    505  f227		       a9 02		      LDA	#%00000010	; Score mode
    506  f229		       85 0a		      STA	CTRLPF
    507  f22b		       a0 04		      LDY	#SCORE_SIZE - 1
    508  f22d		       a2 00		      LDX	#0
    509  f22f
    510  f22f		       a5 8c		      LDA	FrameCount0	;3
    511  f231		       29 01		      AND	#%00000001	;2
    512  f233		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    513  f235				   LeftScoreOn
    514  f235		       a5 d5		      LDA	ScoreFontColor
    515  f237		       85 07		      STA	COLUP1
    516  f239		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    517  f23b		       85 06		      STA	COLUP0
    518  f23d		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    519  f23f		       85 b1		      STA	Tmp1
    520  f241		       4c 50 f2 	      JMP	WaitForVblankEnd
    521  f244				   RightScoreOn
    522  f244		       a5 d5		      LDA	ScoreFontColor
    523  f246		       85 06		      STA	COLUP0
    524  f248		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    525  f24a		       85 07		      STA	COLUP1
    526  f24c		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    527  f24e		       85 b1		      STA	Tmp1
    528  f250
    529  f250
    530  f250							; After here we are going to update the screen, No more heavy code
    531  f250				   WaitForVblankEnd
    532  f250		       ad 84 02 	      LDA	INTIM
    533  f253		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    534  f255							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    535  f255		       85 01		      STA	VBLANK
    536  f257
    537  f257				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    538  f257		       85 02		      STA	WSYNC
    539  f259
    540  f259		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    541  f25b		       85 0d		      STA	PF0	;3
    542  f25d
    543  f25d		       a5 82		      LDA	PF1Cache	;3
    544  f25f		       85 0e		      STA	PF1	;3
    545  f261
    546  f261		       a5 83		      LDA	PF2Cache	;3
    547  f263		       85 0f		      STA	PF2	;3
    548  f265
    549  f265							;39
    550  f265				   DrawScore
    551  f265		       a6 d0		      LDX	ScoreD0	; 4
    552  f267		       bd 00 fd 	      LDA	Font,X	;4
    553  f26a		       85 81		      STA	PF0Cache	;3
    554  f26c		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    555  f26e							;17
    556  f26e
    557  f26e		       a6 d1		      LDX	ScoreD1	; 4
    558  f270		       bd 00 fd 	      LDA	Font,X	;4
    559  f273		       0a		      ASL		;2
    560  f274		       0a		      ASL		;2
    561  f275		       0a		      ASL		;2
    562  f276		       0a		      ASL		;2
    563  f277		       85 82		      STA	PF1Cache	;3
    564  f279		       c6 d1		      DEC	ScoreD1	;6
    565  f27b							;9 (After Wsync)
    566  f27b
    567  f27b		       a6 d2		      LDX	ScoreD2	; 4
    568  f27d		       bd 00 fd 	      LDA	Font,X	;4
    569  f280		       29 0f		      AND	#%00001111
    570  f282		       05 82		      ORA	PF1Cache	;3
    571  f284		       85 82		      STA	PF1Cache	;3
    572  f286		       c6 d2		      DEC	ScoreD2	;6
    573  f288							;20
    574  f288
    575  f288		       a6 d3		      LDX	ScoreD3	; 3
    576  f28a		       bd 00 fd 	      LDA	Font,X	;4
    577  f28d		       4a		      LSR		;2
    578  f28e		       4a		      LSR		;2
    579  f28f		       4a		      LSR		;2
    580  f290		       4a		      LSR		;2
    581  f291		       85 83		      STA	PF2Cache	;3
    582  f293		       c6 d3		      DEC	ScoreD3	;5
    583  f295							;23
    584  f295
    585  f295		       a6 d4		      LDX	ScoreD4	; 3
    586  f297		       bd 00 fd 	      LDA	Font,X	;4
    587  f29a		       29 f0		      AND	#%11110000
    588  f29c		       05 83		      ORA	PF2Cache	;3
    589  f29e		       85 83		      STA	PF2Cache	;3
    590  f2a0		       c6 d4		      DEC	ScoreD4	;5
    591  f2a2							;18
    592  f2a2
    593  f2a2		       88		      DEY		;2
    594  f2a3		       10 b2		      BPL	ScoreLoop	;4
    595  f2a5
    596  f2a5		       85 02		      STA	WSYNC
    597  f2a7
    598  f2a7		       20 82 f4 	      JSR	LoadAll
    599  f2aa
    600  f2aa		       85 02		      STA	WSYNC
    601  f2ac		       85 02		      STA	WSYNC
    602  f2ae
    603  f2ae				   PrepareForTraffic
    604  f2ae		       20 73 f4 	      JSR	ClearPF	; 32
    605  f2b1
    606  f2b1		       a9 31		      LDA	#%00110001	; Score mode
    607  f2b3		       85 0a		      STA	CTRLPF
    608  f2b5
    609  f2b5		       a5 c3		      LDA	TrafficColor	;2
    610  f2b7		       85 08		      STA	COLUPF
    611  f2b9
    612  f2b9		       a9 a5		      LDA	#PLAYER1_COLOR	;2
    613  f2bb		       85 07		      STA	COLUP1	;3
    614  f2bd
    615  f2bd		       a5 d5		      LDA	ScoreFontColor	;3
    616  f2bf		       85 06		      STA	COLUP0	;3
    617  f2c1
    618  f2c1		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    619  f2c3
    620  f2c3		       a9 03		      LDA	#BACKGROUND_COLOR	;2 
      0  f2c5					      SLEEP	11	; Make it in the very end, so we have one more nice blue line
      1  f2c5				   .CYCLES    SET	11
      2  f2c5
      3  f2c5				  -	      IF	.CYCLES < 2
      4  f2c5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2c5				  -	      ERR
      6  f2c5					      ENDIF
      7  f2c5
      8  f2c5					      IF	.CYCLES & 1
      9  f2c5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2c5				  -	      nop	0
     11  f2c5					      ELSE
     12  f2c5		       24 00		      bit	VSYNC
     13  f2c7					      ENDIF
     14  f2c7				   .CYCLES    SET	.CYCLES - 3
     15  f2c7					      ENDIF
     16  f2c7
     17  f2c7					      REPEAT	.CYCLES / 2
     18  f2c7		       ea		      nop
     17  f2c7					      REPEND
     18  f2c8		       ea		      nop
     17  f2c8					      REPEND
     18  f2c9		       ea		      nop
     17  f2c9					      REPEND
     18  f2ca		       ea		      nop
     19  f2cb					      REPEND
    622  f2cb		       85 09		      STA	COLUBK	;3
    623  f2cd
    624  f2cd
    625  f2cd							;main scanline loop...
    626  f2cd				   ScanLoop
    627  f2cd		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    628  f2cf
    629  f2cf							;Start of next line!			
    630  f2cf				   DrawCache		;36 Is the last line going to the top of the next frame?
    631  f2cf
    632  f2cf		       b9 00 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    633  f2d2		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    634  f2d4
    635  f2d4		       a5 82		      LDA	PF1Cache	;3
    636  f2d6		       85 0e		      STA	PF1	;3
    637  f2d8
    638  f2d8		       a5 84		      LDA	GRP1Cache	;3
    639  f2da		       85 1c		      STA	GRP1	;3
    640  f2dc
    641  f2dc		       a5 85		      LDA	ENABLCache
    642  f2de		       85 1f		      STA	ENABL
    643  f2e0
    644  f2e0		       a5 86		      LDA	ENAM0Cache
    645  f2e2		       85 1d		      STA	ENAM0
    646  f2e4
    647  f2e4		       a5 87		      LDA	ENAM1Cache
    648  f2e6		       85 1e		      STA	ENAM1
    649  f2e8
    650  f2e8		       a9 00		      LDA	#0	;2
    651  f2ea		       85 82		      STA	PF1Cache	;3
    652  f2ec		       85 84		      STA	GRP1Cache	;3
    653  f2ee		       85 85		      STA	ENABLCache	;3
    654  f2f0		       85 86		      STA	ENAM0Cache	;3
    655  f2f2		       85 87		      STA	ENAM1Cache	; 3
    656  f2f4
    657  f2f4							;BEQ DrawTraffic3
    658  f2f4				   DrawTraffic1 		; 33
    659  f2f4		       98		      TYA		; 2
    660  f2f5		       18		      CLC		; 2 
    661  f2f6		       65 95		      ADC	TrafficOffset1 + 1	;3
    662  f2f8		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    663  f2fa		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    664  f2fc		       45 96		      EOR	TrafficOffset1 + 2	; 3
    665  f2fe		       4c 03 f3 	      JMP	AfterEorOffsetWithCarry	; 3
    666  f301				   EorOffsetWithCarry
    667  f301		       45 97		      EOR	TrafficOffset1 + 3	; 3
    668  f303				   AfterEorOffsetWithCarry		;17
    669  f303		       aa		      TAX		;2
    670  f304		       bd 00 fe 	      LDA	AesTable,X	; 4
    671  f307		       c5 c1		      CMP	TrafficChance	;3
    672  f309		       b0 04		      BCS	FinishDrawTraffic1	; 2
    673  f30b		       a9 ff		      LDA	#$FF	;2
    674  f30d		       85 84		      STA	GRP1Cache	;3
    675  f30f				   FinishDrawTraffic1
    676  f30f
    677  f30f				   DrawTraffic2 		; 35
    678  f30f		       98		      TYA		; 2
    679  f310		       18		      CLC		; 2 
    680  f311		       65 99		      ADC	TrafficOffset2 + 1	;3
    681  f313		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    682  f315		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    683  f317		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    684  f319		       4c 1e f3 	      JMP	AfterEorOffsetWithCarry2	; 3
    685  f31c				   EorOffsetWithCarry2
    686  f31c		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    687  f31e				   AfterEorOffsetWithCarry2		;17
    688  f31e		       aa		      TAX		;2
    689  f31f		       bd 00 fe 	      LDA	AesTable,X	; 4
    690  f322		       c5 c1		      CMP	TrafficChance	;2
    691  f324		       b0 04		      BCS	FinishDrawTraffic2	; 2
    692  f326		       a9 02		      LDA	#%00000010	;2
    693  f328		       85 85		      STA	ENABLCache	;3
    694  f32a				   FinishDrawTraffic2
    695  f32a
    696  f32a							;STA WSYNC ;65 / 137
    697  f32a
    698  f32a							; LDA Tmp0 ; Flicker this line if drawing car
    699  f32a							; BEQ FinishDrawTraffic4
    700  f32a				   DrawTraffic3 		; 38
    701  f32a		       98		      TYA		; 2
    702  f32b		       18		      CLC		; 2 
    703  f32c		       65 9d		      ADC	TrafficOffset3 + 1	;3
    704  f32e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    705  f330		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    706  f332		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    707  f334		       4c 39 f3 	      JMP	AfterEorOffsetWithCarry3	; 3
    708  f337				   EorOffsetWithCarry3
    709  f337		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    710  f339				   AfterEorOffsetWithCarry3		;17
    711  f339		       aa		      TAX		;2
    712  f33a		       bd 00 fe 	      LDA	AesTable,X	; 4
    713  f33d		       c5 c1		      CMP	TrafficChance	;2
    714  f33f		       b0 04		      BCS	FinishDrawTraffic3	; 2 
    715  f341		       a9 02		      LDA	#%00000010	;2
    716  f343		       85 86		      STA	ENAM0Cache
    717  f345				   FinishDrawTraffic3
    718  f345
    719  f345				   DrawTraffic4 		; 35
    720  f345		       98		      TYA		; 2
    721  f346		       18		      CLC		; 2 
    722  f347		       65 a1		      ADC	TrafficOffset4 + 1	;3
    723  f349		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    724  f34b		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    725  f34d		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    726  f34f		       4c 54 f3 	      JMP	AfterEorOffsetWithCarry4	; 3
    727  f352				   EorOffsetWithCarry4
    728  f352		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    729  f354				   AfterEorOffsetWithCarry4		;17
    730  f354		       aa		      TAX		;2
    731  f355		       bd 00 fe 	      LDA	AesTable,X	; 4
    732  f358		       c5 c1		      CMP	TrafficChance	;2
    733  f35a		       b0 04		      BCS	FinishDrawTraffic4	; 2
    734  f35c		       a9 02		      LDA	#%00000010	;2
    735  f35e		       85 87		      STA	ENAM1Cache
    736  f360				   FinishDrawTraffic4
    737  f360
    738  f360				   DrawTraffic0 		; 24
    739  f360		       98		      TYA		;2
    740  f361		       18		      CLC		;2
    741  f362		       65 91		      ADC	TrafficOffset0 + 1	; 3
    742  f364		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    743  f366		       f0 04		      BEQ	SkipDrawTraffic0	; 2
    744  f368		       a9 ff		      LDA	#$FF	; 2
    745  f36a		       85 82		      STA	PF1Cache
    746  f36c
    747  f36c				   SkipDrawTraffic0
    748  f36c
    749  f36c				   WhileScanLoop
    750  f36c		       88		      DEY		;2
    751  f36d		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    752  f36f		       4c cd f2 	      JMP	ScanLoop	;3
    753  f372				   FinishScanLoop		; 7 209 of 222
    754  f372
    755  f372		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    756  f374		       20 82 f4 	      JSR	LoadAll
    757  f377		       85 02		      STA	WSYNC	; do stuff!
    758  f379		       85 02		      STA	WSYNC
    759  f37b		       85 02		      STA	WSYNC
    760  f37d							;42 cycles to use here
    761  f37d
    762  f37d				   PrepareOverscan
    763  f37d		       a9 02		      LDA	#2
    764  f37f		       85 02		      STA	WSYNC
    765  f381		       85 01		      STA	VBLANK
    766  f383
    767  f383		       a9 24		      LDA	#36	; one more line before overscan...
    768  f385		       8d 96 02 	      STA	TIM64T
    769  f388
    770  f388				   ProcessScoreFontColor
    771  f388		       a6 d6		      LDX	ScoreFontColorHoldChange
    772  f38a		       f0 06		      BEQ	ResetScoreFontColor
    773  f38c		       ca		      DEX
    774  f38d		       86 d6		      STX	ScoreFontColorHoldChange
    775  f38f		       4c 96 f3 	      JMP	SkipScoreFontColor
    776  f392				   ResetScoreFontColor
    777  f392		       a9 f9		      LDA	#SCORE_FONT_COLOR
    778  f394		       85 d5		      STA	ScoreFontColor
    779  f396				   SkipScoreFontColor
    780  f396
    781  f396				   IsGameOver
    782  f396		       a5 bc		      LDA	CountdownTimer
    783  f398		       05 8e		      ORA	Player0SpeedL
    784  f39a		       05 8f		      ORA	Player0SpeedH
    785  f39c		       d0 0b		      BNE	IsCheckpoint
    786  f39e		       a9 01		      LDA	#1
    787  f3a0		       85 d6		      STA	ScoreFontColorHoldChange
    788  f3a2		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    789  f3a4		       85 d5		      STA	ScoreFontColor
    790  f3a6		       4c db f3 	      JMP	SkipIsTimeOver
    791  f3a9
    792  f3a9				   IsCheckpoint
    793  f3a9		       a5 d7		      LDA	NextCheckpoint
    794  f3ab		       c5 92		      CMP	TrafficOffset0 + 2
    795  f3ad		       d0 20		      BNE	SkipIsCheckpoint
    796  f3af		       18		      CLC
    797  f3b0		       69 10		      ADC	#CHECKPOINT_INTERVAL
    798  f3b2		       85 d7		      STA	NextCheckpoint
    799  f3b4		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    800  f3b6		       85 d5		      STA	ScoreFontColor
    801  f3b8		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    802  f3ba		       85 d6		      STA	ScoreFontColorHoldChange
    803  f3bc		       a5 bc		      LDA	CountdownTimer
    804  f3be		       18		      CLC
    805  f3bf		       65 c2		      ADC	CheckpointTime
    806  f3c1		       85 bc		      STA	CountdownTimer
    807  f3c3		       90 04		      BCC	JumpSkipTimeOver
    808  f3c5		       a9 ff		      LDA	#$FF
    809  f3c7		       85 bc		      STA	CountdownTimer	; Does not overflow!
    810  f3c9				   JumpSkipTimeOver
    811  f3c9		       20 9b f4 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    812  f3cc		       4c db f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    813  f3cf				   SkipIsCheckpoint
    814  f3cf
    815  f3cf				   IsTimeOver
    816  f3cf		       a5 bc		      LDA	CountdownTimer
    817  f3d1		       d0 08		      BNE	SkipIsTimeOver
    818  f3d3		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    819  f3d5		       85 d6		      STA	ScoreFontColorHoldChange
    820  f3d7		       a9 34		      LDA	#SCORE_FONT_COLOR_BAD
    821  f3d9		       85 d5		      STA	ScoreFontColor
    822  f3db				   SkipIsTimeOver
    823  f3db
    824  f3db							;Could be done during on vblank to save this comparisson time (before draw score), 
    825  f3db							;but I am saving vblank cycles for now, in case of 2 players.
    826  f3db				   ChooseSide		; 
    827  f3db		       a5 8c		      LDA	FrameCount0	;3
    828  f3dd		       29 01		      AND	#%00000001	;2
    829  f3df		       f0 37		      BEQ	RightScoreWrite	; Half of the screen with the correct colors.
    830  f3e1
    831  f3e1				   LeftScoreWrite
    832  f3e1				   WriteDistance		;Not optimized yet, ugly code.
    833  f3e1
    834  f3e1				   Digit0Distance
    835  f3e1		       a5 91		      LDA	TrafficOffset0 + 1	;3
    836  f3e3		       29 f0		      AND	#%11110000	;2
    837  f3e5		       4a		      LSR		; 2
    838  f3e6		       4a		      LSR		; 2
    839  f3e7		       4a		      LSR		; 2
    840  f3e8		       4a		      LSR		; 2
    841  f3e9		       aa		      TAX		; 2
    842  f3ea		       bd 64 fd 	      LDA	FontLookup,X	;4
    843  f3ed		       85 d3		      STA	ScoreD3	;3
    844  f3ef
    845  f3ef				   Digit1Distance
    846  f3ef		       a5 92		      LDA	TrafficOffset0 + 2	;3
    847  f3f1		       29 0f		      AND	#%00001111	;2
    848  f3f3		       aa		      TAX		; 2
    849  f3f4		       bd 64 fd 	      LDA	FontLookup,X	;4 
    850  f3f7		       85 d2		      STA	ScoreD2	;3
    851  f3f9
    852  f3f9				   Digit2Distance
    853  f3f9		       a5 92		      LDA	TrafficOffset0 + 2	;3
    854  f3fb		       29 f0		      AND	#%11110000	;2
    855  f3fd		       4a		      LSR		; 2
    856  f3fe		       4a		      LSR		; 2
    857  f3ff		       4a		      LSR		; 2
    858  f400		       4a		      LSR		; 2
    859  f401		       aa		      TAX		; 2
    860  f402		       bd 64 fd 	      LDA	FontLookup,X	;4
    861  f405		       85 d1		      STA	ScoreD1	;3
    862  f407
    863  f407				   Digit3Distance
    864  f407		       a5 bd		      LDA	Traffic0Msb	;3
    865  f409		       29 0f		      AND	#%00001111	;2
    866  f40b		       aa		      TAX		; 2
    867  f40c		       bd 64 fd 	      LDA	FontLookup,X	;4 
    868  f40f		       85 d0		      STA	ScoreD0	;3
    869  f411
    870  f411		       a9 63		      LDA	#<Pipe + #SCORE_SIZE -1	;3
    871  f413		       85 d4		      STA	ScoreD4	;3
    872  f415				   EndDrawDistance
    873  f415		       4c 55 f4 	      JMP	RightScoreWriteEnd	;3
    874  f418
    875  f418				   RightScoreWrite
    876  f418				   Digit0Timer
    877  f418		       a5 bc		      LDA	CountdownTimer	;3
    878  f41a		       29 0f		      AND	#%00001111	;2
    879  f41c		       aa		      TAX		; 2
    880  f41d		       bd 64 fd 	      LDA	FontLookup,X	;4 
    881  f420		       85 d1		      STA	ScoreD1	;3
    882  f422
    883  f422				   Digit1Timer
    884  f422		       a5 bc		      LDA	CountdownTimer	;3
    885  f424		       29 f0		      AND	#%11110000	;2
    886  f426		       4a		      LSR		; 2
    887  f427		       4a		      LSR		; 2
    888  f428		       4a		      LSR		; 2
    889  f429		       4a		      LSR		; 2
    890  f42a		       aa		      TAX		; 2
    891  f42b		       bd 64 fd 	      LDA	FontLookup,X	;4
    892  f42e		       85 d0		      STA	ScoreD0	;3
    893  f430
    894  f430		       a9 63		      LDA	#<Pipe + #SCORE_SIZE -1	;3
    895  f432		       85 d2		      STA	ScoreD2	;3
    896  f434
    897  f434				   Digit0Speed
    898  f434		       a5 8e		      LDA	Player0SpeedL
    899  f436		       29 3c		      AND	#%00111100	;2 Discard the last bits
    900  f438		       4a		      LSR		; 2
    901  f439		       4a		      LSR		; 2
    902  f43a		       aa		      TAX		; 2
    903  f43b		       bd 64 fd 	      LDA	FontLookup,X	;4
    904  f43e		       85 d4		      STA	ScoreD4	;3
    905  f440
    906  f440				   Digit1Speed
    907  f440		       a5 8e		      LDA	Player0SpeedL
    908  f442		       29 c0		      AND	#%11000000	;2 Discard the last bits
    909  f444		       2a		      ROL		;First goes into carry
    910  f445		       2a		      ROL
    911  f446		       2a		      ROL
    912  f447		       85 b0		      STA	Tmp0
    913  f449		       a5 8f		      LDA	Player0SpeedH
    914  f44b		       0a		      ASL
    915  f44c		       0a		      ASL
    916  f44d		       05 b0		      ORA	Tmp0
    917  f44f		       aa		      TAX		; 2
    918  f450		       bd 64 fd 	      LDA	FontLookup,X	;4
    919  f453		       85 d3		      STA	ScoreD3	;3
    920  f455
    921  f455				   RightScoreWriteEnd
    922  f455
    923  f455				   OverScanWait
    924  f455		       ad 84 02 	      LDA	INTIM
    925  f458		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    926  f45a		       4c 8c f0 	      JMP	MainLoop
    927  f45d
    928  f45d				   Subroutines
    929  f45d
    930  f45d				   ClearAll		; 56
    931  f45d		       a9 00		      LDA	#0	;2
    932  f45f		       85 1c		      STA	GRP1	;3
    933  f461		       85 1f		      STA	ENABL	;3
    934  f463		       85 1d		      STA	ENAM0	;3
    935  f465		       85 1e		      STA	ENAM1
    936  f467		       85 84		      STA	GRP1Cache	;3
    937  f469		       85 85		      STA	ENABLCache	;3
    938  f46b		       85 86		      STA	ENAM0Cache	;3
    939  f46d		       85 87		      STA	ENAM1Cache	;3
    940  f46f		       20 75 f4 	      JSR	ClearPFSkipLDA0	; 30
    941  f472		       60		      RTS		;6
    942  f473
    943  f473				   ClearPF		; 26
    944  f473		       a9 00		      LDA	#0	;2
    945  f475				   ClearPFSkipLDA0
    946  f475		       85 0d		      STA	PF0	;3
    947  f477		       85 0e		      STA	PF1	;3
    948  f479		       85 0f		      STA	PF2	;3	
    949  f47b		       85 81		      STA	PF0Cache	;3
    950  f47d		       85 82		      STA	PF1Cache	;3
    951  f47f		       85 83		      STA	PF2Cache	;3 
    952  f481		       60		      RTS		;6
    953  f482
    954  f482				   LoadAll		; 36
    955  f482		       a5 81		      LDA	PF0Cache	;3
    956  f484		       85 0d		      STA	PF0	;3
    957  f486
    958  f486		       a5 82		      LDA	PF1Cache	;3
    959  f488		       85 0e		      STA	PF1	;3
    960  f48a
    961  f48a		       a5 83		      LDA	PF2Cache	;3
    962  f48c		       85 0f		      STA	PF2	;3
    963  f48e
    964  f48e		       a5 84		      LDA	GRP1Cache	;3
    965  f490		       85 1c		      STA	GRP1	;3
    966  f492
    967  f492		       a5 85		      LDA	ENABLCache	;3
    968  f494		       85 1f		      STA	ENABL	;3
    969  f496
    970  f496		       a5 86		      LDA	ENAM0Cache
    971  f498		       85 1d		      STA	ENAM0
    972  f49a
    973  f49a		       60		      RTS		;6
    974  f49b
    975  f49b				   NextDifficulty		;Could be inlined
    976  f49b		       a5 c4		      LDA	CurrentDifficulty
    977  f49d		       18		      CLC
    978  f49e		       69 01		      ADC	#1
    979  f4a0		       29 03		      AND	#%00000011	; 0 to 3
    980  f4a2		       85 c4		      STA	CurrentDifficulty
    981  f4a4
    982  f4a4				   ConfigureDifficulty
    983  f4a4		       a5 c4		      LDA	CurrentDifficulty
    984  f4a6		       f0 0b		      BEQ	ConfigureLightTraffic
    985  f4a8		       c9 01		      CMP	#1
    986  f4aa		       f0 10		      BEQ	ConfigureRegularTraffic
    987  f4ac		       c9 02		      CMP	#2
    988  f4ae		       f0 15		      BEQ	ConfigureIntenseTraffic
    989  f4b0		       4c ce f4 	      JMP	ConfigureRushHourTraffic
    990  f4b3
    991  f4b3				   ConfigureLightTraffic
    992  f4b3		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
    993  f4b5		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
    994  f4b7		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
    995  f4b9		       4c d4 f4 	      JMP	StoreTrafficChance
    996  f4bc				   ConfigureRegularTraffic
    997  f4bc		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
    998  f4be		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
    999  f4c0		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1000  f4c2		       4c d4 f4 	      JMP	StoreTrafficChance
   1001  f4c5				   ConfigureIntenseTraffic
   1002  f4c5		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1003  f4c7		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1004  f4c9		       a9 99		      LDA	#TRAFFIC_COLOR_INTENSE
   1005  f4cb		       4c d4 f4 	      JMP	StoreTrafficChance
   1006  f4ce				   ConfigureRushHourTraffic
   1007  f4ce		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1008  f4d0		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1009  f4d2		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1010  f4d4
   1011  f4d4				   StoreTrafficChance
   1012  f4d4		       86 c1		      STX	TrafficChance
   1013  f4d6		       84 c2		      STY	CheckpointTime
   1014  f4d8		       85 c3		      STA	TrafficColor
   1015  f4da
   1016  f4da		       60		      RTS
   1017  f4db
   1018  f4db							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   1019  fd00					      org	$FD00
   1020  fd00				   Font
   1021  fd00				   C0
   1022  fd00		       e7		      .byte.b	#%11100111	;
   1023  fd01		       a5		      .byte.b	#%10100101	; 
   1024  fd02		       a5		      .byte.b	#%10100101	; 
   1025  fd03		       a5		      .byte.b	#%10100101	; 
   1026  fd04		       e7		      .byte.b	#%11100111	;	
   1027  fd05				   C1
   1028  fd05		       e7		      .byte.b	#%11100111	;
   1029  fd06		       42		      .byte.b	#%01000010	; 
   1030  fd07		       42		      .byte.b	#%01000010	; 
   1031  fd08		       42		      .byte.b	#%01000010	; 
   1032  fd09		       66		      .byte.b	#%01100110	;
   1033  fd0a				   C2
   1034  fd0a		       e7		      .byte.b	#%11100111	;
   1035  fd0b		       24		      .byte.b	#%00100100	; 
   1036  fd0c		       e7		      .byte.b	#%11100111	; 
   1037  fd0d		       81		      .byte.b	#%10000001	; 
   1038  fd0e		       e7		      .byte.b	#%11100111	;
   1039  fd0f				   C3
   1040  fd0f		       e7		      .byte.b	#%11100111	;
   1041  fd10		       81		      .byte.b	#%10000001	; 
   1042  fd11		       e7		      .byte.b	#%11100111	; 
   1043  fd12		       81		      .byte.b	#%10000001	; 
   1044  fd13		       e7		      .byte.b	#%11100111	;
   1045  fd14				   C4
   1046  fd14		       81		      .byte.b	#%10000001	;
   1047  fd15		       81		      .byte.b	#%10000001	; 
   1048  fd16		       e7		      .byte.b	#%11100111	; 
   1049  fd17		       a5		      .byte.b	#%10100101	; 
   1050  fd18		       a5		      .byte.b	#%10100101	;
   1051  fd19				   C5
   1052  fd19		       e7		      .byte.b	#%11100111	;
   1053  fd1a		       81		      .byte.b	#%10000001	; 
   1054  fd1b		       e7		      .byte.b	#%11100111	; 
   1055  fd1c		       24		      .byte.b	#%00100100	; 
   1056  fd1d		       e7		      .byte.b	#%11100111	;
   1057  fd1e				   C6
   1058  fd1e		       e7		      .byte.b	#%11100111	;
   1059  fd1f		       a5		      .byte.b	#%10100101	; 
   1060  fd20		       e7		      .byte.b	#%11100111	; 
   1061  fd21		       24		      .byte.b	#%00100100	; 
   1062  fd22		       e7		      .byte.b	#%11100111	;
   1063  fd23				   C7
   1064  fd23		       81		      .byte.b	#%10000001	;
   1065  fd24		       81		      .byte.b	#%10000001	; 
   1066  fd25		       81		      .byte.b	#%10000001	; 
   1067  fd26		       81		      .byte.b	#%10000001	; 
   1068  fd27		       e7		      .byte.b	#%11100111	;
   1069  fd28				   C8
   1070  fd28		       e7		      .byte.b	#%11100111	;
   1071  fd29		       a5		      .byte.b	#%10100101	; 
   1072  fd2a		       e7		      .byte.b	#%11100111	; 
   1073  fd2b		       a5		      .byte.b	#%10100101	; 
   1074  fd2c		       e7		      .byte.b	#%11100111	;
   1075  fd2d				   C9
   1076  fd2d		       e7		      .byte.b	#%11100111	;
   1077  fd2e		       81		      .byte.b	#%10000001	; 
   1078  fd2f		       e7		      .byte.b	#%11100111	; 
   1079  fd30		       a5		      .byte.b	#%10100101	; 
   1080  fd31		       e7		      .byte.b	#%11100111	;
   1081  fd32				   CA
   1082  fd32		       a5		      .byte.b	#%10100101	;
   1083  fd33		       a5		      .byte.b	#%10100101	; 
   1084  fd34		       e7		      .byte.b	#%11100111	; 
   1085  fd35		       a5		      .byte.b	#%10100101	; 
   1086  fd36		       e7		      .byte.b	#%11100111	;
   1087  fd37				   CB
   1088  fd37		       66		      .byte.b	#%01100110	;
   1089  fd38		       a5		      .byte.b	#%10100101	; 
   1090  fd39		       66		      .byte.b	#%01100110	; 
   1091  fd3a		       a5		      .byte.b	#%10100101	;
   1092  fd3b		       66		      .byte.b	#%01100110	;
   1093  fd3c				   CC
   1094  fd3c		       e7		      .byte.b	#%11100111	;
   1095  fd3d		       24		      .byte.b	#%00100100	; 
   1096  fd3e		       24		      .byte.b	#%00100100	; 
   1097  fd3f		       24		      .byte.b	#%00100100	;
   1098  fd40		       e7		      .byte.b	#%11100111	;
   1099  fd41
   1100  fd41				   CD
   1101  fd41		       66		      .byte.b	#%01100110	;
   1102  fd42		       a5		      .byte.b	#%10100101	; 
   1103  fd43		       a5		      .byte.b	#%10100101	; 
   1104  fd44		       a5		      .byte.b	#%10100101	;
   1105  fd45		       66		      .byte.b	#%01100110	;
   1106  fd46
   1107  fd46				   CE
   1108  fd46		       e7		      .byte.b	#%11100111	;
   1109  fd47		       24		      .byte.b	#%00100100	; 
   1110  fd48		       e7		      .byte.b	#%11100111	; 
   1111  fd49		       24		      .byte.b	#%00100100	; 
   1112  fd4a		       e7		      .byte.b	#%11100111	;
   1113  fd4b
   1114  fd4b				   CF
   1115  fd4b		       24		      .byte.b	#%00100100	;
   1116  fd4c		       24		      .byte.b	#%00100100	; 
   1117  fd4d		       e7		      .byte.b	#%11100111	; 
   1118  fd4e		       24		      .byte.b	#%00100100	; 
   1119  fd4f		       e7		      .byte.b	#%11100111	;
   1120  fd50
   1121  fd50				   Space		; Moved from the beggining so 0 to F is fast to draw.
   1122  fd50		       00		      .byte.b	%0	;
   1123  fd51		       00		      .byte.b	#0	;
   1124  fd52		       00		      .byte.b	#0	;
   1125  fd53		       00		      .byte.b	#0	;
   1126  fd54		       00		      .byte.b	#0	;
   1127  fd55
   1128  fd55				   CS
   1129  fd55		       66		      .byte.b	#%01100110	;
   1130  fd56		       81		      .byte.b	#%10000001	; 
   1131  fd57		       42		      .byte.b	#%01000010	; 
   1132  fd58		       24		      .byte.b	#%00100100	; 
   1133  fd59		       c3		      .byte.b	#%11000011	;
   1134  fd5a
   1135  fd5a				   CT
   1136  fd5a		       42		      .byte.b	#%01000010	;
   1137  fd5b		       42		      .byte.b	#%01000010	; 
   1138  fd5c		       42		      .byte.b	#%01000010	; 
   1139  fd5d		       42		      .byte.b	#%01000010	; 
   1140  fd5e		       e7		      .byte.b	#%11100111	;
   1141  fd5f
   1142  fd5f				   Pipe
   1143  fd5f		       42		      .byte.b	#%01000010	;
   1144  fd60		       00		      .byte.b	#%00000000	; 
   1145  fd61		       42		      .byte.b	#%01000010	; 
   1146  fd62		       00		      .byte.b	#%00000000	; 
   1147  fd63		       42		      .byte.b	#%01000010	;
   1148  fd64
   1149  fd64				   FontLookup		; Very fast font lookup for dynamic values!
   1150  fd64		       04		      .byte.b	#<C0 + #SCORE_SIZE -1
   1151  fd65		       09		      .byte.b	#<C1 + #SCORE_SIZE -1
   1152  fd66		       0e		      .byte.b	#<C2 + #SCORE_SIZE -1
   1153  fd67		       13		      .byte.b	#<C3 + #SCORE_SIZE -1
   1154  fd68		       18		      .byte.b	#<C4 + #SCORE_SIZE -1
   1155  fd69		       1d		      .byte.b	#<C5 + #SCORE_SIZE -1
   1156  fd6a		       22		      .byte.b	#<C6 + #SCORE_SIZE -1
   1157  fd6b		       27		      .byte.b	#<C7 + #SCORE_SIZE -1
   1158  fd6c		       2c		      .byte.b	#<C8 + #SCORE_SIZE -1
   1159  fd6d		       31		      .byte.b	#<C9 + #SCORE_SIZE -1
   1160  fd6e		       36		      .byte.b	#<CA + #SCORE_SIZE -1
   1161  fd6f		       3b		      .byte.b	#<CB + #SCORE_SIZE -1
   1162  fd70		       40		      .byte.b	#<CC + #SCORE_SIZE -1
   1163  fd71		       45		      .byte.b	#<CD + #SCORE_SIZE -1
   1164  fd72		       4a		      .byte.b	#<CE + #SCORE_SIZE -1
   1165  fd73		       4f		      .byte.b	#<CF + #SCORE_SIZE -1
   1166  fd74
   1167  fd74
   1168  fe00					      org	$FE00
   1169  fe00				   AesTable
   1170  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   1171  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   1172  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   1173  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   1174  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   1175  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   1176  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   1177  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   1178  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   1179  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   1180  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   1181  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   1182  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   1183  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   1184  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   1185  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   1186  ff00
   1187  ff00							; From FF00 to FFFB (122 bytes) to use here
   1188  ff00
   1189  ff00				   CarSprite		; Upside down
   1190  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   1191  ff01		       7e		      .byte.b	#%01111110
   1192  ff02		       24		      .byte.b	#%00100100
   1193  ff03		       bd		      .byte.b	#%10111101
   1194  ff04		       3c		      .byte.b	#%00111100
   1195  ff05		       bd		      .byte.b	#%10111101
   1196  ff06		       3c		      .byte.b	#%00111100
   1197  ff07		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
   1198  ff39
   1199  ff39
   1200  ff39				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
   1201  ff39		       00		      .byte.b	#$00	;  Trafic0 L
   1202  ff3a		       00		      .byte.b	#$00	;  Trafic0 H
   1203  ff3b		       0a		      .byte.b	#$0A	;  Trafic1 L
   1204  ff3c		       01		      .byte.b	#$01	;  Trafic1 H
   1205  ff3d		       e6		      .byte.b	#$E6	;  Trafic2 L
   1206  ff3e		       00		      .byte.b	#$00	;  Trafic2 H
   1207  ff3f		       c2		      .byte.b	#$C2	;  Trafic3 L
   1208  ff40		       00		      .byte.b	#$00	;  Trafic3 H
   1209  ff41		       9e		      .byte.b	#$9E	;  Trafic4 L
   1210  ff42		       00		      .byte.b	#$00	;  Trafic4 H
   1211  ff43
   1212  ff43
   1213  fffc					      org	$FFFC
   1214  fffc		       04 f0		      .word.w	Start
   1215  fffe		       04 f0		      .word.w	Start
