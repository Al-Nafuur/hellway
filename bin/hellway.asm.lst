------- FILE hellway.asm LEVEL 1 PASS 3
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 0a	   BREAK_SPEED =	10
     26  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     28  f000
     29  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     30  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     31  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     32  f000
     33  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     34  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     35  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     36  f000
     37  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     38  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     39  f000		       00 f4	   TRAFFIC_COLOR_INTENSE =	$F4
     40  f000
     41  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     42  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     43  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     44  f000
     45  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     46  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     47  f000
     48  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     49  f000
     50  f000		       00 96	   PLAYER1_COLOR =	$96
     51  f000
     52  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     53  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     54  f000		       00 33	   SCORE_FONT_COLOR_BAD =	$33
     55  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     56  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     57  f000
     58  f000		       00 35	   PLAYER_0_X_START =	$35	;
     59  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     60  f000
     61  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     62  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     63  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     64  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	%00000111	; Every 8 frames
     65  f000
     66  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     67  f000
     68  f000		       00 00	   BLACK      =	$00	;
     69  f000
     70  f000		       00 0f	   MAX_GAME_MODE =	15
     71  f000
     72  f000		       00 08	   PARALLAX_SIZE =	8
     73  f000
     74  f000		       00 05	   HALF_TEXT_SIZE =	5
     75  f000
     76  f000		       00 80	   GRP0Cache  =	$80
     77  f000		       00 81	   PF0Cache   =	$81
     78  f000		       00 82	   PF1Cache   =	$82
     79  f000		       00 83	   PF2Cache   =	$83
     80  f000		       00 84	   GRP1Cache  =	$84
     81  f000		       00 85	   ENABLCache =	$85
     82  f000		       00 86	   ENAM0Cache =	$86
     83  f000		       00 87	   ENAM1Cache =	$87
     84  f000
     85  f000		       00 88	   ParallaxMode =	$88
     86  f000
     87  f000		       00 8c	   FrameCount0 =	$8C	;
     88  f000		       00 8d	   FrameCount1 =	$8D	;
     89  f000
     90  f000		       00 8e	   Player0SpeedL =	$8E
     91  f000		       00 8f	   Player0SpeedH =	$8F
     92  f000
     93  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     94  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     95  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     96  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     97  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     98  f000
     99  f000							;Temporary variables, multiple uses
    100  f000		       00 b0	   Tmp0       =	$B0
    101  f000		       00 b1	   Tmp1       =	$B1
    102  f000		       00 b2	   Tmp2       =	$B2
    103  f000		       00 b3	   Tmp3       =	$B3
    104  f000
    105  f000		       00 ba	   CollisionCounter =	$BA
    106  f000		       00 bb	   Player0X   =	$BB
    107  f000		       00 bc	   CountdownTimer =	$BC
    108  f000		       00 bd	   Traffic0Msb =	$BD
    109  f000		       00 be	   SwitchDebounceCounter =	$BE
    110  f000
    111  f000
    112  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    113  f000		       00 c1	   TrafficChance =	$C1
    114  f000		       00 c2	   CheckpointTime =	$C2
    115  f000		       00 c3	   TrafficColor =	$C3
    116  f000		       00 c4	   CurrentDifficulty =	$C4
    117  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    118  f000
    119  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    120  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    121  f000
    122  f000		       0c 10	   BorderType =	$C10
    123  f000
    124  f000		       00 d0	   ScoreD0    =	$D0
    125  f000		       00 d1	   ScoreD1    =	$D1
    126  f000		       00 d2	   ScoreD2    =	$D2
    127  f000		       00 d3	   ScoreD3    =	$D3
    128  f000		       00 d4	   ScoreD4    =	$D4
    129  f000		       00 d5	   ScoreFontColor =	$D5
    130  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    131  f000		       00 d7	   NextCheckpoint =	$D7
    132  f000
    133  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    134  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    135  f000
    136  f000
    137  f000							;generic start up stuff, put zero in all...
    138  f000				   BeforeStart		;All variables that are kept on game reset or select
    139  f000		       a0 00		      LDY	#0
    140  f002		       84 be		      STY	SwitchDebounceCounter
    141  f004		       84 c5		      STY	GameMode
    142  f006		       a0 e0		      LDY	#%11100000	; Default Parallax
    143  f008		       84 88		      STY	ParallaxMode
    144  f00a
    145  f00a				   Start
    146  f00a		       78		      SEI
    147  f00b		       d8		      CLD
    148  f00c		       a2 ff		      LDX	#$FF
    149  f00e		       9a		      TXS
    150  f00f		       a9 00		      LDA	#0
    151  f011				   ClearMem
    152  f011		       e0 be		      CPX	#SwitchDebounceCounter
    153  f013		       f0 0a		      BEQ	SkipClean
    154  f015		       e0 c5		      CPX	#GameMode
    155  f017		       f0 06		      BEQ	SkipClean
    156  f019		       e0 88		      CPX	#ParallaxMode
    157  f01b		       f0 02		      BEQ	SkipClean
    158  f01d		       95 00		      STA	0,X
    159  f01f				   SkipClean
    160  f01f		       ca		      DEX
    161  f020		       d0 ef		      BNE	ClearMem
    162  f022
    163  f022							;Setting some variables...
    164  f022
    165  f022				   SettingTrafficOffsets		; Time sensitive with player H position
    166  f022		       85 02		      STA	WSYNC	;We will set player position
    167  f024		       20 e7 f6 	      JSR	DefaultOffsets
    168  f027
    169  f027		       ad cd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    170  f02a		       85 8e		      STA	Player0SpeedL
    171  f02c
      0  f02c					      SLEEP	11	;18
      1  f02c				   .CYCLES    SET	11
      2  f02c
      3  f02c				  -	      IF	.CYCLES < 2
      4  f02c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f02c				  -	      ERR
      6  f02c					      ENDIF
      7  f02c
      8  f02c					      IF	.CYCLES & 1
      9  f02c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f02c				  -	      nop	0
     11  f02c					      ELSE
     12  f02c		       24 00		      bit	VSYNC
     13  f02e					      ENDIF
     14  f02e				   .CYCLES    SET	.CYCLES - 3
     15  f02e					      ENDIF
     16  f02e
     17  f02e					      REPEAT	.CYCLES / 2
     18  f02e		       ea		      nop
     17  f02e					      REPEND
     18  f02f		       ea		      nop
     17  f02f					      REPEND
     18  f030		       ea		      nop
     17  f030					      REPEND
     18  f031		       ea		      nop
     19  f032					      REPEND
    173  f032		       85 10		      STA	RESP0
    174  f034
    175  f034		       a2 00		      LDX	#0
    176  f036		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    177  f039		       29 c0		      AND	#%11000000
    178  f03b		       f0 0b		      BEQ	CallConfigureDifficulty
    179  f03d		       e8		      INX
    180  f03e		       c9 80		      CMP	#%10000000
    181  f040		       f0 06		      BEQ	CallConfigureDifficulty
    182  f042		       e8		      INX
    183  f043		       c9 40		      CMP	#%01000000
    184  f045		       f0 01		      BEQ	CallConfigureDifficulty
    185  f047		       e8		      INX
    186  f048
    187  f048				   CallConfigureDifficulty
    188  f048		       86 c4		      STX	CurrentDifficulty
    189  f04a		       20 9f f6 	      JSR	ConfigureDifficulty
    190  f04d
    191  f04d				   HPositioning
    192  f04d		       85 02		      STA	WSYNC
    193  f04f
    194  f04f		       a9 30		      LDA	#%00110000	;2 Missile Size
    195  f051		       85 04		      STA	NUSIZ0	;3
    196  f053		       85 05		      STA	NUSIZ1	;3
    197  f055
    198  f055		       a9 35		      LDA	#PLAYER_0_X_START	;2
    199  f057		       85 bb		      STA	Player0X	;3
    200  f059
    201  f059		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    202  f05b		       85 bc		      STA	CountdownTimer	;3
    203  f05d
    204  f05d		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    205  f05f		       85 d7		      STA	NextCheckpoint
    206  f061
    207  f061		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f063					      SLEEP	11	;
      1  f063				   .CYCLES    SET	11
      2  f063
      3  f063				  -	      IF	.CYCLES < 2
      4  f063				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f063				  -	      ERR
      6  f063					      ENDIF
      7  f063
      8  f063					      IF	.CYCLES & 1
      9  f063				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f063				  -	      nop	0
     11  f063					      ELSE
     12  f063		       24 00		      bit	VSYNC
     13  f065					      ENDIF
     14  f065				   .CYCLES    SET	.CYCLES - 3
     15  f065					      ENDIF
     16  f065
     17  f065					      REPEAT	.CYCLES / 2
     18  f065		       ea		      nop
     17  f065					      REPEND
     18  f066		       ea		      nop
     17  f066					      REPEND
     18  f067		       ea		      nop
     17  f067					      REPEND
     18  f068		       ea		      nop
     19  f069					      REPEND
    209  f069		       85 11		      STA	RESP1
      0  f06b					      SLEEP	2	;
      1  f06b				   .CYCLES    SET	2
      2  f06b
      3  f06b				  -	      IF	.CYCLES < 2
      4  f06b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f06b				  -	      ERR
      6  f06b					      ENDIF
      7  f06b
      8  f06b				  -	      IF	.CYCLES & 1
      9  f06b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f06b				  -	      nop	0
     11  f06b				  -	      ELSE
     12  f06b				  -	      bit	VSYNC
     13  f06b				  -	      ENDIF
     14  f06b				  -.CYCLES    SET	.CYCLES - 3
     15  f06b					      ENDIF
     16  f06b
     17  f06b					      REPEAT	.CYCLES / 2
     18  f06b		       ea		      nop
     19  f06c					      REPEND
    211  f06c		       85 14		      STA	RESBL
      0  f06e					      SLEEP	2	;
      1  f06e				   .CYCLES    SET	2
      2  f06e
      3  f06e				  -	      IF	.CYCLES < 2
      4  f06e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f06e				  -	      ERR
      6  f06e					      ENDIF
      7  f06e
      8  f06e				  -	      IF	.CYCLES & 1
      9  f06e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f06e				  -	      nop	0
     11  f06e				  -	      ELSE
     12  f06e				  -	      bit	VSYNC
     13  f06e				  -	      ENDIF
     14  f06e				  -.CYCLES    SET	.CYCLES - 3
     15  f06e					      ENDIF
     16  f06e
     17  f06e					      REPEAT	.CYCLES / 2
     18  f06e		       ea		      nop
     19  f06f					      REPEND
    213  f06f		       85 12		      STA	RESM0
      0  f071					      SLEEP	2
      1  f071				   .CYCLES    SET	2
      2  f071
      3  f071				  -	      IF	.CYCLES < 2
      4  f071				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f071				  -	      ERR
      6  f071					      ENDIF
      7  f071
      8  f071				  -	      IF	.CYCLES & 1
      9  f071				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f071				  -	      nop	0
     11  f071				  -	      ELSE
     12  f071				  -	      bit	VSYNC
     13  f071				  -	      ENDIF
     14  f071				  -.CYCLES    SET	.CYCLES - 3
     15  f071					      ENDIF
     16  f071
     17  f071					      REPEAT	.CYCLES / 2
     18  f071		       ea		      nop
     19  f072					      REPEND
    215  f072		       85 13		      STA	RESM1
    216  f074
    217  f074		       a9 f0		      LDA	#$F0
    218  f076		       85 24		      STA	HMBL
    219  f078		       85 22		      STA	HMM0
    220  f07a		       85 23		      STA	HMM1
    221  f07c		       85 02		      STA	WSYNC
    222  f07e		       85 2a		      STA	HMOVE
    223  f080		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    224  f082		       85 2b		      STA	HMCLR
    225  f084
    226  f084							;SLEEP 24
    227  f084							;STA HMCLR
    228  f084
    229  f084							;VSYNC time
    230  f084				   MainLoop
    231  f084		       a9 02		      LDA	#2
    232  f086		       85 00		      STA	VSYNC
    233  f088		       85 02		      STA	WSYNC
    234  f08a		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    235  f08c		       85 2a		      STA	HMOVE	;2
    236  f08e		       85 02		      STA	WSYNC	;3
    237  f090		       a9 29		      LDA	#41	;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    238  f092		       8d 96 02 	      STA	TIM64T	;3	
    239  f095		       a9 00		      LDA	#0	;2
    240  f097		       85 00		      STA	VSYNC	;3	
    241  f099
    242  f099							;Read Fire Button before, will make it start the game for now.
    243  f099				   StartGame
    244  f099		       a5 0c		      LDA	INPT4	;3
    245  f09b		       30 1b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    246  f09d		       a5 c0		      LDA	GameStatus	;3
    247  f09f		       d0 17		      BNE	SkipGameStart
    248  f0a1		       e6 c0		      INC	GameStatus
    249  f0a3		       a9 00		      LDA	#0	;
    250  f0a5		       85 8c		      STA	FrameCount0
    251  f0a7		       85 8d		      STA	FrameCount1
    252  f0a9		       a9 0a		      LDA	#10
    253  f0ab		       85 19		      STA	AUDV0
    254  f0ad		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    255  f0af		       85 d5		      STA	ScoreFontColor
    256  f0b1		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    257  f0b3		       85 d6		      STA	ScoreFontColorHoldChange
    258  f0b5		       4c 34 f1 	      JMP	SkipIncFC1	; Make the worse case stable
    259  f0b8				   SkipGameStart
    260  f0b8
    261  f0b8				   RandomizeGame
    262  f0b8		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    263  f0ba		       d0 30		      BNE	EndRandomizeGame
    264  f0bc		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    265  f0be		       29 02		      AND	#%00000010
    266  f0c0		       f0 27		      BEQ	DeterministicGame
    267  f0c2		       a6 96		      LDX	TrafficOffset1 + 2
    268  f0c4		       bd 00 fe 	      LDA	AesTable,X
    269  f0c7		       45 8c		      EOR	FrameCount0
    270  f0c9		       85 96		      STA	TrafficOffset1 + 2
    271  f0cb		       a6 9a		      LDX	TrafficOffset2 + 2
    272  f0cd		       bd 00 fe 	      LDA	AesTable,X
    273  f0d0		       45 8c		      EOR	FrameCount0
    274  f0d2		       85 9a		      STA	TrafficOffset2 + 2
    275  f0d4		       a6 9e		      LDX	TrafficOffset3 + 2
    276  f0d6		       bd 00 fe 	      LDA	AesTable,X
    277  f0d9		       45 8c		      EOR	FrameCount0
    278  f0db		       85 9e		      STA	TrafficOffset3 + 2
    279  f0dd		       a6 a2		      LDX	TrafficOffset4 + 2
    280  f0df		       bd 00 fe 	      LDA	AesTable,X
    281  f0e2		       45 8c		      EOR	FrameCount0
    282  f0e4		       85 a2		      STA	TrafficOffset4 + 2
    283  f0e6		       4c ec f0 	      JMP	EndRandomizeGame
    284  f0e9
    285  f0e9				   DeterministicGame
    286  f0e9		       20 e7 f6 	      JSR	DefaultOffsets
    287  f0ec
    288  f0ec				   EndRandomizeGame
    289  f0ec
    290  f0ec
    291  f0ec				   ReadSwitches
    292  f0ec		       a6 be		      LDX	SwitchDebounceCounter
    293  f0ee		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    294  f0f0		       a9 01		      LDA	#%00000001
    295  f0f2		       2c 82 02 	      BIT	SWCHB
    296  f0f5		       d0 07		      BNE	SkipReset
    297  f0f7		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    298  f0f9		       85 be		      STA	SwitchDebounceCounter
    299  f0fb		       4c 0a f0 	      JMP	Start
    300  f0fe				   SkipReset
    301  f0fe
    302  f0fe				   GameModeSelect
    303  f0fe		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    304  f100		       d0 27		      BNE	SkipGameSelect
    305  f102		       20 9f f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    306  f105				   ReadDpadParallax
    307  f105		       ad 80 02 	      LDA	SWCHA
    308  f108		       29 f0		      AND	#%11110000
    309  f10a		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    310  f10c		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    311  f10e		       85 88		      STA	ParallaxMode
    312  f110				   ContinueGameSelect
    313  f110		       a9 02		      LDA	#%00000010
    314  f112		       2c 82 02 	      BIT	SWCHB
    315  f115		       d0 12		      BNE	SkipGameSelect
    316  f117		       a6 c5		      LDX	GameMode
    317  f119		       e0 0f		      CPX	#MAX_GAME_MODE
    318  f11b		       f0 04		      BEQ	ResetGameMode
    319  f11d		       e8		      INX
    320  f11e		       4c 23 f1 	      JMP	StoreGameMode
    321  f121				   ResetGameMode
    322  f121		       a2 00		      LDX	#0
    323  f123				   StoreGameMode
    324  f123		       86 c5		      STX	GameMode
    325  f125		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    326  f127		       85 be		      STA	SwitchDebounceCounter
    327  f129				   SkipGameSelect
    328  f129		       4c 2e f1 	      JMP	EndReadSwitches
    329  f12c				   DecrementSwitchDebounceCounter
    330  f12c		       c6 be		      DEC	SwitchDebounceCounter
    331  f12e				   EndReadSwitches
    332  f12e
    333  f12e				   CountFrame
    334  f12e		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    335  f130		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    336  f132		       e6 8d		      INC	FrameCount1	; 5 Still not used
    337  f134				   SkipIncFC1
    338  f134
    339  f134							;Does not update the game if not running
    340  f134		       a5 c0		      LDA	GameStatus	;3
    341  f136		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    342  f138		       4c cb f2 	      JMP	SkipUpdateLogic
    343  f13b				   ContinueWithGameLogic
    344  f13b
    345  f13b				   EverySecond		; 64 frames to be more precise
    346  f13b		       a9 3f		      LDA	#%00111111
    347  f13d		       25 8c		      AND	FrameCount0
    348  f13f		       d0 06		      BNE	SkipEverySecondAction
    349  f141		       c5 bc		      CMP	CountdownTimer
    350  f143		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    351  f145		       c6 bc		      DEC	CountdownTimer
    352  f147				   SkipEverySecondAction
    353  f147
    354  f147
    355  f147				   BreakOnTimeOver		; Uses LDX as the breaking speed
    356  f147		       a2 00		      LDX	#0
    357  f149		       a5 bc		      LDA	CountdownTimer
    358  f14b		       d0 08		      BNE	Break
    359  f14d		       a5 8c		      LDA	FrameCount0
    360  f14f		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    361  f151		       d0 02		      BNE	Break
    362  f153		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    363  f155
    364  f155				   Break
    365  f155		       a9 20		      LDA	#%00100000	;Down in controller
    366  f157		       2c 80 02 	      BIT	SWCHA
    367  f15a		       d0 0b		      BNE	BreakNonZero
    368  f15c		       a5 0c		      LDA	INPT4	;3
    369  f15e		       10 05		      BPL	BreakWhileAccelerating
    370  f160		       a2 0a		      LDX	#BREAK_SPEED
    371  f162		       4c 67 f1 	      JMP	BreakNonZero
    372  f165				   BreakWhileAccelerating		; Allow better control while breaking.
    373  f165		       a2 05		      LDX	#BREAK_SPEED / 2
    374  f167
    375  f167				   BreakNonZero
    376  f167		       e0 00		      CPX	#0
    377  f169		       f0 2b		      BEQ	SkipBreak
    378  f16b		       86 b0		      STX	Tmp0
    379  f16d
    380  f16d				   DecreaseSpeed
    381  f16d		       38		      SEC
    382  f16e		       a5 8e		      LDA	Player0SpeedL
    383  f170		       e5 b0		      SBC	Tmp0
    384  f172		       85 8e		      STA	Player0SpeedL
    385  f174		       a5 8f		      LDA	Player0SpeedH
    386  f176		       e9 00		      SBC	#0
    387  f178		       85 8f		      STA	Player0SpeedH
    388  f17a
    389  f17a				   CheckMinSpeed
    390  f17a		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    391  f17c		       c9 00		      CMP	#CAR_MIN_SPEED_H
    392  f17e		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    393  f180		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    394  f182
    395  f182				   CompareLBreakSpeed
    396  f182		       a5 8e		      LDA	Player0SpeedL
    397  f184		       c9 00		      CMP	#CAR_MIN_SPEED_L
    398  f186		       90 03		      BCC	ResetMinSpeed	; Less than memory
    399  f188		       4c 93 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    400  f18b
    401  f18b				   ResetMinSpeed
    402  f18b		       a9 00		      LDA	#CAR_MIN_SPEED_H
    403  f18d		       85 8f		      STA	Player0SpeedH
    404  f18f		       a9 00		      LDA	#CAR_MIN_SPEED_L
    405  f191		       85 8e		      STA	Player0SpeedL
    406  f193
    407  f193				   SkipAccelerateIfBreaking
    408  f193		       4c c6 f1 	      JMP	SkipAccelerate
    409  f196				   SkipBreak
    410  f196
    411  f196				   Acelerates
    412  f196		       a5 bc		      LDA	CountdownTimer
    413  f198		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    414  f19a		       a5 0c		      LDA	INPT4	;3
    415  f19c		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    416  f19e		       a9 10		      LDA	#%00010000	;UP in controller
    417  f1a0		       2c 80 02 	      BIT	SWCHA
    418  f1a3		       d0 21		      BNE	SkipAccelerate
    419  f1a5
    420  f1a5				   IncreaseCarSpeed
    421  f1a5							;Adds speed
    422  f1a5		       18		      CLC
    423  f1a6		       a5 8e		      LDA	Player0SpeedL
    424  f1a8		       69 01		      ADC	#ACCELERATE_SPEED
    425  f1aa		       85 8e		      STA	Player0SpeedL
    426  f1ac		       a5 8f		      LDA	Player0SpeedH
    427  f1ae		       69 00		      ADC	#0
    428  f1b0		       85 8f		      STA	Player0SpeedH
    429  f1b2
    430  f1b2				   CheckIfAlreadyMaxSpeed
    431  f1b2		       c9 02		      CMP	#CAR_MAX_SPEED_H
    432  f1b4		       90 10		      BCC	SkipAccelerate	; less than my max speed
    433  f1b6		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    434  f1b8							;High bit is max, compare the low
    435  f1b8		       a5 8e		      LDA	Player0SpeedL
    436  f1ba		       c9 80		      CMP	#CAR_MAX_SPEED_L
    437  f1bc		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    438  f1be							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    439  f1be
    440  f1be				   ResetToMaxSpeed		; Speed is more, or is already max
    441  f1be		       a9 02		      LDA	#CAR_MAX_SPEED_H
    442  f1c0		       85 8f		      STA	Player0SpeedH
    443  f1c2		       a9 80		      LDA	#CAR_MAX_SPEED_L
    444  f1c4		       85 8e		      STA	Player0SpeedL
    445  f1c6				   SkipAccelerate
    446  f1c6
    447  f1c6				   InitUpdateOffsets
    448  f1c6		       a2 00		      LDX	#0	; Memory Offset 24 bit
    449  f1c8		       a0 00		      LDY	#0	; Line Speeds 16 bits
    450  f1ca		       a5 c5		      LDA	GameMode
    451  f1cc		       29 04		      AND	#%00000100	; GameModes with high delta
    452  f1ce		       f0 02		      BEQ	UpdateOffsets
    453  f1d0		       a4 0a		      LDY	TrafficSpeedsHighDelta - TrafficSpeeds
    454  f1d2
    455  f1d2				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    456  f1d2		       38		      SEC
    457  f1d3		       a5 8e		      LDA	Player0SpeedL
    458  f1d5		       f9 c5 ff 	      SBC	TrafficSpeeds,Y
    459  f1d8		       85 b0		      STA	Tmp0
    460  f1da		       c8		      INY
    461  f1db		       a5 8f		      LDA	Player0SpeedH
    462  f1dd		       f9 c5 ff 	      SBC	TrafficSpeeds,Y
    463  f1e0		       85 b1		      STA	Tmp1
    464  f1e2		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    465  f1e4		       e9 00		      SBC	#0
    466  f1e6		       85 b2		      STA	Tmp2
    467  f1e8
    468  f1e8				   AddsTheResult
    469  f1e8		       18		      CLC
    470  f1e9		       a5 b0		      LDA	Tmp0
    471  f1eb		       75 90		      ADC	TrafficOffset0,X
    472  f1ed		       95 90		      STA	TrafficOffset0,X
    473  f1ef		       e8		      INX
    474  f1f0		       a5 b1		      LDA	Tmp1
    475  f1f2		       75 90		      ADC	TrafficOffset0,X
    476  f1f4		       95 90		      STA	TrafficOffset0,X
    477  f1f6		       e8		      INX
    478  f1f7		       a5 b2		      LDA	Tmp2	; Carry
    479  f1f9		       75 90		      ADC	TrafficOffset0,X
    480  f1fb		       95 90		      STA	TrafficOffset0,X
    481  f1fd		       90 06		      BCC	CalculateOffsetCache
    482  f1ff		       e0 02		      CPX	#2	;MSB offset 0
    483  f201		       d0 02		      BNE	CalculateOffsetCache
    484  f203		       e6 bd		      INC	Traffic0Msb
    485  f205
    486  f205				   CalculateOffsetCache
    487  f205		       e8		      INX
    488  f206		       38		      SEC
    489  f207		       69 00		      ADC	#0	;Increment by one
    490  f209		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    491  f20b
    492  f20b				   PrepareNextUpdateLoop
    493  f20b		       c8		      INY
    494  f20c		       e8		      INX
    495  f20d		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    496  f20f		       d0 c1		      BNE	UpdateOffsets
    497  f211
    498  f211
    499  f211							;Until store the movemnt, LDX contains the value to be stored.
    500  f211				   TestCollision		;
    501  f211							; see if player0 colides with the rest
    502  f211		       a5 00		      LDA	CXM0P
    503  f213		       05 01		      ORA	CXM1P
    504  f215		       05 01		      ORA	CXM1P
    505  f217		       05 02		      ORA	CXP0FB
    506  f219		       05 07		      ORA	CXPPMM
    507  f21b		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    508  f21d		       f0 23		      BEQ	NoCollision	;skip if not hitting...
    509  f21f		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    510  f221		       d0 1f		      BNE	NoCollision
    511  f223		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    512  f225		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    513  f227		       f0 19		      BEQ	NoCollision
    514  f229		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    515  f22b		       f0 15		      BEQ	NoCollision
    516  f22d		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    517  f22f		       85 ba		      STA	CollisionCounter	;and store as colision.
    518  f231		       a9 10		      LDA	#COLLISION_SPEED_L	;
    519  f233		       c5 8e		      CMP	Player0SpeedL
    520  f235		       b0 02		      BCS	SkipSetColisionSpeed
    521  f237		       85 8e		      STA	Player0SpeedL
    522  f239				   SkipSetColisionSpeed
    523  f239		       a9 00		      LDA	#0
    524  f23b		       85 8f		      STA	Player0SpeedH
    525  f23d		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    526  f23f		       4c 7f f2 	      JMP	StoreHMove	; We keep position consistent
    527  f242				   NoCollision
    528  f242
    529  f242				   DecrementCollision
    530  f242		       a4 ba		      LDY	CollisionCounter
    531  f244		       f0 07		      BEQ	FinishDecrementCollision
    532  f246		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    533  f248		       85 04		      STA	NUSIZ0
    534  f24a		       88		      DEY
    535  f24b		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    536  f24d				   FinishDecrementCollision
    537  f24d
    538  f24d				   ResetPlayerSize
    539  f24d		       d0 04		      BNE	FinishResetPlayerSize
    540  f24f		       a9 30		      LDA	#%00110000
    541  f251		       85 04		      STA	NUSIZ0	;
    542  f253				   FinishResetPlayerSize
    543  f253
    544  f253				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    545  f253		       c0 01		      CPY	#1	; Last frame before reset
    546  f255		       d0 05		      BNE	SkipResetPlayerPosition
    547  f257		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    548  f259		       4c 7f f2 	      JMP	StoreHMove
    549  f25c				   SkipResetPlayerPosition
    550  f25c
    551  f25c							; for left and right, we're gonna 
    552  f25c							; set the horizontal speed, and then do
    553  f25c							; a single HMOVE.  We'll use X to hold the
    554  f25c							; horizontal speed, then store it in the 
    555  f25c							; appropriate register
    556  f25c				   PrepareReadXAxis
    557  f25c		       a2 00		      LDX	#0
    558  f25e		       a4 bb		      LDY	Player0X
    559  f260				   BeginReadLeft
    560  f260		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    561  f262		       a9 40		      LDA	#%01000000	;Left
    562  f264		       2c 80 02 	      BIT	SWCHA
    563  f267		       d0 07		      BNE	SkipMoveLeft
    564  f269		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    565  f26b		       c6 bb		      DEC	Player0X
    566  f26d		       4c 7f f2 	      JMP	StoreHMove	; Cannot move left and right...
    567  f270				   SkipMoveLeft
    568  f270				   BeginReadRight
    569  f270		       c0 36		      CPY	#PLAYER_0_MAX_X
    570  f272		       f0 0b		      BEQ	SkipMoveRight	; At max already
    571  f274		       a9 80		      LDA	#%10000000	;Right
    572  f276		       2c 80 02 	      BIT	SWCHA
    573  f279		       d0 04		      BNE	SkipMoveRight
    574  f27b		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    575  f27d		       e6 bb		      INC	Player0X
    576  f27f				   SkipMoveRight
    577  f27f				   StoreHMove
    578  f27f		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    579  f281		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    580  f283
    581  f283				   DividePlayerSpeedBy4
    582  f283		       a5 8f		      LDA	Player0SpeedH
    583  f285		       0a		      ASL
    584  f286		       0a		      ASL
    585  f287		       0a		      ASL
    586  f288		       0a		      ASL
    587  f289		       0a		      ASL
    588  f28a		       0a		      ASL
    589  f28b		       85 b1		      STA	Tmp1
    590  f28d		       a5 8e		      LDA	Player0SpeedL
    591  f28f		       4a		      LSR
    592  f290		       4a		      LSR
    593  f291		       29 3f		      AND	#%00111111
    594  f293		       05 b1		      ORA	Tmp1
    595  f295		       85 b0		      STA	Tmp0	; Division Result
    596  f297
    597  f297				   CalculateParallax1Offset		; 7/8 speed
    598  f297		       38		      SEC
    599  f298		       a5 8e		      LDA	Player0SpeedL
    600  f29a		       e5 b0		      SBC	Tmp0
    601  f29c		       85 b2		      STA	Tmp2
    602  f29e		       a5 8f		      LDA	Player0SpeedH
    603  f2a0		       e9 00		      SBC	#0
    604  f2a2		       85 b3		      STA	Tmp3
    605  f2a4
    606  f2a4		       18		      CLC
    607  f2a5		       a5 c6		      LDA	ParallaxOffset1
    608  f2a7		       65 b2		      ADC	Tmp2
    609  f2a9		       85 c6		      STA	ParallaxOffset1
    610  f2ab		       a5 c7		      LDA	ParallaxOffset1 + 1
    611  f2ad		       65 b3		      ADC	Tmp3
    612  f2af		       85 c7		      STA	ParallaxOffset1 + 1
    613  f2b1
    614  f2b1				   CalculateParallax2Offset		; 6/8 speed
    615  f2b1		       38		      SEC
    616  f2b2		       a5 b2		      LDA	Tmp2
    617  f2b4		       e5 b0		      SBC	Tmp0
    618  f2b6		       85 b2		      STA	Tmp2
    619  f2b8		       a5 b3		      LDA	Tmp3
    620  f2ba		       e9 00		      SBC	#0
    621  f2bc		       85 b3		      STA	Tmp3
    622  f2be
    623  f2be		       18		      CLC
    624  f2bf		       a5 c8		      LDA	ParallaxOffset2
    625  f2c1		       65 b2		      ADC	Tmp2
    626  f2c3		       85 c8		      STA	ParallaxOffset2
    627  f2c5		       a5 c9		      LDA	ParallaxOffset2 + 1
    628  f2c7		       65 b3		      ADC	Tmp3
    629  f2c9		       85 c9		      STA	ParallaxOffset2 + 1
    630  f2cb
    631  f2cb				   SkipUpdateLogic		; Continue here if not paused
    632  f2cb
    633  f2cb
    634  f2cb				   ProcessBorder		;Can be optimized (probably)
    635  f2cb		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    636  f2cd		       a5 88		      LDA	ParallaxMode
    637  f2cf		       c9 70		      CMP	#%01110000
    638  f2d1		       f0 1a		      BEQ	HorizontalParallaxMode
    639  f2d3		       c9 d0		      CMP	#%11010000
    640  f2d5		       f0 0a		      BEQ	VerticalParallaxMode
    641  f2d7		       c9 b0		      CMP	#%10110000
    642  f2d9		       f0 0c		      BEQ	TachometerMode
    643  f2db
    644  f2db				   DefaultBorderMode
    645  f2db		       20 69 f7 	      JSR	DefaultBorderLoop
    646  f2de		       4c f0 f2 	      JMP	EndProcessingBorder
    647  f2e1				   VerticalParallaxMode
    648  f2e1		       20 d8 f7 	      JSR	VerticalParallaxLoop
    649  f2e4		       4c f0 f2 	      JMP	EndProcessingBorder
    650  f2e7				   TachometerMode
    651  f2e7		       20 84 f7 	      JSR	PrepareTachometerBorderLoop
    652  f2ea		       4c f0 f2 	      JMP	EndProcessingBorder
    653  f2ed				   HorizontalParallaxMode
    654  f2ed		       20 1b f7 	      JSR	HorizontalParallaxLoop
    655  f2f0
    656  f2f0				   EndProcessingBorder
    657  f2f0
    658  f2f0				   ProcessScoreFontColor
    659  f2f0		       a6 d6		      LDX	ScoreFontColorHoldChange
    660  f2f2		       f0 06		      BEQ	ResetScoreFontColor
    661  f2f4		       ca		      DEX
    662  f2f5		       86 d6		      STX	ScoreFontColorHoldChange
    663  f2f7		       4c fe f2 	      JMP	SkipScoreFontColor
    664  f2fa				   ResetScoreFontColor
    665  f2fa		       a9 f9		      LDA	#SCORE_FONT_COLOR
    666  f2fc		       85 d5		      STA	ScoreFontColor
    667  f2fe				   SkipScoreFontColor
    668  f2fe
    669  f2fe				   IsGameOver
    670  f2fe		       a5 bc		      LDA	CountdownTimer
    671  f300		       05 8e		      ORA	Player0SpeedL
    672  f302		       05 8f		      ORA	Player0SpeedH
    673  f304		       d0 0b		      BNE	IsCheckpoint
    674  f306		       a9 01		      LDA	#1
    675  f308		       85 d6		      STA	ScoreFontColorHoldChange
    676  f30a		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    677  f30c		       85 d5		      STA	ScoreFontColor
    678  f30e		       4c 43 f3 	      JMP	SkipIsTimeOver
    679  f311
    680  f311				   IsCheckpoint
    681  f311		       a5 d7		      LDA	NextCheckpoint
    682  f313		       c5 92		      CMP	TrafficOffset0 + 2
    683  f315		       d0 20		      BNE	SkipIsCheckpoint
    684  f317		       18		      CLC
    685  f318		       69 10		      ADC	#CHECKPOINT_INTERVAL
    686  f31a		       85 d7		      STA	NextCheckpoint
    687  f31c		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    688  f31e		       85 d5		      STA	ScoreFontColor
    689  f320		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    690  f322		       85 d6		      STA	ScoreFontColorHoldChange
    691  f324		       a5 bc		      LDA	CountdownTimer
    692  f326		       18		      CLC
    693  f327		       65 c2		      ADC	CheckpointTime
    694  f329		       85 bc		      STA	CountdownTimer
    695  f32b		       90 04		      BCC	JumpSkipTimeOver
    696  f32d		       a9 ff		      LDA	#$FF
    697  f32f		       85 bc		      STA	CountdownTimer	; Does not overflow!
    698  f331				   JumpSkipTimeOver
    699  f331		       20 90 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    700  f334		       4c 43 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    701  f337				   SkipIsCheckpoint
    702  f337
    703  f337				   IsTimeOver
    704  f337		       a5 bc		      LDA	CountdownTimer
    705  f339		       d0 08		      BNE	SkipIsTimeOver
    706  f33b		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    707  f33d		       85 d6		      STA	ScoreFontColorHoldChange
    708  f33f		       a9 33		      LDA	#SCORE_FONT_COLOR_BAD
    709  f341		       85 d5		      STA	ScoreFontColor
    710  f343				   SkipIsTimeOver
    711  f343
    712  f343				   PrintEasterEggCondition
    713  f343		       a5 8d		      LDA	FrameCount1
    714  f345		       29 38		      AND	#%00111000
    715  f347		       05 c0		      ORA	GameStatus
    716  f349		       c9 38		      CMP	#%00111000
    717  f34b		       d0 06		      BNE	ChooseTextSide
    718  f34d		       20 2c f8 	      JSR	PrintEasterEgg
    719  f350		       4c 4d f4 	      JMP	RightScoreWriteEnd
    720  f353
    721  f353							;Could be done during on vblank to save this comparisson time (before draw score), 
    722  f353							;but I am saving vblank cycles for now, in case of 2 players.
    723  f353				   ChooseTextSide		; 
    724  f353		       a5 8c		      LDA	FrameCount0	;3
    725  f355		       29 01		      AND	#%00000001	;2
    726  f357		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    727  f359		       4c e1 f3 	      JMP	RightScoreWrite
    728  f35c
    729  f35c				   LeftScoreWrite
    730  f35c		       a5 d5		      LDA	ScoreFontColor
    731  f35e		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    732  f360		       f0 52		      BEQ	PrintCheckpoint
    733  f362		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    734  f364		       f0 56		      BEQ	PrintStartGame
    735  f366		       a5 c0		      LDA	GameStatus
    736  f368		       f0 5a		      BEQ	PrintHellwayLeft
    737  f36a				   WriteDistance		;Not optimized yet, ugly code.
    738  f36a				   Digit0Distance
    739  f36a		       a5 91		      LDA	TrafficOffset0 + 1	;3
    740  f36c		       29 f0		      AND	#%11110000	;2
    741  f36e		       4a		      LSR		; 2
    742  f36f		       4a		      LSR		; 2
    743  f370		       4a		      LSR		; 2
    744  f371		       4a		      LSR		; 2
    745  f372		       aa		      TAX		; 2
    746  f373		       bd af fd 	      LDA	FontLookup,X	;4
    747  f376		       85 d3		      STA	ScoreD3	;3
    748  f378
    749  f378				   Digit1Distance
    750  f378		       a5 92		      LDA	TrafficOffset0 + 2	;3
    751  f37a		       29 0f		      AND	#%00001111	;2
    752  f37c		       aa		      TAX		; 2
    753  f37d		       bd af fd 	      LDA	FontLookup,X	;4 
    754  f380		       85 d2		      STA	ScoreD2	;3
    755  f382
    756  f382				   Digit2Distance
    757  f382		       a5 92		      LDA	TrafficOffset0 + 2	;3
    758  f384		       29 f0		      AND	#%11110000	;2
    759  f386		       4a		      LSR		; 2
    760  f387		       4a		      LSR		; 2
    761  f388		       4a		      LSR		; 2
    762  f389		       4a		      LSR		; 2
    763  f38a		       aa		      TAX		; 2
    764  f38b		       bd af fd 	      LDA	FontLookup,X	;4
    765  f38e		       85 d1		      STA	ScoreD1	;3
    766  f390
    767  f390				   Digit3Distance
    768  f390		       a5 bd		      LDA	Traffic0Msb	;3
    769  f392		       29 0f		      AND	#%00001111	;2
    770  f394		       aa		      TAX		; 2
    771  f395		       bd af fd 	      LDA	FontLookup,X	;4 
    772  f398		       85 d0		      STA	ScoreD0	;3
    773  f39a
    774  f39a				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    775  f39a		       a5 bd		      LDA	Traffic0Msb
    776  f39c		       29 f0		      AND	#%11110000	;2
    777  f39e		       d0 07		      BNE	DrawDistanceExtraDigit
    778  f3a0		       a9 9f		      LDA	#<Pipe + #FONT_OFFSET	;3
    779  f3a2		       85 d4		      STA	ScoreD4	;3
    780  f3a4		       4c b1 f3 	      JMP	EndDrawDistance
    781  f3a7				   DrawDistanceExtraDigit
    782  f3a7		       4a		      LSR		; 2
    783  f3a8		       4a		      LSR		; 2
    784  f3a9		       4a		      LSR		; 2
    785  f3aa		       4a		      LSR		; 2
    786  f3ab		       aa		      TAX		; 2
    787  f3ac		       bd af fd 	      LDA	FontLookup,X	;4
    788  f3af		       85 d4		      STA	ScoreD4	;3
    789  f3b1
    790  f3b1				   EndDrawDistance
    791  f3b1		       4c 4d f4 	      JMP	RightScoreWriteEnd	;3
    792  f3b4
    793  f3b4				   PrintCheckpoint
    794  f3b4		       a2 00		      LDX	#<CheckpointText
    795  f3b6		       20 fa f6 	      JSR	PrintStaticText
    796  f3b9		       4c 4d f4 	      JMP	RightScoreWriteEnd	;3
    797  f3bc				   PrintStartGame
    798  f3bc		       a2 23		      LDX	#<GoText
    799  f3be		       20 fa f6 	      JSR	PrintStaticText
    800  f3c1		       4c 4d f4 	      JMP	RightScoreWriteEnd	;3
    801  f3c4
    802  f3c4				   PrintHellwayLeft
    803  f3c4		       a5 8d		      LDA	FrameCount1
    804  f3c6		       29 01		      AND	#1
    805  f3c8		       d0 05		      BNE	PrintCreditsLeft
    806  f3ca		       a2 05		      LDX	#<HellwayLeftText
    807  f3cc		       4c d1 f3 	      JMP	PrintGameMode
    808  f3cf				   PrintCreditsLeft
    809  f3cf		       a2 0f		      LDX	#<OpbText
    810  f3d1
    811  f3d1				   PrintGameMode
    812  f3d1		       20 fa f6 	      JSR	PrintStaticText
    813  f3d4		       a5 c5		      LDA	GameMode
    814  f3d6		       29 0f		      AND	#%00001111
    815  f3d8		       aa		      TAX		; 2
    816  f3d9		       bd af fd 	      LDA	FontLookup,X	;4 
    817  f3dc		       85 d0		      STA	ScoreD0	;3
    818  f3de		       4c 4d f4 	      JMP	RightScoreWriteEnd	;3
    819  f3e1
    820  f3e1				   RightScoreWrite
    821  f3e1		       a5 c0		      LDA	GameStatus
    822  f3e3		       f0 47		      BEQ	PrintHellwayRight
    823  f3e5		       a5 d5		      LDA	ScoreFontColor
    824  f3e7		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    825  f3e9		       f0 54		      BEQ	PrintGameOver
    826  f3eb				   Digit0Timer
    827  f3eb		       a5 bc		      LDA	CountdownTimer	;3
    828  f3ed		       29 0f		      AND	#%00001111	;2
    829  f3ef		       aa		      TAX		; 2
    830  f3f0		       bd af fd 	      LDA	FontLookup,X	;4 
    831  f3f3		       85 d1		      STA	ScoreD1	;3
    832  f3f5
    833  f3f5				   Digit1Timer
    834  f3f5		       a5 bc		      LDA	CountdownTimer	;3
    835  f3f7		       29 f0		      AND	#%11110000	;2
    836  f3f9		       4a		      LSR		; 2
    837  f3fa		       4a		      LSR		; 2
    838  f3fb		       4a		      LSR		; 2
    839  f3fc		       4a		      LSR		; 2
    840  f3fd		       aa		      TAX		; 2
    841  f3fe		       bd af fd 	      LDA	FontLookup,X	;4
    842  f401		       85 d0		      STA	ScoreD0	;3
    843  f403
    844  f403		       a9 9f		      LDA	#<Pipe + #FONT_OFFSET	;3
    845  f405		       85 d2		      STA	ScoreD2	;3
    846  f407
    847  f407				   Digit0Speed
    848  f407		       a5 8e		      LDA	Player0SpeedL
    849  f409		       29 3c		      AND	#%00111100	;2 Discard the last bits
    850  f40b		       4a		      LSR		; 2
    851  f40c		       4a		      LSR		; 2
    852  f40d		       aa		      TAX		; 2
    853  f40e		       bd af fd 	      LDA	FontLookup,X	;4
    854  f411		       85 d4		      STA	ScoreD4	;3
    855  f413
    856  f413				   Digit1Speed
    857  f413		       a5 8e		      LDA	Player0SpeedL
    858  f415		       29 c0		      AND	#%11000000	;2 Discard the last bits
    859  f417		       18		      CLC
    860  f418		       2a		      ROL		;First goes into carry
    861  f419		       2a		      ROL
    862  f41a		       2a		      ROL
    863  f41b		       85 b0		      STA	Tmp0
    864  f41d		       a5 8f		      LDA	Player0SpeedH
    865  f41f		       0a		      ASL
    866  f420		       0a		      ASL
    867  f421		       05 b0		      ORA	Tmp0
    868  f423		       aa		      TAX		; 2
    869  f424		       bd af fd 	      LDA	FontLookup,X	;4
    870  f427		       85 d3		      STA	ScoreD3	;3
    871  f429		       4c 4d f4 	      JMP	RightScoreWriteEnd
    872  f42c
    873  f42c				   PrintHellwayRight
    874  f42c		       a5 8d		      LDA	FrameCount1
    875  f42e		       29 01		      AND	#1
    876  f430		       d0 05		      BNE	PrintCreditsRight
    877  f432		       a2 0a		      LDX	#<HellwayRightText
    878  f434		       4c 39 f4 	      JMP	PrintRightIntro
    879  f437				   PrintCreditsRight
    880  f437		       a2 14		      LDX	#<YearText
    881  f439				   PrintRightIntro
    882  f439		       20 fa f6 	      JSR	PrintStaticText
    883  f43c		       4c 4d f4 	      JMP	RightScoreWriteEnd
    884  f43f				   PrintGameOver
    885  f43f		       a5 8c		      LDA	FrameCount0
    886  f441		       30 05		      BMI	PrintOverText
    887  f443		       a2 19		      LDX	#<GameText
    888  f445		       4c 4a f4 	      JMP	StoreGameOverText
    889  f448				   PrintOverText
    890  f448		       a2 1e		      LDX	#<OverText
    891  f44a				   StoreGameOverText
    892  f44a		       20 fa f6 	      JSR	PrintStaticText
    893  f44d				   RightScoreWriteEnd
    894  f44d
    895  f44d
    896  f44d				   ScoreBackgroundColor
    897  f44d		       a2 00		      LDX	#0
    898  f44f		       ad 82 02 	      LDA	SWCHB
    899  f452		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    900  f454		       f0 04		      BEQ	BlackAndWhiteScoreBg
    901  f456		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    902  f458		       a2 03		      LDX	#BACKGROUND_COLOR
    903  f45a				   BlackAndWhiteScoreBg
    904  f45a		       85 b2		      STA	Tmp2	; Score Background
    905  f45c		       86 b3		      STX	Tmp3	; Traffic Background
    906  f45e
    907  f45e				   ConfigurePFForScore
    908  f45e							;LDA #SCORE_BACKGROUND_COLOR; Done above
    909  f45e		       85 09		      STA	COLUBK
    910  f460		       a5 d5		      LDA	ScoreFontColor
    911  f462		       85 08		      STA	COLUPF
    912  f464		       20 52 f6 	      JSR	ClearAll
    913  f467		       a9 02		      LDA	#%00000010	; Score mode
    914  f469		       85 0a		      STA	CTRLPF
    915  f46b		       a0 04		      LDY	#FONT_OFFSET
    916  f46d		       a2 00		      LDX	#0
    917  f46f		       a5 8c		      LDA	FrameCount0	;3
    918  f471		       29 01		      AND	#%00000001	;2
    919  f473		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    920  f475				   LeftScoreOn
    921  f475		       a5 d5		      LDA	ScoreFontColor
    922  f477		       85 07		      STA	COLUP1
    923  f479		       a5 b2		      LDA	Tmp2
    924  f47b		       85 06		      STA	COLUP0
    925  f47d		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    926  f47f		       85 b1		      STA	Tmp1
    927  f481		       4c 90 f4 	      JMP	WaitForVblankEnd
    928  f484				   RightScoreOn
    929  f484		       a5 d5		      LDA	ScoreFontColor
    930  f486		       85 06		      STA	COLUP0
    931  f488		       a5 b2		      LDA	Tmp2
    932  f48a		       85 07		      STA	COLUP1
    933  f48c		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    934  f48e		       85 b1		      STA	Tmp1
    935  f490
    936  f490							; After here we are going to update the screen, No more heavy code
    937  f490				   WaitForVblankEnd
    938  f490		       ad 84 02 	      LDA	INTIM
    939  f493		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    940  f495		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline? 
    941  f497		       85 01		      STA	VBLANK
    942  f499
    943  f499				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    944  f499		       85 02		      STA	WSYNC
    945  f49b
    946  f49b		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    947  f49d		       85 0d		      STA	PF0	;3
    948  f49f
    949  f49f		       a5 82		      LDA	PF1Cache	;3
    950  f4a1		       85 0e		      STA	PF1	;3
    951  f4a3
    952  f4a3		       a5 83		      LDA	PF2Cache	;3
    953  f4a5		       85 0f		      STA	PF2	;3
    954  f4a7
    955  f4a7							;39
    956  f4a7				   DrawScore
    957  f4a7		       a6 d0		      LDX	ScoreD0	; 4
    958  f4a9		       bd 00 fd 	      LDA	Font,X	;4
    959  f4ac		       85 81		      STA	PF0Cache	;3
    960  f4ae		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    961  f4b0							;17
    962  f4b0
    963  f4b0		       a6 d1		      LDX	ScoreD1	; 4
    964  f4b2		       bd 00 fd 	      LDA	Font,X	;4
    965  f4b5		       0a		      ASL		;2
    966  f4b6		       0a		      ASL		;2
    967  f4b7		       0a		      ASL		;2
    968  f4b8		       0a		      ASL		;2
    969  f4b9		       85 82		      STA	PF1Cache	;3
    970  f4bb		       c6 d1		      DEC	ScoreD1	;6
    971  f4bd							;9 (After Wsync)
    972  f4bd
    973  f4bd		       a6 d2		      LDX	ScoreD2	; 4
    974  f4bf		       bd 00 fd 	      LDA	Font,X	;4
    975  f4c2		       29 0f		      AND	#%00001111
    976  f4c4		       05 82		      ORA	PF1Cache	;3
    977  f4c6		       85 82		      STA	PF1Cache	;3
    978  f4c8		       c6 d2		      DEC	ScoreD2	;6
    979  f4ca							;20
    980  f4ca
    981  f4ca		       a6 d3		      LDX	ScoreD3	; 3
    982  f4cc		       bd 00 fd 	      LDA	Font,X	;4
    983  f4cf		       4a		      LSR		;2
    984  f4d0		       4a		      LSR		;2
    985  f4d1		       4a		      LSR		;2
    986  f4d2		       4a		      LSR		;2
    987  f4d3		       85 83		      STA	PF2Cache	;3
    988  f4d5		       c6 d3		      DEC	ScoreD3	;5
    989  f4d7							;23
    990  f4d7
    991  f4d7		       a6 d4		      LDX	ScoreD4	; 3
    992  f4d9		       bd 00 fd 	      LDA	Font,X	;4
    993  f4dc		       29 f0		      AND	#%11110000
    994  f4de		       05 83		      ORA	PF2Cache	;3
    995  f4e0		       85 83		      STA	PF2Cache	;3
    996  f4e2		       c6 d4		      DEC	ScoreD4	;5
    997  f4e4							;18
    998  f4e4
    999  f4e4		       88		      DEY		;2
   1000  f4e5		       10 b2		      BPL	ScoreLoop	;4
   1001  f4e7
   1002  f4e7		       85 02		      STA	WSYNC
   1003  f4e9
   1004  f4e9		       20 73 f6 	      JSR	LoadAll
   1005  f4ec
   1006  f4ec		       85 02		      STA	WSYNC
   1007  f4ee		       85 02		      STA	WSYNC
   1008  f4f0
   1009  f4f0				   PrepareForTraffic
   1010  f4f0		       20 64 f6 	      JSR	ClearPF	; 32
   1011  f4f3
   1012  f4f3		       a9 31		      LDA	#%00110001	; Score mode
   1013  f4f5		       85 0a		      STA	CTRLPF
   1014  f4f7
   1015  f4f7		       a5 c3		      LDA	TrafficColor	;2
   1016  f4f9		       85 08		      STA	COLUPF
   1017  f4fb
   1018  f4fb		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1019  f4fd		       85 07		      STA	COLUP1	;3
   1020  f4ff
   1021  f4ff		       a5 d5		      LDA	ScoreFontColor	;3
   1022  f501		       85 06		      STA	COLUP0	;3
   1023  f503
   1024  f503		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1025  f505
   1026  f505		       85 02		      STA	WSYNC
   1027  f507		       85 02		      STA	WSYNC
   1028  f509
   1029  f509							;main scanline loop...
   1030  f509				   ScanLoop
   1031  f509		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1032  f50b
   1033  f50b							;Start of next line!			
   1034  f50b				   DrawCache		;63 Is the last line going to the top of the next frame?
   1035  f50b							;Supper wastefull, but I had 17 cycles, This only avoids the score line to finish a litle earlier...
   1036  f50b		       a5 b3		      LDA	Tmp3	;3
   1037  f50d		       85 09		      STA	COLUBK	;3
   1038  f50f
   1039  f50f		       a5 81		      LDA	PF0Cache	;3
   1040  f511		       85 0d		      STA	PF0	;3
   1041  f513
   1042  f513		       b9 78 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
   1043  f516		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1044  f518
   1045  f518		       a5 82		      LDA	PF1Cache	;3
   1046  f51a		       85 0e		      STA	PF1	;3
   1047  f51c
   1048  f51c		       a5 84		      LDA	GRP1Cache	;3
   1049  f51e		       85 1c		      STA	GRP1	;3
   1050  f520
   1051  f520		       a5 85		      LDA	ENABLCache	;3
   1052  f522		       85 1f		      STA	ENABL	;3
   1053  f524
   1054  f524		       a5 86		      LDA	ENAM0Cache	;3
   1055  f526		       85 1d		      STA	ENAM0	;3
   1056  f528
   1057  f528		       a5 87		      LDA	ENAM1Cache	;3
   1058  f52a		       85 1e		      STA	ENAM1	;3
   1059  f52c
   1060  f52c		       a9 00		      LDA	#0	;2
   1061  f52e							;STA PF1Cache ;3
   1062  f52e		       85 84		      STA	GRP1Cache	;3
   1063  f530		       85 85		      STA	ENABLCache	;3
   1064  f532		       85 86		      STA	ENAM0Cache	;3
   1065  f534		       85 87		      STA	ENAM1Cache	; 3
   1066  f536
   1067  f536							;BEQ DrawTraffic3
   1068  f536				   DrawTraffic1 		; 33
   1069  f536		       98		      TYA		; 2
   1070  f537		       18		      CLC		; 2 
   1071  f538		       65 95		      ADC	TrafficOffset1 + 1	;3
   1072  f53a		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1073  f53c		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1074  f53e		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1075  f540		       4c 45 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1076  f543				   EorOffsetWithCarry
   1077  f543		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1078  f545				   AfterEorOffsetWithCarry		;17
   1079  f545		       aa		      TAX		;2
   1080  f546		       bd 00 fe 	      LDA	AesTable,X	; 4
   1081  f549		       c5 c1		      CMP	TrafficChance	;3
   1082  f54b		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1083  f54d		       a9 ff		      LDA	#$FF	;2
   1084  f54f		       85 84		      STA	GRP1Cache	;3
   1085  f551				   FinishDrawTraffic1
   1086  f551
   1087  f551				   DrawTraffic2 		; 33
   1088  f551		       98		      TYA		; 2
   1089  f552		       18		      CLC		; 2 
   1090  f553		       65 99		      ADC	TrafficOffset2 + 1	;3
   1091  f555		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1092  f557		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1093  f559		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1094  f55b		       4c 60 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1095  f55e				   EorOffsetWithCarry2
   1096  f55e		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1097  f560				   AfterEorOffsetWithCarry2		;17
   1098  f560		       aa		      TAX		;2
   1099  f561		       bd 00 fe 	      LDA	AesTable,X	; 4
   1100  f564		       c5 c1		      CMP	TrafficChance	;3
   1101  f566		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1102  f568		       a9 02		      LDA	#%00000010	;2
   1103  f56a		       85 85		      STA	ENABLCache	;3
   1104  f56c				   FinishDrawTraffic2
   1105  f56c
   1106  f56c							;STA WSYNC ;65 / 137
   1107  f56c
   1108  f56c							; LDA Tmp0 ; Flicker this line if drawing car
   1109  f56c							; BEQ FinishDrawTraffic4
   1110  f56c				   DrawTraffic3 		; 33
   1111  f56c		       98		      TYA		; 2
   1112  f56d		       18		      CLC		; 2 
   1113  f56e		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1114  f570		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1115  f572		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1116  f574		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1117  f576		       4c 7b f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1118  f579				   EorOffsetWithCarry3
   1119  f579		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1120  f57b				   AfterEorOffsetWithCarry3		;17
   1121  f57b		       aa		      TAX		;2
   1122  f57c		       bd 00 fe 	      LDA	AesTable,X	; 4
   1123  f57f		       c5 c1		      CMP	TrafficChance	;3
   1124  f581		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1125  f583		       a9 02		      LDA	#%00000010	;2
   1126  f585		       85 86		      STA	ENAM0Cache
   1127  f587				   FinishDrawTraffic3
   1128  f587
   1129  f587				   DrawTraffic4 		; 33
   1130  f587		       98		      TYA		; 2
   1131  f588		       18		      CLC		; 2 
   1132  f589		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1133  f58b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1134  f58d		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1135  f58f		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1136  f591		       4c 96 f5 	      JMP	AfterEorOffsetWithCarry4	; 3
   1137  f594				   EorOffsetWithCarry4
   1138  f594		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1139  f596				   AfterEorOffsetWithCarry4		;17
   1140  f596		       aa		      TAX		;2
   1141  f597		       bd 00 fe 	      LDA	AesTable,X	; 4
   1142  f59a		       c5 c1		      CMP	TrafficChance	;3
   1143  f59c		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1144  f59e		       a9 02		      LDA	#%00000010	;2
   1145  f5a0		       85 87		      STA	ENAM1Cache	;3
   1146  f5a2				   FinishDrawTraffic4
   1147  f5a2
   1148  f5a2				   DrawTraffic0 		; 15
   1149  f5a2		       98		      TYA		;2
   1150  f5a3		       29 07		      AND	#%00000111	;2
   1151  f5a5		       aa		      TAX		;2
   1152  f5a6		       b5 d8		      LDA	ParallaxCache,X	;4
   1153  f5a8		       85 82		      STA	PF1Cache	;3
   1154  f5aa		       b5 f0		      LDA	ParallaxCache2,X	;4
   1155  f5ac		       85 81		      STA	PF0Cache	;3
   1156  f5ae
   1157  f5ae				   SkipDrawTraffic0
   1158  f5ae
   1159  f5ae				   WhileScanLoop
   1160  f5ae		       88		      DEY		;2
   1161  f5af		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1162  f5b1		       4c 09 f5 	      JMP	ScanLoop	;3
   1163  f5b4				   FinishScanLoop		; 7 209 of 222
   1164  f5b4
   1165  f5b4		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1166  f5b6		       20 73 f6 	      JSR	LoadAll
   1167  f5b9		       85 02		      STA	WSYNC	; do stuff!
   1168  f5bb		       85 02		      STA	WSYNC
   1169  f5bd		       85 02		      STA	WSYNC
   1170  f5bf							;42 cycles to use here
   1171  f5bf
   1172  f5bf				   PrepareOverscan
   1173  f5bf		       a9 02		      LDA	#2
   1174  f5c1		       85 02		      STA	WSYNC
   1175  f5c3		       85 01		      STA	VBLANK
   1176  f5c5
   1177  f5c5		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1178  f5c7		       8d 96 02 	      STA	TIM64T
   1179  f5ca
   1180  f5ca				   LeftSound		;58
   1181  f5ca		       a5 bc		      LDA	CountdownTimer	;3
   1182  f5cc		       f0 24		      BEQ	EngineOff	;2
   1183  f5ce		       a5 8e		      LDA	Player0SpeedL	;3
   1184  f5d0		       29 80		      AND	#%10000000	;2
   1185  f5d2		       05 8f		      ORA	Player0SpeedH	;3
   1186  f5d4		       18		      CLC		;2
   1187  f5d5		       2a		      ROL		;2
   1188  f5d6		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1189  f5d8		       aa		      TAX		;2
   1190  f5d9		       a5 8e		      LDA	Player0SpeedL	;3
   1191  f5db		       4a		      LSR		;2
   1192  f5dc		       4a		      LSR		;2
   1193  f5dd		       4a		      LSR		;2
   1194  f5de		       29 0f		      AND	#%00001111	;2
   1195  f5e0		       85 b0		      STA	Tmp0	;3
   1196  f5e2		       bd c5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1197  f5e5		       38		      SEC		;2
   1198  f5e6		       e5 b0		      SBC	Tmp0	;3
   1199  f5e8		       85 17		      STA	AUDF0	;3
   1200  f5ea		       bd bf fd 	      LDA	EngineSoundType,X	;4
   1201  f5ed		       85 15		      STA	AUDC0	;3
   1202  f5ef		       4c f6 f5 	      JMP	EndLeftSound	;3
   1203  f5f2				   EngineOff
   1204  f5f2		       a9 00		      LDA	#0
   1205  f5f4		       85 15		      STA	AUDC0
   1206  f5f6
   1207  f5f6				   EndLeftSound
   1208  f5f6
   1209  f5f6
   1210  f5f6				   RightSound		; 56 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1211  f5f6		       a5 d5		      LDA	ScoreFontColor	;3
   1212  f5f8		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1213  f5fa		       f0 4a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1214  f5fc		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1215  f5fe		       f0 21		      BEQ	PlayCheckpoint	;2
   1216  f600		       a5 ba		      LDA	CollisionCounter	;3
   1217  f602		       c9 e0		      CMP	#$E0	;2
   1218  f604		       b0 0c		      BCS	PlayColision	;2
   1219  f606		       a5 d7		      LDA	NextCheckpoint	;3
   1220  f608		       38		      SEC		;2
   1221  f609		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1222  f60b		       c9 02		      CMP	#$02	;2
   1223  f60d		       90 24		      BCC	PlayBeforeCheckpoint	;4
   1224  f60f		       4c 46 f6 	      JMP	MuteRightSound
   1225  f612				   PlayColision
   1226  f612		       a9 1f		      LDA	#31
   1227  f614		       85 18		      STA	AUDF1
   1228  f616		       a9 08		      LDA	#8
   1229  f618		       85 16		      STA	AUDC1
   1230  f61a		       a9 08		      LDA	#8
   1231  f61c		       85 1a		      STA	AUDV1
   1232  f61e		       4c 4a f6 	      JMP	EndRightSound
   1233  f621
   1234  f621				   PlayCheckpoint
   1235  f621		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1236  f623		       4a		      LSR		;2
   1237  f624		       4a		      LSR		;2
   1238  f625		       4a		      LSR		;2
   1239  f626		       85 18		      STA	AUDF1	;3
   1240  f628		       a9 0c		      LDA	#12	;2
   1241  f62a		       85 16		      STA	AUDC1	;3
   1242  f62c		       a9 06		      LDA	#6	;2
   1243  f62e		       85 1a		      STA	AUDV1	;3
   1244  f630		       4c 4a f6 	      JMP	EndRightSound	;3
   1245  f633
   1246  f633				   PlayBeforeCheckpoint
   1247  f633		       a5 8c		      LDA	FrameCount0	;3
   1248  f635		       29 1c		      AND	#%00011100	;2
   1249  f637		       09 03		      ORA	#%00000011	;2
   1250  f639		       85 18		      STA	AUDF1	;3
   1251  f63b		       a9 0c		      LDA	#12	;2
   1252  f63d		       85 16		      STA	AUDC1	;3
   1253  f63f		       a9 03		      LDA	#3	;2
   1254  f641		       85 1a		      STA	AUDV1	;3
   1255  f643		       4c 4a f6 	      JMP	EndRightSound	;3
   1256  f646
   1257  f646				   MuteRightSound
   1258  f646		       a9 00		      LDA	#0
   1259  f648		       85 1a		      STA	AUDV1
   1260  f64a				   EndRightSound
   1261  f64a
   1262  f64a
   1263  f64a				   OverScanWait
   1264  f64a		       ad 84 02 	      LDA	INTIM
   1265  f64d		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1266  f64f		       4c 84 f0 	      JMP	MainLoop
   1267  f652
   1268  f652				   Subroutines
   1269  f652
   1270  f652				   ClearAll		; 52
   1271  f652		       a9 00		      LDA	#0	;2
   1272  f654		       85 1c		      STA	GRP1	;3
   1273  f656		       85 1f		      STA	ENABL	;3
   1274  f658		       85 1d		      STA	ENAM0	;3
   1275  f65a		       85 1e		      STA	ENAM1	;3
   1276  f65c		       85 84		      STA	GRP1Cache	;3
   1277  f65e		       85 85		      STA	ENABLCache	;3
   1278  f660		       85 86		      STA	ENAM0Cache	;3
   1279  f662		       85 87		      STA	ENAM1Cache	;3
   1280  f664
   1281  f664				   ClearPF		; 26
   1282  f664		       a9 00		      LDA	#0	;2
   1283  f666				   ClearPFSkipLDA0
   1284  f666		       85 0d		      STA	PF0	;3
   1285  f668		       85 0e		      STA	PF1	;3
   1286  f66a		       85 0f		      STA	PF2	;3	
   1287  f66c		       85 81		      STA	PF0Cache	;3
   1288  f66e		       85 82		      STA	PF1Cache	;3
   1289  f670		       85 83		      STA	PF2Cache	;3 
   1290  f672		       60		      RTS		;6
   1291  f673				   EndClearAll
   1292  f673
   1293  f673				   LoadAll		; 48
   1294  f673		       a5 81		      LDA	PF0Cache	;3
   1295  f675		       85 0d		      STA	PF0	;3
   1296  f677
   1297  f677		       a5 82		      LDA	PF1Cache	;3
   1298  f679		       85 0e		      STA	PF1	;3
   1299  f67b
   1300  f67b		       a5 83		      LDA	PF2Cache	;3
   1301  f67d		       85 0f		      STA	PF2	;3
   1302  f67f
   1303  f67f		       a5 84		      LDA	GRP1Cache	;3
   1304  f681		       85 1c		      STA	GRP1	;3
   1305  f683
   1306  f683		       a5 85		      LDA	ENABLCache	;3
   1307  f685		       85 1f		      STA	ENABL	;3
   1308  f687
   1309  f687		       a5 86		      LDA	ENAM0Cache	;3
   1310  f689		       85 1d		      STA	ENAM0	;3
   1311  f68b
   1312  f68b		       a5 87		      LDA	ENAM1Cache	;3
   1313  f68d		       85 1e		      STA	ENAM1	;3
   1314  f68f
   1315  f68f		       60		      RTS		;6
   1316  f690				   EndLoadAll
   1317  f690
   1318  f690				   NextDifficulty
   1319  f690		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1320  f692		       29 01		      AND	#%00000001
   1321  f694		       d0 3f		      BNE	CheckRandomDifficulty
   1322  f696
   1323  f696		       a5 c4		      LDA	CurrentDifficulty
   1324  f698		       18		      CLC
   1325  f699		       69 01		      ADC	#1
   1326  f69b		       29 03		      AND	#%00000011	; 0 to 3
   1327  f69d		       85 c4		      STA	CurrentDifficulty
   1328  f69f
   1329  f69f				   ConfigureDifficulty
   1330  f69f		       a5 c4		      LDA	CurrentDifficulty
   1331  f6a1		       f0 0b		      BEQ	ConfigureLightTraffic
   1332  f6a3		       c9 01		      CMP	#1
   1333  f6a5		       f0 10		      BEQ	ConfigureRegularTraffic
   1334  f6a7		       c9 02		      CMP	#2
   1335  f6a9		       f0 15		      BEQ	ConfigureIntenseTraffic
   1336  f6ab		       4c c9 f6 	      JMP	ConfigureRushHourTraffic
   1337  f6ae
   1338  f6ae				   ConfigureLightTraffic
   1339  f6ae		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1340  f6b0		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1341  f6b2		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1342  f6b4		       4c cf f6 	      JMP	StoreTrafficChance
   1343  f6b7				   ConfigureRegularTraffic
   1344  f6b7		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1345  f6b9		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1346  f6bb		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1347  f6bd		       4c cf f6 	      JMP	StoreTrafficChance
   1348  f6c0				   ConfigureIntenseTraffic
   1349  f6c0		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1350  f6c2		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1351  f6c4		       a9 f4		      LDA	#TRAFFIC_COLOR_INTENSE
   1352  f6c6		       4c cf f6 	      JMP	StoreTrafficChance
   1353  f6c9				   ConfigureRushHourTraffic
   1354  f6c9		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1355  f6cb		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1356  f6cd		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1357  f6cf
   1358  f6cf				   StoreTrafficChance
   1359  f6cf		       86 c1		      STX	TrafficChance
   1360  f6d1		       84 c2		      STY	CheckpointTime
   1361  f6d3		       85 c3		      STA	TrafficColor
   1362  f6d5
   1363  f6d5				   CheckRandomDifficulty
   1364  f6d5		       a5 c5		      LDA	GameMode
   1365  f6d7		       29 08		      AND	#%00001000	; Random difficulties
   1366  f6d9		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1367  f6db				   RandomDificulty
   1368  f6db		       a6 8c		      LDX	FrameCount0
   1369  f6dd		       bd 00 fe 	      LDA	AesTable,X
   1370  f6e0		       45 c1		      EOR	TrafficChance
   1371  f6e2		       29 3f		      AND	#%00111111
   1372  f6e4		       85 c1		      STA	TrafficChance
   1373  f6e6
   1374  f6e6				   ReturnFromNextDifficulty
   1375  f6e6		       60		      RTS
   1376  f6e7				   EndNextDifficulty
   1377  f6e7
   1378  f6e7				   DefaultOffsets
   1379  f6e7		       a9 20		      LDA	#$20
   1380  f6e9		       85 96		      STA	TrafficOffset1 + 2
   1381  f6eb		       a9 40		      LDA	#$40
   1382  f6ed		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1383  f6ef		       a9 60		      LDA	#$60
   1384  f6f1		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1385  f6f3		       a9 80		      LDA	#$80
   1386  f6f5		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1387  f6f7		       a9 a0		      LDA	#$A0
   1388  f6f9		       60		      RTS
   1389  f6fa
   1390  f6fa				   PrintStaticText		; Preload X with the offset referent to StaticText
   1391  f6fa		       bd 00 ff 	      LDA	StaticText,X
   1392  f6fd		       85 d0		      STA	ScoreD0
   1393  f6ff		       e8		      INX
   1394  f700		       bd 00 ff 	      LDA	StaticText,X
   1395  f703		       85 d1		      STA	ScoreD1
   1396  f705		       e8		      INX
   1397  f706		       bd 00 ff 	      LDA	StaticText,X
   1398  f709		       85 d2		      STA	ScoreD2
   1399  f70b		       e8		      INX
   1400  f70c		       bd 00 ff 	      LDA	StaticText,X
   1401  f70f		       85 d3		      STA	ScoreD3
   1402  f711		       e8		      INX
   1403  f712		       bd 00 ff 	      LDA	StaticText,X
   1404  f715		       85 d4		      STA	ScoreD4
   1405  f717		       60		      RTS
   1406  f718
   1407  f718				   Sleep16
   1408  f718		       ea		      NOP
   1409  f719		       ea		      NOP
   1410  f71a		       60		      RTS
   1411  f71b
   1412  f71b				   HorizontalParallaxLoop
   1413  f71b		       a9 ef		      LDA	#%11101111	; Clear the house
   1414  f71d		       39 d8 00 	      AND	ParallaxCache,Y
   1415  f720		       99 d8 00 	      STA	ParallaxCache,Y
   1416  f723				   CalculateParallax0
   1417  f723		       98		      TYA
   1418  f724		       18		      CLC
   1419  f725		       65 91		      ADC	TrafficOffset0 + 1
   1420  f727		       29 04		      AND	#%00000100
   1421  f729		       f0 08		      BEQ	HasEmptySpace0
   1422  f72b				   HasBorder0
   1423  f72b		       b9 d8 00 	      LDA	ParallaxCache,Y
   1424  f72e		       09 0f		      ORA	#%00001111
   1425  f730		       4c 38 f7 	      JMP	StoreParallax0
   1426  f733				   HasEmptySpace0
   1427  f733		       b9 d8 00 	      LDA	ParallaxCache,Y
   1428  f736		       29 f0		      AND	#%11110000
   1429  f738
   1430  f738				   StoreParallax0
   1431  f738		       99 d8 00 	      STA	ParallaxCache,Y
   1432  f73b
   1433  f73b				   CalculateParallax1
   1434  f73b		       98		      TYA
   1435  f73c		       18		      CLC
   1436  f73d		       65 c7		      ADC	ParallaxOffset1 + 1
   1437  f73f		       29 04		      AND	#%00000100
   1438  f741		       f0 08		      BEQ	HasEmptySpace1
   1439  f743				   HasBorder1
   1440  f743		       b9 d8 00 	      LDA	ParallaxCache,Y
   1441  f746		       09 e0		      ORA	#%11100000
   1442  f748		       4c 50 f7 	      JMP	StoreParallax1
   1443  f74b				   HasEmptySpace1
   1444  f74b		       b9 d8 00 	      LDA	ParallaxCache,Y
   1445  f74e		       29 1f		      AND	#%00011111
   1446  f750
   1447  f750				   StoreParallax1
   1448  f750		       99 d8 00 	      STA	ParallaxCache,Y
   1449  f753
   1450  f753				   CalculateParallax2
   1451  f753		       98		      TYA
   1452  f754		       18		      CLC
   1453  f755		       65 c9		      ADC	ParallaxOffset2 + 1
   1454  f757		       29 04		      AND	#%00000100
   1455  f759		       f0 05		      BEQ	HasEmptySpace2
   1456  f75b				   HasBorder2
   1457  f75b		       a9 60		      LDA	#%01100000
   1458  f75d		       4c 62 f7 	      JMP	StoreParallax2
   1459  f760				   HasEmptySpace2
   1460  f760		       a9 00		      LDA	#0
   1461  f762
   1462  f762				   StoreParallax2
   1463  f762		       99 f0 00 	      STA	ParallaxCache2,Y
   1464  f765
   1465  f765				   ContinueHorizontalParallaxLoop
   1466  f765		       88		      DEY
   1467  f766		       10 b3		      BPL	HorizontalParallaxLoop
   1468  f768		       60		      RTS
   1469  f769
   1470  f769				   DefaultBorderLoop
   1471  f769				   CalculateDefaultBorder
   1472  f769		       98		      TYA
   1473  f76a		       18		      CLC
   1474  f76b		       65 91		      ADC	TrafficOffset0 + 1
   1475  f76d		       29 04		      AND	#%00000100
   1476  f76f		       f0 05		      BEQ	HasEmptySpace
   1477  f771				   HasBorder
   1478  f771		       a9 ff		      LDA	#$FF
   1479  f773		       4c 78 f7 	      JMP	StoreBorder
   1480  f776				   HasEmptySpace
   1481  f776		       a9 00		      LDA	#0
   1482  f778
   1483  f778				   StoreBorder
   1484  f778		       99 d8 00 	      STA	ParallaxCache,Y
   1485  f77b		       a9 00		      LDA	#0
   1486  f77d		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1487  f780
   1488  f780				   ContinueDefaultBorderLoop
   1489  f780		       88		      DEY
   1490  f781		       10 e6		      BPL	DefaultBorderLoop
   1491  f783		       60		      RTS
   1492  f784
   1493  f784				   PrepareTachometerBorderLoop
   1494  f784		       a5 8e		      LDA	Player0SpeedL
   1495  f786		       29 80		      AND	#%10000000
   1496  f788		       05 8f		      ORA	Player0SpeedH
   1497  f78a		       18		      CLC
   1498  f78b		       2a		      ROL
   1499  f78c		       69 00		      ADC	#0
   1500  f78e		       85 b0		      STA	Tmp0	; Gear
   1501  f790		       a5 8e		      LDA	Player0SpeedL
   1502  f792		       4a		      LSR
   1503  f793		       4a		      LSR
   1504  f794		       4a		      LSR
   1505  f795		       4a		      LSR
   1506  f796		       29 07		      AND	#%00000111
   1507  f798		       85 b1		      STA	Tmp1	; RPM
   1508  f79a
   1509  f79a				   TachometerBorderLoop
   1510  f79a		       98		      TYA
   1511  f79b		       18		      CLC
   1512  f79c		       65 91		      ADC	TrafficOffset0 + 1
   1513  f79e		       29 04		      AND	#%00000100
   1514  f7a0		       f0 10		      BEQ	HasBorderTac
   1515  f7a2		       a6 b0		      LDX	Tmp0
   1516  f7a4		       bd db fd 	      LDA	TachometerGearLookup,X
   1517  f7a7		       99 d8 00 	      STA	ParallaxCache,Y
   1518  f7aa		       a9 00		      LDA	#0
   1519  f7ac		       99 f0 00 	      STA	ParallaxCache2,Y
   1520  f7af		       4c d4 f7 	      JMP	ContinueBorderTac
   1521  f7b2				   HasBorderTac
   1522  f7b2		       a9 05		      LDA	#5
   1523  f7b4		       c5 b0		      CMP	Tmp0	; Only on max speed
   1524  f7b6		       f0 11		      BEQ	FullBorderTac
   1525  f7b8		       a6 b1		      LDX	Tmp1
   1526  f7ba		       bd cb fd 	      LDA	TachometerSizeLookup1,X
   1527  f7bd		       99 d8 00 	      STA	ParallaxCache,Y
   1528  f7c0		       bd d3 fd 	      LDA	TachometerSizeLookup2,X
   1529  f7c3		       99 f0 00 	      STA	ParallaxCache2,Y
   1530  f7c6		       4c d4 f7 	      JMP	ContinueBorderTac
   1531  f7c9
   1532  f7c9				   FullBorderTac
   1533  f7c9		       a9 ff		      LDA	#$FF
   1534  f7cb		       99 d8 00 	      STA	ParallaxCache,Y
   1535  f7ce		       99 f0 00 	      STA	ParallaxCache2,Y
   1536  f7d1		       4c d4 f7 	      JMP	ContinueBorderTac
   1537  f7d4
   1538  f7d4				   ContinueBorderTac
   1539  f7d4		       88		      DEY
   1540  f7d5		       10 c3		      BPL	TachometerBorderLoop
   1541  f7d7		       60		      RTS
   1542  f7d8
   1543  f7d8				   VerticalParallaxLoop
   1544  f7d8				   CalculateVerticalParallax0
   1545  f7d8		       98		      TYA
   1546  f7d9		       18		      CLC
   1547  f7da		       65 91		      ADC	TrafficOffset0 + 1
   1548  f7dc		       29 06		      AND	#%00000110
   1549  f7de		       d0 0b		      BNE	HasNoVerticalLine0
   1550  f7e0				   HasVerticalLine0
   1551  f7e0		       a9 ff		      LDA	#$FF
   1552  f7e2		       99 d8 00 	      STA	ParallaxCache,Y
   1553  f7e5		       99 f0 00 	      STA	ParallaxCache2,Y
   1554  f7e8		       4c 28 f8 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1555  f7eb				   HasNoVerticalLine0
   1556  f7eb		       a9 00		      LDA	#0
   1557  f7ed		       99 d8 00 	      STA	ParallaxCache,Y
   1558  f7f0		       99 f0 00 	      STA	ParallaxCache2,Y
   1559  f7f3
   1560  f7f3				   CalculateVerticalParallax1
   1561  f7f3		       98		      TYA
   1562  f7f4		       18		      CLC
   1563  f7f5		       65 c7		      ADC	ParallaxOffset1 + 1
   1564  f7f7		       29 07		      AND	#%00000111
   1565  f7f9		       d0 0d		      BNE	HasNoVerticalLine1
   1566  f7fb
   1567  f7fb				   HasVerticalLine1
   1568  f7fb		       a9 fc		      LDA	#%11111100
   1569  f7fd		       99 d8 00 	      STA	ParallaxCache,Y
   1570  f800		       a9 c0		      LDA	#%11000000
   1571  f802		       99 f0 00 	      STA	ParallaxCache2,Y
   1572  f805		       4c 28 f8 	      JMP	ContinueVerticalParallaxLoop
   1573  f808				   HasNoVerticalLine1
   1574  f808		       a9 00		      LDA	#0
   1575  f80a		       99 d8 00 	      STA	ParallaxCache,Y
   1576  f80d		       99 f0 00 	      STA	ParallaxCache2,Y
   1577  f810
   1578  f810				   CalculateVerticalParallax2
   1579  f810		       98		      TYA
   1580  f811		       18		      CLC
   1581  f812		       65 c9		      ADC	ParallaxOffset2 + 1
   1582  f814		       29 07		      AND	#%00000111
   1583  f816		       d0 08		      BNE	HasNoVerticalLine2
   1584  f818
   1585  f818				   HasVerticalLine2
   1586  f818		       a9 f0		      LDA	#%11110000
   1587  f81a		       99 d8 00 	      STA	ParallaxCache,Y
   1588  f81d		       4c 28 f8 	      JMP	ContinueVerticalParallaxLoop
   1589  f820				   HasNoVerticalLine2
   1590  f820		       a9 00		      LDA	#0
   1591  f822		       99 d8 00 	      STA	ParallaxCache,Y
   1592  f825		       99 f0 00 	      STA	ParallaxCache2,Y
   1593  f828
   1594  f828				   ContinueVerticalParallaxLoop
   1595  f828		       88		      DEY
   1596  f829		       10 ad		      BPL	VerticalParallaxLoop
   1597  f82b		       60		      RTS
   1598  f82c
   1599  f82c				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1600  f82c		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1601  f82e		       85 d5		      STA	ScoreFontColor
   1602  f830		       a9 01		      LDA	#1
   1603  f832		       85 d6		      STA	ScoreFontColorHoldChange
   1604  f834
   1605  f834		       a5 8d		      LDA	FrameCount1
   1606  f836		       29 07		      AND	#%00000111
   1607  f838		       85 b3		      STA	Tmp3
   1608  f83a							;0 is Zelda Name, (default)
   1609  f83a		       a9 01		      LDA	#1
   1610  f83c		       c5 b3		      CMP	Tmp3
   1611  f83e		       f0 38		      BEQ	PrintZeldaDateLeft
   1612  f840
   1613  f840		       a9 02		      LDA	#2
   1614  f842		       c5 b3		      CMP	Tmp3
   1615  f844		       f0 23		      BEQ	PrintPolvinhosLeft
   1616  f846
   1617  f846		       a9 03		      LDA	#3
   1618  f848		       c5 b3		      CMP	Tmp3
   1619  f84a		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1620  f84c
   1621  f84c		       a9 04		      LDA	#4
   1622  f84e		       c5 b3		      CMP	Tmp3
   1623  f850		       f0 1c		      BEQ	PrintIvonneLeft
   1624  f852
   1625  f852		       a9 05		      LDA	#5
   1626  f854		       c5 b3		      CMP	Tmp3
   1627  f856		       f0 2a		      BEQ	PrintIvonneDateLeft
   1628  f858
   1629  f858		       a9 06		      LDA	#6
   1630  f85a		       c5 b3		      CMP	Tmp3
   1631  f85c		       f0 15		      BEQ	PrintArtLeft
   1632  f85e
   1633  f85e		       a9 07		      LDA	#7
   1634  f860		       c5 b3		      CMP	Tmp3
   1635  f862		       f0 23		      BEQ	PrintLeonardoLeft
   1636  f864
   1637  f864				   PrintZeldaLeft
   1638  f864		       a2 28		      LDX	#<ZeldaTextLeft
   1639  f866		       4c 8c f8 	      JMP	ProcessPrintEasterEgg
   1640  f869				   PrintPolvinhosLeft
   1641  f869		       a2 3c		      LDX	#<PolvinhosTextLeft
   1642  f86b		       4c 8c f8 	      JMP	ProcessPrintEasterEgg
   1643  f86e				   PrintIvonneLeft
   1644  f86e		       a2 50		      LDX	#<IvonneTextLeft
   1645  f870		       4c 8c f8 	      JMP	ProcessPrintEasterEgg
   1646  f873				   PrintArtLeft
   1647  f873		       a2 64		      LDX	#<PaperArtTextLeft
   1648  f875		       4c 8c f8 	      JMP	ProcessPrintEasterEgg
   1649  f878
   1650  f878				   PrintZeldaDateLeft
   1651  f878		       a2 32		      LDX	#<ZeldaDateLeft
   1652  f87a		       4c 8c f8 	      JMP	ProcessPrintEasterEgg
   1653  f87d				   PrintPolvinhosDateLeft
   1654  f87d		       a2 46		      LDX	#<PolvinhosDateLeft
   1655  f87f		       4c 8c f8 	      JMP	ProcessPrintEasterEgg
   1656  f882				   PrintIvonneDateLeft
   1657  f882		       a2 5a		      LDX	#<IvonneDateLeft
   1658  f884		       4c 8c f8 	      JMP	ProcessPrintEasterEgg
   1659  f887				   PrintLeonardoLeft
   1660  f887		       a2 6e		      LDX	#<LeonardoTextLeft
   1661  f889		       4c 8c f8 	      JMP	ProcessPrintEasterEgg
   1662  f88c
   1663  f88c				   ProcessPrintEasterEgg
   1664  f88c		       a5 8c		      LDA	FrameCount0	;3
   1665  f88e		       29 01		      AND	#%00000001	;2
   1666  f890		       d0 03		      BNE	TranformIntoRightText
   1667  f892		       4c 9a f8 	      JMP	PrintEasterEggText
   1668  f895				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1669  f895		       8a		      TXA
   1670  f896		       18		      CLC
   1671  f897		       69 05		      ADC	#HALF_TEXT_SIZE
   1672  f899		       aa		      TAX
   1673  f89a
   1674  f89a				   PrintEasterEggText
   1675  f89a		       20 fa f6 	      JSR	PrintStaticText
   1676  f89d		       60		      RTS
   1677  f89e
   1678  f89e							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   1679  fd00					      org	$FD00
   1680  fd00				   Font
   1681  fd00				   C0
   1682  fd00		       e7		      .byte.b	#%11100111	;
   1683  fd01		       a5		      .byte.b	#%10100101	; 
   1684  fd02		       a5		      .byte.b	#%10100101	; 
   1685  fd03		       a5		      .byte.b	#%10100101	; 
   1686  fd04		       e7		      .byte.b	#%11100111	;	
   1687  fd05				   C1
   1688  fd05		       e7		      .byte.b	#%11100111	;
   1689  fd06		       42		      .byte.b	#%01000010	; 
   1690  fd07		       42		      .byte.b	#%01000010	; 
   1691  fd08		       42		      .byte.b	#%01000010	; 
   1692  fd09		       66		      .byte.b	#%01100110	;
   1693  fd0a				   C2
   1694  fd0a		       e7		      .byte.b	#%11100111	;
   1695  fd0b		       24		      .byte.b	#%00100100	; 
   1696  fd0c		       e7		      .byte.b	#%11100111	; 
   1697  fd0d		       81		      .byte.b	#%10000001	; 
   1698  fd0e		       e7		      .byte.b	#%11100111	;
   1699  fd0f				   C3
   1700  fd0f		       e7		      .byte.b	#%11100111	;
   1701  fd10		       81		      .byte.b	#%10000001	; 
   1702  fd11		       e7		      .byte.b	#%11100111	; 
   1703  fd12		       81		      .byte.b	#%10000001	; 
   1704  fd13		       e7		      .byte.b	#%11100111	;
   1705  fd14				   C4
   1706  fd14		       81		      .byte.b	#%10000001	;
   1707  fd15		       81		      .byte.b	#%10000001	; 
   1708  fd16		       e7		      .byte.b	#%11100111	; 
   1709  fd17		       a5		      .byte.b	#%10100101	; 
   1710  fd18		       a5		      .byte.b	#%10100101	;
   1711  fd19				   C5
   1712  fd19		       e7		      .byte.b	#%11100111	;
   1713  fd1a		       81		      .byte.b	#%10000001	; 
   1714  fd1b		       e7		      .byte.b	#%11100111	; 
   1715  fd1c		       24		      .byte.b	#%00100100	; 
   1716  fd1d		       e7		      .byte.b	#%11100111	;
   1717  fd1e				   C6
   1718  fd1e		       e7		      .byte.b	#%11100111	;
   1719  fd1f		       a5		      .byte.b	#%10100101	; 
   1720  fd20		       e7		      .byte.b	#%11100111	; 
   1721  fd21		       24		      .byte.b	#%00100100	; 
   1722  fd22		       e7		      .byte.b	#%11100111	;
   1723  fd23				   C7
   1724  fd23		       81		      .byte.b	#%10000001	;
   1725  fd24		       81		      .byte.b	#%10000001	; 
   1726  fd25		       81		      .byte.b	#%10000001	; 
   1727  fd26		       81		      .byte.b	#%10000001	; 
   1728  fd27		       e7		      .byte.b	#%11100111	;
   1729  fd28				   C8
   1730  fd28		       e7		      .byte.b	#%11100111	;
   1731  fd29		       a5		      .byte.b	#%10100101	; 
   1732  fd2a		       e7		      .byte.b	#%11100111	; 
   1733  fd2b		       a5		      .byte.b	#%10100101	; 
   1734  fd2c		       e7		      .byte.b	#%11100111	;
   1735  fd2d				   C9
   1736  fd2d		       e7		      .byte.b	#%11100111	;
   1737  fd2e		       81		      .byte.b	#%10000001	; 
   1738  fd2f		       e7		      .byte.b	#%11100111	; 
   1739  fd30		       a5		      .byte.b	#%10100101	; 
   1740  fd31		       e7		      .byte.b	#%11100111	;
   1741  fd32				   CA
   1742  fd32		       a5		      .byte.b	#%10100101	;
   1743  fd33		       a5		      .byte.b	#%10100101	; 
   1744  fd34		       e7		      .byte.b	#%11100111	; 
   1745  fd35		       a5		      .byte.b	#%10100101	; 
   1746  fd36		       e7		      .byte.b	#%11100111	;
   1747  fd37				   CB
   1748  fd37		       66		      .byte.b	#%01100110	;
   1749  fd38		       a5		      .byte.b	#%10100101	; 
   1750  fd39		       66		      .byte.b	#%01100110	; 
   1751  fd3a		       a5		      .byte.b	#%10100101	;
   1752  fd3b		       66		      .byte.b	#%01100110	;
   1753  fd3c				   CC
   1754  fd3c		       e7		      .byte.b	#%11100111	;
   1755  fd3d		       24		      .byte.b	#%00100100	; 
   1756  fd3e		       24		      .byte.b	#%00100100	; 
   1757  fd3f		       24		      .byte.b	#%00100100	;
   1758  fd40		       e7		      .byte.b	#%11100111	;
   1759  fd41
   1760  fd41				   CD
   1761  fd41		       66		      .byte.b	#%01100110	;
   1762  fd42		       a5		      .byte.b	#%10100101	; 
   1763  fd43		       a5		      .byte.b	#%10100101	; 
   1764  fd44		       a5		      .byte.b	#%10100101	;
   1765  fd45		       66		      .byte.b	#%01100110	;
   1766  fd46
   1767  fd46				   CE
   1768  fd46		       e7		      .byte.b	#%11100111	;
   1769  fd47		       24		      .byte.b	#%00100100	; 
   1770  fd48		       e7		      .byte.b	#%11100111	; 
   1771  fd49		       24		      .byte.b	#%00100100	; 
   1772  fd4a		       e7		      .byte.b	#%11100111	;
   1773  fd4b
   1774  fd4b				   CF
   1775  fd4b		       24		      .byte.b	#%00100100	;
   1776  fd4c		       24		      .byte.b	#%00100100	; 
   1777  fd4d		       e7		      .byte.b	#%11100111	; 
   1778  fd4e		       24		      .byte.b	#%00100100	; 
   1779  fd4f		       e7		      .byte.b	#%11100111	;
   1780  fd50
   1781  fd50				   CG
   1782  fd50		       c3		      .byte.b	#%11000011	;
   1783  fd51		       a5		      .byte.b	#%10100101	; 
   1784  fd52		       a5		      .byte.b	#%10100101	; 
   1785  fd53		       24		      .byte.b	#%00100100	; 
   1786  fd54		       c3		      .byte.b	#%11000011	;	
   1787  fd55
   1788  fd55				   CH
   1789  fd55		       a5		      .byte.b	#%10100101	;
   1790  fd56		       a5		      .byte.b	#%10100101	; 
   1791  fd57		       e7		      .byte.b	#%11100111	; 
   1792  fd58		       a5		      .byte.b	#%10100101	; 
   1793  fd59		       a5		      .byte.b	#%10100101	;
   1794  fd5a
   1795  fd5a				   CL
   1796  fd5a		       e7		      .byte.b	#%11100111	;
   1797  fd5b		       24		      .byte.b	#%00100100	; 
   1798  fd5c		       24		      .byte.b	#%00100100	; 
   1799  fd5d		       24		      .byte.b	#%00100100	; 
   1800  fd5e		       24		      .byte.b	#%00100100	;
   1801  fd5f
   1802  fd5f				   CI
   1803  fd5f		       42		      .byte.b	#%01000010	;
   1804  fd60		       42		      .byte.b	#%01000010	; 
   1805  fd61		       42		      .byte.b	#%01000010	; 
   1806  fd62		       42		      .byte.b	#%01000010	; 
   1807  fd63		       42		      .byte.b	#%01000010	;
   1808  fd64
   1809  fd64				   CM
   1810  fd64		       a5		      .byte.b	#%10100101	;
   1811  fd65		       a5		      .byte.b	#%10100101	; 
   1812  fd66		       a5		      .byte.b	#%10100101	; 
   1813  fd67		       e7		      .byte.b	#%11100111	; 
   1814  fd68		       a5		      .byte.b	#%10100101	;
   1815  fd69
   1816  fd69				   CN
   1817  fd69		       a5		      .byte.b	#%10100101	;
   1818  fd6a		       a5		      .byte.b	#%10100101	; 
   1819  fd6b		       a5		      .byte.b	#%10100101	; 
   1820  fd6c		       a5		      .byte.b	#%10100101	; 
   1821  fd6d		       66		      .byte.b	#%01100110	;	
   1822  fd6e
   1823  fd6e
   1824  fd6e				   CO
   1825  fd6e		       42		      .byte.b	#%01000010	;
   1826  fd6f		       a5		      .byte.b	#%10100101	; 
   1827  fd70		       a5		      .byte.b	#%10100101	; 
   1828  fd71		       a5		      .byte.b	#%10100101	; 
   1829  fd72		       42		      .byte.b	#%01000010	;	
   1830  fd73
   1831  fd73				   CP
   1832  fd73		       24		      .byte.b	#%00100100	;
   1833  fd74		       24		      .byte.b	#%00100100	; 
   1834  fd75		       e7		      .byte.b	#%11100111	; 
   1835  fd76		       a5		      .byte.b	#%10100101	; 
   1836  fd77		       e7		      .byte.b	#%11100111	;
   1837  fd78
   1838  fd78				   CR
   1839  fd78		       a5		      .byte.b	#%10100101	;
   1840  fd79		       a5		      .byte.b	#%10100101	; 
   1841  fd7a		       66		      .byte.b	#%01100110	; 
   1842  fd7b		       a5		      .byte.b	#%10100101	; 
   1843  fd7c		       66		      .byte.b	#%01100110	;
   1844  fd7d
   1845  fd7d				   CS
   1846  fd7d		       66		      .byte.b	#%01100110	;
   1847  fd7e		       81		      .byte.b	#%10000001	; 
   1848  fd7f		       42		      .byte.b	#%01000010	; 
   1849  fd80		       24		      .byte.b	#%00100100	; 
   1850  fd81		       c3		      .byte.b	#%11000011	;
   1851  fd82
   1852  fd82				   CT
   1853  fd82		       42		      .byte.b	#%01000010	;
   1854  fd83		       42		      .byte.b	#%01000010	; 
   1855  fd84		       42		      .byte.b	#%01000010	; 
   1856  fd85		       42		      .byte.b	#%01000010	; 
   1857  fd86		       e7		      .byte.b	#%11100111	;
   1858  fd87
   1859  fd87				   CV
   1860  fd87		       42		      .byte.b	#%01000010	;
   1861  fd88		       a5		      .byte.b	#%10100101	; 
   1862  fd89		       a5		      .byte.b	#%10100101	; 
   1863  fd8a		       a5		      .byte.b	#%10100101	; 
   1864  fd8b		       a5		      .byte.b	#%10100101	;	
   1865  fd8c
   1866  fd8c				   CY
   1867  fd8c		       42		      .byte.b	#%01000010	;
   1868  fd8d		       42		      .byte.b	#%01000010	; 
   1869  fd8e		       42		      .byte.b	#%01000010	; 
   1870  fd8f		       a5		      .byte.b	#%10100101	; 
   1871  fd90		       a5		      .byte.b	#%10100101	;
   1872  fd91
   1873  fd91				   CW
   1874  fd91		       a5		      .byte.b	#%10100101	;
   1875  fd92		       e7		      .byte.b	#%11100111	; 
   1876  fd93		       a5		      .byte.b	#%10100101	; 
   1877  fd94		       a5		      .byte.b	#%10100101	; 
   1878  fd95		       a5		      .byte.b	#%10100101	;
   1879  fd96
   1880  fd96				   CZ
   1881  fd96		       e7		      .byte.b	#%11100111	;
   1882  fd97		       24		      .byte.b	#%00100100	; 
   1883  fd98		       42		      .byte.b	#%01000010	; 
   1884  fd99		       81		      .byte.b	#%10000001	; 
   1885  fd9a		       e7		      .byte.b	#%11100111	;
   1886  fd9b
   1887  fd9b				   Pipe
   1888  fd9b		       42		      .byte.b	#%01000010	;
   1889  fd9c		       00		      .byte.b	#%00000000	; 
   1890  fd9d		       42		      .byte.b	#%01000010	; 
   1891  fd9e		       00		      .byte.b	#%00000000	; 
   1892  fd9f		       42		      .byte.b	#%01000010	;
   1893  fda0
   1894  fda0				   Exclamation
   1895  fda0		       42		      .byte.b	#%01000010	;
   1896  fda1		       00		      .byte.b	#%00000000	; 
   1897  fda2		       42		      .byte.b	#%01000010	; 
   1898  fda3		       42		      .byte.b	#%01000010	; 
   1899  fda4		       42		      .byte.b	#%01000010	;
   1900  fda5
   1901  fda5				   Dot
   1902  fda5		       42		      .byte.b	#%01000010	;
   1903  fda6		       42		      .byte.b	#%01000010	; 
   1904  fda7		       00		      .byte.b	#%00000000	; 
   1905  fda8		       00		      .byte.b	#%00000000	; 
   1906  fda9		       00		      .byte.b	#%00000000	;
   1907  fdaa
   1908  fdaa				   Space		; Moved from the beggining so 0 to F is fast to draw.
   1909  fdaa		       00		      .byte.b	#0	;
   1910  fdab		       00		      .byte.b	#0	;
   1911  fdac		       00		      .byte.b	#0	;
   1912  fdad		       00		      .byte.b	#0	;
   1913  fdae		       00		      .byte.b	#0	;
   1914  fdaf
   1915  fdaf				   FontLookup		; Very fast font lookup for dynamic values!
   1916  fdaf		       04		      .byte.b	#<C0 + #FONT_OFFSET
   1917  fdb0		       09		      .byte.b	#<C1 + #FONT_OFFSET
   1918  fdb1		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1919  fdb2		       13		      .byte.b	#<C3 + #FONT_OFFSET
   1920  fdb3		       18		      .byte.b	#<C4 + #FONT_OFFSET
   1921  fdb4		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   1922  fdb5		       22		      .byte.b	#<C6 + #FONT_OFFSET
   1923  fdb6		       27		      .byte.b	#<C7 + #FONT_OFFSET
   1924  fdb7		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   1925  fdb8		       31		      .byte.b	#<C9 + #FONT_OFFSET
   1926  fdb9		       36		      .byte.b	#<CA + #FONT_OFFSET
   1927  fdba		       3b		      .byte.b	#<CB + #FONT_OFFSET
   1928  fdbb		       40		      .byte.b	#<CC + #FONT_OFFSET
   1929  fdbc		       45		      .byte.b	#<CD + #FONT_OFFSET
   1930  fdbd		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1931  fdbe		       4f		      .byte.b	#<CF + #FONT_OFFSET
   1932  fdbf
   1933  fdbf				   EngineSoundType
   1934  fdbf		       02		      .byte.b	#2
   1935  fdc0		       02		      .byte.b	#2
   1936  fdc1		       0e		      .byte.b	#14
   1937  fdc2		       06		      .byte.b	#6
   1938  fdc3		       06		      .byte.b	#6
   1939  fdc4		       0e		      .byte.b	#14
   1940  fdc5
   1941  fdc5				   EngineBaseFrequence
   1942  fdc5		       1f		      .byte.b	#31
   1943  fdc6		       15		      .byte.b	#21
   1944  fdc7		       14		      .byte.b	#20
   1945  fdc8		       1f		      .byte.b	#31
   1946  fdc9		       16		      .byte.b	#22
   1947  fdca		       03		      .byte.b	#3
   1948  fdcb
   1949  fdcb				   TachometerSizeLookup1
   1950  fdcb		       1f		      .byte.b	#%00011111
   1951  fdcc		       3f		      .byte.b	#%00111111
   1952  fdcd		       7f		      .byte.b	#%01111111
   1953  fdce		       ff		      .byte.b	#%11111111
   1954  fdcf		       ff		      .byte.b	#%11111111
   1955  fdd0		       ff		      .byte.b	#%11111111
   1956  fdd1		       ff		      .byte.b	#%11111111
   1957  fdd2		       ff		      .byte.b	#%11111111
   1958  fdd3
   1959  fdd3				   TachometerSizeLookup2
   1960  fdd3		       00		      .byte.b	#%00000000
   1961  fdd4		       00		      .byte.b	#%00000000
   1962  fdd5		       00		      .byte.b	#%00000000
   1963  fdd6		       00		      .byte.b	#%00000000
   1964  fdd7		       80		      .byte.b	#%10000000
   1965  fdd8		       c0		      .byte.b	#%11000000
   1966  fdd9		       e0		      .byte.b	#%11100000
   1967  fdda		       f0		      .byte.b	#%11110000
   1968  fddb
   1969  fddb				   TachometerGearLookup
   1970  fddb		       01		      .byte.b	#%00000001
   1971  fddc		       02		      .byte.b	#%00000010
   1972  fddd		       04		      .byte.b	#%00000100
   1973  fdde		       08		      .byte.b	#%00001000
   1974  fddf		       10		      .byte.b	#%00010000
   1975  fde0		       30		      .byte.b	#%00110000
   1976  fde1
   1977  fe00					      org	$FE00
   1978  fe00				   AesTable
   1979  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   1980  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   1981  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   1982  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   1983  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   1984  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   1985  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   1986  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   1987  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   1988  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   1989  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   1990  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   1991  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   1992  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   1993  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   1994  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   1995  ff00
   1996  ff00							; From FF00 to FFFB (122 bytes) to use here
   1997  ff00
   1998  ff00				   StaticText		; All static text must be on the same MSB block. 
   1999  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2000  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2001  ff01		       59		      .byte.b	#<CH + #FONT_OFFSET
   2002  ff02		       77		      .byte.b	#<CP + #FONT_OFFSET
   2003  ff03		       86		      .byte.b	#<CT + #FONT_OFFSET
   2004  ff04		       a4		      .byte.b	#<Exclamation + #FONT_OFFSET
   2005  ff05
   2006  ff05				   HellwayLeftText
   2007  ff05		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2008  ff06		       9f		      .byte.b	#<Pipe + #FONT_OFFSET
   2009  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2010  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2011  ff09		       5e		      .byte.b	#<CL + #FONT_OFFSET
   2012  ff0a
   2013  ff0a				   HellwayRightText
   2014  ff0a		       5e		      .byte.b	#<CL + #FONT_OFFSET
   2015  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2016  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2017  ff0d		       90		      .byte.b	#<CY + #FONT_OFFSET
   2018  ff0e		       a4		      .byte.b	#<Exclamation + #FONT_OFFSET
   2019  ff0f
   2020  ff0f				   OpbText
   2021  ff0f		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2022  ff10		       9f		      .byte.b	#<Pipe + #FONT_OFFSET
   2023  ff11		       72		      .byte.b	#<CO + #FONT_OFFSET
   2024  ff12		       77		      .byte.b	#<CP + #FONT_OFFSET
   2025  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2026  ff14
   2027  ff14				   YearText
   2028  ff14		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2029  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2030  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2031  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2032  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2033  ff19
   2034  ff19				   GameText
   2035  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2036  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2037  ff1b		       68		      .byte.b	#<CM + #FONT_OFFSET
   2038  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2039  ff1d		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2040  ff1e
   2041  ff1e				   OverText
   2042  ff1e		       72		      .byte.b	#<CO + #FONT_OFFSET
   2043  ff1f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2044  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2045  ff21		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2046  ff22		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2047  ff23				   GoText
   2048  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2049  ff24		       72		      .byte.b	#<CO + #FONT_OFFSET
   2050  ff25		       a4		      .byte.b	#<Exclamation + #FONT_OFFSET
   2051  ff26		       a4		      .byte.b	#<Exclamation + #FONT_OFFSET
   2052  ff27		       a4		      .byte.b	#<Exclamation + #FONT_OFFSET
   2053  ff28
   2054  ff28				   ZeldaTextLeft
   2055  ff28		       9a		      .byte.b	#<CZ + #FONT_OFFSET
   2056  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2057  ff2a		       5e		      .byte.b	#<CL + #FONT_OFFSET
   2058  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2059  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2060  ff2d
   2061  ff2d				   ZeldaTextRight
   2062  ff2d		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2063  ff2e		       68		      .byte.b	#<CM + #FONT_OFFSET
   2064  ff2f		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2065  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2066  ff31		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2067  ff32
   2068  ff32				   ZeldaDateLeft
   2069  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2070  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2071  ff34		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2072  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2073  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2074  ff37
   2075  ff37				   ZeldaDateRight
   2076  ff37		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2077  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2078  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2079  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2080  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2081  ff3c
   2082  ff3c				   PolvinhosTextLeft
   2083  ff3c		       77		      .byte.b	#<CP + #FONT_OFFSET
   2084  ff3d		       72		      .byte.b	#<CO + #FONT_OFFSET
   2085  ff3e		       5e		      .byte.b	#<CL + #FONT_OFFSET
   2086  ff3f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2087  ff40		       63		      .byte.b	#<CI + #FONT_OFFSET
   2088  ff41
   2089  ff41				   PolvinhosTextRight
   2090  ff41		       6d		      .byte.b	#<CN + #FONT_OFFSET
   2091  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2092  ff43		       72		      .byte.b	#<CO + #FONT_OFFSET
   2093  ff44		       81		      .byte.b	#<CS + #FONT_OFFSET
   2094  ff45		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2095  ff46
   2096  ff46				   PolvinhosDateLeft
   2097  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2098  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2099  ff48		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2100  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2101  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2102  ff4b
   2103  ff4b				   PolvinhosDateRight
   2104  ff4b		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2105  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2106  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2107  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2108  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2109  ff50
   2110  ff50				   IvonneTextLeft
   2111  ff50		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2112  ff51		       72		      .byte.b	#<CO + #FONT_OFFSET
   2113  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2114  ff53		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2115  ff54		       63		      .byte.b	#<CI + #FONT_OFFSET
   2116  ff55
   2117  ff55				   IvonneTextRight
   2118  ff55		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2119  ff56		       72		      .byte.b	#<CO + #FONT_OFFSET
   2120  ff57		       6d		      .byte.b	#<CN + #FONT_OFFSET
   2121  ff58		       6d		      .byte.b	#<CN + #FONT_OFFSET
   2122  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2123  ff5a
   2124  ff5a				   IvonneDateLeft
   2125  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2126  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2127  ff5c		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2128  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2129  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2130  ff5f
   2131  ff5f				   IvonneDateRight
   2132  ff5f		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2133  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2134  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2135  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2136  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2137  ff64
   2138  ff64				   PaperArtTextLeft
   2139  ff64		       77		      .byte.b	#<CP + #FONT_OFFSET
   2140  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2141  ff66		       77		      .byte.b	#<CP + #FONT_OFFSET
   2142  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2143  ff68		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2144  ff69
   2145  ff69				   PaperArtTextRight
   2146  ff69		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2147  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2148  ff6b		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2149  ff6c		       86		      .byte.b	#<CT + #FONT_OFFSET
   2150  ff6d		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2151  ff6e
   2152  ff6e				   LeonardoTextLeft
   2153  ff6e		       5e		      .byte.b	#<CL + #FONT_OFFSET
   2154  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2155  ff70		       72		      .byte.b	#<CO + #FONT_OFFSET
   2156  ff71		       6d		      .byte.b	#<CN + #FONT_OFFSET
   2157  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2158  ff73
   2159  ff73				   LeonardoTextRight
   2160  ff73		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2161  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2162  ff75		       72		      .byte.b	#<CO + #FONT_OFFSET
   2163  ff76		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2164  ff77		       6d		      .byte.b	#<CN + #FONT_OFFSET
   2165  ff78
   2166  ff78
   2167  ff78				   EndStaticText
   2168  ff78
   2169  ff78				   CarSprite		; Upside down
   2170  ff78		       00 00 00 00*	      ds	6
   2171  ff7e		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   2172  ff7f		       7e		      .byte.b	#%01111110
   2173  ff80		       24		      .byte.b	#%00100100
   2174  ff81		       bd		      .byte.b	#%10111101
   2175  ff82		       3c		      .byte.b	#%00111100
   2176  ff83		       bd		      .byte.b	#%10111101
   2177  ff84		       3c		      .byte.b	#%00111100
   2178  ff85		       00 00 00 00*	      ds	GAMEPLAY_AREA - 2
   2179  ffc5
   2180  ffc5				   TrafficSpeeds
   2181  ffc5		       00		      .byte.b	#$00	;  Trafic0 L
   2182  ffc6		       00		      .byte.b	#$00	;  Trafic0 H
   2183  ffc7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2184  ffc8		       01		      .byte.b	#$01	;  Trafic1 H
   2185  ffc9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2186  ffca		       00		      .byte.b	#$00	;  Trafic2 H
   2187  ffcb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2188  ffcc		       00		      .byte.b	#$00	;  Trafic3 H
   2189  ffcd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2190  ffce		       00		      .byte.b	#$00	;  Trafic4 H
   2191  ffcf				   TrafficSpeedsHighDelta
   2192  ffcf		       00		      .byte.b	#$00	;  Trafic0 L
   2193  ffd0		       00		      .byte.b	#$00	;  Trafic0 H
   2194  ffd1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2195  ffd2		       01		      .byte.b	#$01	;  Trafic1 H
   2196  ffd3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2197  ffd4		       00		      .byte.b	#$00	;  Trafic2 H
   2198  ffd5		       86		      .byte.b	#$86	;  Trafic3 L
   2199  ffd6		       00		      .byte.b	#$00	;  Trafic3 H
   2200  ffd7		       44		      .byte.b	#$44	;  Trafic4 L
   2201  ffd8		       00		      .byte.b	#$00	;  Trafic4 H
   2202  ffd9
   2203  fffc					      org	$FFFC
   2204  fffc		       00 f0		      .word.w	BeforeStart
   2205  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
