------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 07	   CAR_SIZE   =	7
     11  f000		       00 06	   TRAFFIC_LINE_COUNT =	6
     12  f000		       00 0a	   CAR_0_Y    =	10
     13  f000							;16 bit precision
     14  f000							;640 max speed!
     15  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     16  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     17  f000		       00 00	   CAR_MIN_SPEED_H =	0
     18  f000		       00 00	   CAR_MIN_SPEED_L =	0
     19  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     20  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     21  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     22  f000		       00 01	   ACCELERATE_SPEED =	1
     23  f000		       00 04	   BREAK_SPEED =	4
     24  f000		       00 10	   ROM_START_MSB =	$10
     25  f000							;For now, will use in aal rows until figure out if make it dynamic or not.
     26  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000
     27  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     28  f000
     29  f000		       00 34	   TRAFFIC_COLOR =	$34
     30  f000
     31  f000							;memory	
     32  f000		       00 80	   Car0Line   =	$80
     33  f000
     34  f000		       00 81	   GRP0Cache  =	$81
     35  f000		       00 82	   PF0Cache   =	$82
     36  f000		       00 83	   PF1Cache   =	$83
     37  f000		       00 84	   PF2Cache   =	$84
     38  f000
     39  f000		       00 86	   FrameCount0 =	$86	;
     40  f000		       00 87	   FrameCount1 =	$87	;
     41  f000
     42  f000		       00 88	   Car0SpeedL =	$88
     43  f000		       00 89	   Car0SpeedH =	$89
     44  f000
     45  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     46  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     47  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     48  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     49  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     50  f000		       00 a4	   TrafficOffset5 =	$A4	; Traffic 1 $A5 $A6 (24 bit) $A7 is cache
     51  f000
     52  f000							;Temporary variables, multiple uses
     53  f000		       00 b0	   Tmp0       =	$B0
     54  f000		       00 b1	   Tmp1       =	$B1
     55  f000		       00 b2	   Tmp2       =	$B2
     56  f000
     57  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     58  f000
     59  f000							;generic start up stuff, put zero in all...
     60  f000				   Start
     61  f000		       78		      SEI
     62  f001		       d8		      CLD
     63  f002		       a2 ff		      LDX	#$FF
     64  f004		       9a		      TXS
     65  f005		       a9 00		      LDA	#0
     66  f007				   ClearMem
     67  f007		       95 00		      STA	0,X
     68  f009		       ca		      DEX
     69  f00a		       d0 fb		      BNE	ClearMem
     70  f00c
     71  f00c							;Setting some variables...
     72  f00c
     73  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     74  f00e		       85 06		      STA	COLUP0
     75  f010
     76  f010		       a9 85		      LDA	#PLAYER_2_COLOR
     77  f012		       85 07		      STA	COLUP1
     78  f014
     79  f014		       a9 ff		      LDA	#$FF
     80  f016		       85 1e		      STA	ENAM1
     81  f018
     82  f018
     83  f018		       a9 ff		      LDA	#$FF
     84  f01a		       85 1f		      STA	ENABL
     85  f01c
     86  f01c							;LDA #$FF
     87  f01c		       85 1c		      STA	GRP1
     88  f01e
     89  f01e		       a9 33		      LDA	#%00110011
     90  f020		       85 05		      STA	NUSIZ1
     91  f022
     92  f022		       a9 30		      LDA	#%00110000
     93  f024		       85 0a		      STA	CTRLPF
     94  f026
     95  f026		       a9 0a		      LDA	#10
     96  f028		       85 94		      STA	TrafficOffset1	;Initial Y Position
     97  f02a
     98  f02a							;Extract to subrotine? Used also dor the offsets
     99  f02a		       a9 00		      LDA	#CAR_MIN_SPEED_L
    100  f02c		       85 88		      STA	Car0SpeedL
    101  f02e		       a9 00		      LDA	#CAR_MIN_SPEED_H
    102  f030		       85 89		      STA	Car0SpeedH
    103  f032
    104  f032							;Traffic colour
    105  f032		       a9 34		      LDA	#TRAFFIC_COLOR
    106  f034		       85 08		      STA	COLUPF
    107  f036
    108  f036
    109  f036							;VSYNC time
    110  f036				   MainLoop
    111  f036		       a9 02		      LDA	#2
    112  f038		       85 00		      STA	VSYNC
    113  f03a		       85 02		      STA	WSYNC
    114  f03c		       85 02		      STA	WSYNC
    115  f03e							;Cool, can put code here! It removed the black line on top
    116  f03e							;Make Objects move in the X axys
    117  f03e		       85 2a		      STA	HMOVE	;2
    118  f040							;This must be done after a WSync, otherwise it is impossible to predict the X position
    119  f040		       a5 c0		      LDA	GameStatus	;3
    120  f042		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    121  f044		       f0 20		      BEQ	DoNotSetPlayerX	;3
    122  f046							;Do something better with this 32 cycles
      0  f046					      SLEEP	14	;
      1  f046				   .CYCLES    SET	14
      2  f046
      3  f046				  -	      IF	.CYCLES < 2
      4  f046				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f046				  -	      ERR
      6  f046					      ENDIF
      7  f046
      8  f046				  -	      IF	.CYCLES & 1
      9  f046				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f046				  -	      nop	0
     11  f046				  -	      ELSE
     12  f046				  -	      bit	VSYNC
     13  f046				  -	      ENDIF
     14  f046				  -.CYCLES    SET	.CYCLES - 3
     15  f046					      ENDIF
     16  f046
     17  f046					      REPEAT	.CYCLES / 2
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     17  f047					      REPEND
     18  f048		       ea		      nop
     17  f048					      REPEND
     18  f049		       ea		      nop
     17  f049					      REPEND
     18  f04a		       ea		      nop
     17  f04a					      REPEND
     18  f04b		       ea		      nop
     17  f04b					      REPEND
     18  f04c		       ea		      nop
     19  f04d					      REPEND
    124  f04d		       85 10		      STA	RESP0	;3
      0  f04f					      SLEEP	24	;
      1  f04f				   .CYCLES    SET	24
      2  f04f
      3  f04f				  -	      IF	.CYCLES < 2
      4  f04f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f04f				  -	      ERR
      6  f04f					      ENDIF
      7  f04f
      8  f04f				  -	      IF	.CYCLES & 1
      9  f04f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f04f				  -	      nop	0
     11  f04f				  -	      ELSE
     12  f04f				  -	      bit	VSYNC
     13  f04f				  -	      ENDIF
     14  f04f				  -.CYCLES    SET	.CYCLES - 3
     15  f04f					      ENDIF
     16  f04f
     17  f04f					      REPEAT	.CYCLES / 2
     18  f04f		       ea		      nop
     17  f04f					      REPEND
     18  f050		       ea		      nop
     17  f050					      REPEND
     18  f051		       ea		      nop
     17  f051					      REPEND
     18  f052		       ea		      nop
     17  f052					      REPEND
     18  f053		       ea		      nop
     17  f053					      REPEND
     18  f054		       ea		      nop
     17  f054					      REPEND
     18  f055		       ea		      nop
     17  f055					      REPEND
     18  f056		       ea		      nop
     17  f056					      REPEND
     18  f057		       ea		      nop
     17  f057					      REPEND
     18  f058		       ea		      nop
     17  f058					      REPEND
     18  f059		       ea		      nop
     17  f059					      REPEND
     18  f05a		       ea		      nop
     19  f05b					      REPEND
    126  f05b		       85 11		      STA	RESP1	;3
    127  f05d		       85 13		      STA	RESM1
      0  f05f					      SLEEP	10
      1  f05f				   .CYCLES    SET	10
      2  f05f
      3  f05f				  -	      IF	.CYCLES < 2
      4  f05f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f05f				  -	      ERR
      6  f05f					      ENDIF
      7  f05f
      8  f05f				  -	      IF	.CYCLES & 1
      9  f05f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f05f				  -	      nop	0
     11  f05f				  -	      ELSE
     12  f05f				  -	      bit	VSYNC
     13  f05f				  -	      ENDIF
     14  f05f				  -.CYCLES    SET	.CYCLES - 3
     15  f05f					      ENDIF
     16  f05f
     17  f05f					      REPEAT	.CYCLES / 2
     18  f05f		       ea		      nop
     17  f05f					      REPEND
     18  f060		       ea		      nop
     17  f060					      REPEND
     18  f061		       ea		      nop
     17  f061					      REPEND
     18  f062		       ea		      nop
     17  f062					      REPEND
     18  f063		       ea		      nop
     19  f064					      REPEND
    129  f064		       85 14		      STA	RESBL
    130  f066
    131  f066
    132  f066				   DoNotSetPlayerX
    133  f066
    134  f066		       85 02		      STA	WSYNC
    135  f068		       a9 2b		      LDA	#43
    136  f06a		       8d 96 02 	      STA	TIM64T
    137  f06d		       a9 00		      LDA	#0
    138  f06f		       85 00		      STA	VSYNC
    139  f071
    140  f071							;Read Fire Button before, will make it start the game for now.
    141  f071		       a5 0c		      LDA	INPT4
    142  f073		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    143  f075		       a5 c0		      LDA	GameStatus
    144  f077		       09 80		      ORA	#%10000000
    145  f079		       85 c0		      STA	GameStatus
    146  f07b				   SkipGameStart
    147  f07b
    148  f07b				   CountFrame
    149  f07b		       e6 86		      INC	FrameCount0	; Used to alternate lines
    150  f07d		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    151  f07f		       e6 87		      INC	FrameCount1	; Still not used
    152  f081				   SkipIncFC1
    153  f081
    154  f081							;Does not update the game if not running
    155  f081		       a5 c0		      LDA	GameStatus	;3
    156  f083		       49 80		      EOR	#%10000000	;2 game is running...
    157  f085		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    158  f087		       4c 38 f1 	      JMP	SkipUpdateLogic
    159  f08a
    160  f08a				   ContinueWithGameLogic
    161  f08a
    162  f08a							; for left and right, we're gonna 
    163  f08a							; set the horizontal speed, and then do
    164  f08a							; a single HMOVE.  We'll use X to hold the
    165  f08a							; horizontal speed, then store it in the 
    166  f08a							; appropriate register
    167  f08a
    168  f08a							;assum horiz speed will be zero
    169  f08a
    170  f08a							;Begin read dpad
    171  f08a		       a2 00		      LDX	#0
    172  f08c
    173  f08c		       a9 40		      LDA	#%01000000	;Left
    174  f08e		       2c 80 02 	      BIT	SWCHA
    175  f091		       d0 02		      BNE	SkipMoveLeft
    176  f093		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    177  f095				   SkipMoveLeft
    178  f095
    179  f095		       a9 80		      LDA	#%10000000	;Right
    180  f097		       2c 80 02 	      BIT	SWCHA
    181  f09a		       d0 02		      BNE	SkipMoveRight
    182  f09c		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    183  f09e				   SkipMoveRight
    184  f09e
    185  f09e		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    186  f0a0
    187  f0a0
    188  f0a0							;Acelerates / breaks the car
    189  f0a0		       a9 10		      LDA	#%00010000	;UP in controller
    190  f0a2		       2c 80 02 	      BIT	SWCHA
    191  f0a5		       d0 21		      BNE	SkipAccelerate
    192  f0a7
    193  f0a7							;Adds speed
    194  f0a7		       18		      CLC
    195  f0a8		       a5 88		      LDA	Car0SpeedL
    196  f0aa		       69 01		      ADC	#ACCELERATE_SPEED
    197  f0ac		       85 88		      STA	Car0SpeedL
    198  f0ae		       a5 89		      LDA	Car0SpeedH
    199  f0b0		       69 00		      ADC	#0
    200  f0b2		       85 89		      STA	Car0SpeedH
    201  f0b4
    202  f0b4							;Checks if already max
    203  f0b4		       c9 02		      CMP	#CAR_MAX_SPEED_H
    204  f0b6		       90 10		      BCC	SkipAccelerate	; less than my max speed
    205  f0b8		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    206  f0ba							;High bit is max, compare the low
    207  f0ba		       a5 88		      LDA	Car0SpeedL
    208  f0bc		       c9 80		      CMP	#CAR_MAX_SPEED_L
    209  f0be		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    210  f0c0							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    211  f0c0
    212  f0c0				   ResetToMaxSpeed		; Speed is more, or is already max
    213  f0c0		       a9 02		      LDA	#CAR_MAX_SPEED_H
    214  f0c2		       85 89		      STA	Car0SpeedH
    215  f0c4		       a9 80		      LDA	#CAR_MAX_SPEED_L
    216  f0c6		       85 88		      STA	Car0SpeedL
    217  f0c8
    218  f0c8				   SkipAccelerate
    219  f0c8
    220  f0c8				   Break
    221  f0c8		       a9 20		      LDA	#%00100000	;Down in controller
    222  f0ca		       2c 80 02 	      BIT	SWCHA
    223  f0cd		       d0 26		      BNE	SkipBreak
    224  f0cf
    225  f0cf							;Decrease speed
    226  f0cf		       38		      SEC
    227  f0d0		       a5 88		      LDA	Car0SpeedL
    228  f0d2		       e9 04		      SBC	#BREAK_SPEED
    229  f0d4		       85 88		      STA	Car0SpeedL
    230  f0d6		       a5 89		      LDA	Car0SpeedH
    231  f0d8		       e9 00		      SBC	#0
    232  f0da		       85 89		      STA	Car0SpeedH
    233  f0dc
    234  f0dc							;Checks if is min speed
    235  f0dc		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    236  f0de		       c9 00		      CMP	#CAR_MIN_SPEED_H
    237  f0e0		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    238  f0e2		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    239  f0e4
    240  f0e4				   CompareLBreakSpeed
    241  f0e4		       a5 88		      LDA	Car0SpeedL
    242  f0e6		       c9 00		      CMP	#CAR_MIN_SPEED_L
    243  f0e8		       90 03		      BCC	ResetMinSpeed	; Less than memory
    244  f0ea		       4c f5 f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    245  f0ed
    246  f0ed				   ResetMinSpeed
    247  f0ed		       a9 00		      LDA	#CAR_MIN_SPEED_H
    248  f0ef		       85 89		      STA	Car0SpeedH
    249  f0f1		       a9 00		      LDA	#CAR_MIN_SPEED_L
    250  f0f3		       85 88		      STA	Car0SpeedL
    251  f0f5				   SkipBreak
    252  f0f5
    253  f0f5							;Updates all offsets 24 bits
    254  f0f5		       a2 00		      LDX	#0	; Memory Offset 24 bit
    255  f0f7		       a0 00		      LDY	#0	; Line Speeds 16 bits
    256  f0f9				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    257  f0f9		       38		      SEC
    258  f0fa		       a5 88		      LDA	Car0SpeedL
    259  f0fc		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    260  f0ff		       85 b0		      STA	Tmp0
    261  f101		       c8		      INY
    262  f102		       a5 89		      LDA	Car0SpeedH
    263  f104		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    264  f107		       85 b1		      STA	Tmp1
    265  f109		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    266  f10b		       e9 00		      SBC	#0
    267  f10d		       85 b2		      STA	Tmp2
    268  f10f
    269  f10f
    270  f10f							;Adds the result
    271  f10f		       18		      CLC
    272  f110		       a5 b0		      LDA	Tmp0
    273  f112		       75 90		      ADC	TrafficOffset0,X
    274  f114		       95 90		      STA	TrafficOffset0,X
    275  f116		       e8		      INX
    276  f117		       a5 b1		      LDA	Tmp1
    277  f119		       75 90		      ADC	TrafficOffset0,X
    278  f11b		       95 90		      STA	TrafficOffset0,X
    279  f11d		       e8		      INX
    280  f11e		       a5 b2		      LDA	Tmp2	; Carry
    281  f120		       75 90		      ADC	TrafficOffset0,X
    282  f122		       95 90		      STA	TrafficOffset0,X
    283  f124		       e8		      INX
    284  f125		       38		      SEC
    285  f126		       69 00		      ADC	#0	;Increment by one
    286  f128		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    287  f12a
    288  f12a
    289  f12a				   PrepareNextUpdateLoop
    290  f12a		       c8		      INY
    291  f12b		       e8		      INX
    292  f12c		       e0 18		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    293  f12e		       d0 c9		      BNE	UpdateOffsets
    294  f130
    295  f130				   TestCollision		;
    296  f130							; see if car0 and playfield collide, and change the background color if so
    297  f130		       a9 80		      LDA	#%10000000
    298  f132		       24 02		      BIT	CXP0FB
    299  f134		       f0 00		      BEQ	NoCollision	;skip if not hitting...
    300  f136							;LDA FrameCount0	;must be a hit! Change rand color bg
    301  f136							;STA COLUBK	;and store as the bgcolor
    302  f136				   NoCollision
    303  f136		       85 2c		      STA	CXCLR	;reset the collision detection for next frame
    304  f138
    305  f138				   SkipUpdateLogic
    306  f138
    307  f138							; After here we are going to update the screen, No more heavy code
    308  f138				   WaitForVblankEnd
    309  f138		       ad 84 02 	      LDA	INTIM
    310  f13b		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    311  f13d
    312  f13d							;50 cycles worse case before the VSync 
    313  f13d		       a0 3f		      LDY	#SCREEN_SIZE - 1	;#63 ; 	
    314  f13f
    315  f13f		       85 02		      STA	WSYNC
    316  f141
    317  f141		       a9 01		      LDA	#1
    318  f143		       85 01		      STA	VBLANK
    319  f145
    320  f145
    321  f145							;main scanline loop...
    322  f145				   ScanLoop
    323  f145		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    324  f147
    325  f147							;Start of next line!			
    326  f147				   DrawCache		;24 Is the last line going to the top of the next frame?
    327  f147
    328  f147							; LDA #TRAFFIC_COLOR ;2
    329  f147							; STA COLUPF ;3
    330  f147
    331  f147		       a5 82		      LDA	PF0Cache	;3
    332  f149		       85 0d		      STA	PF0	;3
    333  f14b
    334  f14b		       a5 81		      LDA	GRP0Cache	;3 ;buffer was set during last scanline
    335  f14d		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    336  f14f
    337  f14f		       a5 83		      LDA	PF1Cache	;3
    338  f151		       85 0e		      STA	PF1	;3
    339  f153
    340  f153		       a5 84		      LDA	PF2Cache	;3
    341  f155		       85 0f		      STA	PF2	;3
    342  f157
    343  f157				   DrawTraffic0 		; 16 max, 14 min, traffic 0 is the border
    344  f157		       98		      TYA		;2
    345  f158		       18		      CLC		;2
    346  f159		       65 91		      ADC	TrafficOffset0 + 1	; 3
    347  f15b		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    348  f15d		       f0 05		      BEQ	EraseTraffic0	; 2
    349  f15f		       a9 f0		      LDA	#%11110000	; 2
    350  f161		       4c 66 f1 	      JMP	StoreTraffic0	;3
    351  f164				   EraseTraffic0
    352  f164		       a9 00		      LDA	#0	; 2
    353  f166				   StoreTraffic0
    354  f166		       85 82		      STA	PF0Cache	;3
    355  f168				   SkipDrawTraffic0
    356  f168
    357  f168							; LDA #BACKGROUND_COLOR ;2
    358  f168							; STA COLUPF ;3
    359  f168
    360  f168
    361  f168				   BeginDrawCar0Block		;21 is the max, since if draw, does not check active
    362  f168		       a6 80		      LDX	Car0Line	;3 check the visible player line...
    363  f16a		       f0 0a		      BEQ	FinishDrawCar0	;2	skip the drawing if its zero...
    364  f16c				   DrawCar0
    365  f16c		       bd ff fe 	      LDA	CarSprite-1,X	;5	;otherwise, load the correct line from CarSprite
    366  f16f							;section below... it's off by 1 though, since at zero
    367  f16f							;we stop drawing
    368  f16f		       85 81		      STA	GRP0Cache	;3	;put that line as player graphic for the next line
    369  f171		       c6 80		      DEC	Car0Line	;5	and decrement the line count
    370  f173							;STA WSYNC
    371  f173		       4c 7e f1 	      JMP	SkipActivateCar0	;3 save some cpu time
    372  f176				   FinishDrawCar0
    373  f176
    374  f176				   CheckActivateCar0		;9 max
    375  f176		       c0 0a		      CPY	#CAR_0_Y	;2
    376  f178		       d0 04		      BNE	SkipActivateCar0	;2
    377  f17a		       a9 07		      LDA	#CAR_SIZE	;2
    378  f17c		       85 80		      STA	Car0Line	;3
    379  f17e							;STA WSYNC
    380  f17e				   SkipActivateCar0		;EndDrawCar0Block
    381  f17e
    382  f17e							;STA WSYNC ; 3 71 max
    383  f17e
    384  f17e		       98		      TYA		;2
    385  f17f		       45 86		      EOR	FrameCount0	;3
    386  f181		       29 01		      AND	#%00000001	;2
    387  f183		       f0 6c		      BEQ	DrawTraffic4	;2,4
    388  f185							;NOP
    389  f185							; LDA #TRAFFIC_COLOR ;2
    390  f185							; STA COLUPF ;3
    391  f185
    392  f185							;Will set the initial value for PF1Cache
    393  f185				   DrawTraffic1 		; 
    394  f185		       98		      TYA		; 2
    395  f186		       18		      CLC		; 2 
    396  f187		       65 95		      ADC	TrafficOffset1 + 1	;3
    397  f189		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    398  f18b		       b0 05		      BCS	EorOffsetWithCarry	; 4 max if branch max, 2 otherwise
    399  f18d		       45 96		      EOR	TrafficOffset1 + 2	; 2
    400  f18f		       4c 94 f1 	      JMP	AfterEorOffsetWithCarry	; 3
    401  f192				   EorOffsetWithCarry
    402  f192		       45 97		      EOR	TrafficOffset1 + 3	; 3
    403  f194				   AfterEorOffsetWithCarry		;18
    404  f194		       aa		      TAX		;2
    405  f195		       bd 00 fe 	      LDA	AesTable,X	; 4
    406  f198		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    407  f19a		       b0 05		      BCS	EraseTraffic1	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    408  f19c		       a9 60		      LDA	#%01100000	;2
    409  f19e		       4c a3 f1 	      JMP	StoreTraffic1	;3
    410  f1a1				   EraseTraffic1
    411  f1a1		       a9 00		      LDA	#0	;2
    412  f1a3				   StoreTraffic1
    413  f1a3		       85 83		      STA	PF1Cache	;3
    414  f1a5				   FinishDrawTraffic1
    415  f1a5							;36 worse, 35 best
    416  f1a5
    417  f1a5				   DrawTraffic2 		;
    418  f1a5		       98		      TYA		; 2
    419  f1a6		       18		      CLC		; 2 
    420  f1a7		       65 99		      ADC	TrafficOffset2 + 1	;3
    421  f1a9		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    422  f1ab		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    423  f1ad		       45 9a		      EOR	TrafficOffset2 + 2	; 2
    424  f1af		       4c b4 f1 	      JMP	AfterEorOffsetWithCarry2	; 3
    425  f1b2				   EorOffsetWithCarry2
    426  f1b2		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    427  f1b4				   AfterEorOffsetWithCarry2		;18
    428  f1b4		       aa		      TAX		;2
    429  f1b5		       bd 00 fe 	      LDA	AesTable,X	; 4
    430  f1b8		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    431  f1ba		       b0 06		      BCS	FinishDrawTraffic2	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    432  f1bc		       a5 83		      LDA	PF1Cache	;3
    433  f1be		       09 0c		      ORA	#%00001100	;2
    434  f1c0		       85 83		      STA	PF1Cache	;3
    435  f1c2				   FinishDrawTraffic2
    436  f1c2							;36 cyles worse case!
    437  f1c2
    438  f1c2							;STA WSYNC ;65 / 137
    439  f1c2
    440  f1c2				   DrawTraffic3 		; PF2 is shared with odd and even lines, needs specific logic to erase
    441  f1c2		       98		      TYA		; 2
    442  f1c3		       18		      CLC		; 2 
    443  f1c4		       65 9d		      ADC	TrafficOffset3 + 1	;3
    444  f1c6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    445  f1c8		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    446  f1ca		       45 9e		      EOR	TrafficOffset3 + 2	; 2
    447  f1cc		       4c d1 f1 	      JMP	AfterEorOffsetWithCarry3	; 3
    448  f1cf				   EorOffsetWithCarry3
    449  f1cf		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    450  f1d1				   AfterEorOffsetWithCarry3		; 18
    451  f1d1		       aa		      TAX		;2
    452  f1d2		       bd 00 fe 	      LDA	AesTable,X	; 4
    453  f1d5		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    454  f1d7		       90 09		      BCC	EnableTraffic3	; 4 with jump worse case, Less than, we draw, logic is reversed to save 3 cycles on the jmp
    455  f1d9				   EraseTraffic3		; Only have to erase PF2...
    456  f1d9		       a5 84		      LDA	PF2Cache	;3
    457  f1db		       29 fe		      AND	#%11111110	;2
    458  f1dd		       85 84		      STA	PF2Cache	;3
    459  f1df		       4c ee f1 	      JMP	FinishDrawTraffic3	;3
    460  f1e2				   EnableTraffic3
    461  f1e2		       a5 83		      LDA	PF1Cache	;3
    462  f1e4		       09 01		      ORA	#%00000001	;2
    463  f1e6		       85 83		      STA	PF1Cache	;3
    464  f1e8		       a5 84		      LDA	PF2Cache	;3
    465  f1ea		       09 01		      ORA	#%00000001	;2
    466  f1ec		       85 84		      STA	PF2Cache	;3
    467  f1ee				   FinishDrawTraffic3
    468  f1ee							;46 cyles worse case!
    469  f1ee
    470  f1ee		       4c 46 f2 	      JMP	WhileScanLoop	; 3
    471  f1f1
    472  f1f1				   DrawTraffic4 		;
    473  f1f1		       98		      TYA		; 2
    474  f1f2		       18		      CLC		; 2 
    475  f1f3		       65 a1		      ADC	TrafficOffset4 + 1	;3
    476  f1f5		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    477  f1f7		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    478  f1f9		       45 a2		      EOR	TrafficOffset4 + 2	; 2
    479  f1fb		       4c 00 f2 	      JMP	AfterEorOffsetWithCarry4	; 3
    480  f1fe				   EorOffsetWithCarry4
    481  f1fe		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    482  f200				   AfterEorOffsetWithCarry4		;18
    483  f200		       aa		      TAX		;2
    484  f201		       bd 00 fe 	      LDA	AesTable,X	; 4
    485  f204		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    486  f206		       90 07		      BCC	EnableTraffic4	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    487  f208				   EraseTraffic4		; Is actually setting the initial state, but have to keep the traffic 3 value	
    488  f208		       a5 84		      LDA	PF2Cache	;2
    489  f20a		       29 01		      AND	#%00000001	;2
    490  f20c		       4c 15 f2 	      JMP	StoreTraffic4	;3
    491  f20f				   EnableTraffic4
    492  f20f		       a5 84		      LDA	PF2Cache	;3
    493  f211		       29 01		      AND	#%00000001	;2
    494  f213		       09 0c		      ORA	#%00001100	;2
    495  f215				   StoreTraffic4
    496  f215		       85 84		      STA	PF2Cache	;3	
    497  f217				   FinishDrawTraffic4
    498  f217							;39 max
    499  f217
    500  f217
    501  f217							;SLEEP 80
    502  f217				   DrawTraffic5 		;
    503  f217		       98		      TYA		; 2
    504  f218		       18		      CLC		; 2 
    505  f219		       65 a5		      ADC	TrafficOffset5 + 1	;3
    506  f21b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    507  f21d		       b0 05		      BCS	EorOffsetWithCarry5	; 4 max if branch max, 2 otherwise
    508  f21f		       45 a6		      EOR	TrafficOffset5 + 2	; 2
    509  f221		       4c 26 f2 	      JMP	AfterEorOffsetWithCarry5	; 3
    510  f224				   EorOffsetWithCarry5
    511  f224		       45 a7		      EOR	TrafficOffset5 + 3	; 3
    512  f226				   AfterEorOffsetWithCarry5		;18
    513  f226		       aa		      TAX		;2
    514  f227		       bd 00 fe 	      LDA	AesTable,X	; 4
    515  f22a		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    516  f22c		       b0 06		      BCS	FinishDrawTraffic5	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    517  f22e		       a5 84		      LDA	PF2Cache	;3
    518  f230		       09 60		      ORA	#%01100000	;2
    519  f232		       85 84		      STA	PF2Cache	;3	
    520  f234				   FinishDrawTraffic5
    521  f234							;36 max	
      0  f234					      SLEEP	36
      1  f234				   .CYCLES    SET	36
      2  f234
      3  f234				  -	      IF	.CYCLES < 2
      4  f234				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f234				  -	      ERR
      6  f234					      ENDIF
      7  f234
      8  f234				  -	      IF	.CYCLES & 1
      9  f234				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f234				  -	      nop	0
     11  f234				  -	      ELSE
     12  f234				  -	      bit	VSYNC
     13  f234				  -	      ENDIF
     14  f234				  -.CYCLES    SET	.CYCLES - 3
     15  f234					      ENDIF
     16  f234
     17  f234					      REPEAT	.CYCLES / 2
     18  f234		       ea		      nop
     17  f234					      REPEND
     18  f235		       ea		      nop
     17  f235					      REPEND
     18  f236		       ea		      nop
     17  f236					      REPEND
     18  f237		       ea		      nop
     17  f237					      REPEND
     18  f238		       ea		      nop
     17  f238					      REPEND
     18  f239		       ea		      nop
     17  f239					      REPEND
     18  f23a		       ea		      nop
     17  f23a					      REPEND
     18  f23b		       ea		      nop
     17  f23b					      REPEND
     18  f23c		       ea		      nop
     17  f23c					      REPEND
     18  f23d		       ea		      nop
     17  f23d					      REPEND
     18  f23e		       ea		      nop
     17  f23e					      REPEND
     18  f23f		       ea		      nop
     17  f23f					      REPEND
     18  f240		       ea		      nop
     17  f240					      REPEND
     18  f241		       ea		      nop
     17  f241					      REPEND
     18  f242		       ea		      nop
     17  f242					      REPEND
     18  f243		       ea		      nop
     17  f243					      REPEND
     18  f244		       ea		      nop
     17  f244					      REPEND
     18  f245		       ea		      nop
     19  f246					      REPEND
    523  f246
    524  f246
    525  f246							;STA WSYNC ;65 / 202 of 222
    526  f246
    527  f246				   WhileScanLoop
    528  f246		       88		      DEY		;2
    529  f247		       30 03		      BMI	FinishScanLoop	;2 or 3 ;two big Breach	
    530  f249		       4c 45 f1 	      JMP	ScanLoop	;3
    531  f24c				   FinishScanLoop		; 7 209 of 222
    532  f24c
    533  f24c
    534  f24c				   PrepareOverscan
    535  f24c		       a9 02		      LDA	#2
    536  f24e		       85 02		      STA	WSYNC
    537  f250		       85 01		      STA	VBLANK
    538  f252
    539  f252		       a9 25		      LDA	#37
    540  f254		       8d 96 02 	      STA	TIM64T
    541  f257							;LDA #0
    542  f257							;STA VSYNC Is it needed? Why is this here, I don't remember		
    543  f257
    544  f257							;Do more logic
    545  f257
    546  f257				   OverScanWait
    547  f257		       ad 84 02 	      LDA	INTIM
    548  f25a		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    549  f25c		       4c 36 f0 	      JMP	MainLoop
    550  f25f
    551  f25f
    552  fe00					      org	$FE00
    553  fe00				   AesTable
    554  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    555  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    556  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    557  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    558  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    559  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    560  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    561  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    562  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    563  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    564  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    565  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    566  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    567  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    568  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    569  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    570  ff00
    571  ff00							; From FF00 to FFFB (122 bytes) to use here
    572  ff00
    573  ff00				   CarSprite		; Upside down
    574  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    575  ff01		       ff		      .byte.b	#%11111111
    576  ff02		       24		      .byte.b	#%00100100
    577  ff03		       bd		      .byte.b	#%10111101
    578  ff04		       3c		      .byte.b	#%00111100
    579  ff05		       bd		      .byte.b	#%10111101
    580  ff06		       3c		      .byte.b	#%00111100
    581  ff07
    582  ff07
    583  ff07				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    584  ff07		       00		      .byte.b	#$00	;  Trafic0 L
    585  ff08		       00		      .byte.b	#$00	;  Trafic0 H
    586  ff09		       a0		      .byte.b	#$A0	;  Trafic1 L
    587  ff0a		       00		      .byte.b	#$00	;  Trafic1 H
    588  ff0b		       ea		      .byte.b	#$EA	;  Trafic2 L
    589  ff0c		       00		      .byte.b	#$00	;  Trafic2 H
    590  ff0d		       00		      .byte.b	#$00	;  Trafic3 L
    591  ff0e		       01		      .byte.b	#$01	;  Trafic3 H
    592  ff0f		       a0		      .byte.b	#$A0	;  Trafic4 L
    593  ff10		       01		      .byte.b	#$01	;  Trafic4 H
    594  ff11		       c0		      .byte.b	#$C0	;  Trafic5 L
    595  ff12		       01		      .byte.b	#$01	;  Trafic5 H
    596  ff13
    597  ff13
    598  fffc					      org	$FFFC
    599  fffc		       00 f0		      .word.w	Start
    600  fffe		       00 f0		      .word.w	Start
