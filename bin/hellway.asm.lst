------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     25  f000
     26  f000		       00 01	   ACCELERATE_SPEED =	1
     27  f000		       00 0a	   BREAK_SPEED =	10
     28  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     29  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     30  f000
     31  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     32  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     33  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     34  f000
     35  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     36  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     37  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     38  f000
     39  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     40  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     41  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     42  f000
     43  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     44  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     45  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     46  f000
     47  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     48  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     49  f000
     50  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     51  f000
     52  f000		       00 96	   PLAYER1_COLOR =	$96
     53  f000
     54  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     55  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     56  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     57  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     58  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     59  f000
     60  f000		       00 35	   PLAYER_0_X_START =	$35	;
     61  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     62  f000
     63  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     64  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     65  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     66  f000		       00 03	   TIMEOVER_BREAK_INTERVAL =	%00000011	; Every 4 frames
     67  f000
     68  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     69  f000
     70  f000		       00 00	   BLACK      =	$00	;
     71  f000
     72  f000		       00 10	   MAX_GAME_MODE =	16
     73  f000
     74  f000		       00 08	   PARALLAX_SIZE =	8
     75  f000
     76  f000		       00 05	   HALF_TEXT_SIZE =	5
     77  f000
     78  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     79  f000
     80  f000		       00 49	   VERSION_COLOR =	$49
     81  f000
     82  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     83  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     84  f000		       00 00	   QR_CODE_COLOR =	$00
     85  f000		       00 19	   QR_CODE_SIZE =	25
     86  f000
     87  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     88  f000
     89  f000		       00 80	   GRP0Cache  =	$80
     90  f000		       00 81	   PF0Cache   =	$81
     91  f000		       00 82	   PF1Cache   =	$82
     92  f000		       00 83	   PF2Cache   =	$83
     93  f000		       00 84	   GRP1Cache  =	$84
     94  f000		       00 85	   ENABLCache =	$85
     95  f000		       00 86	   ENAM0Cache =	$86
     96  f000		       00 87	   ENAM1Cache =	$87
     97  f000
     98  f000		       00 88	   ParallaxMode =	$88
     99  f000
    100  f000		       00 8c	   FrameCount0 =	$8C	;
    101  f000		       00 8d	   FrameCount1 =	$8D	;
    102  f000
    103  f000		       00 8e	   Player0SpeedL =	$8E
    104  f000		       00 8f	   Player0SpeedH =	$8F
    105  f000
    106  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    107  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    108  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    109  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    110  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    111  f000
    112  f000		       00 a4	   CheckpointBcd0 =	$A4
    113  f000		       00 a5	   CheckpointBcd1 =	$A5
    114  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    115  f000		       00 a7	   CarSpritePointerL =	$A7
    116  f000		       00 a8	   CarSpritePointerH =	$A8
    117  f000		       00 a9	   CurrentCarId =	$A9
    118  f000
    119  f000							;Temporary variables, multiple uses
    120  f000		       00 b0	   Tmp0       =	$B0
    121  f000		       00 b1	   Tmp1       =	$B1
    122  f000		       00 b2	   Tmp2       =	$B2
    123  f000		       00 b3	   Tmp3       =	$B3
    124  f000
    125  f000		       00 b4	   ScoreBcd0  =	$B4
    126  f000		       00 b5	   ScoreBcd1  =	$B5
    127  f000		       00 b6	   ScoreBcd2  =	$B6
    128  f000		       00 b7	   ScoreBcd3  =	$B7
    129  f000
    130  f000		       00 b8	   CollisionCounter =	$B8
    131  f000		       00 b9	   Player0X   =	$B9
    132  f000		       00 ba	   CountdownTimer =	$BA
    133  f000		       00 bb	   Traffic0Msb =	$BB
    134  f000		       00 bc	   SwitchDebounceCounter =	$BC
    135  f000
    136  f000		       00 bd	   TimeBcd0   =	$BD
    137  f000		       00 be	   TimeBcd1   =	$BE
    138  f000		       00 bf	   TimeBcd2   =	$BF
    139  f000
    140  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    141  f000		       00 c1	   TrafficChance =	$C1
    142  f000		       00 c2	   CheckpointTime =	$C2
    143  f000		       00 c3	   TrafficColor =	$C3
    144  f000		       00 c4	   CurrentDifficulty =	$C4
    145  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    146  f000
    147  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    148  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    149  f000
    150  f000		       00 ca	   BorderType =	$CA
    151  f000
    152  f000		       00 cb	   HitCountBcd0 =	$CB
    153  f000		       00 cc	   HitCountBcd1 =	$CC
    154  f000
    155  f000		       00 cd	   GlideTimeBcd0 =	$CD
    156  f000		       00 ce	   GlideTimeBcd1 =	$CE
    157  f000
    158  f000		       00 cf	   OneSecondConter =	$CF
    159  f000
    160  f000		       00 d0	   ScoreD0    =	$D0
    161  f000		       00 d1	   ScoreD1    =	$D1
    162  f000		       00 d2	   ScoreD2    =	$D2
    163  f000		       00 d3	   ScoreD3    =	$D3
    164  f000		       00 d4	   ScoreD4    =	$D4
    165  f000		       00 d5	   ScoreFontColor =	$D5
    166  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    167  f000		       00 d7	   NextCheckpoint =	$D7
    168  f000
    169  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    170  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    171  f000
    172  f000
    173  f000							;generic start up stuff, put zero in all...
    174  f000				   BeforeStart		;All variables that are kept on game reset or select
    175  f000		       a0 00		      LDY	#0
    176  f002		       84 bc		      STY	SwitchDebounceCounter
    177  f004		       84 c4		      STY	CurrentDifficulty
    178  f006		       84 c0		      STY	GameStatus
    179  f008		       a0 10		      LDY	#16
    180  f00a		       84 c5		      STY	GameMode
    181  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    182  f00e		       84 88		      STY	ParallaxMode
    183  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    184  f012		       84 a9		      STY	CurrentCarId
    185  f014
    186  f014				   Start
    187  f014		       78		      SEI
    188  f015		       d8		      CLD
    189  f016		       a2 ff		      LDX	#$FF
    190  f018		       9a		      TXS
    191  f019		       a9 00		      LDA	#0
    192  f01b				   ClearMem
    193  f01b		       e0 bc		      CPX	#SwitchDebounceCounter
    194  f01d		       f0 16		      BEQ	SkipClean
    195  f01f		       e0 c5		      CPX	#GameMode
    196  f021		       f0 12		      BEQ	SkipClean
    197  f023		       e0 88		      CPX	#ParallaxMode
    198  f025		       f0 0e		      BEQ	SkipClean
    199  f027		       e0 a9		      CPX	#CurrentCarId
    200  f029		       f0 0a		      BEQ	SkipClean
    201  f02b		       e0 c4		      CPX	#CurrentDifficulty
    202  f02d		       f0 06		      BEQ	SkipClean
    203  f02f		       e0 c0		      CPX	#GameStatus
    204  f031		       f0 02		      BEQ	SkipClean
    205  f033		       95 00		      STA	0,X
    206  f035				   SkipClean
    207  f035		       ca		      DEX
    208  f036		       d0 e3		      BNE	ClearMem
    209  f038
    210  f038							;Setting some variables...
    211  f038
    212  f038				   SettingTrafficOffsets		; Time sensitive with player H position
    213  f038		       85 02		      STA	WSYNC	;We will set player position
    214  f03a		       20 83 f7 	      JSR	DefaultOffsets
    215  f03d
    216  f03d		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    217  f040		       85 8e		      STA	Player0SpeedL
    218  f042
      0  f042					      SLEEP	11	;18
      1  f042				   .CYCLES    SET	11
      2  f042
      3  f042				  -	      IF	.CYCLES < 2
      4  f042				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f042				  -	      ERR
      6  f042					      ENDIF
      7  f042
      8  f042					      IF	.CYCLES & 1
      9  f042				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f042				  -	      nop	0
     11  f042					      ELSE
     12  f042		       24 00		      bit	VSYNC
     13  f044					      ENDIF
     14  f044				   .CYCLES    SET	.CYCLES - 3
     15  f044					      ENDIF
     16  f044
     17  f044					      REPEAT	.CYCLES / 2
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     19  f048					      REPEND
    220  f048		       85 10		      STA	RESP0
    221  f04a
    222  f04a		       a2 00		      LDX	#0
    223  f04c		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    224  f04f		       85 a6		      STA	StartSWCHB	; For game over
    225  f051		       29 c0		      AND	#%11000000
    226  f053		       f0 0b		      BEQ	CallConfigureDifficulty
    227  f055		       e8		      INX
    228  f056		       c9 80		      CMP	#%10000000
    229  f058		       f0 06		      BEQ	CallConfigureDifficulty
    230  f05a		       e8		      INX
    231  f05b		       c9 40		      CMP	#%01000000
    232  f05d		       f0 01		      BEQ	CallConfigureDifficulty
    233  f05f		       e8		      INX
    234  f060
    235  f060				   CallConfigureDifficulty
    236  f060		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    237  f062		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    238  f064		       a5 c0		      LDA	GameStatus
    239  f066		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    240  f068				   NextCar
    241  f068		       a4 a9		      LDY	CurrentCarId
    242  f06a		       c8		      INY
    243  f06b		       98		      TYA
    244  f06c		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    245  f06e		       85 a9		      STA	CurrentCarId
    246  f070				   StoreCurrentDifficulty
    247  f070		       86 c4		      STX	CurrentDifficulty
    248  f072		       20 3b f7 	      JSR	ConfigureDifficulty
    249  f075
    250  f075				   ConfigureCarSprite
    251  f075		       a4 a9		      LDY	CurrentCarId
    252  f077		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    253  f07a		       85 a7		      STA	CarSpritePointerL
    254  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    255  f07f		       85 a8		      STA	CarSpritePointerH
    256  f081
    257  f081				   SetGameNotRunning
    258  f081		       a9 00		      LDA	#0
    259  f083		       85 c0		      STA	GameStatus
    260  f085
    261  f085				   ConfigureOneSecondTimer
    262  f085		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    263  f087		       85 cf		      STA	OneSecondConter
    264  f089
    265  f089				   HPositioning
    266  f089		       85 02		      STA	WSYNC
    267  f08b
    268  f08b		       a9 30		      LDA	#%00110000	;2 Missile Size
    269  f08d		       85 04		      STA	NUSIZ0	;3
    270  f08f		       85 05		      STA	NUSIZ1	;3
    271  f091
    272  f091		       a9 35		      LDA	#PLAYER_0_X_START	;2
    273  f093		       85 b9		      STA	Player0X	;3
    274  f095
    275  f095		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    276  f097		       85 ba		      STA	CountdownTimer	;3
    277  f099
    278  f099		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    279  f09b		       85 d7		      STA	NextCheckpoint
    280  f09d
    281  f09d		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f09f					      SLEEP	11	;
      1  f09f				   .CYCLES    SET	11
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f					      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f					      ELSE
     12  f09f		       24 00		      bit	VSYNC
     13  f0a1					      ENDIF
     14  f0a1				   .CYCLES    SET	.CYCLES - 3
     15  f0a1					      ENDIF
     16  f0a1
     17  f0a1					      REPEAT	.CYCLES / 2
     18  f0a1		       ea		      nop
     17  f0a1					      REPEND
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     17  f0a3					      REPEND
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    283  f0a5		       85 11		      STA	RESP1
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    285  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2	;
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    287  f0ab		       85 12		      STA	RESM0
      0  f0ad					      SLEEP	2
      1  f0ad				   .CYCLES    SET	2
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad				  -	      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad				  -	      ELSE
     12  f0ad				  -	      bit	VSYNC
     13  f0ad				  -	      ENDIF
     14  f0ad				  -.CYCLES    SET	.CYCLES - 3
     15  f0ad					      ENDIF
     16  f0ad
     17  f0ad					      REPEAT	.CYCLES / 2
     18  f0ad		       ea		      nop
     19  f0ae					      REPEND
    289  f0ae		       85 13		      STA	RESM1
    290  f0b0
    291  f0b0		       a9 f0		      LDA	#$F0
    292  f0b2		       85 24		      STA	HMBL
    293  f0b4		       85 22		      STA	HMM0
    294  f0b6		       85 23		      STA	HMM1
    295  f0b8		       85 02		      STA	WSYNC
    296  f0ba		       85 2a		      STA	HMOVE
    297  f0bc		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    298  f0be		       85 2b		      STA	HMCLR
    299  f0c0
    300  f0c0							;SLEEP 24
    301  f0c0							;STA HMCLR
    302  f0c0
    303  f0c0							;VSYNC time
    304  f0c0				   MainLoop
    305  f0c0		       a9 02		      LDA	#2
    306  f0c2		       85 00		      STA	VSYNC
    307  f0c4		       85 02		      STA	WSYNC
    308  f0c6		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    309  f0c8		       85 2a		      STA	HMOVE	;2
    310  f0ca		       85 02		      STA	WSYNC	;3
    311  f0cc		       a9 29		      LDA	#41	;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    312  f0ce		       8d 96 02 	      STA	TIM64T	;3	
    313  f0d1		       a9 00		      LDA	#0	;2
    314  f0d3		       85 00		      STA	VSYNC	;3	
    315  f0d5
    316  f0d5							;Read Fire Button before, will make it start the game for now.
    317  f0d5				   StartGame
    318  f0d5		       a5 0c		      LDA	INPT4	;3
    319  f0d7		       30 2e		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    320  f0d9		       a5 c0		      LDA	GameStatus	;3
    321  f0db		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
    322  f0dd		       d0 28		      BNE	SkipGameStart
    323  f0df		       a5 c5		      LDA	GameMode
    324  f0e1		       c9 10		      CMP	#MAX_GAME_MODE
    325  f0e3		       d0 0b		      BNE	SetGameRunning
    326  f0e5		       a9 00		      LDA	#0
    327  f0e7		       85 c5		      STA	GameMode
    328  f0e9		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    329  f0eb		       85 bc		      STA	SwitchDebounceCounter
    330  f0ed		       4c 07 f1 	      JMP	SkipGameStart
    331  f0f0				   SetGameRunning
    332  f0f0		       e6 c0		      INC	GameStatus
    333  f0f2		       a9 00		      LDA	#0	;
    334  f0f4		       85 8c		      STA	FrameCount0
    335  f0f6		       85 8d		      STA	FrameCount1
    336  f0f8		       a9 0a		      LDA	#10
    337  f0fa		       85 19		      STA	AUDV0
    338  f0fc		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    339  f0fe		       85 d5		      STA	ScoreFontColor
    340  f100		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    341  f102		       85 d6		      STA	ScoreFontColorHoldChange
    342  f104		       4c 83 f1 	      JMP	SkipIncFC1	; Make the worse case stable
    343  f107				   SkipGameStart
    344  f107
    345  f107				   RandomizeGame
    346  f107		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    347  f109		       d0 30		      BNE	EndRandomizeGame
    348  f10b		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    349  f10d		       29 02		      AND	#%00000010
    350  f10f		       f0 27		      BEQ	DeterministicGame
    351  f111		       a6 96		      LDX	TrafficOffset1 + 2
    352  f113		       bd 00 fe 	      LDA	AesTable,X
    353  f116		       45 8c		      EOR	FrameCount0
    354  f118		       85 96		      STA	TrafficOffset1 + 2
    355  f11a		       a6 9a		      LDX	TrafficOffset2 + 2
    356  f11c		       bd 00 fe 	      LDA	AesTable,X
    357  f11f		       45 8c		      EOR	FrameCount0
    358  f121		       85 9a		      STA	TrafficOffset2 + 2
    359  f123		       a6 9e		      LDX	TrafficOffset3 + 2
    360  f125		       bd 00 fe 	      LDA	AesTable,X
    361  f128		       45 8c		      EOR	FrameCount0
    362  f12a		       85 9e		      STA	TrafficOffset3 + 2
    363  f12c		       a6 a2		      LDX	TrafficOffset4 + 2
    364  f12e		       bd 00 fe 	      LDA	AesTable,X
    365  f131		       45 8c		      EOR	FrameCount0
    366  f133		       85 a2		      STA	TrafficOffset4 + 2
    367  f135		       4c 3b f1 	      JMP	EndRandomizeGame
    368  f138
    369  f138				   DeterministicGame
    370  f138		       20 83 f7 	      JSR	DefaultOffsets
    371  f13b
    372  f13b				   EndRandomizeGame
    373  f13b
    374  f13b				   ReadSwitches
    375  f13b		       a6 bc		      LDX	SwitchDebounceCounter
    376  f13d		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    377  f13f		       a9 01		      LDA	#%00000001
    378  f141		       2c 82 02 	      BIT	SWCHB
    379  f144		       d0 07		      BNE	SkipReset
    380  f146		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    381  f148		       85 bc		      STA	SwitchDebounceCounter
    382  f14a		       4c 14 f0 	      JMP	Start
    383  f14d				   SkipReset
    384  f14d
    385  f14d				   GameModeSelect
    386  f14d		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    387  f14f		       d0 27		      BNE	SkipGameSelect
    388  f151		       20 3b f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    389  f154				   ReadDpadParallax
    390  f154		       ad 80 02 	      LDA	SWCHA
    391  f157		       29 f0		      AND	#%11110000
    392  f159		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    393  f15b		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    394  f15d		       85 88		      STA	ParallaxMode
    395  f15f				   ContinueGameSelect
    396  f15f		       a9 02		      LDA	#%00000010
    397  f161		       2c 82 02 	      BIT	SWCHB
    398  f164		       d0 12		      BNE	SkipGameSelect
    399  f166		       a6 c5		      LDX	GameMode
    400  f168		       e0 10		      CPX	#MAX_GAME_MODE
    401  f16a		       f0 04		      BEQ	ResetGameMode
    402  f16c		       e8		      INX
    403  f16d		       4c 72 f1 	      JMP	StoreGameMode
    404  f170				   ResetGameMode
    405  f170		       a2 00		      LDX	#0
    406  f172				   StoreGameMode
    407  f172		       86 c5		      STX	GameMode
    408  f174		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    409  f176		       85 bc		      STA	SwitchDebounceCounter
    410  f178				   SkipGameSelect
    411  f178		       4c 7d f1 	      JMP	EndReadSwitches
    412  f17b				   DecrementSwitchDebounceCounter
    413  f17b		       c6 bc		      DEC	SwitchDebounceCounter
    414  f17d				   EndReadSwitches
    415  f17d
    416  f17d				   CountFrame
    417  f17d		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    418  f17f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    419  f181		       e6 8d		      INC	FrameCount1	; 5 Still not used
    420  f183				   SkipIncFC1
    421  f183
    422  f183				   CallDrawQrCode
    423  f183		       a5 c5		      LDA	GameMode
    424  f185		       c9 10		      CMP	#MAX_GAME_MODE
    425  f187		       d0 03		      BNE	TestIsGameRunning
    426  f189		       4c 35 fb 	      JMP	DrawQrCode
    427  f18c
    428  f18c							;Does not update the game if not running
    429  f18c				   TestIsGameRunning
    430  f18c		       a5 c0		      LDA	GameStatus	;3
    431  f18e		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    432  f190		       4c 5f f3 	      JMP	SkipUpdateLogic
    433  f193				   ContinueWithGameLogic
    434  f193
    435  f193
    436  f193				   EverySecond		; 64 frames to be more precise
    437  f193		       a9 3f		      LDA	#%00111111
    438  f195		       25 8c		      AND	FrameCount0
    439  f197		       d0 06		      BNE	SkipEverySecondAction
    440  f199		       c5 ba		      CMP	CountdownTimer
    441  f19b		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    442  f19d		       c6 ba		      DEC	CountdownTimer
    443  f19f				   SkipEverySecondAction
    444  f19f
    445  f19f
    446  f19f				   BreakOnTimeOver		; Uses LDX as the breaking speed
    447  f19f		       a2 00		      LDX	#0
    448  f1a1		       a5 ba		      LDA	CountdownTimer
    449  f1a3		       d0 08		      BNE	Break
    450  f1a5		       a5 8c		      LDA	FrameCount0
    451  f1a7		       29 03		      AND	#TIMEOVER_BREAK_INTERVAL
    452  f1a9		       d0 02		      BNE	Break
    453  f1ab		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    454  f1ad
    455  f1ad				   Break
    456  f1ad		       a9 20		      LDA	#%00100000	;Down in controller
    457  f1af		       2c 80 02 	      BIT	SWCHA
    458  f1b2		       d0 0b		      BNE	BreakNonZero
    459  f1b4		       a5 0c		      LDA	INPT4	;3
    460  f1b6		       10 05		      BPL	BreakWhileAccelerating
    461  f1b8		       a2 0a		      LDX	#BREAK_SPEED
    462  f1ba		       4c bf f1 	      JMP	BreakNonZero
    463  f1bd				   BreakWhileAccelerating		; Allow better control while breaking.
    464  f1bd		       a2 05		      LDX	#BREAK_SPEED / 2
    465  f1bf
    466  f1bf				   BreakNonZero
    467  f1bf		       e0 00		      CPX	#0
    468  f1c1		       f0 2b		      BEQ	SkipBreak
    469  f1c3		       86 b0		      STX	Tmp0
    470  f1c5
    471  f1c5				   DecreaseSpeed
    472  f1c5		       38		      SEC
    473  f1c6		       a5 8e		      LDA	Player0SpeedL
    474  f1c8		       e5 b0		      SBC	Tmp0
    475  f1ca		       85 8e		      STA	Player0SpeedL
    476  f1cc		       a5 8f		      LDA	Player0SpeedH
    477  f1ce		       e9 00		      SBC	#0
    478  f1d0		       85 8f		      STA	Player0SpeedH
    479  f1d2
    480  f1d2				   CheckMinSpeed
    481  f1d2		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    482  f1d4		       c9 00		      CMP	#CAR_MIN_SPEED_H
    483  f1d6		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    484  f1d8		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    485  f1da
    486  f1da				   CompareLBreakSpeed
    487  f1da		       a5 8e		      LDA	Player0SpeedL
    488  f1dc		       c9 00		      CMP	#CAR_MIN_SPEED_L
    489  f1de		       90 03		      BCC	ResetMinSpeed	; Less than memory
    490  f1e0		       4c eb f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    491  f1e3
    492  f1e3				   ResetMinSpeed
    493  f1e3		       a9 00		      LDA	#CAR_MIN_SPEED_H
    494  f1e5		       85 8f		      STA	Player0SpeedH
    495  f1e7		       a9 00		      LDA	#CAR_MIN_SPEED_L
    496  f1e9		       85 8e		      STA	Player0SpeedL
    497  f1eb
    498  f1eb				   SkipAccelerateIfBreaking
    499  f1eb		       4c 1e f2 	      JMP	SkipAccelerate
    500  f1ee				   SkipBreak
    501  f1ee
    502  f1ee				   Acelerates
    503  f1ee		       a5 ba		      LDA	CountdownTimer
    504  f1f0		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    505  f1f2		       a5 0c		      LDA	INPT4	;3
    506  f1f4		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    507  f1f6		       a9 10		      LDA	#%00010000	;UP in controller
    508  f1f8		       2c 80 02 	      BIT	SWCHA
    509  f1fb		       d0 21		      BNE	SkipAccelerate
    510  f1fd
    511  f1fd				   IncreaseCarSpeed
    512  f1fd							;Adds speed
    513  f1fd		       18		      CLC
    514  f1fe		       a5 8e		      LDA	Player0SpeedL
    515  f200		       69 01		      ADC	#ACCELERATE_SPEED
    516  f202		       85 8e		      STA	Player0SpeedL
    517  f204		       a5 8f		      LDA	Player0SpeedH
    518  f206		       69 00		      ADC	#0
    519  f208		       85 8f		      STA	Player0SpeedH
    520  f20a
    521  f20a				   CheckIfAlreadyMaxSpeed
    522  f20a		       c9 02		      CMP	#CAR_MAX_SPEED_H
    523  f20c		       90 10		      BCC	SkipAccelerate	; less than my max speed
    524  f20e		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    525  f210							;High bit is max, compare the low
    526  f210		       a5 8e		      LDA	Player0SpeedL
    527  f212		       c9 80		      CMP	#CAR_MAX_SPEED_L
    528  f214		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    529  f216							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    530  f216
    531  f216				   ResetToMaxSpeed		; Speed is more, or is already max
    532  f216		       a9 02		      LDA	#CAR_MAX_SPEED_H
    533  f218		       85 8f		      STA	Player0SpeedH
    534  f21a		       a9 80		      LDA	#CAR_MAX_SPEED_L
    535  f21c		       85 8e		      STA	Player0SpeedL
    536  f21e				   SkipAccelerate
    537  f21e
    538  f21e				   InitUpdateOffsets
    539  f21e		       a2 00		      LDX	#0	; Memory Offset 24 bit
    540  f220		       a0 00		      LDY	#0	; Line Speeds 16 bits
    541  f222		       a5 91		      LDA	TrafficOffset0 + 1	;
    542  f224		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    543  f226		       a5 c5		      LDA	GameMode
    544  f228		       29 04		      AND	#%00000100	; GameModes with high delta
    545  f22a		       f0 02		      BEQ	UpdateOffsets
    546  f22c		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    547  f22e
    548  f22e				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    549  f22e		       38		      SEC
    550  f22f		       a5 8e		      LDA	Player0SpeedL
    551  f231		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    552  f234		       85 b0		      STA	Tmp0
    553  f236		       c8		      INY
    554  f237		       a5 8f		      LDA	Player0SpeedH
    555  f239		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    556  f23c		       85 b1		      STA	Tmp1
    557  f23e		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    558  f240		       e9 00		      SBC	#0
    559  f242		       85 b2		      STA	Tmp2
    560  f244
    561  f244				   AddsTheResult
    562  f244		       18		      CLC
    563  f245		       a5 b0		      LDA	Tmp0
    564  f247		       75 90		      ADC	TrafficOffset0,X
    565  f249		       95 90		      STA	TrafficOffset0,X
    566  f24b		       e8		      INX
    567  f24c		       a5 b1		      LDA	Tmp1
    568  f24e		       75 90		      ADC	TrafficOffset0,X
    569  f250		       95 90		      STA	TrafficOffset0,X
    570  f252		       e8		      INX
    571  f253		       a5 b2		      LDA	Tmp2	; Carry
    572  f255		       75 90		      ADC	TrafficOffset0,X
    573  f257		       95 90		      STA	TrafficOffset0,X
    574  f259		       90 06		      BCC	CalculateOffsetCache
    575  f25b		       e0 02		      CPX	#2	;MSB offset 0
    576  f25d		       d0 02		      BNE	CalculateOffsetCache
    577  f25f		       e6 bb		      INC	Traffic0Msb
    578  f261
    579  f261				   CalculateOffsetCache
    580  f261		       e8		      INX
    581  f262		       38		      SEC
    582  f263		       69 00		      ADC	#0	;Increment by one
    583  f265		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    584  f267
    585  f267				   PrepareNextUpdateLoop
    586  f267		       c8		      INY
    587  f268		       e8		      INX
    588  f269		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    589  f26b		       d0 c1		      BNE	UpdateOffsets
    590  f26d
    591  f26d				   BcdScore		; 48
    592  f26d		       a5 91		      LDA	TrafficOffset0 + 1	;3
    593  f26f		       45 b3		      EOR	Tmp3	;3
    594  f271		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    595  f273		       f0 1b		      BEQ	FinishBcdScore	;2
    596  f275
    597  f275				   ContinueBcdScore
    598  f275		       f8		      SED		;2
    599  f276		       18		      CLC		;2
    600  f277		       a5 b4		      LDA	ScoreBcd0	;3
    601  f279		       69 01		      ADC	#1	;2
    602  f27b		       85 b4		      STA	ScoreBcd0	;3
    603  f27d		       a5 b5		      LDA	ScoreBcd1	;3
    604  f27f		       69 00		      ADC	#0	;2
    605  f281		       85 b5		      STA	ScoreBcd1	;3
    606  f283		       a5 b6		      LDA	ScoreBcd2	;3
    607  f285		       69 00		      ADC	#0	;2
    608  f287		       85 b6		      STA	ScoreBcd2	;3
    609  f289		       a5 b7		      LDA	ScoreBcd3	;3
    610  f28b		       69 00		      ADC	#0	;2
    611  f28d		       85 b7		      STA	ScoreBcd3	;3
    612  f28f		       d8		      CLD		;2
    613  f290				   FinishBcdScore
    614  f290
    615  f290							;Until store the movemnt, LDX contains the value to be stored.
    616  f290				   TestCollision		;
    617  f290							; see if player0 colides with the rest
    618  f290		       a5 00		      LDA	CXM0P
    619  f292		       05 01		      ORA	CXM1P
    620  f294		       05 01		      ORA	CXM1P
    621  f296		       05 02		      ORA	CXP0FB
    622  f298		       05 07		      ORA	CXPPMM
    623  f29a		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    624  f29c		       f0 38		      BEQ	NoCollision	;skip if not hitting...
    625  f29e		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    626  f2a0		       d0 34		      BNE	NoCollision
    627  f2a2		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    628  f2a4		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    629  f2a6		       f0 2e		      BEQ	NoCollision
    630  f2a8		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    631  f2aa		       f0 2a		      BEQ	NoCollision
    632  f2ac		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    633  f2ae		       85 b8		      STA	CollisionCounter	;and store as colision.
    634  f2b0				   CountBcdColision
    635  f2b0		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    636  f2b2		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    637  f2b4		       f0 17		      BEQ	SkipSetColisionSpeed
    638  f2b6		       f8		      SED		;2
    639  f2b7		       18		      CLC		;2
    640  f2b8		       a5 cb		      LDA	HitCountBcd0	;3
    641  f2ba		       69 01		      ADC	#1	;3
    642  f2bc		       85 cb		      STA	HitCountBcd0	;3
    643  f2be		       a5 cc		      LDA	HitCountBcd1	;3
    644  f2c0		       69 00		      ADC	#0	;2
    645  f2c2		       85 cc		      STA	HitCountBcd1	;3
    646  f2c4		       d8		      CLD		;2
    647  f2c5				   EndCountBcdColision
    648  f2c5		       a9 10		      LDA	#COLLISION_SPEED_L	;
    649  f2c7		       c5 8e		      CMP	Player0SpeedL
    650  f2c9		       b0 02		      BCS	SkipSetColisionSpeed
    651  f2cb		       85 8e		      STA	Player0SpeedL
    652  f2cd				   SkipSetColisionSpeed
    653  f2cd		       a9 00		      LDA	#0
    654  f2cf		       85 8f		      STA	Player0SpeedH
    655  f2d1		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    656  f2d3		       4c 13 f3 	      JMP	StoreHMove	; We keep position consistent
    657  f2d6				   NoCollision
    658  f2d6
    659  f2d6				   DecrementCollision
    660  f2d6		       a4 b8		      LDY	CollisionCounter
    661  f2d8		       f0 07		      BEQ	FinishDecrementCollision
    662  f2da		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    663  f2dc		       85 04		      STA	NUSIZ0
    664  f2de		       88		      DEY
    665  f2df		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    666  f2e1				   FinishDecrementCollision
    667  f2e1
    668  f2e1				   ResetPlayerSize
    669  f2e1		       d0 04		      BNE	FinishResetPlayerSize
    670  f2e3		       a9 30		      LDA	#%00110000
    671  f2e5		       85 04		      STA	NUSIZ0	;
    672  f2e7				   FinishResetPlayerSize
    673  f2e7
    674  f2e7				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    675  f2e7		       c0 01		      CPY	#1	; Last frame before reset
    676  f2e9		       d0 05		      BNE	SkipResetPlayerPosition
    677  f2eb		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    678  f2ed		       4c 13 f3 	      JMP	StoreHMove
    679  f2f0				   SkipResetPlayerPosition
    680  f2f0
    681  f2f0							; for left and right, we're gonna 
    682  f2f0							; set the horizontal speed, and then do
    683  f2f0							; a single HMOVE.  We'll use X to hold the
    684  f2f0							; horizontal speed, then store it in the 
    685  f2f0							; appropriate register
    686  f2f0				   PrepareReadXAxis
    687  f2f0		       a2 00		      LDX	#0
    688  f2f2		       a4 b9		      LDY	Player0X
    689  f2f4				   BeginReadLeft
    690  f2f4		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    691  f2f6		       a9 40		      LDA	#%01000000	;Left
    692  f2f8		       2c 80 02 	      BIT	SWCHA
    693  f2fb		       d0 07		      BNE	SkipMoveLeft
    694  f2fd		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    695  f2ff		       c6 b9		      DEC	Player0X
    696  f301		       4c 13 f3 	      JMP	StoreHMove	; Cannot move left and right...
    697  f304				   SkipMoveLeft
    698  f304				   BeginReadRight
    699  f304		       c0 36		      CPY	#PLAYER_0_MAX_X
    700  f306		       f0 0b		      BEQ	SkipMoveRight	; At max already
    701  f308		       a9 80		      LDA	#%10000000	;Right
    702  f30a		       2c 80 02 	      BIT	SWCHA
    703  f30d		       d0 04		      BNE	SkipMoveRight
    704  f30f		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    705  f311		       e6 b9		      INC	Player0X
    706  f313				   SkipMoveRight
    707  f313				   StoreHMove
    708  f313		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    709  f315		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    710  f317
    711  f317				   DividePlayerSpeedBy4
    712  f317		       a5 8f		      LDA	Player0SpeedH
    713  f319		       0a		      ASL
    714  f31a		       0a		      ASL
    715  f31b		       0a		      ASL
    716  f31c		       0a		      ASL
    717  f31d		       0a		      ASL
    718  f31e		       0a		      ASL
    719  f31f		       85 b1		      STA	Tmp1
    720  f321		       a5 8e		      LDA	Player0SpeedL
    721  f323		       4a		      LSR
    722  f324		       4a		      LSR
    723  f325		       29 3f		      AND	#%00111111
    724  f327		       05 b1		      ORA	Tmp1
    725  f329		       85 b0		      STA	Tmp0	; Division Result
    726  f32b
    727  f32b				   CalculateParallax1Offset		; 7/8 speed
    728  f32b		       38		      SEC
    729  f32c		       a5 8e		      LDA	Player0SpeedL
    730  f32e		       e5 b0		      SBC	Tmp0
    731  f330		       85 b2		      STA	Tmp2
    732  f332		       a5 8f		      LDA	Player0SpeedH
    733  f334		       e9 00		      SBC	#0
    734  f336		       85 b3		      STA	Tmp3
    735  f338
    736  f338		       18		      CLC
    737  f339		       a5 c6		      LDA	ParallaxOffset1
    738  f33b		       65 b2		      ADC	Tmp2
    739  f33d		       85 c6		      STA	ParallaxOffset1
    740  f33f		       a5 c7		      LDA	ParallaxOffset1 + 1
    741  f341		       65 b3		      ADC	Tmp3
    742  f343		       85 c7		      STA	ParallaxOffset1 + 1
    743  f345
    744  f345				   CalculateParallax2Offset		; 6/8 speed
    745  f345		       38		      SEC
    746  f346		       a5 b2		      LDA	Tmp2
    747  f348		       e5 b0		      SBC	Tmp0
    748  f34a		       85 b2		      STA	Tmp2
    749  f34c		       a5 b3		      LDA	Tmp3
    750  f34e		       e9 00		      SBC	#0
    751  f350		       85 b3		      STA	Tmp3
    752  f352
    753  f352		       18		      CLC
    754  f353		       a5 c8		      LDA	ParallaxOffset2
    755  f355		       65 b2		      ADC	Tmp2
    756  f357		       85 c8		      STA	ParallaxOffset2
    757  f359		       a5 c9		      LDA	ParallaxOffset2 + 1
    758  f35b		       65 b3		      ADC	Tmp3
    759  f35d		       85 c9		      STA	ParallaxOffset2 + 1
    760  f35f
    761  f35f				   SkipUpdateLogic		; Continue here if not paused
    762  f35f
    763  f35f
    764  f35f				   ProcessBorder		;Can be optimized (probably)
    765  f35f		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    766  f361		       a5 88		      LDA	ParallaxMode
    767  f363		       c9 70		      CMP	#%01110000
    768  f365		       f0 1a		      BEQ	HorizontalParallaxMode
    769  f367		       c9 d0		      CMP	#%11010000
    770  f369		       f0 0a		      BEQ	VerticalParallaxMode
    771  f36b		       c9 b0		      CMP	#%10110000
    772  f36d		       f0 0c		      BEQ	TachometerMode
    773  f36f
    774  f36f				   DefaultBorderMode
    775  f36f		       20 02 f8 	      JSR	DefaultBorderLoop
    776  f372		       4c 84 f3 	      JMP	EndProcessingBorder
    777  f375				   VerticalParallaxMode
    778  f375		       20 71 f8 	      JSR	VerticalParallaxLoop
    779  f378		       4c 84 f3 	      JMP	EndProcessingBorder
    780  f37b				   TachometerMode
    781  f37b		       20 1d f8 	      JSR	PrepareTachometerBorderLoop
    782  f37e		       4c 84 f3 	      JMP	EndProcessingBorder
    783  f381				   HorizontalParallaxMode
    784  f381		       20 b4 f7 	      JSR	HorizontalParallaxLoop
    785  f384
    786  f384				   EndProcessingBorder
    787  f384
    788  f384				   ProcessScoreFontColor
    789  f384		       a6 d6		      LDX	ScoreFontColorHoldChange
    790  f386		       f0 06		      BEQ	ResetScoreFontColor
    791  f388		       ca		      DEX
    792  f389		       86 d6		      STX	ScoreFontColorHoldChange
    793  f38b		       4c 92 f3 	      JMP	SkipScoreFontColor
    794  f38e				   ResetScoreFontColor
    795  f38e		       a9 f9		      LDA	#SCORE_FONT_COLOR
    796  f390		       85 d5		      STA	ScoreFontColor
    797  f392				   SkipScoreFontColor
    798  f392
    799  f392				   IsGameOver
    800  f392		       a5 ba		      LDA	CountdownTimer
    801  f394		       05 8e		      ORA	Player0SpeedL
    802  f396		       05 8f		      ORA	Player0SpeedH
    803  f398		       d0 0b		      BNE	IsCheckpoint
    804  f39a		       a9 01		      LDA	#1
    805  f39c		       85 d6		      STA	ScoreFontColorHoldChange
    806  f39e		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    807  f3a0		       85 d5		      STA	ScoreFontColor
    808  f3a2		       4c e6 f3 	      JMP	SkipIsTimeOver
    809  f3a5
    810  f3a5				   IsCheckpoint
    811  f3a5		       a5 d7		      LDA	NextCheckpoint
    812  f3a7		       c5 92		      CMP	TrafficOffset0 + 2
    813  f3a9		       d0 2f		      BNE	SkipIsCheckpoint
    814  f3ab		       18		      CLC
    815  f3ac		       69 10		      ADC	#CHECKPOINT_INTERVAL
    816  f3ae		       85 d7		      STA	NextCheckpoint
    817  f3b0		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    818  f3b2		       85 d5		      STA	ScoreFontColor
    819  f3b4		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    820  f3b6		       85 d6		      STA	ScoreFontColorHoldChange
    821  f3b8				   AddCheckpointBcd
    822  f3b8		       f8		      SED		;2
    823  f3b9		       18		      CLC		;2
    824  f3ba		       a5 a4		      LDA	CheckpointBcd0	;3
    825  f3bc		       69 01		      ADC	#1	;3
    826  f3be		       85 a4		      STA	CheckpointBcd0	;3
    827  f3c0		       a5 a5		      LDA	CheckpointBcd1	;3
    828  f3c2		       69 00		      ADC	#0	;2
    829  f3c4		       85 a5		      STA	CheckpointBcd1	;3
    830  f3c6		       d8		      CLD		;2
    831  f3c7				   EndCheckpointBcd
    832  f3c7		       a5 ba		      LDA	CountdownTimer
    833  f3c9		       18		      CLC
    834  f3ca		       65 c2		      ADC	CheckpointTime
    835  f3cc		       85 ba		      STA	CountdownTimer
    836  f3ce		       90 04		      BCC	JumpSkipTimeOver
    837  f3d0		       a9 ff		      LDA	#$FF
    838  f3d2		       85 ba		      STA	CountdownTimer	; Does not overflow!
    839  f3d4				   JumpSkipTimeOver
    840  f3d4		       20 2c f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    841  f3d7		       4c e6 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    842  f3da				   SkipIsCheckpoint
    843  f3da
    844  f3da				   IsTimeOver
    845  f3da		       a5 ba		      LDA	CountdownTimer
    846  f3dc		       d0 08		      BNE	SkipIsTimeOver
    847  f3de		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    848  f3e0		       85 d6		      STA	ScoreFontColorHoldChange
    849  f3e2		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    850  f3e4		       85 d5		      STA	ScoreFontColor
    851  f3e6				   SkipIsTimeOver
    852  f3e6
    853  f3e6				   PrintEasterEggCondition
    854  f3e6		       a5 8d		      LDA	FrameCount1
    855  f3e8		       29 38		      AND	#%00111000
    856  f3ea		       05 c0		      ORA	GameStatus
    857  f3ec		       c9 38		      CMP	#%00111000
    858  f3ee		       d0 06		      BNE	ChooseTextSide
    859  f3f0		       20 c5 f8 	      JSR	PrintEasterEgg
    860  f3f3		       4c e7 f4 	      JMP	RightScoreWriteEnd
    861  f3f6
    862  f3f6							;Could be done during on vblank to save this comparisson time (before draw score), 
    863  f3f6							;but I am saving vblank cycles for now, in case of 2 players.
    864  f3f6				   ChooseTextSide		; 
    865  f3f6		       a5 8c		      LDA	FrameCount0	;3
    866  f3f8		       29 01		      AND	#%00000001	;2
    867  f3fa		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    868  f3fc		       4c 7d f4 	      JMP	RightScoreWrite
    869  f3ff
    870  f3ff				   LeftScoreWrite
    871  f3ff		       a5 d5		      LDA	ScoreFontColor
    872  f401		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    873  f403		       f0 4e		      BEQ	PrintCheckpoint
    874  f405		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    875  f407		       f0 52		      BEQ	PrintStartGame
    876  f409		       a5 c0		      LDA	GameStatus
    877  f40b		       f0 56		      BEQ	PrintHellwayLeft
    878  f40d				   WriteDistance		;Not optimized yet, ugly code.
    879  f40d				   Digit0Distance
    880  f40d		       a5 91		      LDA	TrafficOffset0 + 1	;3
    881  f40f		       4a		      LSR		; 2
    882  f410		       4a		      LSR		; 2
    883  f411		       4a		      LSR		; 2
    884  f412		       4a		      LSR		; 2
    885  f413		       aa		      TAX		; 2
    886  f414		       bd be fd 	      LDA	FontLookup,X	;4
    887  f417		       85 d3		      STA	ScoreD3	;3
    888  f419
    889  f419				   Digit1Distance
    890  f419		       a5 92		      LDA	TrafficOffset0 + 2	;3
    891  f41b		       29 0f		      AND	#%00001111	;2
    892  f41d		       aa		      TAX		; 2
    893  f41e		       bd be fd 	      LDA	FontLookup,X	;4 
    894  f421		       85 d2		      STA	ScoreD2	;3
    895  f423
    896  f423				   Digit2Distance
    897  f423		       a5 92		      LDA	TrafficOffset0 + 2	;3
    898  f425		       4a		      LSR		; 2
    899  f426		       4a		      LSR		; 2
    900  f427		       4a		      LSR		; 2
    901  f428		       4a		      LSR		; 2
    902  f429		       aa		      TAX		; 2
    903  f42a		       bd be fd 	      LDA	FontLookup,X	;4
    904  f42d		       85 d1		      STA	ScoreD1	;3
    905  f42f
    906  f42f				   Digit3Distance
    907  f42f		       a5 bb		      LDA	Traffic0Msb	;3
    908  f431		       29 0f		      AND	#%00001111	;2
    909  f433		       aa		      TAX		; 2
    910  f434		       bd be fd 	      LDA	FontLookup,X	;4 
    911  f437		       85 d0		      STA	ScoreD0	;3
    912  f439
    913  f439				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    914  f439		       a5 bb		      LDA	Traffic0Msb
    915  f43b		       29 f0		      AND	#%11110000	;2
    916  f43d		       d0 07		      BNE	DrawDistanceExtraDigit
    917  f43f		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    918  f441		       85 d4		      STA	ScoreD4	;3
    919  f443		       4c 50 f4 	      JMP	EndDrawDistance
    920  f446				   DrawDistanceExtraDigit
    921  f446		       4a		      LSR		; 2
    922  f447		       4a		      LSR		; 2
    923  f448		       4a		      LSR		; 2
    924  f449		       4a		      LSR		; 2
    925  f44a		       aa		      TAX		; 2
    926  f44b		       bd be fd 	      LDA	FontLookup,X	;4
    927  f44e		       85 d4		      STA	ScoreD4	;3
    928  f450
    929  f450				   EndDrawDistance
    930  f450		       4c e7 f4 	      JMP	RightScoreWriteEnd	;3
    931  f453
    932  f453				   PrintCheckpoint
    933  f453		       a2 00		      LDX	#<CheckpointText
    934  f455		       20 96 f7 	      JSR	PrintStaticText
    935  f458		       4c e7 f4 	      JMP	RightScoreWriteEnd	;3
    936  f45b				   PrintStartGame
    937  f45b		       a2 23		      LDX	#<GoText
    938  f45d		       20 96 f7 	      JSR	PrintStaticText
    939  f460		       4c e7 f4 	      JMP	RightScoreWriteEnd	;3
    940  f463
    941  f463				   PrintHellwayLeft
    942  f463		       a5 8d		      LDA	FrameCount1
    943  f465		       29 01		      AND	#1
    944  f467		       d0 05		      BNE	PrintCreditsLeft
    945  f469		       a2 05		      LDX	#<HellwayLeftText
    946  f46b		       4c 70 f4 	      JMP	PrintGameMode
    947  f46e				   PrintCreditsLeft
    948  f46e		       a2 0f		      LDX	#<OpbText
    949  f470
    950  f470				   PrintGameMode
    951  f470		       20 96 f7 	      JSR	PrintStaticText
    952  f473		       a6 c5		      LDX	GameMode
    953  f475		       bd be fd 	      LDA	FontLookup,X	;4 
    954  f478		       85 d0		      STA	ScoreD0	;3
    955  f47a		       4c e7 f4 	      JMP	RightScoreWriteEnd	;3
    956  f47d
    957  f47d				   RightScoreWrite
    958  f47d		       a5 c0		      LDA	GameStatus
    959  f47f		       f0 45		      BEQ	PrintHellwayRight
    960  f481		       a5 d5		      LDA	ScoreFontColor
    961  f483		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    962  f485		       f0 52		      BEQ	PrintGameOver
    963  f487				   Digit0Timer
    964  f487		       a5 ba		      LDA	CountdownTimer	;3
    965  f489		       29 0f		      AND	#%00001111	;2
    966  f48b		       aa		      TAX		; 2
    967  f48c		       bd be fd 	      LDA	FontLookup,X	;4 
    968  f48f		       85 d1		      STA	ScoreD1	;3
    969  f491
    970  f491				   Digit1Timer
    971  f491		       a5 ba		      LDA	CountdownTimer	;3
    972  f493		       4a		      LSR		; 2
    973  f494		       4a		      LSR		; 2
    974  f495		       4a		      LSR		; 2
    975  f496		       4a		      LSR		; 2
    976  f497		       aa		      TAX		; 2
    977  f498		       bd be fd 	      LDA	FontLookup,X	;4
    978  f49b		       85 d0		      STA	ScoreD0	;3
    979  f49d
    980  f49d		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    981  f49f		       85 d2		      STA	ScoreD2	;3
    982  f4a1
    983  f4a1				   Digit0Speed
    984  f4a1		       a5 8e		      LDA	Player0SpeedL
    985  f4a3		       29 3c		      AND	#%00111100	;2 Discard the last bits
    986  f4a5		       4a		      LSR		; 2
    987  f4a6		       4a		      LSR		; 2
    988  f4a7		       aa		      TAX		; 2
    989  f4a8		       bd be fd 	      LDA	FontLookup,X	;4
    990  f4ab		       85 d4		      STA	ScoreD4	;3
    991  f4ad
    992  f4ad				   Digit1Speed
    993  f4ad		       a5 8e		      LDA	Player0SpeedL
    994  f4af		       29 c0		      AND	#%11000000	;2 Discard the last bits
    995  f4b1		       18		      CLC
    996  f4b2		       2a		      ROL		;First goes into carry
    997  f4b3		       2a		      ROL
    998  f4b4		       2a		      ROL
    999  f4b5		       85 b0		      STA	Tmp0
   1000  f4b7		       a5 8f		      LDA	Player0SpeedH
   1001  f4b9		       0a		      ASL
   1002  f4ba		       0a		      ASL
   1003  f4bb		       05 b0		      ORA	Tmp0
   1004  f4bd		       aa		      TAX		; 2
   1005  f4be		       bd be fd 	      LDA	FontLookup,X	;4
   1006  f4c1		       85 d3		      STA	ScoreD3	;3
   1007  f4c3		       4c e7 f4 	      JMP	RightScoreWriteEnd
   1008  f4c6
   1009  f4c6				   PrintHellwayRight
   1010  f4c6		       a5 8d		      LDA	FrameCount1
   1011  f4c8		       29 01		      AND	#1
   1012  f4ca		       d0 05		      BNE	PrintCreditsRight
   1013  f4cc		       a2 0a		      LDX	#<HellwayRightText
   1014  f4ce		       4c d3 f4 	      JMP	PrintRightIntro
   1015  f4d1				   PrintCreditsRight
   1016  f4d1		       a2 14		      LDX	#<YearText
   1017  f4d3				   PrintRightIntro
   1018  f4d3		       20 96 f7 	      JSR	PrintStaticText
   1019  f4d6		       4c e7 f4 	      JMP	RightScoreWriteEnd
   1020  f4d9				   PrintGameOver
   1021  f4d9		       a5 8c		      LDA	FrameCount0
   1022  f4db		       30 05		      BMI	PrintOverText
   1023  f4dd		       a2 19		      LDX	#<GameText
   1024  f4df		       4c e4 f4 	      JMP	StoreGameOverText
   1025  f4e2				   PrintOverText
   1026  f4e2		       a2 1e		      LDX	#<OverText
   1027  f4e4				   StoreGameOverText
   1028  f4e4		       20 96 f7 	      JSR	PrintStaticText
   1029  f4e7				   RightScoreWriteEnd
   1030  f4e7
   1031  f4e7
   1032  f4e7				   ScoreBackgroundColor
   1033  f4e7		       a2 00		      LDX	#0
   1034  f4e9		       ad 82 02 	      LDA	SWCHB
   1035  f4ec		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1036  f4ee		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1037  f4f0		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1038  f4f2		       a2 03		      LDX	#BACKGROUND_COLOR
   1039  f4f4				   BlackAndWhiteScoreBg
   1040  f4f4		       85 b2		      STA	Tmp2	; Score Background
   1041  f4f6		       86 b3		      STX	Tmp3	; Traffic Background
   1042  f4f8
   1043  f4f8				   ConfigurePFForScore
   1044  f4f8							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1045  f4f8		       85 09		      STA	COLUBK
   1046  f4fa		       20 ee f6 	      JSR	ClearAll
   1047  f4fd		       a9 02		      LDA	#%00000010	; Score mode
   1048  f4ff		       85 0a		      STA	CTRLPF
   1049  f501		       a5 8c		      LDA	FrameCount0	;3
   1050  f503		       29 01		      AND	#%00000001	;2
   1051  f505		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
   1052  f507				   LeftScoreOn
   1053  f507		       a5 d5		      LDA	ScoreFontColor
   1054  f509		       85 07		      STA	COLUP1
   1055  f50b		       a5 b2		      LDA	Tmp2
   1056  f50d		       85 06		      STA	COLUP0
   1057  f50f		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1058  f511		       85 b1		      STA	Tmp1
   1059  f513		       4c 22 f5 	      JMP	CallWaitForVblankEnd
   1060  f516				   RightScoreOn
   1061  f516		       a5 d5		      LDA	ScoreFontColor
   1062  f518		       85 06		      STA	COLUP0
   1063  f51a		       a5 b2		      LDA	Tmp2
   1064  f51c		       85 07		      STA	COLUP1
   1065  f51e		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1066  f520		       85 b1		      STA	Tmp1
   1067  f522
   1068  f522							; After here we are going to update the screen, No more heavy code
   1069  f522				   CallWaitForVblankEnd
   1070  f522		       20 99 fb 	      JSR	WaitForVblankEnd
   1071  f525
   1072  f525				   DrawScoreHud
   1073  f525		       20 37 f9 	      JSR	PrintScore
   1074  f528
   1075  f528		       85 02		      STA	WSYNC
   1076  f52a
   1077  f52a		       a5 0c		      LDA	INPT4	;3
   1078  f52c		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1079  f52e		       a5 d5		      LDA	ScoreFontColor
   1080  f530		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1081  f532		       d0 0c		      BNE	WaitAnotherScoreLine
   1082  f534		       a5 8c		      LDA	FrameCount0	;3
   1083  f536		       29 01		      AND	#%00000001	;2
   1084  f538		       f0 03		      BEQ	LeftScoreOnGameOver
   1085  f53a		       4c c2 fa 	      JMP	DrawGameOverScreenRight
   1086  f53d				   LeftScoreOnGameOver
   1087  f53d		       4c f4 f9 	      JMP	DrawGameOverScreenLeft
   1088  f540
   1089  f540				   WaitAnotherScoreLine
   1090  f540		       85 02		      STA	WSYNC
   1091  f542
   1092  f542				   PrepareForTraffic
   1093  f542		       20 00 f7 	      JSR	ClearPF	; 32
   1094  f545
   1095  f545		       85 02		      STA	WSYNC
   1096  f547		       85 02		      STA	WSYNC
   1097  f549
   1098  f549		       a9 31		      LDA	#%00110001	; 2 Score mode
   1099  f54b		       85 0a		      STA	CTRLPF	;3
   1100  f54d
   1101  f54d		       a5 c3		      LDA	TrafficColor	;2
   1102  f54f		       85 08		      STA	COLUPF	;3
   1103  f551
   1104  f551		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1105  f553		       85 07		      STA	COLUP1	;3
   1106  f555
   1107  f555		       a5 d5		      LDA	ScoreFontColor	;3
   1108  f557		       85 06		      STA	COLUP0	;3
   1109  f559
   1110  f559		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1111  f55b
   1112  f55b		       20 00 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1113  f55e
      0  f55e					      SLEEP	14
      1  f55e				   .CYCLES    SET	14
      2  f55e
      3  f55e				  -	      IF	.CYCLES < 2
      4  f55e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f55e				  -	      ERR
      6  f55e					      ENDIF
      7  f55e
      8  f55e				  -	      IF	.CYCLES & 1
      9  f55e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f55e				  -	      nop	0
     11  f55e				  -	      ELSE
     12  f55e				  -	      bit	VSYNC
     13  f55e				  -	      ENDIF
     14  f55e				  -.CYCLES    SET	.CYCLES - 3
     15  f55e					      ENDIF
     16  f55e
     17  f55e					      REPEAT	.CYCLES / 2
     18  f55e		       ea		      nop
     17  f55e					      REPEND
     18  f55f		       ea		      nop
     17  f55f					      REPEND
     18  f560		       ea		      nop
     17  f560					      REPEND
     18  f561		       ea		      nop
     17  f561					      REPEND
     18  f562		       ea		      nop
     17  f562					      REPEND
     18  f563		       ea		      nop
     17  f563					      REPEND
     18  f564		       ea		      nop
     19  f565					      REPEND
   1115  f565
   1116  f565		       a5 b3		      LDA	Tmp3	;3
   1117  f567		       85 09		      STA	COLUBK	;3
   1118  f569		       4c 6e f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end
   1119  f56c
   1120  f56c							;main scanline loop...
   1121  f56c				   ScanLoop
   1122  f56c		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1123  f56e
   1124  f56e							;Start of next line!			
   1125  f56e				   DrawCache		;63 Is the last line going to the top of the next frame?
   1126  f56e		       a5 81		      LDA	PF0Cache	;3
   1127  f570		       85 0d		      STA	PF0	;3
   1128  f572
   1129  f572		       a5 82		      LDA	PF1Cache	;3
   1130  f574		       85 0e		      STA	PF1	;3
   1131  f576
   1132  f576		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1133  f578		       b0 04		      BCS	SkipDrawCar	;2
   1134  f57a		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1135  f57c		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1136  f57e				   SkipDrawCar
   1137  f57e
   1138  f57e		       a5 84		      LDA	GRP1Cache	;3
   1139  f580		       85 1c		      STA	GRP1	;3
   1140  f582
   1141  f582		       a5 85		      LDA	ENABLCache	;3
   1142  f584		       85 1f		      STA	ENABL	;3
   1143  f586
   1144  f586		       a5 86		      LDA	ENAM0Cache	;3
   1145  f588		       85 1d		      STA	ENAM0	;3
   1146  f58a
   1147  f58a		       a5 87		      LDA	ENAM1Cache	;3
   1148  f58c		       85 1e		      STA	ENAM1	;3
   1149  f58e
   1150  f58e		       a9 00		      LDA	#0	;2
   1151  f590							;STA PF1Cache ;3
   1152  f590		       85 84		      STA	GRP1Cache	;3
   1153  f592		       85 85		      STA	ENABLCache	;3
   1154  f594		       85 86		      STA	ENAM0Cache	;3
   1155  f596		       85 87		      STA	ENAM1Cache	; 3
   1156  f598
   1157  f598							;BEQ DrawTraffic3
   1158  f598				   DrawTraffic1 		; 33
   1159  f598		       98		      TYA		; 2
   1160  f599		       18		      CLC		; 2 
   1161  f59a		       65 95		      ADC	TrafficOffset1 + 1	;3
   1162  f59c		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1163  f59e		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1164  f5a0		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1165  f5a2		       4c a7 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1166  f5a5				   EorOffsetWithCarry
   1167  f5a5		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1168  f5a7				   AfterEorOffsetWithCarry		;17
   1169  f5a7		       aa		      TAX		;2
   1170  f5a8		       bd 00 fe 	      LDA	AesTable,X	; 4
   1171  f5ab		       c5 c1		      CMP	TrafficChance	;3
   1172  f5ad		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1173  f5af		       a9 ff		      LDA	#$FF	;2
   1174  f5b1		       85 84		      STA	GRP1Cache	;3
   1175  f5b3				   FinishDrawTraffic1
   1176  f5b3
   1177  f5b3				   DrawTraffic2 		; 33
   1178  f5b3		       98		      TYA		; 2
   1179  f5b4		       18		      CLC		; 2 
   1180  f5b5		       65 99		      ADC	TrafficOffset2 + 1	;3
   1181  f5b7		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1182  f5b9		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1183  f5bb		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1184  f5bd		       4c c2 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1185  f5c0				   EorOffsetWithCarry2
   1186  f5c0		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1187  f5c2				   AfterEorOffsetWithCarry2		;17
   1188  f5c2		       aa		      TAX		;2
   1189  f5c3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1190  f5c6		       c5 c1		      CMP	TrafficChance	;3
   1191  f5c8		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1192  f5ca		       a9 02		      LDA	#%00000010	;2
   1193  f5cc		       85 85		      STA	ENABLCache	;3
   1194  f5ce				   FinishDrawTraffic2
   1195  f5ce
   1196  f5ce							;STA WSYNC ;65 / 137
   1197  f5ce
   1198  f5ce							; LDA Tmp0 ; Flicker this line if drawing car
   1199  f5ce							; BEQ FinishDrawTraffic4
   1200  f5ce				   DrawTraffic3 		; 33
   1201  f5ce		       98		      TYA		; 2
   1202  f5cf		       18		      CLC		; 2 
   1203  f5d0		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1204  f5d2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1205  f5d4		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1206  f5d6		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1207  f5d8		       4c dd f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1208  f5db				   EorOffsetWithCarry3
   1209  f5db		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1210  f5dd				   AfterEorOffsetWithCarry3		;17
   1211  f5dd		       aa		      TAX		;2
   1212  f5de		       bd 00 fe 	      LDA	AesTable,X	; 4
   1213  f5e1		       c5 c1		      CMP	TrafficChance	;3
   1214  f5e3		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1215  f5e5		       a9 02		      LDA	#%00000010	;2
   1216  f5e7		       85 86		      STA	ENAM0Cache
   1217  f5e9				   FinishDrawTraffic3
   1218  f5e9
   1219  f5e9				   DrawTraffic4 		; 33
   1220  f5e9		       98		      TYA		; 2
   1221  f5ea		       18		      CLC		; 2 
   1222  f5eb		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1223  f5ed		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1224  f5ef		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1225  f5f1		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1226  f5f3		       4c f8 f5 	      JMP	AfterEorOffsetWithCarry4	; 3
   1227  f5f6				   EorOffsetWithCarry4
   1228  f5f6		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1229  f5f8				   AfterEorOffsetWithCarry4		;17
   1230  f5f8		       aa		      TAX		;2
   1231  f5f9		       bd 00 fe 	      LDA	AesTable,X	; 4
   1232  f5fc		       c5 c1		      CMP	TrafficChance	;3
   1233  f5fe		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1234  f600		       a9 02		      LDA	#%00000010	;2
   1235  f602		       85 87		      STA	ENAM1Cache	;3
   1236  f604				   FinishDrawTraffic4
   1237  f604
   1238  f604				   DrawTraffic0 		; 20
   1239  f604		       98		      TYA		;2
   1240  f605		       29 07		      AND	#%00000111	;2
   1241  f607		       aa		      TAX		;2
   1242  f608		       b5 d8		      LDA	ParallaxCache,X	;4
   1243  f60a		       85 82		      STA	PF1Cache	;3
   1244  f60c		       b5 f0		      LDA	ParallaxCache2,X	;4
   1245  f60e		       85 81		      STA	PF0Cache	;3
   1246  f610
   1247  f610				   SkipDrawTraffic0
   1248  f610
   1249  f610				   WhileScanLoop
   1250  f610		       88		      DEY		;2
   1251  f611		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1252  f613		       4c 6c f5 	      JMP	ScanLoop	;3
   1253  f616				   FinishScanLoop		; 7 209 of 222
   1254  f616
   1255  f616		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1256  f618		       20 0f f7 	      JSR	LoadAll
   1257  f61b		       85 02		      STA	WSYNC	; do stuff!
   1258  f61d		       85 02		      STA	WSYNC
   1259  f61f		       85 02		      STA	WSYNC
   1260  f621							;42 cycles to use here
   1261  f621
   1262  f621				   PrepareOverscan
   1263  f621		       a9 02		      LDA	#2
   1264  f623		       85 02		      STA	WSYNC
   1265  f625		       85 01		      STA	VBLANK
   1266  f627
   1267  f627		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1268  f629		       8d 96 02 	      STA	TIM64T
   1269  f62c
   1270  f62c				   LeftSound		;58
   1271  f62c		       a5 ba		      LDA	CountdownTimer	;3
   1272  f62e		       f0 24		      BEQ	EngineOff	;2
   1273  f630		       a5 8e		      LDA	Player0SpeedL	;3
   1274  f632		       29 80		      AND	#%10000000	;2
   1275  f634		       05 8f		      ORA	Player0SpeedH	;3
   1276  f636		       18		      CLC		;2
   1277  f637		       2a		      ROL		;2
   1278  f638		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1279  f63a		       aa		      TAX		;2
   1280  f63b		       a5 8e		      LDA	Player0SpeedL	;3
   1281  f63d		       4a		      LSR		;2
   1282  f63e		       4a		      LSR		;2
   1283  f63f		       4a		      LSR		;2
   1284  f640		       29 0f		      AND	#%00001111	;2
   1285  f642		       85 b0		      STA	Tmp0	;3
   1286  f644		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1287  f647		       38		      SEC		;2
   1288  f648		       e5 b0		      SBC	Tmp0	;3
   1289  f64a		       85 17		      STA	AUDF0	;3
   1290  f64c		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1291  f64f		       85 15		      STA	AUDC0	;3
   1292  f651		       4c 58 f6 	      JMP	EndLeftSound	;3
   1293  f654				   EngineOff
   1294  f654		       a9 00		      LDA	#0
   1295  f656		       85 15		      STA	AUDC0
   1296  f658
   1297  f658				   EndLeftSound
   1298  f658
   1299  f658
   1300  f658				   RightSound		; 56 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1301  f658		       a5 d5		      LDA	ScoreFontColor	;3
   1302  f65a		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1303  f65c		       f0 4a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1304  f65e		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1305  f660		       f0 21		      BEQ	PlayCheckpoint	;2
   1306  f662		       a5 b8		      LDA	CollisionCounter	;3
   1307  f664		       c9 e0		      CMP	#$E0	;2
   1308  f666		       b0 0c		      BCS	PlayColision	;2
   1309  f668		       a5 d7		      LDA	NextCheckpoint	;3
   1310  f66a		       38		      SEC		;2
   1311  f66b		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1312  f66d		       c9 02		      CMP	#$02	;2
   1313  f66f		       90 24		      BCC	PlayBeforeCheckpoint	;4
   1314  f671		       4c a8 f6 	      JMP	MuteRightSound
   1315  f674				   PlayColision
   1316  f674		       a9 1f		      LDA	#31
   1317  f676		       85 18		      STA	AUDF1
   1318  f678		       a9 08		      LDA	#8
   1319  f67a		       85 16		      STA	AUDC1
   1320  f67c		       a9 08		      LDA	#8
   1321  f67e		       85 1a		      STA	AUDV1
   1322  f680		       4c ac f6 	      JMP	EndRightSound
   1323  f683
   1324  f683				   PlayCheckpoint
   1325  f683		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1326  f685		       4a		      LSR		;2
   1327  f686		       4a		      LSR		;2
   1328  f687		       4a		      LSR		;2
   1329  f688		       85 18		      STA	AUDF1	;3
   1330  f68a		       a9 0c		      LDA	#12	;2
   1331  f68c		       85 16		      STA	AUDC1	;3
   1332  f68e		       a9 06		      LDA	#6	;2
   1333  f690		       85 1a		      STA	AUDV1	;3
   1334  f692		       4c ac f6 	      JMP	EndRightSound	;3
   1335  f695
   1336  f695				   PlayBeforeCheckpoint
   1337  f695		       a5 8c		      LDA	FrameCount0	;3
   1338  f697		       29 1c		      AND	#%00011100	;2
   1339  f699		       09 03		      ORA	#%00000011	;2
   1340  f69b		       85 18		      STA	AUDF1	;3
   1341  f69d		       a9 0c		      LDA	#12	;2
   1342  f69f		       85 16		      STA	AUDC1	;3
   1343  f6a1		       a9 03		      LDA	#3	;2
   1344  f6a3		       85 1a		      STA	AUDV1	;3
   1345  f6a5		       4c ac f6 	      JMP	EndRightSound	;3
   1346  f6a8
   1347  f6a8				   MuteRightSound
   1348  f6a8		       a9 00		      LDA	#0
   1349  f6aa		       85 1a		      STA	AUDV1
   1350  f6ac				   EndRightSound
   1351  f6ac
   1352  f6ac				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1353  f6ac		       a5 c0		      LDA	GameStatus	;3
   1354  f6ae		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1355  f6b0		       a5 d5		      LDA	ScoreFontColor	;3
   1356  f6b2		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1357  f6b4		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1358  f6b6		       c6 cf		      DEC	OneSecondConter	;5
   1359  f6b8		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1360  f6ba
   1361  f6ba		       f8		      SED		;2 BCD Operations after this point
   1362  f6bb				   CountGlideTimeBcd
   1363  f6bb		       a5 d5		      LDA	ScoreFontColor	;3
   1364  f6bd		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1365  f6bf		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1366  f6c1		       18		      CLC		;2
   1367  f6c2		       a5 cd		      LDA	GlideTimeBcd0	;3
   1368  f6c4		       69 01		      ADC	#1	;3
   1369  f6c6		       85 cd		      STA	GlideTimeBcd0	;3
   1370  f6c8		       a5 ce		      LDA	GlideTimeBcd1	;3
   1371  f6ca		       69 00		      ADC	#0	;2
   1372  f6cc		       85 ce		      STA	GlideTimeBcd1	;3
   1373  f6ce				   EndCountGlideTimeBcd
   1374  f6ce				   IncreaseTotalTimerBcd
   1375  f6ce		       18		      CLC		;2
   1376  f6cf		       a5 bd		      LDA	TimeBcd0	;3
   1377  f6d1		       69 01		      ADC	#1	;2
   1378  f6d3		       85 bd		      STA	TimeBcd0	;3
   1379  f6d5		       a5 be		      LDA	TimeBcd1	;3
   1380  f6d7		       69 00		      ADC	#0	;2
   1381  f6d9		       85 be		      STA	TimeBcd1	;3
   1382  f6db		       a5 bf		      LDA	TimeBcd2	;3
   1383  f6dd		       69 00		      ADC	#0	;2
   1384  f6df		       85 bf		      STA	TimeBcd2	;3
   1385  f6e1
   1386  f6e1				   ResetOneSecondCounter
   1387  f6e1		       d8		      CLD		;2
   1388  f6e2		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1389  f6e4		       85 cf		      STA	OneSecondConter	;3
   1390  f6e6
   1391  f6e6				   EndExactlyEverySecond
   1392  f6e6
   1393  f6e6				   OverScanWait
   1394  f6e6		       ad 84 02 	      LDA	INTIM
   1395  f6e9		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1396  f6eb		       4c c0 f0 	      JMP	MainLoop
   1397  f6ee
   1398  f6ee				   Subroutines
   1399  f6ee
   1400  f6ee				   ClearAll		; 52
   1401  f6ee		       a9 00		      LDA	#0	;2
   1402  f6f0		       85 1c		      STA	GRP1	;3
   1403  f6f2		       85 1f		      STA	ENABL	;3
   1404  f6f4		       85 1d		      STA	ENAM0	;3
   1405  f6f6		       85 1e		      STA	ENAM1	;3
   1406  f6f8		       85 84		      STA	GRP1Cache	;3
   1407  f6fa		       85 85		      STA	ENABLCache	;3
   1408  f6fc		       85 86		      STA	ENAM0Cache	;3
   1409  f6fe		       85 87		      STA	ENAM1Cache	;3
   1410  f700
   1411  f700				   ClearPF		; 26
   1412  f700		       a9 00		      LDA	#0	;2
   1413  f702				   ClearPFSkipLDA0
   1414  f702		       85 0d		      STA	PF0	;3
   1415  f704		       85 0e		      STA	PF1	;3
   1416  f706		       85 0f		      STA	PF2	;3	
   1417  f708		       85 81		      STA	PF0Cache	;3
   1418  f70a		       85 82		      STA	PF1Cache	;3
   1419  f70c		       85 83		      STA	PF2Cache	;3 
   1420  f70e		       60		      RTS		;6
   1421  f70f				   EndClearAll
   1422  f70f
   1423  f70f				   LoadAll		; 48
   1424  f70f		       a5 81		      LDA	PF0Cache	;3
   1425  f711		       85 0d		      STA	PF0	;3
   1426  f713
   1427  f713		       a5 82		      LDA	PF1Cache	;3
   1428  f715		       85 0e		      STA	PF1	;3
   1429  f717
   1430  f717		       a5 83		      LDA	PF2Cache	;3
   1431  f719		       85 0f		      STA	PF2	;3
   1432  f71b
   1433  f71b		       a5 84		      LDA	GRP1Cache	;3
   1434  f71d		       85 1c		      STA	GRP1	;3
   1435  f71f
   1436  f71f		       a5 85		      LDA	ENABLCache	;3
   1437  f721		       85 1f		      STA	ENABL	;3
   1438  f723
   1439  f723		       a5 86		      LDA	ENAM0Cache	;3
   1440  f725		       85 1d		      STA	ENAM0	;3
   1441  f727
   1442  f727		       a5 87		      LDA	ENAM1Cache	;3
   1443  f729		       85 1e		      STA	ENAM1	;3
   1444  f72b
   1445  f72b		       60		      RTS		;6
   1446  f72c				   EndLoadAll
   1447  f72c
   1448  f72c				   NextDifficulty
   1449  f72c		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1450  f72e		       29 01		      AND	#%00000001
   1451  f730		       d0 3f		      BNE	CheckRandomDifficulty
   1452  f732
   1453  f732		       a5 c4		      LDA	CurrentDifficulty
   1454  f734		       18		      CLC
   1455  f735		       69 01		      ADC	#1
   1456  f737		       29 03		      AND	#%00000011	; 0 to 3
   1457  f739		       85 c4		      STA	CurrentDifficulty
   1458  f73b
   1459  f73b				   ConfigureDifficulty
   1460  f73b		       a5 c4		      LDA	CurrentDifficulty
   1461  f73d		       f0 0b		      BEQ	ConfigureLightTraffic
   1462  f73f		       c9 01		      CMP	#1
   1463  f741		       f0 10		      BEQ	ConfigureRegularTraffic
   1464  f743		       c9 02		      CMP	#2
   1465  f745		       f0 15		      BEQ	ConfigureIntenseTraffic
   1466  f747		       4c 65 f7 	      JMP	ConfigureRushHourTraffic
   1467  f74a
   1468  f74a				   ConfigureLightTraffic
   1469  f74a		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1470  f74c		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1471  f74e		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1472  f750		       4c 6b f7 	      JMP	StoreTrafficChance
   1473  f753				   ConfigureRegularTraffic
   1474  f753		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1475  f755		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1476  f757		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1477  f759		       4c 6b f7 	      JMP	StoreTrafficChance
   1478  f75c				   ConfigureIntenseTraffic
   1479  f75c		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1480  f75e		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1481  f760		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1482  f762		       4c 6b f7 	      JMP	StoreTrafficChance
   1483  f765				   ConfigureRushHourTraffic
   1484  f765		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1485  f767		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1486  f769		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1487  f76b
   1488  f76b				   StoreTrafficChance
   1489  f76b		       86 c1		      STX	TrafficChance
   1490  f76d		       84 c2		      STY	CheckpointTime
   1491  f76f		       85 c3		      STA	TrafficColor
   1492  f771
   1493  f771				   CheckRandomDifficulty
   1494  f771		       a5 c5		      LDA	GameMode
   1495  f773		       29 08		      AND	#%00001000	; Random difficulties
   1496  f775		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1497  f777				   RandomDificulty
   1498  f777		       a6 8c		      LDX	FrameCount0
   1499  f779		       bd 00 fe 	      LDA	AesTable,X
   1500  f77c		       45 c1		      EOR	TrafficChance
   1501  f77e		       29 3f		      AND	#%00111111
   1502  f780		       85 c1		      STA	TrafficChance
   1503  f782
   1504  f782				   ReturnFromNextDifficulty
   1505  f782		       60		      RTS
   1506  f783				   EndNextDifficulty
   1507  f783
   1508  f783				   DefaultOffsets
   1509  f783		       a9 20		      LDA	#$20
   1510  f785		       85 96		      STA	TrafficOffset1 + 2
   1511  f787		       a9 40		      LDA	#$40
   1512  f789		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1513  f78b		       a9 60		      LDA	#$60
   1514  f78d		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1515  f78f		       a9 80		      LDA	#$80
   1516  f791		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1517  f793		       a9 a0		      LDA	#$A0
   1518  f795		       60		      RTS
   1519  f796
   1520  f796				   PrintStaticText		; Preload X with the offset referent to StaticText
   1521  f796		       bd 00 ff 	      LDA	StaticText,X
   1522  f799		       85 d0		      STA	ScoreD0
   1523  f79b		       e8		      INX
   1524  f79c		       bd 00 ff 	      LDA	StaticText,X
   1525  f79f		       85 d1		      STA	ScoreD1
   1526  f7a1		       e8		      INX
   1527  f7a2		       bd 00 ff 	      LDA	StaticText,X
   1528  f7a5		       85 d2		      STA	ScoreD2
   1529  f7a7		       e8		      INX
   1530  f7a8		       bd 00 ff 	      LDA	StaticText,X
   1531  f7ab		       85 d3		      STA	ScoreD3
   1532  f7ad		       e8		      INX
   1533  f7ae		       bd 00 ff 	      LDA	StaticText,X
   1534  f7b1		       85 d4		      STA	ScoreD4
   1535  f7b3		       60		      RTS
   1536  f7b4
   1537  f7b4				   HorizontalParallaxLoop
   1538  f7b4		       a9 ef		      LDA	#%11101111	; Clear the house
   1539  f7b6		       39 d8 00 	      AND	ParallaxCache,Y
   1540  f7b9		       99 d8 00 	      STA	ParallaxCache,Y
   1541  f7bc				   CalculateParallax0
   1542  f7bc		       98		      TYA
   1543  f7bd		       18		      CLC
   1544  f7be		       65 91		      ADC	TrafficOffset0 + 1
   1545  f7c0		       29 04		      AND	#%00000100
   1546  f7c2		       f0 08		      BEQ	HasEmptySpace0
   1547  f7c4				   HasBorder0
   1548  f7c4		       b9 d8 00 	      LDA	ParallaxCache,Y
   1549  f7c7		       09 0f		      ORA	#%00001111
   1550  f7c9		       4c d1 f7 	      JMP	StoreParallax0
   1551  f7cc				   HasEmptySpace0
   1552  f7cc		       b9 d8 00 	      LDA	ParallaxCache,Y
   1553  f7cf		       29 f0		      AND	#%11110000
   1554  f7d1
   1555  f7d1				   StoreParallax0
   1556  f7d1		       99 d8 00 	      STA	ParallaxCache,Y
   1557  f7d4
   1558  f7d4				   CalculateParallax1
   1559  f7d4		       98		      TYA
   1560  f7d5		       18		      CLC
   1561  f7d6		       65 c7		      ADC	ParallaxOffset1 + 1
   1562  f7d8		       29 04		      AND	#%00000100
   1563  f7da		       f0 08		      BEQ	HasEmptySpace1
   1564  f7dc				   HasBorder1
   1565  f7dc		       b9 d8 00 	      LDA	ParallaxCache,Y
   1566  f7df		       09 e0		      ORA	#%11100000
   1567  f7e1		       4c e9 f7 	      JMP	StoreParallax1
   1568  f7e4				   HasEmptySpace1
   1569  f7e4		       b9 d8 00 	      LDA	ParallaxCache,Y
   1570  f7e7		       29 1f		      AND	#%00011111
   1571  f7e9
   1572  f7e9				   StoreParallax1
   1573  f7e9		       99 d8 00 	      STA	ParallaxCache,Y
   1574  f7ec
   1575  f7ec				   CalculateParallax2
   1576  f7ec		       98		      TYA
   1577  f7ed		       18		      CLC
   1578  f7ee		       65 c9		      ADC	ParallaxOffset2 + 1
   1579  f7f0		       29 04		      AND	#%00000100
   1580  f7f2		       f0 05		      BEQ	HasEmptySpace2
   1581  f7f4				   HasBorder2
   1582  f7f4		       a9 60		      LDA	#%01100000
   1583  f7f6		       4c fb f7 	      JMP	StoreParallax2
   1584  f7f9				   HasEmptySpace2
   1585  f7f9		       a9 00		      LDA	#0
   1586  f7fb
   1587  f7fb				   StoreParallax2
   1588  f7fb		       99 f0 00 	      STA	ParallaxCache2,Y
   1589  f7fe
   1590  f7fe				   ContinueHorizontalParallaxLoop
   1591  f7fe		       88		      DEY
   1592  f7ff		       10 b3		      BPL	HorizontalParallaxLoop
   1593  f801		       60		      RTS
   1594  f802
   1595  f802				   DefaultBorderLoop
   1596  f802				   CalculateDefaultBorder
   1597  f802		       98		      TYA
   1598  f803		       18		      CLC
   1599  f804		       65 91		      ADC	TrafficOffset0 + 1
   1600  f806		       29 04		      AND	#%00000100
   1601  f808		       f0 05		      BEQ	HasEmptySpace
   1602  f80a				   HasBorder
   1603  f80a		       a9 ff		      LDA	#$FF
   1604  f80c		       4c 11 f8 	      JMP	StoreBorder
   1605  f80f				   HasEmptySpace
   1606  f80f		       a9 00		      LDA	#0
   1607  f811
   1608  f811				   StoreBorder
   1609  f811		       99 d8 00 	      STA	ParallaxCache,Y
   1610  f814		       a9 00		      LDA	#0
   1611  f816		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1612  f819
   1613  f819				   ContinueDefaultBorderLoop
   1614  f819		       88		      DEY
   1615  f81a		       10 e6		      BPL	DefaultBorderLoop
   1616  f81c		       60		      RTS
   1617  f81d
   1618  f81d				   PrepareTachometerBorderLoop
   1619  f81d		       a5 8e		      LDA	Player0SpeedL
   1620  f81f		       29 80		      AND	#%10000000
   1621  f821		       05 8f		      ORA	Player0SpeedH
   1622  f823		       18		      CLC
   1623  f824		       2a		      ROL
   1624  f825		       69 00		      ADC	#0
   1625  f827		       85 b0		      STA	Tmp0	; Gear
   1626  f829		       a5 8e		      LDA	Player0SpeedL
   1627  f82b		       4a		      LSR
   1628  f82c		       4a		      LSR
   1629  f82d		       4a		      LSR
   1630  f82e		       4a		      LSR
   1631  f82f		       29 07		      AND	#%00000111
   1632  f831		       85 b1		      STA	Tmp1	; RPM
   1633  f833
   1634  f833				   TachometerBorderLoop
   1635  f833		       98		      TYA
   1636  f834		       18		      CLC
   1637  f835		       65 91		      ADC	TrafficOffset0 + 1
   1638  f837		       29 04		      AND	#%00000100
   1639  f839		       f0 10		      BEQ	HasBorderTac
   1640  f83b		       a6 b0		      LDX	Tmp0
   1641  f83d		       bd eb fd 	      LDA	TachometerGearLookup,X
   1642  f840		       99 d8 00 	      STA	ParallaxCache,Y
   1643  f843		       a9 00		      LDA	#0
   1644  f845		       99 f0 00 	      STA	ParallaxCache2,Y
   1645  f848		       4c 6d f8 	      JMP	ContinueBorderTac
   1646  f84b				   HasBorderTac
   1647  f84b		       a9 05		      LDA	#5
   1648  f84d		       c5 b0		      CMP	Tmp0	; Only on max speed
   1649  f84f		       f0 11		      BEQ	FullBorderTac
   1650  f851		       a6 b1		      LDX	Tmp1
   1651  f853		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1652  f856		       99 d8 00 	      STA	ParallaxCache,Y
   1653  f859		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1654  f85c		       99 f0 00 	      STA	ParallaxCache2,Y
   1655  f85f		       4c 6d f8 	      JMP	ContinueBorderTac
   1656  f862
   1657  f862				   FullBorderTac
   1658  f862		       a9 ff		      LDA	#$FF
   1659  f864		       99 d8 00 	      STA	ParallaxCache,Y
   1660  f867		       99 f0 00 	      STA	ParallaxCache2,Y
   1661  f86a		       4c 6d f8 	      JMP	ContinueBorderTac
   1662  f86d
   1663  f86d				   ContinueBorderTac
   1664  f86d		       88		      DEY
   1665  f86e		       10 c3		      BPL	TachometerBorderLoop
   1666  f870		       60		      RTS
   1667  f871
   1668  f871				   VerticalParallaxLoop
   1669  f871				   CalculateVerticalParallax0
   1670  f871		       98		      TYA
   1671  f872		       18		      CLC
   1672  f873		       65 91		      ADC	TrafficOffset0 + 1
   1673  f875		       29 06		      AND	#%00000110
   1674  f877		       d0 0b		      BNE	HasNoVerticalLine0
   1675  f879				   HasVerticalLine0
   1676  f879		       a9 ff		      LDA	#$FF
   1677  f87b		       99 d8 00 	      STA	ParallaxCache,Y
   1678  f87e		       99 f0 00 	      STA	ParallaxCache2,Y
   1679  f881		       4c c1 f8 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1680  f884				   HasNoVerticalLine0
   1681  f884		       a9 00		      LDA	#0
   1682  f886		       99 d8 00 	      STA	ParallaxCache,Y
   1683  f889		       99 f0 00 	      STA	ParallaxCache2,Y
   1684  f88c
   1685  f88c				   CalculateVerticalParallax1
   1686  f88c		       98		      TYA
   1687  f88d		       18		      CLC
   1688  f88e		       65 c7		      ADC	ParallaxOffset1 + 1
   1689  f890		       29 07		      AND	#%00000111
   1690  f892		       d0 0d		      BNE	HasNoVerticalLine1
   1691  f894
   1692  f894				   HasVerticalLine1
   1693  f894		       a9 fc		      LDA	#%11111100
   1694  f896		       99 d8 00 	      STA	ParallaxCache,Y
   1695  f899		       a9 c0		      LDA	#%11000000
   1696  f89b		       99 f0 00 	      STA	ParallaxCache2,Y
   1697  f89e		       4c c1 f8 	      JMP	ContinueVerticalParallaxLoop
   1698  f8a1				   HasNoVerticalLine1
   1699  f8a1		       a9 00		      LDA	#0
   1700  f8a3		       99 d8 00 	      STA	ParallaxCache,Y
   1701  f8a6		       99 f0 00 	      STA	ParallaxCache2,Y
   1702  f8a9
   1703  f8a9				   CalculateVerticalParallax2
   1704  f8a9		       98		      TYA
   1705  f8aa		       18		      CLC
   1706  f8ab		       65 c9		      ADC	ParallaxOffset2 + 1
   1707  f8ad		       29 07		      AND	#%00000111
   1708  f8af		       d0 08		      BNE	HasNoVerticalLine2
   1709  f8b1
   1710  f8b1				   HasVerticalLine2
   1711  f8b1		       a9 f0		      LDA	#%11110000
   1712  f8b3		       99 d8 00 	      STA	ParallaxCache,Y
   1713  f8b6		       4c c1 f8 	      JMP	ContinueVerticalParallaxLoop
   1714  f8b9				   HasNoVerticalLine2
   1715  f8b9		       a9 00		      LDA	#0
   1716  f8bb		       99 d8 00 	      STA	ParallaxCache,Y
   1717  f8be		       99 f0 00 	      STA	ParallaxCache2,Y
   1718  f8c1
   1719  f8c1				   ContinueVerticalParallaxLoop
   1720  f8c1		       88		      DEY
   1721  f8c2		       10 ad		      BPL	VerticalParallaxLoop
   1722  f8c4		       60		      RTS
   1723  f8c5
   1724  f8c5				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1725  f8c5		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1726  f8c7		       85 d5		      STA	ScoreFontColor
   1727  f8c9		       a9 01		      LDA	#1
   1728  f8cb		       85 d6		      STA	ScoreFontColorHoldChange
   1729  f8cd
   1730  f8cd		       a5 8d		      LDA	FrameCount1
   1731  f8cf		       29 07		      AND	#%00000111
   1732  f8d1		       85 b3		      STA	Tmp3
   1733  f8d3							;0 is Zelda Name, (default)
   1734  f8d3		       a9 01		      LDA	#1
   1735  f8d5		       c5 b3		      CMP	Tmp3
   1736  f8d7		       f0 38		      BEQ	PrintZeldaDateLeft
   1737  f8d9
   1738  f8d9		       a9 02		      LDA	#2
   1739  f8db		       c5 b3		      CMP	Tmp3
   1740  f8dd		       f0 23		      BEQ	PrintPolvinhosLeft
   1741  f8df
   1742  f8df		       a9 03		      LDA	#3
   1743  f8e1		       c5 b3		      CMP	Tmp3
   1744  f8e3		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1745  f8e5
   1746  f8e5		       a9 04		      LDA	#4
   1747  f8e7		       c5 b3		      CMP	Tmp3
   1748  f8e9		       f0 1c		      BEQ	PrintIvonneLeft
   1749  f8eb
   1750  f8eb		       a9 05		      LDA	#5
   1751  f8ed		       c5 b3		      CMP	Tmp3
   1752  f8ef		       f0 2a		      BEQ	PrintIvonneDateLeft
   1753  f8f1
   1754  f8f1		       a9 06		      LDA	#6
   1755  f8f3		       c5 b3		      CMP	Tmp3
   1756  f8f5		       f0 15		      BEQ	PrintArtLeft
   1757  f8f7
   1758  f8f7		       a9 07		      LDA	#7
   1759  f8f9		       c5 b3		      CMP	Tmp3
   1760  f8fb		       f0 23		      BEQ	PrintLeonardoLeft
   1761  f8fd
   1762  f8fd				   PrintZeldaLeft
   1763  f8fd		       a2 28		      LDX	#<ZeldaTextLeft
   1764  f8ff		       4c 25 f9 	      JMP	ProcessPrintEasterEgg
   1765  f902				   PrintPolvinhosLeft
   1766  f902		       a2 3c		      LDX	#<PolvinhosTextLeft
   1767  f904		       4c 25 f9 	      JMP	ProcessPrintEasterEgg
   1768  f907				   PrintIvonneLeft
   1769  f907		       a2 50		      LDX	#<IvonneTextLeft
   1770  f909		       4c 25 f9 	      JMP	ProcessPrintEasterEgg
   1771  f90c				   PrintArtLeft
   1772  f90c		       a2 64		      LDX	#<PaperArtTextLeft
   1773  f90e		       4c 25 f9 	      JMP	ProcessPrintEasterEgg
   1774  f911
   1775  f911				   PrintZeldaDateLeft
   1776  f911		       a2 32		      LDX	#<ZeldaDateLeft
   1777  f913		       4c 25 f9 	      JMP	ProcessPrintEasterEgg
   1778  f916				   PrintPolvinhosDateLeft
   1779  f916		       a2 46		      LDX	#<PolvinhosDateLeft
   1780  f918		       4c 25 f9 	      JMP	ProcessPrintEasterEgg
   1781  f91b				   PrintIvonneDateLeft
   1782  f91b		       a2 5a		      LDX	#<IvonneDateLeft
   1783  f91d		       4c 25 f9 	      JMP	ProcessPrintEasterEgg
   1784  f920				   PrintLeonardoLeft
   1785  f920		       a2 6e		      LDX	#<LeonardoTextLeft
   1786  f922		       4c 25 f9 	      JMP	ProcessPrintEasterEgg
   1787  f925
   1788  f925				   ProcessPrintEasterEgg
   1789  f925		       a5 8c		      LDA	FrameCount0	;3
   1790  f927		       29 01		      AND	#%00000001	;2
   1791  f929		       d0 03		      BNE	TranformIntoRightText
   1792  f92b		       4c 33 f9 	      JMP	PrintEasterEggText
   1793  f92e				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1794  f92e		       8a		      TXA
   1795  f92f		       18		      CLC
   1796  f930		       69 05		      ADC	#HALF_TEXT_SIZE
   1797  f932		       aa		      TAX
   1798  f933
   1799  f933				   PrintEasterEggText
   1800  f933		       20 96 f7 	      JSR	PrintStaticText
   1801  f936		       60		      RTS
   1802  f937
   1803  f937				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1804  f937		       a2 00		      LDX	#0
   1805  f939		       a0 04		      LDY	#FONT_OFFSET
   1806  f93b
   1807  f93b				   ScoreLoop		; 20 
   1808  f93b		       85 02		      STA	WSYNC	;2
   1809  f93d
   1810  f93d		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1811  f93f		       85 0d		      STA	PF0	;3
   1812  f941
   1813  f941		       a5 82		      LDA	PF1Cache	;3
   1814  f943		       85 0e		      STA	PF1	;3
   1815  f945
   1816  f945		       a5 83		      LDA	PF2Cache	;3
   1817  f947		       85 0f		      STA	PF2	;3
   1818  f949
   1819  f949				   DrawScoreD0		; 15
   1820  f949		       a6 d0		      LDX	ScoreD0	; 3
   1821  f94b		       bd 00 fd 	      LDA	Font,X	;4
   1822  f94e		       85 81		      STA	PF0Cache	;3
   1823  f950		       c6 d0		      DEC	ScoreD0	;5
   1824  f952
   1825  f952				   DrawScoreD1		; 23	
   1826  f952		       a6 d1		      LDX	ScoreD1	; 3
   1827  f954		       bd 00 fd 	      LDA	Font,X	;4
   1828  f957		       0a		      ASL		;2
   1829  f958		       0a		      ASL		;2
   1830  f959		       0a		      ASL		;2
   1831  f95a		       0a		      ASL		;2
   1832  f95b		       85 82		      STA	PF1Cache	;3
   1833  f95d		       c6 d1		      DEC	ScoreD1	;5
   1834  f95f
   1835  f95f				   DrawScoreD2		; 20
   1836  f95f		       a6 d2		      LDX	ScoreD2	; 3
   1837  f961		       bd 00 fd 	      LDA	Font,X	;4
   1838  f964		       29 0f		      AND	#%00001111	;2
   1839  f966		       05 82		      ORA	PF1Cache	;3
   1840  f968		       85 82		      STA	PF1Cache	;3
   1841  f96a		       c6 d2		      DEC	ScoreD2	;5
   1842  f96c
   1843  f96c				   DrawScoreD3		; 23
   1844  f96c		       a6 d3		      LDX	ScoreD3	; 3
   1845  f96e		       bd 00 fd 	      LDA	Font,X	;4
   1846  f971		       4a		      LSR		;2
   1847  f972		       4a		      LSR		;2
   1848  f973		       4a		      LSR		;2
   1849  f974		       4a		      LSR		;2
   1850  f975		       85 83		      STA	PF2Cache	;3
   1851  f977		       c6 d3		      DEC	ScoreD3	;5
   1852  f979
   1853  f979				   DrawScoreD4		; 20
   1854  f979		       a6 d4		      LDX	ScoreD4	; 3
   1855  f97b		       bd 00 fd 	      LDA	Font,X	;4
   1856  f97e		       29 f0		      AND	#%11110000	;2
   1857  f980		       05 83		      ORA	PF2Cache	;3
   1858  f982		       85 83		      STA	PF2Cache	;3
   1859  f984		       c6 d4		      DEC	ScoreD4	;5
   1860  f986
   1861  f986
   1862  f986		       88		      DEY		;2
   1863  f987		       10 b2		      BPL	ScoreLoop	;4
   1864  f989
   1865  f989		       85 02		      STA	WSYNC
   1866  f98b		       20 0f f7 	      JSR	LoadAll
   1867  f98e		       60		      RTS		; 6
   1868  f98f
   1869  f98f				   PrintRightDecimalDigits
   1870  f98f		       b9 00 00 	      LDA	0,Y
   1871  f992		       4a		      LSR
   1872  f993		       4a		      LSR
   1873  f994		       4a		      LSR
   1874  f995		       4a		      LSR
   1875  f996		       aa		      TAX
   1876  f997		       bd be fd 	      LDA	FontLookup,X	;4
   1877  f99a		       85 d2		      STA	ScoreD2	;3
   1878  f99c
   1879  f99c		       b9 00 00 	      LDA	0,Y
   1880  f99f		       29 0f		      AND	#%00001111
   1881  f9a1		       aa		      TAX
   1882  f9a2		       bd be fd 	      LDA	FontLookup,X	;4
   1883  f9a5		       85 d3		      STA	ScoreD3	;3
   1884  f9a7
   1885  f9a7		       c8		      INY
   1886  f9a8		       b9 00 00 	      LDA	0,Y
   1887  f9ab		       4a		      LSR
   1888  f9ac		       4a		      LSR
   1889  f9ad		       4a		      LSR
   1890  f9ae		       4a		      LSR
   1891  f9af		       aa		      TAX
   1892  f9b0		       bd be fd 	      LDA	FontLookup,X	;4
   1893  f9b3		       85 d0		      STA	ScoreD0	;3
   1894  f9b5
   1895  f9b5		       b9 00 00 	      LDA	0,Y
   1896  f9b8		       29 0f		      AND	#%00001111
   1897  f9ba		       aa		      TAX
   1898  f9bb		       bd be fd 	      LDA	FontLookup,X	;4
   1899  f9be		       85 d1		      STA	ScoreD1	;3
   1900  f9c0
   1901  f9c0		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1902  f9c2		       85 d4		      STA	ScoreD4
   1903  f9c4		       60		      RTS
   1904  f9c5
   1905  f9c5				   PrintLastLeftDecimalDigits
   1906  f9c5		       b9 00 00 	      LDA	0,Y
   1907  f9c8		       4a		      LSR
   1908  f9c9		       4a		      LSR
   1909  f9ca		       4a		      LSR
   1910  f9cb		       4a		      LSR
   1911  f9cc		       aa		      TAX
   1912  f9cd		       bd be fd 	      LDA	FontLookup,X	;4
   1913  f9d0		       85 d3		      STA	ScoreD3	;3
   1914  f9d2		       b9 00 00 	      LDA	0,Y
   1915  f9d5		       29 0f		      AND	#%00001111
   1916  f9d7		       aa		      TAX
   1917  f9d8		       bd be fd 	      LDA	FontLookup,X	;4
   1918  f9db		       85 d4		      STA	ScoreD4	;3
   1919  f9dd		       60		      RTS
   1920  f9de
   1921  f9de				   PrintZerosLeft
   1922  f9de		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1923  f9e0		       85 d2		      STA	ScoreD2
   1924  f9e2		       85 d3		      STA	ScoreD3
   1925  f9e4		       85 d4		      STA	ScoreD4
   1926  f9e6		       60		      RTS
   1927  f9e7
   1928  f9e7				   DrawGameOverScoreLine
   1929  f9e7		       85 02		      STA	WSYNC
   1930  f9e9		       20 37 f9 	      JSR	PrintScore
   1931  f9ec		       85 02		      STA	WSYNC
   1932  f9ee		       85 02		      STA	WSYNC
   1933  f9f0		       20 00 f7 	      JSR	ClearPF
   1934  f9f3		       60		      RTS
   1935  f9f4
   1936  f9f4				   DrawGameOverScreenLeft
   1937  f9f4		       85 02		      STA	WSYNC
   1938  f9f6		       20 00 f7 	      JSR	ClearPF
   1939  f9f9
   1940  f9f9				   DrawBcdScoreLeft
   1941  f9f9		       20 ac fb 	      JSR	Sleep8Lines
   1942  f9fc		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1943  f9fe		       85 06		      STA	COLUP0
   1944  fa00		       85 02		      STA	WSYNC
   1945  fa02		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1946  fa04		       85 d0		      STA	ScoreD0
   1947  fa06
   1948  fa06		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1949  fa08		       85 d1		      STA	ScoreD1
   1950  fa0a
   1951  fa0a		       a5 b7		      LDA	ScoreBcd3
   1952  fa0c		       29 0f		      AND	#%00001111
   1953  fa0e		       aa		      TAX
   1954  fa0f		       bd be fd 	      LDA	FontLookup,X	;4
   1955  fa12		       85 d2		      STA	ScoreD2	;3
   1956  fa14
   1957  fa14		       a0 b6		      LDY	#ScoreBcd2
   1958  fa16		       20 c5 f9 	      JSR	PrintLastLeftDecimalDigits
   1959  fa19
   1960  fa19		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   1961  fa1c
   1962  fa1c				   DrawTimerLeft
   1963  fa1c		       20 ac fb 	      JSR	Sleep8Lines
   1964  fa1f		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1965  fa21		       85 06		      STA	COLUP0
   1966  fa23		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1967  fa25		       85 d0		      STA	ScoreD0
   1968  fa27		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1969  fa29		       85 d1		      STA	ScoreD1
   1970  fa2b		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1971  fa2d		       85 d2		      STA	ScoreD2
   1972  fa2f		       a0 bf		      LDY	#TimeBcd2
   1973  fa31		       85 02		      STA	WSYNC
   1974  fa33		       20 c5 f9 	      JSR	PrintLastLeftDecimalDigits
   1975  fa36		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   1976  fa39
   1977  fa39				   DrawGlideTimerLeft
   1978  fa39		       20 ac fb 	      JSR	Sleep8Lines
   1979  fa3c		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1980  fa3e		       85 06		      STA	COLUP0
   1981  fa40		       85 02		      STA	WSYNC
   1982  fa42		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1983  fa44		       85 d0		      STA	ScoreD0
   1984  fa46		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1985  fa48		       85 d1		      STA	ScoreD1
   1986  fa4a		       20 de f9 	      JSR	PrintZerosLeft
   1987  fa4d		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   1988  fa50
   1989  fa50				   DrawHitCountLeft
   1990  fa50		       20 ac fb 	      JSR	Sleep8Lines
   1991  fa53		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1992  fa55		       85 06		      STA	COLUP0
   1993  fa57		       85 02		      STA	WSYNC
   1994  fa59		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1995  fa5b		       85 d0		      STA	ScoreD0
   1996  fa5d		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1997  fa5f		       85 d1		      STA	ScoreD1
   1998  fa61		       20 de f9 	      JSR	PrintZerosLeft
   1999  fa64		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   2000  fa67
   2001  fa67				   DrawCheckpointCountLeft
   2002  fa67		       20 ac fb 	      JSR	Sleep8Lines
   2003  fa6a		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2004  fa6c		       85 06		      STA	COLUP0
   2005  fa6e		       85 02		      STA	WSYNC
   2006  fa70		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2007  fa72		       85 d0		      STA	ScoreD0
   2008  fa74		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2009  fa76		       85 d1		      STA	ScoreD1
   2010  fa78		       20 de f9 	      JSR	PrintZerosLeft
   2011  fa7b		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   2012  fa7e
   2013  fa7e				   DrawGameVersionLeft
   2014  fa7e		       20 ac fb 	      JSR	Sleep8Lines
   2015  fa81		       a9 49		      LDA	#VERSION_COLOR
   2016  fa83		       85 06		      STA	COLUP0
   2017  fa85
   2018  fa85		       a5 c5		      LDA	GameMode
   2019  fa87		       aa		      TAX
   2020  fa88		       bd be fd 	      LDA	FontLookup,X	;4
   2021  fa8b		       85 d0		      STA	ScoreD0	;3
   2022  fa8d
   2023  fa8d		       a5 a9		      LDA	CurrentCarId
   2024  fa8f		       aa		      TAX
   2025  fa90		       bd be fd 	      LDA	FontLookup,X	;4
   2026  fa93		       85 d1		      STA	ScoreD1	;3
   2027  fa95
   2028  fa95		       a5 a6		      LDA	StartSWCHB
   2029  fa97		       29 40		      AND	#%01000000	; P0 difficulty
   2030  fa99		       49 40		      EOR	#%01000000	; Reverse bytes
   2031  fa9b		       2a		      ROL
   2032  fa9c		       2a		      ROL
   2033  fa9d		       2a		      ROL
   2034  fa9e		       18		      CLC
   2035  fa9f		       69 0a		      ADC	#10
   2036  faa1		       aa		      TAX
   2037  faa2		       bd be fd 	      LDA	FontLookup,X	;4
   2038  faa5		       85 d2		      STA	ScoreD2	;3
   2039  faa7
   2040  faa7		       a5 a6		      LDA	StartSWCHB
   2041  faa9		       29 80		      AND	#%10000000	; P0 difficulty
   2042  faab		       49 80		      EOR	#%10000000	; Reverse bytes
   2043  faad		       2a		      ROL
   2044  faae		       2a		      ROL
   2045  faaf		       18		      CLC
   2046  fab0		       69 0a		      ADC	#10
   2047  fab2		       aa		      TAX
   2048  fab3		       bd be fd 	      LDA	FontLookup,X	;4
   2049  fab6		       85 d3		      STA	ScoreD3	;3
   2050  fab8
   2051  fab8		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2052  faba		       85 d4		      STA	ScoreD4
   2053  fabc
   2054  fabc		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   2055  fabf
   2056  fabf		       4c 25 fb 	      JMP	FinalizeDrawGameOver
   2057  fac2
   2058  fac2				   DrawGameOverScreenRight
   2059  fac2		       85 02		      STA	WSYNC
   2060  fac4		       20 00 f7 	      JSR	ClearPF
   2061  fac7
   2062  fac7				   DrawBcdScoreRight
   2063  fac7		       20 ac fb 	      JSR	Sleep8Lines
   2064  faca		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2065  facc		       85 07		      STA	COLUP1
   2066  face		       85 02		      STA	WSYNC
   2067  fad0		       a0 b4		      LDY	#ScoreBcd0
   2068  fad2		       20 8f f9 	      JSR	PrintRightDecimalDigits
   2069  fad5
   2070  fad5		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   2071  fad8
   2072  fad8				   DrawTimerRight
   2073  fad8		       20 ac fb 	      JSR	Sleep8Lines
   2074  fadb		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2075  fadd		       85 07		      STA	COLUP1
   2076  fadf		       a0 bd		      LDY	#TimeBcd0
   2077  fae1		       20 8f f9 	      JSR	PrintRightDecimalDigits
   2078  fae4
   2079  fae4		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   2080  fae7				   DrawGlideTimeRight
   2081  fae7		       20 ac fb 	      JSR	Sleep8Lines
   2082  faea		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2083  faec		       85 07		      STA	COLUP1
   2084  faee		       a0 cd		      LDY	#GlideTimeBcd0
   2085  faf0		       20 8f f9 	      JSR	PrintRightDecimalDigits
   2086  faf3		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   2087  faf6
   2088  faf6				   DrawHitCountRight
   2089  faf6		       20 ac fb 	      JSR	Sleep8Lines
   2090  faf9		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2091  fafb		       85 07		      STA	COLUP1
   2092  fafd		       a0 cb		      LDY	#HitCountBcd0
   2093  faff		       20 8f f9 	      JSR	PrintRightDecimalDigits
   2094  fb02		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   2095  fb05
   2096  fb05				   DrawCheckpointCountRight
   2097  fb05		       20 ac fb 	      JSR	Sleep8Lines
   2098  fb08		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2099  fb0a		       85 07		      STA	COLUP1
   2100  fb0c		       a0 a4		      LDY	#CheckpointBcd0
   2101  fb0e		       20 8f f9 	      JSR	PrintRightDecimalDigits
   2102  fb11		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   2103  fb14
   2104  fb14				   DrawVersionRight
   2105  fb14		       20 ac fb 	      JSR	Sleep8Lines
   2106  fb17		       a9 49		      LDA	#VERSION_COLOR
   2107  fb19		       85 07		      STA	COLUP1
   2108  fb1b		       85 02		      STA	WSYNC
   2109  fb1d		       a2 78		      LDX	#<VersionText
   2110  fb1f		       20 96 f7 	      JSR	PrintStaticText
   2111  fb22		       20 e7 f9 	      JSR	DrawGameOverScoreLine
   2112  fb25
   2113  fb25				   FinalizeDrawGameOver
   2114  fb25		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2115  fb27		       85 d5		      STA	ScoreFontColor
   2116  fb29		       20 a3 fb 	      JSR	Sleep4Lines
   2117  fb2c		       20 b3 fb 	      JSR	Sleep32Lines
   2118  fb2f		       20 b3 fb 	      JSR	Sleep32Lines
   2119  fb32		       4c 21 f6 	      JMP	PrepareOverscan
   2120  fb35
   2121  fb35				   DrawQrCode
   2122  fb35		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2123  fb37		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2124  fb39		       a9 01		      LDA	#%00000001	; Mirror playfield
   2125  fb3b		       85 0a		      STA	CTRLPF
   2126  fb3d		       20 ee f6 	      JSR	ClearAll	; To be 100 sure!
   2127  fb40		       ad 82 02 	      LDA	SWCHB
   2128  fb43		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2129  fb45		       f0 07		      BEQ	StoreReversedQrCode
   2130  fb47		       86 09		      STX	COLUBK
   2131  fb49		       84 08		      STY	COLUPF
   2132  fb4b		       4c 52 fb 	      JMP	ContinueQrCode
   2133  fb4e				   StoreReversedQrCode
   2134  fb4e		       86 08		      STX	COLUPF
   2135  fb50		       84 09		      STY	COLUBK
   2136  fb52
   2137  fb52				   ContinueQrCode
   2138  fb52		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2139  fb54		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2140  fb56		       20 99 fb 	      JSR	WaitForVblankEnd
   2141  fb59		       20 ac fb 	      JSR	Sleep8Lines
   2142  fb5c		       20 a3 fb 	      JSR	Sleep4Lines
   2143  fb5f
   2144  fb5f				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2145  fb5f		       85 02		      STA	WSYNC
   2146  fb61		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2147  fb64		       85 0e		      STA	PF1	;3
   2148  fb66		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2149  fb69		       85 0f		      STA	PF2	;3
      0  fb6b					      SLEEP	27	; 
      1  fb6b				   .CYCLES    SET	27
      2  fb6b
      3  fb6b				  -	      IF	.CYCLES < 2
      4  fb6b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb6b				  -	      ERR
      6  fb6b					      ENDIF
      7  fb6b
      8  fb6b					      IF	.CYCLES & 1
      9  fb6b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb6b				  -	      nop	0
     11  fb6b					      ELSE
     12  fb6b		       24 00		      bit	VSYNC
     13  fb6d					      ENDIF
     14  fb6d				   .CYCLES    SET	.CYCLES - 3
     15  fb6d					      ENDIF
     16  fb6d
     17  fb6d					      REPEAT	.CYCLES / 2
     18  fb6d		       ea		      nop
     17  fb6d					      REPEND
     18  fb6e		       ea		      nop
     17  fb6e					      REPEND
     18  fb6f		       ea		      nop
     17  fb6f					      REPEND
     18  fb70		       ea		      nop
     17  fb70					      REPEND
     18  fb71		       ea		      nop
     17  fb71					      REPEND
     18  fb72		       ea		      nop
     17  fb72					      REPEND
     18  fb73		       ea		      nop
     17  fb73					      REPEND
     18  fb74		       ea		      nop
     17  fb74					      REPEND
     18  fb75		       ea		      nop
     17  fb75					      REPEND
     18  fb76		       ea		      nop
     17  fb76					      REPEND
     18  fb77		       ea		      nop
     17  fb77					      REPEND
     18  fb78		       ea		      nop
     19  fb79					      REPEND
   2151  fb79		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2152  fb7c		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2153  fb7e		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2154  fb81		       85 0e		      STA	PF1	;3
   2155  fb83
   2156  fb83		       ca		      DEX		;2
   2157  fb84		       d0 d9		      BNE	QrCodeLoop	;2
   2158  fb86		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2159  fb88		       88		      DEY		;2
   2160  fb89		       10 d4		      BPL	QrCodeLoop	;4
   2161  fb8b
   2162  fb8b				   EndQrCodeLoop
   2163  fb8b		       85 02		      STA	WSYNC	;
   2164  fb8d		       a9 00		      LDA	#0
   2165  fb8f		       85 0e		      STA	PF1	;3
   2166  fb91		       85 0f		      STA	PF2	;3
   2167  fb93
   2168  fb93		       20 b3 fb 	      JSR	Sleep32Lines
   2169  fb96		       4c 21 f6 	      JMP	PrepareOverscan
   2170  fb99
   2171  fb99				   WaitForVblankEnd
   2172  fb99		       ad 84 02 	      LDA	INTIM
   2173  fb9c		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
   2174  fb9e		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline? 
   2175  fba0		       85 01		      STA	VBLANK
   2176  fba2		       60		      RTS
   2177  fba3
   2178  fba3				   Sleep4Lines
   2179  fba3		       85 02		      STA	WSYNC
   2180  fba5		       85 02		      STA	WSYNC
   2181  fba7		       85 02		      STA	WSYNC
   2182  fba9		       85 02		      STA	WSYNC
   2183  fbab		       60		      RTS
   2184  fbac
   2185  fbac				   Sleep8Lines
   2186  fbac		       20 a3 fb 	      JSR	Sleep4Lines
   2187  fbaf		       20 a3 fb 	      JSR	Sleep4Lines
   2188  fbb2		       60		      RTS
   2189  fbb3
   2190  fbb3				   Sleep32Lines
   2191  fbb3		       20 ac fb 	      JSR	Sleep8Lines
   2192  fbb6		       20 ac fb 	      JSR	Sleep8Lines
   2193  fbb9		       20 ac fb 	      JSR	Sleep8Lines
   2194  fbbc		       20 ac fb 	      JSR	Sleep8Lines
   2195  fbbf		       60		      RTS
   2196  fbc0
   2197  fbc0							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   2198  fc00					      org	$FC00
   2199  fc00				   QrCode1
   2200  fc00		       1f		      .byte.b	#%00011111
   2201  fc01		       10		      .byte.b	#%00010000
   2202  fc02		       17		      .byte.b	#%00010111
   2203  fc03		       17		      .byte.b	#%00010111
   2204  fc04		       17		      .byte.b	#%00010111
   2205  fc05		       10		      .byte.b	#%00010000
   2206  fc06		       1f		      .byte.b	#%00011111
   2207  fc07		       00		      .byte.b	#%00000000
   2208  fc08		       17		      .byte.b	#%00010111
   2209  fc09		       10		      .byte.b	#%00010000
   2210  fc0a		       1d		      .byte.b	#%00011101
   2211  fc0b		       16		      .byte.b	#%00010110
   2212  fc0c		       03		      .byte.b	#%00000011
   2213  fc0d		       19		      .byte.b	#%00011001
   2214  fc0e		       13		      .byte.b	#%00010011
   2215  fc0f		       1c		      .byte.b	#%00011100
   2216  fc10		       0b		      .byte.b	#%00001011
   2217  fc11		       00		      .byte.b	#%00000000
   2218  fc12		       1f		      .byte.b	#%00011111
   2219  fc13		       10		      .byte.b	#%00010000
   2220  fc14		       17		      .byte.b	#%00010111
   2221  fc15		       17		      .byte.b	#%00010111
   2222  fc16		       17		      .byte.b	#%00010111
   2223  fc17		       10		      .byte.b	#%00010000
   2224  fc18		       1f		      .byte.b	#%00011111
   2225  fc19
   2226  fc19				   QrCode2
   2227  fc19		       c3		      .byte.b	#%11000011
   2228  fc1a		       9a		      .byte.b	#%10011010
   2229  fc1b		       82		      .byte.b	#%10000010
   2230  fc1c		       da		      .byte.b	#%11011010
   2231  fc1d		       aa		      .byte.b	#%10101010
   2232  fc1e		       ca		      .byte.b	#%11001010
   2233  fc1f		       f3		      .byte.b	#%11110011
   2234  fc20		       78		      .byte.b	#%01111000
   2235  fc21		       df		      .byte.b	#%11011111
   2236  fc22		       fc		      .byte.b	#%11111100
   2237  fc23		       c7		      .byte.b	#%11000111
   2238  fc24		       98		      .byte.b	#%10011000
   2239  fc25		       23		      .byte.b	#%00100011
   2240  fc26		       b9		      .byte.b	#%10111001
   2241  fc27		       d2		      .byte.b	#%11010010
   2242  fc28		       30		      .byte.b	#%00110000
   2243  fc29		       eb		      .byte.b	#%11101011
   2244  fc2a		       28		      .byte.b	#%00101000
   2245  fc2b		       ab		      .byte.b	#%10101011
   2246  fc2c		       72		      .byte.b	#%01110010
   2247  fc2d		       fa		      .byte.b	#%11111010
   2248  fc2e		       7a		      .byte.b	#%01111010
   2249  fc2f		       32		      .byte.b	#%00110010
   2250  fc30		       3a		      .byte.b	#%00111010
   2251  fc31		       63		      .byte.b	#%01100011
   2252  fc32
   2253  fc32				   QrCode3
   2254  fc32		       98		      .byte.b	#%10011000
   2255  fc33		       c3		      .byte.b	#%11000011
   2256  fc34		       39		      .byte.b	#%00111001
   2257  fc35		       34		      .byte.b	#%00110100
   2258  fc36		       ff		      .byte.b	#%11111111
   2259  fc37		       71		      .byte.b	#%01110001
   2260  fc38		       d5		      .byte.b	#%11010101
   2261  fc39		       d1		      .byte.b	#%11010001
   2262  fc3a		       5f		      .byte.b	#%01011111
   2263  fc3b		       26		      .byte.b	#%00100110
   2264  fc3c		       2d		      .byte.b	#%00101101
   2265  fc3d		       e9		      .byte.b	#%11101001
   2266  fc3e		       d6		      .byte.b	#%11010110
   2267  fc3f		       26		      .byte.b	#%00100110
   2268  fc40		       ba		      .byte.b	#%10111010
   2269  fc41		       03		      .byte.b	#%00000011
   2270  fc42		       dd		      .byte.b	#%11011101
   2271  fc43		       e0		      .byte.b	#%11100000
   2272  fc44		       57		      .byte.b	#%01010111
   2273  fc45		       14		      .byte.b	#%00010100
   2274  fc46		       35		      .byte.b	#%00110101
   2275  fc47		       e5		      .byte.b	#%11100101
   2276  fc48		       b5		      .byte.b	#%10110101
   2277  fc49		       d4		      .byte.b	#%11010100
   2278  fc4a		       97		      .byte.b	#%10010111
   2279  fc4b
   2280  fc4b				   QrCode4
   2281  fc4b		       09		      .byte.b	#%00001001
   2282  fc4c		       0e		      .byte.b	#%00001110
   2283  fc4d		       0f		      .byte.b	#%00001111
   2284  fc4e		       0c		      .byte.b	#%00001100
   2285  fc4f		       0c		      .byte.b	#%00001100
   2286  fc50		       08		      .byte.b	#%00001000
   2287  fc51		       08		      .byte.b	#%00001000
   2288  fc52		       06		      .byte.b	#%00000110
   2289  fc53		       06		      .byte.b	#%00000110
   2290  fc54		       0b		      .byte.b	#%00001011
   2291  fc55		       0f		      .byte.b	#%00001111
   2292  fc56		       04		      .byte.b	#%00000100
   2293  fc57		       08		      .byte.b	#%00001000
   2294  fc58		       0f		      .byte.b	#%00001111
   2295  fc59		       09		      .byte.b	#%00001001
   2296  fc5a		       07		      .byte.b	#%00000111
   2297  fc5b		       05		      .byte.b	#%00000101
   2298  fc5c		       00		      .byte.b	#%00000000
   2299  fc5d		       0f		      .byte.b	#%00001111
   2300  fc5e		       08		      .byte.b	#%00001000
   2301  fc5f		       0b		      .byte.b	#%00001011
   2302  fc60		       0b		      .byte.b	#%00001011
   2303  fc61		       0b		      .byte.b	#%00001011
   2304  fc62		       08		      .byte.b	#%00001000
   2305  fc63		       0f		      .byte.b	#%00001111
   2306  fc64
   2307  fd00					      org	$FD00
   2308  fd00				   Font
   2309  fd00				   C0
   2310  fd00		       e7		      .byte.b	#%11100111	;
   2311  fd01		       a5		      .byte.b	#%10100101	; 
   2312  fd02		       a5		      .byte.b	#%10100101	; 
   2313  fd03		       a5		      .byte.b	#%10100101	; 
   2314  fd04		       e7		      .byte.b	#%11100111	;	
   2315  fd05				   C1
   2316  fd05		       e7		      .byte.b	#%11100111	;
   2317  fd06		       42		      .byte.b	#%01000010	; 
   2318  fd07		       42		      .byte.b	#%01000010	; 
   2319  fd08		       42		      .byte.b	#%01000010	; 
   2320  fd09		       66		      .byte.b	#%01100110	;
   2321  fd0a				   C2
   2322  fd0a		       e7		      .byte.b	#%11100111	;
   2323  fd0b		       24		      .byte.b	#%00100100	; 
   2324  fd0c		       e7		      .byte.b	#%11100111	; 
   2325  fd0d		       81		      .byte.b	#%10000001	; 
   2326  fd0e		       e7		      .byte.b	#%11100111	;
   2327  fd0f				   C3
   2328  fd0f		       e7		      .byte.b	#%11100111	;
   2329  fd10		       81		      .byte.b	#%10000001	; 
   2330  fd11		       e7		      .byte.b	#%11100111	; 
   2331  fd12		       81		      .byte.b	#%10000001	; 
   2332  fd13		       e7		      .byte.b	#%11100111	;
   2333  fd14				   C4
   2334  fd14		       81		      .byte.b	#%10000001	;
   2335  fd15		       81		      .byte.b	#%10000001	; 
   2336  fd16		       e7		      .byte.b	#%11100111	; 
   2337  fd17		       a5		      .byte.b	#%10100101	; 
   2338  fd18		       a5		      .byte.b	#%10100101	;
   2339  fd19				   C5
   2340  fd19		       e7		      .byte.b	#%11100111	;
   2341  fd1a		       81		      .byte.b	#%10000001	; 
   2342  fd1b		       e7		      .byte.b	#%11100111	; 
   2343  fd1c		       24		      .byte.b	#%00100100	; 
   2344  fd1d		       e7		      .byte.b	#%11100111	;
   2345  fd1e				   C6
   2346  fd1e		       e7		      .byte.b	#%11100111	;
   2347  fd1f		       a5		      .byte.b	#%10100101	; 
   2348  fd20		       e7		      .byte.b	#%11100111	; 
   2349  fd21		       24		      .byte.b	#%00100100	; 
   2350  fd22		       e7		      .byte.b	#%11100111	;
   2351  fd23				   C7
   2352  fd23		       81		      .byte.b	#%10000001	;
   2353  fd24		       81		      .byte.b	#%10000001	; 
   2354  fd25		       81		      .byte.b	#%10000001	; 
   2355  fd26		       81		      .byte.b	#%10000001	; 
   2356  fd27		       e7		      .byte.b	#%11100111	;
   2357  fd28				   C8
   2358  fd28		       e7		      .byte.b	#%11100111	;
   2359  fd29		       a5		      .byte.b	#%10100101	; 
   2360  fd2a		       e7		      .byte.b	#%11100111	; 
   2361  fd2b		       a5		      .byte.b	#%10100101	; 
   2362  fd2c		       e7		      .byte.b	#%11100111	;
   2363  fd2d				   C9
   2364  fd2d		       e7		      .byte.b	#%11100111	;
   2365  fd2e		       81		      .byte.b	#%10000001	; 
   2366  fd2f		       e7		      .byte.b	#%11100111	; 
   2367  fd30		       a5		      .byte.b	#%10100101	; 
   2368  fd31		       e7		      .byte.b	#%11100111	;
   2369  fd32				   CA
   2370  fd32		       a5		      .byte.b	#%10100101	;
   2371  fd33		       a5		      .byte.b	#%10100101	; 
   2372  fd34		       e7		      .byte.b	#%11100111	; 
   2373  fd35		       a5		      .byte.b	#%10100101	; 
   2374  fd36		       e7		      .byte.b	#%11100111	;
   2375  fd37				   CB
   2376  fd37		       66		      .byte.b	#%01100110	;
   2377  fd38		       a5		      .byte.b	#%10100101	; 
   2378  fd39		       66		      .byte.b	#%01100110	; 
   2379  fd3a		       a5		      .byte.b	#%10100101	;
   2380  fd3b		       66		      .byte.b	#%01100110	;
   2381  fd3c				   CC
   2382  fd3c		       e7		      .byte.b	#%11100111	;
   2383  fd3d		       24		      .byte.b	#%00100100	; 
   2384  fd3e		       24		      .byte.b	#%00100100	; 
   2385  fd3f		       24		      .byte.b	#%00100100	;
   2386  fd40		       e7		      .byte.b	#%11100111	;
   2387  fd41
   2388  fd41				   CD
   2389  fd41		       66		      .byte.b	#%01100110	;
   2390  fd42		       a5		      .byte.b	#%10100101	; 
   2391  fd43		       a5		      .byte.b	#%10100101	; 
   2392  fd44		       a5		      .byte.b	#%10100101	;
   2393  fd45		       66		      .byte.b	#%01100110	;
   2394  fd46
   2395  fd46				   CE
   2396  fd46		       e7		      .byte.b	#%11100111	;
   2397  fd47		       24		      .byte.b	#%00100100	; 
   2398  fd48		       e7		      .byte.b	#%11100111	; 
   2399  fd49		       24		      .byte.b	#%00100100	; 
   2400  fd4a		       e7		      .byte.b	#%11100111	;
   2401  fd4b
   2402  fd4b				   CF
   2403  fd4b		       24		      .byte.b	#%00100100	;
   2404  fd4c		       24		      .byte.b	#%00100100	; 
   2405  fd4d		       e7		      .byte.b	#%11100111	; 
   2406  fd4e		       24		      .byte.b	#%00100100	; 
   2407  fd4f		       e7		      .byte.b	#%11100111	;
   2408  fd50
   2409  fd50				   CG
   2410  fd50		       c3		      .byte.b	#%11000011	;
   2411  fd51		       a5		      .byte.b	#%10100101	; 
   2412  fd52		       a5		      .byte.b	#%10100101	; 
   2413  fd53		       24		      .byte.b	#%00100100	; 
   2414  fd54		       c3		      .byte.b	#%11000011	;	
   2415  fd55
   2416  fd55				   CH
   2417  fd55		       a5		      .byte.b	#%10100101	;
   2418  fd56		       a5		      .byte.b	#%10100101	; 
   2419  fd57		       e7		      .byte.b	#%11100111	; 
   2420  fd58		       a5		      .byte.b	#%10100101	; 
   2421  fd59		       a5		      .byte.b	#%10100101	;
   2422  fd5a
   2423  fd5a				   CK
   2424  fd5a		       a5		      .byte.b	#%10100101	;
   2425  fd5b		       a5		      .byte.b	#%10100101	; 
   2426  fd5c		       66		      .byte.b	#%01100110	; 
   2427  fd5d		       a5		      .byte.b	#%10100101	; 
   2428  fd5e		       a5		      .byte.b	#%10100101	;
   2429  fd5f
   2430  fd5f				   CL
   2431  fd5f		       e7		      .byte.b	#%11100111	;
   2432  fd60		       24		      .byte.b	#%00100100	; 
   2433  fd61		       24		      .byte.b	#%00100100	; 
   2434  fd62		       24		      .byte.b	#%00100100	; 
   2435  fd63		       24		      .byte.b	#%00100100	;
   2436  fd64
   2437  fd64				   CI
   2438  fd64		       42		      .byte.b	#%01000010	;
   2439  fd65		       42		      .byte.b	#%01000010	; 
   2440  fd66		       42		      .byte.b	#%01000010	; 
   2441  fd67		       42		      .byte.b	#%01000010	; 
   2442  fd68		       42		      .byte.b	#%01000010	;
   2443  fd69
   2444  fd69				   CM
   2445  fd69		       a5		      .byte.b	#%10100101	;
   2446  fd6a		       a5		      .byte.b	#%10100101	; 
   2447  fd6b		       a5		      .byte.b	#%10100101	; 
   2448  fd6c		       e7		      .byte.b	#%11100111	; 
   2449  fd6d		       a5		      .byte.b	#%10100101	;
   2450  fd6e
   2451  fd6e				   CN
   2452  fd6e		       a5		      .byte.b	#%10100101	;
   2453  fd6f		       a5		      .byte.b	#%10100101	; 
   2454  fd70		       a5		      .byte.b	#%10100101	; 
   2455  fd71		       a5		      .byte.b	#%10100101	; 
   2456  fd72		       66		      .byte.b	#%01100110	;	
   2457  fd73
   2458  fd73
   2459  fd73				   CO
   2460  fd73		       42		      .byte.b	#%01000010	;
   2461  fd74		       a5		      .byte.b	#%10100101	; 
   2462  fd75		       a5		      .byte.b	#%10100101	; 
   2463  fd76		       a5		      .byte.b	#%10100101	; 
   2464  fd77		       42		      .byte.b	#%01000010	;	
   2465  fd78
   2466  fd78				   CP
   2467  fd78		       24		      .byte.b	#%00100100	;
   2468  fd79		       24		      .byte.b	#%00100100	; 
   2469  fd7a		       e7		      .byte.b	#%11100111	; 
   2470  fd7b		       a5		      .byte.b	#%10100101	; 
   2471  fd7c		       e7		      .byte.b	#%11100111	;
   2472  fd7d
   2473  fd7d				   CR
   2474  fd7d		       a5		      .byte.b	#%10100101	;
   2475  fd7e		       a5		      .byte.b	#%10100101	; 
   2476  fd7f		       66		      .byte.b	#%01100110	; 
   2477  fd80		       a5		      .byte.b	#%10100101	; 
   2478  fd81		       66		      .byte.b	#%01100110	;
   2479  fd82
   2480  fd82				   CS
   2481  fd82		       66		      .byte.b	#%01100110	;
   2482  fd83		       81		      .byte.b	#%10000001	; 
   2483  fd84		       42		      .byte.b	#%01000010	; 
   2484  fd85		       24		      .byte.b	#%00100100	; 
   2485  fd86		       c3		      .byte.b	#%11000011	;
   2486  fd87
   2487  fd87				   CT
   2488  fd87		       42		      .byte.b	#%01000010	;
   2489  fd88		       42		      .byte.b	#%01000010	; 
   2490  fd89		       42		      .byte.b	#%01000010	; 
   2491  fd8a		       42		      .byte.b	#%01000010	; 
   2492  fd8b		       e7		      .byte.b	#%11100111	;
   2493  fd8c
   2494  fd8c				   CV
   2495  fd8c		       42		      .byte.b	#%01000010	;
   2496  fd8d		       a5		      .byte.b	#%10100101	; 
   2497  fd8e		       a5		      .byte.b	#%10100101	; 
   2498  fd8f		       a5		      .byte.b	#%10100101	; 
   2499  fd90		       a5		      .byte.b	#%10100101	;	
   2500  fd91
   2501  fd91				   CY
   2502  fd91		       42		      .byte.b	#%01000010	;
   2503  fd92		       42		      .byte.b	#%01000010	; 
   2504  fd93		       42		      .byte.b	#%01000010	; 
   2505  fd94		       a5		      .byte.b	#%10100101	; 
   2506  fd95		       a5		      .byte.b	#%10100101	;
   2507  fd96
   2508  fd96				   CW
   2509  fd96		       a5		      .byte.b	#%10100101	;
   2510  fd97		       e7		      .byte.b	#%11100111	; 
   2511  fd98		       a5		      .byte.b	#%10100101	; 
   2512  fd99		       a5		      .byte.b	#%10100101	; 
   2513  fd9a		       a5		      .byte.b	#%10100101	;
   2514  fd9b
   2515  fd9b				   CZ
   2516  fd9b		       e7		      .byte.b	#%11100111	;
   2517  fd9c		       24		      .byte.b	#%00100100	; 
   2518  fd9d		       42		      .byte.b	#%01000010	; 
   2519  fd9e		       81		      .byte.b	#%10000001	; 
   2520  fd9f		       e7		      .byte.b	#%11100111	;
   2521  fda0
   2522  fda0				   Pipe
   2523  fda0		       42		      .byte.b	#%01000010	;
   2524  fda1		       00		      .byte.b	#%00000000	; 
   2525  fda2		       42		      .byte.b	#%01000010	; 
   2526  fda3		       00		      .byte.b	#%00000000	; 
   2527  fda4		       42		      .byte.b	#%01000010	;
   2528  fda5
   2529  fda5				   Exclamation
   2530  fda5		       42		      .byte.b	#%01000010	;
   2531  fda6		       00		      .byte.b	#%00000000	; 
   2532  fda7		       42		      .byte.b	#%01000010	; 
   2533  fda8		       42		      .byte.b	#%01000010	; 
   2534  fda9		       42		      .byte.b	#%01000010	;
   2535  fdaa
   2536  fdaa				   Dot
   2537  fdaa		       42		      .byte.b	#%01000010	;
   2538  fdab		       42		      .byte.b	#%01000010	; 
   2539  fdac		       00		      .byte.b	#%00000000	; 
   2540  fdad		       00		      .byte.b	#%00000000	; 
   2541  fdae		       00		      .byte.b	#%00000000	;
   2542  fdaf
   2543  fdaf				   Colon
   2544  fdaf		       42		      .byte.b	#%01000010	;
   2545  fdb0		       42		      .byte.b	#%01000010	; 
   2546  fdb1		       00		      .byte.b	#%00000000	; 
   2547  fdb2		       42		      .byte.b	#%01000010	; 
   2548  fdb3		       42		      .byte.b	#%01000010	;
   2549  fdb4
   2550  fdb4				   Triangle
   2551  fdb4		       81		      .byte.b	#%10000001	;
   2552  fdb5		       c3		      .byte.b	#%11000011	; 
   2553  fdb6		       e7		      .byte.b	#%11100111	; 
   2554  fdb7		       c3		      .byte.b	#%11000011	; 
   2555  fdb8		       81		      .byte.b	#%10000001	;
   2556  fdb9
   2557  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2558  fdb9		       00		      .byte.b	#0	;
   2559  fdba		       00		      .byte.b	#0	;
   2560  fdbb		       00		      .byte.b	#0	;
   2561  fdbc		       00		      .byte.b	#0	;
   2562  fdbd		       00		      .byte.b	#0	;
   2563  fdbe
   2564  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2565  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2566  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2567  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2568  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2569  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2570  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2571  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2572  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2573  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2574  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2575  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2576  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2577  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2578  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2579  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2580  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2581  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2582  fdcf
   2583  fdcf				   EngineSoundType
   2584  fdcf		       02		      .byte.b	#2
   2585  fdd0		       02		      .byte.b	#2
   2586  fdd1		       0e		      .byte.b	#14
   2587  fdd2		       06		      .byte.b	#6
   2588  fdd3		       06		      .byte.b	#6
   2589  fdd4		       0e		      .byte.b	#14
   2590  fdd5
   2591  fdd5				   EngineBaseFrequence
   2592  fdd5		       1f		      .byte.b	#31
   2593  fdd6		       15		      .byte.b	#21
   2594  fdd7		       14		      .byte.b	#20
   2595  fdd8		       1f		      .byte.b	#31
   2596  fdd9		       16		      .byte.b	#22
   2597  fdda		       03		      .byte.b	#3
   2598  fddb
   2599  fddb				   TachometerSizeLookup1
   2600  fddb		       1f		      .byte.b	#%00011111
   2601  fddc		       3f		      .byte.b	#%00111111
   2602  fddd		       7f		      .byte.b	#%01111111
   2603  fdde		       ff		      .byte.b	#%11111111
   2604  fddf		       ff		      .byte.b	#%11111111
   2605  fde0		       ff		      .byte.b	#%11111111
   2606  fde1		       ff		      .byte.b	#%11111111
   2607  fde2		       ff		      .byte.b	#%11111111
   2608  fde3
   2609  fde3				   TachometerSizeLookup2
   2610  fde3		       00		      .byte.b	#%00000000
   2611  fde4		       00		      .byte.b	#%00000000
   2612  fde5		       00		      .byte.b	#%00000000
   2613  fde6		       00		      .byte.b	#%00000000
   2614  fde7		       80		      .byte.b	#%10000000
   2615  fde8		       c0		      .byte.b	#%11000000
   2616  fde9		       e0		      .byte.b	#%11100000
   2617  fdea		       f0		      .byte.b	#%11110000
   2618  fdeb
   2619  fdeb				   TachometerGearLookup
   2620  fdeb		       01		      .byte.b	#%00000001
   2621  fdec		       02		      .byte.b	#%00000010
   2622  fded		       04		      .byte.b	#%00000100
   2623  fdee		       08		      .byte.b	#%00001000
   2624  fdef		       10		      .byte.b	#%00010000
   2625  fdf0		       30		      .byte.b	#%00110000
   2626  fdf1
   2627  fe00					      org	$FE00
   2628  fe00				   AesTable
   2629  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2630  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2631  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2632  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2633  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2634  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2635  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2636  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2637  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2638  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2639  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2640  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2641  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2642  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2643  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2644  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2645  ff00
   2646  ff00							; From FF00 to FFFB (122 bytes) to use here
   2647  ff00
   2648  ff00				   StaticText		; All static text must be on the same MSB block. 
   2649  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2650  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2651  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2652  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2653  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2654  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2655  ff05
   2656  ff05				   HellwayLeftText
   2657  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2658  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2659  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2660  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2661  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2662  ff0a
   2663  ff0a				   HellwayRightText
   2664  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2665  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2666  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2667  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2668  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2669  ff0f
   2670  ff0f				   OpbText
   2671  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2672  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2673  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2674  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2675  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2676  ff14
   2677  ff14				   YearText
   2678  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2679  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2680  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2681  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2682  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2683  ff19
   2684  ff19				   GameText
   2685  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2686  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2687  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2688  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2689  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2690  ff1e
   2691  ff1e				   OverText
   2692  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2693  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2694  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2695  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2696  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2697  ff23				   GoText
   2698  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2699  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2700  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2701  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2702  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2703  ff28
   2704  ff28				   ZeldaTextLeft
   2705  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2706  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2707  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2708  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2709  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2710  ff2d
   2711  ff2d				   ZeldaTextRight
   2712  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2713  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2714  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2715  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2716  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2717  ff32
   2718  ff32				   ZeldaDateLeft
   2719  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2720  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2721  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2722  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2723  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2724  ff37
   2725  ff37				   ZeldaDateRight
   2726  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2727  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2728  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2729  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2730  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2731  ff3c
   2732  ff3c				   PolvinhosTextLeft
   2733  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2734  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2735  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2736  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2737  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2738  ff41
   2739  ff41				   PolvinhosTextRight
   2740  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2741  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2742  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2743  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2744  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2745  ff46
   2746  ff46				   PolvinhosDateLeft
   2747  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2748  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2749  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2750  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2751  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2752  ff4b
   2753  ff4b				   PolvinhosDateRight
   2754  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2755  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2756  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2757  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2758  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2759  ff50
   2760  ff50				   IvonneTextLeft
   2761  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2762  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2763  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2764  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2765  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2766  ff55
   2767  ff55				   IvonneTextRight
   2768  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2769  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2770  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2771  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2772  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2773  ff5a
   2774  ff5a				   IvonneDateLeft
   2775  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2776  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2777  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2778  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2779  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2780  ff5f
   2781  ff5f				   IvonneDateRight
   2782  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2783  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2784  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2785  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2786  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2787  ff64
   2788  ff64				   PaperArtTextLeft
   2789  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2790  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2791  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2792  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2793  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2794  ff69
   2795  ff69				   PaperArtTextRight
   2796  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2797  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2798  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2799  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2800  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2801  ff6e
   2802  ff6e				   LeonardoTextLeft
   2803  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2804  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2805  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2806  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2807  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2808  ff73
   2809  ff73				   LeonardoTextRight
   2810  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2811  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2812  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2813  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2814  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2815  ff78
   2816  ff78				   VersionText
   2817  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2818  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2819  ff7a		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2820  ff7b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2821  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2822  ff7d
   2823  ff7d
   2824  ff7d				   EndStaticText
   2825  ff7d
   2826  ff7d				   CarSprite0		; Upside down, Original Car
   2827  ff7d		       00 00 00 00*	      ds	7
   2828  ff84		       7e		      .byte.b	#%01111110
   2829  ff85		       24		      .byte.b	#%00100100
   2830  ff86		       bd		      .byte.b	#%10111101
   2831  ff87		       3c		      .byte.b	#%00111100
   2832  ff88		       bd		      .byte.b	#%10111101
   2833  ff89		       3c		      .byte.b	#%00111100
   2834  ff8a
   2835  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2836  ff8a		       00 00 00 00*	      ds	7
   2837  ff91		       bd		      .byte.b	#%10111101
   2838  ff92		       7e		      .byte.b	#%01111110
   2839  ff93		       5a		      .byte.b	#%01011010
   2840  ff94		       66		      .byte.b	#%01100110
   2841  ff95		       bd		      .byte.b	#%10111101
   2842  ff96		       3c		      .byte.b	#%00111100
   2843  ff97
   2844  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2845  ff97		       00 00 00 00*	      ds	7
   2846  ff9e		       7e		      .byte.b	#%01111110
   2847  ff9f		       a5		      .byte.b	#%10100101
   2848  ffa0		       42		      .byte.b	#%01000010
   2849  ffa1		       42		      .byte.b	#%01000010
   2850  ffa2		       bd		      .byte.b	#%10111101
   2851  ffa3		       7e		      .byte.b	#%01111110
   2852  ffa4
   2853  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2854  ffa4		       00 00 00 00*	      ds	7
   2855  ffab		       3c		      .byte.b	#%00111100
   2856  ffac		       db		      .byte.b	#%11011011
   2857  ffad		       db		      .byte.b	#%11011011
   2858  ffae		       3c		      .byte.b	#%00111100
   2859  ffaf		       5a		      .byte.b	#%01011010
   2860  ffb0		       3c		      .byte.b	#%00111100
   2861  ffb1
   2862  ffb1				   TrafficSpeeds
   2863  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2864  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2865  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2866  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2867  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2868  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2869  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2870  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2871  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2872  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2873  ffbb				   TrafficSpeedsHighDelta
   2874  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2875  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2876  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2877  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2878  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2879  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2880  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2881  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2882  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2883  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2884  ffc5
   2885  ffc5				   CarIdToSpriteAddressL
   2886  ffc5		       7d		      .byte.b	#<CarSprite0
   2887  ffc6		       8a		      .byte.b	#<CarSprite1
   2888  ffc7		       97		      .byte.b	#<CarSprite2
   2889  ffc8		       a4		      .byte.b	#<CarSprite3
   2890  ffc9
   2891  ffc9				   CarIdToSpriteAddressH
   2892  ffc9		       ff		      .byte.b	#>CarSprite0
   2893  ffca		       ff		      .byte.b	#>CarSprite1
   2894  ffcb		       ff		      .byte.b	#>CarSprite2
   2895  ffcc		       ff		      .byte.b	#>CarSprite3
   2896  ffcd
   2897  ffcd
   2898  fffc					      org	$FFFC
   2899  fffc		       00 f0		      .word.w	BeforeStart
   2900  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
