------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     13  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     14  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     15  f000
     16  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     17  f000							;16 bit precision
     18  f000							;640 max speed!
     19  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     20  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     21  f000		       00 00	   CAR_MIN_SPEED_H =	0
     22  f000		       00 00	   CAR_MIN_SPEED_L =	0
     23  f000		       00 01	   ACCELERATE_SPEED =	1
     24  f000		       00 0a	   BREAK_SPEED =	10
     25  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     26  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     27  f000
     28  f000		       00 12	   TRAFFIC_CHANCE_LIGHT =	18
     29  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     30  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     31  f000
     32  f000		       00 1c	   TRAFFIC_CHANCE_REGULAR =	28
     33  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     34  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     35  f000
     36  f000		       00 26	   TRAFFIC_CHANCE_INTENSE =	38
     37  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     38  f000		       00 a9	   TRAFFIC_COLOR_INTENSE =	$A9
     39  f000
     40  f000		       00 30	   TRAFFIC_CHANCE_RUSH_HOUR =	48
     41  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     42  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     43  f000
     44  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     45  f000		       00 87	   SCORE_BACKGROUND_COLOR =	$87
     46  f000
     47  f000		       00 f9	   PLAYER0_COLOR =	$F9
     48  f000
     49  f000		       00 a4	   PLAYER1_COLOR =	$A4
     50  f000
     51  f000		       00 0c	   SCORE_FONT_COLOR =	$0C
     52  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     53  f000		       00 34	   SCORE_FONT_COLOR_BAD =	$34
     54  f000		       00 2f	   SCORE_FONT_COLOR_OVER =	$2F
     55  f000
     56  f000		       00 35	   PLAYER_0_X_START =	$35	;
     57  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     58  f000
     59  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     60  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     61  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     62  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	%00000111	; Every 8 frames
     63  f000
     64  f000		       00 3c	   SWITCHES_DEBOUNCE_TIME =	60	; Frames
     65  f000
     66  f000
     67  f000		       00 80	   GRP0Cache  =	$80
     68  f000		       00 81	   PF0Cache   =	$81
     69  f000		       00 82	   PF1Cache   =	$82
     70  f000		       00 83	   PF2Cache   =	$83
     71  f000		       00 84	   GRP1Cache  =	$84
     72  f000		       00 85	   ENABLCache =	$85
     73  f000		       00 86	   ENAM0Cache =	$86
     74  f000		       00 87	   ENAM1Cache =	$87
     75  f000
     76  f000		       00 8c	   FrameCount0 =	$8C	;
     77  f000		       00 8d	   FrameCount1 =	$8D	;
     78  f000
     79  f000		       00 8e	   Player0SpeedL =	$8E
     80  f000		       00 8f	   Player0SpeedH =	$8F
     81  f000
     82  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     83  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     84  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     85  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     86  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     87  f000
     88  f000							;Temporary variables, multiple uses
     89  f000		       00 b0	   Tmp0       =	$B0
     90  f000		       00 b1	   Tmp1       =	$B1
     91  f000		       00 b2	   Tmp2       =	$B2
     92  f000
     93  f000		       00 ba	   CollisionCounter =	$BA
     94  f000		       00 bb	   Player0X   =	$BB
     95  f000		       00 bc	   CountdownTimer =	$BC
     96  f000		       00 bd	   Traffic0Msb =	$BD
     97  f000		       00 be	   SwitchDebounceCounter =	$BE
     98  f000
     99  f000
    100  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, D6 = player 0 outside area
    101  f000		       00 c1	   TrafficChance =	$C1
    102  f000		       00 c2	   CheckpointTime =	$C2
    103  f000		       00 c3	   TrafficColor =	$C3
    104  f000
    105  f000		       00 d0	   ScoreD0    =	$D0
    106  f000		       00 d1	   ScoreD1    =	$D1
    107  f000		       00 d2	   ScoreD2    =	$D2
    108  f000		       00 d3	   ScoreD3    =	$D3
    109  f000		       00 d4	   ScoreD4    =	$D4
    110  f000		       00 d5	   ScoreFontColor =	$D5
    111  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    112  f000		       00 d7	   NextCheckpoint =	$D7
    113  f000
    114  f000
    115  f000							;generic start up stuff, put zero in all...
    116  f000				   BeforeStart		;All variables that are kept on game reset or select
    117  f000		       a0 00		      LDY	#0
    118  f002		       84 be		      STY	SwitchDebounceCounter
    119  f004
    120  f004				   Start
    121  f004		       78		      SEI
    122  f005		       d8		      CLD
    123  f006		       a2 ff		      LDX	#$FF
    124  f008		       9a		      TXS
    125  f009		       a9 00		      LDA	#0
    126  f00b				   ClearMem
    127  f00b		       e0 be		      CPX	#SwitchDebounceCounter
    128  f00d		       f0 02		      BEQ	SkipClean
    129  f00f		       95 00		      STA	0,X
    130  f011				   SkipClean
    131  f011		       ca		      DEX
    132  f012		       d0 f7		      BNE	ClearMem
    133  f014
    134  f014							;Setting some variables...
    135  f014
    136  f014		       85 02		      STA	WSYNC	;We will set player position
    137  f016		       a9 01		      LDA	#1
    138  f018		       85 94		      STA	TrafficOffset1 + 0	; So we can detect loop
    139  f01a		       a9 20		      LDA	#$20
    140  f01c		       85 96		      STA	TrafficOffset1 + 2
    141  f01e		       a9 40		      LDA	#$40
    142  f020		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
    143  f022		       a9 60		      LDA	#$60
    144  f024		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
    145  f026		       a9 80		      LDA	#$80
    146  f028		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
    147  f02a		       a9 a0		      LDA	#$A0
    148  f02c
    149  f02c		       ad 41 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    150  f02f		       85 8e		      STA	Player0SpeedL
    151  f031
      0  f031					      SLEEP	18
      1  f031				   .CYCLES    SET	18
      2  f031
      3  f031				  -	      IF	.CYCLES < 2
      4  f031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f031				  -	      ERR
      6  f031					      ENDIF
      7  f031
      8  f031				  -	      IF	.CYCLES & 1
      9  f031				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f031				  -	      nop	0
     11  f031				  -	      ELSE
     12  f031				  -	      bit	VSYNC
     13  f031				  -	      ENDIF
     14  f031				  -.CYCLES    SET	.CYCLES - 3
     15  f031					      ENDIF
     16  f031
     17  f031					      REPEAT	.CYCLES / 2
     18  f031		       ea		      nop
     17  f031					      REPEND
     18  f032		       ea		      nop
     17  f032					      REPEND
     18  f033		       ea		      nop
     17  f033					      REPEND
     18  f034		       ea		      nop
     17  f034					      REPEND
     18  f035		       ea		      nop
     17  f035					      REPEND
     18  f036		       ea		      nop
     17  f036					      REPEND
     18  f037		       ea		      nop
     17  f037					      REPEND
     18  f038		       ea		      nop
     17  f038					      REPEND
     18  f039		       ea		      nop
     19  f03a					      REPEND
    153  f03a		       85 10		      STA	RESP0
    154  f03c
    155  f03c		       ad 82 02 	      LDA	SWCHB	; Reading the switches as binary number A = 1, B = 0
    156  f03f		       29 c0		      AND	#%11000000
    157  f041		       f0 0c		      BEQ	ConfigureLightTraffic
    158  f043		       c9 80		      CMP	#%10000000
    159  f045		       f0 11		      BEQ	ConfigureRegularTraffic
    160  f047		       c9 40		      CMP	#%01000000
    161  f049		       f0 16		      BEQ	ConfigureIntenseTraffic
    162  f04b		       c9 c0		      CMP	#%11000000
    163  f04d		       f0 1b		      BEQ	ConfigureRushHourTraffic
    164  f04f
    165  f04f				   ConfigureLightTraffic
    166  f04f		       a2 12		      LDX	#TRAFFIC_CHANCE_LIGHT
    167  f051		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
    168  f053		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
    169  f055		       4c 70 f0 	      JMP	StoreTrafficChance
    170  f058				   ConfigureRegularTraffic
    171  f058		       a2 1c		      LDX	#TRAFFIC_CHANCE_REGULAR
    172  f05a		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
    173  f05c		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
    174  f05e		       4c 70 f0 	      JMP	StoreTrafficChance
    175  f061				   ConfigureIntenseTraffic
    176  f061		       a2 26		      LDX	#TRAFFIC_CHANCE_INTENSE
    177  f063		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
    178  f065		       a9 a9		      LDA	#TRAFFIC_COLOR_INTENSE
    179  f067		       4c 70 f0 	      JMP	StoreTrafficChance
    180  f06a				   ConfigureRushHourTraffic
    181  f06a		       a2 30		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
    182  f06c		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
    183  f06e		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
    184  f070
    185  f070				   StoreTrafficChance
    186  f070		       86 c1		      STX	TrafficChance
    187  f072		       84 c2		      STY	CheckpointTime
    188  f074		       85 c3		      STA	TrafficColor
    189  f076
    190  f076				   HPositioning
    191  f076		       85 02		      STA	WSYNC
    192  f078
    193  f078		       a9 30		      LDA	#%00110000	;2 Missile Size
    194  f07a		       85 04		      STA	NUSIZ0	;3
    195  f07c		       85 05		      STA	NUSIZ1	;3
    196  f07e
    197  f07e		       a9 35		      LDA	#PLAYER_0_X_START	;2
    198  f080		       85 bb		      STA	Player0X	;3
    199  f082
    200  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    201  f084		       85 bc		      STA	CountdownTimer	;3
    202  f086
    203  f086		       a9 10		      LDA	#CHECKPOINT_INTERVAL	;2
    204  f088		       85 d7		      STA	NextCheckpoint	;3
    205  f08a
    206  f08a		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f08c					      SLEEP	11	;
      1  f08c				   .CYCLES    SET	11
      2  f08c
      3  f08c				  -	      IF	.CYCLES < 2
      4  f08c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08c				  -	      ERR
      6  f08c					      ENDIF
      7  f08c
      8  f08c					      IF	.CYCLES & 1
      9  f08c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08c				  -	      nop	0
     11  f08c					      ELSE
     12  f08c		       24 00		      bit	VSYNC
     13  f08e					      ENDIF
     14  f08e				   .CYCLES    SET	.CYCLES - 3
     15  f08e					      ENDIF
     16  f08e
     17  f08e					      REPEAT	.CYCLES / 2
     18  f08e		       ea		      nop
     17  f08e					      REPEND
     18  f08f		       ea		      nop
     17  f08f					      REPEND
     18  f090		       ea		      nop
     17  f090					      REPEND
     18  f091		       ea		      nop
     19  f092					      REPEND
    208  f092		       85 11		      STA	RESP1
      0  f094					      SLEEP	2	;
      1  f094				   .CYCLES    SET	2
      2  f094
      3  f094				  -	      IF	.CYCLES < 2
      4  f094				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f094				  -	      ERR
      6  f094					      ENDIF
      7  f094
      8  f094				  -	      IF	.CYCLES & 1
      9  f094				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f094				  -	      nop	0
     11  f094				  -	      ELSE
     12  f094				  -	      bit	VSYNC
     13  f094				  -	      ENDIF
     14  f094				  -.CYCLES    SET	.CYCLES - 3
     15  f094					      ENDIF
     16  f094
     17  f094					      REPEAT	.CYCLES / 2
     18  f094		       ea		      nop
     19  f095					      REPEND
    210  f095		       85 14		      STA	RESBL
      0  f097					      SLEEP	2	;
      1  f097				   .CYCLES    SET	2
      2  f097
      3  f097				  -	      IF	.CYCLES < 2
      4  f097				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f097				  -	      ERR
      6  f097					      ENDIF
      7  f097
      8  f097				  -	      IF	.CYCLES & 1
      9  f097				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f097				  -	      nop	0
     11  f097				  -	      ELSE
     12  f097				  -	      bit	VSYNC
     13  f097				  -	      ENDIF
     14  f097				  -.CYCLES    SET	.CYCLES - 3
     15  f097					      ENDIF
     16  f097
     17  f097					      REPEAT	.CYCLES / 2
     18  f097		       ea		      nop
     19  f098					      REPEND
    212  f098		       85 12		      STA	RESM0
      0  f09a					      SLEEP	2
      1  f09a				   .CYCLES    SET	2
      2  f09a
      3  f09a				  -	      IF	.CYCLES < 2
      4  f09a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09a				  -	      ERR
      6  f09a					      ENDIF
      7  f09a
      8  f09a				  -	      IF	.CYCLES & 1
      9  f09a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09a				  -	      nop	0
     11  f09a				  -	      ELSE
     12  f09a				  -	      bit	VSYNC
     13  f09a				  -	      ENDIF
     14  f09a				  -.CYCLES    SET	.CYCLES - 3
     15  f09a					      ENDIF
     16  f09a
     17  f09a					      REPEAT	.CYCLES / 2
     18  f09a		       ea		      nop
     19  f09b					      REPEND
    214  f09b		       85 13		      STA	RESM1
    215  f09d
    216  f09d		       a9 f0		      LDA	#$F0
    217  f09f		       85 24		      STA	HMBL
    218  f0a1		       85 22		      STA	HMM0
    219  f0a3		       85 23		      STA	HMM1
    220  f0a5		       85 02		      STA	WSYNC
    221  f0a7		       85 2a		      STA	HMOVE
    222  f0a9		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    223  f0ab		       85 2b		      STA	HMCLR
    224  f0ad
    225  f0ad							;SLEEP 24
    226  f0ad							;STA HMCLR
    227  f0ad
    228  f0ad							;VSYNC time
    229  f0ad				   MainLoop
    230  f0ad		       a9 02		      LDA	#2
    231  f0af		       85 00		      STA	VSYNC
    232  f0b1		       85 02		      STA	WSYNC
    233  f0b3		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    234  f0b5		       85 2a		      STA	HMOVE	;2
    235  f0b7							;This must be done after a WSync, otherwise it is impossible to predict the X position
    236  f0b7				   DoNotSetPlayerX
    237  f0b7
    238  f0b7		       85 02		      STA	WSYNC	;3
    239  f0b9		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    240  f0bb		       8d 96 02 	      STA	TIM64T	;3	
    241  f0be		       a9 00		      LDA	#0	;2
    242  f0c0		       85 00		      STA	VSYNC	;3	
    243  f0c2
    244  f0c2							;Read Fire Button before, will make it start the game for now.
    245  f0c2				   StartGame
    246  f0c2		       a5 0c		      LDA	INPT4	;3
    247  f0c4		       30 10		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    248  f0c6		       a5 c0		      LDA	GameStatus	;3
    249  f0c8		       29 80		      AND	#%10000000
    250  f0ca		       d0 0a		      BNE	SkipGameStart
    251  f0cc		       09 80		      ORA	#%10000000	;2
    252  f0ce		       85 c0		      STA	GameStatus	;3
    253  f0d0		       a9 00		      LDA	#0	;
    254  f0d2		       85 8c		      STA	FrameCount0
    255  f0d4		       85 8d		      STA	FrameCount1
    256  f0d6				   SkipGameStart
    257  f0d6
    258  f0d6				   ReadSwitches
    259  f0d6		       a6 be		      LDX	SwitchDebounceCounter
    260  f0d8		       d0 11		      BNE	DecrementSwitchDebounceCounter
    261  f0da		       a9 01		      LDA	#%00000001
    262  f0dc		       2c 82 02 	      BIT	SWCHB
    263  f0df		       d0 07		      BNE	SkipReset
    264  f0e1		       a9 3c		      LDA	#SWITCHES_DEBOUNCE_TIME
    265  f0e3		       85 be		      STA	SwitchDebounceCounter
    266  f0e5		       4c 04 f0 	      JMP	Start
    267  f0e8				   SkipReset
    268  f0e8		       4c ed f0 	      JMP	EndReadSwitches
    269  f0eb				   DecrementSwitchDebounceCounter
    270  f0eb		       c6 be		      DEC	SwitchDebounceCounter
    271  f0ed				   EndReadSwitches
    272  f0ed
    273  f0ed				   CountFrame
    274  f0ed		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    275  f0ef		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    276  f0f1		       e6 8d		      INC	FrameCount1	; 5 Still not used
    277  f0f3				   SkipIncFC1
    278  f0f3
    279  f0f3							;Does not update the game if not running
    280  f0f3		       a5 c0		      LDA	GameStatus	;3
    281  f0f5		       29 80		      AND	#%10000000	;2 game is running...
    282  f0f7		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    283  f0f9		       4c 32 f2 	      JMP	SkipUpdateLogic
    284  f0fc				   ContinueWithGameLogic
    285  f0fc
    286  f0fc				   EverySecond		; 64 frames to be more precise
    287  f0fc		       a9 3f		      LDA	#%00111111
    288  f0fe		       25 8c		      AND	FrameCount0
    289  f100		       d0 06		      BNE	SkipEverySecondAction
    290  f102		       c5 bc		      CMP	CountdownTimer
    291  f104		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    292  f106		       c6 bc		      DEC	CountdownTimer
    293  f108				   SkipEverySecondAction
    294  f108
    295  f108
    296  f108
    297  f108				   BreakOnTimeOver		; Uses LDX as the breaking speed
    298  f108		       a2 00		      LDX	#0
    299  f10a		       a5 bc		      LDA	CountdownTimer
    300  f10c		       d0 08		      BNE	Break
    301  f10e		       a5 8c		      LDA	FrameCount0
    302  f110		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    303  f112		       d0 02		      BNE	Break
    304  f114		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    305  f116
    306  f116				   Break
    307  f116		       a9 20		      LDA	#%00100000	;Down in controller
    308  f118		       2c 80 02 	      BIT	SWCHA
    309  f11b		       d0 0b		      BNE	BreakNonZero
    310  f11d		       a5 0c		      LDA	INPT4	;3
    311  f11f		       10 05		      BPL	BreakWhileAccelerating
    312  f121		       a2 0a		      LDX	#BREAK_SPEED
    313  f123		       4c 28 f1 	      JMP	BreakNonZero
    314  f126				   BreakWhileAccelerating		; Allow better control while breaking.
    315  f126		       a2 05		      LDX	#BREAK_SPEED / 2
    316  f128
    317  f128				   BreakNonZero
    318  f128		       e0 00		      CPX	#0
    319  f12a		       f0 2b		      BEQ	SkipBreak
    320  f12c		       86 b0		      STX	Tmp0
    321  f12e
    322  f12e				   DecreaseSpeed
    323  f12e		       38		      SEC
    324  f12f		       a5 8e		      LDA	Player0SpeedL
    325  f131		       e5 b0		      SBC	Tmp0
    326  f133		       85 8e		      STA	Player0SpeedL
    327  f135		       a5 8f		      LDA	Player0SpeedH
    328  f137		       e9 00		      SBC	#0
    329  f139		       85 8f		      STA	Player0SpeedH
    330  f13b
    331  f13b				   CheckMinSpeed
    332  f13b		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    333  f13d		       c9 00		      CMP	#CAR_MIN_SPEED_H
    334  f13f		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    335  f141		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    336  f143
    337  f143				   CompareLBreakSpeed
    338  f143		       a5 8e		      LDA	Player0SpeedL
    339  f145		       c9 00		      CMP	#CAR_MIN_SPEED_L
    340  f147		       90 03		      BCC	ResetMinSpeed	; Less than memory
    341  f149		       4c 54 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    342  f14c
    343  f14c				   ResetMinSpeed
    344  f14c		       a9 00		      LDA	#CAR_MIN_SPEED_H
    345  f14e		       85 8f		      STA	Player0SpeedH
    346  f150		       a9 00		      LDA	#CAR_MIN_SPEED_L
    347  f152		       85 8e		      STA	Player0SpeedL
    348  f154
    349  f154				   SkipAccelerateIfBreaking
    350  f154		       4c 87 f1 	      JMP	SkipAccelerate
    351  f157				   SkipBreak
    352  f157
    353  f157				   Acelerates
    354  f157		       a5 bc		      LDA	CountdownTimer
    355  f159		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    356  f15b		       a5 0c		      LDA	INPT4	;3
    357  f15d		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    358  f15f		       a9 10		      LDA	#%00010000	;UP in controller
    359  f161		       2c 80 02 	      BIT	SWCHA
    360  f164		       d0 21		      BNE	SkipAccelerate
    361  f166
    362  f166				   IncreaseCarSpeed
    363  f166							;Adds speed
    364  f166		       18		      CLC
    365  f167		       a5 8e		      LDA	Player0SpeedL
    366  f169		       69 01		      ADC	#ACCELERATE_SPEED
    367  f16b		       85 8e		      STA	Player0SpeedL
    368  f16d		       a5 8f		      LDA	Player0SpeedH
    369  f16f		       69 00		      ADC	#0
    370  f171		       85 8f		      STA	Player0SpeedH
    371  f173
    372  f173							;Checks if already max
    373  f173		       c9 02		      CMP	#CAR_MAX_SPEED_H
    374  f175		       90 10		      BCC	SkipAccelerate	; less than my max speed
    375  f177		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    376  f179							;High bit is max, compare the low
    377  f179		       a5 8e		      LDA	Player0SpeedL
    378  f17b		       c9 80		      CMP	#CAR_MAX_SPEED_L
    379  f17d		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    380  f17f							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    381  f17f
    382  f17f				   ResetToMaxSpeed		; Speed is more, or is already max
    383  f17f		       a9 02		      LDA	#CAR_MAX_SPEED_H
    384  f181		       85 8f		      STA	Player0SpeedH
    385  f183		       a9 80		      LDA	#CAR_MAX_SPEED_L
    386  f185		       85 8e		      STA	Player0SpeedL
    387  f187				   SkipAccelerate
    388  f187
    389  f187							;Updates all offsets 24 bits
    390  f187		       a2 00		      LDX	#0	; Memory Offset 24 bit
    391  f189		       a0 00		      LDY	#0	; Line Speeds 16 bits
    392  f18b				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    393  f18b		       38		      SEC
    394  f18c		       a5 8e		      LDA	Player0SpeedL
    395  f18e		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    396  f191		       85 b0		      STA	Tmp0
    397  f193		       c8		      INY
    398  f194		       a5 8f		      LDA	Player0SpeedH
    399  f196		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    400  f199		       85 b1		      STA	Tmp1
    401  f19b		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    402  f19d		       e9 00		      SBC	#0
    403  f19f		       85 b2		      STA	Tmp2
    404  f1a1
    405  f1a1
    406  f1a1				   AddsTheResult
    407  f1a1		       18		      CLC
    408  f1a2		       a5 b0		      LDA	Tmp0
    409  f1a4		       75 90		      ADC	TrafficOffset0,X
    410  f1a6		       95 90		      STA	TrafficOffset0,X
    411  f1a8		       e8		      INX
    412  f1a9		       a5 b1		      LDA	Tmp1
    413  f1ab		       75 90		      ADC	TrafficOffset0,X
    414  f1ad		       95 90		      STA	TrafficOffset0,X
    415  f1af		       e8		      INX
    416  f1b0		       a5 b2		      LDA	Tmp2	; Carry
    417  f1b2		       75 90		      ADC	TrafficOffset0,X
    418  f1b4		       95 90		      STA	TrafficOffset0,X
    419  f1b6		       90 06		      BCC	CalculateOffsetCache
    420  f1b8		       e0 02		      CPX	#2	;MSB offset 0
    421  f1ba		       d0 02		      BNE	CalculateOffsetCache
    422  f1bc		       e6 bd		      INC	Traffic0Msb
    423  f1be
    424  f1be				   CalculateOffsetCache
    425  f1be		       e8		      INX
    426  f1bf		       38		      SEC
    427  f1c0		       69 00		      ADC	#0	;Increment by one
    428  f1c2		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    429  f1c4
    430  f1c4				   PrepareNextUpdateLoop
    431  f1c4		       c8		      INY
    432  f1c5		       e8		      INX
    433  f1c6		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    434  f1c8		       d0 c1		      BNE	UpdateOffsets
    435  f1ca
    436  f1ca							;Until store the movemnt, LDX contains the value to be stored.
    437  f1ca				   TestCollision		;
    438  f1ca							; see if player0 colides with the rest
    439  f1ca		       a5 00		      LDA	CXM0P
    440  f1cc		       05 01		      ORA	CXM1P
    441  f1ce		       05 01		      ORA	CXM1P
    442  f1d0		       05 02		      ORA	CXP0FB
    443  f1d2		       05 07		      ORA	CXPPMM
    444  f1d4		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    445  f1d6		       f0 19		      BEQ	NoCollision	;skip if not hitting...
    446  f1d8		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    447  f1da		       d0 15		      BNE	NoCollision
    448  f1dc		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    449  f1de		       85 ba		      STA	CollisionCounter	;and store as colision.
    450  f1e0		       a9 10		      LDA	#COLLISION_SPEED_L	;
    451  f1e2		       c5 8e		      CMP	Player0SpeedL
    452  f1e4		       b0 02		      BCS	SkipSetColisionSpeed
    453  f1e6		       85 8e		      STA	Player0SpeedL
    454  f1e8				   SkipSetColisionSpeed
    455  f1e8		       a9 00		      LDA	#0
    456  f1ea		       85 8f		      STA	Player0SpeedH
    457  f1ec		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    458  f1ee		       4c 2e f2 	      JMP	StoreHMove	; We keep position consistent
    459  f1f1				   NoCollision
    460  f1f1
    461  f1f1				   DecrementCollision
    462  f1f1		       a4 ba		      LDY	CollisionCounter
    463  f1f3		       f0 07		      BEQ	FinishDecrementCollision
    464  f1f5		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    465  f1f7		       85 04		      STA	NUSIZ0
    466  f1f9		       88		      DEY
    467  f1fa		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    468  f1fc				   FinishDecrementCollision
    469  f1fc
    470  f1fc				   ResetPlayerSize
    471  f1fc		       d0 04		      BNE	FinishResetPlayerSize
    472  f1fe		       a9 30		      LDA	#%00110000
    473  f200		       85 04		      STA	NUSIZ0	;
    474  f202				   FinishResetPlayerSize
    475  f202
    476  f202				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    477  f202		       c0 01		      CPY	#1	; Last frame before reset
    478  f204		       d0 05		      BNE	SkipResetPlayerPosition
    479  f206		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    480  f208		       4c 2e f2 	      JMP	StoreHMove
    481  f20b				   SkipResetPlayerPosition
    482  f20b
    483  f20b							; for left and right, we're gonna 
    484  f20b							; set the horizontal speed, and then do
    485  f20b							; a single HMOVE.  We'll use X to hold the
    486  f20b							; horizontal speed, then store it in the 
    487  f20b							; appropriate register
    488  f20b				   PrepareReadXAxis
    489  f20b		       a2 00		      LDX	#0
    490  f20d		       a4 bb		      LDY	Player0X
    491  f20f				   BeginReadLeft
    492  f20f		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    493  f211		       a9 40		      LDA	#%01000000	;Left
    494  f213		       2c 80 02 	      BIT	SWCHA
    495  f216		       d0 07		      BNE	SkipMoveLeft
    496  f218		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    497  f21a		       c6 bb		      DEC	Player0X
    498  f21c		       4c 2e f2 	      JMP	StoreHMove	; Cannot move left and right...
    499  f21f				   SkipMoveLeft
    500  f21f				   BeginReadRight
    501  f21f		       c0 36		      CPY	#PLAYER_0_MAX_X
    502  f221		       f0 0b		      BEQ	SkipMoveRight	; At max already
    503  f223		       a9 80		      LDA	#%10000000	;Right
    504  f225		       2c 80 02 	      BIT	SWCHA
    505  f228		       d0 04		      BNE	SkipMoveRight
    506  f22a		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    507  f22c		       e6 bb		      INC	Player0X
    508  f22e				   SkipMoveRight
    509  f22e				   StoreHMove
    510  f22e		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    511  f230		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    512  f232
    513  f232
    514  f232				   SkipUpdateLogic
    515  f232		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    516  f234		       85 09		      STA	COLUBK
    517  f236		       a5 d5		      LDA	ScoreFontColor
    518  f238		       85 08		      STA	COLUPF
    519  f23a		       20 70 f4 	      JSR	ClearAll
    520  f23d		       a9 02		      LDA	#%00000010	; Score mode
    521  f23f		       85 0a		      STA	CTRLPF
    522  f241		       a0 04		      LDY	#SCORE_SIZE - 1
    523  f243		       a2 00		      LDX	#0
    524  f245
    525  f245		       a5 8c		      LDA	FrameCount0	;3
    526  f247		       29 01		      AND	#%00000001	;2
    527  f249		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    528  f24b				   LeftScoreOn
    529  f24b		       a5 d5		      LDA	ScoreFontColor
    530  f24d		       85 07		      STA	COLUP1
    531  f24f		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    532  f251		       85 06		      STA	COLUP0
    533  f253		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    534  f255		       85 b1		      STA	Tmp1
    535  f257		       4c 66 f2 	      JMP	WaitForVblankEnd
    536  f25a				   RightScoreOn
    537  f25a		       a5 d5		      LDA	ScoreFontColor
    538  f25c		       85 06		      STA	COLUP0
    539  f25e		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    540  f260		       85 07		      STA	COLUP1
    541  f262		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    542  f264		       85 b1		      STA	Tmp1
    543  f266
    544  f266
    545  f266							; After here we are going to update the screen, No more heavy code
    546  f266				   WaitForVblankEnd
    547  f266		       ad 84 02 	      LDA	INTIM
    548  f269		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    549  f26b							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    550  f26b		       85 01		      STA	VBLANK
    551  f26d
    552  f26d				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    553  f26d		       85 02		      STA	WSYNC
    554  f26f
    555  f26f		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    556  f271		       85 0d		      STA	PF0	;3
    557  f273
    558  f273		       a5 82		      LDA	PF1Cache	;3
    559  f275		       85 0e		      STA	PF1	;3
    560  f277
    561  f277		       a5 83		      LDA	PF2Cache	;3
    562  f279		       85 0f		      STA	PF2	;3
    563  f27b
    564  f27b							;39
    565  f27b				   DrawScore
    566  f27b		       a6 d0		      LDX	ScoreD0	; 4
    567  f27d		       bd 00 fd 	      LDA	Font,X	;4
    568  f280		       85 81		      STA	PF0Cache	;3
    569  f282		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    570  f284							;17
    571  f284
    572  f284		       a6 d1		      LDX	ScoreD1	; 4
    573  f286		       bd 00 fd 	      LDA	Font,X	;4
    574  f289		       0a		      ASL		;2
    575  f28a		       0a		      ASL		;2
    576  f28b		       0a		      ASL		;2
    577  f28c		       0a		      ASL		;2
    578  f28d		       85 82		      STA	PF1Cache	;3
    579  f28f		       c6 d1		      DEC	ScoreD1	;6
    580  f291							;9 (After Wsync)
    581  f291
    582  f291		       a6 d2		      LDX	ScoreD2	; 4
    583  f293		       bd 00 fd 	      LDA	Font,X	;4
    584  f296		       29 0f		      AND	#%00001111
    585  f298		       05 82		      ORA	PF1Cache	;3
    586  f29a		       85 82		      STA	PF1Cache	;3
    587  f29c		       c6 d2		      DEC	ScoreD2	;6
    588  f29e							;20
    589  f29e
    590  f29e		       a6 d3		      LDX	ScoreD3	; 3
    591  f2a0		       bd 00 fd 	      LDA	Font,X	;4
    592  f2a3		       4a		      LSR		;2
    593  f2a4		       4a		      LSR		;2
    594  f2a5		       4a		      LSR		;2
    595  f2a6		       4a		      LSR		;2
    596  f2a7		       85 83		      STA	PF2Cache	;3
    597  f2a9		       c6 d3		      DEC	ScoreD3	;5
    598  f2ab							;23
    599  f2ab
    600  f2ab		       a6 d4		      LDX	ScoreD4	; 3
    601  f2ad		       bd 00 fd 	      LDA	Font,X	;4
    602  f2b0		       29 f0		      AND	#%11110000
    603  f2b2		       05 83		      ORA	PF2Cache	;3
    604  f2b4		       85 83		      STA	PF2Cache	;3
    605  f2b6		       c6 d4		      DEC	ScoreD4	;5
    606  f2b8							;18
    607  f2b8
    608  f2b8		       88		      DEY		;2
    609  f2b9		       10 b2		      BPL	ScoreLoop	;4
    610  f2bb
    611  f2bb		       85 02		      STA	WSYNC
    612  f2bd
    613  f2bd		       20 95 f4 	      JSR	LoadAll
    614  f2c0
    615  f2c0		       85 02		      STA	WSYNC
    616  f2c2		       85 02		      STA	WSYNC
    617  f2c4
    618  f2c4				   PrepareForTraffic
    619  f2c4		       20 86 f4 	      JSR	ClearPF	; 32
    620  f2c7
    621  f2c7		       a9 31		      LDA	#%00110001	; Score mode
    622  f2c9		       85 0a		      STA	CTRLPF
    623  f2cb
    624  f2cb		       a5 c3		      LDA	TrafficColor	;2
    625  f2cd		       85 08		      STA	COLUPF
    626  f2cf
    627  f2cf		       a9 a4		      LDA	#PLAYER1_COLOR	;2
    628  f2d1		       85 07		      STA	COLUP1	;3
    629  f2d3
    630  f2d3		       a9 f9		      LDA	#PLAYER0_COLOR	;2
    631  f2d5		       85 06		      STA	COLUP0	;3
    632  f2d7
    633  f2d7		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    634  f2d9
    635  f2d9		       a9 03		      LDA	#BACKGROUND_COLOR	;2 
      0  f2db					      SLEEP	12	; Make it in the very end, so we have one more nice blue line
      1  f2db				   .CYCLES    SET	12
      2  f2db
      3  f2db				  -	      IF	.CYCLES < 2
      4  f2db				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2db				  -	      ERR
      6  f2db					      ENDIF
      7  f2db
      8  f2db				  -	      IF	.CYCLES & 1
      9  f2db				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2db				  -	      nop	0
     11  f2db				  -	      ELSE
     12  f2db				  -	      bit	VSYNC
     13  f2db				  -	      ENDIF
     14  f2db				  -.CYCLES    SET	.CYCLES - 3
     15  f2db					      ENDIF
     16  f2db
     17  f2db					      REPEAT	.CYCLES / 2
     18  f2db		       ea		      nop
     17  f2db					      REPEND
     18  f2dc		       ea		      nop
     17  f2dc					      REPEND
     18  f2dd		       ea		      nop
     17  f2dd					      REPEND
     18  f2de		       ea		      nop
     17  f2de					      REPEND
     18  f2df		       ea		      nop
     17  f2df					      REPEND
     18  f2e0		       ea		      nop
     19  f2e1					      REPEND
    637  f2e1		       85 09		      STA	COLUBK	;3
    638  f2e3
    639  f2e3
    640  f2e3							;main scanline loop...
    641  f2e3				   ScanLoop
    642  f2e3		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    643  f2e5
    644  f2e5							;Start of next line!			
    645  f2e5				   DrawCache		;36 Is the last line going to the top of the next frame?
    646  f2e5
    647  f2e5		       b9 00 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    648  f2e8		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    649  f2ea
    650  f2ea		       a5 82		      LDA	PF1Cache	;3
    651  f2ec		       85 0e		      STA	PF1	;3
    652  f2ee
    653  f2ee		       a5 84		      LDA	GRP1Cache	;3
    654  f2f0		       85 1c		      STA	GRP1	;3
    655  f2f2
    656  f2f2		       a5 85		      LDA	ENABLCache
    657  f2f4		       85 1f		      STA	ENABL
    658  f2f6
    659  f2f6		       a5 86		      LDA	ENAM0Cache
    660  f2f8		       85 1d		      STA	ENAM0
    661  f2fa
    662  f2fa		       a5 87		      LDA	ENAM1Cache
    663  f2fc		       85 1e		      STA	ENAM1
    664  f2fe
    665  f2fe		       a9 00		      LDA	#0	;2
    666  f300		       85 82		      STA	PF1Cache	;3
    667  f302		       85 84		      STA	GRP1Cache	;3
    668  f304		       85 85		      STA	ENABLCache	;3
    669  f306		       85 86		      STA	ENAM0Cache	;3
    670  f308		       85 87		      STA	ENAM1Cache	; 3
    671  f30a
    672  f30a							;BEQ DrawTraffic3
    673  f30a				   DrawTraffic1 		; 33
    674  f30a		       98		      TYA		; 2
    675  f30b		       18		      CLC		; 2 
    676  f30c		       65 95		      ADC	TrafficOffset1 + 1	;3
    677  f30e		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    678  f310		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    679  f312		       45 96		      EOR	TrafficOffset1 + 2	; 3
    680  f314		       4c 19 f3 	      JMP	AfterEorOffsetWithCarry	; 3
    681  f317				   EorOffsetWithCarry
    682  f317		       45 97		      EOR	TrafficOffset1 + 3	; 3
    683  f319				   AfterEorOffsetWithCarry		;17
    684  f319		       aa		      TAX		;2
    685  f31a		       bd 00 fe 	      LDA	AesTable,X	; 4
    686  f31d		       c5 c1		      CMP	TrafficChance	;3
    687  f31f		       b0 04		      BCS	FinishDrawTraffic1	; 2
    688  f321		       a9 ff		      LDA	#$FF	;2
    689  f323		       85 84		      STA	GRP1Cache	;3
    690  f325				   FinishDrawTraffic1
    691  f325
    692  f325				   DrawTraffic2 		; 35
    693  f325		       98		      TYA		; 2
    694  f326		       18		      CLC		; 2 
    695  f327		       65 99		      ADC	TrafficOffset2 + 1	;3
    696  f329		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    697  f32b		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    698  f32d		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    699  f32f		       4c 34 f3 	      JMP	AfterEorOffsetWithCarry2	; 3
    700  f332				   EorOffsetWithCarry2
    701  f332		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    702  f334				   AfterEorOffsetWithCarry2		;17
    703  f334		       aa		      TAX		;2
    704  f335		       bd 00 fe 	      LDA	AesTable,X	; 4
    705  f338		       c5 c1		      CMP	TrafficChance	;2
    706  f33a		       b0 04		      BCS	FinishDrawTraffic2	; 2
    707  f33c		       a9 02		      LDA	#%00000010	;2
    708  f33e		       85 85		      STA	ENABLCache	;3
    709  f340				   FinishDrawTraffic2
    710  f340
    711  f340							;STA WSYNC ;65 / 137
    712  f340
    713  f340							; LDA Tmp0 ; Flicker this line if drawing car
    714  f340							; BEQ FinishDrawTraffic4
    715  f340				   DrawTraffic3 		; 38
    716  f340		       98		      TYA		; 2
    717  f341		       18		      CLC		; 2 
    718  f342		       65 9d		      ADC	TrafficOffset3 + 1	;3
    719  f344		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    720  f346		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    721  f348		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    722  f34a		       4c 4f f3 	      JMP	AfterEorOffsetWithCarry3	; 3
    723  f34d				   EorOffsetWithCarry3
    724  f34d		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    725  f34f				   AfterEorOffsetWithCarry3		;17
    726  f34f		       aa		      TAX		;2
    727  f350		       bd 00 fe 	      LDA	AesTable,X	; 4
    728  f353		       c5 c1		      CMP	TrafficChance	;2
    729  f355		       b0 04		      BCS	FinishDrawTraffic3	; 2 
    730  f357		       a9 02		      LDA	#%00000010	;2
    731  f359		       85 86		      STA	ENAM0Cache
    732  f35b				   FinishDrawTraffic3
    733  f35b
    734  f35b				   DrawTraffic4 		; 35
    735  f35b		       98		      TYA		; 2
    736  f35c		       18		      CLC		; 2 
    737  f35d		       65 a1		      ADC	TrafficOffset4 + 1	;3
    738  f35f		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    739  f361		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    740  f363		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    741  f365		       4c 6a f3 	      JMP	AfterEorOffsetWithCarry4	; 3
    742  f368				   EorOffsetWithCarry4
    743  f368		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    744  f36a				   AfterEorOffsetWithCarry4		;17
    745  f36a		       aa		      TAX		;2
    746  f36b		       bd 00 fe 	      LDA	AesTable,X	; 4
    747  f36e		       c5 c1		      CMP	TrafficChance	;2
    748  f370		       b0 04		      BCS	FinishDrawTraffic4	; 2
    749  f372		       a9 02		      LDA	#%00000010	;2
    750  f374		       85 87		      STA	ENAM1Cache
    751  f376				   FinishDrawTraffic4
    752  f376
    753  f376				   DrawTraffic0 		; 24
    754  f376		       98		      TYA		;2
    755  f377		       18		      CLC		;2
    756  f378		       65 91		      ADC	TrafficOffset0 + 1	; 3
    757  f37a		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    758  f37c		       f0 04		      BEQ	SkipDrawTraffic0	; 2
    759  f37e		       a9 ff		      LDA	#$FF	; 2
    760  f380		       85 82		      STA	PF1Cache
    761  f382
    762  f382				   SkipDrawTraffic0
    763  f382
    764  f382				   WhileScanLoop
    765  f382		       88		      DEY		;2
    766  f383		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    767  f385		       4c e3 f2 	      JMP	ScanLoop	;3
    768  f388				   FinishScanLoop		; 7 209 of 222
    769  f388
    770  f388		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    771  f38a		       20 95 f4 	      JSR	LoadAll
    772  f38d		       85 02		      STA	WSYNC	; do stuff!
    773  f38f		       85 02		      STA	WSYNC
    774  f391		       85 02		      STA	WSYNC
    775  f393							;42 cycles to use here
    776  f393
    777  f393				   PrepareOverscan
    778  f393		       a9 02		      LDA	#2
    779  f395		       85 02		      STA	WSYNC
    780  f397		       85 01		      STA	VBLANK
    781  f399
    782  f399		       a9 24		      LDA	#36	; one more line before overscan...
    783  f39b		       8d 96 02 	      STA	TIM64T
    784  f39e
    785  f39e				   ProcessScoreFontColor
    786  f39e		       a6 d6		      LDX	ScoreFontColorHoldChange
    787  f3a0		       f0 06		      BEQ	ResetScoreFontColor
    788  f3a2		       ca		      DEX
    789  f3a3		       86 d6		      STX	ScoreFontColorHoldChange
    790  f3a5		       4c ac f3 	      JMP	SkipScoreFontColor
    791  f3a8				   ResetScoreFontColor
    792  f3a8		       a9 0c		      LDA	#SCORE_FONT_COLOR
    793  f3aa		       85 d5		      STA	ScoreFontColor
    794  f3ac				   SkipScoreFontColor
    795  f3ac
    796  f3ac				   IsGameOver
    797  f3ac		       a5 bc		      LDA	CountdownTimer
    798  f3ae		       05 8e		      ORA	Player0SpeedL
    799  f3b0		       05 8f		      ORA	Player0SpeedH
    800  f3b2		       d0 0b		      BNE	IsCheckpoint
    801  f3b4		       a9 01		      LDA	#1
    802  f3b6		       85 d6		      STA	ScoreFontColorHoldChange
    803  f3b8		       a9 2f		      LDA	#SCORE_FONT_COLOR_OVER
    804  f3ba		       85 d5		      STA	ScoreFontColor
    805  f3bc		       4c ee f3 	      JMP	SkipIsTimeOver
    806  f3bf
    807  f3bf				   IsCheckpoint
    808  f3bf		       a5 d7		      LDA	NextCheckpoint
    809  f3c1		       c5 92		      CMP	TrafficOffset0 + 2
    810  f3c3		       d0 1d		      BNE	SkipIsCheckpoint
    811  f3c5		       18		      CLC
    812  f3c6		       69 10		      ADC	#CHECKPOINT_INTERVAL
    813  f3c8		       85 d7		      STA	NextCheckpoint
    814  f3ca		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    815  f3cc		       85 d5		      STA	ScoreFontColor
    816  f3ce		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    817  f3d0		       85 d6		      STA	ScoreFontColorHoldChange
    818  f3d2		       a5 bc		      LDA	CountdownTimer
    819  f3d4		       18		      CLC
    820  f3d5		       65 c2		      ADC	CheckpointTime
    821  f3d7		       85 bc		      STA	CountdownTimer
    822  f3d9		       90 04		      BCC	JumpSkipTimeOver
    823  f3db		       a9 ff		      LDA	#$FF
    824  f3dd		       85 bc		      STA	CountdownTimer	; Does not overflow!
    825  f3df				   JumpSkipTimeOver
    826  f3df		       4c ee f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    827  f3e2				   SkipIsCheckpoint
    828  f3e2
    829  f3e2				   IsTimeOver
    830  f3e2		       a5 bc		      LDA	CountdownTimer
    831  f3e4		       d0 08		      BNE	SkipIsTimeOver
    832  f3e6		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    833  f3e8		       85 d6		      STA	ScoreFontColorHoldChange
    834  f3ea		       a9 34		      LDA	#SCORE_FONT_COLOR_BAD
    835  f3ec		       85 d5		      STA	ScoreFontColor
    836  f3ee				   SkipIsTimeOver
    837  f3ee
    838  f3ee							;Could be done during on vblank to save this comparisson time (before draw score), 
    839  f3ee							;but I am saving vblank cycles for now, in case of 2 players.
    840  f3ee				   ChooseSide		; 
    841  f3ee		       a5 8c		      LDA	FrameCount0	;3
    842  f3f0		       29 01		      AND	#%00000001	;2
    843  f3f2		       f0 37		      BEQ	RightScoreWrite	; Half of the screen with the correct colors.
    844  f3f4
    845  f3f4				   LeftScoreWrite
    846  f3f4				   WriteDistance		;Not optimized yet, ugly code.
    847  f3f4
    848  f3f4				   Digit0Distance
    849  f3f4		       a5 91		      LDA	TrafficOffset0 + 1	;3
    850  f3f6		       29 f0		      AND	#%11110000	;2
    851  f3f8		       4a		      LSR		; 2
    852  f3f9		       4a		      LSR		; 2
    853  f3fa		       4a		      LSR		; 2
    854  f3fb		       4a		      LSR		; 2
    855  f3fc		       aa		      TAX		; 2
    856  f3fd		       bd 64 fd 	      LDA	FontLookup,X	;4
    857  f400		       85 d3		      STA	ScoreD3	;3
    858  f402
    859  f402				   Digit1Distance
    860  f402		       a5 92		      LDA	TrafficOffset0 + 2	;3
    861  f404		       29 0f		      AND	#%00001111	;2
    862  f406		       aa		      TAX		; 2
    863  f407		       bd 64 fd 	      LDA	FontLookup,X	;4 
    864  f40a		       85 d2		      STA	ScoreD2	;3
    865  f40c
    866  f40c				   Digit2Distance
    867  f40c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    868  f40e		       29 f0		      AND	#%11110000	;2
    869  f410		       4a		      LSR		; 2
    870  f411		       4a		      LSR		; 2
    871  f412		       4a		      LSR		; 2
    872  f413		       4a		      LSR		; 2
    873  f414		       aa		      TAX		; 2
    874  f415		       bd 64 fd 	      LDA	FontLookup,X	;4
    875  f418		       85 d1		      STA	ScoreD1	;3
    876  f41a
    877  f41a				   Digit3Distance
    878  f41a		       a5 bd		      LDA	Traffic0Msb	;3
    879  f41c		       29 0f		      AND	#%00001111	;2
    880  f41e		       aa		      TAX		; 2
    881  f41f		       bd 64 fd 	      LDA	FontLookup,X	;4 
    882  f422		       85 d0		      STA	ScoreD0	;3
    883  f424
    884  f424		       a9 63		      LDA	#<Pipe + #SCORE_SIZE -1	;3
    885  f426		       85 d4		      STA	ScoreD4	;3
    886  f428				   EndDrawDistance
    887  f428		       4c 68 f4 	      JMP	RightScoreWriteEnd	;3
    888  f42b
    889  f42b				   RightScoreWrite
    890  f42b				   Digit0Timer
    891  f42b		       a5 bc		      LDA	CountdownTimer	;3
    892  f42d		       29 0f		      AND	#%00001111	;2
    893  f42f		       aa		      TAX		; 2
    894  f430		       bd 64 fd 	      LDA	FontLookup,X	;4 
    895  f433		       85 d1		      STA	ScoreD1	;3
    896  f435
    897  f435				   Digit1Timer
    898  f435		       a5 bc		      LDA	CountdownTimer	;3
    899  f437		       29 f0		      AND	#%11110000	;2
    900  f439		       4a		      LSR		; 2
    901  f43a		       4a		      LSR		; 2
    902  f43b		       4a		      LSR		; 2
    903  f43c		       4a		      LSR		; 2
    904  f43d		       aa		      TAX		; 2
    905  f43e		       bd 64 fd 	      LDA	FontLookup,X	;4
    906  f441		       85 d0		      STA	ScoreD0	;3
    907  f443
    908  f443		       a9 63		      LDA	#<Pipe + #SCORE_SIZE -1	;3
    909  f445		       85 d2		      STA	ScoreD2	;3
    910  f447
    911  f447				   Digit0Speed
    912  f447		       a5 8e		      LDA	Player0SpeedL
    913  f449		       29 3c		      AND	#%00111100	;2 Discard the last bits
    914  f44b		       4a		      LSR		; 2
    915  f44c		       4a		      LSR		; 2
    916  f44d		       aa		      TAX		; 2
    917  f44e		       bd 64 fd 	      LDA	FontLookup,X	;4
    918  f451		       85 d4		      STA	ScoreD4	;3
    919  f453
    920  f453				   Digit1Speed
    921  f453		       a5 8e		      LDA	Player0SpeedL
    922  f455		       29 c0		      AND	#%11000000	;2 Discard the last bits
    923  f457		       2a		      ROL		;First goes into carry
    924  f458		       2a		      ROL
    925  f459		       2a		      ROL
    926  f45a		       85 b0		      STA	Tmp0
    927  f45c		       a5 8f		      LDA	Player0SpeedH
    928  f45e		       0a		      ASL
    929  f45f		       0a		      ASL
    930  f460		       05 b0		      ORA	Tmp0
    931  f462		       aa		      TAX		; 2
    932  f463		       bd 64 fd 	      LDA	FontLookup,X	;4
    933  f466		       85 d3		      STA	ScoreD3	;3
    934  f468
    935  f468				   RightScoreWriteEnd
    936  f468
    937  f468				   OverScanWait
    938  f468		       ad 84 02 	      LDA	INTIM
    939  f46b		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    940  f46d		       4c ad f0 	      JMP	MainLoop
    941  f470
    942  f470				   Subroutines
    943  f470
    944  f470				   ClearAll		; 56
    945  f470		       a9 00		      LDA	#0	;2
    946  f472		       85 1c		      STA	GRP1	;3
    947  f474		       85 1f		      STA	ENABL	;3
    948  f476		       85 1d		      STA	ENAM0	;3
    949  f478		       85 1e		      STA	ENAM1
    950  f47a		       85 84		      STA	GRP1Cache	;3
    951  f47c		       85 85		      STA	ENABLCache	;3
    952  f47e		       85 86		      STA	ENAM0Cache	;3
    953  f480		       85 87		      STA	ENAM1Cache	;3
    954  f482		       20 88 f4 	      JSR	ClearPFSkipLDA0	; 30
    955  f485		       60		      RTS		;6
    956  f486
    957  f486				   ClearPF		; 26
    958  f486		       a9 00		      LDA	#0	;2
    959  f488				   ClearPFSkipLDA0
    960  f488		       85 0d		      STA	PF0	;3
    961  f48a		       85 0e		      STA	PF1	;3
    962  f48c		       85 0f		      STA	PF2	;3	
    963  f48e		       85 81		      STA	PF0Cache	;3
    964  f490		       85 82		      STA	PF1Cache	;3
    965  f492		       85 83		      STA	PF2Cache	;3 
    966  f494		       60		      RTS		;6
    967  f495
    968  f495				   LoadAll		; 36
    969  f495		       a5 81		      LDA	PF0Cache	;3
    970  f497		       85 0d		      STA	PF0	;3
    971  f499
    972  f499		       a5 82		      LDA	PF1Cache	;3
    973  f49b		       85 0e		      STA	PF1	;3
    974  f49d
    975  f49d		       a5 83		      LDA	PF2Cache	;3
    976  f49f		       85 0f		      STA	PF2	;3
    977  f4a1
    978  f4a1		       a5 84		      LDA	GRP1Cache	;3
    979  f4a3		       85 1c		      STA	GRP1	;3
    980  f4a5
    981  f4a5		       a5 85		      LDA	ENABLCache	;3
    982  f4a7		       85 1f		      STA	ENABL	;3
    983  f4a9
    984  f4a9		       a5 86		      LDA	ENAM0Cache
    985  f4ab		       85 1d		      STA	ENAM0
    986  f4ad
    987  f4ad		       60		      RTS		;6
    988  f4ae
    989  f4ae							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
    990  fd00					      org	$FD00
    991  fd00				   Font
    992  fd00				   C0
    993  fd00		       e7		      .byte.b	#%11100111	;
    994  fd01		       a5		      .byte.b	#%10100101	; 
    995  fd02		       a5		      .byte.b	#%10100101	; 
    996  fd03		       a5		      .byte.b	#%10100101	; 
    997  fd04		       e7		      .byte.b	#%11100111	;	
    998  fd05				   C1
    999  fd05		       e7		      .byte.b	#%11100111	;
   1000  fd06		       42		      .byte.b	#%01000010	; 
   1001  fd07		       42		      .byte.b	#%01000010	; 
   1002  fd08		       42		      .byte.b	#%01000010	; 
   1003  fd09		       66		      .byte.b	#%01100110	;
   1004  fd0a				   C2
   1005  fd0a		       e7		      .byte.b	#%11100111	;
   1006  fd0b		       24		      .byte.b	#%00100100	; 
   1007  fd0c		       e7		      .byte.b	#%11100111	; 
   1008  fd0d		       81		      .byte.b	#%10000001	; 
   1009  fd0e		       e7		      .byte.b	#%11100111	;
   1010  fd0f				   C3
   1011  fd0f		       e7		      .byte.b	#%11100111	;
   1012  fd10		       81		      .byte.b	#%10000001	; 
   1013  fd11		       e7		      .byte.b	#%11100111	; 
   1014  fd12		       81		      .byte.b	#%10000001	; 
   1015  fd13		       e7		      .byte.b	#%11100111	;
   1016  fd14				   C4
   1017  fd14		       81		      .byte.b	#%10000001	;
   1018  fd15		       81		      .byte.b	#%10000001	; 
   1019  fd16		       e7		      .byte.b	#%11100111	; 
   1020  fd17		       a5		      .byte.b	#%10100101	; 
   1021  fd18		       a5		      .byte.b	#%10100101	;
   1022  fd19				   C5
   1023  fd19		       e7		      .byte.b	#%11100111	;
   1024  fd1a		       81		      .byte.b	#%10000001	; 
   1025  fd1b		       e7		      .byte.b	#%11100111	; 
   1026  fd1c		       24		      .byte.b	#%00100100	; 
   1027  fd1d		       e7		      .byte.b	#%11100111	;
   1028  fd1e				   C6
   1029  fd1e		       e7		      .byte.b	#%11100111	;
   1030  fd1f		       a5		      .byte.b	#%10100101	; 
   1031  fd20		       e7		      .byte.b	#%11100111	; 
   1032  fd21		       24		      .byte.b	#%00100100	; 
   1033  fd22		       e7		      .byte.b	#%11100111	;
   1034  fd23				   C7
   1035  fd23		       81		      .byte.b	#%10000001	;
   1036  fd24		       81		      .byte.b	#%10000001	; 
   1037  fd25		       81		      .byte.b	#%10000001	; 
   1038  fd26		       81		      .byte.b	#%10000001	; 
   1039  fd27		       e7		      .byte.b	#%11100111	;
   1040  fd28				   C8
   1041  fd28		       e7		      .byte.b	#%11100111	;
   1042  fd29		       a5		      .byte.b	#%10100101	; 
   1043  fd2a		       e7		      .byte.b	#%11100111	; 
   1044  fd2b		       a5		      .byte.b	#%10100101	; 
   1045  fd2c		       e7		      .byte.b	#%11100111	;
   1046  fd2d				   C9
   1047  fd2d		       e7		      .byte.b	#%11100111	;
   1048  fd2e		       81		      .byte.b	#%10000001	; 
   1049  fd2f		       e7		      .byte.b	#%11100111	; 
   1050  fd30		       a5		      .byte.b	#%10100101	; 
   1051  fd31		       e7		      .byte.b	#%11100111	;
   1052  fd32				   CA
   1053  fd32		       a5		      .byte.b	#%10100101	;
   1054  fd33		       a5		      .byte.b	#%10100101	; 
   1055  fd34		       e7		      .byte.b	#%11100111	; 
   1056  fd35		       a5		      .byte.b	#%10100101	; 
   1057  fd36		       e7		      .byte.b	#%11100111	;
   1058  fd37				   CB
   1059  fd37		       66		      .byte.b	#%01100110	;
   1060  fd38		       a5		      .byte.b	#%10100101	; 
   1061  fd39		       66		      .byte.b	#%01100110	; 
   1062  fd3a		       a5		      .byte.b	#%10100101	;
   1063  fd3b		       66		      .byte.b	#%01100110	;
   1064  fd3c				   CC
   1065  fd3c		       e7		      .byte.b	#%11100111	;
   1066  fd3d		       24		      .byte.b	#%00100100	; 
   1067  fd3e		       24		      .byte.b	#%00100100	; 
   1068  fd3f		       24		      .byte.b	#%00100100	;
   1069  fd40		       e7		      .byte.b	#%11100111	;
   1070  fd41
   1071  fd41				   CD
   1072  fd41		       66		      .byte.b	#%01100110	;
   1073  fd42		       a5		      .byte.b	#%10100101	; 
   1074  fd43		       a5		      .byte.b	#%10100101	; 
   1075  fd44		       a5		      .byte.b	#%10100101	;
   1076  fd45		       66		      .byte.b	#%01100110	;
   1077  fd46
   1078  fd46				   CE
   1079  fd46		       e7		      .byte.b	#%11100111	;
   1080  fd47		       24		      .byte.b	#%00100100	; 
   1081  fd48		       e7		      .byte.b	#%11100111	; 
   1082  fd49		       24		      .byte.b	#%00100100	; 
   1083  fd4a		       e7		      .byte.b	#%11100111	;
   1084  fd4b
   1085  fd4b				   CF
   1086  fd4b		       24		      .byte.b	#%00100100	;
   1087  fd4c		       24		      .byte.b	#%00100100	; 
   1088  fd4d		       e7		      .byte.b	#%11100111	; 
   1089  fd4e		       24		      .byte.b	#%00100100	; 
   1090  fd4f		       e7		      .byte.b	#%11100111	;
   1091  fd50
   1092  fd50				   Space		; Moved from the beggining so 0 to F is fast to draw.
   1093  fd50		       00		      .byte.b	%0	;
   1094  fd51		       00		      .byte.b	#0	;
   1095  fd52		       00		      .byte.b	#0	;
   1096  fd53		       00		      .byte.b	#0	;
   1097  fd54		       00		      .byte.b	#0	;
   1098  fd55
   1099  fd55				   CS
   1100  fd55		       66		      .byte.b	#%01100110	;
   1101  fd56		       81		      .byte.b	#%10000001	; 
   1102  fd57		       42		      .byte.b	#%01000010	; 
   1103  fd58		       24		      .byte.b	#%00100100	; 
   1104  fd59		       c3		      .byte.b	#%11000011	;
   1105  fd5a
   1106  fd5a				   CT
   1107  fd5a		       42		      .byte.b	#%01000010	;
   1108  fd5b		       42		      .byte.b	#%01000010	; 
   1109  fd5c		       42		      .byte.b	#%01000010	; 
   1110  fd5d		       42		      .byte.b	#%01000010	; 
   1111  fd5e		       e7		      .byte.b	#%11100111	;
   1112  fd5f
   1113  fd5f				   Pipe
   1114  fd5f		       42		      .byte.b	#%01000010	;
   1115  fd60		       00		      .byte.b	#%00000000	; 
   1116  fd61		       42		      .byte.b	#%01000010	; 
   1117  fd62		       00		      .byte.b	#%00000000	; 
   1118  fd63		       42		      .byte.b	#%01000010	;
   1119  fd64
   1120  fd64				   FontLookup		; Very fast font lookup for dynamic values!
   1121  fd64		       04		      .byte.b	#<C0 + #SCORE_SIZE -1
   1122  fd65		       09		      .byte.b	#<C1 + #SCORE_SIZE -1
   1123  fd66		       0e		      .byte.b	#<C2 + #SCORE_SIZE -1
   1124  fd67		       13		      .byte.b	#<C3 + #SCORE_SIZE -1
   1125  fd68		       18		      .byte.b	#<C4 + #SCORE_SIZE -1
   1126  fd69		       1d		      .byte.b	#<C5 + #SCORE_SIZE -1
   1127  fd6a		       22		      .byte.b	#<C6 + #SCORE_SIZE -1
   1128  fd6b		       27		      .byte.b	#<C7 + #SCORE_SIZE -1
   1129  fd6c		       2c		      .byte.b	#<C8 + #SCORE_SIZE -1
   1130  fd6d		       31		      .byte.b	#<C9 + #SCORE_SIZE -1
   1131  fd6e		       36		      .byte.b	#<CA + #SCORE_SIZE -1
   1132  fd6f		       3b		      .byte.b	#<CB + #SCORE_SIZE -1
   1133  fd70		       40		      .byte.b	#<CC + #SCORE_SIZE -1
   1134  fd71		       45		      .byte.b	#<CD + #SCORE_SIZE -1
   1135  fd72		       4a		      .byte.b	#<CE + #SCORE_SIZE -1
   1136  fd73		       4f		      .byte.b	#<CF + #SCORE_SIZE -1
   1137  fd74
   1138  fd74
   1139  fe00					      org	$FE00
   1140  fe00				   AesTable
   1141  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   1142  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   1143  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   1144  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   1145  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   1146  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   1147  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   1148  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   1149  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   1150  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   1151  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   1152  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   1153  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   1154  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   1155  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   1156  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   1157  ff00
   1158  ff00							; From FF00 to FFFB (122 bytes) to use here
   1159  ff00
   1160  ff00				   CarSprite		; Upside down
   1161  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   1162  ff01		       7e		      .byte.b	#%01111110
   1163  ff02		       24		      .byte.b	#%00100100
   1164  ff03		       bd		      .byte.b	#%10111101
   1165  ff04		       3c		      .byte.b	#%00111100
   1166  ff05		       bd		      .byte.b	#%10111101
   1167  ff06		       3c		      .byte.b	#%00111100
   1168  ff07		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
   1169  ff39
   1170  ff39
   1171  ff39				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
   1172  ff39		       00		      .byte.b	#$00	;  Trafic0 L
   1173  ff3a		       00		      .byte.b	#$00	;  Trafic0 H
   1174  ff3b		       0a		      .byte.b	#$0A	;  Trafic1 L
   1175  ff3c		       01		      .byte.b	#$01	;  Trafic1 H
   1176  ff3d		       e6		      .byte.b	#$E6	;  Trafic2 L
   1177  ff3e		       00		      .byte.b	#$00	;  Trafic2 H
   1178  ff3f		       c2		      .byte.b	#$C2	;  Trafic3 L
   1179  ff40		       00		      .byte.b	#$00	;  Trafic3 H
   1180  ff41		       9e		      .byte.b	#$9E	;  Trafic4 L
   1181  ff42		       00		      .byte.b	#$00	;  Trafic4 H
   1182  ff43
   1183  ff43
   1184  fffc					      org	$FFFC
   1185  fffc		       04 f0		      .word.w	Start
   1186  fffe		       04 f0		      .word.w	Start
