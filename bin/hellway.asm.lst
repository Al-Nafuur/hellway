------- FILE hellway.asm LEVEL 1 PASS 3
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 0a	   BREAK_SPEED =	10
     26  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     28  f000
     29  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     30  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     31  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     32  f000
     33  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     34  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     35  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     36  f000
     37  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     38  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     39  f000		       00 f4	   TRAFFIC_COLOR_INTENSE =	$F4
     40  f000
     41  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     42  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     43  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     44  f000
     45  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     46  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     47  f000
     48  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     49  f000
     50  f000		       00 96	   PLAYER1_COLOR =	$96
     51  f000
     52  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     53  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     54  f000		       00 33	   SCORE_FONT_COLOR_BAD =	$33
     55  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     56  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     57  f000
     58  f000		       00 35	   PLAYER_0_X_START =	$35	;
     59  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     60  f000
     61  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     62  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     63  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     64  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	%00000111	; Every 8 frames
     65  f000
     66  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     67  f000
     68  f000		       00 00	   BLACK      =	$00	;
     69  f000
     70  f000		       00 0f	   MAX_GAME_MODE =	15
     71  f000
     72  f000		       00 08	   PARALLAX_SIZE =	8
     73  f000
     74  f000		       00 05	   HALF_TEXT_SIZE =	5
     75  f000
     76  f000		       00 80	   GRP0Cache  =	$80
     77  f000		       00 81	   PF0Cache   =	$81
     78  f000		       00 82	   PF1Cache   =	$82
     79  f000		       00 83	   PF2Cache   =	$83
     80  f000		       00 84	   GRP1Cache  =	$84
     81  f000		       00 85	   ENABLCache =	$85
     82  f000		       00 86	   ENAM0Cache =	$86
     83  f000		       00 87	   ENAM1Cache =	$87
     84  f000
     85  f000		       00 88	   ParallaxMode =	$88
     86  f000
     87  f000		       00 8c	   FrameCount0 =	$8C	;
     88  f000		       00 8d	   FrameCount1 =	$8D	;
     89  f000
     90  f000		       00 8e	   Player0SpeedL =	$8E
     91  f000		       00 8f	   Player0SpeedH =	$8F
     92  f000
     93  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     94  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     95  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     96  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     97  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     98  f000
     99  f000							;Temporary variables, multiple uses
    100  f000		       00 b0	   Tmp0       =	$B0
    101  f000		       00 b1	   Tmp1       =	$B1
    102  f000		       00 b2	   Tmp2       =	$B2
    103  f000		       00 b3	   Tmp3       =	$B3
    104  f000
    105  f000		       00 ba	   CollisionCounter =	$BA
    106  f000		       00 bb	   Player0X   =	$BB
    107  f000		       00 bc	   CountdownTimer =	$BC
    108  f000		       00 bd	   Traffic0Msb =	$BD
    109  f000		       00 be	   SwitchDebounceCounter =	$BE
    110  f000
    111  f000
    112  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    113  f000		       00 c1	   TrafficChance =	$C1
    114  f000		       00 c2	   CheckpointTime =	$C2
    115  f000		       00 c3	   TrafficColor =	$C3
    116  f000		       00 c4	   CurrentDifficulty =	$C4
    117  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    118  f000
    119  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    120  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    121  f000
    122  f000		       0c 10	   BorderType =	$C10
    123  f000
    124  f000		       00 d0	   ScoreD0    =	$D0
    125  f000		       00 d1	   ScoreD1    =	$D1
    126  f000		       00 d2	   ScoreD2    =	$D2
    127  f000		       00 d3	   ScoreD3    =	$D3
    128  f000		       00 d4	   ScoreD4    =	$D4
    129  f000		       00 d5	   ScoreFontColor =	$D5
    130  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    131  f000		       00 d7	   NextCheckpoint =	$D7
    132  f000
    133  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    134  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    135  f000
    136  f000
    137  f000							;generic start up stuff, put zero in all...
    138  f000				   BeforeStart		;All variables that are kept on game reset or select
    139  f000		       a0 00		      LDY	#0
    140  f002		       84 be		      STY	SwitchDebounceCounter
    141  f004		       84 c5		      STY	GameMode
    142  f006		       a0 e0		      LDY	#%11100000	; Default Parallax
    143  f008		       84 88		      STY	ParallaxMode
    144  f00a
    145  f00a				   Start
    146  f00a		       78		      SEI
    147  f00b		       d8		      CLD
    148  f00c		       a2 ff		      LDX	#$FF
    149  f00e		       9a		      TXS
    150  f00f		       a9 00		      LDA	#0
    151  f011				   ClearMem
    152  f011		       e0 be		      CPX	#SwitchDebounceCounter
    153  f013		       f0 0a		      BEQ	SkipClean
    154  f015		       e0 c5		      CPX	#GameMode
    155  f017		       f0 06		      BEQ	SkipClean
    156  f019		       e0 88		      CPX	#ParallaxMode
    157  f01b		       f0 02		      BEQ	SkipClean
    158  f01d		       95 00		      STA	0,X
    159  f01f				   SkipClean
    160  f01f		       ca		      DEX
    161  f020		       d0 ef		      BNE	ClearMem
    162  f022
    163  f022							;Setting some variables...
    164  f022
    165  f022
    166  f022				   SettingTrafficOffsets		; Time sensitive with player H position
    167  f022		       85 02		      STA	WSYNC	;We will set player position
    168  f024		       20 f2 f6 	      JSR	DefaultOffsets
    169  f027
    170  f027		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    171  f02a		       85 8e		      STA	Player0SpeedL
    172  f02c
      0  f02c					      SLEEP	11	;18
      1  f02c				   .CYCLES    SET	11
      2  f02c
      3  f02c				  -	      IF	.CYCLES < 2
      4  f02c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f02c				  -	      ERR
      6  f02c					      ENDIF
      7  f02c
      8  f02c					      IF	.CYCLES & 1
      9  f02c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f02c				  -	      nop	0
     11  f02c					      ELSE
     12  f02c		       24 00		      bit	VSYNC
     13  f02e					      ENDIF
     14  f02e				   .CYCLES    SET	.CYCLES - 3
     15  f02e					      ENDIF
     16  f02e
     17  f02e					      REPEAT	.CYCLES / 2
     18  f02e		       ea		      nop
     17  f02e					      REPEND
     18  f02f		       ea		      nop
     17  f02f					      REPEND
     18  f030		       ea		      nop
     17  f030					      REPEND
     18  f031		       ea		      nop
     19  f032					      REPEND
    174  f032		       85 10		      STA	RESP0
    175  f034
    176  f034		       a6 00		      LDX	0
    177  f036		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    178  f039		       29 c0		      AND	#%11000000
    179  f03b		       f0 0b		      BEQ	CallConfigureDifficulty
    180  f03d		       e8		      INX
    181  f03e		       c9 80		      CMP	#%10000000
    182  f040		       f0 06		      BEQ	CallConfigureDifficulty
    183  f042		       e8		      INX
    184  f043		       c9 40		      CMP	#%01000000
    185  f045		       f0 01		      BEQ	CallConfigureDifficulty
    186  f047		       e8		      INX
    187  f048
    188  f048				   CallConfigureDifficulty
    189  f048		       86 c4		      STX	CurrentDifficulty
    190  f04a		       20 aa f6 	      JSR	ConfigureDifficulty
    191  f04d
    192  f04d				   HPositioning
    193  f04d		       85 02		      STA	WSYNC
    194  f04f
    195  f04f		       a9 30		      LDA	#%00110000	;2 Missile Size
    196  f051		       85 04		      STA	NUSIZ0	;3
    197  f053		       85 05		      STA	NUSIZ1	;3
    198  f055
    199  f055		       a9 35		      LDA	#PLAYER_0_X_START	;2
    200  f057		       85 bb		      STA	Player0X	;3
    201  f059
    202  f059		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    203  f05b		       85 bc		      STA	CountdownTimer	;3
    204  f05d
    205  f05d		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    206  f05f		       85 d7		      STA	NextCheckpoint
    207  f061
    208  f061		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f063					      SLEEP	11	;
      1  f063				   .CYCLES    SET	11
      2  f063
      3  f063				  -	      IF	.CYCLES < 2
      4  f063				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f063				  -	      ERR
      6  f063					      ENDIF
      7  f063
      8  f063					      IF	.CYCLES & 1
      9  f063				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f063				  -	      nop	0
     11  f063					      ELSE
     12  f063		       24 00		      bit	VSYNC
     13  f065					      ENDIF
     14  f065				   .CYCLES    SET	.CYCLES - 3
     15  f065					      ENDIF
     16  f065
     17  f065					      REPEAT	.CYCLES / 2
     18  f065		       ea		      nop
     17  f065					      REPEND
     18  f066		       ea		      nop
     17  f066					      REPEND
     18  f067		       ea		      nop
     17  f067					      REPEND
     18  f068		       ea		      nop
     19  f069					      REPEND
    210  f069		       85 11		      STA	RESP1
      0  f06b					      SLEEP	2	;
      1  f06b				   .CYCLES    SET	2
      2  f06b
      3  f06b				  -	      IF	.CYCLES < 2
      4  f06b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f06b				  -	      ERR
      6  f06b					      ENDIF
      7  f06b
      8  f06b				  -	      IF	.CYCLES & 1
      9  f06b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f06b				  -	      nop	0
     11  f06b				  -	      ELSE
     12  f06b				  -	      bit	VSYNC
     13  f06b				  -	      ENDIF
     14  f06b				  -.CYCLES    SET	.CYCLES - 3
     15  f06b					      ENDIF
     16  f06b
     17  f06b					      REPEAT	.CYCLES / 2
     18  f06b		       ea		      nop
     19  f06c					      REPEND
    212  f06c		       85 14		      STA	RESBL
      0  f06e					      SLEEP	2	;
      1  f06e				   .CYCLES    SET	2
      2  f06e
      3  f06e				  -	      IF	.CYCLES < 2
      4  f06e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f06e				  -	      ERR
      6  f06e					      ENDIF
      7  f06e
      8  f06e				  -	      IF	.CYCLES & 1
      9  f06e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f06e				  -	      nop	0
     11  f06e				  -	      ELSE
     12  f06e				  -	      bit	VSYNC
     13  f06e				  -	      ENDIF
     14  f06e				  -.CYCLES    SET	.CYCLES - 3
     15  f06e					      ENDIF
     16  f06e
     17  f06e					      REPEAT	.CYCLES / 2
     18  f06e		       ea		      nop
     19  f06f					      REPEND
    214  f06f		       85 12		      STA	RESM0
      0  f071					      SLEEP	2
      1  f071				   .CYCLES    SET	2
      2  f071
      3  f071				  -	      IF	.CYCLES < 2
      4  f071				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f071				  -	      ERR
      6  f071					      ENDIF
      7  f071
      8  f071				  -	      IF	.CYCLES & 1
      9  f071				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f071				  -	      nop	0
     11  f071				  -	      ELSE
     12  f071				  -	      bit	VSYNC
     13  f071				  -	      ENDIF
     14  f071				  -.CYCLES    SET	.CYCLES - 3
     15  f071					      ENDIF
     16  f071
     17  f071					      REPEAT	.CYCLES / 2
     18  f071		       ea		      nop
     19  f072					      REPEND
    216  f072		       85 13		      STA	RESM1
    217  f074
    218  f074		       a9 f0		      LDA	#$F0
    219  f076		       85 24		      STA	HMBL
    220  f078		       85 22		      STA	HMM0
    221  f07a		       85 23		      STA	HMM1
    222  f07c		       85 02		      STA	WSYNC
    223  f07e		       85 2a		      STA	HMOVE
    224  f080		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    225  f082		       85 2b		      STA	HMCLR
    226  f084
    227  f084							;SLEEP 24
    228  f084							;STA HMCLR
    229  f084
    230  f084							;VSYNC time
    231  f084				   MainLoop
    232  f084		       a9 02		      LDA	#2
    233  f086		       85 00		      STA	VSYNC
    234  f088		       85 02		      STA	WSYNC
    235  f08a		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    236  f08c		       85 2a		      STA	HMOVE	;2
    237  f08e							;This must be done after a WSync, otherwise it is impossible to predict the X position
    238  f08e				   DoNotSetPlayerX
    239  f08e
    240  f08e		       85 02		      STA	WSYNC	;3
    241  f090		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    242  f092		       8d 96 02 	      STA	TIM64T	;3	
    243  f095		       a9 00		      LDA	#0	;2
    244  f097		       85 00		      STA	VSYNC	;3	
    245  f099
    246  f099							;Read Fire Button before, will make it start the game for now.
    247  f099				   StartGame
    248  f099		       a5 0c		      LDA	INPT4	;3
    249  f09b		       30 1b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    250  f09d		       a5 c0		      LDA	GameStatus	;3
    251  f09f		       d0 17		      BNE	SkipGameStart
    252  f0a1		       e6 c0		      INC	GameStatus
    253  f0a3		       a9 00		      LDA	#0	;
    254  f0a5		       85 8c		      STA	FrameCount0
    255  f0a7		       85 8d		      STA	FrameCount1
    256  f0a9		       a9 0a		      LDA	#10
    257  f0ab		       85 19		      STA	AUDV0
    258  f0ad		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    259  f0af		       85 d5		      STA	ScoreFontColor
    260  f0b1		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    261  f0b3		       85 d6		      STA	ScoreFontColorHoldChange
    262  f0b5		       4c 34 f1 	      JMP	SkipIncFC1	; Make the worse case stable
    263  f0b8				   SkipGameStart
    264  f0b8
    265  f0b8				   RandomizeGame
    266  f0b8		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    267  f0ba		       d0 30		      BNE	EndRandomizeGame
    268  f0bc		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    269  f0be		       29 02		      AND	#%00000010
    270  f0c0		       f0 27		      BEQ	DeterministicGame
    271  f0c2		       a6 96		      LDX	TrafficOffset1 + 2
    272  f0c4		       bd 00 fe 	      LDA	AesTable,X
    273  f0c7		       45 8c		      EOR	FrameCount0
    274  f0c9		       85 96		      STA	TrafficOffset1 + 2
    275  f0cb		       a6 9a		      LDX	TrafficOffset2 + 2
    276  f0cd		       bd 00 fe 	      LDA	AesTable,X
    277  f0d0		       45 8c		      EOR	FrameCount0
    278  f0d2		       85 9a		      STA	TrafficOffset2 + 2
    279  f0d4		       a6 9e		      LDX	TrafficOffset3 + 2
    280  f0d6		       bd 00 fe 	      LDA	AesTable,X
    281  f0d9		       45 8c		      EOR	FrameCount0
    282  f0db		       85 9e		      STA	TrafficOffset3 + 2
    283  f0dd		       a6 a2		      LDX	TrafficOffset4 + 2
    284  f0df		       bd 00 fe 	      LDA	AesTable,X
    285  f0e2		       45 8c		      EOR	FrameCount0
    286  f0e4		       85 a2		      STA	TrafficOffset4 + 2
    287  f0e6		       4c ec f0 	      JMP	EndRandomizeGame
    288  f0e9
    289  f0e9				   DeterministicGame
    290  f0e9		       20 f2 f6 	      JSR	DefaultOffsets
    291  f0ec
    292  f0ec				   EndRandomizeGame
    293  f0ec
    294  f0ec
    295  f0ec				   ReadSwitches
    296  f0ec		       a6 be		      LDX	SwitchDebounceCounter
    297  f0ee		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    298  f0f0		       a9 01		      LDA	#%00000001
    299  f0f2		       2c 82 02 	      BIT	SWCHB
    300  f0f5		       d0 07		      BNE	SkipReset
    301  f0f7		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    302  f0f9		       85 be		      STA	SwitchDebounceCounter
    303  f0fb		       4c 0a f0 	      JMP	Start
    304  f0fe				   SkipReset
    305  f0fe
    306  f0fe				   GameModeSelect
    307  f0fe		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    308  f100		       d0 27		      BNE	SkipGameSelect
    309  f102		       20 aa f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    310  f105				   ReadDpadParallax
    311  f105		       ad 80 02 	      LDA	SWCHA
    312  f108		       29 f0		      AND	#%11110000
    313  f10a		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    314  f10c		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    315  f10e		       85 88		      STA	ParallaxMode
    316  f110				   ContinueGameSelect
    317  f110		       a9 02		      LDA	#%00000010
    318  f112		       2c 82 02 	      BIT	SWCHB
    319  f115		       d0 12		      BNE	SkipGameSelect
    320  f117		       a6 c5		      LDX	GameMode
    321  f119		       e0 0f		      CPX	#MAX_GAME_MODE
    322  f11b		       f0 04		      BEQ	ResetGameMode
    323  f11d		       e8		      INX
    324  f11e		       4c 23 f1 	      JMP	StoreGameMode
    325  f121				   ResetGameMode
    326  f121		       a2 00		      LDX	#0
    327  f123				   StoreGameMode
    328  f123		       86 c5		      STX	GameMode
    329  f125		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    330  f127		       85 be		      STA	SwitchDebounceCounter
    331  f129				   SkipGameSelect
    332  f129		       4c 2e f1 	      JMP	EndReadSwitches
    333  f12c				   DecrementSwitchDebounceCounter
    334  f12c		       c6 be		      DEC	SwitchDebounceCounter
    335  f12e				   EndReadSwitches
    336  f12e
    337  f12e				   CountFrame
    338  f12e		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    339  f130		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    340  f132		       e6 8d		      INC	FrameCount1	; 5 Still not used
    341  f134				   SkipIncFC1
    342  f134
    343  f134							;Does not update the game if not running
    344  f134		       a5 c0		      LDA	GameStatus	;3
    345  f136		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    346  f138		       4c cb f2 	      JMP	SkipUpdateLogic
    347  f13b				   ContinueWithGameLogic
    348  f13b
    349  f13b				   EverySecond		; 64 frames to be more precise
    350  f13b		       a9 3f		      LDA	#%00111111
    351  f13d		       25 8c		      AND	FrameCount0
    352  f13f		       d0 06		      BNE	SkipEverySecondAction
    353  f141		       c5 bc		      CMP	CountdownTimer
    354  f143		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    355  f145		       c6 bc		      DEC	CountdownTimer
    356  f147				   SkipEverySecondAction
    357  f147
    358  f147
    359  f147				   BreakOnTimeOver		; Uses LDX as the breaking speed
    360  f147		       a2 00		      LDX	#0
    361  f149		       a5 bc		      LDA	CountdownTimer
    362  f14b		       d0 08		      BNE	Break
    363  f14d		       a5 8c		      LDA	FrameCount0
    364  f14f		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    365  f151		       d0 02		      BNE	Break
    366  f153		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    367  f155
    368  f155				   Break
    369  f155		       a9 20		      LDA	#%00100000	;Down in controller
    370  f157		       2c 80 02 	      BIT	SWCHA
    371  f15a		       d0 0b		      BNE	BreakNonZero
    372  f15c		       a5 0c		      LDA	INPT4	;3
    373  f15e		       10 05		      BPL	BreakWhileAccelerating
    374  f160		       a2 0a		      LDX	#BREAK_SPEED
    375  f162		       4c 67 f1 	      JMP	BreakNonZero
    376  f165				   BreakWhileAccelerating		; Allow better control while breaking.
    377  f165		       a2 05		      LDX	#BREAK_SPEED / 2
    378  f167
    379  f167				   BreakNonZero
    380  f167		       e0 00		      CPX	#0
    381  f169		       f0 2b		      BEQ	SkipBreak
    382  f16b		       86 b0		      STX	Tmp0
    383  f16d
    384  f16d				   DecreaseSpeed
    385  f16d		       38		      SEC
    386  f16e		       a5 8e		      LDA	Player0SpeedL
    387  f170		       e5 b0		      SBC	Tmp0
    388  f172		       85 8e		      STA	Player0SpeedL
    389  f174		       a5 8f		      LDA	Player0SpeedH
    390  f176		       e9 00		      SBC	#0
    391  f178		       85 8f		      STA	Player0SpeedH
    392  f17a
    393  f17a				   CheckMinSpeed
    394  f17a		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    395  f17c		       c9 00		      CMP	#CAR_MIN_SPEED_H
    396  f17e		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    397  f180		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    398  f182
    399  f182				   CompareLBreakSpeed
    400  f182		       a5 8e		      LDA	Player0SpeedL
    401  f184		       c9 00		      CMP	#CAR_MIN_SPEED_L
    402  f186		       90 03		      BCC	ResetMinSpeed	; Less than memory
    403  f188		       4c 93 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    404  f18b
    405  f18b				   ResetMinSpeed
    406  f18b		       a9 00		      LDA	#CAR_MIN_SPEED_H
    407  f18d		       85 8f		      STA	Player0SpeedH
    408  f18f		       a9 00		      LDA	#CAR_MIN_SPEED_L
    409  f191		       85 8e		      STA	Player0SpeedL
    410  f193
    411  f193				   SkipAccelerateIfBreaking
    412  f193		       4c c6 f1 	      JMP	SkipAccelerate
    413  f196				   SkipBreak
    414  f196
    415  f196				   Acelerates
    416  f196		       a5 bc		      LDA	CountdownTimer
    417  f198		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    418  f19a		       a5 0c		      LDA	INPT4	;3
    419  f19c		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    420  f19e		       a9 10		      LDA	#%00010000	;UP in controller
    421  f1a0		       2c 80 02 	      BIT	SWCHA
    422  f1a3		       d0 21		      BNE	SkipAccelerate
    423  f1a5
    424  f1a5				   IncreaseCarSpeed
    425  f1a5							;Adds speed
    426  f1a5		       18		      CLC
    427  f1a6		       a5 8e		      LDA	Player0SpeedL
    428  f1a8		       69 01		      ADC	#ACCELERATE_SPEED
    429  f1aa		       85 8e		      STA	Player0SpeedL
    430  f1ac		       a5 8f		      LDA	Player0SpeedH
    431  f1ae		       69 00		      ADC	#0
    432  f1b0		       85 8f		      STA	Player0SpeedH
    433  f1b2
    434  f1b2				   CheckIfAlreadyMaxSpeed
    435  f1b2		       c9 02		      CMP	#CAR_MAX_SPEED_H
    436  f1b4		       90 10		      BCC	SkipAccelerate	; less than my max speed
    437  f1b6		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    438  f1b8							;High bit is max, compare the low
    439  f1b8		       a5 8e		      LDA	Player0SpeedL
    440  f1ba		       c9 80		      CMP	#CAR_MAX_SPEED_L
    441  f1bc		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    442  f1be							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    443  f1be
    444  f1be				   ResetToMaxSpeed		; Speed is more, or is already max
    445  f1be		       a9 02		      LDA	#CAR_MAX_SPEED_H
    446  f1c0		       85 8f		      STA	Player0SpeedH
    447  f1c2		       a9 80		      LDA	#CAR_MAX_SPEED_L
    448  f1c4		       85 8e		      STA	Player0SpeedL
    449  f1c6				   SkipAccelerate
    450  f1c6
    451  f1c6				   InitUpdateOffsets
    452  f1c6		       a2 00		      LDX	#0	; Memory Offset 24 bit
    453  f1c8		       a0 00		      LDY	#0	; Line Speeds 16 bits
    454  f1ca		       a5 c5		      LDA	GameMode
    455  f1cc		       29 04		      AND	#%00000100	; GameModes with high delta
    456  f1ce		       f0 02		      BEQ	UpdateOffsets
    457  f1d0		       a4 0a		      LDY	TrafficSpeedsHighDelta - TrafficSpeeds
    458  f1d2
    459  f1d2				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    460  f1d2		       38		      SEC
    461  f1d3		       a5 8e		      LDA	Player0SpeedL
    462  f1d5		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    463  f1d8		       85 b0		      STA	Tmp0
    464  f1da		       c8		      INY
    465  f1db		       a5 8f		      LDA	Player0SpeedH
    466  f1dd		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    467  f1e0		       85 b1		      STA	Tmp1
    468  f1e2		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    469  f1e4		       e9 00		      SBC	#0
    470  f1e6		       85 b2		      STA	Tmp2
    471  f1e8
    472  f1e8				   AddsTheResult
    473  f1e8		       18		      CLC
    474  f1e9		       a5 b0		      LDA	Tmp0
    475  f1eb		       75 90		      ADC	TrafficOffset0,X
    476  f1ed		       95 90		      STA	TrafficOffset0,X
    477  f1ef		       e8		      INX
    478  f1f0		       a5 b1		      LDA	Tmp1
    479  f1f2		       75 90		      ADC	TrafficOffset0,X
    480  f1f4		       95 90		      STA	TrafficOffset0,X
    481  f1f6		       e8		      INX
    482  f1f7		       a5 b2		      LDA	Tmp2	; Carry
    483  f1f9		       75 90		      ADC	TrafficOffset0,X
    484  f1fb		       95 90		      STA	TrafficOffset0,X
    485  f1fd		       90 06		      BCC	CalculateOffsetCache
    486  f1ff		       e0 02		      CPX	#2	;MSB offset 0
    487  f201		       d0 02		      BNE	CalculateOffsetCache
    488  f203		       e6 bd		      INC	Traffic0Msb
    489  f205
    490  f205				   CalculateOffsetCache
    491  f205		       e8		      INX
    492  f206		       38		      SEC
    493  f207		       69 00		      ADC	#0	;Increment by one
    494  f209		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    495  f20b
    496  f20b				   PrepareNextUpdateLoop
    497  f20b		       c8		      INY
    498  f20c		       e8		      INX
    499  f20d		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    500  f20f		       d0 c1		      BNE	UpdateOffsets
    501  f211
    502  f211
    503  f211							;Until store the movemnt, LDX contains the value to be stored.
    504  f211				   TestCollision		;
    505  f211							; see if player0 colides with the rest
    506  f211		       a5 00		      LDA	CXM0P
    507  f213		       05 01		      ORA	CXM1P
    508  f215		       05 01		      ORA	CXM1P
    509  f217		       05 02		      ORA	CXP0FB
    510  f219		       05 07		      ORA	CXPPMM
    511  f21b		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    512  f21d		       f0 23		      BEQ	NoCollision	;skip if not hitting...
    513  f21f		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    514  f221		       d0 1f		      BNE	NoCollision
    515  f223		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    516  f225		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    517  f227		       f0 19		      BEQ	NoCollision
    518  f229		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    519  f22b		       f0 15		      BEQ	NoCollision
    520  f22d		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    521  f22f		       85 ba		      STA	CollisionCounter	;and store as colision.
    522  f231		       a9 10		      LDA	#COLLISION_SPEED_L	;
    523  f233		       c5 8e		      CMP	Player0SpeedL
    524  f235		       b0 02		      BCS	SkipSetColisionSpeed
    525  f237		       85 8e		      STA	Player0SpeedL
    526  f239				   SkipSetColisionSpeed
    527  f239		       a9 00		      LDA	#0
    528  f23b		       85 8f		      STA	Player0SpeedH
    529  f23d		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    530  f23f		       4c 7f f2 	      JMP	StoreHMove	; We keep position consistent
    531  f242				   NoCollision
    532  f242
    533  f242				   DecrementCollision
    534  f242		       a4 ba		      LDY	CollisionCounter
    535  f244		       f0 07		      BEQ	FinishDecrementCollision
    536  f246		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    537  f248		       85 04		      STA	NUSIZ0
    538  f24a		       88		      DEY
    539  f24b		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    540  f24d				   FinishDecrementCollision
    541  f24d
    542  f24d				   ResetPlayerSize
    543  f24d		       d0 04		      BNE	FinishResetPlayerSize
    544  f24f		       a9 30		      LDA	#%00110000
    545  f251		       85 04		      STA	NUSIZ0	;
    546  f253				   FinishResetPlayerSize
    547  f253
    548  f253				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    549  f253		       c0 01		      CPY	#1	; Last frame before reset
    550  f255		       d0 05		      BNE	SkipResetPlayerPosition
    551  f257		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    552  f259		       4c 7f f2 	      JMP	StoreHMove
    553  f25c				   SkipResetPlayerPosition
    554  f25c
    555  f25c							; for left and right, we're gonna 
    556  f25c							; set the horizontal speed, and then do
    557  f25c							; a single HMOVE.  We'll use X to hold the
    558  f25c							; horizontal speed, then store it in the 
    559  f25c							; appropriate register
    560  f25c				   PrepareReadXAxis
    561  f25c		       a2 00		      LDX	#0
    562  f25e		       a4 bb		      LDY	Player0X
    563  f260				   BeginReadLeft
    564  f260		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    565  f262		       a9 40		      LDA	#%01000000	;Left
    566  f264		       2c 80 02 	      BIT	SWCHA
    567  f267		       d0 07		      BNE	SkipMoveLeft
    568  f269		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    569  f26b		       c6 bb		      DEC	Player0X
    570  f26d		       4c 7f f2 	      JMP	StoreHMove	; Cannot move left and right...
    571  f270				   SkipMoveLeft
    572  f270				   BeginReadRight
    573  f270		       c0 36		      CPY	#PLAYER_0_MAX_X
    574  f272		       f0 0b		      BEQ	SkipMoveRight	; At max already
    575  f274		       a9 80		      LDA	#%10000000	;Right
    576  f276		       2c 80 02 	      BIT	SWCHA
    577  f279		       d0 04		      BNE	SkipMoveRight
    578  f27b		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    579  f27d		       e6 bb		      INC	Player0X
    580  f27f				   SkipMoveRight
    581  f27f				   StoreHMove
    582  f27f		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    583  f281		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    584  f283
    585  f283				   DividePlayerSpeedBy4
    586  f283		       a5 8f		      LDA	Player0SpeedH
    587  f285		       0a		      ASL
    588  f286		       0a		      ASL
    589  f287		       0a		      ASL
    590  f288		       0a		      ASL
    591  f289		       0a		      ASL
    592  f28a		       0a		      ASL
    593  f28b		       85 b1		      STA	Tmp1
    594  f28d		       a5 8e		      LDA	Player0SpeedL
    595  f28f		       4a		      LSR
    596  f290		       4a		      LSR
    597  f291		       29 3f		      AND	#%00111111
    598  f293		       05 b1		      ORA	Tmp1
    599  f295		       85 b0		      STA	Tmp0	; Division Result
    600  f297
    601  f297				   CalculateParallax1Offset		; 7/8 speed
    602  f297		       38		      SEC
    603  f298		       a5 8e		      LDA	Player0SpeedL
    604  f29a		       e5 b0		      SBC	Tmp0
    605  f29c		       85 b2		      STA	Tmp2
    606  f29e		       a5 8f		      LDA	Player0SpeedH
    607  f2a0		       e9 00		      SBC	#0
    608  f2a2		       85 b3		      STA	Tmp3
    609  f2a4
    610  f2a4		       18		      CLC
    611  f2a5		       a5 c6		      LDA	ParallaxOffset1
    612  f2a7		       65 b2		      ADC	Tmp2
    613  f2a9		       85 c6		      STA	ParallaxOffset1
    614  f2ab		       a5 c7		      LDA	ParallaxOffset1 + 1
    615  f2ad		       65 b3		      ADC	Tmp3
    616  f2af		       85 c7		      STA	ParallaxOffset1 + 1
    617  f2b1
    618  f2b1				   CalculateParallax2Offset		; 6/8 speed
    619  f2b1		       38		      SEC
    620  f2b2		       a5 b2		      LDA	Tmp2
    621  f2b4		       e5 b0		      SBC	Tmp0
    622  f2b6		       85 b2		      STA	Tmp2
    623  f2b8		       a5 b3		      LDA	Tmp3
    624  f2ba		       e9 00		      SBC	#0
    625  f2bc		       85 b3		      STA	Tmp3
    626  f2be
    627  f2be		       18		      CLC
    628  f2bf		       a5 c8		      LDA	ParallaxOffset2
    629  f2c1		       65 b2		      ADC	Tmp2
    630  f2c3		       85 c8		      STA	ParallaxOffset2
    631  f2c5		       a5 c9		      LDA	ParallaxOffset2 + 1
    632  f2c7		       65 b3		      ADC	Tmp3
    633  f2c9		       85 c9		      STA	ParallaxOffset2 + 1
    634  f2cb
    635  f2cb				   SkipUpdateLogic		; Continue here if not paused
    636  f2cb
    637  f2cb				   ProcessBorder		;Can be optimized (probably)
    638  f2cb		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    639  f2cd		       a5 88		      LDA	ParallaxMode
    640  f2cf		       c9 70		      CMP	#%01110000
    641  f2d1		       f0 1a		      BEQ	HorizontalParallaxMode
    642  f2d3		       c9 d0		      CMP	#%11010000
    643  f2d5		       f0 0a		      BEQ	VerticalParallaxMode
    644  f2d7		       c9 b0		      CMP	#%10110000
    645  f2d9		       f0 0c		      BEQ	TachometerMode
    646  f2db
    647  f2db				   DefaultBorderMode
    648  f2db		       20 74 f7 	      JSR	DefaultBorderLoop
    649  f2de		       4c f0 f2 	      JMP	EndProcessingBorder
    650  f2e1				   VerticalParallaxMode
    651  f2e1		       20 e3 f7 	      JSR	VerticalParallaxLoop
    652  f2e4		       4c f0 f2 	      JMP	EndProcessingBorder
    653  f2e7				   TachometerMode
    654  f2e7		       20 8f f7 	      JSR	PrepareTachometerBorderLoop
    655  f2ea		       4c f0 f2 	      JMP	EndProcessingBorder
    656  f2ed				   HorizontalParallaxMode
    657  f2ed		       20 26 f7 	      JSR	HorizontalParallaxLoop
    658  f2f0
    659  f2f0				   EndProcessingBorder
    660  f2f0
    661  f2f0				   ScoreBackgroundColor
    662  f2f0		       a2 00		      LDX	#0
    663  f2f2		       ad 82 02 	      LDA	SWCHB
    664  f2f5		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    665  f2f7		       f0 04		      BEQ	BlackAndWhiteScoreBg
    666  f2f9		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    667  f2fb		       a2 03		      LDX	#BACKGROUND_COLOR
    668  f2fd				   BlackAndWhiteScoreBg
    669  f2fd		       85 b2		      STA	Tmp2	; Score Background
    670  f2ff		       86 b3		      STX	Tmp3	; Traffic Background
    671  f301
    672  f301				   ConfigurePFForScore
    673  f301							;LDA #SCORE_BACKGROUND_COLOR; Done above
    674  f301		       85 09		      STA	COLUBK
    675  f303		       a5 d5		      LDA	ScoreFontColor
    676  f305		       85 08		      STA	COLUPF
    677  f307		       20 5d f6 	      JSR	ClearAll
    678  f30a		       a9 02		      LDA	#%00000010	; Score mode
    679  f30c		       85 0a		      STA	CTRLPF
    680  f30e		       a0 04		      LDY	#FONT_OFFSET
    681  f310		       a2 00		      LDX	#0
    682  f312		       a5 8c		      LDA	FrameCount0	;3
    683  f314		       29 01		      AND	#%00000001	;2
    684  f316		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    685  f318				   LeftScoreOn
    686  f318		       a5 d5		      LDA	ScoreFontColor
    687  f31a		       85 07		      STA	COLUP1
    688  f31c		       a5 b2		      LDA	Tmp2
    689  f31e		       85 06		      STA	COLUP0
    690  f320		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    691  f322		       85 b1		      STA	Tmp1
    692  f324		       4c 33 f3 	      JMP	WaitForVblankEnd
    693  f327				   RightScoreOn
    694  f327		       a5 d5		      LDA	ScoreFontColor
    695  f329		       85 06		      STA	COLUP0
    696  f32b		       a5 b2		      LDA	Tmp2
    697  f32d		       85 07		      STA	COLUP1
    698  f32f		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    699  f331		       85 b1		      STA	Tmp1
    700  f333
    701  f333
    702  f333							; After here we are going to update the screen, No more heavy code
    703  f333				   WaitForVblankEnd
    704  f333		       ad 84 02 	      LDA	INTIM
    705  f336		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    706  f338							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    707  f338		       85 01		      STA	VBLANK
    708  f33a
    709  f33a				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    710  f33a		       85 02		      STA	WSYNC
    711  f33c
    712  f33c		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    713  f33e		       85 0d		      STA	PF0	;3
    714  f340
    715  f340		       a5 82		      LDA	PF1Cache	;3
    716  f342		       85 0e		      STA	PF1	;3
    717  f344
    718  f344		       a5 83		      LDA	PF2Cache	;3
    719  f346		       85 0f		      STA	PF2	;3
    720  f348
    721  f348							;39
    722  f348				   DrawScore
    723  f348		       a6 d0		      LDX	ScoreD0	; 4
    724  f34a		       bd 00 fd 	      LDA	Font,X	;4
    725  f34d		       85 81		      STA	PF0Cache	;3
    726  f34f		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    727  f351							;17
    728  f351
    729  f351		       a6 d1		      LDX	ScoreD1	; 4
    730  f353		       bd 00 fd 	      LDA	Font,X	;4
    731  f356		       0a		      ASL		;2
    732  f357		       0a		      ASL		;2
    733  f358		       0a		      ASL		;2
    734  f359		       0a		      ASL		;2
    735  f35a		       85 82		      STA	PF1Cache	;3
    736  f35c		       c6 d1		      DEC	ScoreD1	;6
    737  f35e							;9 (After Wsync)
    738  f35e
    739  f35e		       a6 d2		      LDX	ScoreD2	; 4
    740  f360		       bd 00 fd 	      LDA	Font,X	;4
    741  f363		       29 0f		      AND	#%00001111
    742  f365		       05 82		      ORA	PF1Cache	;3
    743  f367		       85 82		      STA	PF1Cache	;3
    744  f369		       c6 d2		      DEC	ScoreD2	;6
    745  f36b							;20
    746  f36b
    747  f36b		       a6 d3		      LDX	ScoreD3	; 3
    748  f36d		       bd 00 fd 	      LDA	Font,X	;4
    749  f370		       4a		      LSR		;2
    750  f371		       4a		      LSR		;2
    751  f372		       4a		      LSR		;2
    752  f373		       4a		      LSR		;2
    753  f374		       85 83		      STA	PF2Cache	;3
    754  f376		       c6 d3		      DEC	ScoreD3	;5
    755  f378							;23
    756  f378
    757  f378		       a6 d4		      LDX	ScoreD4	; 3
    758  f37a		       bd 00 fd 	      LDA	Font,X	;4
    759  f37d		       29 f0		      AND	#%11110000
    760  f37f		       05 83		      ORA	PF2Cache	;3
    761  f381		       85 83		      STA	PF2Cache	;3
    762  f383		       c6 d4		      DEC	ScoreD4	;5
    763  f385							;18
    764  f385
    765  f385		       88		      DEY		;2
    766  f386		       10 b2		      BPL	ScoreLoop	;4
    767  f388
    768  f388		       85 02		      STA	WSYNC
    769  f38a
    770  f38a		       20 7e f6 	      JSR	LoadAll
    771  f38d
    772  f38d		       85 02		      STA	WSYNC
    773  f38f		       85 02		      STA	WSYNC
    774  f391
    775  f391				   PrepareForTraffic
    776  f391		       20 6f f6 	      JSR	ClearPF	; 32
    777  f394
    778  f394		       a9 31		      LDA	#%00110001	; Score mode
    779  f396		       85 0a		      STA	CTRLPF
    780  f398
    781  f398		       a5 c3		      LDA	TrafficColor	;2
    782  f39a		       85 08		      STA	COLUPF
    783  f39c
    784  f39c		       a9 96		      LDA	#PLAYER1_COLOR	;2
    785  f39e		       85 07		      STA	COLUP1	;3
    786  f3a0
    787  f3a0		       a5 d5		      LDA	ScoreFontColor	;3
    788  f3a2		       85 06		      STA	COLUP0	;3
    789  f3a4
    790  f3a4		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    791  f3a6
    792  f3a6		       a5 b3		      LDA	Tmp3	;3
    793  f3a8
    794  f3a8		       85 02		      STA	WSYNC
    795  f3aa							;What a wast of cycles, I must place some computation that fits here!
    796  f3aa		       20 23 f7 	      JSR	Sleep16
    797  f3ad		       20 23 f7 	      JSR	Sleep16
    798  f3b0		       20 23 f7 	      JSR	Sleep16
    799  f3b3		       20 23 f7 	      JSR	Sleep16
      0  f3b6					      SLEEP	6	; Make it in the very end, so we have one more nice blue line
      1  f3b6				   .CYCLES    SET	6
      2  f3b6
      3  f3b6				  -	      IF	.CYCLES < 2
      4  f3b6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3b6				  -	      ERR
      6  f3b6					      ENDIF
      7  f3b6
      8  f3b6				  -	      IF	.CYCLES & 1
      9  f3b6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3b6				  -	      nop	0
     11  f3b6				  -	      ELSE
     12  f3b6				  -	      bit	VSYNC
     13  f3b6				  -	      ENDIF
     14  f3b6				  -.CYCLES    SET	.CYCLES - 3
     15  f3b6					      ENDIF
     16  f3b6
     17  f3b6					      REPEAT	.CYCLES / 2
     18  f3b6		       ea		      nop
     17  f3b6					      REPEND
     18  f3b7		       ea		      nop
     17  f3b7					      REPEND
     18  f3b8		       ea		      nop
     19  f3b9					      REPEND
    801  f3b9		       85 09		      STA	COLUBK	;3
    802  f3bb
    803  f3bb							;main scanline loop...
    804  f3bb				   ScanLoop
    805  f3bb		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    806  f3bd
    807  f3bd							;Start of next line!			
    808  f3bd				   DrawCache		;57 Is the last line going to the top of the next frame?
    809  f3bd
    810  f3bd		       a5 81		      LDA	PF0Cache	;3
    811  f3bf		       85 0d		      STA	PF0	;3
    812  f3c1
    813  f3c1		       b9 78 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    814  f3c4		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    815  f3c6
    816  f3c6		       a5 82		      LDA	PF1Cache	;3
    817  f3c8		       85 0e		      STA	PF1	;3
    818  f3ca
    819  f3ca		       a5 84		      LDA	GRP1Cache	;3
    820  f3cc		       85 1c		      STA	GRP1	;3
    821  f3ce
    822  f3ce		       a5 85		      LDA	ENABLCache	;3
    823  f3d0		       85 1f		      STA	ENABL	;3
    824  f3d2
    825  f3d2		       a5 86		      LDA	ENAM0Cache	;3
    826  f3d4		       85 1d		      STA	ENAM0	;3
    827  f3d6
    828  f3d6		       a5 87		      LDA	ENAM1Cache	;3
    829  f3d8		       85 1e		      STA	ENAM1	;3
    830  f3da
    831  f3da		       a9 00		      LDA	#0	;2
    832  f3dc							;STA PF1Cache ;3
    833  f3dc		       85 84		      STA	GRP1Cache	;3
    834  f3de		       85 85		      STA	ENABLCache	;3
    835  f3e0		       85 86		      STA	ENAM0Cache	;3
    836  f3e2		       85 87		      STA	ENAM1Cache	; 3
    837  f3e4
    838  f3e4							;BEQ DrawTraffic3
    839  f3e4				   DrawTraffic1 		; 33
    840  f3e4		       98		      TYA		; 2
    841  f3e5		       18		      CLC		; 2 
    842  f3e6		       65 95		      ADC	TrafficOffset1 + 1	;3
    843  f3e8		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    844  f3ea		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    845  f3ec		       45 96		      EOR	TrafficOffset1 + 2	; 3
    846  f3ee		       4c f3 f3 	      JMP	AfterEorOffsetWithCarry	; 3
    847  f3f1				   EorOffsetWithCarry
    848  f3f1		       45 97		      EOR	TrafficOffset1 + 3	; 3
    849  f3f3				   AfterEorOffsetWithCarry		;17
    850  f3f3		       aa		      TAX		;2
    851  f3f4		       bd 00 fe 	      LDA	AesTable,X	; 4
    852  f3f7		       c5 c1		      CMP	TrafficChance	;3
    853  f3f9		       b0 04		      BCS	FinishDrawTraffic1	; 2
    854  f3fb		       a9 ff		      LDA	#$FF	;2
    855  f3fd		       85 84		      STA	GRP1Cache	;3
    856  f3ff				   FinishDrawTraffic1
    857  f3ff
    858  f3ff				   DrawTraffic2 		; 33
    859  f3ff		       98		      TYA		; 2
    860  f400		       18		      CLC		; 2 
    861  f401		       65 99		      ADC	TrafficOffset2 + 1	;3
    862  f403		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    863  f405		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    864  f407		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    865  f409		       4c 0e f4 	      JMP	AfterEorOffsetWithCarry2	; 3
    866  f40c				   EorOffsetWithCarry2
    867  f40c		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    868  f40e				   AfterEorOffsetWithCarry2		;17
    869  f40e		       aa		      TAX		;2
    870  f40f		       bd 00 fe 	      LDA	AesTable,X	; 4
    871  f412		       c5 c1		      CMP	TrafficChance	;3
    872  f414		       b0 04		      BCS	FinishDrawTraffic2	; 2
    873  f416		       a9 02		      LDA	#%00000010	;2
    874  f418		       85 85		      STA	ENABLCache	;3
    875  f41a				   FinishDrawTraffic2
    876  f41a
    877  f41a							;STA WSYNC ;65 / 137
    878  f41a
    879  f41a							; LDA Tmp0 ; Flicker this line if drawing car
    880  f41a							; BEQ FinishDrawTraffic4
    881  f41a				   DrawTraffic3 		; 33
    882  f41a		       98		      TYA		; 2
    883  f41b		       18		      CLC		; 2 
    884  f41c		       65 9d		      ADC	TrafficOffset3 + 1	;3
    885  f41e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    886  f420		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    887  f422		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    888  f424		       4c 29 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
    889  f427				   EorOffsetWithCarry3
    890  f427		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    891  f429				   AfterEorOffsetWithCarry3		;17
    892  f429		       aa		      TAX		;2
    893  f42a		       bd 00 fe 	      LDA	AesTable,X	; 4
    894  f42d		       c5 c1		      CMP	TrafficChance	;3
    895  f42f		       b0 04		      BCS	FinishDrawTraffic3	; 2 
    896  f431		       a9 02		      LDA	#%00000010	;2
    897  f433		       85 86		      STA	ENAM0Cache
    898  f435				   FinishDrawTraffic3
    899  f435
    900  f435				   DrawTraffic4 		; 33
    901  f435		       98		      TYA		; 2
    902  f436		       18		      CLC		; 2 
    903  f437		       65 a1		      ADC	TrafficOffset4 + 1	;3
    904  f439		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    905  f43b		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    906  f43d		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    907  f43f		       4c 44 f4 	      JMP	AfterEorOffsetWithCarry4	; 3
    908  f442				   EorOffsetWithCarry4
    909  f442		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    910  f444				   AfterEorOffsetWithCarry4		;17
    911  f444		       aa		      TAX		;2
    912  f445		       bd 00 fe 	      LDA	AesTable,X	; 4
    913  f448		       c5 c1		      CMP	TrafficChance	;3
    914  f44a		       b0 04		      BCS	FinishDrawTraffic4	; 2
    915  f44c		       a9 02		      LDA	#%00000010	;2
    916  f44e		       85 87		      STA	ENAM1Cache	;3
    917  f450				   FinishDrawTraffic4
    918  f450
    919  f450				   DrawTraffic0 		; 15
    920  f450		       98		      TYA		;2
    921  f451		       29 07		      AND	#%00000111	;2
    922  f453		       aa		      TAX		;2
    923  f454		       b5 d8		      LDA	ParallaxCache,X	;4
    924  f456		       85 82		      STA	PF1Cache	;3
    925  f458		       b5 f0		      LDA	ParallaxCache2,X	;4
    926  f45a		       85 81		      STA	PF0Cache	;3
    927  f45c
    928  f45c				   SkipDrawTraffic0
    929  f45c
    930  f45c				   WhileScanLoop
    931  f45c		       88		      DEY		;2
    932  f45d		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    933  f45f		       4c bb f3 	      JMP	ScanLoop	;3
    934  f462				   FinishScanLoop		; 7 209 of 222
    935  f462
    936  f462		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    937  f464		       20 7e f6 	      JSR	LoadAll
    938  f467		       85 02		      STA	WSYNC	; do stuff!
    939  f469		       85 02		      STA	WSYNC
    940  f46b		       85 02		      STA	WSYNC
    941  f46d							;42 cycles to use here
    942  f46d
    943  f46d				   PrepareOverscan
    944  f46d		       a9 02		      LDA	#2
    945  f46f		       85 02		      STA	WSYNC
    946  f471		       85 01		      STA	VBLANK
    947  f473
    948  f473		       a9 22		      LDA	#34	; 2 more lines before overscan (was 37)...
    949  f475		       8d 96 02 	      STA	TIM64T
    950  f478
    951  f478				   ProcessScoreFontColor
    952  f478		       a6 d6		      LDX	ScoreFontColorHoldChange
    953  f47a		       f0 06		      BEQ	ResetScoreFontColor
    954  f47c		       ca		      DEX
    955  f47d		       86 d6		      STX	ScoreFontColorHoldChange
    956  f47f		       4c 86 f4 	      JMP	SkipScoreFontColor
    957  f482				   ResetScoreFontColor
    958  f482		       a9 f9		      LDA	#SCORE_FONT_COLOR
    959  f484		       85 d5		      STA	ScoreFontColor
    960  f486				   SkipScoreFontColor
    961  f486
    962  f486				   IsGameOver
    963  f486		       a5 bc		      LDA	CountdownTimer
    964  f488		       05 8e		      ORA	Player0SpeedL
    965  f48a		       05 8f		      ORA	Player0SpeedH
    966  f48c		       d0 0b		      BNE	IsCheckpoint
    967  f48e		       a9 01		      LDA	#1
    968  f490		       85 d6		      STA	ScoreFontColorHoldChange
    969  f492		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    970  f494		       85 d5		      STA	ScoreFontColor
    971  f496		       4c cb f4 	      JMP	SkipIsTimeOver
    972  f499
    973  f499				   IsCheckpoint
    974  f499		       a5 d7		      LDA	NextCheckpoint
    975  f49b		       c5 92		      CMP	TrafficOffset0 + 2
    976  f49d		       d0 20		      BNE	SkipIsCheckpoint
    977  f49f		       18		      CLC
    978  f4a0		       69 10		      ADC	#CHECKPOINT_INTERVAL
    979  f4a2		       85 d7		      STA	NextCheckpoint
    980  f4a4		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    981  f4a6		       85 d5		      STA	ScoreFontColor
    982  f4a8		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    983  f4aa		       85 d6		      STA	ScoreFontColorHoldChange
    984  f4ac		       a5 bc		      LDA	CountdownTimer
    985  f4ae		       18		      CLC
    986  f4af		       65 c2		      ADC	CheckpointTime
    987  f4b1		       85 bc		      STA	CountdownTimer
    988  f4b3		       90 04		      BCC	JumpSkipTimeOver
    989  f4b5		       a9 ff		      LDA	#$FF
    990  f4b7		       85 bc		      STA	CountdownTimer	; Does not overflow!
    991  f4b9				   JumpSkipTimeOver
    992  f4b9		       20 9b f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    993  f4bc		       4c cb f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    994  f4bf				   SkipIsCheckpoint
    995  f4bf
    996  f4bf				   IsTimeOver
    997  f4bf		       a5 bc		      LDA	CountdownTimer
    998  f4c1		       d0 08		      BNE	SkipIsTimeOver
    999  f4c3		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   1000  f4c5		       85 d6		      STA	ScoreFontColorHoldChange
   1001  f4c7		       a9 33		      LDA	#SCORE_FONT_COLOR_BAD
   1002  f4c9		       85 d5		      STA	ScoreFontColor
   1003  f4cb				   SkipIsTimeOver
   1004  f4cb
   1005  f4cb				   PrintEasterEggCondition
   1006  f4cb		       a5 8d		      LDA	FrameCount1
   1007  f4cd		       29 38		      AND	#%00111000
   1008  f4cf		       05 c0		      ORA	GameStatus
   1009  f4d1		       c9 38		      CMP	#%00111000
   1010  f4d3		       d0 06		      BNE	ChooseTextSide
   1011  f4d5		       20 37 f8 	      JSR	PrintEasterEgg
   1012  f4d8		       4c d5 f5 	      JMP	RightScoreWriteEnd
   1013  f4db
   1014  f4db							;Could be done during on vblank to save this comparisson time (before draw score), 
   1015  f4db							;but I am saving vblank cycles for now, in case of 2 players.
   1016  f4db				   ChooseTextSide		; 
   1017  f4db		       a5 8c		      LDA	FrameCount0	;3
   1018  f4dd		       29 01		      AND	#%00000001	;2
   1019  f4df		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
   1020  f4e1		       4c 69 f5 	      JMP	RightScoreWrite
   1021  f4e4
   1022  f4e4				   LeftScoreWrite
   1023  f4e4		       a5 d5		      LDA	ScoreFontColor
   1024  f4e6		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1025  f4e8		       f0 52		      BEQ	PrintCheckpoint
   1026  f4ea		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1027  f4ec		       f0 56		      BEQ	PrintStartGame
   1028  f4ee		       a5 c0		      LDA	GameStatus
   1029  f4f0		       f0 5a		      BEQ	PrintHellwayLeft
   1030  f4f2				   WriteDistance		;Not optimized yet, ugly code.
   1031  f4f2				   Digit0Distance
   1032  f4f2		       a5 91		      LDA	TrafficOffset0 + 1	;3
   1033  f4f4		       29 f0		      AND	#%11110000	;2
   1034  f4f6		       4a		      LSR		; 2
   1035  f4f7		       4a		      LSR		; 2
   1036  f4f8		       4a		      LSR		; 2
   1037  f4f9		       4a		      LSR		; 2
   1038  f4fa		       aa		      TAX		; 2
   1039  f4fb		       bd af fd 	      LDA	FontLookup,X	;4
   1040  f4fe		       85 d3		      STA	ScoreD3	;3
   1041  f500
   1042  f500				   Digit1Distance
   1043  f500		       a5 92		      LDA	TrafficOffset0 + 2	;3
   1044  f502		       29 0f		      AND	#%00001111	;2
   1045  f504		       aa		      TAX		; 2
   1046  f505		       bd af fd 	      LDA	FontLookup,X	;4 
   1047  f508		       85 d2		      STA	ScoreD2	;3
   1048  f50a
   1049  f50a				   Digit2Distance
   1050  f50a		       a5 92		      LDA	TrafficOffset0 + 2	;3
   1051  f50c		       29 f0		      AND	#%11110000	;2
   1052  f50e		       4a		      LSR		; 2
   1053  f50f		       4a		      LSR		; 2
   1054  f510		       4a		      LSR		; 2
   1055  f511		       4a		      LSR		; 2
   1056  f512		       aa		      TAX		; 2
   1057  f513		       bd af fd 	      LDA	FontLookup,X	;4
   1058  f516		       85 d1		      STA	ScoreD1	;3
   1059  f518
   1060  f518				   Digit3Distance
   1061  f518		       a5 bd		      LDA	Traffic0Msb	;3
   1062  f51a		       29 0f		      AND	#%00001111	;2
   1063  f51c		       aa		      TAX		; 2
   1064  f51d		       bd af fd 	      LDA	FontLookup,X	;4 
   1065  f520		       85 d0		      STA	ScoreD0	;3
   1066  f522
   1067  f522				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
   1068  f522		       a5 bd		      LDA	Traffic0Msb
   1069  f524		       29 f0		      AND	#%11110000	;2
   1070  f526		       d0 07		      BNE	DrawDistanceExtraDigit
   1071  f528		       a9 9f		      LDA	#<Pipe + #FONT_OFFSET	;3
   1072  f52a		       85 d4		      STA	ScoreD4	;3
   1073  f52c		       4c 39 f5 	      JMP	EndDrawDistance
   1074  f52f				   DrawDistanceExtraDigit
   1075  f52f		       4a		      LSR		; 2
   1076  f530		       4a		      LSR		; 2
   1077  f531		       4a		      LSR		; 2
   1078  f532		       4a		      LSR		; 2
   1079  f533		       aa		      TAX		; 2
   1080  f534		       bd af fd 	      LDA	FontLookup,X	;4
   1081  f537		       85 d4		      STA	ScoreD4	;3
   1082  f539
   1083  f539				   EndDrawDistance
   1084  f539		       4c d5 f5 	      JMP	RightScoreWriteEnd	;3
   1085  f53c
   1086  f53c				   PrintCheckpoint
   1087  f53c		       a2 00		      LDX	#<CheckpointText
   1088  f53e		       20 05 f7 	      JSR	PrintStaticText
   1089  f541		       4c d5 f5 	      JMP	RightScoreWriteEnd	;3
   1090  f544				   PrintStartGame
   1091  f544		       a2 23		      LDX	#<GoText
   1092  f546		       20 05 f7 	      JSR	PrintStaticText
   1093  f549		       4c d5 f5 	      JMP	RightScoreWriteEnd	;3
   1094  f54c
   1095  f54c				   PrintHellwayLeft
   1096  f54c		       a5 8d		      LDA	FrameCount1
   1097  f54e		       29 01		      AND	#1
   1098  f550		       d0 05		      BNE	PrintCreditsLeft
   1099  f552		       a2 05		      LDX	#<HellwayLeftText
   1100  f554		       4c 59 f5 	      JMP	PrintGameMode
   1101  f557				   PrintCreditsLeft
   1102  f557		       a2 0f		      LDX	#<OpbText
   1103  f559
   1104  f559				   PrintGameMode
   1105  f559		       20 05 f7 	      JSR	PrintStaticText
   1106  f55c		       a5 c5		      LDA	GameMode
   1107  f55e		       29 0f		      AND	#%00001111
   1108  f560		       aa		      TAX		; 2
   1109  f561		       bd af fd 	      LDA	FontLookup,X	;4 
   1110  f564		       85 d0		      STA	ScoreD0	;3
   1111  f566		       4c d5 f5 	      JMP	RightScoreWriteEnd	;3
   1112  f569
   1113  f569				   RightScoreWrite
   1114  f569		       a5 c0		      LDA	GameStatus
   1115  f56b		       f0 47		      BEQ	PrintHellwayRight
   1116  f56d		       a5 d5		      LDA	ScoreFontColor
   1117  f56f		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1118  f571		       f0 54		      BEQ	PrintGameOver
   1119  f573				   Digit0Timer
   1120  f573		       a5 bc		      LDA	CountdownTimer	;3
   1121  f575		       29 0f		      AND	#%00001111	;2
   1122  f577		       aa		      TAX		; 2
   1123  f578		       bd af fd 	      LDA	FontLookup,X	;4 
   1124  f57b		       85 d1		      STA	ScoreD1	;3
   1125  f57d
   1126  f57d				   Digit1Timer
   1127  f57d		       a5 bc		      LDA	CountdownTimer	;3
   1128  f57f		       29 f0		      AND	#%11110000	;2
   1129  f581		       4a		      LSR		; 2
   1130  f582		       4a		      LSR		; 2
   1131  f583		       4a		      LSR		; 2
   1132  f584		       4a		      LSR		; 2
   1133  f585		       aa		      TAX		; 2
   1134  f586		       bd af fd 	      LDA	FontLookup,X	;4
   1135  f589		       85 d0		      STA	ScoreD0	;3
   1136  f58b
   1137  f58b		       a9 9f		      LDA	#<Pipe + #FONT_OFFSET	;3
   1138  f58d		       85 d2		      STA	ScoreD2	;3
   1139  f58f
   1140  f58f				   Digit0Speed
   1141  f58f		       a5 8e		      LDA	Player0SpeedL
   1142  f591		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1143  f593		       4a		      LSR		; 2
   1144  f594		       4a		      LSR		; 2
   1145  f595		       aa		      TAX		; 2
   1146  f596		       bd af fd 	      LDA	FontLookup,X	;4
   1147  f599		       85 d4		      STA	ScoreD4	;3
   1148  f59b
   1149  f59b				   Digit1Speed
   1150  f59b		       a5 8e		      LDA	Player0SpeedL
   1151  f59d		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1152  f59f		       18		      CLC
   1153  f5a0		       2a		      ROL		;First goes into carry
   1154  f5a1		       2a		      ROL
   1155  f5a2		       2a		      ROL
   1156  f5a3		       85 b0		      STA	Tmp0
   1157  f5a5		       a5 8f		      LDA	Player0SpeedH
   1158  f5a7		       0a		      ASL
   1159  f5a8		       0a		      ASL
   1160  f5a9		       05 b0		      ORA	Tmp0
   1161  f5ab		       aa		      TAX		; 2
   1162  f5ac		       bd af fd 	      LDA	FontLookup,X	;4
   1163  f5af		       85 d3		      STA	ScoreD3	;3
   1164  f5b1		       4c d5 f5 	      JMP	RightScoreWriteEnd
   1165  f5b4
   1166  f5b4				   PrintHellwayRight
   1167  f5b4		       a5 8d		      LDA	FrameCount1
   1168  f5b6		       29 01		      AND	#1
   1169  f5b8		       d0 05		      BNE	PrintCreditsRight
   1170  f5ba		       a2 0a		      LDX	#<HellwayRightText
   1171  f5bc		       4c c1 f5 	      JMP	PrintRightIntro
   1172  f5bf				   PrintCreditsRight
   1173  f5bf		       a2 14		      LDX	#<YearText
   1174  f5c1				   PrintRightIntro
   1175  f5c1		       20 05 f7 	      JSR	PrintStaticText
   1176  f5c4		       4c d5 f5 	      JMP	RightScoreWriteEnd
   1177  f5c7				   PrintGameOver
   1178  f5c7		       a5 8c		      LDA	FrameCount0
   1179  f5c9		       30 05		      BMI	PrintOverText
   1180  f5cb		       a2 19		      LDX	#<GameText
   1181  f5cd		       4c d2 f5 	      JMP	StoreGameOverText
   1182  f5d0				   PrintOverText
   1183  f5d0		       a2 1e		      LDX	#<OverText
   1184  f5d2				   StoreGameOverText
   1185  f5d2		       20 05 f7 	      JSR	PrintStaticText
   1186  f5d5				   RightScoreWriteEnd
   1187  f5d5
   1188  f5d5				   LeftSound
   1189  f5d5		       a5 bc		      LDA	CountdownTimer
   1190  f5d7		       f0 24		      BEQ	EngineOff
   1191  f5d9		       a5 8e		      LDA	Player0SpeedL
   1192  f5db		       29 80		      AND	#%10000000
   1193  f5dd		       05 8f		      ORA	Player0SpeedH
   1194  f5df		       18		      CLC
   1195  f5e0		       2a		      ROL
   1196  f5e1		       69 00		      ADC	#0	; Places the possible carry produced by ROL
   1197  f5e3		       aa		      TAX
   1198  f5e4		       a5 8e		      LDA	Player0SpeedL
   1199  f5e6		       4a		      LSR
   1200  f5e7		       4a		      LSR
   1201  f5e8		       4a		      LSR
   1202  f5e9		       29 0f		      AND	#%00001111
   1203  f5eb		       85 b0		      STA	Tmp0
   1204  f5ed		       bd c5 fd 	      LDA	EngineBaseFrequence,X	; Max of 5 bits
   1205  f5f0		       38		      SEC
   1206  f5f1		       e5 b0		      SBC	Tmp0
   1207  f5f3		       85 17		      STA	AUDF0
   1208  f5f5		       bd bf fd 	      LDA	EngineSoundType,X
   1209  f5f8		       85 15		      STA	AUDC0
   1210  f5fa		       4c 01 f6 	      JMP	EndLeftSound
   1211  f5fd				   EngineOff
   1212  f5fd		       a9 00		      LDA	#0
   1213  f5ff		       85 15		      STA	AUDC0
   1214  f601
   1215  f601				   EndLeftSound
   1216  f601
   1217  f601
   1218  f601				   RightSound		; More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1219  f601		       a5 d5		      LDA	ScoreFontColor
   1220  f603		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1221  f605		       f0 4a		      BEQ	MuteRightSound	; A little bit of silence, since you will be run over all the time
   1222  f607		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1223  f609		       f0 21		      BEQ	PlayCheckpoint
   1224  f60b		       a5 ba		      LDA	CollisionCounter
   1225  f60d		       c9 e0		      CMP	#$E0
   1226  f60f		       b0 0c		      BCS	PlayColision
   1227  f611		       a5 d7		      LDA	NextCheckpoint
   1228  f613		       38		      SEC
   1229  f614		       e5 92		      SBC	TrafficOffset0 + 2
   1230  f616		       c9 02		      CMP	#$02
   1231  f618		       90 24		      BCC	PlayBeforeCheckpoint
   1232  f61a		       4c 51 f6 	      JMP	MuteRightSound
   1233  f61d				   PlayColision
   1234  f61d		       a9 1f		      LDA	#31
   1235  f61f		       85 18		      STA	AUDF1
   1236  f621		       a9 08		      LDA	#8
   1237  f623		       85 16		      STA	AUDC1
   1238  f625		       a9 08		      LDA	#8
   1239  f627		       85 1a		      STA	AUDV1
   1240  f629		       4c 55 f6 	      JMP	EndRightSound
   1241  f62c
   1242  f62c				   PlayCheckpoint
   1243  f62c		       a5 d6		      LDA	ScoreFontColorHoldChange
   1244  f62e		       4a		      LSR
   1245  f62f		       4a		      LSR
   1246  f630		       4a		      LSR
   1247  f631		       85 18		      STA	AUDF1
   1248  f633		       a9 0c		      LDA	#12
   1249  f635		       85 16		      STA	AUDC1
   1250  f637		       a9 06		      LDA	#6
   1251  f639		       85 1a		      STA	AUDV1
   1252  f63b		       4c 55 f6 	      JMP	EndRightSound
   1253  f63e
   1254  f63e				   PlayBeforeCheckpoint
   1255  f63e		       a5 8c		      LDA	FrameCount0
   1256  f640		       29 1c		      AND	#%00011100
   1257  f642		       09 03		      ORA	#%00000011
   1258  f644		       85 18		      STA	AUDF1
   1259  f646		       a9 0c		      LDA	#12
   1260  f648		       85 16		      STA	AUDC1
   1261  f64a		       a9 03		      LDA	#3
   1262  f64c		       85 1a		      STA	AUDV1
   1263  f64e		       4c 55 f6 	      JMP	EndRightSound
   1264  f651
   1265  f651				   MuteRightSound
   1266  f651		       a9 00		      LDA	#0
   1267  f653		       85 1a		      STA	AUDV1
   1268  f655
   1269  f655				   EndRightSound
   1270  f655
   1271  f655				   OverScanWait
   1272  f655		       ad 84 02 	      LDA	INTIM
   1273  f658		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1274  f65a		       4c 84 f0 	      JMP	MainLoop
   1275  f65d
   1276  f65d				   Subroutines
   1277  f65d
   1278  f65d				   ClearAll		; 52
   1279  f65d		       a9 00		      LDA	#0	;2
   1280  f65f		       85 1c		      STA	GRP1	;3
   1281  f661		       85 1f		      STA	ENABL	;3
   1282  f663		       85 1d		      STA	ENAM0	;3
   1283  f665		       85 1e		      STA	ENAM1	;3
   1284  f667		       85 84		      STA	GRP1Cache	;3
   1285  f669		       85 85		      STA	ENABLCache	;3
   1286  f66b		       85 86		      STA	ENAM0Cache	;3
   1287  f66d		       85 87		      STA	ENAM1Cache	;3
   1288  f66f
   1289  f66f				   ClearPF		; 26
   1290  f66f		       a9 00		      LDA	#0	;2
   1291  f671				   ClearPFSkipLDA0
   1292  f671		       85 0d		      STA	PF0	;3
   1293  f673		       85 0e		      STA	PF1	;3
   1294  f675		       85 0f		      STA	PF2	;3	
   1295  f677		       85 81		      STA	PF0Cache	;3
   1296  f679		       85 82		      STA	PF1Cache	;3
   1297  f67b		       85 83		      STA	PF2Cache	;3 
   1298  f67d		       60		      RTS		;6
   1299  f67e				   EndClearAll
   1300  f67e
   1301  f67e				   LoadAll		; 48
   1302  f67e		       a5 81		      LDA	PF0Cache	;3
   1303  f680		       85 0d		      STA	PF0	;3
   1304  f682
   1305  f682		       a5 82		      LDA	PF1Cache	;3
   1306  f684		       85 0e		      STA	PF1	;3
   1307  f686
   1308  f686		       a5 83		      LDA	PF2Cache	;3
   1309  f688		       85 0f		      STA	PF2	;3
   1310  f68a
   1311  f68a		       a5 84		      LDA	GRP1Cache	;3
   1312  f68c		       85 1c		      STA	GRP1	;3
   1313  f68e
   1314  f68e		       a5 85		      LDA	ENABLCache	;3
   1315  f690		       85 1f		      STA	ENABL	;3
   1316  f692
   1317  f692		       a5 86		      LDA	ENAM0Cache	;3
   1318  f694		       85 1d		      STA	ENAM0	;3
   1319  f696
   1320  f696		       a5 87		      LDA	ENAM1Cache	;3
   1321  f698		       85 1e		      STA	ENAM1	;3
   1322  f69a
   1323  f69a		       60		      RTS		;6
   1324  f69b				   EndLoadAll
   1325  f69b
   1326  f69b				   NextDifficulty
   1327  f69b		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1328  f69d		       29 01		      AND	#%00000001
   1329  f69f		       d0 3f		      BNE	CheckRandomDifficulty
   1330  f6a1
   1331  f6a1		       a5 c4		      LDA	CurrentDifficulty
   1332  f6a3		       18		      CLC
   1333  f6a4		       69 01		      ADC	#1
   1334  f6a6		       29 03		      AND	#%00000011	; 0 to 3
   1335  f6a8		       85 c4		      STA	CurrentDifficulty
   1336  f6aa
   1337  f6aa				   ConfigureDifficulty
   1338  f6aa		       a5 c4		      LDA	CurrentDifficulty
   1339  f6ac		       f0 0b		      BEQ	ConfigureLightTraffic
   1340  f6ae		       c9 01		      CMP	#1
   1341  f6b0		       f0 10		      BEQ	ConfigureRegularTraffic
   1342  f6b2		       c9 02		      CMP	#2
   1343  f6b4		       f0 15		      BEQ	ConfigureIntenseTraffic
   1344  f6b6		       4c d4 f6 	      JMP	ConfigureRushHourTraffic
   1345  f6b9
   1346  f6b9				   ConfigureLightTraffic
   1347  f6b9		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1348  f6bb		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1349  f6bd		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1350  f6bf		       4c da f6 	      JMP	StoreTrafficChance
   1351  f6c2				   ConfigureRegularTraffic
   1352  f6c2		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1353  f6c4		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1354  f6c6		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1355  f6c8		       4c da f6 	      JMP	StoreTrafficChance
   1356  f6cb				   ConfigureIntenseTraffic
   1357  f6cb		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1358  f6cd		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1359  f6cf		       a9 f4		      LDA	#TRAFFIC_COLOR_INTENSE
   1360  f6d1		       4c da f6 	      JMP	StoreTrafficChance
   1361  f6d4				   ConfigureRushHourTraffic
   1362  f6d4		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1363  f6d6		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1364  f6d8		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1365  f6da
   1366  f6da				   StoreTrafficChance
   1367  f6da		       86 c1		      STX	TrafficChance
   1368  f6dc		       84 c2		      STY	CheckpointTime
   1369  f6de		       85 c3		      STA	TrafficColor
   1370  f6e0
   1371  f6e0				   CheckRandomDifficulty
   1372  f6e0		       a5 c5		      LDA	GameMode
   1373  f6e2		       29 08		      AND	#%00001000	; Random difficulties
   1374  f6e4		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1375  f6e6				   RandomDificulty
   1376  f6e6		       a6 8c		      LDX	FrameCount0
   1377  f6e8		       bd 00 fe 	      LDA	AesTable,X
   1378  f6eb		       45 c1		      EOR	TrafficChance
   1379  f6ed		       29 3f		      AND	#%00111111
   1380  f6ef		       85 c1		      STA	TrafficChance
   1381  f6f1
   1382  f6f1				   ReturnFromNextDifficulty
   1383  f6f1		       60		      RTS
   1384  f6f2				   EndNextDifficulty
   1385  f6f2
   1386  f6f2				   DefaultOffsets
   1387  f6f2		       a9 20		      LDA	#$20
   1388  f6f4		       85 96		      STA	TrafficOffset1 + 2
   1389  f6f6		       a9 40		      LDA	#$40
   1390  f6f8		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1391  f6fa		       a9 60		      LDA	#$60
   1392  f6fc		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1393  f6fe		       a9 80		      LDA	#$80
   1394  f700		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1395  f702		       a9 a0		      LDA	#$A0
   1396  f704		       60		      RTS
   1397  f705
   1398  f705				   PrintStaticText		; Preload X with the offset referent to StaticText
   1399  f705		       bd 00 ff 	      LDA	StaticText,X
   1400  f708		       85 d0		      STA	ScoreD0
   1401  f70a		       e8		      INX
   1402  f70b		       bd 00 ff 	      LDA	StaticText,X
   1403  f70e		       85 d1		      STA	ScoreD1
   1404  f710		       e8		      INX
   1405  f711		       bd 00 ff 	      LDA	StaticText,X
   1406  f714		       85 d2		      STA	ScoreD2
   1407  f716		       e8		      INX
   1408  f717		       bd 00 ff 	      LDA	StaticText,X
   1409  f71a		       85 d3		      STA	ScoreD3
   1410  f71c		       e8		      INX
   1411  f71d		       bd 00 ff 	      LDA	StaticText,X
   1412  f720		       85 d4		      STA	ScoreD4
   1413  f722		       60		      RTS
   1414  f723
   1415  f723				   Sleep16
   1416  f723		       ea		      NOP
   1417  f724		       ea		      NOP
   1418  f725		       60		      RTS
   1419  f726
   1420  f726				   HorizontalParallaxLoop
   1421  f726		       a9 ef		      LDA	#%11101111	; Clear the house
   1422  f728		       39 d8 00 	      AND	ParallaxCache,Y
   1423  f72b		       99 d8 00 	      STA	ParallaxCache,Y
   1424  f72e				   CalculateParallax0
   1425  f72e		       98		      TYA
   1426  f72f		       18		      CLC
   1427  f730		       65 91		      ADC	TrafficOffset0 + 1
   1428  f732		       29 04		      AND	#%00000100
   1429  f734		       f0 08		      BEQ	HasEmptySpace0
   1430  f736				   HasBorder0
   1431  f736		       b9 d8 00 	      LDA	ParallaxCache,Y
   1432  f739		       09 0f		      ORA	#%00001111
   1433  f73b		       4c 43 f7 	      JMP	StoreParallax0
   1434  f73e				   HasEmptySpace0
   1435  f73e		       b9 d8 00 	      LDA	ParallaxCache,Y
   1436  f741		       29 f0		      AND	#%11110000
   1437  f743
   1438  f743				   StoreParallax0
   1439  f743		       99 d8 00 	      STA	ParallaxCache,Y
   1440  f746
   1441  f746				   CalculateParallax1
   1442  f746		       98		      TYA
   1443  f747		       18		      CLC
   1444  f748		       65 c7		      ADC	ParallaxOffset1 + 1
   1445  f74a		       29 04		      AND	#%00000100
   1446  f74c		       f0 08		      BEQ	HasEmptySpace1
   1447  f74e				   HasBorder1
   1448  f74e		       b9 d8 00 	      LDA	ParallaxCache,Y
   1449  f751		       09 e0		      ORA	#%11100000
   1450  f753		       4c 5b f7 	      JMP	StoreParallax1
   1451  f756				   HasEmptySpace1
   1452  f756		       b9 d8 00 	      LDA	ParallaxCache,Y
   1453  f759		       29 1f		      AND	#%00011111
   1454  f75b
   1455  f75b				   StoreParallax1
   1456  f75b		       99 d8 00 	      STA	ParallaxCache,Y
   1457  f75e
   1458  f75e				   CalculateParallax2
   1459  f75e		       98		      TYA
   1460  f75f		       18		      CLC
   1461  f760		       65 c9		      ADC	ParallaxOffset2 + 1
   1462  f762		       29 04		      AND	#%00000100
   1463  f764		       f0 05		      BEQ	HasEmptySpace2
   1464  f766				   HasBorder2
   1465  f766		       a9 60		      LDA	#%01100000
   1466  f768		       4c 6d f7 	      JMP	StoreParallax2
   1467  f76b				   HasEmptySpace2
   1468  f76b		       a9 00		      LDA	#0
   1469  f76d
   1470  f76d				   StoreParallax2
   1471  f76d		       99 f0 00 	      STA	ParallaxCache2,Y
   1472  f770
   1473  f770				   ContinueHorizontalParallaxLoop
   1474  f770		       88		      DEY
   1475  f771		       10 b3		      BPL	HorizontalParallaxLoop
   1476  f773		       60		      RTS
   1477  f774
   1478  f774				   DefaultBorderLoop
   1479  f774				   CalculateDefaultBorder
   1480  f774		       98		      TYA
   1481  f775		       18		      CLC
   1482  f776		       65 91		      ADC	TrafficOffset0 + 1
   1483  f778		       29 04		      AND	#%00000100
   1484  f77a		       f0 05		      BEQ	HasEmptySpace
   1485  f77c				   HasBorder
   1486  f77c		       a9 ff		      LDA	#$FF
   1487  f77e		       4c 83 f7 	      JMP	StoreBorder
   1488  f781				   HasEmptySpace
   1489  f781		       a9 00		      LDA	#0
   1490  f783
   1491  f783				   StoreBorder
   1492  f783		       99 d8 00 	      STA	ParallaxCache,Y
   1493  f786		       a9 00		      LDA	#0
   1494  f788		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1495  f78b
   1496  f78b				   ContinueDefaultBorderLoop
   1497  f78b		       88		      DEY
   1498  f78c		       10 e6		      BPL	DefaultBorderLoop
   1499  f78e		       60		      RTS
   1500  f78f
   1501  f78f				   PrepareTachometerBorderLoop
   1502  f78f		       a5 8e		      LDA	Player0SpeedL
   1503  f791		       29 80		      AND	#%10000000
   1504  f793		       05 8f		      ORA	Player0SpeedH
   1505  f795		       18		      CLC
   1506  f796		       2a		      ROL
   1507  f797		       69 00		      ADC	#0
   1508  f799		       85 b0		      STA	Tmp0	; Gear
   1509  f79b		       a5 8e		      LDA	Player0SpeedL
   1510  f79d		       4a		      LSR
   1511  f79e		       4a		      LSR
   1512  f79f		       4a		      LSR
   1513  f7a0		       4a		      LSR
   1514  f7a1		       29 07		      AND	#%00000111
   1515  f7a3		       85 b1		      STA	Tmp1	; RPM
   1516  f7a5
   1517  f7a5				   TachometerBorderLoop
   1518  f7a5		       98		      TYA
   1519  f7a6		       18		      CLC
   1520  f7a7		       65 91		      ADC	TrafficOffset0 + 1
   1521  f7a9		       29 04		      AND	#%00000100
   1522  f7ab		       f0 10		      BEQ	HasBorderTac
   1523  f7ad		       a6 b0		      LDX	Tmp0
   1524  f7af		       bd db fd 	      LDA	TachometerGearLookup,X
   1525  f7b2		       99 d8 00 	      STA	ParallaxCache,Y
   1526  f7b5		       a9 00		      LDA	#0
   1527  f7b7		       99 f0 00 	      STA	ParallaxCache2,Y
   1528  f7ba		       4c df f7 	      JMP	ContinueBorderTac
   1529  f7bd				   HasBorderTac
   1530  f7bd		       a9 05		      LDA	#5
   1531  f7bf		       c5 b0		      CMP	Tmp0	; Only on max speed
   1532  f7c1		       f0 11		      BEQ	FullBorderTac
   1533  f7c3		       a6 b1		      LDX	Tmp1
   1534  f7c5		       bd cb fd 	      LDA	TachometerSizeLookup1,X
   1535  f7c8		       99 d8 00 	      STA	ParallaxCache,Y
   1536  f7cb		       bd d3 fd 	      LDA	TachometerSizeLookup2,X
   1537  f7ce		       99 f0 00 	      STA	ParallaxCache2,Y
   1538  f7d1		       4c df f7 	      JMP	ContinueBorderTac
   1539  f7d4
   1540  f7d4				   FullBorderTac
   1541  f7d4		       a9 ff		      LDA	#$FF
   1542  f7d6		       99 d8 00 	      STA	ParallaxCache,Y
   1543  f7d9		       99 f0 00 	      STA	ParallaxCache2,Y
   1544  f7dc		       4c df f7 	      JMP	ContinueBorderTac
   1545  f7df
   1546  f7df				   ContinueBorderTac
   1547  f7df		       88		      DEY
   1548  f7e0		       10 c3		      BPL	TachometerBorderLoop
   1549  f7e2		       60		      RTS
   1550  f7e3
   1551  f7e3				   VerticalParallaxLoop
   1552  f7e3				   CalculateVerticalParallax0
   1553  f7e3		       98		      TYA
   1554  f7e4		       18		      CLC
   1555  f7e5		       65 91		      ADC	TrafficOffset0 + 1
   1556  f7e7		       29 06		      AND	#%00000110
   1557  f7e9		       d0 0b		      BNE	HasNoVerticalLine0
   1558  f7eb				   HasVerticalLine0
   1559  f7eb		       a9 ff		      LDA	#$FF
   1560  f7ed		       99 d8 00 	      STA	ParallaxCache,Y
   1561  f7f0		       99 f0 00 	      STA	ParallaxCache2,Y
   1562  f7f3		       4c 33 f8 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1563  f7f6				   HasNoVerticalLine0
   1564  f7f6		       a9 00		      LDA	#0
   1565  f7f8		       99 d8 00 	      STA	ParallaxCache,Y
   1566  f7fb		       99 f0 00 	      STA	ParallaxCache2,Y
   1567  f7fe
   1568  f7fe				   CalculateVerticalParallax1
   1569  f7fe		       98		      TYA
   1570  f7ff		       18		      CLC
   1571  f800		       65 c7		      ADC	ParallaxOffset1 + 1
   1572  f802		       29 07		      AND	#%00000111
   1573  f804		       d0 0d		      BNE	HasNoVerticalLine1
   1574  f806
   1575  f806				   HasVerticalLine1
   1576  f806		       a9 fc		      LDA	#%11111100
   1577  f808		       99 d8 00 	      STA	ParallaxCache,Y
   1578  f80b		       a9 c0		      LDA	#%11000000
   1579  f80d		       99 f0 00 	      STA	ParallaxCache2,Y
   1580  f810		       4c 33 f8 	      JMP	ContinueVerticalParallaxLoop
   1581  f813				   HasNoVerticalLine1
   1582  f813		       a9 00		      LDA	#0
   1583  f815		       99 d8 00 	      STA	ParallaxCache,Y
   1584  f818		       99 f0 00 	      STA	ParallaxCache2,Y
   1585  f81b
   1586  f81b				   CalculateVerticalParallax2
   1587  f81b		       98		      TYA
   1588  f81c		       18		      CLC
   1589  f81d		       65 c9		      ADC	ParallaxOffset2 + 1
   1590  f81f		       29 07		      AND	#%00000111
   1591  f821		       d0 08		      BNE	HasNoVerticalLine2
   1592  f823
   1593  f823				   HasVerticalLine2
   1594  f823		       a9 f0		      LDA	#%11110000
   1595  f825		       99 d8 00 	      STA	ParallaxCache,Y
   1596  f828		       4c 33 f8 	      JMP	ContinueVerticalParallaxLoop
   1597  f82b				   HasNoVerticalLine2
   1598  f82b		       a9 00		      LDA	#0
   1599  f82d		       99 d8 00 	      STA	ParallaxCache,Y
   1600  f830		       99 f0 00 	      STA	ParallaxCache2,Y
   1601  f833
   1602  f833				   ContinueVerticalParallaxLoop
   1603  f833		       88		      DEY
   1604  f834		       10 ad		      BPL	VerticalParallaxLoop
   1605  f836		       60		      RTS
   1606  f837
   1607  f837				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1608  f837		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1609  f839		       85 d5		      STA	ScoreFontColor
   1610  f83b		       a9 01		      LDA	#1
   1611  f83d		       85 d6		      STA	ScoreFontColorHoldChange
   1612  f83f
   1613  f83f		       a5 8d		      LDA	FrameCount1
   1614  f841		       29 07		      AND	#%00000111
   1615  f843		       85 b3		      STA	Tmp3
   1616  f845							;0 is Zelda Name, (default)
   1617  f845		       a9 01		      LDA	#1
   1618  f847		       c5 b3		      CMP	Tmp3
   1619  f849		       f0 38		      BEQ	PrintZeldaDateLeft
   1620  f84b
   1621  f84b		       a9 02		      LDA	#2
   1622  f84d		       c5 b3		      CMP	Tmp3
   1623  f84f		       f0 23		      BEQ	PrintPolvinhosLeft
   1624  f851
   1625  f851		       a9 03		      LDA	#3
   1626  f853		       c5 b3		      CMP	Tmp3
   1627  f855		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1628  f857
   1629  f857		       a9 04		      LDA	#4
   1630  f859		       c5 b3		      CMP	Tmp3
   1631  f85b		       f0 1c		      BEQ	PrintIvonneLeft
   1632  f85d
   1633  f85d		       a9 05		      LDA	#5
   1634  f85f		       c5 b3		      CMP	Tmp3
   1635  f861		       f0 2a		      BEQ	PrintIvonneDateLeft
   1636  f863
   1637  f863		       a9 06		      LDA	#6
   1638  f865		       c5 b3		      CMP	Tmp3
   1639  f867		       f0 15		      BEQ	PrintArtLeft
   1640  f869
   1641  f869		       a9 07		      LDA	#7
   1642  f86b		       c5 b3		      CMP	Tmp3
   1643  f86d		       f0 23		      BEQ	PrintLeonardoLeft
   1644  f86f
   1645  f86f				   PrintZeldaLeft
   1646  f86f		       a2 28		      LDX	#<ZeldaTextLeft
   1647  f871		       4c 97 f8 	      JMP	ProcessPrintEasterEgg
   1648  f874				   PrintPolvinhosLeft
   1649  f874		       a2 3c		      LDX	#<PolvinhosTextLeft
   1650  f876		       4c 97 f8 	      JMP	ProcessPrintEasterEgg
   1651  f879				   PrintIvonneLeft
   1652  f879		       a2 50		      LDX	#<IvonneTextLeft
   1653  f87b		       4c 97 f8 	      JMP	ProcessPrintEasterEgg
   1654  f87e				   PrintArtLeft
   1655  f87e		       a2 64		      LDX	#<PaperArtTextLeft
   1656  f880		       4c 97 f8 	      JMP	ProcessPrintEasterEgg
   1657  f883
   1658  f883				   PrintZeldaDateLeft
   1659  f883		       a2 32		      LDX	#<ZeldaDateLeft
   1660  f885		       4c 97 f8 	      JMP	ProcessPrintEasterEgg
   1661  f888				   PrintPolvinhosDateLeft
   1662  f888		       a2 46		      LDX	#<PolvinhosDateLeft
   1663  f88a		       4c 97 f8 	      JMP	ProcessPrintEasterEgg
   1664  f88d				   PrintIvonneDateLeft
   1665  f88d		       a2 5a		      LDX	#<IvonneDateLeft
   1666  f88f		       4c 97 f8 	      JMP	ProcessPrintEasterEgg
   1667  f892				   PrintLeonardoLeft
   1668  f892		       a2 6e		      LDX	#<LeonardoTextLeft
   1669  f894		       4c 97 f8 	      JMP	ProcessPrintEasterEgg
   1670  f897
   1671  f897				   ProcessPrintEasterEgg
   1672  f897		       a5 8c		      LDA	FrameCount0	;3
   1673  f899		       29 01		      AND	#%00000001	;2
   1674  f89b		       f0 03		      BEQ	TranformIntoRightText
   1675  f89d		       4c a5 f8 	      JMP	PrintEasterEggText
   1676  f8a0				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1677  f8a0		       8a		      TXA
   1678  f8a1		       18		      CLC
   1679  f8a2		       69 05		      ADC	#HALF_TEXT_SIZE
   1680  f8a4		       aa		      TAX
   1681  f8a5
   1682  f8a5				   PrintEasterEggText
   1683  f8a5		       20 05 f7 	      JSR	PrintStaticText
   1684  f8a8		       60		      RTS
   1685  f8a9
   1686  f8a9							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   1687  fd00					      org	$FD00
   1688  fd00				   Font
   1689  fd00				   C0
   1690  fd00		       e7		      .byte.b	#%11100111	;
   1691  fd01		       a5		      .byte.b	#%10100101	; 
   1692  fd02		       a5		      .byte.b	#%10100101	; 
   1693  fd03		       a5		      .byte.b	#%10100101	; 
   1694  fd04		       e7		      .byte.b	#%11100111	;	
   1695  fd05				   C1
   1696  fd05		       e7		      .byte.b	#%11100111	;
   1697  fd06		       42		      .byte.b	#%01000010	; 
   1698  fd07		       42		      .byte.b	#%01000010	; 
   1699  fd08		       42		      .byte.b	#%01000010	; 
   1700  fd09		       66		      .byte.b	#%01100110	;
   1701  fd0a				   C2
   1702  fd0a		       e7		      .byte.b	#%11100111	;
   1703  fd0b		       24		      .byte.b	#%00100100	; 
   1704  fd0c		       e7		      .byte.b	#%11100111	; 
   1705  fd0d		       81		      .byte.b	#%10000001	; 
   1706  fd0e		       e7		      .byte.b	#%11100111	;
   1707  fd0f				   C3
   1708  fd0f		       e7		      .byte.b	#%11100111	;
   1709  fd10		       81		      .byte.b	#%10000001	; 
   1710  fd11		       e7		      .byte.b	#%11100111	; 
   1711  fd12		       81		      .byte.b	#%10000001	; 
   1712  fd13		       e7		      .byte.b	#%11100111	;
   1713  fd14				   C4
   1714  fd14		       81		      .byte.b	#%10000001	;
   1715  fd15		       81		      .byte.b	#%10000001	; 
   1716  fd16		       e7		      .byte.b	#%11100111	; 
   1717  fd17		       a5		      .byte.b	#%10100101	; 
   1718  fd18		       a5		      .byte.b	#%10100101	;
   1719  fd19				   C5
   1720  fd19		       e7		      .byte.b	#%11100111	;
   1721  fd1a		       81		      .byte.b	#%10000001	; 
   1722  fd1b		       e7		      .byte.b	#%11100111	; 
   1723  fd1c		       24		      .byte.b	#%00100100	; 
   1724  fd1d		       e7		      .byte.b	#%11100111	;
   1725  fd1e				   C6
   1726  fd1e		       e7		      .byte.b	#%11100111	;
   1727  fd1f		       a5		      .byte.b	#%10100101	; 
   1728  fd20		       e7		      .byte.b	#%11100111	; 
   1729  fd21		       24		      .byte.b	#%00100100	; 
   1730  fd22		       e7		      .byte.b	#%11100111	;
   1731  fd23				   C7
   1732  fd23		       81		      .byte.b	#%10000001	;
   1733  fd24		       81		      .byte.b	#%10000001	; 
   1734  fd25		       81		      .byte.b	#%10000001	; 
   1735  fd26		       81		      .byte.b	#%10000001	; 
   1736  fd27		       e7		      .byte.b	#%11100111	;
   1737  fd28				   C8
   1738  fd28		       e7		      .byte.b	#%11100111	;
   1739  fd29		       a5		      .byte.b	#%10100101	; 
   1740  fd2a		       e7		      .byte.b	#%11100111	; 
   1741  fd2b		       a5		      .byte.b	#%10100101	; 
   1742  fd2c		       e7		      .byte.b	#%11100111	;
   1743  fd2d				   C9
   1744  fd2d		       e7		      .byte.b	#%11100111	;
   1745  fd2e		       81		      .byte.b	#%10000001	; 
   1746  fd2f		       e7		      .byte.b	#%11100111	; 
   1747  fd30		       a5		      .byte.b	#%10100101	; 
   1748  fd31		       e7		      .byte.b	#%11100111	;
   1749  fd32				   CA
   1750  fd32		       a5		      .byte.b	#%10100101	;
   1751  fd33		       a5		      .byte.b	#%10100101	; 
   1752  fd34		       e7		      .byte.b	#%11100111	; 
   1753  fd35		       a5		      .byte.b	#%10100101	; 
   1754  fd36		       e7		      .byte.b	#%11100111	;
   1755  fd37				   CB
   1756  fd37		       66		      .byte.b	#%01100110	;
   1757  fd38		       a5		      .byte.b	#%10100101	; 
   1758  fd39		       66		      .byte.b	#%01100110	; 
   1759  fd3a		       a5		      .byte.b	#%10100101	;
   1760  fd3b		       66		      .byte.b	#%01100110	;
   1761  fd3c				   CC
   1762  fd3c		       e7		      .byte.b	#%11100111	;
   1763  fd3d		       24		      .byte.b	#%00100100	; 
   1764  fd3e		       24		      .byte.b	#%00100100	; 
   1765  fd3f		       24		      .byte.b	#%00100100	;
   1766  fd40		       e7		      .byte.b	#%11100111	;
   1767  fd41
   1768  fd41				   CD
   1769  fd41		       66		      .byte.b	#%01100110	;
   1770  fd42		       a5		      .byte.b	#%10100101	; 
   1771  fd43		       a5		      .byte.b	#%10100101	; 
   1772  fd44		       a5		      .byte.b	#%10100101	;
   1773  fd45		       66		      .byte.b	#%01100110	;
   1774  fd46
   1775  fd46				   CE
   1776  fd46		       e7		      .byte.b	#%11100111	;
   1777  fd47		       24		      .byte.b	#%00100100	; 
   1778  fd48		       e7		      .byte.b	#%11100111	; 
   1779  fd49		       24		      .byte.b	#%00100100	; 
   1780  fd4a		       e7		      .byte.b	#%11100111	;
   1781  fd4b
   1782  fd4b				   CF
   1783  fd4b		       24		      .byte.b	#%00100100	;
   1784  fd4c		       24		      .byte.b	#%00100100	; 
   1785  fd4d		       e7		      .byte.b	#%11100111	; 
   1786  fd4e		       24		      .byte.b	#%00100100	; 
   1787  fd4f		       e7		      .byte.b	#%11100111	;
   1788  fd50
   1789  fd50				   CG
   1790  fd50		       c3		      .byte.b	#%11000011	;
   1791  fd51		       a5		      .byte.b	#%10100101	; 
   1792  fd52		       a5		      .byte.b	#%10100101	; 
   1793  fd53		       24		      .byte.b	#%00100100	; 
   1794  fd54		       c3		      .byte.b	#%11000011	;	
   1795  fd55
   1796  fd55				   CH
   1797  fd55		       a5		      .byte.b	#%10100101	;
   1798  fd56		       a5		      .byte.b	#%10100101	; 
   1799  fd57		       e7		      .byte.b	#%11100111	; 
   1800  fd58		       a5		      .byte.b	#%10100101	; 
   1801  fd59		       a5		      .byte.b	#%10100101	;
   1802  fd5a
   1803  fd5a				   CL
   1804  fd5a		       e7		      .byte.b	#%11100111	;
   1805  fd5b		       24		      .byte.b	#%00100100	; 
   1806  fd5c		       24		      .byte.b	#%00100100	; 
   1807  fd5d		       24		      .byte.b	#%00100100	; 
   1808  fd5e		       24		      .byte.b	#%00100100	;
   1809  fd5f
   1810  fd5f				   CI
   1811  fd5f		       42		      .byte.b	#%01000010	;
   1812  fd60		       42		      .byte.b	#%01000010	; 
   1813  fd61		       42		      .byte.b	#%01000010	; 
   1814  fd62		       00		      .byte.b	#%00000000	; 
   1815  fd63		       42		      .byte.b	#%01000010	;
   1816  fd64
   1817  fd64				   CM
   1818  fd64		       a5		      .byte.b	#%10100101	;
   1819  fd65		       a5		      .byte.b	#%10100101	; 
   1820  fd66		       a5		      .byte.b	#%10100101	; 
   1821  fd67		       e7		      .byte.b	#%11100111	; 
   1822  fd68		       a5		      .byte.b	#%10100101	;
   1823  fd69
   1824  fd69				   CN
   1825  fd69		       a5		      .byte.b	#%10100101	;
   1826  fd6a		       a5		      .byte.b	#%10100101	; 
   1827  fd6b		       a5		      .byte.b	#%10100101	; 
   1828  fd6c		       a5		      .byte.b	#%10100101	; 
   1829  fd6d		       66		      .byte.b	#%01100110	;	
   1830  fd6e
   1831  fd6e
   1832  fd6e				   CO
   1833  fd6e		       42		      .byte.b	#%01000010	;
   1834  fd6f		       a5		      .byte.b	#%10100101	; 
   1835  fd70		       a5		      .byte.b	#%10100101	; 
   1836  fd71		       a5		      .byte.b	#%10100101	; 
   1837  fd72		       42		      .byte.b	#%01000010	;	
   1838  fd73
   1839  fd73				   CP
   1840  fd73		       24		      .byte.b	#%00100100	;
   1841  fd74		       24		      .byte.b	#%00100100	; 
   1842  fd75		       e7		      .byte.b	#%11100111	; 
   1843  fd76		       a5		      .byte.b	#%10100101	; 
   1844  fd77		       e7		      .byte.b	#%11100111	;
   1845  fd78
   1846  fd78				   CR
   1847  fd78		       a5		      .byte.b	#%10100101	;
   1848  fd79		       a5		      .byte.b	#%10100101	; 
   1849  fd7a		       66		      .byte.b	#%01100110	; 
   1850  fd7b		       a5		      .byte.b	#%10100101	; 
   1851  fd7c		       66		      .byte.b	#%01100110	;
   1852  fd7d
   1853  fd7d				   CS
   1854  fd7d		       66		      .byte.b	#%01100110	;
   1855  fd7e		       81		      .byte.b	#%10000001	; 
   1856  fd7f		       42		      .byte.b	#%01000010	; 
   1857  fd80		       24		      .byte.b	#%00100100	; 
   1858  fd81		       c3		      .byte.b	#%11000011	;
   1859  fd82
   1860  fd82				   CT
   1861  fd82		       42		      .byte.b	#%01000010	;
   1862  fd83		       42		      .byte.b	#%01000010	; 
   1863  fd84		       42		      .byte.b	#%01000010	; 
   1864  fd85		       42		      .byte.b	#%01000010	; 
   1865  fd86		       e7		      .byte.b	#%11100111	;
   1866  fd87
   1867  fd87				   CV
   1868  fd87		       42		      .byte.b	#%01000010	;
   1869  fd88		       a5		      .byte.b	#%10100101	; 
   1870  fd89		       a5		      .byte.b	#%10100101	; 
   1871  fd8a		       a5		      .byte.b	#%10100101	; 
   1872  fd8b		       a5		      .byte.b	#%10100101	;	
   1873  fd8c
   1874  fd8c				   CY
   1875  fd8c		       42		      .byte.b	#%01000010	;
   1876  fd8d		       42		      .byte.b	#%01000010	; 
   1877  fd8e		       42		      .byte.b	#%01000010	; 
   1878  fd8f		       a5		      .byte.b	#%10100101	; 
   1879  fd90		       a5		      .byte.b	#%10100101	;
   1880  fd91
   1881  fd91				   CW
   1882  fd91		       a5		      .byte.b	#%10100101	;
   1883  fd92		       e7		      .byte.b	#%11100111	; 
   1884  fd93		       a5		      .byte.b	#%10100101	; 
   1885  fd94		       a5		      .byte.b	#%10100101	; 
   1886  fd95		       a5		      .byte.b	#%10100101	;
   1887  fd96
   1888  fd96				   CZ
   1889  fd96		       e7		      .byte.b	#%11100111	;
   1890  fd97		       24		      .byte.b	#%00100100	; 
   1891  fd98		       42		      .byte.b	#%01000010	; 
   1892  fd99		       81		      .byte.b	#%10000001	; 
   1893  fd9a		       e7		      .byte.b	#%11100111	;
   1894  fd9b
   1895  fd9b				   Pipe
   1896  fd9b		       42		      .byte.b	#%01000010	;
   1897  fd9c		       00		      .byte.b	#%00000000	; 
   1898  fd9d		       42		      .byte.b	#%01000010	; 
   1899  fd9e		       00		      .byte.b	#%00000000	; 
   1900  fd9f		       42		      .byte.b	#%01000010	;
   1901  fda0
   1902  fda0				   Exclamation
   1903  fda0		       42		      .byte.b	#%01000010	;
   1904  fda1		       00		      .byte.b	#%00000000	; 
   1905  fda2		       42		      .byte.b	#%01000010	; 
   1906  fda3		       42		      .byte.b	#%01000010	; 
   1907  fda4		       42		      .byte.b	#%01000010	;
   1908  fda5
   1909  fda5				   Dot
   1910  fda5		       42		      .byte.b	#%01000010	;
   1911  fda6		       42		      .byte.b	#%01000010	; 
   1912  fda7		       00		      .byte.b	#%00000000	; 
   1913  fda8		       00		      .byte.b	#%00000000	; 
   1914  fda9		       00		      .byte.b	#%00000000	;
   1915  fdaa
   1916  fdaa				   Space		; Moved from the beggining so 0 to F is fast to draw.
   1917  fdaa		       00		      .byte.b	#0	;
   1918  fdab		       00		      .byte.b	#0	;
   1919  fdac		       00		      .byte.b	#0	;
   1920  fdad		       00		      .byte.b	#0	;
   1921  fdae		       00		      .byte.b	#0	;
   1922  fdaf
   1923  fdaf				   FontLookup		; Very fast font lookup for dynamic values!
   1924  fdaf		       04		      .byte.b	#<C0 + #FONT_OFFSET
   1925  fdb0		       09		      .byte.b	#<C1 + #FONT_OFFSET
   1926  fdb1		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1927  fdb2		       13		      .byte.b	#<C3 + #FONT_OFFSET
   1928  fdb3		       18		      .byte.b	#<C4 + #FONT_OFFSET
   1929  fdb4		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   1930  fdb5		       22		      .byte.b	#<C6 + #FONT_OFFSET
   1931  fdb6		       27		      .byte.b	#<C7 + #FONT_OFFSET
   1932  fdb7		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   1933  fdb8		       31		      .byte.b	#<C9 + #FONT_OFFSET
   1934  fdb9		       36		      .byte.b	#<CA + #FONT_OFFSET
   1935  fdba		       3b		      .byte.b	#<CB + #FONT_OFFSET
   1936  fdbb		       40		      .byte.b	#<CC + #FONT_OFFSET
   1937  fdbc		       45		      .byte.b	#<CD + #FONT_OFFSET
   1938  fdbd		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1939  fdbe		       4f		      .byte.b	#<CF + #FONT_OFFSET
   1940  fdbf
   1941  fdbf				   EngineSoundType
   1942  fdbf		       02		      .byte.b	#2
   1943  fdc0		       02		      .byte.b	#2
   1944  fdc1		       0e		      .byte.b	#14
   1945  fdc2		       06		      .byte.b	#6
   1946  fdc3		       06		      .byte.b	#6
   1947  fdc4		       0e		      .byte.b	#14
   1948  fdc5
   1949  fdc5				   EngineBaseFrequence
   1950  fdc5		       1f		      .byte.b	#31
   1951  fdc6		       15		      .byte.b	#21
   1952  fdc7		       14		      .byte.b	#20
   1953  fdc8		       1f		      .byte.b	#31
   1954  fdc9		       16		      .byte.b	#22
   1955  fdca		       03		      .byte.b	#3
   1956  fdcb
   1957  fdcb				   TachometerSizeLookup1
   1958  fdcb		       1f		      .byte.b	#%00011111
   1959  fdcc		       3f		      .byte.b	#%00111111
   1960  fdcd		       7f		      .byte.b	#%01111111
   1961  fdce		       ff		      .byte.b	#%11111111
   1962  fdcf		       ff		      .byte.b	#%11111111
   1963  fdd0		       ff		      .byte.b	#%11111111
   1964  fdd1		       ff		      .byte.b	#%11111111
   1965  fdd2		       ff		      .byte.b	#%11111111
   1966  fdd3
   1967  fdd3				   TachometerSizeLookup2
   1968  fdd3		       00		      .byte.b	#%00000000
   1969  fdd4		       00		      .byte.b	#%00000000
   1970  fdd5		       00		      .byte.b	#%00000000
   1971  fdd6		       00		      .byte.b	#%00000000
   1972  fdd7		       80		      .byte.b	#%10000000
   1973  fdd8		       c0		      .byte.b	#%11000000
   1974  fdd9		       e0		      .byte.b	#%11100000
   1975  fdda		       f0		      .byte.b	#%11110000
   1976  fddb
   1977  fddb				   TachometerGearLookup
   1978  fddb		       01		      .byte.b	#%00000001
   1979  fddc		       02		      .byte.b	#%00000010
   1980  fddd		       04		      .byte.b	#%00000100
   1981  fdde		       08		      .byte.b	#%00001000
   1982  fddf		       10		      .byte.b	#%00010000
   1983  fde0		       30		      .byte.b	#%00110000
   1984  fde1
   1985  fe00					      org	$FE00
   1986  fe00				   AesTable
   1987  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   1988  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   1989  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   1990  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   1991  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   1992  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   1993  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   1994  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   1995  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   1996  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   1997  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   1998  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   1999  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2000  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2001  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2002  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2003  ff00
   2004  ff00							; From FF00 to FFFB (122 bytes) to use here
   2005  ff00
   2006  ff00				   StaticText		; All static text must be on the same MSB block. 
   2007  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2008  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2009  ff01		       59		      .byte.b	#<CH + #FONT_OFFSET
   2010  ff02		       77		      .byte.b	#<CP + #FONT_OFFSET
   2011  ff03		       86		      .byte.b	#<CT + #FONT_OFFSET
   2012  ff04		       a4		      .byte.b	#<Exclamation + #FONT_OFFSET
   2013  ff05
   2014  ff05				   HellwayLeftText
   2015  ff05		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2016  ff06		       9f		      .byte.b	#<Pipe + #FONT_OFFSET
   2017  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2018  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2019  ff09		       5e		      .byte.b	#<CL + #FONT_OFFSET
   2020  ff0a
   2021  ff0a				   HellwayRightText
   2022  ff0a		       5e		      .byte.b	#<CL + #FONT_OFFSET
   2023  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2024  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2025  ff0d		       90		      .byte.b	#<CY + #FONT_OFFSET
   2026  ff0e		       a4		      .byte.b	#<Exclamation + #FONT_OFFSET
   2027  ff0f
   2028  ff0f				   OpbText
   2029  ff0f		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2030  ff10		       9f		      .byte.b	#<Pipe + #FONT_OFFSET
   2031  ff11		       72		      .byte.b	#<CO + #FONT_OFFSET
   2032  ff12		       77		      .byte.b	#<CP + #FONT_OFFSET
   2033  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2034  ff14
   2035  ff14				   YearText
   2036  ff14		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2037  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2038  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2039  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2040  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2041  ff19
   2042  ff19				   GameText
   2043  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2044  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2045  ff1b		       68		      .byte.b	#<CM + #FONT_OFFSET
   2046  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2047  ff1d		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2048  ff1e
   2049  ff1e				   OverText
   2050  ff1e		       72		      .byte.b	#<CO + #FONT_OFFSET
   2051  ff1f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2052  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2053  ff21		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2054  ff22		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2055  ff23				   GoText
   2056  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2057  ff24		       72		      .byte.b	#<CO + #FONT_OFFSET
   2058  ff25		       a4		      .byte.b	#<Exclamation + #FONT_OFFSET
   2059  ff26		       a4		      .byte.b	#<Exclamation + #FONT_OFFSET
   2060  ff27		       a4		      .byte.b	#<Exclamation + #FONT_OFFSET
   2061  ff28
   2062  ff28				   ZeldaTextLeft
   2063  ff28		       9a		      .byte.b	#<CZ + #FONT_OFFSET
   2064  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2065  ff2a		       5e		      .byte.b	#<CL + #FONT_OFFSET
   2066  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2067  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2068  ff2d
   2069  ff2d				   ZeldaTextRight
   2070  ff2d		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2071  ff2e		       68		      .byte.b	#<CM + #FONT_OFFSET
   2072  ff2f		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2073  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2074  ff31		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2075  ff32
   2076  ff32				   ZeldaDateLeft
   2077  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2078  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2079  ff34		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2080  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2081  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2082  ff37
   2083  ff37				   ZeldaDateRight
   2084  ff37		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2085  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2086  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2087  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2088  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2089  ff3c
   2090  ff3c				   PolvinhosTextLeft
   2091  ff3c		       77		      .byte.b	#<CP + #FONT_OFFSET
   2092  ff3d		       72		      .byte.b	#<CO + #FONT_OFFSET
   2093  ff3e		       5e		      .byte.b	#<CL + #FONT_OFFSET
   2094  ff3f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2095  ff40		       63		      .byte.b	#<CI + #FONT_OFFSET
   2096  ff41
   2097  ff41				   PolvinhosTextRight
   2098  ff41		       6d		      .byte.b	#<CN + #FONT_OFFSET
   2099  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2100  ff43		       72		      .byte.b	#<CO + #FONT_OFFSET
   2101  ff44		       81		      .byte.b	#<CS + #FONT_OFFSET
   2102  ff45		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2103  ff46
   2104  ff46				   PolvinhosDateLeft
   2105  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2106  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2107  ff48		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2108  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2109  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2110  ff4b
   2111  ff4b				   PolvinhosDateRight
   2112  ff4b		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2113  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2114  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2115  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2116  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2117  ff50
   2118  ff50				   IvonneTextLeft
   2119  ff50		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2120  ff51		       72		      .byte.b	#<CO + #FONT_OFFSET
   2121  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2122  ff53		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2123  ff54		       63		      .byte.b	#<CI + #FONT_OFFSET
   2124  ff55
   2125  ff55				   IvonneTextRight
   2126  ff55		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2127  ff56		       72		      .byte.b	#<CO + #FONT_OFFSET
   2128  ff57		       6d		      .byte.b	#<CN + #FONT_OFFSET
   2129  ff58		       6d		      .byte.b	#<CN + #FONT_OFFSET
   2130  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2131  ff5a
   2132  ff5a				   IvonneDateLeft
   2133  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2134  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2135  ff5c		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2136  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2137  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2138  ff5f
   2139  ff5f				   IvonneDateRight
   2140  ff5f		       a9		      .byte.b	#<Dot + #FONT_OFFSET
   2141  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2142  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2143  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2144  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2145  ff64
   2146  ff64				   PaperArtTextLeft
   2147  ff64		       77		      .byte.b	#<CP + #FONT_OFFSET
   2148  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2149  ff66		       77		      .byte.b	#<CP + #FONT_OFFSET
   2150  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2151  ff68		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2152  ff69
   2153  ff69				   PaperArtTextRight
   2154  ff69		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2155  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2156  ff6b		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2157  ff6c		       86		      .byte.b	#<CT + #FONT_OFFSET
   2158  ff6d		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2159  ff6e
   2160  ff6e				   LeonardoTextLeft
   2161  ff6e		       5e		      .byte.b	#<CL + #FONT_OFFSET
   2162  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2163  ff70		       72		      .byte.b	#<CO + #FONT_OFFSET
   2164  ff71		       6d		      .byte.b	#<CN + #FONT_OFFSET
   2165  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2166  ff73
   2167  ff73				   LeonardoTextRight
   2168  ff73		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2169  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2170  ff75		       72		      .byte.b	#<CO + #FONT_OFFSET
   2171  ff76		       ae		      .byte.b	#<Space + #FONT_OFFSET
   2172  ff77		       6d		      .byte.b	#<CN + #FONT_OFFSET
   2173  ff78
   2174  ff78
   2175  ff78				   EndStaticText
   2176  ff78
   2177  ff78				   CarSprite		; Upside down
   2178  ff78		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   2179  ff79		       7e		      .byte.b	#%01111110
   2180  ff7a		       24		      .byte.b	#%00100100
   2181  ff7b		       bd		      .byte.b	#%10111101
   2182  ff7c		       3c		      .byte.b	#%00111100
   2183  ff7d		       bd		      .byte.b	#%10111101
   2184  ff7e		       3c		      .byte.b	#%00111100
   2185  ff7f		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
   2186  ffb1
   2187  ffb1				   TrafficSpeeds
   2188  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2189  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2190  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2191  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2192  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2193  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2194  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2195  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2196  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2197  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2198  ffbb				   TrafficSpeedsHighDelta
   2199  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2200  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2201  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2202  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2203  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2204  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2205  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2206  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2207  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2208  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2209  ffc5
   2210  fffc					      org	$FFFC
   2211  fffc		       00 f0		      .word.w	BeforeStart
   2212  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
