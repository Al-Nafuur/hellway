------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0c	   BREAK_SPEED =	12
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 88	   ParallaxMode =	$88
    111  f000
    112  f000		       00 8c	   FrameCount0 =	$8C	;
    113  f000		       00 8d	   FrameCount1 =	$8D	;
    114  f000
    115  f000		       00 8e	   Player0SpeedL =	$8E
    116  f000		       00 8f	   Player0SpeedH =	$8F
    117  f000
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    123  f000
    124  f000		       00 a4	   CheckpointBcd0 =	$A4
    125  f000		       00 a5	   CheckpointBcd1 =	$A5
    126  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    127  f000		       00 a7	   CarSpritePointerL =	$A7
    128  f000		       00 a8	   CarSpritePointerH =	$A8
    129  f000		       00 a9	   CurrentCarId =	$A9
    130  f000		       00 aa	   AccelerateBuffer =	$AA	; Chnage speed on buffer overflow.
    131  f000
    132  f000							;Temporary variables, multiple uses
    133  f000		       00 b0	   Tmp0       =	$B0
    134  f000		       00 b1	   Tmp1       =	$B1
    135  f000		       00 b2	   Tmp2       =	$B2
    136  f000		       00 b3	   Tmp3       =	$B3
    137  f000
    138  f000		       00 b4	   ScoreBcd0  =	$B4
    139  f000		       00 b5	   ScoreBcd1  =	$B5
    140  f000		       00 b6	   ScoreBcd2  =	$B6
    141  f000		       00 b7	   ScoreBcd3  =	$B7
    142  f000
    143  f000		       00 b8	   CollisionCounter =	$B8
    144  f000		       00 b9	   Player0X   =	$B9
    145  f000		       00 ba	   CountdownTimer =	$BA
    146  f000		       00 bb	   Traffic0Msb =	$BB
    147  f000		       00 bc	   SwitchDebounceCounter =	$BC
    148  f000
    149  f000		       00 bd	   TimeBcd0   =	$BD
    150  f000		       00 be	   TimeBcd1   =	$BE
    151  f000		       00 bf	   TimeBcd2   =	$BF
    152  f000
    153  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    154  f000		       00 c1	   TrafficChance =	$C1
    155  f000		       00 c2	   CheckpointTime =	$C2
    156  f000		       00 c3	   TrafficColor =	$C3
    157  f000		       00 c4	   CurrentDifficulty =	$C4
    158  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    159  f000							;Bit 2 speed delta, Bit 3 random traffic 
    160  f000
    161  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    162  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    163  f000
    164  f000		       00 ca	   BorderType =	$CA
    165  f000
    166  f000		       00 cb	   HitCountBcd0 =	$CB
    167  f000		       00 cc	   HitCountBcd1 =	$CC
    168  f000
    169  f000		       00 cd	   GlideTimeBcd0 =	$CD
    170  f000		       00 ce	   GlideTimeBcd1 =	$CE
    171  f000
    172  f000		       00 cf	   OneSecondConter =	$CF
    173  f000
    174  f000		       00 d0	   ScoreD0    =	$D0
    175  f000		       00 d1	   ScoreD1    =	$D1
    176  f000		       00 d2	   ScoreD2    =	$D2
    177  f000		       00 d3	   ScoreD3    =	$D3
    178  f000		       00 d4	   ScoreD4    =	$D4
    179  f000		       00 d5	   ScoreFontColor =	$D5
    180  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    181  f000		       00 d7	   NextCheckpoint =	$D7
    182  f000
    183  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    184  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    185  f000
    186  f000
    187  f000							;generic start up stuff, put zero in almost all...
    188  f000				   BeforeStart		;All variables that are kept on game reset or select
    189  f000		       a0 00		      LDY	#0
    190  f002		       84 bc		      STY	SwitchDebounceCounter
    191  f004		       84 c4		      STY	CurrentDifficulty
    192  f006		       84 c0		      STY	GameStatus
    193  f008		       a0 10		      LDY	#16
    194  f00a		       84 c5		      STY	GameMode
    195  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    196  f00e		       84 88		      STY	ParallaxMode
    197  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    198  f012		       84 a9		      STY	CurrentCarId
    199  f014
    200  f014				   Start
    201  f014		       78		      SEI
    202  f015		       d8		      CLD
    203  f016		       a2 ff		      LDX	#$FF
    204  f018		       9a		      TXS
    205  f019		       a9 00		      LDA	#0
    206  f01b				   ClearMem
    207  f01b		       e0 bc		      CPX	#SwitchDebounceCounter
    208  f01d		       f0 16		      BEQ	SkipClean
    209  f01f		       e0 c5		      CPX	#GameMode
    210  f021		       f0 12		      BEQ	SkipClean
    211  f023		       e0 88		      CPX	#ParallaxMode
    212  f025		       f0 0e		      BEQ	SkipClean
    213  f027		       e0 a9		      CPX	#CurrentCarId
    214  f029		       f0 0a		      BEQ	SkipClean
    215  f02b		       e0 c4		      CPX	#CurrentDifficulty
    216  f02d		       f0 06		      BEQ	SkipClean
    217  f02f		       e0 c0		      CPX	#GameStatus
    218  f031		       f0 02		      BEQ	SkipClean
    219  f033		       95 00		      STA	0,X
    220  f035				   SkipClean
    221  f035		       ca		      DEX
    222  f036		       d0 e3		      BNE	ClearMem
    223  f038
    224  f038							;Setting some variables...
    225  f038
    226  f038				   SettingTrafficOffsets		; Time sensitive with player H position
    227  f038		       85 02		      STA	WSYNC	;We will set player position
    228  f03a		       20 da f7 	      JSR	DefaultOffsets
    229  f03d
    230  f03d		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    231  f040		       85 8e		      STA	Player0SpeedL
    232  f042
      0  f042					      SLEEP	11	;18
      1  f042				   .CYCLES    SET	11
      2  f042
      3  f042				  -	      IF	.CYCLES < 2
      4  f042				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f042				  -	      ERR
      6  f042					      ENDIF
      7  f042
      8  f042					      IF	.CYCLES & 1
      9  f042				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f042				  -	      nop	0
     11  f042					      ELSE
     12  f042		       24 00		      bit	VSYNC
     13  f044					      ENDIF
     14  f044				   .CYCLES    SET	.CYCLES - 3
     15  f044					      ENDIF
     16  f044
     17  f044					      REPEAT	.CYCLES / 2
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     19  f048					      REPEND
    234  f048		       85 10		      STA	RESP0
    235  f04a
    236  f04a		       a2 00		      LDX	#0
    237  f04c		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    238  f04f		       85 a6		      STA	StartSWCHB	; For game over
    239  f051		       29 c0		      AND	#%11000000
    240  f053		       f0 0b		      BEQ	CallConfigureDifficulty
    241  f055		       e8		      INX
    242  f056		       c9 80		      CMP	#%10000000
    243  f058		       f0 06		      BEQ	CallConfigureDifficulty
    244  f05a		       e8		      INX
    245  f05b		       c9 40		      CMP	#%01000000
    246  f05d		       f0 01		      BEQ	CallConfigureDifficulty
    247  f05f		       e8		      INX
    248  f060
    249  f060				   CallConfigureDifficulty
    250  f060		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    251  f062		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    252  f064		       a5 c0		      LDA	GameStatus
    253  f066		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    254  f068				   NextCar
    255  f068		       a4 a9		      LDY	CurrentCarId
    256  f06a		       c8		      INY
    257  f06b		       98		      TYA
    258  f06c		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    259  f06e		       85 a9		      STA	CurrentCarId
    260  f070				   StoreCurrentDifficulty
    261  f070		       86 c4		      STX	CurrentDifficulty
    262  f072		       20 92 f7 	      JSR	ConfigureDifficulty
    263  f075
    264  f075				   ConfigureCarSprite
    265  f075		       a4 a9		      LDY	CurrentCarId
    266  f077		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    267  f07a		       85 a7		      STA	CarSpritePointerL
    268  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    269  f07f		       85 a8		      STA	CarSpritePointerH
    270  f081
    271  f081				   SetGameNotRunning
    272  f081		       a9 00		      LDA	#0
    273  f083		       85 c0		      STA	GameStatus
    274  f085
    275  f085				   ConfigureOneSecondTimer
    276  f085		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    277  f087		       85 cf		      STA	OneSecondConter
    278  f089
    279  f089				   HPositioning
    280  f089		       85 02		      STA	WSYNC
    281  f08b
    282  f08b		       a9 30		      LDA	#%00110000	;2 Missile Size
    283  f08d		       85 04		      STA	NUSIZ0	;3
    284  f08f		       85 05		      STA	NUSIZ1	;3
    285  f091
    286  f091		       a9 35		      LDA	#PLAYER_0_X_START	;2
    287  f093		       85 b9		      STA	Player0X	;3
    288  f095
    289  f095		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    290  f097		       85 ba		      STA	CountdownTimer	;3
    291  f099
    292  f099		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    293  f09b		       85 d7		      STA	NextCheckpoint
    294  f09d
    295  f09d		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f09f					      SLEEP	11	;
      1  f09f				   .CYCLES    SET	11
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f					      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f					      ELSE
     12  f09f		       24 00		      bit	VSYNC
     13  f0a1					      ENDIF
     14  f0a1				   .CYCLES    SET	.CYCLES - 3
     15  f0a1					      ENDIF
     16  f0a1
     17  f0a1					      REPEAT	.CYCLES / 2
     18  f0a1		       ea		      nop
     17  f0a1					      REPEND
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     17  f0a3					      REPEND
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    297  f0a5		       85 11		      STA	RESP1
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    299  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2	;
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    301  f0ab		       85 12		      STA	RESM0
      0  f0ad					      SLEEP	2
      1  f0ad				   .CYCLES    SET	2
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad				  -	      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad				  -	      ELSE
     12  f0ad				  -	      bit	VSYNC
     13  f0ad				  -	      ENDIF
     14  f0ad				  -.CYCLES    SET	.CYCLES - 3
     15  f0ad					      ENDIF
     16  f0ad
     17  f0ad					      REPEAT	.CYCLES / 2
     18  f0ad		       ea		      nop
     19  f0ae					      REPEND
    303  f0ae		       85 13		      STA	RESM1
    304  f0b0
    305  f0b0		       a9 f0		      LDA	#$F0
    306  f0b2		       85 24		      STA	HMBL
    307  f0b4		       85 22		      STA	HMM0
    308  f0b6		       85 23		      STA	HMM1
    309  f0b8		       85 02		      STA	WSYNC
    310  f0ba		       85 2a		      STA	HMOVE
    311  f0bc		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    312  f0be		       85 2b		      STA	HMCLR
    313  f0c0
    314  f0c0							;SLEEP 24
    315  f0c0							;STA HMCLR
    316  f0c0
    317  f0c0							;VSYNC time
    318  f0c0				   MainLoop
    319  f0c0		       a9 02		      LDA	#2
    320  f0c2		       85 00		      STA	VSYNC
    321  f0c4		       85 02		      STA	WSYNC
    322  f0c6		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    323  f0c8		       85 2a		      STA	HMOVE	;2
    324  f0ca				   ConfigVBlankTimer
    325  f0ca		       a5 c5		      LDA	GameMode
    326  f0cc		       c9 10		      CMP	#MAX_GAME_MODE
    327  f0ce		       f0 05		      BEQ	SetVblankTimerQrCode
    328  f0d0		       a9 29		      LDA	#VBLANK_TIMER
    329  f0d2		       4c d7 f0 	      JMP	SetVblankTimer
    330  f0d5				   SetVblankTimerQrCode
    331  f0d5		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    332  f0d7				   SetVblankTimer
    333  f0d7		       85 02		      STA	WSYNC	;3
    334  f0d9		       8d 96 02 	      STA	TIM64T	;3	
    335  f0dc		       a9 00		      LDA	#0	;2
    336  f0de		       85 00		      STA	VSYNC	;3	
    337  f0e0
    338  f0e0							;Read Fire Button before, will make it start the game for now.
    339  f0e0				   StartGame
    340  f0e0		       a5 0c		      LDA	INPT4	;3
    341  f0e2		       30 2e		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    342  f0e4		       a5 c0		      LDA	GameStatus	;3
    343  f0e6		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
    344  f0e8		       d0 28		      BNE	SkipGameStart
    345  f0ea		       a5 c5		      LDA	GameMode
    346  f0ec		       c9 10		      CMP	#MAX_GAME_MODE
    347  f0ee		       d0 0b		      BNE	SetGameRunning
    348  f0f0		       a9 00		      LDA	#0
    349  f0f2		       85 c5		      STA	GameMode
    350  f0f4		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    351  f0f6		       85 bc		      STA	SwitchDebounceCounter
    352  f0f8		       4c 12 f1 	      JMP	SkipGameStart
    353  f0fb				   SetGameRunning
    354  f0fb		       e6 c0		      INC	GameStatus
    355  f0fd		       a9 00		      LDA	#0	;
    356  f0ff		       85 8c		      STA	FrameCount0
    357  f101		       85 8d		      STA	FrameCount1
    358  f103		       a9 0a		      LDA	#10
    359  f105		       85 19		      STA	AUDV0
    360  f107		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    361  f109		       85 d5		      STA	ScoreFontColor
    362  f10b		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    363  f10d		       85 d6		      STA	ScoreFontColorHoldChange
    364  f10f		       4c 8e f1 	      JMP	SkipIncFC1	; Make the worse case stable
    365  f112				   SkipGameStart
    366  f112
    367  f112				   RandomizeGame
    368  f112		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    369  f114		       d0 30		      BNE	EndRandomizeGame
    370  f116		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    371  f118		       29 02		      AND	#%00000010
    372  f11a		       f0 27		      BEQ	DeterministicGame
    373  f11c		       a6 96		      LDX	TrafficOffset1 + 2
    374  f11e		       bd 00 fe 	      LDA	AesTable,X
    375  f121		       45 8c		      EOR	FrameCount0
    376  f123		       85 96		      STA	TrafficOffset1 + 2
    377  f125		       a6 9a		      LDX	TrafficOffset2 + 2
    378  f127		       bd 00 fe 	      LDA	AesTable,X
    379  f12a		       45 8c		      EOR	FrameCount0
    380  f12c		       85 9a		      STA	TrafficOffset2 + 2
    381  f12e		       a6 9e		      LDX	TrafficOffset3 + 2
    382  f130		       bd 00 fe 	      LDA	AesTable,X
    383  f133		       45 8c		      EOR	FrameCount0
    384  f135		       85 9e		      STA	TrafficOffset3 + 2
    385  f137		       a6 a2		      LDX	TrafficOffset4 + 2
    386  f139		       bd 00 fe 	      LDA	AesTable,X
    387  f13c		       45 8c		      EOR	FrameCount0
    388  f13e		       85 a2		      STA	TrafficOffset4 + 2
    389  f140		       4c 46 f1 	      JMP	EndRandomizeGame
    390  f143
    391  f143				   DeterministicGame
    392  f143		       20 da f7 	      JSR	DefaultOffsets
    393  f146
    394  f146				   EndRandomizeGame
    395  f146
    396  f146				   ReadSwitches
    397  f146		       a6 bc		      LDX	SwitchDebounceCounter
    398  f148		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    399  f14a		       a9 01		      LDA	#%00000001
    400  f14c		       2c 82 02 	      BIT	SWCHB
    401  f14f		       d0 07		      BNE	SkipReset
    402  f151		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    403  f153		       85 bc		      STA	SwitchDebounceCounter
    404  f155		       4c 14 f0 	      JMP	Start
    405  f158				   SkipReset
    406  f158
    407  f158				   GameModeSelect
    408  f158		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    409  f15a		       d0 27		      BNE	SkipGameSelect
    410  f15c		       20 92 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    411  f15f				   ReadDpadParallax
    412  f15f		       ad 80 02 	      LDA	SWCHA
    413  f162		       29 f0		      AND	#%11110000
    414  f164		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    415  f166		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    416  f168		       85 88		      STA	ParallaxMode
    417  f16a				   ContinueGameSelect
    418  f16a		       a9 02		      LDA	#%00000010
    419  f16c		       2c 82 02 	      BIT	SWCHB
    420  f16f		       d0 12		      BNE	SkipGameSelect
    421  f171		       a6 c5		      LDX	GameMode
    422  f173		       e0 10		      CPX	#MAX_GAME_MODE
    423  f175		       f0 04		      BEQ	ResetGameMode
    424  f177		       e8		      INX
    425  f178		       4c 7d f1 	      JMP	StoreGameMode
    426  f17b				   ResetGameMode
    427  f17b		       a2 00		      LDX	#0
    428  f17d				   StoreGameMode
    429  f17d		       86 c5		      STX	GameMode
    430  f17f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    431  f181		       85 bc		      STA	SwitchDebounceCounter
    432  f183				   SkipGameSelect
    433  f183		       4c 88 f1 	      JMP	EndReadSwitches
    434  f186				   DecrementSwitchDebounceCounter
    435  f186		       c6 bc		      DEC	SwitchDebounceCounter
    436  f188				   EndReadSwitches
    437  f188
    438  f188				   CountFrame
    439  f188		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    440  f18a		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    441  f18c		       e6 8d		      INC	FrameCount1	; 5 Still not used
    442  f18e				   SkipIncFC1
    443  f18e
    444  f18e				   CallDrawQrCode
    445  f18e		       a5 c5		      LDA	GameMode
    446  f190		       c9 10		      CMP	#MAX_GAME_MODE
    447  f192		       d0 03		      BNE	TestIsGameRunning
    448  f194		       4c 64 fc 	      JMP	DrawQrCode
    449  f197
    450  f197							;Does not update the game if not running
    451  f197				   TestIsGameRunning
    452  f197		       a5 c0		      LDA	GameStatus	;3
    453  f199		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    454  f19b		       4c 96 f3 	      JMP	SkipUpdateLogic
    455  f19e				   ContinueWithGameLogic
    456  f19e
    457  f19e
    458  f19e				   EverySecond		; 64 frames to be more precise
    459  f19e		       a9 3f		      LDA	#%00111111
    460  f1a0		       25 8c		      AND	FrameCount0
    461  f1a2		       d0 06		      BNE	SkipEverySecondAction
    462  f1a4		       c5 ba		      CMP	CountdownTimer
    463  f1a6		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    464  f1a8		       c6 ba		      DEC	CountdownTimer
    465  f1aa				   SkipEverySecondAction
    466  f1aa
    467  f1aa
    468  f1aa				   BreakOnTimeOver		; Uses LDX as the breaking speed
    469  f1aa		       a2 00		      LDX	#0
    470  f1ac		       a5 ba		      LDA	CountdownTimer
    471  f1ae		       d0 0b		      BNE	Break
    472  f1b0		       a4 a9		      LDY	CurrentCarId
    473  f1b2		       a5 8c		      LDA	FrameCount0
    474  f1b4		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    475  f1b7		       d0 02		      BNE	Break
    476  f1b9		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    477  f1bb
    478  f1bb				   Break
    479  f1bb		       a9 20		      LDA	#%00100000	;Down in controller
    480  f1bd		       2c 80 02 	      BIT	SWCHA
    481  f1c0		       d0 0e		      BNE	BreakNonZero
    482  f1c2		       a5 0c		      LDA	INPT4	;3
    483  f1c4		       10 08		      BPL	BreakWhileAccelerating
    484  f1c6		       a4 8f		      LDY	Player0SpeedH
    485  f1c8		       be dd ff 	      LDX	BreakSpeedTable,Y	; Different break speeds depending on speed.
    486  f1cb		       4c d0 f1 	      JMP	BreakNonZero
    487  f1ce				   BreakWhileAccelerating		; Allow better control while breaking.
    488  f1ce		       a2 06		      LDX	#(BREAK_SPEED / 2)
    489  f1d0
    490  f1d0				   BreakNonZero
    491  f1d0		       e0 00		      CPX	#0
    492  f1d2		       f0 2b		      BEQ	SkipBreak
    493  f1d4		       86 b0		      STX	Tmp0
    494  f1d6
    495  f1d6				   DecreaseSpeed
    496  f1d6		       38		      SEC
    497  f1d7		       a5 8e		      LDA	Player0SpeedL
    498  f1d9		       e5 b0		      SBC	Tmp0
    499  f1db		       85 8e		      STA	Player0SpeedL
    500  f1dd		       a5 8f		      LDA	Player0SpeedH
    501  f1df		       e9 00		      SBC	#0
    502  f1e1		       85 8f		      STA	Player0SpeedH
    503  f1e3
    504  f1e3				   CheckMinSpeed
    505  f1e3		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    506  f1e5		       c9 00		      CMP	#CAR_MIN_SPEED_H
    507  f1e7		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    508  f1e9		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    509  f1eb
    510  f1eb				   CompareLBreakSpeed
    511  f1eb		       a5 8e		      LDA	Player0SpeedL
    512  f1ed		       c9 00		      CMP	#CAR_MIN_SPEED_L
    513  f1ef		       90 03		      BCC	ResetMinSpeed	; Less than memory
    514  f1f1		       4c fc f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    515  f1f4
    516  f1f4				   ResetMinSpeed
    517  f1f4		       a9 00		      LDA	#CAR_MIN_SPEED_H
    518  f1f6		       85 8f		      STA	Player0SpeedH
    519  f1f8		       a9 00		      LDA	#CAR_MIN_SPEED_L
    520  f1fa		       85 8e		      STA	Player0SpeedL
    521  f1fc
    522  f1fc				   SkipAccelerateIfBreaking
    523  f1fc		       4c 41 f2 	      JMP	SkipAccelerate
    524  f1ff				   SkipBreak
    525  f1ff
    526  f1ff				   Acelerates
    527  f1ff		       a5 ba		      LDA	CountdownTimer
    528  f201		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    529  f203
    530  f203				   ContinueAccelerateTest
    531  f203		       a5 0c		      LDA	INPT4	;3
    532  f205		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    533  f207		       a9 10		      LDA	#%00010000	;UP in controller
    534  f209		       2c 80 02 	      BIT	SWCHA
    535  f20c		       d0 33		      BNE	SkipAccelerate
    536  f20e
    537  f20e				   IncreaseCarSpeed
    538  f20e		       a2 02		      LDX	#2
    539  f210		       a4 a9		      LDY	CurrentCarId
    540  f212				   IncreaseCarSpeedLoop
    541  f212							;Adds speed
    542  f212		       18		      CLC
    543  f213		       a5 aa		      LDA	AccelerateBuffer
    544  f215		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    545  f218		       85 aa		      STA	AccelerateBuffer
    546  f21a		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    547  f21c		       e6 8e		      INC	Player0SpeedL
    548  f21e		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    549  f220		       e6 8f		      INC	Player0SpeedH
    550  f222				   ContinueIncreaseSpeedLoop
    551  f222		       ca		      DEX
    552  f223		       d0 ed		      BNE	IncreaseCarSpeedLoop
    553  f225				   SkipIncreaseCarSpeed
    554  f225
    555  f225				   CheckIfAlreadyMaxSpeed
    556  f225		       a5 8f		      LDA	Player0SpeedH
    557  f227		       c9 02		      CMP	#CAR_MAX_SPEED_H
    558  f229		       90 16		      BCC	SkipAccelerate	; less than my max speed
    559  f22b		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    560  f22d							;High bit is max, compare the low
    561  f22d		       a4 a9		      LDY	CurrentCarId
    562  f22f		       a5 8e		      LDA	Player0SpeedL
    563  f231		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    564  f234		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    565  f236							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    566  f236
    567  f236				   ResetToMaxSpeed		; Speed is more, or is already max
    568  f236		       a9 02		      LDA	#CAR_MAX_SPEED_H
    569  f238		       85 8f		      STA	Player0SpeedH
    570  f23a		       a4 a9		      LDY	CurrentCarId
    571  f23c		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    572  f23f		       85 8e		      STA	Player0SpeedL
    573  f241				   SkipAccelerate
    574  f241
    575  f241				   InitUpdateOffsets
    576  f241		       a2 00		      LDX	#0	; Memory Offset 24 bit
    577  f243		       a0 00		      LDY	#0	; Line Speeds 16 bits
    578  f245		       a5 91		      LDA	TrafficOffset0 + 1	;
    579  f247		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    580  f249		       a5 c5		      LDA	GameMode
    581  f24b		       29 04		      AND	#%00000100	; GameModes with high delta
    582  f24d		       f0 02		      BEQ	UpdateOffsets
    583  f24f		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    584  f251
    585  f251				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    586  f251		       38		      SEC
    587  f252		       a5 8e		      LDA	Player0SpeedL
    588  f254		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    589  f257		       85 b0		      STA	Tmp0
    590  f259		       c8		      INY
    591  f25a		       a5 8f		      LDA	Player0SpeedH
    592  f25c		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    593  f25f		       85 b1		      STA	Tmp1
    594  f261		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    595  f263		       e9 00		      SBC	#0
    596  f265		       85 b2		      STA	Tmp2
    597  f267
    598  f267				   AddsTheResult
    599  f267		       18		      CLC
    600  f268		       a5 b0		      LDA	Tmp0
    601  f26a		       75 90		      ADC	TrafficOffset0,X
    602  f26c		       95 90		      STA	TrafficOffset0,X
    603  f26e		       e8		      INX
    604  f26f		       a5 b1		      LDA	Tmp1
    605  f271		       75 90		      ADC	TrafficOffset0,X
    606  f273		       95 90		      STA	TrafficOffset0,X
    607  f275		       e8		      INX
    608  f276		       a5 b2		      LDA	Tmp2	; Carry
    609  f278		       75 90		      ADC	TrafficOffset0,X
    610  f27a		       95 90		      STA	TrafficOffset0,X
    611  f27c		       90 06		      BCC	CalculateOffsetCache
    612  f27e		       e0 02		      CPX	#2	;MSB offset 0
    613  f280		       d0 02		      BNE	CalculateOffsetCache
    614  f282		       e6 bb		      INC	Traffic0Msb
    615  f284
    616  f284				   CalculateOffsetCache
    617  f284		       e8		      INX
    618  f285		       38		      SEC
    619  f286		       69 00		      ADC	#0	;Increment by one
    620  f288		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    621  f28a
    622  f28a				   PrepareNextUpdateLoop
    623  f28a		       c8		      INY
    624  f28b		       e8		      INX
    625  f28c		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    626  f28e		       d0 c1		      BNE	UpdateOffsets
    627  f290
    628  f290				   BcdScore		; 48
    629  f290		       a5 91		      LDA	TrafficOffset0 + 1	;3
    630  f292		       45 b3		      EOR	Tmp3	;3
    631  f294		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    632  f296		       f0 1b		      BEQ	FinishBcdScore	;2
    633  f298
    634  f298				   ContinueBcdScore
    635  f298		       f8		      SED		;2
    636  f299		       18		      CLC		;2
    637  f29a		       a5 b4		      LDA	ScoreBcd0	;3
    638  f29c		       69 01		      ADC	#1	;2
    639  f29e		       85 b4		      STA	ScoreBcd0	;3
    640  f2a0		       a5 b5		      LDA	ScoreBcd1	;3
    641  f2a2		       69 00		      ADC	#0	;2
    642  f2a4		       85 b5		      STA	ScoreBcd1	;3
    643  f2a6		       a5 b6		      LDA	ScoreBcd2	;3
    644  f2a8		       69 00		      ADC	#0	;2
    645  f2aa		       85 b6		      STA	ScoreBcd2	;3
    646  f2ac		       a5 b7		      LDA	ScoreBcd3	;3
    647  f2ae		       69 00		      ADC	#0	;2
    648  f2b0		       85 b7		      STA	ScoreBcd3	;3
    649  f2b2		       d8		      CLD		;2
    650  f2b3				   FinishBcdScore
    651  f2b3
    652  f2b3							;Until store the movemnt, LDX contains the value to be stored.
    653  f2b3				   TestCollision		;
    654  f2b3							; see if player0 colides with the rest
    655  f2b3		       a5 00		      LDA	CXM0P
    656  f2b5		       05 01		      ORA	CXM1P
    657  f2b7		       05 01		      ORA	CXM1P
    658  f2b9		       05 02		      ORA	CXP0FB
    659  f2bb		       05 07		      ORA	CXPPMM
    660  f2bd		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    661  f2bf		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    662  f2c1		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    663  f2c3		       d0 3a		      BNE	NoCollision
    664  f2c5		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    665  f2c7		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    666  f2c9		       f0 34		      BEQ	NoCollision
    667  f2cb		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    668  f2cd		       f0 30		      BEQ	NoCollision
    669  f2cf		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    670  f2d1		       85 b8		      STA	CollisionCounter	;and store as colision.
    671  f2d3				   CountBcdColision
    672  f2d3		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    673  f2d5		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    674  f2d7		       f0 1d		      BEQ	SkipSetColisionSpeedL
    675  f2d9		       f8		      SED		;2
    676  f2da		       18		      CLC		;2
    677  f2db		       a5 cb		      LDA	HitCountBcd0	;3
    678  f2dd		       69 01		      ADC	#1	;3
    679  f2df		       85 cb		      STA	HitCountBcd0	;3
    680  f2e1		       a5 cc		      LDA	HitCountBcd1	;3
    681  f2e3		       69 00		      ADC	#0	;2
    682  f2e5		       85 cc		      STA	HitCountBcd1	;3
    683  f2e7		       d8		      CLD		;2
    684  f2e8				   EndCountBcdColision
    685  f2e8		       a5 8f		      LDA	Player0SpeedH
    686  f2ea		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    687  f2ec		       a9 10		      LDA	#COLLISION_SPEED_L
    688  f2ee		       c5 8e		      CMP	Player0SpeedL
    689  f2f0		       b0 04		      BCS	SkipSetColisionSpeedL
    690  f2f2				   SetColisionSpeedL
    691  f2f2		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    692  f2f4		       85 8e		      STA	Player0SpeedL
    693  f2f6				   SkipSetColisionSpeedL
    694  f2f6		       a9 00		      LDA	#0
    695  f2f8		       85 8f		      STA	Player0SpeedH
    696  f2fa		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    697  f2fc		       4c 4a f3 	      JMP	StoreHMove	; We keep position consistent
    698  f2ff				   NoCollision
    699  f2ff
    700  f2ff				   DecrementCollision
    701  f2ff		       a4 b8		      LDY	CollisionCounter
    702  f301		       f0 07		      BEQ	FinishDecrementCollision
    703  f303		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    704  f305		       85 04		      STA	NUSIZ0
    705  f307		       88		      DEY
    706  f308		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    707  f30a				   FinishDecrementCollision
    708  f30a
    709  f30a				   ResetPlayerSize
    710  f30a		       d0 04		      BNE	FinishResetPlayerSize
    711  f30c		       a9 30		      LDA	#%00110000
    712  f30e		       85 04		      STA	NUSIZ0	;
    713  f310				   FinishResetPlayerSize
    714  f310
    715  f310				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    716  f310		       c0 01		      CPY	#1	; Last frame before reset
    717  f312		       d0 05		      BNE	SkipResetPlayerPosition
    718  f314		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    719  f316		       4c 4a f3 	      JMP	StoreHMove
    720  f319				   SkipResetPlayerPosition
    721  f319
    722  f319				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    723  f319		       a5 a9		      LDA	CurrentCarId
    724  f31b		       c9 03		      CMP	#CAR_ID_DRAGSTER
    725  f31d		       d0 08		      BNE	PrepareReadXAxis
    726  f31f		       a2 00		      LDX	#0
    727  f321		       a5 8c		      LDA	FrameCount0
    728  f323		       29 01		      AND	#DRAGSTER_TURN_MASK
    729  f325		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    730  f327
    731  f327							; for left and right, we're gonna 
    732  f327							; set the horizontal speed, and then do
    733  f327							; a single HMOVE.  We'll use X to hold the
    734  f327							; horizontal speed, then store it in the 
    735  f327							; appropriate register
    736  f327				   PrepareReadXAxis
    737  f327		       a2 00		      LDX	#0
    738  f329		       a4 b9		      LDY	Player0X
    739  f32b				   BeginReadLeft
    740  f32b		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    741  f32d		       a9 40		      LDA	#%01000000	;Left
    742  f32f		       2c 80 02 	      BIT	SWCHA
    743  f332		       d0 07		      BNE	SkipMoveLeft
    744  f334		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    745  f336		       c6 b9		      DEC	Player0X
    746  f338		       4c 4a f3 	      JMP	StoreHMove	; Cannot move left and right...
    747  f33b				   SkipMoveLeft
    748  f33b				   BeginReadRight
    749  f33b		       c0 36		      CPY	#PLAYER_0_MAX_X
    750  f33d		       f0 0b		      BEQ	SkipMoveRight	; At max already
    751  f33f		       a9 80		      LDA	#%10000000	;Right
    752  f341		       2c 80 02 	      BIT	SWCHA
    753  f344		       d0 04		      BNE	SkipMoveRight
    754  f346		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    755  f348		       e6 b9		      INC	Player0X
    756  f34a				   SkipMoveRight
    757  f34a				   StoreHMove
    758  f34a		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    759  f34c		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    760  f34e
    761  f34e				   DividePlayerSpeedBy4
    762  f34e		       a5 8f		      LDA	Player0SpeedH
    763  f350		       0a		      ASL
    764  f351		       0a		      ASL
    765  f352		       0a		      ASL
    766  f353		       0a		      ASL
    767  f354		       0a		      ASL
    768  f355		       0a		      ASL
    769  f356		       85 b1		      STA	Tmp1
    770  f358		       a5 8e		      LDA	Player0SpeedL
    771  f35a		       4a		      LSR
    772  f35b		       4a		      LSR
    773  f35c		       29 3f		      AND	#%00111111
    774  f35e		       05 b1		      ORA	Tmp1
    775  f360		       85 b0		      STA	Tmp0	; Division Result
    776  f362
    777  f362				   CalculateParallax1Offset		; 7/8 speed
    778  f362		       38		      SEC
    779  f363		       a5 8e		      LDA	Player0SpeedL
    780  f365		       e5 b0		      SBC	Tmp0
    781  f367		       85 b2		      STA	Tmp2
    782  f369		       a5 8f		      LDA	Player0SpeedH
    783  f36b		       e9 00		      SBC	#0
    784  f36d		       85 b3		      STA	Tmp3
    785  f36f
    786  f36f		       18		      CLC
    787  f370		       a5 c6		      LDA	ParallaxOffset1
    788  f372		       65 b2		      ADC	Tmp2
    789  f374		       85 c6		      STA	ParallaxOffset1
    790  f376		       a5 c7		      LDA	ParallaxOffset1 + 1
    791  f378		       65 b3		      ADC	Tmp3
    792  f37a		       85 c7		      STA	ParallaxOffset1 + 1
    793  f37c
    794  f37c				   CalculateParallax2Offset		; 6/8 speed
    795  f37c		       38		      SEC
    796  f37d		       a5 b2		      LDA	Tmp2
    797  f37f		       e5 b0		      SBC	Tmp0
    798  f381		       85 b2		      STA	Tmp2
    799  f383		       a5 b3		      LDA	Tmp3
    800  f385		       e9 00		      SBC	#0
    801  f387		       85 b3		      STA	Tmp3
    802  f389
    803  f389		       18		      CLC
    804  f38a		       a5 c8		      LDA	ParallaxOffset2
    805  f38c		       65 b2		      ADC	Tmp2
    806  f38e		       85 c8		      STA	ParallaxOffset2
    807  f390		       a5 c9		      LDA	ParallaxOffset2 + 1
    808  f392		       65 b3		      ADC	Tmp3
    809  f394		       85 c9		      STA	ParallaxOffset2 + 1
    810  f396
    811  f396				   SkipUpdateLogic		; Continue here if not paused
    812  f396
    813  f396
    814  f396				   ProcessBorder		;Can be optimized (probably)
    815  f396		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    816  f398		       a5 88		      LDA	ParallaxMode
    817  f39a		       c9 70		      CMP	#%01110000
    818  f39c		       f0 1a		      BEQ	HorizontalParallaxMode
    819  f39e		       c9 d0		      CMP	#%11010000
    820  f3a0		       f0 0a		      BEQ	VerticalParallaxMode
    821  f3a2		       c9 b0		      CMP	#%10110000
    822  f3a4		       f0 0c		      BEQ	TachometerMode
    823  f3a6
    824  f3a6				   DefaultBorderMode
    825  f3a6		       20 59 f8 	      JSR	DefaultBorderLoop
    826  f3a9		       4c bb f3 	      JMP	EndProcessingBorder
    827  f3ac				   VerticalParallaxMode
    828  f3ac		       20 cf f8 	      JSR	VerticalParallaxLoop
    829  f3af		       4c bb f3 	      JMP	EndProcessingBorder
    830  f3b2				   TachometerMode
    831  f3b2		       20 74 f8 	      JSR	PrepareTachometerBorderLoop
    832  f3b5		       4c bb f3 	      JMP	EndProcessingBorder
    833  f3b8				   HorizontalParallaxMode
    834  f3b8		       20 0b f8 	      JSR	HorizontalParallaxLoop
    835  f3bb
    836  f3bb				   EndProcessingBorder
    837  f3bb
    838  f3bb				   ProcessScoreFontColor
    839  f3bb		       a6 d6		      LDX	ScoreFontColorHoldChange
    840  f3bd		       f0 06		      BEQ	ResetScoreFontColor
    841  f3bf		       ca		      DEX
    842  f3c0		       86 d6		      STX	ScoreFontColorHoldChange
    843  f3c2		       4c c9 f3 	      JMP	SkipScoreFontColor
    844  f3c5				   ResetScoreFontColor
    845  f3c5		       a9 f9		      LDA	#SCORE_FONT_COLOR
    846  f3c7		       85 d5		      STA	ScoreFontColor
    847  f3c9				   SkipScoreFontColor
    848  f3c9
    849  f3c9				   IsGameOver
    850  f3c9		       a5 ba		      LDA	CountdownTimer
    851  f3cb		       05 8e		      ORA	Player0SpeedL
    852  f3cd		       05 8f		      ORA	Player0SpeedH
    853  f3cf		       d0 0b		      BNE	IsCheckpoint
    854  f3d1		       a9 01		      LDA	#1
    855  f3d3		       85 d6		      STA	ScoreFontColorHoldChange
    856  f3d5		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    857  f3d7		       85 d5		      STA	ScoreFontColor
    858  f3d9		       4c 1d f4 	      JMP	SkipIsTimeOver
    859  f3dc
    860  f3dc				   IsCheckpoint
    861  f3dc		       a5 d7		      LDA	NextCheckpoint
    862  f3de		       c5 92		      CMP	TrafficOffset0 + 2
    863  f3e0		       d0 2f		      BNE	SkipIsCheckpoint
    864  f3e2		       18		      CLC
    865  f3e3		       69 10		      ADC	#CHECKPOINT_INTERVAL
    866  f3e5		       85 d7		      STA	NextCheckpoint
    867  f3e7		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    868  f3e9		       85 d5		      STA	ScoreFontColor
    869  f3eb		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    870  f3ed		       85 d6		      STA	ScoreFontColorHoldChange
    871  f3ef				   AddCheckpointBcd
    872  f3ef		       f8		      SED		;2
    873  f3f0		       18		      CLC		;2
    874  f3f1		       a5 a4		      LDA	CheckpointBcd0	;3
    875  f3f3		       69 01		      ADC	#1	;3
    876  f3f5		       85 a4		      STA	CheckpointBcd0	;3
    877  f3f7		       a5 a5		      LDA	CheckpointBcd1	;3
    878  f3f9		       69 00		      ADC	#0	;2
    879  f3fb		       85 a5		      STA	CheckpointBcd1	;3
    880  f3fd		       d8		      CLD		;2
    881  f3fe				   EndCheckpointBcd
    882  f3fe		       a5 ba		      LDA	CountdownTimer
    883  f400		       18		      CLC
    884  f401		       65 c2		      ADC	CheckpointTime
    885  f403		       85 ba		      STA	CountdownTimer
    886  f405		       90 04		      BCC	JumpSkipTimeOver
    887  f407		       a9 ff		      LDA	#$FF
    888  f409		       85 ba		      STA	CountdownTimer	; Does not overflow!
    889  f40b				   JumpSkipTimeOver
    890  f40b		       20 83 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    891  f40e		       4c 1d f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    892  f411				   SkipIsCheckpoint
    893  f411
    894  f411				   IsTimeOver
    895  f411		       a5 ba		      LDA	CountdownTimer
    896  f413		       d0 08		      BNE	SkipIsTimeOver
    897  f415		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    898  f417		       85 d6		      STA	ScoreFontColorHoldChange
    899  f419		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    900  f41b		       85 d5		      STA	ScoreFontColor
    901  f41d				   SkipIsTimeOver
    902  f41d
    903  f41d				   PrintEasterEggCondition
    904  f41d		       a5 8d		      LDA	FrameCount1
    905  f41f		       29 38		      AND	#%00111000
    906  f421		       05 c0		      ORA	GameStatus
    907  f423		       c9 38		      CMP	#%00111000
    908  f425		       d0 06		      BNE	ChooseTextSide
    909  f427		       20 23 f9 	      JSR	PrintEasterEgg
    910  f42a		       4c 1e f5 	      JMP	RightScoreWriteEnd
    911  f42d
    912  f42d							;Could be done during on vblank to save this comparisson time (before draw score), 
    913  f42d							;but I am saving vblank cycles for now, in case of 2 players.
    914  f42d				   ChooseTextSide		; 
    915  f42d		       a5 8c		      LDA	FrameCount0	;3
    916  f42f		       29 01		      AND	#%00000001	;2
    917  f431		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    918  f433		       4c b4 f4 	      JMP	RightScoreWrite
    919  f436
    920  f436				   LeftScoreWrite
    921  f436		       a5 d5		      LDA	ScoreFontColor
    922  f438		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    923  f43a		       f0 4e		      BEQ	PrintCheckpoint
    924  f43c		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    925  f43e		       f0 52		      BEQ	PrintStartGame
    926  f440		       a5 c0		      LDA	GameStatus
    927  f442		       f0 56		      BEQ	PrintHellwayLeft
    928  f444				   WriteDistance		;Not optimized yet, ugly code.
    929  f444				   Digit0Distance
    930  f444		       a5 91		      LDA	TrafficOffset0 + 1	;3
    931  f446		       4a		      LSR		; 2
    932  f447		       4a		      LSR		; 2
    933  f448		       4a		      LSR		; 2
    934  f449		       4a		      LSR		; 2
    935  f44a		       aa		      TAX		; 2
    936  f44b		       bd be fd 	      LDA	FontLookup,X	;4
    937  f44e		       85 d3		      STA	ScoreD3	;3
    938  f450
    939  f450				   Digit1Distance
    940  f450		       a5 92		      LDA	TrafficOffset0 + 2	;3
    941  f452		       29 0f		      AND	#%00001111	;2
    942  f454		       aa		      TAX		; 2
    943  f455		       bd be fd 	      LDA	FontLookup,X	;4 
    944  f458		       85 d2		      STA	ScoreD2	;3
    945  f45a
    946  f45a				   Digit2Distance
    947  f45a		       a5 92		      LDA	TrafficOffset0 + 2	;3
    948  f45c		       4a		      LSR		; 2
    949  f45d		       4a		      LSR		; 2
    950  f45e		       4a		      LSR		; 2
    951  f45f		       4a		      LSR		; 2
    952  f460		       aa		      TAX		; 2
    953  f461		       bd be fd 	      LDA	FontLookup,X	;4
    954  f464		       85 d1		      STA	ScoreD1	;3
    955  f466
    956  f466				   Digit3Distance
    957  f466		       a5 bb		      LDA	Traffic0Msb	;3
    958  f468		       29 0f		      AND	#%00001111	;2
    959  f46a		       aa		      TAX		; 2
    960  f46b		       bd be fd 	      LDA	FontLookup,X	;4 
    961  f46e		       85 d0		      STA	ScoreD0	;3
    962  f470
    963  f470				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    964  f470		       a5 bb		      LDA	Traffic0Msb
    965  f472		       29 f0		      AND	#%11110000	;2
    966  f474		       d0 07		      BNE	DrawDistanceExtraDigit
    967  f476		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    968  f478		       85 d4		      STA	ScoreD4	;3
    969  f47a		       4c 87 f4 	      JMP	EndDrawDistance
    970  f47d				   DrawDistanceExtraDigit
    971  f47d		       4a		      LSR		; 2
    972  f47e		       4a		      LSR		; 2
    973  f47f		       4a		      LSR		; 2
    974  f480		       4a		      LSR		; 2
    975  f481		       aa		      TAX		; 2
    976  f482		       bd be fd 	      LDA	FontLookup,X	;4
    977  f485		       85 d4		      STA	ScoreD4	;3
    978  f487
    979  f487				   EndDrawDistance
    980  f487		       4c 1e f5 	      JMP	RightScoreWriteEnd	;3
    981  f48a
    982  f48a				   PrintCheckpoint
    983  f48a		       a2 00		      LDX	#<CheckpointText
    984  f48c		       20 ed f7 	      JSR	PrintStaticText
    985  f48f		       4c 1e f5 	      JMP	RightScoreWriteEnd	;3
    986  f492				   PrintStartGame
    987  f492		       a2 23		      LDX	#<GoText
    988  f494		       20 ed f7 	      JSR	PrintStaticText
    989  f497		       4c 1e f5 	      JMP	RightScoreWriteEnd	;3
    990  f49a
    991  f49a				   PrintHellwayLeft
    992  f49a		       a5 8d		      LDA	FrameCount1
    993  f49c		       29 01		      AND	#1
    994  f49e		       d0 05		      BNE	PrintCreditsLeft
    995  f4a0		       a2 05		      LDX	#<HellwayLeftText
    996  f4a2		       4c a7 f4 	      JMP	PrintGameMode
    997  f4a5				   PrintCreditsLeft
    998  f4a5		       a2 0f		      LDX	#<OpbText
    999  f4a7
   1000  f4a7				   PrintGameMode
   1001  f4a7		       20 ed f7 	      JSR	PrintStaticText
   1002  f4aa		       a6 c5		      LDX	GameMode
   1003  f4ac		       bd be fd 	      LDA	FontLookup,X	;4 
   1004  f4af		       85 d0		      STA	ScoreD0	;3
   1005  f4b1		       4c 1e f5 	      JMP	RightScoreWriteEnd	;3
   1006  f4b4
   1007  f4b4				   RightScoreWrite
   1008  f4b4		       a5 c0		      LDA	GameStatus
   1009  f4b6		       f0 45		      BEQ	PrintHellwayRight
   1010  f4b8		       a5 d5		      LDA	ScoreFontColor
   1011  f4ba		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1012  f4bc		       f0 52		      BEQ	PrintGameOver
   1013  f4be				   Digit0Timer
   1014  f4be		       a5 ba		      LDA	CountdownTimer	;3
   1015  f4c0		       29 0f		      AND	#%00001111	;2
   1016  f4c2		       aa		      TAX		; 2
   1017  f4c3		       bd be fd 	      LDA	FontLookup,X	;4 
   1018  f4c6		       85 d1		      STA	ScoreD1	;3
   1019  f4c8
   1020  f4c8				   Digit1Timer
   1021  f4c8		       a5 ba		      LDA	CountdownTimer	;3
   1022  f4ca		       4a		      LSR		; 2
   1023  f4cb		       4a		      LSR		; 2
   1024  f4cc		       4a		      LSR		; 2
   1025  f4cd		       4a		      LSR		; 2
   1026  f4ce		       aa		      TAX		; 2
   1027  f4cf		       bd be fd 	      LDA	FontLookup,X	;4
   1028  f4d2		       85 d0		      STA	ScoreD0	;3
   1029  f4d4
   1030  f4d4		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1031  f4d6		       85 d2		      STA	ScoreD2	;3
   1032  f4d8
   1033  f4d8				   Digit0Speed
   1034  f4d8		       a5 8e		      LDA	Player0SpeedL
   1035  f4da		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1036  f4dc		       4a		      LSR		; 2
   1037  f4dd		       4a		      LSR		; 2
   1038  f4de		       aa		      TAX		; 2
   1039  f4df		       bd be fd 	      LDA	FontLookup,X	;4
   1040  f4e2		       85 d4		      STA	ScoreD4	;3
   1041  f4e4
   1042  f4e4				   Digit1Speed
   1043  f4e4		       a5 8e		      LDA	Player0SpeedL
   1044  f4e6		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1045  f4e8		       18		      CLC
   1046  f4e9		       2a		      ROL		;First goes into carry
   1047  f4ea		       2a		      ROL
   1048  f4eb		       2a		      ROL
   1049  f4ec		       85 b0		      STA	Tmp0
   1050  f4ee		       a5 8f		      LDA	Player0SpeedH
   1051  f4f0		       0a		      ASL
   1052  f4f1		       0a		      ASL
   1053  f4f2		       05 b0		      ORA	Tmp0
   1054  f4f4		       aa		      TAX		; 2
   1055  f4f5		       bd be fd 	      LDA	FontLookup,X	;4
   1056  f4f8		       85 d3		      STA	ScoreD3	;3
   1057  f4fa		       4c 1e f5 	      JMP	RightScoreWriteEnd
   1058  f4fd
   1059  f4fd				   PrintHellwayRight
   1060  f4fd		       a5 8d		      LDA	FrameCount1
   1061  f4ff		       29 01		      AND	#1
   1062  f501		       d0 05		      BNE	PrintCreditsRight
   1063  f503		       a2 0a		      LDX	#<HellwayRightText
   1064  f505		       4c 0a f5 	      JMP	PrintRightIntro
   1065  f508				   PrintCreditsRight
   1066  f508		       a2 14		      LDX	#<YearText
   1067  f50a				   PrintRightIntro
   1068  f50a		       20 ed f7 	      JSR	PrintStaticText
   1069  f50d		       4c 1e f5 	      JMP	RightScoreWriteEnd
   1070  f510				   PrintGameOver
   1071  f510		       a5 8c		      LDA	FrameCount0
   1072  f512		       30 05		      BMI	PrintOverText
   1073  f514		       a2 19		      LDX	#<GameText
   1074  f516		       4c 1b f5 	      JMP	StoreGameOverText
   1075  f519				   PrintOverText
   1076  f519		       a2 1e		      LDX	#<OverText
   1077  f51b				   StoreGameOverText
   1078  f51b		       20 ed f7 	      JSR	PrintStaticText
   1079  f51e				   RightScoreWriteEnd
   1080  f51e
   1081  f51e
   1082  f51e				   ScoreBackgroundColor
   1083  f51e		       a2 00		      LDX	#0
   1084  f520		       ad 82 02 	      LDA	SWCHB
   1085  f523		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1086  f525		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1087  f527		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1088  f529		       a2 03		      LDX	#BACKGROUND_COLOR
   1089  f52b				   BlackAndWhiteScoreBg
   1090  f52b		       85 b2		      STA	Tmp2	; Score Background
   1091  f52d		       86 b3		      STX	Tmp3	; Traffic Background
   1092  f52f
   1093  f52f				   ConfigurePFForScore
   1094  f52f							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1095  f52f		       85 09		      STA	COLUBK
   1096  f531		       20 45 f7 	      JSR	ClearAll
   1097  f534		       a9 02		      LDA	#%00000010	; Score mode
   1098  f536		       85 0a		      STA	CTRLPF
   1099  f538		       a5 8c		      LDA	FrameCount0	;3
   1100  f53a		       29 01		      AND	#%00000001	;2
   1101  f53c		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
   1102  f53e				   LeftScoreOn
   1103  f53e		       a5 d5		      LDA	ScoreFontColor
   1104  f540		       85 07		      STA	COLUP1
   1105  f542		       a5 b2		      LDA	Tmp2
   1106  f544		       85 06		      STA	COLUP0
   1107  f546		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1108  f548		       85 b1		      STA	Tmp1
   1109  f54a		       4c 59 f5 	      JMP	CallWaitForVblankEnd
   1110  f54d				   RightScoreOn
   1111  f54d		       a5 d5		      LDA	ScoreFontColor
   1112  f54f		       85 06		      STA	COLUP0
   1113  f551		       a5 b2		      LDA	Tmp2
   1114  f553		       85 07		      STA	COLUP1
   1115  f555		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1116  f557		       85 b1		      STA	Tmp1
   1117  f559
   1118  f559							; After here we are going to update the screen, No more heavy code
   1119  f559				   CallWaitForVblankEnd
   1120  f559		       20 93 fb 	      JSR	WaitForVblankEnd
   1121  f55c
   1122  f55c				   DrawScoreHud
   1123  f55c		       20 95 f9 	      JSR	PrintScore
   1124  f55f
   1125  f55f		       85 02		      STA	WSYNC
   1126  f561
   1127  f561		       a5 0c		      LDA	INPT4	;3
   1128  f563		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1129  f565		       a5 d5		      LDA	ScoreFontColor
   1130  f567		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1131  f569		       d0 0c		      BNE	WaitAnotherScoreLine
   1132  f56b		       a5 8c		      LDA	FrameCount0	;3
   1133  f56d		       29 01		      AND	#%00000001	;2
   1134  f56f		       f0 03		      BEQ	LeftScoreOnGameOver
   1135  f571		       4c 20 fb 	      JMP	DrawGameOverScreenRight
   1136  f574				   LeftScoreOnGameOver
   1137  f574		       4c 52 fa 	      JMP	DrawGameOverScreenLeft
   1138  f577
   1139  f577				   WaitAnotherScoreLine
   1140  f577		       85 02		      STA	WSYNC
   1141  f579
   1142  f579				   PrepareForTraffic
   1143  f579		       20 57 f7 	      JSR	ClearPF	; 32
   1144  f57c
   1145  f57c		       85 02		      STA	WSYNC
   1146  f57e		       85 02		      STA	WSYNC
   1147  f580
   1148  f580		       a9 31		      LDA	#%00110001	; 2 Score mode
   1149  f582		       85 0a		      STA	CTRLPF	;3
   1150  f584
   1151  f584		       a5 c3		      LDA	TrafficColor	;3
   1152  f586		       85 08		      STA	COLUPF	;3
   1153  f588
   1154  f588		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1155  f58a		       85 07		      STA	COLUP1	;3
   1156  f58c
   1157  f58c		       a5 d5		      LDA	ScoreFontColor	;3
   1158  f58e		       85 06		      STA	COLUP0	;3
   1159  f590
   1160  f590		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1161  f592
   1162  f592		       20 57 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1163  f595
      0  f595					      SLEEP	14
      1  f595				   .CYCLES    SET	14
      2  f595
      3  f595				  -	      IF	.CYCLES < 2
      4  f595				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f595				  -	      ERR
      6  f595					      ENDIF
      7  f595
      8  f595				  -	      IF	.CYCLES & 1
      9  f595				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f595				  -	      nop	0
     11  f595				  -	      ELSE
     12  f595				  -	      bit	VSYNC
     13  f595				  -	      ENDIF
     14  f595				  -.CYCLES    SET	.CYCLES - 3
     15  f595					      ENDIF
     16  f595
     17  f595					      REPEAT	.CYCLES / 2
     18  f595		       ea		      nop
     17  f595					      REPEND
     18  f596		       ea		      nop
     17  f596					      REPEND
     18  f597		       ea		      nop
     17  f597					      REPEND
     18  f598		       ea		      nop
     17  f598					      REPEND
     18  f599		       ea		      nop
     17  f599					      REPEND
     18  f59a		       ea		      nop
     17  f59a					      REPEND
     18  f59b		       ea		      nop
     19  f59c					      REPEND
   1165  f59c
   1166  f59c		       a5 b3		      LDA	Tmp3	;3
   1167  f59e		       85 09		      STA	COLUBK	;3
   1168  f5a0		       4c a5 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1169  f5a3							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1170  f5a3
   1171  f5a3							;main scanline loop...
   1172  f5a3				   ScanLoop
   1173  f5a3		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1174  f5a5
   1175  f5a5							;Start of next line!			
   1176  f5a5				   DrawCache		;63 Is the last line going to the top of the next frame?
   1177  f5a5		       a5 81		      LDA	PF0Cache	;3
   1178  f5a7		       85 0d		      STA	PF0	;3
   1179  f5a9
   1180  f5a9		       a5 82		      LDA	PF1Cache	;3
   1181  f5ab		       85 0e		      STA	PF1	;3
   1182  f5ad
   1183  f5ad		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1184  f5af		       b0 04		      BCS	SkipDrawCar	;2
   1185  f5b1		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1186  f5b3		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1187  f5b5				   SkipDrawCar
   1188  f5b5
   1189  f5b5		       a5 84		      LDA	GRP1Cache	;3
   1190  f5b7		       85 1c		      STA	GRP1	;3
   1191  f5b9
   1192  f5b9		       a5 85		      LDA	ENABLCache	;3
   1193  f5bb		       85 1f		      STA	ENABL	;3
   1194  f5bd
   1195  f5bd		       a5 86		      LDA	ENAM0Cache	;3
   1196  f5bf		       85 1d		      STA	ENAM0	;3
   1197  f5c1
   1198  f5c1		       a5 87		      LDA	ENAM1Cache	;3
   1199  f5c3		       85 1e		      STA	ENAM1	;3
   1200  f5c5
   1201  f5c5		       a9 00		      LDA	#0	;2
   1202  f5c7							;STA PF1Cache ;3
   1203  f5c7		       85 84		      STA	GRP1Cache	;3
   1204  f5c9		       85 85		      STA	ENABLCache	;3
   1205  f5cb		       85 86		      STA	ENAM0Cache	;3
   1206  f5cd		       85 87		      STA	ENAM1Cache	; 3
   1207  f5cf
   1208  f5cf							;BEQ DrawTraffic3
   1209  f5cf				   DrawTraffic1 		; 33
   1210  f5cf		       98		      TYA		; 2
   1211  f5d0		       18		      CLC		; 2 
   1212  f5d1		       65 95		      ADC	TrafficOffset1 + 1	;3
   1213  f5d3		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1214  f5d5		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1215  f5d7		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1216  f5d9		       4c de f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1217  f5dc				   EorOffsetWithCarry
   1218  f5dc		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1219  f5de				   AfterEorOffsetWithCarry		;17
   1220  f5de		       aa		      TAX		;2
   1221  f5df		       bd 00 fe 	      LDA	AesTable,X	; 4
   1222  f5e2		       c5 c1		      CMP	TrafficChance	;3
   1223  f5e4		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1224  f5e6		       a9 ff		      LDA	#$FF	;2
   1225  f5e8		       85 84		      STA	GRP1Cache	;3
   1226  f5ea				   FinishDrawTraffic1
   1227  f5ea
   1228  f5ea				   DrawTraffic2 		; 33
   1229  f5ea		       98		      TYA		; 2
   1230  f5eb		       18		      CLC		; 2 
   1231  f5ec		       65 99		      ADC	TrafficOffset2 + 1	;3
   1232  f5ee		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1233  f5f0		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1234  f5f2		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1235  f5f4		       4c f9 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1236  f5f7				   EorOffsetWithCarry2
   1237  f5f7		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1238  f5f9				   AfterEorOffsetWithCarry2		;17
   1239  f5f9		       aa		      TAX		;2
   1240  f5fa		       bd 00 fe 	      LDA	AesTable,X	; 4
   1241  f5fd		       c5 c1		      CMP	TrafficChance	;3
   1242  f5ff		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1243  f601		       a9 02		      LDA	#%00000010	;2
   1244  f603		       85 85		      STA	ENABLCache	;3
   1245  f605				   FinishDrawTraffic2
   1246  f605
   1247  f605							;STA WSYNC ;65 / 137
   1248  f605
   1249  f605							; LDA Tmp0 ; Flicker this line if drawing car
   1250  f605							; BEQ FinishDrawTraffic4
   1251  f605				   DrawTraffic3 		; 33
   1252  f605		       98		      TYA		; 2
   1253  f606		       18		      CLC		; 2 
   1254  f607		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1255  f609		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1256  f60b		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1257  f60d		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1258  f60f		       4c 14 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1259  f612				   EorOffsetWithCarry3
   1260  f612		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1261  f614				   AfterEorOffsetWithCarry3		;17
   1262  f614		       aa		      TAX		;2
   1263  f615		       bd 00 fe 	      LDA	AesTable,X	; 4
   1264  f618		       c5 c1		      CMP	TrafficChance	;3
   1265  f61a		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1266  f61c		       a9 02		      LDA	#%00000010	;2
   1267  f61e		       85 86		      STA	ENAM0Cache
   1268  f620				   FinishDrawTraffic3
   1269  f620
   1270  f620				   DrawTraffic4 		; 33
   1271  f620		       98		      TYA		; 2
   1272  f621		       18		      CLC		; 2 
   1273  f622		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1274  f624		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1275  f626		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1276  f628		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1277  f62a		       4c 2f f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1278  f62d				   EorOffsetWithCarry4
   1279  f62d		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1280  f62f				   AfterEorOffsetWithCarry4		;17
   1281  f62f		       aa		      TAX		;2
   1282  f630		       bd 00 fe 	      LDA	AesTable,X	; 4
   1283  f633		       c5 c1		      CMP	TrafficChance	;3
   1284  f635		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1285  f637		       a9 02		      LDA	#%00000010	;2
   1286  f639		       85 87		      STA	ENAM1Cache	;3
   1287  f63b				   FinishDrawTraffic4
   1288  f63b
   1289  f63b				   DrawTraffic0 		; 20
   1290  f63b		       98		      TYA		;2
   1291  f63c		       29 07		      AND	#%00000111	;2
   1292  f63e		       aa		      TAX		;2
   1293  f63f		       b5 d8		      LDA	ParallaxCache,X	;4
   1294  f641		       85 82		      STA	PF1Cache	;3
   1295  f643		       b5 f0		      LDA	ParallaxCache2,X	;4
   1296  f645		       85 81		      STA	PF0Cache	;3
   1297  f647
   1298  f647				   SkipDrawTraffic0
   1299  f647
   1300  f647				   WhileScanLoop
   1301  f647		       88		      DEY		;2
   1302  f648		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1303  f64a		       4c a3 f5 	      JMP	ScanLoop	;3
   1304  f64d				   FinishScanLoop		; 7 209 of 222
   1305  f64d
   1306  f64d		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1307  f64f		       20 66 f7 	      JSR	LoadAll
   1308  f652		       85 02		      STA	WSYNC	; do stuff!
   1309  f654		       85 02		      STA	WSYNC
   1310  f656		       85 02		      STA	WSYNC
   1311  f658							;42 cycles to use here
   1312  f658
   1313  f658				   PrepareOverscan
   1314  f658		       a9 02		      LDA	#2
   1315  f65a		       85 02		      STA	WSYNC
   1316  f65c		       85 01		      STA	VBLANK
   1317  f65e
   1318  f65e		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1319  f660		       8d 96 02 	      STA	TIM64T
   1320  f663
   1321  f663				   LeftSound		;58
   1322  f663		       a5 ba		      LDA	CountdownTimer	;3
   1323  f665		       f0 24		      BEQ	EngineOff	;2
   1324  f667		       a5 8e		      LDA	Player0SpeedL	;3
   1325  f669		       29 80		      AND	#%10000000	;2
   1326  f66b		       05 8f		      ORA	Player0SpeedH	;3
   1327  f66d		       18		      CLC		;2
   1328  f66e		       2a		      ROL		;2
   1329  f66f		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1330  f671		       aa		      TAX		;2
   1331  f672		       a5 8e		      LDA	Player0SpeedL	;3
   1332  f674		       4a		      LSR		;2
   1333  f675		       4a		      LSR		;2
   1334  f676		       4a		      LSR		;2
   1335  f677		       29 0f		      AND	#%00001111	;2
   1336  f679		       85 b0		      STA	Tmp0	;3
   1337  f67b		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1338  f67e		       38		      SEC		;2
   1339  f67f		       e5 b0		      SBC	Tmp0	;3
   1340  f681		       85 17		      STA	AUDF0	;3
   1341  f683		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1342  f686		       85 15		      STA	AUDC0	;3
   1343  f688		       4c 8f f6 	      JMP	EndLeftSound	;3
   1344  f68b				   EngineOff
   1345  f68b		       a9 00		      LDA	#0
   1346  f68d		       85 15		      STA	AUDC0
   1347  f68f
   1348  f68f				   EndLeftSound
   1349  f68f
   1350  f68f
   1351  f68f				   RightSound		; 70 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1352  f68f		       a5 d5		      LDA	ScoreFontColor	;3
   1353  f691		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1354  f693		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1355  f695		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1356  f697		       f0 29		      BEQ	PlayCheckpoint	;2
   1357  f699		       a5 b8		      LDA	CollisionCounter	;3
   1358  f69b		       c9 e0		      CMP	#$E0	;2
   1359  f69d		       b0 14		      BCS	PlayColision	;2
   1360  f69f		       a5 d7		      LDA	NextCheckpoint	;3
   1361  f6a1		       38		      SEC		;2
   1362  f6a2		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1363  f6a4		       c9 02		      CMP	#$02	;2
   1364  f6a6		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1365  f6a8		       a5 ba		      LDA	CountdownTimer	; 3
   1366  f6aa		       f0 53		      BEQ	MuteRightSound	;2
   1367  f6ac		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1368  f6ae		       90 37		      BCC	PlayWarnTimeEnding	;4
   1369  f6b0		       4c ff f6 	      JMP	MuteRightSound	;3
   1370  f6b3				   PlayColision
   1371  f6b3		       a9 1f		      LDA	#31
   1372  f6b5		       85 18		      STA	AUDF1
   1373  f6b7		       a9 08		      LDA	#8
   1374  f6b9		       85 16		      STA	AUDC1
   1375  f6bb		       a9 08		      LDA	#8
   1376  f6bd		       85 1a		      STA	AUDV1
   1377  f6bf		       4c 03 f7 	      JMP	EndRightSound
   1378  f6c2
   1379  f6c2				   PlayCheckpoint
   1380  f6c2		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1381  f6c4		       4a		      LSR		;2
   1382  f6c5		       4a		      LSR		;2
   1383  f6c6		       4a		      LSR		;2
   1384  f6c7		       85 18		      STA	AUDF1	;3
   1385  f6c9		       a9 0c		      LDA	#12	;2
   1386  f6cb		       85 16		      STA	AUDC1	;3
   1387  f6cd		       a9 06		      LDA	#6	;2
   1388  f6cf		       85 1a		      STA	AUDV1	;3
   1389  f6d1		       4c 03 f7 	      JMP	EndRightSound	;3
   1390  f6d4
   1391  f6d4				   PlayBeforeCheckpoint
   1392  f6d4		       a5 8c		      LDA	FrameCount0	;3
   1393  f6d6		       29 1c		      AND	#%00011100	;2
   1394  f6d8		       09 03		      ORA	#%00000011	;2
   1395  f6da		       85 18		      STA	AUDF1	;3
   1396  f6dc		       a9 0c		      LDA	#12	;2
   1397  f6de		       85 16		      STA	AUDC1	;3
   1398  f6e0		       a9 03		      LDA	#3	;2
   1399  f6e2		       85 1a		      STA	AUDV1	;3
   1400  f6e4		       4c 03 f7 	      JMP	EndRightSound	;3
   1401  f6e7
   1402  f6e7				   PlayWarnTimeEnding
   1403  f6e7		       a5 8c		      LDA	FrameCount0	;3
   1404  f6e9		       29 04		      AND	#%00000100	;2
   1405  f6eb		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1406  f6ed		       18		      CLC		;2
   1407  f6ee		       a9 0a		      LDA	#10	;2
   1408  f6f0		       65 ba		      ADC	CountdownTimer
   1409  f6f2		       85 18		      STA	AUDF1	;3
   1410  f6f4		       a9 0c		      LDA	#12	;2
   1411  f6f6		       85 16		      STA	AUDC1	;3
   1412  f6f8		       a9 03		      LDA	#3	;2
   1413  f6fa		       85 1a		      STA	AUDV1	;3
   1414  f6fc		       4c 03 f7 	      JMP	EndRightSound	;3
   1415  f6ff
   1416  f6ff				   MuteRightSound
   1417  f6ff		       a9 00		      LDA	#0
   1418  f701		       85 1a		      STA	AUDV1
   1419  f703				   EndRightSound
   1420  f703
   1421  f703				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1422  f703		       a5 c0		      LDA	GameStatus	;3
   1423  f705		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1424  f707		       a5 d5		      LDA	ScoreFontColor	;3
   1425  f709		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1426  f70b		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1427  f70d		       c6 cf		      DEC	OneSecondConter	;5
   1428  f70f		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1429  f711
   1430  f711		       f8		      SED		;2 BCD Operations after this point
   1431  f712				   CountGlideTimeBcd
   1432  f712		       a5 d5		      LDA	ScoreFontColor	;3
   1433  f714		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1434  f716		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1435  f718		       18		      CLC		;2
   1436  f719		       a5 cd		      LDA	GlideTimeBcd0	;3
   1437  f71b		       69 01		      ADC	#1	;3
   1438  f71d		       85 cd		      STA	GlideTimeBcd0	;3
   1439  f71f		       a5 ce		      LDA	GlideTimeBcd1	;3
   1440  f721		       69 00		      ADC	#0	;2
   1441  f723		       85 ce		      STA	GlideTimeBcd1	;3
   1442  f725				   EndCountGlideTimeBcd
   1443  f725				   IncreaseTotalTimerBcd
   1444  f725		       18		      CLC		;2
   1445  f726		       a5 bd		      LDA	TimeBcd0	;3
   1446  f728		       69 01		      ADC	#1	;2
   1447  f72a		       85 bd		      STA	TimeBcd0	;3
   1448  f72c		       a5 be		      LDA	TimeBcd1	;3
   1449  f72e		       69 00		      ADC	#0	;2
   1450  f730		       85 be		      STA	TimeBcd1	;3
   1451  f732		       a5 bf		      LDA	TimeBcd2	;3
   1452  f734		       69 00		      ADC	#0	;2
   1453  f736		       85 bf		      STA	TimeBcd2	;3
   1454  f738
   1455  f738				   ResetOneSecondCounter
   1456  f738		       d8		      CLD		;2
   1457  f739		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1458  f73b		       85 cf		      STA	OneSecondConter	;3
   1459  f73d
   1460  f73d				   EndExactlyEverySecond
   1461  f73d
   1462  f73d				   OverScanWait
   1463  f73d		       ad 84 02 	      LDA	INTIM
   1464  f740		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1465  f742		       4c c0 f0 	      JMP	MainLoop
   1466  f745
   1467  f745				   Subroutines
   1468  f745
   1469  f745				   ClearAll		; 52
   1470  f745		       a9 00		      LDA	#0	;2
   1471  f747		       85 1c		      STA	GRP1	;3
   1472  f749		       85 1f		      STA	ENABL	;3
   1473  f74b		       85 1d		      STA	ENAM0	;3
   1474  f74d		       85 1e		      STA	ENAM1	;3
   1475  f74f		       85 84		      STA	GRP1Cache	;3
   1476  f751		       85 85		      STA	ENABLCache	;3
   1477  f753		       85 86		      STA	ENAM0Cache	;3
   1478  f755		       85 87		      STA	ENAM1Cache	;3
   1479  f757
   1480  f757				   ClearPF		; 26
   1481  f757		       a9 00		      LDA	#0	;2
   1482  f759				   ClearPFSkipLDA0
   1483  f759		       85 0d		      STA	PF0	;3
   1484  f75b		       85 0e		      STA	PF1	;3
   1485  f75d		       85 0f		      STA	PF2	;3	
   1486  f75f		       85 81		      STA	PF0Cache	;3
   1487  f761		       85 82		      STA	PF1Cache	;3
   1488  f763		       85 83		      STA	PF2Cache	;3 
   1489  f765		       60		      RTS		;6
   1490  f766				   EndClearAll
   1491  f766
   1492  f766				   LoadAll		; 48
   1493  f766		       a5 81		      LDA	PF0Cache	;3
   1494  f768		       85 0d		      STA	PF0	;3
   1495  f76a
   1496  f76a		       a5 82		      LDA	PF1Cache	;3
   1497  f76c		       85 0e		      STA	PF1	;3
   1498  f76e
   1499  f76e		       a5 83		      LDA	PF2Cache	;3
   1500  f770		       85 0f		      STA	PF2	;3
   1501  f772
   1502  f772		       a5 84		      LDA	GRP1Cache	;3
   1503  f774		       85 1c		      STA	GRP1	;3
   1504  f776
   1505  f776		       a5 85		      LDA	ENABLCache	;3
   1506  f778		       85 1f		      STA	ENABL	;3
   1507  f77a
   1508  f77a		       a5 86		      LDA	ENAM0Cache	;3
   1509  f77c		       85 1d		      STA	ENAM0	;3
   1510  f77e
   1511  f77e		       a5 87		      LDA	ENAM1Cache	;3
   1512  f780		       85 1e		      STA	ENAM1	;3
   1513  f782
   1514  f782		       60		      RTS		;6
   1515  f783				   EndLoadAll
   1516  f783
   1517  f783				   NextDifficulty
   1518  f783		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1519  f785		       29 01		      AND	#%00000001
   1520  f787		       d0 3f		      BNE	CheckRandomDifficulty
   1521  f789
   1522  f789		       a5 c4		      LDA	CurrentDifficulty
   1523  f78b		       18		      CLC
   1524  f78c		       69 01		      ADC	#1
   1525  f78e		       29 03		      AND	#%00000011	; 0 to 3
   1526  f790		       85 c4		      STA	CurrentDifficulty
   1527  f792
   1528  f792				   ConfigureDifficulty
   1529  f792		       a5 c4		      LDA	CurrentDifficulty
   1530  f794		       f0 0b		      BEQ	ConfigureLightTraffic
   1531  f796		       c9 01		      CMP	#1
   1532  f798		       f0 10		      BEQ	ConfigureRegularTraffic
   1533  f79a		       c9 02		      CMP	#2
   1534  f79c		       f0 15		      BEQ	ConfigureIntenseTraffic
   1535  f79e		       4c bc f7 	      JMP	ConfigureRushHourTraffic
   1536  f7a1
   1537  f7a1				   ConfigureLightTraffic
   1538  f7a1		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1539  f7a3		       a0 1d		      LDY	#CHECKPOINT_TIME_LIGHT
   1540  f7a5		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1541  f7a7		       4c c2 f7 	      JMP	StoreTrafficChance
   1542  f7aa				   ConfigureRegularTraffic
   1543  f7aa		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1544  f7ac		       a0 22		      LDY	#CHECKPOINT_TIME_REGULAR
   1545  f7ae		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1546  f7b0		       4c c2 f7 	      JMP	StoreTrafficChance
   1547  f7b3				   ConfigureIntenseTraffic
   1548  f7b3		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1549  f7b5		       a0 27		      LDY	#CHECKPOINT_TIME_INTENSE
   1550  f7b7		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1551  f7b9		       4c c2 f7 	      JMP	StoreTrafficChance
   1552  f7bc				   ConfigureRushHourTraffic
   1553  f7bc		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1554  f7be		       a0 2c		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1555  f7c0		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1556  f7c2
   1557  f7c2				   StoreTrafficChance
   1558  f7c2		       86 c1		      STX	TrafficChance
   1559  f7c4		       84 c2		      STY	CheckpointTime
   1560  f7c6		       85 c3		      STA	TrafficColor
   1561  f7c8
   1562  f7c8				   CheckRandomDifficulty
   1563  f7c8		       a5 c5		      LDA	GameMode
   1564  f7ca		       29 08		      AND	#%00001000	; Random difficulties
   1565  f7cc		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1566  f7ce				   RandomDificulty
   1567  f7ce		       a6 8c		      LDX	FrameCount0
   1568  f7d0		       bd 00 fe 	      LDA	AesTable,X
   1569  f7d3		       45 c1		      EOR	TrafficChance
   1570  f7d5		       29 3f		      AND	#%00111111
   1571  f7d7		       85 c1		      STA	TrafficChance
   1572  f7d9
   1573  f7d9				   ReturnFromNextDifficulty
   1574  f7d9		       60		      RTS
   1575  f7da				   EndNextDifficulty
   1576  f7da
   1577  f7da				   DefaultOffsets
   1578  f7da		       a9 20		      LDA	#$20
   1579  f7dc		       85 96		      STA	TrafficOffset1 + 2
   1580  f7de		       a9 40		      LDA	#$40
   1581  f7e0		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1582  f7e2		       a9 60		      LDA	#$60
   1583  f7e4		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1584  f7e6		       a9 80		      LDA	#$80
   1585  f7e8		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1586  f7ea		       a9 a0		      LDA	#$A0
   1587  f7ec		       60		      RTS
   1588  f7ed
   1589  f7ed				   PrintStaticText		; Preload X with the offset referent to StaticText
   1590  f7ed		       bd 00 ff 	      LDA	StaticText,X
   1591  f7f0		       85 d0		      STA	ScoreD0
   1592  f7f2		       e8		      INX
   1593  f7f3		       bd 00 ff 	      LDA	StaticText,X
   1594  f7f6		       85 d1		      STA	ScoreD1
   1595  f7f8		       e8		      INX
   1596  f7f9		       bd 00 ff 	      LDA	StaticText,X
   1597  f7fc		       85 d2		      STA	ScoreD2
   1598  f7fe		       e8		      INX
   1599  f7ff		       bd 00 ff 	      LDA	StaticText,X
   1600  f802		       85 d3		      STA	ScoreD3
   1601  f804		       e8		      INX
   1602  f805		       bd 00 ff 	      LDA	StaticText,X
   1603  f808		       85 d4		      STA	ScoreD4
   1604  f80a		       60		      RTS
   1605  f80b
   1606  f80b				   HorizontalParallaxLoop
   1607  f80b		       a9 ef		      LDA	#%11101111	; Clear the house
   1608  f80d		       39 d8 00 	      AND	ParallaxCache,Y
   1609  f810		       99 d8 00 	      STA	ParallaxCache,Y
   1610  f813				   CalculateParallax0
   1611  f813		       98		      TYA
   1612  f814		       18		      CLC
   1613  f815		       65 91		      ADC	TrafficOffset0 + 1
   1614  f817		       29 04		      AND	#%00000100
   1615  f819		       f0 08		      BEQ	HasEmptySpace0
   1616  f81b				   HasBorder0
   1617  f81b		       b9 d8 00 	      LDA	ParallaxCache,Y
   1618  f81e		       09 0f		      ORA	#%00001111
   1619  f820		       4c 28 f8 	      JMP	StoreParallax0
   1620  f823				   HasEmptySpace0
   1621  f823		       b9 d8 00 	      LDA	ParallaxCache,Y
   1622  f826		       29 f0		      AND	#%11110000
   1623  f828
   1624  f828				   StoreParallax0
   1625  f828		       99 d8 00 	      STA	ParallaxCache,Y
   1626  f82b
   1627  f82b				   CalculateParallax1
   1628  f82b		       98		      TYA
   1629  f82c		       18		      CLC
   1630  f82d		       65 c7		      ADC	ParallaxOffset1 + 1
   1631  f82f		       29 04		      AND	#%00000100
   1632  f831		       f0 08		      BEQ	HasEmptySpace1
   1633  f833				   HasBorder1
   1634  f833		       b9 d8 00 	      LDA	ParallaxCache,Y
   1635  f836		       09 e0		      ORA	#%11100000
   1636  f838		       4c 40 f8 	      JMP	StoreParallax1
   1637  f83b				   HasEmptySpace1
   1638  f83b		       b9 d8 00 	      LDA	ParallaxCache,Y
   1639  f83e		       29 1f		      AND	#%00011111
   1640  f840
   1641  f840				   StoreParallax1
   1642  f840		       99 d8 00 	      STA	ParallaxCache,Y
   1643  f843
   1644  f843				   CalculateParallax2
   1645  f843		       98		      TYA
   1646  f844		       18		      CLC
   1647  f845		       65 c9		      ADC	ParallaxOffset2 + 1
   1648  f847		       29 04		      AND	#%00000100
   1649  f849		       f0 05		      BEQ	HasEmptySpace2
   1650  f84b				   HasBorder2
   1651  f84b		       a9 60		      LDA	#%01100000
   1652  f84d		       4c 52 f8 	      JMP	StoreParallax2
   1653  f850				   HasEmptySpace2
   1654  f850		       a9 00		      LDA	#0
   1655  f852
   1656  f852				   StoreParallax2
   1657  f852		       99 f0 00 	      STA	ParallaxCache2,Y
   1658  f855
   1659  f855				   ContinueHorizontalParallaxLoop
   1660  f855		       88		      DEY
   1661  f856		       10 b3		      BPL	HorizontalParallaxLoop
   1662  f858		       60		      RTS
   1663  f859
   1664  f859				   DefaultBorderLoop
   1665  f859				   CalculateDefaultBorder
   1666  f859		       98		      TYA
   1667  f85a		       18		      CLC
   1668  f85b		       65 91		      ADC	TrafficOffset0 + 1
   1669  f85d		       29 04		      AND	#%00000100
   1670  f85f		       f0 05		      BEQ	HasEmptySpace
   1671  f861				   HasBorder
   1672  f861		       a9 ff		      LDA	#$FF
   1673  f863		       4c 68 f8 	      JMP	StoreBorder
   1674  f866				   HasEmptySpace
   1675  f866		       a9 00		      LDA	#0
   1676  f868
   1677  f868				   StoreBorder
   1678  f868		       99 d8 00 	      STA	ParallaxCache,Y
   1679  f86b		       a9 00		      LDA	#0
   1680  f86d		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1681  f870
   1682  f870				   ContinueDefaultBorderLoop
   1683  f870		       88		      DEY
   1684  f871		       10 e6		      BPL	DefaultBorderLoop
   1685  f873		       60		      RTS
   1686  f874
   1687  f874				   PrepareTachometerBorderLoop
   1688  f874		       a5 8e		      LDA	Player0SpeedL
   1689  f876		       29 80		      AND	#%10000000
   1690  f878		       05 8f		      ORA	Player0SpeedH
   1691  f87a		       18		      CLC
   1692  f87b		       2a		      ROL
   1693  f87c		       69 00		      ADC	#0
   1694  f87e		       85 b0		      STA	Tmp0	; Gear
   1695  f880		       a5 8e		      LDA	Player0SpeedL
   1696  f882		       4a		      LSR
   1697  f883		       4a		      LSR
   1698  f884		       4a		      LSR
   1699  f885		       4a		      LSR
   1700  f886		       29 07		      AND	#%00000111
   1701  f888		       85 b1		      STA	Tmp1	; RPM
   1702  f88a		       a6 a9		      LDX	CurrentCarId	; Y cannot be destroyed here
   1703  f88c		       bd d9 ff 	      LDA	CarIdToMaxGear,X
   1704  f88f		       85 b2		      STA	Tmp2	; Max Gear
   1705  f891
   1706  f891				   TachometerBorderLoop
   1707  f891		       98		      TYA
   1708  f892		       18		      CLC
   1709  f893		       65 91		      ADC	TrafficOffset0 + 1
   1710  f895		       29 04		      AND	#%00000100
   1711  f897		       f0 10		      BEQ	HasBorderTac
   1712  f899		       a6 b0		      LDX	Tmp0
   1713  f89b		       bd eb fd 	      LDA	TachometerGearLookup,X
   1714  f89e		       99 d8 00 	      STA	ParallaxCache,Y
   1715  f8a1		       a9 00		      LDA	#0
   1716  f8a3		       99 f0 00 	      STA	ParallaxCache2,Y
   1717  f8a6		       4c cb f8 	      JMP	ContinueBorderTac
   1718  f8a9				   HasBorderTac
   1719  f8a9		       a5 b2		      LDA	Tmp2	; Max Gear
   1720  f8ab		       c5 b0		      CMP	Tmp0	; Only on max speed
   1721  f8ad		       f0 11		      BEQ	FullBorderTac
   1722  f8af		       a6 b1		      LDX	Tmp1
   1723  f8b1		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1724  f8b4		       99 d8 00 	      STA	ParallaxCache,Y
   1725  f8b7		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1726  f8ba		       99 f0 00 	      STA	ParallaxCache2,Y
   1727  f8bd		       4c cb f8 	      JMP	ContinueBorderTac
   1728  f8c0
   1729  f8c0				   FullBorderTac
   1730  f8c0		       a9 ff		      LDA	#$FF
   1731  f8c2		       99 d8 00 	      STA	ParallaxCache,Y
   1732  f8c5		       99 f0 00 	      STA	ParallaxCache2,Y
   1733  f8c8		       4c cb f8 	      JMP	ContinueBorderTac
   1734  f8cb
   1735  f8cb				   ContinueBorderTac
   1736  f8cb		       88		      DEY
   1737  f8cc		       10 c3		      BPL	TachometerBorderLoop
   1738  f8ce		       60		      RTS
   1739  f8cf
   1740  f8cf				   VerticalParallaxLoop
   1741  f8cf				   CalculateVerticalParallax0
   1742  f8cf		       98		      TYA
   1743  f8d0		       18		      CLC
   1744  f8d1		       65 91		      ADC	TrafficOffset0 + 1
   1745  f8d3		       29 06		      AND	#%00000110
   1746  f8d5		       d0 0b		      BNE	HasNoVerticalLine0
   1747  f8d7				   HasVerticalLine0
   1748  f8d7		       a9 ff		      LDA	#$FF
   1749  f8d9		       99 d8 00 	      STA	ParallaxCache,Y
   1750  f8dc		       99 f0 00 	      STA	ParallaxCache2,Y
   1751  f8df		       4c 1f f9 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1752  f8e2				   HasNoVerticalLine0
   1753  f8e2		       a9 00		      LDA	#0
   1754  f8e4		       99 d8 00 	      STA	ParallaxCache,Y
   1755  f8e7		       99 f0 00 	      STA	ParallaxCache2,Y
   1756  f8ea
   1757  f8ea				   CalculateVerticalParallax1
   1758  f8ea		       98		      TYA
   1759  f8eb		       18		      CLC
   1760  f8ec		       65 c7		      ADC	ParallaxOffset1 + 1
   1761  f8ee		       29 07		      AND	#%00000111
   1762  f8f0		       d0 0d		      BNE	HasNoVerticalLine1
   1763  f8f2
   1764  f8f2				   HasVerticalLine1
   1765  f8f2		       a9 fc		      LDA	#%11111100
   1766  f8f4		       99 d8 00 	      STA	ParallaxCache,Y
   1767  f8f7		       a9 c0		      LDA	#%11000000
   1768  f8f9		       99 f0 00 	      STA	ParallaxCache2,Y
   1769  f8fc		       4c 1f f9 	      JMP	ContinueVerticalParallaxLoop
   1770  f8ff				   HasNoVerticalLine1
   1771  f8ff		       a9 00		      LDA	#0
   1772  f901		       99 d8 00 	      STA	ParallaxCache,Y
   1773  f904		       99 f0 00 	      STA	ParallaxCache2,Y
   1774  f907
   1775  f907				   CalculateVerticalParallax2
   1776  f907		       98		      TYA
   1777  f908		       18		      CLC
   1778  f909		       65 c9		      ADC	ParallaxOffset2 + 1
   1779  f90b		       29 07		      AND	#%00000111
   1780  f90d		       d0 08		      BNE	HasNoVerticalLine2
   1781  f90f
   1782  f90f				   HasVerticalLine2
   1783  f90f		       a9 f0		      LDA	#%11110000
   1784  f911		       99 d8 00 	      STA	ParallaxCache,Y
   1785  f914		       4c 1f f9 	      JMP	ContinueVerticalParallaxLoop
   1786  f917				   HasNoVerticalLine2
   1787  f917		       a9 00		      LDA	#0
   1788  f919		       99 d8 00 	      STA	ParallaxCache,Y
   1789  f91c		       99 f0 00 	      STA	ParallaxCache2,Y
   1790  f91f
   1791  f91f				   ContinueVerticalParallaxLoop
   1792  f91f		       88		      DEY
   1793  f920		       10 ad		      BPL	VerticalParallaxLoop
   1794  f922		       60		      RTS
   1795  f923
   1796  f923				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1797  f923		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1798  f925		       85 d5		      STA	ScoreFontColor
   1799  f927		       a9 01		      LDA	#1
   1800  f929		       85 d6		      STA	ScoreFontColorHoldChange
   1801  f92b
   1802  f92b		       a5 8d		      LDA	FrameCount1
   1803  f92d		       29 07		      AND	#%00000111
   1804  f92f		       85 b3		      STA	Tmp3
   1805  f931							;0 is Zelda Name, (default)
   1806  f931		       a9 01		      LDA	#1
   1807  f933		       c5 b3		      CMP	Tmp3
   1808  f935		       f0 38		      BEQ	PrintZeldaDateLeft
   1809  f937
   1810  f937		       a9 02		      LDA	#2
   1811  f939		       c5 b3		      CMP	Tmp3
   1812  f93b		       f0 23		      BEQ	PrintPolvinhosLeft
   1813  f93d
   1814  f93d		       a9 03		      LDA	#3
   1815  f93f		       c5 b3		      CMP	Tmp3
   1816  f941		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1817  f943
   1818  f943		       a9 04		      LDA	#4
   1819  f945		       c5 b3		      CMP	Tmp3
   1820  f947		       f0 1c		      BEQ	PrintIvonneLeft
   1821  f949
   1822  f949		       a9 05		      LDA	#5
   1823  f94b		       c5 b3		      CMP	Tmp3
   1824  f94d		       f0 2a		      BEQ	PrintIvonneDateLeft
   1825  f94f
   1826  f94f		       a9 06		      LDA	#6
   1827  f951		       c5 b3		      CMP	Tmp3
   1828  f953		       f0 15		      BEQ	PrintArtLeft
   1829  f955
   1830  f955		       a9 07		      LDA	#7
   1831  f957		       c5 b3		      CMP	Tmp3
   1832  f959		       f0 23		      BEQ	PrintLeonardoLeft
   1833  f95b
   1834  f95b				   PrintZeldaLeft
   1835  f95b		       a2 28		      LDX	#<ZeldaTextLeft
   1836  f95d		       4c 83 f9 	      JMP	ProcessPrintEasterEgg
   1837  f960				   PrintPolvinhosLeft
   1838  f960		       a2 3c		      LDX	#<PolvinhosTextLeft
   1839  f962		       4c 83 f9 	      JMP	ProcessPrintEasterEgg
   1840  f965				   PrintIvonneLeft
   1841  f965		       a2 50		      LDX	#<IvonneTextLeft
   1842  f967		       4c 83 f9 	      JMP	ProcessPrintEasterEgg
   1843  f96a				   PrintArtLeft
   1844  f96a		       a2 64		      LDX	#<PaperArtTextLeft
   1845  f96c		       4c 83 f9 	      JMP	ProcessPrintEasterEgg
   1846  f96f
   1847  f96f				   PrintZeldaDateLeft
   1848  f96f		       a2 32		      LDX	#<ZeldaDateLeft
   1849  f971		       4c 83 f9 	      JMP	ProcessPrintEasterEgg
   1850  f974				   PrintPolvinhosDateLeft
   1851  f974		       a2 46		      LDX	#<PolvinhosDateLeft
   1852  f976		       4c 83 f9 	      JMP	ProcessPrintEasterEgg
   1853  f979				   PrintIvonneDateLeft
   1854  f979		       a2 5a		      LDX	#<IvonneDateLeft
   1855  f97b		       4c 83 f9 	      JMP	ProcessPrintEasterEgg
   1856  f97e				   PrintLeonardoLeft
   1857  f97e		       a2 6e		      LDX	#<LeonardoTextLeft
   1858  f980		       4c 83 f9 	      JMP	ProcessPrintEasterEgg
   1859  f983
   1860  f983				   ProcessPrintEasterEgg
   1861  f983		       a5 8c		      LDA	FrameCount0	;3
   1862  f985		       29 01		      AND	#%00000001	;2
   1863  f987		       d0 03		      BNE	TranformIntoRightText
   1864  f989		       4c 91 f9 	      JMP	PrintEasterEggText
   1865  f98c				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1866  f98c		       8a		      TXA
   1867  f98d		       18		      CLC
   1868  f98e		       69 05		      ADC	#HALF_TEXT_SIZE
   1869  f990		       aa		      TAX
   1870  f991
   1871  f991				   PrintEasterEggText
   1872  f991		       20 ed f7 	      JSR	PrintStaticText
   1873  f994		       60		      RTS
   1874  f995
   1875  f995				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1876  f995		       a2 00		      LDX	#0
   1877  f997		       a0 04		      LDY	#FONT_OFFSET
   1878  f999
   1879  f999				   ScoreLoop		; 20 
   1880  f999		       85 02		      STA	WSYNC	;2
   1881  f99b
   1882  f99b		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1883  f99d		       85 0d		      STA	PF0	;3
   1884  f99f
   1885  f99f		       a5 82		      LDA	PF1Cache	;3
   1886  f9a1		       85 0e		      STA	PF1	;3
   1887  f9a3
   1888  f9a3		       a5 83		      LDA	PF2Cache	;3
   1889  f9a5		       85 0f		      STA	PF2	;3
   1890  f9a7
   1891  f9a7				   DrawScoreD0		; 15
   1892  f9a7		       a6 d0		      LDX	ScoreD0	; 3
   1893  f9a9		       bd 00 fd 	      LDA	Font,X	;4
   1894  f9ac		       85 81		      STA	PF0Cache	;3
   1895  f9ae		       c6 d0		      DEC	ScoreD0	;5
   1896  f9b0
   1897  f9b0				   DrawScoreD1		; 23	
   1898  f9b0		       a6 d1		      LDX	ScoreD1	; 3
   1899  f9b2		       bd 00 fd 	      LDA	Font,X	;4
   1900  f9b5		       0a		      ASL		;2
   1901  f9b6		       0a		      ASL		;2
   1902  f9b7		       0a		      ASL		;2
   1903  f9b8		       0a		      ASL		;2
   1904  f9b9		       85 82		      STA	PF1Cache	;3
   1905  f9bb		       c6 d1		      DEC	ScoreD1	;5
   1906  f9bd
   1907  f9bd				   DrawScoreD2		; 20
   1908  f9bd		       a6 d2		      LDX	ScoreD2	; 3
   1909  f9bf		       bd 00 fd 	      LDA	Font,X	;4
   1910  f9c2		       29 0f		      AND	#%00001111	;2
   1911  f9c4		       05 82		      ORA	PF1Cache	;3
   1912  f9c6		       85 82		      STA	PF1Cache	;3
   1913  f9c8		       c6 d2		      DEC	ScoreD2	;5
   1914  f9ca
   1915  f9ca				   DrawScoreD3		; 23
   1916  f9ca		       a6 d3		      LDX	ScoreD3	; 3
   1917  f9cc		       bd 00 fd 	      LDA	Font,X	;4
   1918  f9cf		       4a		      LSR		;2
   1919  f9d0		       4a		      LSR		;2
   1920  f9d1		       4a		      LSR		;2
   1921  f9d2		       4a		      LSR		;2
   1922  f9d3		       85 83		      STA	PF2Cache	;3
   1923  f9d5		       c6 d3		      DEC	ScoreD3	;5
   1924  f9d7
   1925  f9d7				   DrawScoreD4		; 20
   1926  f9d7		       a6 d4		      LDX	ScoreD4	; 3
   1927  f9d9		       bd 00 fd 	      LDA	Font,X	;4
   1928  f9dc		       29 f0		      AND	#%11110000	;2
   1929  f9de		       05 83		      ORA	PF2Cache	;3
   1930  f9e0		       85 83		      STA	PF2Cache	;3
   1931  f9e2		       c6 d4		      DEC	ScoreD4	;5
   1932  f9e4
   1933  f9e4
   1934  f9e4		       88		      DEY		;2
   1935  f9e5		       10 b2		      BPL	ScoreLoop	;4
   1936  f9e7
   1937  f9e7		       85 02		      STA	WSYNC
   1938  f9e9		       20 66 f7 	      JSR	LoadAll
   1939  f9ec		       60		      RTS		; 6
   1940  f9ed
   1941  f9ed				   PrintRightDecimalDigits
   1942  f9ed		       b9 00 00 	      LDA	0,Y
   1943  f9f0		       4a		      LSR
   1944  f9f1		       4a		      LSR
   1945  f9f2		       4a		      LSR
   1946  f9f3		       4a		      LSR
   1947  f9f4		       aa		      TAX
   1948  f9f5		       bd be fd 	      LDA	FontLookup,X	;4
   1949  f9f8		       85 d2		      STA	ScoreD2	;3
   1950  f9fa
   1951  f9fa		       b9 00 00 	      LDA	0,Y
   1952  f9fd		       29 0f		      AND	#%00001111
   1953  f9ff		       aa		      TAX
   1954  fa00		       bd be fd 	      LDA	FontLookup,X	;4
   1955  fa03		       85 d3		      STA	ScoreD3	;3
   1956  fa05
   1957  fa05		       c8		      INY
   1958  fa06		       b9 00 00 	      LDA	0,Y
   1959  fa09		       4a		      LSR
   1960  fa0a		       4a		      LSR
   1961  fa0b		       4a		      LSR
   1962  fa0c		       4a		      LSR
   1963  fa0d		       aa		      TAX
   1964  fa0e		       bd be fd 	      LDA	FontLookup,X	;4
   1965  fa11		       85 d0		      STA	ScoreD0	;3
   1966  fa13
   1967  fa13		       b9 00 00 	      LDA	0,Y
   1968  fa16		       29 0f		      AND	#%00001111
   1969  fa18		       aa		      TAX
   1970  fa19		       bd be fd 	      LDA	FontLookup,X	;4
   1971  fa1c		       85 d1		      STA	ScoreD1	;3
   1972  fa1e
   1973  fa1e		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1974  fa20		       85 d4		      STA	ScoreD4
   1975  fa22		       60		      RTS
   1976  fa23
   1977  fa23				   PrintLastLeftDecimalDigits
   1978  fa23		       b9 00 00 	      LDA	0,Y
   1979  fa26		       4a		      LSR
   1980  fa27		       4a		      LSR
   1981  fa28		       4a		      LSR
   1982  fa29		       4a		      LSR
   1983  fa2a		       aa		      TAX
   1984  fa2b		       bd be fd 	      LDA	FontLookup,X	;4
   1985  fa2e		       85 d3		      STA	ScoreD3	;3
   1986  fa30		       b9 00 00 	      LDA	0,Y
   1987  fa33		       29 0f		      AND	#%00001111
   1988  fa35		       aa		      TAX
   1989  fa36		       bd be fd 	      LDA	FontLookup,X	;4
   1990  fa39		       85 d4		      STA	ScoreD4	;3
   1991  fa3b		       60		      RTS
   1992  fa3c
   1993  fa3c				   PrintZerosLeft
   1994  fa3c		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1995  fa3e		       85 d2		      STA	ScoreD2
   1996  fa40		       85 d3		      STA	ScoreD3
   1997  fa42		       85 d4		      STA	ScoreD4
   1998  fa44		       60		      RTS
   1999  fa45
   2000  fa45				   DrawGameOverScoreLine
   2001  fa45		       85 02		      STA	WSYNC
   2002  fa47		       20 95 f9 	      JSR	PrintScore
   2003  fa4a		       85 02		      STA	WSYNC
   2004  fa4c		       85 02		      STA	WSYNC
   2005  fa4e		       20 57 f7 	      JSR	ClearPF
   2006  fa51		       60		      RTS
   2007  fa52
   2008  fa52				   DrawGameOverScreenLeft
   2009  fa52		       85 02		      STA	WSYNC
   2010  fa54		       20 57 f7 	      JSR	ClearPF
   2011  fa57
   2012  fa57				   DrawBcdScoreLeft
   2013  fa57		       20 a6 fb 	      JSR	Sleep8Lines
   2014  fa5a		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2015  fa5c		       85 06		      STA	COLUP0
   2016  fa5e		       85 02		      STA	WSYNC
   2017  fa60		       a9 86		      LDA	#<CS + #FONT_OFFSET
   2018  fa62		       85 d0		      STA	ScoreD0
   2019  fa64
   2020  fa64		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2021  fa66		       85 d1		      STA	ScoreD1
   2022  fa68
   2023  fa68		       a5 b7		      LDA	ScoreBcd3
   2024  fa6a		       29 0f		      AND	#%00001111
   2025  fa6c		       aa		      TAX
   2026  fa6d		       bd be fd 	      LDA	FontLookup,X	;4
   2027  fa70		       85 d2		      STA	ScoreD2	;3
   2028  fa72
   2029  fa72		       a0 b6		      LDY	#ScoreBcd2
   2030  fa74		       20 23 fa 	      JSR	PrintLastLeftDecimalDigits
   2031  fa77
   2032  fa77		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2033  fa7a
   2034  fa7a				   DrawTimerLeft
   2035  fa7a		       20 a6 fb 	      JSR	Sleep8Lines
   2036  fa7d		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2037  fa7f		       85 06		      STA	COLUP0
   2038  fa81		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   2039  fa83		       85 d0		      STA	ScoreD0
   2040  fa85		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2041  fa87		       85 d1		      STA	ScoreD1
   2042  fa89		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   2043  fa8b		       85 d2		      STA	ScoreD2
   2044  fa8d		       a0 bf		      LDY	#TimeBcd2
   2045  fa8f		       85 02		      STA	WSYNC
   2046  fa91		       20 23 fa 	      JSR	PrintLastLeftDecimalDigits
   2047  fa94		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2048  fa97
   2049  fa97				   DrawGlideTimerLeft
   2050  fa97		       20 a6 fb 	      JSR	Sleep8Lines
   2051  fa9a		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2052  fa9c		       85 06		      STA	COLUP0
   2053  fa9e		       85 02		      STA	WSYNC
   2054  faa0		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2055  faa2		       85 d0		      STA	ScoreD0
   2056  faa4		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2057  faa6		       85 d1		      STA	ScoreD1
   2058  faa8		       20 3c fa 	      JSR	PrintZerosLeft
   2059  faab		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2060  faae
   2061  faae				   DrawHitCountLeft
   2062  faae		       20 a6 fb 	      JSR	Sleep8Lines
   2063  fab1		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2064  fab3		       85 06		      STA	COLUP0
   2065  fab5		       85 02		      STA	WSYNC
   2066  fab7		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2067  fab9		       85 d0		      STA	ScoreD0
   2068  fabb		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2069  fabd		       85 d1		      STA	ScoreD1
   2070  fabf		       20 3c fa 	      JSR	PrintZerosLeft
   2071  fac2		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2072  fac5
   2073  fac5				   DrawCheckpointCountLeft
   2074  fac5		       20 a6 fb 	      JSR	Sleep8Lines
   2075  fac8		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2076  faca		       85 06		      STA	COLUP0
   2077  facc		       85 02		      STA	WSYNC
   2078  face		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2079  fad0		       85 d0		      STA	ScoreD0
   2080  fad2		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2081  fad4		       85 d1		      STA	ScoreD1
   2082  fad6		       20 3c fa 	      JSR	PrintZerosLeft
   2083  fad9		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2084  fadc
   2085  fadc				   DrawGameVersionLeft
   2086  fadc		       20 a6 fb 	      JSR	Sleep8Lines
   2087  fadf		       a9 49		      LDA	#VERSION_COLOR
   2088  fae1		       85 06		      STA	COLUP0
   2089  fae3
   2090  fae3		       a5 c5		      LDA	GameMode
   2091  fae5		       aa		      TAX
   2092  fae6		       bd be fd 	      LDA	FontLookup,X	;4
   2093  fae9		       85 d0		      STA	ScoreD0	;3
   2094  faeb
   2095  faeb		       a5 a9		      LDA	CurrentCarId
   2096  faed		       aa		      TAX
   2097  faee		       bd be fd 	      LDA	FontLookup,X	;4
   2098  faf1		       85 d1		      STA	ScoreD1	;3
   2099  faf3
   2100  faf3		       a5 a6		      LDA	StartSWCHB
   2101  faf5		       29 40		      AND	#%01000000	; P0 difficulty
   2102  faf7		       49 40		      EOR	#%01000000	; Reverse bytes
   2103  faf9		       2a		      ROL
   2104  fafa		       2a		      ROL
   2105  fafb		       2a		      ROL
   2106  fafc		       18		      CLC
   2107  fafd		       69 0a		      ADC	#10
   2108  faff		       aa		      TAX
   2109  fb00		       bd be fd 	      LDA	FontLookup,X	;4
   2110  fb03		       85 d2		      STA	ScoreD2	;3
   2111  fb05
   2112  fb05		       a5 a6		      LDA	StartSWCHB
   2113  fb07		       29 80		      AND	#%10000000	; P0 difficulty
   2114  fb09		       49 80		      EOR	#%10000000	; Reverse bytes
   2115  fb0b		       2a		      ROL
   2116  fb0c		       2a		      ROL
   2117  fb0d		       18		      CLC
   2118  fb0e		       69 0a		      ADC	#10
   2119  fb10		       aa		      TAX
   2120  fb11		       bd be fd 	      LDA	FontLookup,X	;4
   2121  fb14		       85 d3		      STA	ScoreD3	;3
   2122  fb16
   2123  fb16		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2124  fb18		       85 d4		      STA	ScoreD4
   2125  fb1a
   2126  fb1a		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2127  fb1d
   2128  fb1d		       4c 83 fb 	      JMP	FinalizeDrawGameOver
   2129  fb20
   2130  fb20				   DrawGameOverScreenRight
   2131  fb20		       85 02		      STA	WSYNC
   2132  fb22		       20 57 f7 	      JSR	ClearPF
   2133  fb25
   2134  fb25				   DrawBcdScoreRight
   2135  fb25		       20 a6 fb 	      JSR	Sleep8Lines
   2136  fb28		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2137  fb2a		       85 07		      STA	COLUP1
   2138  fb2c		       85 02		      STA	WSYNC
   2139  fb2e		       a0 b4		      LDY	#ScoreBcd0
   2140  fb30		       20 ed f9 	      JSR	PrintRightDecimalDigits
   2141  fb33
   2142  fb33		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2143  fb36
   2144  fb36				   DrawTimerRight
   2145  fb36		       20 a6 fb 	      JSR	Sleep8Lines
   2146  fb39		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2147  fb3b		       85 07		      STA	COLUP1
   2148  fb3d		       a0 bd		      LDY	#TimeBcd0
   2149  fb3f		       20 ed f9 	      JSR	PrintRightDecimalDigits
   2150  fb42
   2151  fb42		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2152  fb45				   DrawGlideTimeRight
   2153  fb45		       20 a6 fb 	      JSR	Sleep8Lines
   2154  fb48		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2155  fb4a		       85 07		      STA	COLUP1
   2156  fb4c		       a0 cd		      LDY	#GlideTimeBcd0
   2157  fb4e		       20 ed f9 	      JSR	PrintRightDecimalDigits
   2158  fb51		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2159  fb54
   2160  fb54				   DrawHitCountRight
   2161  fb54		       20 a6 fb 	      JSR	Sleep8Lines
   2162  fb57		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2163  fb59		       85 07		      STA	COLUP1
   2164  fb5b		       a0 cb		      LDY	#HitCountBcd0
   2165  fb5d		       20 ed f9 	      JSR	PrintRightDecimalDigits
   2166  fb60		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2167  fb63
   2168  fb63				   DrawCheckpointCountRight
   2169  fb63		       20 a6 fb 	      JSR	Sleep8Lines
   2170  fb66		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2171  fb68		       85 07		      STA	COLUP1
   2172  fb6a		       a0 a4		      LDY	#CheckpointBcd0
   2173  fb6c		       20 ed f9 	      JSR	PrintRightDecimalDigits
   2174  fb6f		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2175  fb72
   2176  fb72				   DrawVersionRight
   2177  fb72		       20 a6 fb 	      JSR	Sleep8Lines
   2178  fb75		       a9 49		      LDA	#VERSION_COLOR
   2179  fb77		       85 07		      STA	COLUP1
   2180  fb79		       85 02		      STA	WSYNC
   2181  fb7b		       a2 78		      LDX	#<VersionText
   2182  fb7d		       20 ed f7 	      JSR	PrintStaticText
   2183  fb80		       20 45 fa 	      JSR	DrawGameOverScoreLine
   2184  fb83
   2185  fb83				   FinalizeDrawGameOver
   2186  fb83		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2187  fb85		       85 d5		      STA	ScoreFontColor
   2188  fb87		       20 9d fb 	      JSR	Sleep4Lines
   2189  fb8a		       20 ad fb 	      JSR	Sleep32Lines
   2190  fb8d		       20 ad fb 	      JSR	Sleep32Lines
   2191  fb90		       4c 58 f6 	      JMP	PrepareOverscan
   2192  fb93
   2193  fb93				   WaitForVblankEnd
   2194  fb93		       ad 84 02 	      LDA	INTIM
   2195  fb96		       d0 fb		      BNE	WaitForVblankEnd
   2196  fb98		       85 02		      STA	WSYNC
   2197  fb9a		       85 01		      STA	VBLANK
   2198  fb9c		       60		      RTS
   2199  fb9d
   2200  fb9d				   Sleep4Lines
   2201  fb9d		       85 02		      STA	WSYNC
   2202  fb9f		       85 02		      STA	WSYNC
   2203  fba1		       85 02		      STA	WSYNC
   2204  fba3		       85 02		      STA	WSYNC
   2205  fba5		       60		      RTS
   2206  fba6
   2207  fba6				   Sleep8Lines
   2208  fba6		       20 9d fb 	      JSR	Sleep4Lines
   2209  fba9		       20 9d fb 	      JSR	Sleep4Lines
   2210  fbac		       60		      RTS
   2211  fbad
   2212  fbad				   Sleep32Lines
   2213  fbad		       20 a6 fb 	      JSR	Sleep8Lines
   2214  fbb0		       20 a6 fb 	      JSR	Sleep8Lines
   2215  fbb3		       20 a6 fb 	      JSR	Sleep8Lines
   2216  fbb6		       20 a6 fb 	      JSR	Sleep8Lines
   2217  fbb9		       60		      RTS
   2218  fbba
   2219  fbba							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2220  fc00					      org	$FC00
   2221  fc00				   QrCode1
   2222  fc00		       1f		      .byte.b	#%00011111
   2223  fc01		       10		      .byte.b	#%00010000
   2224  fc02		       17		      .byte.b	#%00010111
   2225  fc03		       17		      .byte.b	#%00010111
   2226  fc04		       17		      .byte.b	#%00010111
   2227  fc05		       10		      .byte.b	#%00010000
   2228  fc06		       1f		      .byte.b	#%00011111
   2229  fc07		       00		      .byte.b	#%00000000
   2230  fc08		       17		      .byte.b	#%00010111
   2231  fc09		       10		      .byte.b	#%00010000
   2232  fc0a		       1d		      .byte.b	#%00011101
   2233  fc0b		       16		      .byte.b	#%00010110
   2234  fc0c		       03		      .byte.b	#%00000011
   2235  fc0d		       19		      .byte.b	#%00011001
   2236  fc0e		       13		      .byte.b	#%00010011
   2237  fc0f		       1c		      .byte.b	#%00011100
   2238  fc10		       0b		      .byte.b	#%00001011
   2239  fc11		       00		      .byte.b	#%00000000
   2240  fc12		       1f		      .byte.b	#%00011111
   2241  fc13		       10		      .byte.b	#%00010000
   2242  fc14		       17		      .byte.b	#%00010111
   2243  fc15		       17		      .byte.b	#%00010111
   2244  fc16		       17		      .byte.b	#%00010111
   2245  fc17		       10		      .byte.b	#%00010000
   2246  fc18		       1f		      .byte.b	#%00011111
   2247  fc19
   2248  fc19				   QrCode2
   2249  fc19		       c3		      .byte.b	#%11000011
   2250  fc1a		       9a		      .byte.b	#%10011010
   2251  fc1b		       82		      .byte.b	#%10000010
   2252  fc1c		       da		      .byte.b	#%11011010
   2253  fc1d		       aa		      .byte.b	#%10101010
   2254  fc1e		       ca		      .byte.b	#%11001010
   2255  fc1f		       f3		      .byte.b	#%11110011
   2256  fc20		       78		      .byte.b	#%01111000
   2257  fc21		       df		      .byte.b	#%11011111
   2258  fc22		       fc		      .byte.b	#%11111100
   2259  fc23		       c7		      .byte.b	#%11000111
   2260  fc24		       98		      .byte.b	#%10011000
   2261  fc25		       23		      .byte.b	#%00100011
   2262  fc26		       b9		      .byte.b	#%10111001
   2263  fc27		       d2		      .byte.b	#%11010010
   2264  fc28		       30		      .byte.b	#%00110000
   2265  fc29		       eb		      .byte.b	#%11101011
   2266  fc2a		       28		      .byte.b	#%00101000
   2267  fc2b		       ab		      .byte.b	#%10101011
   2268  fc2c		       72		      .byte.b	#%01110010
   2269  fc2d		       fa		      .byte.b	#%11111010
   2270  fc2e		       7a		      .byte.b	#%01111010
   2271  fc2f		       32		      .byte.b	#%00110010
   2272  fc30		       3a		      .byte.b	#%00111010
   2273  fc31		       63		      .byte.b	#%01100011
   2274  fc32
   2275  fc32				   QrCode3
   2276  fc32		       98		      .byte.b	#%10011000
   2277  fc33		       c3		      .byte.b	#%11000011
   2278  fc34		       39		      .byte.b	#%00111001
   2279  fc35		       34		      .byte.b	#%00110100
   2280  fc36		       ff		      .byte.b	#%11111111
   2281  fc37		       71		      .byte.b	#%01110001
   2282  fc38		       d5		      .byte.b	#%11010101
   2283  fc39		       d1		      .byte.b	#%11010001
   2284  fc3a		       5f		      .byte.b	#%01011111
   2285  fc3b		       26		      .byte.b	#%00100110
   2286  fc3c		       2d		      .byte.b	#%00101101
   2287  fc3d		       e9		      .byte.b	#%11101001
   2288  fc3e		       d6		      .byte.b	#%11010110
   2289  fc3f		       26		      .byte.b	#%00100110
   2290  fc40		       ba		      .byte.b	#%10111010
   2291  fc41		       03		      .byte.b	#%00000011
   2292  fc42		       dd		      .byte.b	#%11011101
   2293  fc43		       e0		      .byte.b	#%11100000
   2294  fc44		       57		      .byte.b	#%01010111
   2295  fc45		       14		      .byte.b	#%00010100
   2296  fc46		       35		      .byte.b	#%00110101
   2297  fc47		       e5		      .byte.b	#%11100101
   2298  fc48		       b5		      .byte.b	#%10110101
   2299  fc49		       d4		      .byte.b	#%11010100
   2300  fc4a		       97		      .byte.b	#%10010111
   2301  fc4b
   2302  fc4b				   QrCode4
   2303  fc4b		       09		      .byte.b	#%00001001
   2304  fc4c		       0e		      .byte.b	#%00001110
   2305  fc4d		       0f		      .byte.b	#%00001111
   2306  fc4e		       0c		      .byte.b	#%00001100
   2307  fc4f		       0c		      .byte.b	#%00001100
   2308  fc50		       08		      .byte.b	#%00001000
   2309  fc51		       08		      .byte.b	#%00001000
   2310  fc52		       06		      .byte.b	#%00000110
   2311  fc53		       06		      .byte.b	#%00000110
   2312  fc54		       0b		      .byte.b	#%00001011
   2313  fc55		       0f		      .byte.b	#%00001111
   2314  fc56		       04		      .byte.b	#%00000100
   2315  fc57		       08		      .byte.b	#%00001000
   2316  fc58		       0f		      .byte.b	#%00001111
   2317  fc59		       09		      .byte.b	#%00001001
   2318  fc5a		       07		      .byte.b	#%00000111
   2319  fc5b		       05		      .byte.b	#%00000101
   2320  fc5c		       00		      .byte.b	#%00000000
   2321  fc5d		       0f		      .byte.b	#%00001111
   2322  fc5e		       08		      .byte.b	#%00001000
   2323  fc5f		       0b		      .byte.b	#%00001011
   2324  fc60		       0b		      .byte.b	#%00001011
   2325  fc61		       0b		      .byte.b	#%00001011
   2326  fc62		       08		      .byte.b	#%00001000
   2327  fc63		       0f		      .byte.b	#%00001111
   2328  fc64
   2329  fc64							; Moved here because of rom space.
   2330  fc64							; The only SBR in constants space
   2331  fc64				   DrawQrCode
   2332  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2333  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2334  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2335  fc6a		       85 0a		      STA	CTRLPF
   2336  fc6c		       20 45 f7 	      JSR	ClearAll	; To be 100 sure!
   2337  fc6f		       ad 82 02 	      LDA	SWCHB
   2338  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2339  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2340  fc76		       86 09		      STX	COLUBK
   2341  fc78		       84 08		      STY	COLUPF
   2342  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2343  fc7d				   StoreReversedQrCode
   2344  fc7d		       86 08		      STX	COLUPF
   2345  fc7f		       84 09		      STY	COLUBK
   2346  fc81
   2347  fc81				   ContinueQrCode
   2348  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2349  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2350  fc85		       20 93 fb 	      JSR	WaitForVblankEnd
   2351  fc88		       20 a6 fb 	      JSR	Sleep8Lines
   2352  fc8b		       20 a6 fb 	      JSR	Sleep8Lines
   2353  fc8e		       20 a6 fb 	      JSR	Sleep8Lines
   2354  fc91
   2355  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2356  fc91		       85 02		      STA	WSYNC
   2357  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2358  fc96		       85 0e		      STA	PF1	;3
   2359  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2360  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2362  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2363  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2364  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2365  fcb3		       85 0e		      STA	PF1	;3
   2366  fcb5
   2367  fcb5		       ca		      DEX		;2
   2368  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2369  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2370  fcba		       88		      DEY		;2
   2371  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2372  fcbd
   2373  fcbd				   EndQrCodeLoop
   2374  fcbd		       85 02		      STA	WSYNC	;
   2375  fcbf		       a9 00		      LDA	#0
   2376  fcc1		       85 0e		      STA	PF1	;3
   2377  fcc3		       85 0f		      STA	PF2	;3
   2378  fcc5
   2379  fcc5		       20 ad fb 	      JSR	Sleep32Lines
   2380  fcc8		       4c 58 f6 	      JMP	PrepareOverscan
   2381  fccb
   2382  fd00					      org	$FD00
   2383  fd00				   Font
   2384  fd00				   C0
   2385  fd00		       e7		      .byte.b	#%11100111	;
   2386  fd01		       a5		      .byte.b	#%10100101	; 
   2387  fd02		       a5		      .byte.b	#%10100101	; 
   2388  fd03		       a5		      .byte.b	#%10100101	; 
   2389  fd04		       e7		      .byte.b	#%11100111	;	
   2390  fd05				   C1
   2391  fd05		       e7		      .byte.b	#%11100111	;
   2392  fd06		       42		      .byte.b	#%01000010	; 
   2393  fd07		       42		      .byte.b	#%01000010	; 
   2394  fd08		       42		      .byte.b	#%01000010	; 
   2395  fd09		       66		      .byte.b	#%01100110	;
   2396  fd0a				   C2
   2397  fd0a		       e7		      .byte.b	#%11100111	;
   2398  fd0b		       24		      .byte.b	#%00100100	; 
   2399  fd0c		       e7		      .byte.b	#%11100111	; 
   2400  fd0d		       81		      .byte.b	#%10000001	; 
   2401  fd0e		       e7		      .byte.b	#%11100111	;
   2402  fd0f				   C3
   2403  fd0f		       e7		      .byte.b	#%11100111	;
   2404  fd10		       81		      .byte.b	#%10000001	; 
   2405  fd11		       e7		      .byte.b	#%11100111	; 
   2406  fd12		       81		      .byte.b	#%10000001	; 
   2407  fd13		       e7		      .byte.b	#%11100111	;
   2408  fd14				   C4
   2409  fd14		       81		      .byte.b	#%10000001	;
   2410  fd15		       81		      .byte.b	#%10000001	; 
   2411  fd16		       e7		      .byte.b	#%11100111	; 
   2412  fd17		       a5		      .byte.b	#%10100101	; 
   2413  fd18		       a5		      .byte.b	#%10100101	;
   2414  fd19				   C5
   2415  fd19		       e7		      .byte.b	#%11100111	;
   2416  fd1a		       81		      .byte.b	#%10000001	; 
   2417  fd1b		       e7		      .byte.b	#%11100111	; 
   2418  fd1c		       24		      .byte.b	#%00100100	; 
   2419  fd1d		       e7		      .byte.b	#%11100111	;
   2420  fd1e				   C6
   2421  fd1e		       e7		      .byte.b	#%11100111	;
   2422  fd1f		       a5		      .byte.b	#%10100101	; 
   2423  fd20		       e7		      .byte.b	#%11100111	; 
   2424  fd21		       24		      .byte.b	#%00100100	; 
   2425  fd22		       e7		      .byte.b	#%11100111	;
   2426  fd23				   C7
   2427  fd23		       81		      .byte.b	#%10000001	;
   2428  fd24		       81		      .byte.b	#%10000001	; 
   2429  fd25		       81		      .byte.b	#%10000001	; 
   2430  fd26		       81		      .byte.b	#%10000001	; 
   2431  fd27		       e7		      .byte.b	#%11100111	;
   2432  fd28				   C8
   2433  fd28		       e7		      .byte.b	#%11100111	;
   2434  fd29		       a5		      .byte.b	#%10100101	; 
   2435  fd2a		       e7		      .byte.b	#%11100111	; 
   2436  fd2b		       a5		      .byte.b	#%10100101	; 
   2437  fd2c		       e7		      .byte.b	#%11100111	;
   2438  fd2d				   C9
   2439  fd2d		       e7		      .byte.b	#%11100111	;
   2440  fd2e		       81		      .byte.b	#%10000001	; 
   2441  fd2f		       e7		      .byte.b	#%11100111	; 
   2442  fd30		       a5		      .byte.b	#%10100101	; 
   2443  fd31		       e7		      .byte.b	#%11100111	;
   2444  fd32				   CA
   2445  fd32		       a5		      .byte.b	#%10100101	;
   2446  fd33		       a5		      .byte.b	#%10100101	; 
   2447  fd34		       e7		      .byte.b	#%11100111	; 
   2448  fd35		       a5		      .byte.b	#%10100101	; 
   2449  fd36		       e7		      .byte.b	#%11100111	;
   2450  fd37				   CB
   2451  fd37		       66		      .byte.b	#%01100110	;
   2452  fd38		       a5		      .byte.b	#%10100101	; 
   2453  fd39		       66		      .byte.b	#%01100110	; 
   2454  fd3a		       a5		      .byte.b	#%10100101	;
   2455  fd3b		       66		      .byte.b	#%01100110	;
   2456  fd3c				   CC
   2457  fd3c		       e7		      .byte.b	#%11100111	;
   2458  fd3d		       24		      .byte.b	#%00100100	; 
   2459  fd3e		       24		      .byte.b	#%00100100	; 
   2460  fd3f		       24		      .byte.b	#%00100100	;
   2461  fd40		       e7		      .byte.b	#%11100111	;
   2462  fd41
   2463  fd41				   CD
   2464  fd41		       66		      .byte.b	#%01100110	;
   2465  fd42		       a5		      .byte.b	#%10100101	; 
   2466  fd43		       a5		      .byte.b	#%10100101	; 
   2467  fd44		       a5		      .byte.b	#%10100101	;
   2468  fd45		       66		      .byte.b	#%01100110	;
   2469  fd46
   2470  fd46				   CE
   2471  fd46		       e7		      .byte.b	#%11100111	;
   2472  fd47		       24		      .byte.b	#%00100100	; 
   2473  fd48		       e7		      .byte.b	#%11100111	; 
   2474  fd49		       24		      .byte.b	#%00100100	; 
   2475  fd4a		       e7		      .byte.b	#%11100111	;
   2476  fd4b
   2477  fd4b				   CF
   2478  fd4b		       24		      .byte.b	#%00100100	;
   2479  fd4c		       24		      .byte.b	#%00100100	; 
   2480  fd4d		       e7		      .byte.b	#%11100111	; 
   2481  fd4e		       24		      .byte.b	#%00100100	; 
   2482  fd4f		       e7		      .byte.b	#%11100111	;
   2483  fd50
   2484  fd50				   CG
   2485  fd50		       c3		      .byte.b	#%11000011	;
   2486  fd51		       a5		      .byte.b	#%10100101	; 
   2487  fd52		       a5		      .byte.b	#%10100101	; 
   2488  fd53		       24		      .byte.b	#%00100100	; 
   2489  fd54		       c3		      .byte.b	#%11000011	;	
   2490  fd55
   2491  fd55				   CH
   2492  fd55		       a5		      .byte.b	#%10100101	;
   2493  fd56		       a5		      .byte.b	#%10100101	; 
   2494  fd57		       e7		      .byte.b	#%11100111	; 
   2495  fd58		       a5		      .byte.b	#%10100101	; 
   2496  fd59		       a5		      .byte.b	#%10100101	;
   2497  fd5a
   2498  fd5a				   CK
   2499  fd5a		       a5		      .byte.b	#%10100101	;
   2500  fd5b		       a5		      .byte.b	#%10100101	; 
   2501  fd5c		       66		      .byte.b	#%01100110	; 
   2502  fd5d		       a5		      .byte.b	#%10100101	; 
   2503  fd5e		       a5		      .byte.b	#%10100101	;
   2504  fd5f
   2505  fd5f				   CL
   2506  fd5f		       e7		      .byte.b	#%11100111	;
   2507  fd60		       24		      .byte.b	#%00100100	; 
   2508  fd61		       24		      .byte.b	#%00100100	; 
   2509  fd62		       24		      .byte.b	#%00100100	; 
   2510  fd63		       24		      .byte.b	#%00100100	;
   2511  fd64
   2512  fd64				   CI
   2513  fd64		       42		      .byte.b	#%01000010	;
   2514  fd65		       42		      .byte.b	#%01000010	; 
   2515  fd66		       42		      .byte.b	#%01000010	; 
   2516  fd67		       42		      .byte.b	#%01000010	; 
   2517  fd68		       42		      .byte.b	#%01000010	;
   2518  fd69
   2519  fd69				   CM
   2520  fd69		       a5		      .byte.b	#%10100101	;
   2521  fd6a		       a5		      .byte.b	#%10100101	; 
   2522  fd6b		       a5		      .byte.b	#%10100101	; 
   2523  fd6c		       e7		      .byte.b	#%11100111	; 
   2524  fd6d		       a5		      .byte.b	#%10100101	;
   2525  fd6e
   2526  fd6e				   CN
   2527  fd6e		       a5		      .byte.b	#%10100101	;
   2528  fd6f		       a5		      .byte.b	#%10100101	; 
   2529  fd70		       a5		      .byte.b	#%10100101	; 
   2530  fd71		       a5		      .byte.b	#%10100101	; 
   2531  fd72		       66		      .byte.b	#%01100110	;	
   2532  fd73
   2533  fd73
   2534  fd73				   CO
   2535  fd73		       42		      .byte.b	#%01000010	;
   2536  fd74		       a5		      .byte.b	#%10100101	; 
   2537  fd75		       a5		      .byte.b	#%10100101	; 
   2538  fd76		       a5		      .byte.b	#%10100101	; 
   2539  fd77		       42		      .byte.b	#%01000010	;	
   2540  fd78
   2541  fd78				   CP
   2542  fd78		       24		      .byte.b	#%00100100	;
   2543  fd79		       24		      .byte.b	#%00100100	; 
   2544  fd7a		       e7		      .byte.b	#%11100111	; 
   2545  fd7b		       a5		      .byte.b	#%10100101	; 
   2546  fd7c		       e7		      .byte.b	#%11100111	;
   2547  fd7d
   2548  fd7d				   CR
   2549  fd7d		       a5		      .byte.b	#%10100101	;
   2550  fd7e		       a5		      .byte.b	#%10100101	; 
   2551  fd7f		       66		      .byte.b	#%01100110	; 
   2552  fd80		       a5		      .byte.b	#%10100101	; 
   2553  fd81		       66		      .byte.b	#%01100110	;
   2554  fd82
   2555  fd82				   CS
   2556  fd82		       66		      .byte.b	#%01100110	;
   2557  fd83		       81		      .byte.b	#%10000001	; 
   2558  fd84		       42		      .byte.b	#%01000010	; 
   2559  fd85		       24		      .byte.b	#%00100100	; 
   2560  fd86		       c3		      .byte.b	#%11000011	;
   2561  fd87
   2562  fd87				   CT
   2563  fd87		       42		      .byte.b	#%01000010	;
   2564  fd88		       42		      .byte.b	#%01000010	; 
   2565  fd89		       42		      .byte.b	#%01000010	; 
   2566  fd8a		       42		      .byte.b	#%01000010	; 
   2567  fd8b		       e7		      .byte.b	#%11100111	;
   2568  fd8c
   2569  fd8c				   CV
   2570  fd8c		       42		      .byte.b	#%01000010	;
   2571  fd8d		       a5		      .byte.b	#%10100101	; 
   2572  fd8e		       a5		      .byte.b	#%10100101	; 
   2573  fd8f		       a5		      .byte.b	#%10100101	; 
   2574  fd90		       a5		      .byte.b	#%10100101	;	
   2575  fd91
   2576  fd91				   CY
   2577  fd91		       42		      .byte.b	#%01000010	;
   2578  fd92		       42		      .byte.b	#%01000010	; 
   2579  fd93		       42		      .byte.b	#%01000010	; 
   2580  fd94		       a5		      .byte.b	#%10100101	; 
   2581  fd95		       a5		      .byte.b	#%10100101	;
   2582  fd96
   2583  fd96				   CW
   2584  fd96		       a5		      .byte.b	#%10100101	;
   2585  fd97		       e7		      .byte.b	#%11100111	; 
   2586  fd98		       a5		      .byte.b	#%10100101	; 
   2587  fd99		       a5		      .byte.b	#%10100101	; 
   2588  fd9a		       a5		      .byte.b	#%10100101	;
   2589  fd9b
   2590  fd9b				   CZ
   2591  fd9b		       e7		      .byte.b	#%11100111	;
   2592  fd9c		       24		      .byte.b	#%00100100	; 
   2593  fd9d		       42		      .byte.b	#%01000010	; 
   2594  fd9e		       81		      .byte.b	#%10000001	; 
   2595  fd9f		       e7		      .byte.b	#%11100111	;
   2596  fda0
   2597  fda0				   Pipe
   2598  fda0		       42		      .byte.b	#%01000010	;
   2599  fda1		       00		      .byte.b	#%00000000	; 
   2600  fda2		       42		      .byte.b	#%01000010	; 
   2601  fda3		       00		      .byte.b	#%00000000	; 
   2602  fda4		       42		      .byte.b	#%01000010	;
   2603  fda5
   2604  fda5				   Exclamation
   2605  fda5		       42		      .byte.b	#%01000010	;
   2606  fda6		       00		      .byte.b	#%00000000	; 
   2607  fda7		       42		      .byte.b	#%01000010	; 
   2608  fda8		       42		      .byte.b	#%01000010	; 
   2609  fda9		       42		      .byte.b	#%01000010	;
   2610  fdaa
   2611  fdaa				   Dot
   2612  fdaa		       42		      .byte.b	#%01000010	;
   2613  fdab		       42		      .byte.b	#%01000010	; 
   2614  fdac		       00		      .byte.b	#%00000000	; 
   2615  fdad		       00		      .byte.b	#%00000000	; 
   2616  fdae		       00		      .byte.b	#%00000000	;
   2617  fdaf
   2618  fdaf				   Colon
   2619  fdaf		       42		      .byte.b	#%01000010	;
   2620  fdb0		       42		      .byte.b	#%01000010	; 
   2621  fdb1		       00		      .byte.b	#%00000000	; 
   2622  fdb2		       42		      .byte.b	#%01000010	; 
   2623  fdb3		       42		      .byte.b	#%01000010	;
   2624  fdb4
   2625  fdb4				   Triangle
   2626  fdb4		       81		      .byte.b	#%10000001	;
   2627  fdb5		       c3		      .byte.b	#%11000011	; 
   2628  fdb6		       e7		      .byte.b	#%11100111	; 
   2629  fdb7		       c3		      .byte.b	#%11000011	; 
   2630  fdb8		       81		      .byte.b	#%10000001	;
   2631  fdb9
   2632  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2633  fdb9		       00		      .byte.b	#0	;
   2634  fdba		       00		      .byte.b	#0	;
   2635  fdbb		       00		      .byte.b	#0	;
   2636  fdbc		       00		      .byte.b	#0	;
   2637  fdbd		       00		      .byte.b	#0	;
   2638  fdbe
   2639  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2640  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2641  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2642  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2643  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2644  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2645  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2646  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2647  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2648  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2649  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2650  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2651  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2652  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2653  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2654  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2655  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2656  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2657  fdcf
   2658  fdcf				   EngineSoundType
   2659  fdcf		       02		      .byte.b	#2
   2660  fdd0		       02		      .byte.b	#2
   2661  fdd1		       0e		      .byte.b	#14
   2662  fdd2		       06		      .byte.b	#6
   2663  fdd3		       06		      .byte.b	#6
   2664  fdd4		       0e		      .byte.b	#14
   2665  fdd5
   2666  fdd5				   EngineBaseFrequence
   2667  fdd5		       1f		      .byte.b	#31
   2668  fdd6		       15		      .byte.b	#21
   2669  fdd7		       14		      .byte.b	#20
   2670  fdd8		       1f		      .byte.b	#31
   2671  fdd9		       16		      .byte.b	#22
   2672  fdda		       03		      .byte.b	#3
   2673  fddb
   2674  fddb				   TachometerSizeLookup1
   2675  fddb		       1f		      .byte.b	#%00011111
   2676  fddc		       3f		      .byte.b	#%00111111
   2677  fddd		       7f		      .byte.b	#%01111111
   2678  fdde		       ff		      .byte.b	#%11111111
   2679  fddf		       ff		      .byte.b	#%11111111
   2680  fde0		       ff		      .byte.b	#%11111111
   2681  fde1		       ff		      .byte.b	#%11111111
   2682  fde2		       ff		      .byte.b	#%11111111
   2683  fde3
   2684  fde3				   TachometerSizeLookup2
   2685  fde3		       00		      .byte.b	#%00000000
   2686  fde4		       00		      .byte.b	#%00000000
   2687  fde5		       00		      .byte.b	#%00000000
   2688  fde6		       00		      .byte.b	#%00000000
   2689  fde7		       80		      .byte.b	#%10000000
   2690  fde8		       c0		      .byte.b	#%11000000
   2691  fde9		       e0		      .byte.b	#%11100000
   2692  fdea		       f0		      .byte.b	#%11110000
   2693  fdeb
   2694  fdeb				   TachometerGearLookup
   2695  fdeb		       01		      .byte.b	#%00000001
   2696  fdec		       02		      .byte.b	#%00000010
   2697  fded		       04		      .byte.b	#%00000100
   2698  fdee		       08		      .byte.b	#%00001000
   2699  fdef		       10		      .byte.b	#%00010000
   2700  fdf0		       30		      .byte.b	#%00110000
   2701  fdf1
   2702  fe00					      org	$FE00
   2703  fe00				   AesTable
   2704  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2705  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2706  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2707  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2708  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2709  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2710  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2711  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2712  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2713  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2714  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2715  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2716  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2717  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2718  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2719  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2720  ff00
   2721  ff00							; From FF00 to FFFB (122 bytes) to use here
   2722  ff00
   2723  ff00				   StaticText		; All static text must be on the same MSB block. 
   2724  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2725  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2726  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2727  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2728  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2729  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2730  ff05
   2731  ff05				   HellwayLeftText
   2732  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2733  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2734  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2735  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2736  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2737  ff0a
   2738  ff0a				   HellwayRightText
   2739  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2740  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2741  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2742  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2743  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2744  ff0f
   2745  ff0f				   OpbText
   2746  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2747  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2748  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2749  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2750  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2751  ff14
   2752  ff14				   YearText
   2753  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2754  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2755  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2756  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2757  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2758  ff19
   2759  ff19				   GameText
   2760  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2761  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2762  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2763  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2764  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2765  ff1e
   2766  ff1e				   OverText
   2767  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2768  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2769  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2770  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2771  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2772  ff23				   GoText
   2773  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2774  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2775  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2776  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2777  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2778  ff28
   2779  ff28				   ZeldaTextLeft
   2780  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2781  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2782  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2783  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2784  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2785  ff2d
   2786  ff2d				   ZeldaTextRight
   2787  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2788  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2789  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2790  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2791  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2792  ff32
   2793  ff32				   ZeldaDateLeft
   2794  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2795  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2796  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2797  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2798  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2799  ff37
   2800  ff37				   ZeldaDateRight
   2801  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2802  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2803  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2804  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2805  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2806  ff3c
   2807  ff3c				   PolvinhosTextLeft
   2808  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2809  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2810  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2811  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2812  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2813  ff41
   2814  ff41				   PolvinhosTextRight
   2815  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2816  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2817  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2818  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2819  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2820  ff46
   2821  ff46				   PolvinhosDateLeft
   2822  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2823  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2824  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2825  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2826  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2827  ff4b
   2828  ff4b				   PolvinhosDateRight
   2829  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2830  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2831  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2832  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2833  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2834  ff50
   2835  ff50				   IvonneTextLeft
   2836  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2837  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2838  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2839  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2840  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2841  ff55
   2842  ff55				   IvonneTextRight
   2843  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2844  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2845  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2846  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2847  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2848  ff5a
   2849  ff5a				   IvonneDateLeft
   2850  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2851  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2852  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2853  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2854  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2855  ff5f
   2856  ff5f				   IvonneDateRight
   2857  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2858  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2859  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2860  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2861  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2862  ff64
   2863  ff64				   PaperArtTextLeft
   2864  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2865  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2866  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2867  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2868  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2869  ff69
   2870  ff69				   PaperArtTextRight
   2871  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2872  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2873  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2874  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2875  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2876  ff6e
   2877  ff6e				   LeonardoTextLeft
   2878  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2879  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2880  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2881  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2882  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2883  ff73
   2884  ff73				   LeonardoTextRight
   2885  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2886  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2887  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2888  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2889  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2890  ff78
   2891  ff78				   VersionText
   2892  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2893  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2894  ff7a		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2895  ff7b		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2896  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2897  ff7d
   2898  ff7d
   2899  ff7d				   EndStaticText
   2900  ff7d
   2901  ff7d				   CarSprite0		; Upside down, Original Car
   2902  ff7d		       00 00 00 00*	      ds	7
   2903  ff84		       7e		      .byte.b	#%01111110
   2904  ff85		       24		      .byte.b	#%00100100
   2905  ff86		       bd		      .byte.b	#%10111101
   2906  ff87		       3c		      .byte.b	#%00111100
   2907  ff88		       bd		      .byte.b	#%10111101
   2908  ff89		       3c		      .byte.b	#%00111100
   2909  ff8a
   2910  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2911  ff8a		       00 00 00 00*	      ds	7
   2912  ff91		       bd		      .byte.b	#%10111101
   2913  ff92		       7e		      .byte.b	#%01111110
   2914  ff93		       5a		      .byte.b	#%01011010
   2915  ff94		       66		      .byte.b	#%01100110
   2916  ff95		       bd		      .byte.b	#%10111101
   2917  ff96		       3c		      .byte.b	#%00111100
   2918  ff97
   2919  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2920  ff97		       00 00 00 00*	      ds	7
   2921  ff9e		       7e		      .byte.b	#%01111110
   2922  ff9f		       a5		      .byte.b	#%10100101
   2923  ffa0		       42		      .byte.b	#%01000010
   2924  ffa1		       42		      .byte.b	#%01000010
   2925  ffa2		       bd		      .byte.b	#%10111101
   2926  ffa3		       7e		      .byte.b	#%01111110
   2927  ffa4
   2928  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2929  ffa4		       00 00 00 00*	      ds	7
   2930  ffab		       3c		      .byte.b	#%00111100
   2931  ffac		       db		      .byte.b	#%11011011
   2932  ffad		       db		      .byte.b	#%11011011
   2933  ffae		       3c		      .byte.b	#%00111100
   2934  ffaf		       5a		      .byte.b	#%01011010
   2935  ffb0		       3c		      .byte.b	#%00111100
   2936  ffb1
   2937  ffb1				   TrafficSpeeds
   2938  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2939  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2940  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2941  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2942  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2943  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2944  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2945  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2946  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2947  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2948  ffbb				   TrafficSpeedsHighDelta
   2949  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2950  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2951  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2952  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2953  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2954  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2955  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2956  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2957  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2958  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2959  ffc5
   2960  ffc5				   CarIdToSpriteAddressL
   2961  ffc5		       7d		      .byte.b	#<CarSprite0
   2962  ffc6		       8a		      .byte.b	#<CarSprite1
   2963  ffc7		       97		      .byte.b	#<CarSprite2
   2964  ffc8		       a4		      .byte.b	#<CarSprite3
   2965  ffc9
   2966  ffc9				   CarIdToSpriteAddressH
   2967  ffc9		       ff		      .byte.b	#>CarSprite0
   2968  ffca		       ff		      .byte.b	#>CarSprite1
   2969  ffcb		       ff		      .byte.b	#>CarSprite2
   2970  ffcc		       ff		      .byte.b	#>CarSprite3
   2971  ffcd
   2972  ffcd				   CarIdToAccelerateSpeed
   2973  ffcd		       80		      .byte.b	#128
   2974  ffce		       c0		      .byte.b	#192
   2975  ffcf		       60		      .byte.b	#96
   2976  ffd0		       c0		      .byte.b	#192
   2977  ffd1
   2978  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2979  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   2980  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   2981  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   2982  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   2983  ffd5
   2984  ffd5				   CarIdToMaxSpeedL
   2985  ffd5		       80		      .byte.b	#$80
   2986  ffd6		       00		      .byte.b	#$00	; One less gear
   2987  ffd7		       80		      .byte.b	#$80
   2988  ffd8		       80		      .byte.b	#$80
   2989  ffd9
   2990  ffd9				   CarIdToMaxGear
   2991  ffd9		       05		      .byte.b	#5
   2992  ffda		       04		      .byte.b	#4	; One less gear
   2993  ffdb		       05		      .byte.b	#5
   2994  ffdc		       05		      .byte.b	#5
   2995  ffdd
   2996  ffdd				   BreakSpeedTable		; Uses Speed H byte as index
   2997  ffdd		       08		      .byte.b	#(BREAK_SPEED - 4)
   2998  ffde		       0a		      .byte.b	#(BREAK_SPEED - 2)
   2999  ffdf		       0c		      .byte.b	#BREAK_SPEED
   3000  ffe0
   3001  ffe0
   3002  fffc					      org	$FFFC
   3003  fffc		       00 f0		      .word.w	BeforeStart
   3004  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
