------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 0a	   BREAK_SPEED =	10
     26  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     28  f000
     29  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     30  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     31  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     32  f000
     33  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     34  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     35  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     36  f000
     37  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     38  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     39  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     40  f000
     41  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     42  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     43  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     44  f000
     45  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     46  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     47  f000
     48  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     49  f000
     50  f000		       00 96	   PLAYER1_COLOR =	$96
     51  f000
     52  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     53  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     54  f000		       00 33	   SCORE_FONT_COLOR_BAD =	$33
     55  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     56  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     57  f000
     58  f000		       00 35	   PLAYER_0_X_START =	$35	;
     59  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     60  f000
     61  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     62  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     63  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     64  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	%00000111	; Every 8 frames
     65  f000
     66  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     67  f000
     68  f000		       00 00	   BLACK      =	$00	;
     69  f000
     70  f000		       00 0f	   MAX_GAME_MODE =	15
     71  f000
     72  f000		       00 08	   PARALLAX_SIZE =	8
     73  f000
     74  f000		       00 05	   HALF_TEXT_SIZE =	5
     75  f000
     76  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     77  f000
     78  f000		       00 80	   GRP0Cache  =	$80
     79  f000		       00 81	   PF0Cache   =	$81
     80  f000		       00 82	   PF1Cache   =	$82
     81  f000		       00 83	   PF2Cache   =	$83
     82  f000		       00 84	   GRP1Cache  =	$84
     83  f000		       00 85	   ENABLCache =	$85
     84  f000		       00 86	   ENAM0Cache =	$86
     85  f000		       00 87	   ENAM1Cache =	$87
     86  f000
     87  f000		       00 88	   ParallaxMode =	$88
     88  f000
     89  f000		       00 8c	   FrameCount0 =	$8C	;
     90  f000		       00 8d	   FrameCount1 =	$8D	;
     91  f000
     92  f000		       00 8e	   Player0SpeedL =	$8E
     93  f000		       00 8f	   Player0SpeedH =	$8F
     94  f000
     95  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     96  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     97  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     98  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     99  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    100  f000
    101  f000							;Temporary variables, multiple uses
    102  f000		       00 b0	   Tmp0       =	$B0
    103  f000		       00 b1	   Tmp1       =	$B1
    104  f000		       00 b2	   Tmp2       =	$B2
    105  f000		       00 b3	   Tmp3       =	$B3
    106  f000
    107  f000		       00 b4	   ScoreBcd0  =	$B4
    108  f000		       00 b5	   ScoreBcd1  =	$B5
    109  f000		       00 b6	   ScoreBcd2  =	$B6
    110  f000		       00 b7	   ScoreBcd3  =	$B7
    111  f000
    112  f000		       00 b8	   CollisionCounter =	$B8
    113  f000		       00 b9	   Player0X   =	$B9
    114  f000		       00 ba	   CountdownTimer =	$BA
    115  f000		       00 bb	   Traffic0Msb =	$BB
    116  f000		       00 bc	   SwitchDebounceCounter =	$BC
    117  f000
    118  f000		       00 bd	   TimeBcd0   =	$BD
    119  f000		       00 be	   TimeBcd1   =	$BE
    120  f000		       00 bf	   TimeBcd2   =	$BF
    121  f000
    122  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    123  f000		       00 c1	   TrafficChance =	$C1
    124  f000		       00 c2	   CheckpointTime =	$C2
    125  f000		       00 c3	   TrafficColor =	$C3
    126  f000		       00 c4	   CurrentDifficulty =	$C4
    127  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    128  f000
    129  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    130  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    131  f000
    132  f000		       00 ca	   BorderType =	$CA
    133  f000
    134  f000		       00 cb	   HitCountBcd0 =	$CB
    135  f000		       00 cc	   HitCountBcd1 =	$CC
    136  f000
    137  f000		       00 cd	   GlideTimeBcd0 =	$CD
    138  f000		       00 ce	   GlideTimeBcd1 =	$CE
    139  f000
    140  f000		       00 cf	   OneSecondConter =	$CF
    141  f000
    142  f000		       00 d0	   ScoreD0    =	$D0
    143  f000		       00 d1	   ScoreD1    =	$D1
    144  f000		       00 d2	   ScoreD2    =	$D2
    145  f000		       00 d3	   ScoreD3    =	$D3
    146  f000		       00 d4	   ScoreD4    =	$D4
    147  f000		       00 d5	   ScoreFontColor =	$D5
    148  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    149  f000		       00 d7	   NextCheckpoint =	$D7
    150  f000
    151  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    152  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    153  f000
    154  f000
    155  f000							;generic start up stuff, put zero in all...
    156  f000				   BeforeStart		;All variables that are kept on game reset or select
    157  f000		       a0 00		      LDY	#0
    158  f002		       84 bc		      STY	SwitchDebounceCounter
    159  f004		       84 c5		      STY	GameMode
    160  f006		       a0 e0		      LDY	#%11100000	; Default Parallax
    161  f008		       84 88		      STY	ParallaxMode
    162  f00a
    163  f00a				   Start
    164  f00a		       78		      SEI
    165  f00b		       d8		      CLD
    166  f00c		       a2 ff		      LDX	#$FF
    167  f00e		       9a		      TXS
    168  f00f		       a9 00		      LDA	#0
    169  f011				   ClearMem
    170  f011		       e0 bc		      CPX	#SwitchDebounceCounter
    171  f013		       f0 0a		      BEQ	SkipClean
    172  f015		       e0 c5		      CPX	#GameMode
    173  f017		       f0 06		      BEQ	SkipClean
    174  f019		       e0 88		      CPX	#ParallaxMode
    175  f01b		       f0 02		      BEQ	SkipClean
    176  f01d		       95 00		      STA	0,X
    177  f01f				   SkipClean
    178  f01f		       ca		      DEX
    179  f020		       d0 ef		      BNE	ClearMem
    180  f022
    181  f022							;Setting some variables...
    182  f022
    183  f022				   SettingTrafficOffsets		; Time sensitive with player H position
    184  f022		       85 02		      STA	WSYNC	;We will set player position
    185  f024		       20 11 f7 	      JSR	DefaultOffsets
    186  f027
    187  f027		       ad d2 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    188  f02a		       85 8e		      STA	Player0SpeedL
    189  f02c
      0  f02c					      SLEEP	11	;18
      1  f02c				   .CYCLES    SET	11
      2  f02c
      3  f02c				  -	      IF	.CYCLES < 2
      4  f02c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f02c				  -	      ERR
      6  f02c					      ENDIF
      7  f02c
      8  f02c					      IF	.CYCLES & 1
      9  f02c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f02c				  -	      nop	0
     11  f02c					      ELSE
     12  f02c		       24 00		      bit	VSYNC
     13  f02e					      ENDIF
     14  f02e				   .CYCLES    SET	.CYCLES - 3
     15  f02e					      ENDIF
     16  f02e
     17  f02e					      REPEAT	.CYCLES / 2
     18  f02e		       ea		      nop
     17  f02e					      REPEND
     18  f02f		       ea		      nop
     17  f02f					      REPEND
     18  f030		       ea		      nop
     17  f030					      REPEND
     18  f031		       ea		      nop
     19  f032					      REPEND
    191  f032		       85 10		      STA	RESP0
    192  f034
    193  f034		       a2 00		      LDX	#0
    194  f036		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    195  f039		       29 c0		      AND	#%11000000
    196  f03b		       f0 0b		      BEQ	CallConfigureDifficulty
    197  f03d		       e8		      INX
    198  f03e		       c9 80		      CMP	#%10000000
    199  f040		       f0 06		      BEQ	CallConfigureDifficulty
    200  f042		       e8		      INX
    201  f043		       c9 40		      CMP	#%01000000
    202  f045		       f0 01		      BEQ	CallConfigureDifficulty
    203  f047		       e8		      INX
    204  f048
    205  f048				   CallConfigureDifficulty
    206  f048		       86 c4		      STX	CurrentDifficulty
    207  f04a		       20 c9 f6 	      JSR	ConfigureDifficulty
    208  f04d
    209  f04d				   ConfigureOneSecondTimer
    210  f04d		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    211  f04f		       85 cf		      STA	OneSecondConter
    212  f051
    213  f051				   HPositioning
    214  f051		       85 02		      STA	WSYNC
    215  f053
    216  f053		       a9 30		      LDA	#%00110000	;2 Missile Size
    217  f055		       85 04		      STA	NUSIZ0	;3
    218  f057		       85 05		      STA	NUSIZ1	;3
    219  f059
    220  f059		       a9 35		      LDA	#PLAYER_0_X_START	;2
    221  f05b		       85 b9		      STA	Player0X	;3
    222  f05d
    223  f05d		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    224  f05f		       85 ba		      STA	CountdownTimer	;3
    225  f061
    226  f061		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    227  f063		       85 d7		      STA	NextCheckpoint
    228  f065
    229  f065		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f067					      SLEEP	11	;
      1  f067				   .CYCLES    SET	11
      2  f067
      3  f067				  -	      IF	.CYCLES < 2
      4  f067				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f067				  -	      ERR
      6  f067					      ENDIF
      7  f067
      8  f067					      IF	.CYCLES & 1
      9  f067				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f067				  -	      nop	0
     11  f067					      ELSE
     12  f067		       24 00		      bit	VSYNC
     13  f069					      ENDIF
     14  f069				   .CYCLES    SET	.CYCLES - 3
     15  f069					      ENDIF
     16  f069
     17  f069					      REPEAT	.CYCLES / 2
     18  f069		       ea		      nop
     17  f069					      REPEND
     18  f06a		       ea		      nop
     17  f06a					      REPEND
     18  f06b		       ea		      nop
     17  f06b					      REPEND
     18  f06c		       ea		      nop
     19  f06d					      REPEND
    231  f06d		       85 11		      STA	RESP1
      0  f06f					      SLEEP	2	;
      1  f06f				   .CYCLES    SET	2
      2  f06f
      3  f06f				  -	      IF	.CYCLES < 2
      4  f06f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f06f				  -	      ERR
      6  f06f					      ENDIF
      7  f06f
      8  f06f				  -	      IF	.CYCLES & 1
      9  f06f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f06f				  -	      nop	0
     11  f06f				  -	      ELSE
     12  f06f				  -	      bit	VSYNC
     13  f06f				  -	      ENDIF
     14  f06f				  -.CYCLES    SET	.CYCLES - 3
     15  f06f					      ENDIF
     16  f06f
     17  f06f					      REPEAT	.CYCLES / 2
     18  f06f		       ea		      nop
     19  f070					      REPEND
    233  f070		       85 14		      STA	RESBL
      0  f072					      SLEEP	2	;
      1  f072				   .CYCLES    SET	2
      2  f072
      3  f072				  -	      IF	.CYCLES < 2
      4  f072				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f072				  -	      ERR
      6  f072					      ENDIF
      7  f072
      8  f072				  -	      IF	.CYCLES & 1
      9  f072				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f072				  -	      nop	0
     11  f072				  -	      ELSE
     12  f072				  -	      bit	VSYNC
     13  f072				  -	      ENDIF
     14  f072				  -.CYCLES    SET	.CYCLES - 3
     15  f072					      ENDIF
     16  f072
     17  f072					      REPEAT	.CYCLES / 2
     18  f072		       ea		      nop
     19  f073					      REPEND
    235  f073		       85 12		      STA	RESM0
      0  f075					      SLEEP	2
      1  f075				   .CYCLES    SET	2
      2  f075
      3  f075				  -	      IF	.CYCLES < 2
      4  f075				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f075				  -	      ERR
      6  f075					      ENDIF
      7  f075
      8  f075				  -	      IF	.CYCLES & 1
      9  f075				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f075				  -	      nop	0
     11  f075				  -	      ELSE
     12  f075				  -	      bit	VSYNC
     13  f075				  -	      ENDIF
     14  f075				  -.CYCLES    SET	.CYCLES - 3
     15  f075					      ENDIF
     16  f075
     17  f075					      REPEAT	.CYCLES / 2
     18  f075		       ea		      nop
     19  f076					      REPEND
    237  f076		       85 13		      STA	RESM1
    238  f078
    239  f078		       a9 f0		      LDA	#$F0
    240  f07a		       85 24		      STA	HMBL
    241  f07c		       85 22		      STA	HMM0
    242  f07e		       85 23		      STA	HMM1
    243  f080		       85 02		      STA	WSYNC
    244  f082		       85 2a		      STA	HMOVE
    245  f084		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    246  f086		       85 2b		      STA	HMCLR
    247  f088
    248  f088							;SLEEP 24
    249  f088							;STA HMCLR
    250  f088
    251  f088							;VSYNC time
    252  f088				   MainLoop
    253  f088		       a9 02		      LDA	#2
    254  f08a		       85 00		      STA	VSYNC
    255  f08c		       85 02		      STA	WSYNC
    256  f08e		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    257  f090		       85 2a		      STA	HMOVE	;2
    258  f092		       85 02		      STA	WSYNC	;3
    259  f094		       a9 29		      LDA	#41	;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    260  f096		       8d 96 02 	      STA	TIM64T	;3	
    261  f099		       a9 00		      LDA	#0	;2
    262  f09b		       85 00		      STA	VSYNC	;3	
    263  f09d
    264  f09d							;Read Fire Button before, will make it start the game for now.
    265  f09d				   StartGame
    266  f09d		       a5 0c		      LDA	INPT4	;3
    267  f09f		       30 1b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    268  f0a1		       a5 c0		      LDA	GameStatus	;3
    269  f0a3		       d0 17		      BNE	SkipGameStart
    270  f0a5		       e6 c0		      INC	GameStatus
    271  f0a7		       a9 00		      LDA	#0	;
    272  f0a9		       85 8c		      STA	FrameCount0
    273  f0ab		       85 8d		      STA	FrameCount1
    274  f0ad		       a9 0a		      LDA	#10
    275  f0af		       85 19		      STA	AUDV0
    276  f0b1		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    277  f0b3		       85 d5		      STA	ScoreFontColor
    278  f0b5		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    279  f0b7		       85 d6		      STA	ScoreFontColorHoldChange
    280  f0b9		       4c 38 f1 	      JMP	SkipIncFC1	; Make the worse case stable
    281  f0bc				   SkipGameStart
    282  f0bc
    283  f0bc				   RandomizeGame
    284  f0bc		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    285  f0be		       d0 30		      BNE	EndRandomizeGame
    286  f0c0		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    287  f0c2		       29 02		      AND	#%00000010
    288  f0c4		       f0 27		      BEQ	DeterministicGame
    289  f0c6		       a6 96		      LDX	TrafficOffset1 + 2
    290  f0c8		       bd 00 fe 	      LDA	AesTable,X
    291  f0cb		       45 8c		      EOR	FrameCount0
    292  f0cd		       85 96		      STA	TrafficOffset1 + 2
    293  f0cf		       a6 9a		      LDX	TrafficOffset2 + 2
    294  f0d1		       bd 00 fe 	      LDA	AesTable,X
    295  f0d4		       45 8c		      EOR	FrameCount0
    296  f0d6		       85 9a		      STA	TrafficOffset2 + 2
    297  f0d8		       a6 9e		      LDX	TrafficOffset3 + 2
    298  f0da		       bd 00 fe 	      LDA	AesTable,X
    299  f0dd		       45 8c		      EOR	FrameCount0
    300  f0df		       85 9e		      STA	TrafficOffset3 + 2
    301  f0e1		       a6 a2		      LDX	TrafficOffset4 + 2
    302  f0e3		       bd 00 fe 	      LDA	AesTable,X
    303  f0e6		       45 8c		      EOR	FrameCount0
    304  f0e8		       85 a2		      STA	TrafficOffset4 + 2
    305  f0ea		       4c f0 f0 	      JMP	EndRandomizeGame
    306  f0ed
    307  f0ed				   DeterministicGame
    308  f0ed		       20 11 f7 	      JSR	DefaultOffsets
    309  f0f0
    310  f0f0				   EndRandomizeGame
    311  f0f0
    312  f0f0				   ReadSwitches
    313  f0f0		       a6 bc		      LDX	SwitchDebounceCounter
    314  f0f2		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    315  f0f4		       a9 01		      LDA	#%00000001
    316  f0f6		       2c 82 02 	      BIT	SWCHB
    317  f0f9		       d0 07		      BNE	SkipReset
    318  f0fb		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    319  f0fd		       85 bc		      STA	SwitchDebounceCounter
    320  f0ff		       4c 0a f0 	      JMP	Start
    321  f102				   SkipReset
    322  f102
    323  f102				   GameModeSelect
    324  f102		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    325  f104		       d0 27		      BNE	SkipGameSelect
    326  f106		       20 c9 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    327  f109				   ReadDpadParallax
    328  f109		       ad 80 02 	      LDA	SWCHA
    329  f10c		       29 f0		      AND	#%11110000
    330  f10e		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    331  f110		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    332  f112		       85 88		      STA	ParallaxMode
    333  f114				   ContinueGameSelect
    334  f114		       a9 02		      LDA	#%00000010
    335  f116		       2c 82 02 	      BIT	SWCHB
    336  f119		       d0 12		      BNE	SkipGameSelect
    337  f11b		       a6 c5		      LDX	GameMode
    338  f11d		       e0 0f		      CPX	#MAX_GAME_MODE
    339  f11f		       f0 04		      BEQ	ResetGameMode
    340  f121		       e8		      INX
    341  f122		       4c 27 f1 	      JMP	StoreGameMode
    342  f125				   ResetGameMode
    343  f125		       a2 00		      LDX	#0
    344  f127				   StoreGameMode
    345  f127		       86 c5		      STX	GameMode
    346  f129		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    347  f12b		       85 bc		      STA	SwitchDebounceCounter
    348  f12d				   SkipGameSelect
    349  f12d		       4c 32 f1 	      JMP	EndReadSwitches
    350  f130				   DecrementSwitchDebounceCounter
    351  f130		       c6 bc		      DEC	SwitchDebounceCounter
    352  f132				   EndReadSwitches
    353  f132
    354  f132				   CountFrame
    355  f132		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    356  f134		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    357  f136		       e6 8d		      INC	FrameCount1	; 5 Still not used
    358  f138				   SkipIncFC1
    359  f138
    360  f138							;Does not update the game if not running
    361  f138		       a5 c0		      LDA	GameStatus	;3
    362  f13a		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    363  f13c		       4c 03 f3 	      JMP	SkipUpdateLogic
    364  f13f				   ContinueWithGameLogic
    365  f13f
    366  f13f				   EverySecond		; 64 frames to be more precise
    367  f13f		       a9 3f		      LDA	#%00111111
    368  f141		       25 8c		      AND	FrameCount0
    369  f143		       d0 06		      BNE	SkipEverySecondAction
    370  f145		       c5 ba		      CMP	CountdownTimer
    371  f147		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    372  f149		       c6 ba		      DEC	CountdownTimer
    373  f14b				   SkipEverySecondAction
    374  f14b
    375  f14b
    376  f14b				   BreakOnTimeOver		; Uses LDX as the breaking speed
    377  f14b		       a2 00		      LDX	#0
    378  f14d		       a5 ba		      LDA	CountdownTimer
    379  f14f		       d0 08		      BNE	Break
    380  f151		       a5 8c		      LDA	FrameCount0
    381  f153		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    382  f155		       d0 02		      BNE	Break
    383  f157		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    384  f159
    385  f159				   Break
    386  f159		       a9 20		      LDA	#%00100000	;Down in controller
    387  f15b		       2c 80 02 	      BIT	SWCHA
    388  f15e		       d0 0b		      BNE	BreakNonZero
    389  f160		       a5 0c		      LDA	INPT4	;3
    390  f162		       10 05		      BPL	BreakWhileAccelerating
    391  f164		       a2 0a		      LDX	#BREAK_SPEED
    392  f166		       4c 6b f1 	      JMP	BreakNonZero
    393  f169				   BreakWhileAccelerating		; Allow better control while breaking.
    394  f169		       a2 05		      LDX	#BREAK_SPEED / 2
    395  f16b
    396  f16b				   BreakNonZero
    397  f16b		       e0 00		      CPX	#0
    398  f16d		       f0 2b		      BEQ	SkipBreak
    399  f16f		       86 b0		      STX	Tmp0
    400  f171
    401  f171				   DecreaseSpeed
    402  f171		       38		      SEC
    403  f172		       a5 8e		      LDA	Player0SpeedL
    404  f174		       e5 b0		      SBC	Tmp0
    405  f176		       85 8e		      STA	Player0SpeedL
    406  f178		       a5 8f		      LDA	Player0SpeedH
    407  f17a		       e9 00		      SBC	#0
    408  f17c		       85 8f		      STA	Player0SpeedH
    409  f17e
    410  f17e				   CheckMinSpeed
    411  f17e		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    412  f180		       c9 00		      CMP	#CAR_MIN_SPEED_H
    413  f182		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    414  f184		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    415  f186
    416  f186				   CompareLBreakSpeed
    417  f186		       a5 8e		      LDA	Player0SpeedL
    418  f188		       c9 00		      CMP	#CAR_MIN_SPEED_L
    419  f18a		       90 03		      BCC	ResetMinSpeed	; Less than memory
    420  f18c		       4c 97 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    421  f18f
    422  f18f				   ResetMinSpeed
    423  f18f		       a9 00		      LDA	#CAR_MIN_SPEED_H
    424  f191		       85 8f		      STA	Player0SpeedH
    425  f193		       a9 00		      LDA	#CAR_MIN_SPEED_L
    426  f195		       85 8e		      STA	Player0SpeedL
    427  f197
    428  f197				   SkipAccelerateIfBreaking
    429  f197		       4c ca f1 	      JMP	SkipAccelerate
    430  f19a				   SkipBreak
    431  f19a
    432  f19a				   Acelerates
    433  f19a		       a5 ba		      LDA	CountdownTimer
    434  f19c		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    435  f19e		       a5 0c		      LDA	INPT4	;3
    436  f1a0		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    437  f1a2		       a9 10		      LDA	#%00010000	;UP in controller
    438  f1a4		       2c 80 02 	      BIT	SWCHA
    439  f1a7		       d0 21		      BNE	SkipAccelerate
    440  f1a9
    441  f1a9				   IncreaseCarSpeed
    442  f1a9							;Adds speed
    443  f1a9		       18		      CLC
    444  f1aa		       a5 8e		      LDA	Player0SpeedL
    445  f1ac		       69 01		      ADC	#ACCELERATE_SPEED
    446  f1ae		       85 8e		      STA	Player0SpeedL
    447  f1b0		       a5 8f		      LDA	Player0SpeedH
    448  f1b2		       69 00		      ADC	#0
    449  f1b4		       85 8f		      STA	Player0SpeedH
    450  f1b6
    451  f1b6				   CheckIfAlreadyMaxSpeed
    452  f1b6		       c9 02		      CMP	#CAR_MAX_SPEED_H
    453  f1b8		       90 10		      BCC	SkipAccelerate	; less than my max speed
    454  f1ba		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    455  f1bc							;High bit is max, compare the low
    456  f1bc		       a5 8e		      LDA	Player0SpeedL
    457  f1be		       c9 80		      CMP	#CAR_MAX_SPEED_L
    458  f1c0		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    459  f1c2							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    460  f1c2
    461  f1c2				   ResetToMaxSpeed		; Speed is more, or is already max
    462  f1c2		       a9 02		      LDA	#CAR_MAX_SPEED_H
    463  f1c4		       85 8f		      STA	Player0SpeedH
    464  f1c6		       a9 80		      LDA	#CAR_MAX_SPEED_L
    465  f1c8		       85 8e		      STA	Player0SpeedL
    466  f1ca				   SkipAccelerate
    467  f1ca
    468  f1ca				   InitUpdateOffsets
    469  f1ca		       a2 00		      LDX	#0	; Memory Offset 24 bit
    470  f1cc		       a0 00		      LDY	#0	; Line Speeds 16 bits
    471  f1ce		       a5 91		      LDA	TrafficOffset0 + 1	;
    472  f1d0		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    473  f1d2		       a5 c5		      LDA	GameMode
    474  f1d4		       29 04		      AND	#%00000100	; GameModes with high delta
    475  f1d6		       f0 00		      BEQ	UpdateOffsets
    476  f1d8
    477  f1d8				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    478  f1d8		       38		      SEC
    479  f1d9		       a5 8e		      LDA	Player0SpeedL
    480  f1db		       f9 ca ff 	      SBC	TrafficSpeeds,Y
    481  f1de		       85 b0		      STA	Tmp0
    482  f1e0		       c8		      INY
    483  f1e1		       a5 8f		      LDA	Player0SpeedH
    484  f1e3		       f9 ca ff 	      SBC	TrafficSpeeds,Y
    485  f1e6		       85 b1		      STA	Tmp1
    486  f1e8		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    487  f1ea		       e9 00		      SBC	#0
    488  f1ec		       85 b2		      STA	Tmp2
    489  f1ee
    490  f1ee				   AddsTheResult
    491  f1ee		       18		      CLC
    492  f1ef		       a5 b0		      LDA	Tmp0
    493  f1f1		       75 90		      ADC	TrafficOffset0,X
    494  f1f3		       95 90		      STA	TrafficOffset0,X
    495  f1f5		       e8		      INX
    496  f1f6		       a5 b1		      LDA	Tmp1
    497  f1f8		       75 90		      ADC	TrafficOffset0,X
    498  f1fa		       95 90		      STA	TrafficOffset0,X
    499  f1fc		       e8		      INX
    500  f1fd		       a5 b2		      LDA	Tmp2	; Carry
    501  f1ff		       75 90		      ADC	TrafficOffset0,X
    502  f201		       95 90		      STA	TrafficOffset0,X
    503  f203		       90 06		      BCC	CalculateOffsetCache
    504  f205		       e0 02		      CPX	#2	;MSB offset 0
    505  f207		       d0 02		      BNE	CalculateOffsetCache
    506  f209		       e6 bb		      INC	Traffic0Msb
    507  f20b
    508  f20b				   CalculateOffsetCache
    509  f20b		       e8		      INX
    510  f20c		       38		      SEC
    511  f20d		       69 00		      ADC	#0	;Increment by one
    512  f20f		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    513  f211
    514  f211				   PrepareNextUpdateLoop
    515  f211		       c8		      INY
    516  f212		       e8		      INX
    517  f213		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    518  f215		       d0 c1		      BNE	UpdateOffsets
    519  f217
    520  f217				   BcdScore		; 48
    521  f217		       a5 91		      LDA	TrafficOffset0 + 1	;3
    522  f219		       45 b3		      EOR	Tmp3	;3
    523  f21b		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    524  f21d		       f0 1b		      BEQ	FinishBcdScore	;2
    525  f21f
    526  f21f				   ContinueBcdScore
    527  f21f		       f8		      SED		;2
    528  f220		       18		      CLC		;2
    529  f221		       a5 b4		      LDA	ScoreBcd0	;3
    530  f223		       69 01		      ADC	#1	;2
    531  f225		       85 b4		      STA	ScoreBcd0	;3
    532  f227		       a5 b5		      LDA	ScoreBcd1	;3
    533  f229		       69 00		      ADC	#0	;2
    534  f22b		       85 b5		      STA	ScoreBcd1	;3
    535  f22d		       a5 b6		      LDA	ScoreBcd2	;3
    536  f22f		       69 00		      ADC	#0	;2
    537  f231		       85 b6		      STA	ScoreBcd2	;3
    538  f233		       a5 b7		      LDA	ScoreBcd3	;3
    539  f235		       69 00		      ADC	#0	;2
    540  f237		       85 b7		      STA	ScoreBcd3	;3
    541  f239		       d8		      CLD		;2
    542  f23a				   FinishBcdScore
    543  f23a
    544  f23a							;Until store the movemnt, LDX contains the value to be stored.
    545  f23a				   TestCollision		;
    546  f23a							; see if player0 colides with the rest
    547  f23a		       a5 00		      LDA	CXM0P
    548  f23c		       05 01		      ORA	CXM1P
    549  f23e		       05 01		      ORA	CXM1P
    550  f240		       05 02		      ORA	CXP0FB
    551  f242		       05 07		      ORA	CXPPMM
    552  f244		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    553  f246		       f0 32		      BEQ	NoCollision	;skip if not hitting...
    554  f248		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    555  f24a		       d0 2e		      BNE	NoCollision
    556  f24c		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    557  f24e		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    558  f250		       f0 28		      BEQ	NoCollision
    559  f252		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    560  f254		       f0 24		      BEQ	NoCollision
    561  f256		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    562  f258		       85 b8		      STA	CollisionCounter	;and store as colision.
    563  f25a				   CountBcdColision
    564  f25a		       f8		      SED		;2
    565  f25b		       18		      CLC		;2
    566  f25c		       a5 cb		      LDA	HitCountBcd0	;3
    567  f25e		       69 01		      ADC	#1	;3
    568  f260		       85 cb		      STA	HitCountBcd0	;3
    569  f262		       a5 cc		      LDA	HitCountBcd1	;3
    570  f264		       69 00		      ADC	#0	;2
    571  f266		       85 cc		      STA	HitCountBcd1	;3
    572  f268		       d8		      CLD		;2
    573  f269				   EndCountBcdColision
    574  f269		       a9 10		      LDA	#COLLISION_SPEED_L	;
    575  f26b		       c5 8e		      CMP	Player0SpeedL
    576  f26d		       b0 02		      BCS	SkipSetColisionSpeed
    577  f26f		       85 8e		      STA	Player0SpeedL
    578  f271				   SkipSetColisionSpeed
    579  f271		       a9 00		      LDA	#0
    580  f273		       85 8f		      STA	Player0SpeedH
    581  f275		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    582  f277		       4c b7 f2 	      JMP	StoreHMove	; We keep position consistent
    583  f27a				   NoCollision
    584  f27a
    585  f27a				   DecrementCollision
    586  f27a		       a4 b8		      LDY	CollisionCounter
    587  f27c		       f0 07		      BEQ	FinishDecrementCollision
    588  f27e		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    589  f280		       85 04		      STA	NUSIZ0
    590  f282		       88		      DEY
    591  f283		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    592  f285				   FinishDecrementCollision
    593  f285
    594  f285				   ResetPlayerSize
    595  f285		       d0 04		      BNE	FinishResetPlayerSize
    596  f287		       a9 30		      LDA	#%00110000
    597  f289		       85 04		      STA	NUSIZ0	;
    598  f28b				   FinishResetPlayerSize
    599  f28b
    600  f28b				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    601  f28b		       c0 01		      CPY	#1	; Last frame before reset
    602  f28d		       d0 05		      BNE	SkipResetPlayerPosition
    603  f28f		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    604  f291		       4c b7 f2 	      JMP	StoreHMove
    605  f294				   SkipResetPlayerPosition
    606  f294
    607  f294							; for left and right, we're gonna 
    608  f294							; set the horizontal speed, and then do
    609  f294							; a single HMOVE.  We'll use X to hold the
    610  f294							; horizontal speed, then store it in the 
    611  f294							; appropriate register
    612  f294				   PrepareReadXAxis
    613  f294		       a2 00		      LDX	#0
    614  f296		       a4 b9		      LDY	Player0X
    615  f298				   BeginReadLeft
    616  f298		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    617  f29a		       a9 40		      LDA	#%01000000	;Left
    618  f29c		       2c 80 02 	      BIT	SWCHA
    619  f29f		       d0 07		      BNE	SkipMoveLeft
    620  f2a1		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    621  f2a3		       c6 b9		      DEC	Player0X
    622  f2a5		       4c b7 f2 	      JMP	StoreHMove	; Cannot move left and right...
    623  f2a8				   SkipMoveLeft
    624  f2a8				   BeginReadRight
    625  f2a8		       c0 36		      CPY	#PLAYER_0_MAX_X
    626  f2aa		       f0 0b		      BEQ	SkipMoveRight	; At max already
    627  f2ac		       a9 80		      LDA	#%10000000	;Right
    628  f2ae		       2c 80 02 	      BIT	SWCHA
    629  f2b1		       d0 04		      BNE	SkipMoveRight
    630  f2b3		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    631  f2b5		       e6 b9		      INC	Player0X
    632  f2b7				   SkipMoveRight
    633  f2b7				   StoreHMove
    634  f2b7		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    635  f2b9		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    636  f2bb
    637  f2bb				   DividePlayerSpeedBy4
    638  f2bb		       a5 8f		      LDA	Player0SpeedH
    639  f2bd		       0a		      ASL
    640  f2be		       0a		      ASL
    641  f2bf		       0a		      ASL
    642  f2c0		       0a		      ASL
    643  f2c1		       0a		      ASL
    644  f2c2		       0a		      ASL
    645  f2c3		       85 b1		      STA	Tmp1
    646  f2c5		       a5 8e		      LDA	Player0SpeedL
    647  f2c7		       4a		      LSR
    648  f2c8		       4a		      LSR
    649  f2c9		       29 3f		      AND	#%00111111
    650  f2cb		       05 b1		      ORA	Tmp1
    651  f2cd		       85 b0		      STA	Tmp0	; Division Result
    652  f2cf
    653  f2cf				   CalculateParallax1Offset		; 7/8 speed
    654  f2cf		       38		      SEC
    655  f2d0		       a5 8e		      LDA	Player0SpeedL
    656  f2d2		       e5 b0		      SBC	Tmp0
    657  f2d4		       85 b2		      STA	Tmp2
    658  f2d6		       a5 8f		      LDA	Player0SpeedH
    659  f2d8		       e9 00		      SBC	#0
    660  f2da		       85 b3		      STA	Tmp3
    661  f2dc
    662  f2dc		       18		      CLC
    663  f2dd		       a5 c6		      LDA	ParallaxOffset1
    664  f2df		       65 b2		      ADC	Tmp2
    665  f2e1		       85 c6		      STA	ParallaxOffset1
    666  f2e3		       a5 c7		      LDA	ParallaxOffset1 + 1
    667  f2e5		       65 b3		      ADC	Tmp3
    668  f2e7		       85 c7		      STA	ParallaxOffset1 + 1
    669  f2e9
    670  f2e9				   CalculateParallax2Offset		; 6/8 speed
    671  f2e9		       38		      SEC
    672  f2ea		       a5 b2		      LDA	Tmp2
    673  f2ec		       e5 b0		      SBC	Tmp0
    674  f2ee		       85 b2		      STA	Tmp2
    675  f2f0		       a5 b3		      LDA	Tmp3
    676  f2f2		       e9 00		      SBC	#0
    677  f2f4		       85 b3		      STA	Tmp3
    678  f2f6
    679  f2f6		       18		      CLC
    680  f2f7		       a5 c8		      LDA	ParallaxOffset2
    681  f2f9		       65 b2		      ADC	Tmp2
    682  f2fb		       85 c8		      STA	ParallaxOffset2
    683  f2fd		       a5 c9		      LDA	ParallaxOffset2 + 1
    684  f2ff		       65 b3		      ADC	Tmp3
    685  f301		       85 c9		      STA	ParallaxOffset2 + 1
    686  f303
    687  f303				   SkipUpdateLogic		; Continue here if not paused
    688  f303
    689  f303
    690  f303				   ProcessBorder		;Can be optimized (probably)
    691  f303		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    692  f305		       a5 88		      LDA	ParallaxMode
    693  f307		       c9 70		      CMP	#%01110000
    694  f309		       f0 1a		      BEQ	HorizontalParallaxMode
    695  f30b		       c9 d0		      CMP	#%11010000
    696  f30d		       f0 0a		      BEQ	VerticalParallaxMode
    697  f30f		       c9 b0		      CMP	#%10110000
    698  f311		       f0 0c		      BEQ	TachometerMode
    699  f313
    700  f313				   DefaultBorderMode
    701  f313		       20 90 f7 	      JSR	DefaultBorderLoop
    702  f316		       4c 28 f3 	      JMP	EndProcessingBorder
    703  f319				   VerticalParallaxMode
    704  f319		       20 ff f7 	      JSR	VerticalParallaxLoop
    705  f31c		       4c 28 f3 	      JMP	EndProcessingBorder
    706  f31f				   TachometerMode
    707  f31f		       20 ab f7 	      JSR	PrepareTachometerBorderLoop
    708  f322		       4c 28 f3 	      JMP	EndProcessingBorder
    709  f325				   HorizontalParallaxMode
    710  f325		       20 42 f7 	      JSR	HorizontalParallaxLoop
    711  f328
    712  f328				   EndProcessingBorder
    713  f328
    714  f328				   ProcessScoreFontColor
    715  f328		       a6 d6		      LDX	ScoreFontColorHoldChange
    716  f32a		       f0 06		      BEQ	ResetScoreFontColor
    717  f32c		       ca		      DEX
    718  f32d		       86 d6		      STX	ScoreFontColorHoldChange
    719  f32f		       4c 36 f3 	      JMP	SkipScoreFontColor
    720  f332				   ResetScoreFontColor
    721  f332		       a9 f9		      LDA	#SCORE_FONT_COLOR
    722  f334		       85 d5		      STA	ScoreFontColor
    723  f336				   SkipScoreFontColor
    724  f336
    725  f336				   IsGameOver
    726  f336		       a5 ba		      LDA	CountdownTimer
    727  f338		       05 8e		      ORA	Player0SpeedL
    728  f33a		       05 8f		      ORA	Player0SpeedH
    729  f33c		       d0 0b		      BNE	IsCheckpoint
    730  f33e		       a9 01		      LDA	#1
    731  f340		       85 d6		      STA	ScoreFontColorHoldChange
    732  f342		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    733  f344		       85 d5		      STA	ScoreFontColor
    734  f346		       4c 7b f3 	      JMP	SkipIsTimeOver
    735  f349
    736  f349				   IsCheckpoint
    737  f349		       a5 d7		      LDA	NextCheckpoint
    738  f34b		       c5 92		      CMP	TrafficOffset0 + 2
    739  f34d		       d0 20		      BNE	SkipIsCheckpoint
    740  f34f		       18		      CLC
    741  f350		       69 10		      ADC	#CHECKPOINT_INTERVAL
    742  f352		       85 d7		      STA	NextCheckpoint
    743  f354		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    744  f356		       85 d5		      STA	ScoreFontColor
    745  f358		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    746  f35a		       85 d6		      STA	ScoreFontColorHoldChange
    747  f35c		       a5 ba		      LDA	CountdownTimer
    748  f35e		       18		      CLC
    749  f35f		       65 c2		      ADC	CheckpointTime
    750  f361		       85 ba		      STA	CountdownTimer
    751  f363		       90 04		      BCC	JumpSkipTimeOver
    752  f365		       a9 ff		      LDA	#$FF
    753  f367		       85 ba		      STA	CountdownTimer	; Does not overflow!
    754  f369				   JumpSkipTimeOver
    755  f369		       20 ba f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    756  f36c		       4c 7b f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    757  f36f				   SkipIsCheckpoint
    758  f36f
    759  f36f				   IsTimeOver
    760  f36f		       a5 ba		      LDA	CountdownTimer
    761  f371		       d0 08		      BNE	SkipIsTimeOver
    762  f373		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    763  f375		       85 d6		      STA	ScoreFontColorHoldChange
    764  f377		       a9 33		      LDA	#SCORE_FONT_COLOR_BAD
    765  f379		       85 d5		      STA	ScoreFontColor
    766  f37b				   SkipIsTimeOver
    767  f37b
    768  f37b				   PrintEasterEggCondition
    769  f37b		       a5 8d		      LDA	FrameCount1
    770  f37d		       29 38		      AND	#%00111000
    771  f37f		       05 c0		      ORA	GameStatus
    772  f381		       c9 38		      CMP	#%00111000
    773  f383		       d0 06		      BNE	ChooseTextSide
    774  f385		       20 53 f8 	      JSR	PrintEasterEgg
    775  f388		       4c 7f f4 	      JMP	RightScoreWriteEnd
    776  f38b
    777  f38b							;Could be done during on vblank to save this comparisson time (before draw score), 
    778  f38b							;but I am saving vblank cycles for now, in case of 2 players.
    779  f38b				   ChooseTextSide		; 
    780  f38b		       a5 8c		      LDA	FrameCount0	;3
    781  f38d		       29 01		      AND	#%00000001	;2
    782  f38f		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    783  f391		       4c 15 f4 	      JMP	RightScoreWrite
    784  f394
    785  f394				   LeftScoreWrite
    786  f394		       a5 d5		      LDA	ScoreFontColor
    787  f396		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    788  f398		       f0 4e		      BEQ	PrintCheckpoint
    789  f39a		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    790  f39c		       f0 52		      BEQ	PrintStartGame
    791  f39e		       a5 c0		      LDA	GameStatus
    792  f3a0		       f0 56		      BEQ	PrintHellwayLeft
    793  f3a2				   WriteDistance		;Not optimized yet, ugly code.
    794  f3a2				   Digit0Distance
    795  f3a2		       a5 91		      LDA	TrafficOffset0 + 1	;3
    796  f3a4		       4a		      LSR		; 2
    797  f3a5		       4a		      LSR		; 2
    798  f3a6		       4a		      LSR		; 2
    799  f3a7		       4a		      LSR		; 2
    800  f3a8		       aa		      TAX		; 2
    801  f3a9		       bd be fd 	      LDA	FontLookup,X	;4
    802  f3ac		       85 d3		      STA	ScoreD3	;3
    803  f3ae
    804  f3ae				   Digit1Distance
    805  f3ae		       a5 92		      LDA	TrafficOffset0 + 2	;3
    806  f3b0		       29 0f		      AND	#%00001111	;2
    807  f3b2		       aa		      TAX		; 2
    808  f3b3		       bd be fd 	      LDA	FontLookup,X	;4 
    809  f3b6		       85 d2		      STA	ScoreD2	;3
    810  f3b8
    811  f3b8				   Digit2Distance
    812  f3b8		       a5 92		      LDA	TrafficOffset0 + 2	;3
    813  f3ba		       4a		      LSR		; 2
    814  f3bb		       4a		      LSR		; 2
    815  f3bc		       4a		      LSR		; 2
    816  f3bd		       4a		      LSR		; 2
    817  f3be		       aa		      TAX		; 2
    818  f3bf		       bd be fd 	      LDA	FontLookup,X	;4
    819  f3c2		       85 d1		      STA	ScoreD1	;3
    820  f3c4
    821  f3c4				   Digit3Distance
    822  f3c4		       a5 bb		      LDA	Traffic0Msb	;3
    823  f3c6		       29 0f		      AND	#%00001111	;2
    824  f3c8		       aa		      TAX		; 2
    825  f3c9		       bd be fd 	      LDA	FontLookup,X	;4 
    826  f3cc		       85 d0		      STA	ScoreD0	;3
    827  f3ce
    828  f3ce				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    829  f3ce		       a5 bb		      LDA	Traffic0Msb
    830  f3d0		       29 f0		      AND	#%11110000	;2
    831  f3d2		       d0 07		      BNE	DrawDistanceExtraDigit
    832  f3d4		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    833  f3d6		       85 d4		      STA	ScoreD4	;3
    834  f3d8		       4c e5 f3 	      JMP	EndDrawDistance
    835  f3db				   DrawDistanceExtraDigit
    836  f3db		       4a		      LSR		; 2
    837  f3dc		       4a		      LSR		; 2
    838  f3dd		       4a		      LSR		; 2
    839  f3de		       4a		      LSR		; 2
    840  f3df		       aa		      TAX		; 2
    841  f3e0		       bd be fd 	      LDA	FontLookup,X	;4
    842  f3e3		       85 d4		      STA	ScoreD4	;3
    843  f3e5
    844  f3e5				   EndDrawDistance
    845  f3e5		       4c 7f f4 	      JMP	RightScoreWriteEnd	;3
    846  f3e8
    847  f3e8				   PrintCheckpoint
    848  f3e8		       a2 00		      LDX	#<CheckpointText
    849  f3ea		       20 24 f7 	      JSR	PrintStaticText
    850  f3ed		       4c 7f f4 	      JMP	RightScoreWriteEnd	;3
    851  f3f0				   PrintStartGame
    852  f3f0		       a2 23		      LDX	#<GoText
    853  f3f2		       20 24 f7 	      JSR	PrintStaticText
    854  f3f5		       4c 7f f4 	      JMP	RightScoreWriteEnd	;3
    855  f3f8
    856  f3f8				   PrintHellwayLeft
    857  f3f8		       a5 8d		      LDA	FrameCount1
    858  f3fa		       29 01		      AND	#1
    859  f3fc		       d0 05		      BNE	PrintCreditsLeft
    860  f3fe		       a2 05		      LDX	#<HellwayLeftText
    861  f400		       4c 05 f4 	      JMP	PrintGameMode
    862  f403				   PrintCreditsLeft
    863  f403		       a2 0f		      LDX	#<OpbText
    864  f405
    865  f405				   PrintGameMode
    866  f405		       20 24 f7 	      JSR	PrintStaticText
    867  f408		       a5 c5		      LDA	GameMode
    868  f40a		       29 0f		      AND	#%00001111
    869  f40c		       aa		      TAX		; 2
    870  f40d		       bd be fd 	      LDA	FontLookup,X	;4 
    871  f410		       85 d0		      STA	ScoreD0	;3
    872  f412		       4c 7f f4 	      JMP	RightScoreWriteEnd	;3
    873  f415
    874  f415				   RightScoreWrite
    875  f415		       a5 c0		      LDA	GameStatus
    876  f417		       f0 45		      BEQ	PrintHellwayRight
    877  f419		       a5 d5		      LDA	ScoreFontColor
    878  f41b		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    879  f41d		       f0 52		      BEQ	PrintGameOver
    880  f41f				   Digit0Timer
    881  f41f		       a5 ba		      LDA	CountdownTimer	;3
    882  f421		       29 0f		      AND	#%00001111	;2
    883  f423		       aa		      TAX		; 2
    884  f424		       bd be fd 	      LDA	FontLookup,X	;4 
    885  f427		       85 d1		      STA	ScoreD1	;3
    886  f429
    887  f429				   Digit1Timer
    888  f429		       a5 ba		      LDA	CountdownTimer	;3
    889  f42b		       4a		      LSR		; 2
    890  f42c		       4a		      LSR		; 2
    891  f42d		       4a		      LSR		; 2
    892  f42e		       4a		      LSR		; 2
    893  f42f		       aa		      TAX		; 2
    894  f430		       bd be fd 	      LDA	FontLookup,X	;4
    895  f433		       85 d0		      STA	ScoreD0	;3
    896  f435
    897  f435		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    898  f437		       85 d2		      STA	ScoreD2	;3
    899  f439
    900  f439				   Digit0Speed
    901  f439		       a5 8e		      LDA	Player0SpeedL
    902  f43b		       29 3c		      AND	#%00111100	;2 Discard the last bits
    903  f43d		       4a		      LSR		; 2
    904  f43e		       4a		      LSR		; 2
    905  f43f		       aa		      TAX		; 2
    906  f440		       bd be fd 	      LDA	FontLookup,X	;4
    907  f443		       85 d4		      STA	ScoreD4	;3
    908  f445
    909  f445				   Digit1Speed
    910  f445		       a5 8e		      LDA	Player0SpeedL
    911  f447		       29 c0		      AND	#%11000000	;2 Discard the last bits
    912  f449		       18		      CLC
    913  f44a		       2a		      ROL		;First goes into carry
    914  f44b		       2a		      ROL
    915  f44c		       2a		      ROL
    916  f44d		       85 b0		      STA	Tmp0
    917  f44f		       a5 8f		      LDA	Player0SpeedH
    918  f451		       0a		      ASL
    919  f452		       0a		      ASL
    920  f453		       05 b0		      ORA	Tmp0
    921  f455		       aa		      TAX		; 2
    922  f456		       bd be fd 	      LDA	FontLookup,X	;4
    923  f459		       85 d3		      STA	ScoreD3	;3
    924  f45b		       4c 7f f4 	      JMP	RightScoreWriteEnd
    925  f45e
    926  f45e				   PrintHellwayRight
    927  f45e		       a5 8d		      LDA	FrameCount1
    928  f460		       29 01		      AND	#1
    929  f462		       d0 05		      BNE	PrintCreditsRight
    930  f464		       a2 0a		      LDX	#<HellwayRightText
    931  f466		       4c 6b f4 	      JMP	PrintRightIntro
    932  f469				   PrintCreditsRight
    933  f469		       a2 14		      LDX	#<YearText
    934  f46b				   PrintRightIntro
    935  f46b		       20 24 f7 	      JSR	PrintStaticText
    936  f46e		       4c 7f f4 	      JMP	RightScoreWriteEnd
    937  f471				   PrintGameOver
    938  f471		       a5 8c		      LDA	FrameCount0
    939  f473		       30 05		      BMI	PrintOverText
    940  f475		       a2 19		      LDX	#<GameText
    941  f477		       4c 7c f4 	      JMP	StoreGameOverText
    942  f47a				   PrintOverText
    943  f47a		       a2 1e		      LDX	#<OverText
    944  f47c				   StoreGameOverText
    945  f47c		       20 24 f7 	      JSR	PrintStaticText
    946  f47f				   RightScoreWriteEnd
    947  f47f
    948  f47f
    949  f47f				   ScoreBackgroundColor
    950  f47f		       a2 00		      LDX	#0
    951  f481		       ad 82 02 	      LDA	SWCHB
    952  f484		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    953  f486		       f0 04		      BEQ	BlackAndWhiteScoreBg
    954  f488		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    955  f48a		       a2 03		      LDX	#BACKGROUND_COLOR
    956  f48c				   BlackAndWhiteScoreBg
    957  f48c		       85 b2		      STA	Tmp2	; Score Background
    958  f48e		       86 b3		      STX	Tmp3	; Traffic Background
    959  f490
    960  f490				   ConfigurePFForScore
    961  f490							;LDA #SCORE_BACKGROUND_COLOR; Done above
    962  f490		       85 09		      STA	COLUBK
    963  f492		       20 7c f6 	      JSR	ClearAll
    964  f495		       a9 02		      LDA	#%00000010	; Score mode
    965  f497		       85 0a		      STA	CTRLPF
    966  f499		       a5 8c		      LDA	FrameCount0	;3
    967  f49b		       29 01		      AND	#%00000001	;2
    968  f49d		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    969  f49f				   LeftScoreOn
    970  f49f		       a5 d5		      LDA	ScoreFontColor
    971  f4a1		       85 07		      STA	COLUP1
    972  f4a3		       a5 b2		      LDA	Tmp2
    973  f4a5		       85 06		      STA	COLUP0
    974  f4a7		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    975  f4a9		       85 b1		      STA	Tmp1
    976  f4ab		       4c ba f4 	      JMP	WaitForVblankEnd
    977  f4ae				   RightScoreOn
    978  f4ae		       a5 d5		      LDA	ScoreFontColor
    979  f4b0		       85 06		      STA	COLUP0
    980  f4b2		       a5 b2		      LDA	Tmp2
    981  f4b4		       85 07		      STA	COLUP1
    982  f4b6		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    983  f4b8		       85 b1		      STA	Tmp1
    984  f4ba
    985  f4ba							; After here we are going to update the screen, No more heavy code
    986  f4ba				   WaitForVblankEnd
    987  f4ba		       ad 84 02 	      LDA	INTIM
    988  f4bd		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    989  f4bf		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline? 
    990  f4c1		       85 01		      STA	VBLANK
    991  f4c3
    992  f4c3				   DrawScoreHud
    993  f4c3		       20 c5 f8 	      JSR	PrintScore
    994  f4c6
    995  f4c6		       85 02		      STA	WSYNC
    996  f4c8
    997  f4c8		       a5 0c		      LDA	INPT4	;3
    998  f4ca		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    999  f4cc		       a5 d5		      LDA	ScoreFontColor
   1000  f4ce		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1001  f4d0		       d0 0c		      BNE	WaitAnotherScoreLine
   1002  f4d2		       a5 8c		      LDA	FrameCount0	;3
   1003  f4d4		       29 01		      AND	#%00000001	;2
   1004  f4d6		       f0 03		      BEQ	LeftScoreOnGameOver
   1005  f4d8		       4c cb f9 	      JMP	DrawGameOverScreenRight
   1006  f4db				   LeftScoreOnGameOver
   1007  f4db		       4c 1d f9 	      JMP	DrawGameOverScreenLeft
   1008  f4de
   1009  f4de				   WaitAnotherScoreLine
   1010  f4de		       85 02		      STA	WSYNC
   1011  f4e0
   1012  f4e0				   PrepareForTraffic
   1013  f4e0		       20 8e f6 	      JSR	ClearPF	; 32
   1014  f4e3
   1015  f4e3		       a9 31		      LDA	#%00110001	; Score mode
   1016  f4e5		       85 0a		      STA	CTRLPF
   1017  f4e7
   1018  f4e7		       a5 c3		      LDA	TrafficColor	;2
   1019  f4e9		       85 08		      STA	COLUPF
   1020  f4eb
   1021  f4eb		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1022  f4ed		       85 07		      STA	COLUP1	;3
   1023  f4ef
   1024  f4ef		       a5 d5		      LDA	ScoreFontColor	;3
   1025  f4f1		       85 06		      STA	COLUP0	;3
   1026  f4f3
   1027  f4f3		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1028  f4f5
   1029  f4f5		       85 02		      STA	WSYNC
   1030  f4f7		       85 02		      STA	WSYNC
   1031  f4f9
   1032  f4f9							;main scanline loop...
   1033  f4f9				   ScanLoop
   1034  f4f9		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1035  f4fb
   1036  f4fb							;Start of next line!			
   1037  f4fb				   DrawCache		;63 Is the last line going to the top of the next frame?
   1038  f4fb							;Supper wastefull, but I had 17 cycles, This only avoids the score line to finish a litle earlier...
   1039  f4fb		       a5 b3		      LDA	Tmp3	;3
   1040  f4fd		       85 09		      STA	COLUBK	;3
   1041  f4ff
   1042  f4ff		       a5 81		      LDA	PF0Cache	;3
   1043  f501		       85 0d		      STA	PF0	;3
   1044  f503
   1045  f503		       b9 7d ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
   1046  f506		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1047  f508
   1048  f508		       a5 82		      LDA	PF1Cache	;3
   1049  f50a		       85 0e		      STA	PF1	;3
   1050  f50c
   1051  f50c		       a5 84		      LDA	GRP1Cache	;3
   1052  f50e		       85 1c		      STA	GRP1	;3
   1053  f510
   1054  f510		       a5 85		      LDA	ENABLCache	;3
   1055  f512		       85 1f		      STA	ENABL	;3
   1056  f514
   1057  f514		       a5 86		      LDA	ENAM0Cache	;3
   1058  f516		       85 1d		      STA	ENAM0	;3
   1059  f518
   1060  f518		       a5 87		      LDA	ENAM1Cache	;3
   1061  f51a		       85 1e		      STA	ENAM1	;3
   1062  f51c
   1063  f51c		       a9 00		      LDA	#0	;2
   1064  f51e							;STA PF1Cache ;3
   1065  f51e		       85 84		      STA	GRP1Cache	;3
   1066  f520		       85 85		      STA	ENABLCache	;3
   1067  f522		       85 86		      STA	ENAM0Cache	;3
   1068  f524		       85 87		      STA	ENAM1Cache	; 3
   1069  f526
   1070  f526							;BEQ DrawTraffic3
   1071  f526				   DrawTraffic1 		; 33
   1072  f526		       98		      TYA		; 2
   1073  f527		       18		      CLC		; 2 
   1074  f528		       65 95		      ADC	TrafficOffset1 + 1	;3
   1075  f52a		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1076  f52c		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1077  f52e		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1078  f530		       4c 35 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1079  f533				   EorOffsetWithCarry
   1080  f533		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1081  f535				   AfterEorOffsetWithCarry		;17
   1082  f535		       aa		      TAX		;2
   1083  f536		       bd 00 fe 	      LDA	AesTable,X	; 4
   1084  f539		       c5 c1		      CMP	TrafficChance	;3
   1085  f53b		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1086  f53d		       a9 ff		      LDA	#$FF	;2
   1087  f53f		       85 84		      STA	GRP1Cache	;3
   1088  f541				   FinishDrawTraffic1
   1089  f541
   1090  f541				   DrawTraffic2 		; 33
   1091  f541		       98		      TYA		; 2
   1092  f542		       18		      CLC		; 2 
   1093  f543		       65 99		      ADC	TrafficOffset2 + 1	;3
   1094  f545		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1095  f547		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1096  f549		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1097  f54b		       4c 50 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1098  f54e				   EorOffsetWithCarry2
   1099  f54e		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1100  f550				   AfterEorOffsetWithCarry2		;17
   1101  f550		       aa		      TAX		;2
   1102  f551		       bd 00 fe 	      LDA	AesTable,X	; 4
   1103  f554		       c5 c1		      CMP	TrafficChance	;3
   1104  f556		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1105  f558		       a9 02		      LDA	#%00000010	;2
   1106  f55a		       85 85		      STA	ENABLCache	;3
   1107  f55c				   FinishDrawTraffic2
   1108  f55c
   1109  f55c							;STA WSYNC ;65 / 137
   1110  f55c
   1111  f55c							; LDA Tmp0 ; Flicker this line if drawing car
   1112  f55c							; BEQ FinishDrawTraffic4
   1113  f55c				   DrawTraffic3 		; 33
   1114  f55c		       98		      TYA		; 2
   1115  f55d		       18		      CLC		; 2 
   1116  f55e		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1117  f560		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1118  f562		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1119  f564		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1120  f566		       4c 6b f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1121  f569				   EorOffsetWithCarry3
   1122  f569		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1123  f56b				   AfterEorOffsetWithCarry3		;17
   1124  f56b		       aa		      TAX		;2
   1125  f56c		       bd 00 fe 	      LDA	AesTable,X	; 4
   1126  f56f		       c5 c1		      CMP	TrafficChance	;3
   1127  f571		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1128  f573		       a9 02		      LDA	#%00000010	;2
   1129  f575		       85 86		      STA	ENAM0Cache
   1130  f577				   FinishDrawTraffic3
   1131  f577
   1132  f577				   DrawTraffic4 		; 33
   1133  f577		       98		      TYA		; 2
   1134  f578		       18		      CLC		; 2 
   1135  f579		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1136  f57b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1137  f57d		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1138  f57f		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1139  f581		       4c 86 f5 	      JMP	AfterEorOffsetWithCarry4	; 3
   1140  f584				   EorOffsetWithCarry4
   1141  f584		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1142  f586				   AfterEorOffsetWithCarry4		;17
   1143  f586		       aa		      TAX		;2
   1144  f587		       bd 00 fe 	      LDA	AesTable,X	; 4
   1145  f58a		       c5 c1		      CMP	TrafficChance	;3
   1146  f58c		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1147  f58e		       a9 02		      LDA	#%00000010	;2
   1148  f590		       85 87		      STA	ENAM1Cache	;3
   1149  f592				   FinishDrawTraffic4
   1150  f592
   1151  f592				   DrawTraffic0 		; 15
   1152  f592		       98		      TYA		;2
   1153  f593		       29 07		      AND	#%00000111	;2
   1154  f595		       aa		      TAX		;2
   1155  f596		       b5 d8		      LDA	ParallaxCache,X	;4
   1156  f598		       85 82		      STA	PF1Cache	;3
   1157  f59a		       b5 f0		      LDA	ParallaxCache2,X	;4
   1158  f59c		       85 81		      STA	PF0Cache	;3
   1159  f59e
   1160  f59e				   SkipDrawTraffic0
   1161  f59e
   1162  f59e				   WhileScanLoop
   1163  f59e		       88		      DEY		;2
   1164  f59f		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1165  f5a1		       4c f9 f4 	      JMP	ScanLoop	;3
   1166  f5a4				   FinishScanLoop		; 7 209 of 222
   1167  f5a4
   1168  f5a4		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1169  f5a6		       20 9d f6 	      JSR	LoadAll
   1170  f5a9		       85 02		      STA	WSYNC	; do stuff!
   1171  f5ab		       85 02		      STA	WSYNC
   1172  f5ad		       85 02		      STA	WSYNC
   1173  f5af							;42 cycles to use here
   1174  f5af
   1175  f5af				   PrepareOverscan
   1176  f5af		       a9 02		      LDA	#2
   1177  f5b1		       85 02		      STA	WSYNC
   1178  f5b3		       85 01		      STA	VBLANK
   1179  f5b5
   1180  f5b5		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1181  f5b7		       8d 96 02 	      STA	TIM64T
   1182  f5ba
   1183  f5ba				   LeftSound		;58
   1184  f5ba		       a5 ba		      LDA	CountdownTimer	;3
   1185  f5bc		       f0 24		      BEQ	EngineOff	;2
   1186  f5be		       a5 8e		      LDA	Player0SpeedL	;3
   1187  f5c0		       29 80		      AND	#%10000000	;2
   1188  f5c2		       05 8f		      ORA	Player0SpeedH	;3
   1189  f5c4		       18		      CLC		;2
   1190  f5c5		       2a		      ROL		;2
   1191  f5c6		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1192  f5c8		       aa		      TAX		;2
   1193  f5c9		       a5 8e		      LDA	Player0SpeedL	;3
   1194  f5cb		       4a		      LSR		;2
   1195  f5cc		       4a		      LSR		;2
   1196  f5cd		       4a		      LSR		;2
   1197  f5ce		       29 0f		      AND	#%00001111	;2
   1198  f5d0		       85 b0		      STA	Tmp0	;3
   1199  f5d2		       bd d4 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1200  f5d5		       38		      SEC		;2
   1201  f5d6		       e5 b0		      SBC	Tmp0	;3
   1202  f5d8		       85 17		      STA	AUDF0	;3
   1203  f5da		       bd ce fd 	      LDA	EngineSoundType,X	;4
   1204  f5dd		       85 15		      STA	AUDC0	;3
   1205  f5df		       4c e6 f5 	      JMP	EndLeftSound	;3
   1206  f5e2				   EngineOff
   1207  f5e2		       a9 00		      LDA	#0
   1208  f5e4		       85 15		      STA	AUDC0
   1209  f5e6
   1210  f5e6				   EndLeftSound
   1211  f5e6
   1212  f5e6
   1213  f5e6				   RightSound		; 56 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1214  f5e6		       a5 d5		      LDA	ScoreFontColor	;3
   1215  f5e8		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1216  f5ea		       f0 4a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1217  f5ec		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1218  f5ee		       f0 21		      BEQ	PlayCheckpoint	;2
   1219  f5f0		       a5 b8		      LDA	CollisionCounter	;3
   1220  f5f2		       c9 e0		      CMP	#$E0	;2
   1221  f5f4		       b0 0c		      BCS	PlayColision	;2
   1222  f5f6		       a5 d7		      LDA	NextCheckpoint	;3
   1223  f5f8		       38		      SEC		;2
   1224  f5f9		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1225  f5fb		       c9 02		      CMP	#$02	;2
   1226  f5fd		       90 24		      BCC	PlayBeforeCheckpoint	;4
   1227  f5ff		       4c 36 f6 	      JMP	MuteRightSound
   1228  f602				   PlayColision
   1229  f602		       a9 1f		      LDA	#31
   1230  f604		       85 18		      STA	AUDF1
   1231  f606		       a9 08		      LDA	#8
   1232  f608		       85 16		      STA	AUDC1
   1233  f60a		       a9 08		      LDA	#8
   1234  f60c		       85 1a		      STA	AUDV1
   1235  f60e		       4c 3a f6 	      JMP	EndRightSound
   1236  f611
   1237  f611				   PlayCheckpoint
   1238  f611		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1239  f613		       4a		      LSR		;2
   1240  f614		       4a		      LSR		;2
   1241  f615		       4a		      LSR		;2
   1242  f616		       85 18		      STA	AUDF1	;3
   1243  f618		       a9 0c		      LDA	#12	;2
   1244  f61a		       85 16		      STA	AUDC1	;3
   1245  f61c		       a9 06		      LDA	#6	;2
   1246  f61e		       85 1a		      STA	AUDV1	;3
   1247  f620		       4c 3a f6 	      JMP	EndRightSound	;3
   1248  f623
   1249  f623				   PlayBeforeCheckpoint
   1250  f623		       a5 8c		      LDA	FrameCount0	;3
   1251  f625		       29 1c		      AND	#%00011100	;2
   1252  f627		       09 03		      ORA	#%00000011	;2
   1253  f629		       85 18		      STA	AUDF1	;3
   1254  f62b		       a9 0c		      LDA	#12	;2
   1255  f62d		       85 16		      STA	AUDC1	;3
   1256  f62f		       a9 03		      LDA	#3	;2
   1257  f631		       85 1a		      STA	AUDV1	;3
   1258  f633		       4c 3a f6 	      JMP	EndRightSound	;3
   1259  f636
   1260  f636				   MuteRightSound
   1261  f636		       a9 00		      LDA	#0
   1262  f638		       85 1a		      STA	AUDV1
   1263  f63a				   EndRightSound
   1264  f63a
   1265  f63a				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1266  f63a		       a5 c0		      LDA	GameStatus	;3
   1267  f63c		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1268  f63e		       a5 d5		      LDA	ScoreFontColor	;3
   1269  f640		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1270  f642		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1271  f644		       c6 cf		      DEC	OneSecondConter	;5
   1272  f646		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1273  f648
   1274  f648		       f8		      SED		;2 BCD Operations after this point
   1275  f649				   CountGlideTimeBcd
   1276  f649		       a5 d5		      LDA	ScoreFontColor	;3
   1277  f64b		       c9 33		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1278  f64d		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1279  f64f		       18		      CLC		;2
   1280  f650		       a5 cd		      LDA	GlideTimeBcd0	;3
   1281  f652		       69 01		      ADC	#1	;3
   1282  f654		       85 cd		      STA	GlideTimeBcd0	;3
   1283  f656		       a5 ce		      LDA	GlideTimeBcd1	;3
   1284  f658		       69 00		      ADC	#0	;2
   1285  f65a		       85 ce		      STA	GlideTimeBcd1	;3
   1286  f65c				   EndCountGlideTimeBcd
   1287  f65c				   IncreaseTotalTimerBcd
   1288  f65c		       18		      CLC		;2
   1289  f65d		       a5 bd		      LDA	TimeBcd0	;3
   1290  f65f		       69 01		      ADC	#1	;2
   1291  f661		       85 bd		      STA	TimeBcd0	;3
   1292  f663		       a5 be		      LDA	TimeBcd1	;3
   1293  f665		       69 00		      ADC	#0	;2
   1294  f667		       85 be		      STA	TimeBcd1	;3
   1295  f669		       a5 bf		      LDA	TimeBcd2	;3
   1296  f66b		       69 00		      ADC	#0	;2
   1297  f66d		       85 bf		      STA	TimeBcd2	;3
   1298  f66f
   1299  f66f				   ResetOneSecondCounter
   1300  f66f		       d8		      CLD		;2
   1301  f670		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1302  f672		       85 cf		      STA	OneSecondConter	;3
   1303  f674
   1304  f674				   EndExactlyEverySecond
   1305  f674
   1306  f674				   OverScanWait
   1307  f674		       ad 84 02 	      LDA	INTIM
   1308  f677		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1309  f679		       4c 88 f0 	      JMP	MainLoop
   1310  f67c
   1311  f67c				   Subroutines
   1312  f67c
   1313  f67c				   ClearAll		; 52
   1314  f67c		       a9 00		      LDA	#0	;2
   1315  f67e		       85 1c		      STA	GRP1	;3
   1316  f680		       85 1f		      STA	ENABL	;3
   1317  f682		       85 1d		      STA	ENAM0	;3
   1318  f684		       85 1e		      STA	ENAM1	;3
   1319  f686		       85 84		      STA	GRP1Cache	;3
   1320  f688		       85 85		      STA	ENABLCache	;3
   1321  f68a		       85 86		      STA	ENAM0Cache	;3
   1322  f68c		       85 87		      STA	ENAM1Cache	;3
   1323  f68e
   1324  f68e				   ClearPF		; 26
   1325  f68e		       a9 00		      LDA	#0	;2
   1326  f690				   ClearPFSkipLDA0
   1327  f690		       85 0d		      STA	PF0	;3
   1328  f692		       85 0e		      STA	PF1	;3
   1329  f694		       85 0f		      STA	PF2	;3	
   1330  f696		       85 81		      STA	PF0Cache	;3
   1331  f698		       85 82		      STA	PF1Cache	;3
   1332  f69a		       85 83		      STA	PF2Cache	;3 
   1333  f69c		       60		      RTS		;6
   1334  f69d				   EndClearAll
   1335  f69d
   1336  f69d				   LoadAll		; 48
   1337  f69d		       a5 81		      LDA	PF0Cache	;3
   1338  f69f		       85 0d		      STA	PF0	;3
   1339  f6a1
   1340  f6a1		       a5 82		      LDA	PF1Cache	;3
   1341  f6a3		       85 0e		      STA	PF1	;3
   1342  f6a5
   1343  f6a5		       a5 83		      LDA	PF2Cache	;3
   1344  f6a7		       85 0f		      STA	PF2	;3
   1345  f6a9
   1346  f6a9		       a5 84		      LDA	GRP1Cache	;3
   1347  f6ab		       85 1c		      STA	GRP1	;3
   1348  f6ad
   1349  f6ad		       a5 85		      LDA	ENABLCache	;3
   1350  f6af		       85 1f		      STA	ENABL	;3
   1351  f6b1
   1352  f6b1		       a5 86		      LDA	ENAM0Cache	;3
   1353  f6b3		       85 1d		      STA	ENAM0	;3
   1354  f6b5
   1355  f6b5		       a5 87		      LDA	ENAM1Cache	;3
   1356  f6b7		       85 1e		      STA	ENAM1	;3
   1357  f6b9
   1358  f6b9		       60		      RTS		;6
   1359  f6ba				   EndLoadAll
   1360  f6ba
   1361  f6ba				   NextDifficulty
   1362  f6ba		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1363  f6bc		       29 01		      AND	#%00000001
   1364  f6be		       d0 3f		      BNE	CheckRandomDifficulty
   1365  f6c0
   1366  f6c0		       a5 c4		      LDA	CurrentDifficulty
   1367  f6c2		       18		      CLC
   1368  f6c3		       69 01		      ADC	#1
   1369  f6c5		       29 03		      AND	#%00000011	; 0 to 3
   1370  f6c7		       85 c4		      STA	CurrentDifficulty
   1371  f6c9
   1372  f6c9				   ConfigureDifficulty
   1373  f6c9		       a5 c4		      LDA	CurrentDifficulty
   1374  f6cb		       f0 0b		      BEQ	ConfigureLightTraffic
   1375  f6cd		       c9 01		      CMP	#1
   1376  f6cf		       f0 10		      BEQ	ConfigureRegularTraffic
   1377  f6d1		       c9 02		      CMP	#2
   1378  f6d3		       f0 15		      BEQ	ConfigureIntenseTraffic
   1379  f6d5		       4c f3 f6 	      JMP	ConfigureRushHourTraffic
   1380  f6d8
   1381  f6d8				   ConfigureLightTraffic
   1382  f6d8		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1383  f6da		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1384  f6dc		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1385  f6de		       4c f9 f6 	      JMP	StoreTrafficChance
   1386  f6e1				   ConfigureRegularTraffic
   1387  f6e1		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1388  f6e3		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1389  f6e5		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1390  f6e7		       4c f9 f6 	      JMP	StoreTrafficChance
   1391  f6ea				   ConfigureIntenseTraffic
   1392  f6ea		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1393  f6ec		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1394  f6ee		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1395  f6f0		       4c f9 f6 	      JMP	StoreTrafficChance
   1396  f6f3				   ConfigureRushHourTraffic
   1397  f6f3		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1398  f6f5		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1399  f6f7		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1400  f6f9
   1401  f6f9				   StoreTrafficChance
   1402  f6f9		       86 c1		      STX	TrafficChance
   1403  f6fb		       84 c2		      STY	CheckpointTime
   1404  f6fd		       85 c3		      STA	TrafficColor
   1405  f6ff
   1406  f6ff				   CheckRandomDifficulty
   1407  f6ff		       a5 c5		      LDA	GameMode
   1408  f701		       29 08		      AND	#%00001000	; Random difficulties
   1409  f703		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1410  f705				   RandomDificulty
   1411  f705		       a6 8c		      LDX	FrameCount0
   1412  f707		       bd 00 fe 	      LDA	AesTable,X
   1413  f70a		       45 c1		      EOR	TrafficChance
   1414  f70c		       29 3f		      AND	#%00111111
   1415  f70e		       85 c1		      STA	TrafficChance
   1416  f710
   1417  f710				   ReturnFromNextDifficulty
   1418  f710		       60		      RTS
   1419  f711				   EndNextDifficulty
   1420  f711
   1421  f711				   DefaultOffsets
   1422  f711		       a9 20		      LDA	#$20
   1423  f713		       85 96		      STA	TrafficOffset1 + 2
   1424  f715		       a9 40		      LDA	#$40
   1425  f717		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1426  f719		       a9 60		      LDA	#$60
   1427  f71b		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1428  f71d		       a9 80		      LDA	#$80
   1429  f71f		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1430  f721		       a9 a0		      LDA	#$A0
   1431  f723		       60		      RTS
   1432  f724
   1433  f724				   PrintStaticText		; Preload X with the offset referent to StaticText
   1434  f724		       bd 00 ff 	      LDA	StaticText,X
   1435  f727		       85 d0		      STA	ScoreD0
   1436  f729		       e8		      INX
   1437  f72a		       bd 00 ff 	      LDA	StaticText,X
   1438  f72d		       85 d1		      STA	ScoreD1
   1439  f72f		       e8		      INX
   1440  f730		       bd 00 ff 	      LDA	StaticText,X
   1441  f733		       85 d2		      STA	ScoreD2
   1442  f735		       e8		      INX
   1443  f736		       bd 00 ff 	      LDA	StaticText,X
   1444  f739		       85 d3		      STA	ScoreD3
   1445  f73b		       e8		      INX
   1446  f73c		       bd 00 ff 	      LDA	StaticText,X
   1447  f73f		       85 d4		      STA	ScoreD4
   1448  f741		       60		      RTS
   1449  f742
   1450  f742				   HorizontalParallaxLoop
   1451  f742		       a9 ef		      LDA	#%11101111	; Clear the house
   1452  f744		       39 d8 00 	      AND	ParallaxCache,Y
   1453  f747		       99 d8 00 	      STA	ParallaxCache,Y
   1454  f74a				   CalculateParallax0
   1455  f74a		       98		      TYA
   1456  f74b		       18		      CLC
   1457  f74c		       65 91		      ADC	TrafficOffset0 + 1
   1458  f74e		       29 04		      AND	#%00000100
   1459  f750		       f0 08		      BEQ	HasEmptySpace0
   1460  f752				   HasBorder0
   1461  f752		       b9 d8 00 	      LDA	ParallaxCache,Y
   1462  f755		       09 0f		      ORA	#%00001111
   1463  f757		       4c 5f f7 	      JMP	StoreParallax0
   1464  f75a				   HasEmptySpace0
   1465  f75a		       b9 d8 00 	      LDA	ParallaxCache,Y
   1466  f75d		       29 f0		      AND	#%11110000
   1467  f75f
   1468  f75f				   StoreParallax0
   1469  f75f		       99 d8 00 	      STA	ParallaxCache,Y
   1470  f762
   1471  f762				   CalculateParallax1
   1472  f762		       98		      TYA
   1473  f763		       18		      CLC
   1474  f764		       65 c7		      ADC	ParallaxOffset1 + 1
   1475  f766		       29 04		      AND	#%00000100
   1476  f768		       f0 08		      BEQ	HasEmptySpace1
   1477  f76a				   HasBorder1
   1478  f76a		       b9 d8 00 	      LDA	ParallaxCache,Y
   1479  f76d		       09 e0		      ORA	#%11100000
   1480  f76f		       4c 77 f7 	      JMP	StoreParallax1
   1481  f772				   HasEmptySpace1
   1482  f772		       b9 d8 00 	      LDA	ParallaxCache,Y
   1483  f775		       29 1f		      AND	#%00011111
   1484  f777
   1485  f777				   StoreParallax1
   1486  f777		       99 d8 00 	      STA	ParallaxCache,Y
   1487  f77a
   1488  f77a				   CalculateParallax2
   1489  f77a		       98		      TYA
   1490  f77b		       18		      CLC
   1491  f77c		       65 c9		      ADC	ParallaxOffset2 + 1
   1492  f77e		       29 04		      AND	#%00000100
   1493  f780		       f0 05		      BEQ	HasEmptySpace2
   1494  f782				   HasBorder2
   1495  f782		       a9 60		      LDA	#%01100000
   1496  f784		       4c 89 f7 	      JMP	StoreParallax2
   1497  f787				   HasEmptySpace2
   1498  f787		       a9 00		      LDA	#0
   1499  f789
   1500  f789				   StoreParallax2
   1501  f789		       99 f0 00 	      STA	ParallaxCache2,Y
   1502  f78c
   1503  f78c				   ContinueHorizontalParallaxLoop
   1504  f78c		       88		      DEY
   1505  f78d		       10 b3		      BPL	HorizontalParallaxLoop
   1506  f78f		       60		      RTS
   1507  f790
   1508  f790				   DefaultBorderLoop
   1509  f790				   CalculateDefaultBorder
   1510  f790		       98		      TYA
   1511  f791		       18		      CLC
   1512  f792		       65 91		      ADC	TrafficOffset0 + 1
   1513  f794		       29 04		      AND	#%00000100
   1514  f796		       f0 05		      BEQ	HasEmptySpace
   1515  f798				   HasBorder
   1516  f798		       a9 ff		      LDA	#$FF
   1517  f79a		       4c 9f f7 	      JMP	StoreBorder
   1518  f79d				   HasEmptySpace
   1519  f79d		       a9 00		      LDA	#0
   1520  f79f
   1521  f79f				   StoreBorder
   1522  f79f		       99 d8 00 	      STA	ParallaxCache,Y
   1523  f7a2		       a9 00		      LDA	#0
   1524  f7a4		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1525  f7a7
   1526  f7a7				   ContinueDefaultBorderLoop
   1527  f7a7		       88		      DEY
   1528  f7a8		       10 e6		      BPL	DefaultBorderLoop
   1529  f7aa		       60		      RTS
   1530  f7ab
   1531  f7ab				   PrepareTachometerBorderLoop
   1532  f7ab		       a5 8e		      LDA	Player0SpeedL
   1533  f7ad		       29 80		      AND	#%10000000
   1534  f7af		       05 8f		      ORA	Player0SpeedH
   1535  f7b1		       18		      CLC
   1536  f7b2		       2a		      ROL
   1537  f7b3		       69 00		      ADC	#0
   1538  f7b5		       85 b0		      STA	Tmp0	; Gear
   1539  f7b7		       a5 8e		      LDA	Player0SpeedL
   1540  f7b9		       4a		      LSR
   1541  f7ba		       4a		      LSR
   1542  f7bb		       4a		      LSR
   1543  f7bc		       4a		      LSR
   1544  f7bd		       29 07		      AND	#%00000111
   1545  f7bf		       85 b1		      STA	Tmp1	; RPM
   1546  f7c1
   1547  f7c1				   TachometerBorderLoop
   1548  f7c1		       98		      TYA
   1549  f7c2		       18		      CLC
   1550  f7c3		       65 91		      ADC	TrafficOffset0 + 1
   1551  f7c5		       29 04		      AND	#%00000100
   1552  f7c7		       f0 10		      BEQ	HasBorderTac
   1553  f7c9		       a6 b0		      LDX	Tmp0
   1554  f7cb		       bd ea fd 	      LDA	TachometerGearLookup,X
   1555  f7ce		       99 d8 00 	      STA	ParallaxCache,Y
   1556  f7d1		       a9 00		      LDA	#0
   1557  f7d3		       99 f0 00 	      STA	ParallaxCache2,Y
   1558  f7d6		       4c fb f7 	      JMP	ContinueBorderTac
   1559  f7d9				   HasBorderTac
   1560  f7d9		       a9 05		      LDA	#5
   1561  f7db		       c5 b0		      CMP	Tmp0	; Only on max speed
   1562  f7dd		       f0 11		      BEQ	FullBorderTac
   1563  f7df		       a6 b1		      LDX	Tmp1
   1564  f7e1		       bd da fd 	      LDA	TachometerSizeLookup1,X
   1565  f7e4		       99 d8 00 	      STA	ParallaxCache,Y
   1566  f7e7		       bd e2 fd 	      LDA	TachometerSizeLookup2,X
   1567  f7ea		       99 f0 00 	      STA	ParallaxCache2,Y
   1568  f7ed		       4c fb f7 	      JMP	ContinueBorderTac
   1569  f7f0
   1570  f7f0				   FullBorderTac
   1571  f7f0		       a9 ff		      LDA	#$FF
   1572  f7f2		       99 d8 00 	      STA	ParallaxCache,Y
   1573  f7f5		       99 f0 00 	      STA	ParallaxCache2,Y
   1574  f7f8		       4c fb f7 	      JMP	ContinueBorderTac
   1575  f7fb
   1576  f7fb				   ContinueBorderTac
   1577  f7fb		       88		      DEY
   1578  f7fc		       10 c3		      BPL	TachometerBorderLoop
   1579  f7fe		       60		      RTS
   1580  f7ff
   1581  f7ff				   VerticalParallaxLoop
   1582  f7ff				   CalculateVerticalParallax0
   1583  f7ff		       98		      TYA
   1584  f800		       18		      CLC
   1585  f801		       65 91		      ADC	TrafficOffset0 + 1
   1586  f803		       29 06		      AND	#%00000110
   1587  f805		       d0 0b		      BNE	HasNoVerticalLine0
   1588  f807				   HasVerticalLine0
   1589  f807		       a9 ff		      LDA	#$FF
   1590  f809		       99 d8 00 	      STA	ParallaxCache,Y
   1591  f80c		       99 f0 00 	      STA	ParallaxCache2,Y
   1592  f80f		       4c 4f f8 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1593  f812				   HasNoVerticalLine0
   1594  f812		       a9 00		      LDA	#0
   1595  f814		       99 d8 00 	      STA	ParallaxCache,Y
   1596  f817		       99 f0 00 	      STA	ParallaxCache2,Y
   1597  f81a
   1598  f81a				   CalculateVerticalParallax1
   1599  f81a		       98		      TYA
   1600  f81b		       18		      CLC
   1601  f81c		       65 c7		      ADC	ParallaxOffset1 + 1
   1602  f81e		       29 07		      AND	#%00000111
   1603  f820		       d0 0d		      BNE	HasNoVerticalLine1
   1604  f822
   1605  f822				   HasVerticalLine1
   1606  f822		       a9 fc		      LDA	#%11111100
   1607  f824		       99 d8 00 	      STA	ParallaxCache,Y
   1608  f827		       a9 c0		      LDA	#%11000000
   1609  f829		       99 f0 00 	      STA	ParallaxCache2,Y
   1610  f82c		       4c 4f f8 	      JMP	ContinueVerticalParallaxLoop
   1611  f82f				   HasNoVerticalLine1
   1612  f82f		       a9 00		      LDA	#0
   1613  f831		       99 d8 00 	      STA	ParallaxCache,Y
   1614  f834		       99 f0 00 	      STA	ParallaxCache2,Y
   1615  f837
   1616  f837				   CalculateVerticalParallax2
   1617  f837		       98		      TYA
   1618  f838		       18		      CLC
   1619  f839		       65 c9		      ADC	ParallaxOffset2 + 1
   1620  f83b		       29 07		      AND	#%00000111
   1621  f83d		       d0 08		      BNE	HasNoVerticalLine2
   1622  f83f
   1623  f83f				   HasVerticalLine2
   1624  f83f		       a9 f0		      LDA	#%11110000
   1625  f841		       99 d8 00 	      STA	ParallaxCache,Y
   1626  f844		       4c 4f f8 	      JMP	ContinueVerticalParallaxLoop
   1627  f847				   HasNoVerticalLine2
   1628  f847		       a9 00		      LDA	#0
   1629  f849		       99 d8 00 	      STA	ParallaxCache,Y
   1630  f84c		       99 f0 00 	      STA	ParallaxCache2,Y
   1631  f84f
   1632  f84f				   ContinueVerticalParallaxLoop
   1633  f84f		       88		      DEY
   1634  f850		       10 ad		      BPL	VerticalParallaxLoop
   1635  f852		       60		      RTS
   1636  f853
   1637  f853				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1638  f853		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1639  f855		       85 d5		      STA	ScoreFontColor
   1640  f857		       a9 01		      LDA	#1
   1641  f859		       85 d6		      STA	ScoreFontColorHoldChange
   1642  f85b
   1643  f85b		       a5 8d		      LDA	FrameCount1
   1644  f85d		       29 07		      AND	#%00000111
   1645  f85f		       85 b3		      STA	Tmp3
   1646  f861							;0 is Zelda Name, (default)
   1647  f861		       a9 01		      LDA	#1
   1648  f863		       c5 b3		      CMP	Tmp3
   1649  f865		       f0 38		      BEQ	PrintZeldaDateLeft
   1650  f867
   1651  f867		       a9 02		      LDA	#2
   1652  f869		       c5 b3		      CMP	Tmp3
   1653  f86b		       f0 23		      BEQ	PrintPolvinhosLeft
   1654  f86d
   1655  f86d		       a9 03		      LDA	#3
   1656  f86f		       c5 b3		      CMP	Tmp3
   1657  f871		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1658  f873
   1659  f873		       a9 04		      LDA	#4
   1660  f875		       c5 b3		      CMP	Tmp3
   1661  f877		       f0 1c		      BEQ	PrintIvonneLeft
   1662  f879
   1663  f879		       a9 05		      LDA	#5
   1664  f87b		       c5 b3		      CMP	Tmp3
   1665  f87d		       f0 2a		      BEQ	PrintIvonneDateLeft
   1666  f87f
   1667  f87f		       a9 06		      LDA	#6
   1668  f881		       c5 b3		      CMP	Tmp3
   1669  f883		       f0 15		      BEQ	PrintArtLeft
   1670  f885
   1671  f885		       a9 07		      LDA	#7
   1672  f887		       c5 b3		      CMP	Tmp3
   1673  f889		       f0 23		      BEQ	PrintLeonardoLeft
   1674  f88b
   1675  f88b				   PrintZeldaLeft
   1676  f88b		       a2 28		      LDX	#<ZeldaTextLeft
   1677  f88d		       4c b3 f8 	      JMP	ProcessPrintEasterEgg
   1678  f890				   PrintPolvinhosLeft
   1679  f890		       a2 3c		      LDX	#<PolvinhosTextLeft
   1680  f892		       4c b3 f8 	      JMP	ProcessPrintEasterEgg
   1681  f895				   PrintIvonneLeft
   1682  f895		       a2 50		      LDX	#<IvonneTextLeft
   1683  f897		       4c b3 f8 	      JMP	ProcessPrintEasterEgg
   1684  f89a				   PrintArtLeft
   1685  f89a		       a2 64		      LDX	#<PaperArtTextLeft
   1686  f89c		       4c b3 f8 	      JMP	ProcessPrintEasterEgg
   1687  f89f
   1688  f89f				   PrintZeldaDateLeft
   1689  f89f		       a2 32		      LDX	#<ZeldaDateLeft
   1690  f8a1		       4c b3 f8 	      JMP	ProcessPrintEasterEgg
   1691  f8a4				   PrintPolvinhosDateLeft
   1692  f8a4		       a2 46		      LDX	#<PolvinhosDateLeft
   1693  f8a6		       4c b3 f8 	      JMP	ProcessPrintEasterEgg
   1694  f8a9				   PrintIvonneDateLeft
   1695  f8a9		       a2 5a		      LDX	#<IvonneDateLeft
   1696  f8ab		       4c b3 f8 	      JMP	ProcessPrintEasterEgg
   1697  f8ae				   PrintLeonardoLeft
   1698  f8ae		       a2 6e		      LDX	#<LeonardoTextLeft
   1699  f8b0		       4c b3 f8 	      JMP	ProcessPrintEasterEgg
   1700  f8b3
   1701  f8b3				   ProcessPrintEasterEgg
   1702  f8b3		       a5 8c		      LDA	FrameCount0	;3
   1703  f8b5		       29 01		      AND	#%00000001	;2
   1704  f8b7		       d0 03		      BNE	TranformIntoRightText
   1705  f8b9		       4c c1 f8 	      JMP	PrintEasterEggText
   1706  f8bc				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1707  f8bc		       8a		      TXA
   1708  f8bd		       18		      CLC
   1709  f8be		       69 05		      ADC	#HALF_TEXT_SIZE
   1710  f8c0		       aa		      TAX
   1711  f8c1
   1712  f8c1				   PrintEasterEggText
   1713  f8c1		       20 24 f7 	      JSR	PrintStaticText
   1714  f8c4		       60		      RTS
   1715  f8c5
   1716  f8c5				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1717  f8c5		       a2 00		      LDX	#0
   1718  f8c7		       a0 04		      LDY	#FONT_OFFSET
   1719  f8c9
   1720  f8c9				   ScoreLoop		; 20 
   1721  f8c9		       85 02		      STA	WSYNC	;2
   1722  f8cb
   1723  f8cb		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1724  f8cd		       85 0d		      STA	PF0	;3
   1725  f8cf
   1726  f8cf		       a5 82		      LDA	PF1Cache	;3
   1727  f8d1		       85 0e		      STA	PF1	;3
   1728  f8d3
   1729  f8d3		       a5 83		      LDA	PF2Cache	;3
   1730  f8d5		       85 0f		      STA	PF2	;3
   1731  f8d7
   1732  f8d7				   DrawScoreD0		; 15
   1733  f8d7		       a6 d0		      LDX	ScoreD0	; 3
   1734  f8d9		       bd 00 fd 	      LDA	Font,X	;4
   1735  f8dc		       85 81		      STA	PF0Cache	;3
   1736  f8de		       c6 d0		      DEC	ScoreD0	;5
   1737  f8e0
   1738  f8e0				   DrawScoreD1		; 23	
   1739  f8e0		       a6 d1		      LDX	ScoreD1	; 3
   1740  f8e2		       bd 00 fd 	      LDA	Font,X	;4
   1741  f8e5		       0a		      ASL		;2
   1742  f8e6		       0a		      ASL		;2
   1743  f8e7		       0a		      ASL		;2
   1744  f8e8		       0a		      ASL		;2
   1745  f8e9		       85 82		      STA	PF1Cache	;3
   1746  f8eb		       c6 d1		      DEC	ScoreD1	;5
   1747  f8ed
   1748  f8ed				   DrawScoreD2		; 20
   1749  f8ed		       a6 d2		      LDX	ScoreD2	; 3
   1750  f8ef		       bd 00 fd 	      LDA	Font,X	;4
   1751  f8f2		       29 0f		      AND	#%00001111	;2
   1752  f8f4		       05 82		      ORA	PF1Cache	;3
   1753  f8f6		       85 82		      STA	PF1Cache	;3
   1754  f8f8		       c6 d2		      DEC	ScoreD2	;5
   1755  f8fa
   1756  f8fa				   DrawScoreD3		; 23
   1757  f8fa		       a6 d3		      LDX	ScoreD3	; 3
   1758  f8fc		       bd 00 fd 	      LDA	Font,X	;4
   1759  f8ff		       4a		      LSR		;2
   1760  f900		       4a		      LSR		;2
   1761  f901		       4a		      LSR		;2
   1762  f902		       4a		      LSR		;2
   1763  f903		       85 83		      STA	PF2Cache	;3
   1764  f905		       c6 d3		      DEC	ScoreD3	;5
   1765  f907
   1766  f907				   DrawScoreD4		; 20
   1767  f907		       a6 d4		      LDX	ScoreD4	; 3
   1768  f909		       bd 00 fd 	      LDA	Font,X	;4
   1769  f90c		       29 f0		      AND	#%11110000	;2
   1770  f90e		       05 83		      ORA	PF2Cache	;3
   1771  f910		       85 83		      STA	PF2Cache	;3
   1772  f912		       c6 d4		      DEC	ScoreD4	;5
   1773  f914
   1774  f914
   1775  f914		       88		      DEY		;2
   1776  f915		       10 b2		      BPL	ScoreLoop	;4
   1777  f917
   1778  f917		       85 02		      STA	WSYNC
   1779  f919
   1780  f919		       20 9d f6 	      JSR	LoadAll
   1781  f91c
   1782  f91c		       60		      RTS		; 6
   1783  f91d
   1784  f91d				   DrawGameOverScreenLeft
   1785  f91d		       85 02		      STA	WSYNC
   1786  f91f		       20 8e f6 	      JSR	ClearPF
   1787  f922		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1788  f924		       85 06		      STA	COLUP0
   1789  f926		       85 02		      STA	WSYNC
   1790  f928				   DrawBcdScoreLeft
   1791  f928		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1792  f92a		       85 d0		      STA	ScoreD0
   1793  f92c
   1794  f92c		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1795  f92e		       85 d1		      STA	ScoreD1
   1796  f930
   1797  f930		       a5 b7		      LDA	ScoreBcd3
   1798  f932		       29 0f		      AND	#%00001111
   1799  f934		       aa		      TAX
   1800  f935		       bd be fd 	      LDA	FontLookup,X	;4
   1801  f938		       85 d2		      STA	ScoreD2	;3
   1802  f93a
   1803  f93a		       a5 b6		      LDA	ScoreBcd2
   1804  f93c		       4a		      LSR
   1805  f93d		       4a		      LSR
   1806  f93e		       4a		      LSR
   1807  f93f		       4a		      LSR
   1808  f940		       aa		      TAX
   1809  f941		       bd be fd 	      LDA	FontLookup,X	;4
   1810  f944		       85 d3		      STA	ScoreD3	;3
   1811  f946
   1812  f946		       a5 b6		      LDA	ScoreBcd2
   1813  f948		       29 0f		      AND	#%00001111
   1814  f94a		       aa		      TAX
   1815  f94b		       bd be fd 	      LDA	FontLookup,X	;4
   1816  f94e		       85 d4		      STA	ScoreD4	;3
   1817  f950
   1818  f950		       85 02		      STA	WSYNC
   1819  f952		       20 c5 f8 	      JSR	PrintScore
   1820  f955		       85 02		      STA	WSYNC
   1821  f957		       85 02		      STA	WSYNC
   1822  f959		       20 8e f6 	      JSR	ClearPF
   1823  f95c
   1824  f95c		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1825  f95e		       85 06		      STA	COLUP0
   1826  f960		       85 02		      STA	WSYNC
   1827  f962
   1828  f962				   DrawTimerLeft
   1829  f962		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1830  f964		       85 d0		      STA	ScoreD0
   1831  f966		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1832  f968		       85 d1		      STA	ScoreD1
   1833  f96a		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1834  f96c		       85 d2		      STA	ScoreD2
   1835  f96e		       a5 bf		      LDA	TimeBcd2
   1836  f970		       4a		      LSR
   1837  f971		       4a		      LSR
   1838  f972		       4a		      LSR
   1839  f973		       4a		      LSR
   1840  f974		       aa		      TAX
   1841  f975		       bd be fd 	      LDA	FontLookup,X	;4
   1842  f978		       85 d3		      STA	ScoreD3	;3
   1843  f97a		       a5 bf		      LDA	TimeBcd2
   1844  f97c		       29 0f		      AND	#%00001111
   1845  f97e		       aa		      TAX
   1846  f97f		       bd be fd 	      LDA	FontLookup,X	;4
   1847  f982		       85 d4		      STA	ScoreD4	;3
   1848  f984
   1849  f984		       85 02		      STA	WSYNC
   1850  f986		       20 c5 f8 	      JSR	PrintScore
   1851  f989		       85 02		      STA	WSYNC
   1852  f98b		       85 02		      STA	WSYNC
   1853  f98d		       20 8e f6 	      JSR	ClearPF
   1854  f990		       85 02		      STA	WSYNC
   1855  f992		       20 97 fa 	      JSR	Sleep8Lines
   1856  f995		       20 97 fa 	      JSR	Sleep8Lines
   1857  f998		       20 97 fa 	      JSR	Sleep8Lines
   1858  f99b		       20 97 fa 	      JSR	Sleep8Lines
   1859  f99e		       20 97 fa 	      JSR	Sleep8Lines
   1860  f9a1		       20 97 fa 	      JSR	Sleep8Lines
   1861  f9a4		       20 97 fa 	      JSR	Sleep8Lines
   1862  f9a7		       20 97 fa 	      JSR	Sleep8Lines
   1863  f9aa		       20 97 fa 	      JSR	Sleep8Lines
   1864  f9ad		       20 97 fa 	      JSR	Sleep8Lines
   1865  f9b0		       20 97 fa 	      JSR	Sleep8Lines
   1866  f9b3		       20 97 fa 	      JSR	Sleep8Lines
   1867  f9b6		       20 97 fa 	      JSR	Sleep8Lines
   1868  f9b9		       20 97 fa 	      JSR	Sleep8Lines
   1869  f9bc		       20 97 fa 	      JSR	Sleep8Lines
   1870  f9bf		       20 97 fa 	      JSR	Sleep8Lines
   1871  f9c2		       20 97 fa 	      JSR	Sleep8Lines
   1872  f9c5		       20 97 fa 	      JSR	Sleep8Lines
   1873  f9c8		       4c 84 fa 	      JMP	FinalizeDrawGameOver
   1874  f9cb
   1875  f9cb				   DrawGameOverScreenRight
   1876  f9cb		       85 02		      STA	WSYNC
   1877  f9cd		       20 8e f6 	      JSR	ClearPF
   1878  f9d0		       85 02		      STA	WSYNC
   1879  f9d2				   DrawBcdScoreRight
   1880  f9d2
   1881  f9d2		       a5 b5		      LDA	ScoreBcd1
   1882  f9d4		       4a		      LSR
   1883  f9d5		       4a		      LSR
   1884  f9d6		       4a		      LSR
   1885  f9d7		       4a		      LSR
   1886  f9d8		       aa		      TAX
   1887  f9d9		       bd be fd 	      LDA	FontLookup,X	;4
   1888  f9dc		       85 d0		      STA	ScoreD0	;3
   1889  f9de
   1890  f9de		       a5 b5		      LDA	ScoreBcd1
   1891  f9e0		       29 0f		      AND	#%00001111
   1892  f9e2		       aa		      TAX
   1893  f9e3		       bd be fd 	      LDA	FontLookup,X	;4
   1894  f9e6		       85 d1		      STA	ScoreD1	;3
   1895  f9e8
   1896  f9e8		       a5 b4		      LDA	ScoreBcd0
   1897  f9ea		       4a		      LSR
   1898  f9eb		       4a		      LSR
   1899  f9ec		       4a		      LSR
   1900  f9ed		       4a		      LSR
   1901  f9ee		       aa		      TAX
   1902  f9ef		       bd be fd 	      LDA	FontLookup,X	;4
   1903  f9f2		       85 d2		      STA	ScoreD2	;3
   1904  f9f4
   1905  f9f4		       a5 b4		      LDA	ScoreBcd0
   1906  f9f6		       29 0f		      AND	#%00001111
   1907  f9f8		       aa		      TAX
   1908  f9f9		       bd be fd 	      LDA	FontLookup,X	;4
   1909  f9fc		       85 d3		      STA	ScoreD3	;3
   1910  f9fe
   1911  f9fe		       a9 b8		      LDA	#<Triangle + #FONT_OFFSET
   1912  fa00		       85 d4		      STA	ScoreD4
   1913  fa02
   1914  fa02		       85 02		      STA	WSYNC
   1915  fa04		       20 c5 f8 	      JSR	PrintScore
   1916  fa07		       85 02		      STA	WSYNC
   1917  fa09		       85 02		      STA	WSYNC
   1918  fa0b
   1919  fa0b		       20 8e f6 	      JSR	ClearPF
   1920  fa0e
   1921  fa0e				   DrawTimerRight
   1922  fa0e		       85 02		      STA	WSYNC
   1923  fa10		       a5 be		      LDA	TimeBcd1
   1924  fa12		       4a		      LSR
   1925  fa13		       4a		      LSR
   1926  fa14		       4a		      LSR
   1927  fa15		       4a		      LSR
   1928  fa16		       aa		      TAX
   1929  fa17		       bd be fd 	      LDA	FontLookup,X	;4
   1930  fa1a		       85 d0		      STA	ScoreD0	;3
   1931  fa1c		       a5 be		      LDA	TimeBcd1
   1932  fa1e		       29 0f		      AND	#%00001111
   1933  fa20		       aa		      TAX
   1934  fa21		       bd be fd 	      LDA	FontLookup,X	;4
   1935  fa24		       85 d1		      STA	ScoreD1	;3
   1936  fa26		       a5 bd		      LDA	TimeBcd0
   1937  fa28		       4a		      LSR
   1938  fa29		       4a		      LSR
   1939  fa2a		       4a		      LSR
   1940  fa2b		       4a		      LSR
   1941  fa2c		       aa		      TAX
   1942  fa2d		       bd be fd 	      LDA	FontLookup,X	;4
   1943  fa30		       85 d2		      STA	ScoreD2	;3
   1944  fa32		       a5 bd		      LDA	TimeBcd0
   1945  fa34		       29 0f		      AND	#%00001111
   1946  fa36		       aa		      TAX
   1947  fa37		       bd be fd 	      LDA	FontLookup,X	;4
   1948  fa3a		       85 d3		      STA	ScoreD3	;3
   1949  fa3c		       a9 b8		      LDA	#<Triangle + #FONT_OFFSET
   1950  fa3e		       85 d4		      STA	ScoreD4
   1951  fa40		       85 02		      STA	WSYNC
   1952  fa42		       20 c5 f8 	      JSR	PrintScore
   1953  fa45
   1954  fa45		       85 02		      STA	WSYNC
   1955  fa47		       85 02		      STA	WSYNC
   1956  fa49		       20 8e f6 	      JSR	ClearPF
   1957  fa4c
   1958  fa4c		       85 02		      STA	WSYNC
   1959  fa4e		       20 97 fa 	      JSR	Sleep8Lines
   1960  fa51		       20 97 fa 	      JSR	Sleep8Lines
   1961  fa54		       20 97 fa 	      JSR	Sleep8Lines
   1962  fa57		       20 97 fa 	      JSR	Sleep8Lines
   1963  fa5a		       20 97 fa 	      JSR	Sleep8Lines
   1964  fa5d		       20 97 fa 	      JSR	Sleep8Lines
   1965  fa60		       20 97 fa 	      JSR	Sleep8Lines
   1966  fa63		       20 97 fa 	      JSR	Sleep8Lines
   1967  fa66		       20 97 fa 	      JSR	Sleep8Lines
   1968  fa69		       20 97 fa 	      JSR	Sleep8Lines
   1969  fa6c		       20 97 fa 	      JSR	Sleep8Lines
   1970  fa6f		       20 97 fa 	      JSR	Sleep8Lines
   1971  fa72		       20 97 fa 	      JSR	Sleep8Lines
   1972  fa75		       20 97 fa 	      JSR	Sleep8Lines
   1973  fa78		       20 97 fa 	      JSR	Sleep8Lines
   1974  fa7b		       20 97 fa 	      JSR	Sleep8Lines
   1975  fa7e		       20 97 fa 	      JSR	Sleep8Lines
   1976  fa81		       20 97 fa 	      JSR	Sleep8Lines
   1977  fa84
   1978  fa84
   1979  fa84
   1980  fa84				   FinalizeDrawGameOver
   1981  fa84		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1982  fa86		       85 d5		      STA	ScoreFontColor
   1983  fa88		       20 97 fa 	      JSR	Sleep8Lines
   1984  fa8b		       20 97 fa 	      JSR	Sleep8Lines
   1985  fa8e		       20 97 fa 	      JSR	Sleep8Lines
   1986  fa91		       20 97 fa 	      JSR	Sleep8Lines
   1987  fa94		       4c af f5 	      JMP	PrepareOverscan
   1988  fa97
   1989  fa97				   Sleep8Lines
   1990  fa97		       85 02		      STA	WSYNC
   1991  fa99		       85 02		      STA	WSYNC
   1992  fa9b		       85 02		      STA	WSYNC
   1993  fa9d		       85 02		      STA	WSYNC
   1994  fa9f		       85 02		      STA	WSYNC
   1995  faa1		       85 02		      STA	WSYNC
   1996  faa3		       85 02		      STA	WSYNC
   1997  faa5		       85 02		      STA	WSYNC
   1998  faa7		       60		      RTS
   1999  faa8
   2000  faa8							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   2001  fd00					      org	$FD00
   2002  fd00				   Font
   2003  fd00				   C0
   2004  fd00		       e7		      .byte.b	#%11100111	;
   2005  fd01		       a5		      .byte.b	#%10100101	; 
   2006  fd02		       a5		      .byte.b	#%10100101	; 
   2007  fd03		       a5		      .byte.b	#%10100101	; 
   2008  fd04		       e7		      .byte.b	#%11100111	;	
   2009  fd05				   C1
   2010  fd05		       e7		      .byte.b	#%11100111	;
   2011  fd06		       42		      .byte.b	#%01000010	; 
   2012  fd07		       42		      .byte.b	#%01000010	; 
   2013  fd08		       42		      .byte.b	#%01000010	; 
   2014  fd09		       66		      .byte.b	#%01100110	;
   2015  fd0a				   C2
   2016  fd0a		       e7		      .byte.b	#%11100111	;
   2017  fd0b		       24		      .byte.b	#%00100100	; 
   2018  fd0c		       e7		      .byte.b	#%11100111	; 
   2019  fd0d		       81		      .byte.b	#%10000001	; 
   2020  fd0e		       e7		      .byte.b	#%11100111	;
   2021  fd0f				   C3
   2022  fd0f		       e7		      .byte.b	#%11100111	;
   2023  fd10		       81		      .byte.b	#%10000001	; 
   2024  fd11		       e7		      .byte.b	#%11100111	; 
   2025  fd12		       81		      .byte.b	#%10000001	; 
   2026  fd13		       e7		      .byte.b	#%11100111	;
   2027  fd14				   C4
   2028  fd14		       81		      .byte.b	#%10000001	;
   2029  fd15		       81		      .byte.b	#%10000001	; 
   2030  fd16		       e7		      .byte.b	#%11100111	; 
   2031  fd17		       a5		      .byte.b	#%10100101	; 
   2032  fd18		       a5		      .byte.b	#%10100101	;
   2033  fd19				   C5
   2034  fd19		       e7		      .byte.b	#%11100111	;
   2035  fd1a		       81		      .byte.b	#%10000001	; 
   2036  fd1b		       e7		      .byte.b	#%11100111	; 
   2037  fd1c		       24		      .byte.b	#%00100100	; 
   2038  fd1d		       e7		      .byte.b	#%11100111	;
   2039  fd1e				   C6
   2040  fd1e		       e7		      .byte.b	#%11100111	;
   2041  fd1f		       a5		      .byte.b	#%10100101	; 
   2042  fd20		       e7		      .byte.b	#%11100111	; 
   2043  fd21		       24		      .byte.b	#%00100100	; 
   2044  fd22		       e7		      .byte.b	#%11100111	;
   2045  fd23				   C7
   2046  fd23		       81		      .byte.b	#%10000001	;
   2047  fd24		       81		      .byte.b	#%10000001	; 
   2048  fd25		       81		      .byte.b	#%10000001	; 
   2049  fd26		       81		      .byte.b	#%10000001	; 
   2050  fd27		       e7		      .byte.b	#%11100111	;
   2051  fd28				   C8
   2052  fd28		       e7		      .byte.b	#%11100111	;
   2053  fd29		       a5		      .byte.b	#%10100101	; 
   2054  fd2a		       e7		      .byte.b	#%11100111	; 
   2055  fd2b		       a5		      .byte.b	#%10100101	; 
   2056  fd2c		       e7		      .byte.b	#%11100111	;
   2057  fd2d				   C9
   2058  fd2d		       e7		      .byte.b	#%11100111	;
   2059  fd2e		       81		      .byte.b	#%10000001	; 
   2060  fd2f		       e7		      .byte.b	#%11100111	; 
   2061  fd30		       a5		      .byte.b	#%10100101	; 
   2062  fd31		       e7		      .byte.b	#%11100111	;
   2063  fd32				   CA
   2064  fd32		       a5		      .byte.b	#%10100101	;
   2065  fd33		       a5		      .byte.b	#%10100101	; 
   2066  fd34		       e7		      .byte.b	#%11100111	; 
   2067  fd35		       a5		      .byte.b	#%10100101	; 
   2068  fd36		       e7		      .byte.b	#%11100111	;
   2069  fd37				   CB
   2070  fd37		       66		      .byte.b	#%01100110	;
   2071  fd38		       a5		      .byte.b	#%10100101	; 
   2072  fd39		       66		      .byte.b	#%01100110	; 
   2073  fd3a		       a5		      .byte.b	#%10100101	;
   2074  fd3b		       66		      .byte.b	#%01100110	;
   2075  fd3c				   CC
   2076  fd3c		       e7		      .byte.b	#%11100111	;
   2077  fd3d		       24		      .byte.b	#%00100100	; 
   2078  fd3e		       24		      .byte.b	#%00100100	; 
   2079  fd3f		       24		      .byte.b	#%00100100	;
   2080  fd40		       e7		      .byte.b	#%11100111	;
   2081  fd41
   2082  fd41				   CD
   2083  fd41		       66		      .byte.b	#%01100110	;
   2084  fd42		       a5		      .byte.b	#%10100101	; 
   2085  fd43		       a5		      .byte.b	#%10100101	; 
   2086  fd44		       a5		      .byte.b	#%10100101	;
   2087  fd45		       66		      .byte.b	#%01100110	;
   2088  fd46
   2089  fd46				   CE
   2090  fd46		       e7		      .byte.b	#%11100111	;
   2091  fd47		       24		      .byte.b	#%00100100	; 
   2092  fd48		       e7		      .byte.b	#%11100111	; 
   2093  fd49		       24		      .byte.b	#%00100100	; 
   2094  fd4a		       e7		      .byte.b	#%11100111	;
   2095  fd4b
   2096  fd4b				   CF
   2097  fd4b		       24		      .byte.b	#%00100100	;
   2098  fd4c		       24		      .byte.b	#%00100100	; 
   2099  fd4d		       e7		      .byte.b	#%11100111	; 
   2100  fd4e		       24		      .byte.b	#%00100100	; 
   2101  fd4f		       e7		      .byte.b	#%11100111	;
   2102  fd50
   2103  fd50				   CG
   2104  fd50		       c3		      .byte.b	#%11000011	;
   2105  fd51		       a5		      .byte.b	#%10100101	; 
   2106  fd52		       a5		      .byte.b	#%10100101	; 
   2107  fd53		       24		      .byte.b	#%00100100	; 
   2108  fd54		       c3		      .byte.b	#%11000011	;	
   2109  fd55
   2110  fd55				   CH
   2111  fd55		       a5		      .byte.b	#%10100101	;
   2112  fd56		       a5		      .byte.b	#%10100101	; 
   2113  fd57		       e7		      .byte.b	#%11100111	; 
   2114  fd58		       a5		      .byte.b	#%10100101	; 
   2115  fd59		       a5		      .byte.b	#%10100101	;
   2116  fd5a
   2117  fd5a				   CK
   2118  fd5a		       a5		      .byte.b	#%10100101	;
   2119  fd5b		       a5		      .byte.b	#%10100101	; 
   2120  fd5c		       66		      .byte.b	#%01100110	; 
   2121  fd5d		       a5		      .byte.b	#%10100101	; 
   2122  fd5e		       a5		      .byte.b	#%10100101	;
   2123  fd5f
   2124  fd5f				   CL
   2125  fd5f		       e7		      .byte.b	#%11100111	;
   2126  fd60		       24		      .byte.b	#%00100100	; 
   2127  fd61		       24		      .byte.b	#%00100100	; 
   2128  fd62		       24		      .byte.b	#%00100100	; 
   2129  fd63		       24		      .byte.b	#%00100100	;
   2130  fd64
   2131  fd64				   CI
   2132  fd64		       42		      .byte.b	#%01000010	;
   2133  fd65		       42		      .byte.b	#%01000010	; 
   2134  fd66		       42		      .byte.b	#%01000010	; 
   2135  fd67		       42		      .byte.b	#%01000010	; 
   2136  fd68		       42		      .byte.b	#%01000010	;
   2137  fd69
   2138  fd69				   CM
   2139  fd69		       a5		      .byte.b	#%10100101	;
   2140  fd6a		       a5		      .byte.b	#%10100101	; 
   2141  fd6b		       a5		      .byte.b	#%10100101	; 
   2142  fd6c		       e7		      .byte.b	#%11100111	; 
   2143  fd6d		       a5		      .byte.b	#%10100101	;
   2144  fd6e
   2145  fd6e				   CN
   2146  fd6e		       a5		      .byte.b	#%10100101	;
   2147  fd6f		       a5		      .byte.b	#%10100101	; 
   2148  fd70		       a5		      .byte.b	#%10100101	; 
   2149  fd71		       a5		      .byte.b	#%10100101	; 
   2150  fd72		       66		      .byte.b	#%01100110	;	
   2151  fd73
   2152  fd73
   2153  fd73				   CO
   2154  fd73		       42		      .byte.b	#%01000010	;
   2155  fd74		       a5		      .byte.b	#%10100101	; 
   2156  fd75		       a5		      .byte.b	#%10100101	; 
   2157  fd76		       a5		      .byte.b	#%10100101	; 
   2158  fd77		       42		      .byte.b	#%01000010	;	
   2159  fd78
   2160  fd78				   CP
   2161  fd78		       24		      .byte.b	#%00100100	;
   2162  fd79		       24		      .byte.b	#%00100100	; 
   2163  fd7a		       e7		      .byte.b	#%11100111	; 
   2164  fd7b		       a5		      .byte.b	#%10100101	; 
   2165  fd7c		       e7		      .byte.b	#%11100111	;
   2166  fd7d
   2167  fd7d				   CR
   2168  fd7d		       a5		      .byte.b	#%10100101	;
   2169  fd7e		       a5		      .byte.b	#%10100101	; 
   2170  fd7f		       66		      .byte.b	#%01100110	; 
   2171  fd80		       a5		      .byte.b	#%10100101	; 
   2172  fd81		       66		      .byte.b	#%01100110	;
   2173  fd82
   2174  fd82				   CS
   2175  fd82		       66		      .byte.b	#%01100110	;
   2176  fd83		       81		      .byte.b	#%10000001	; 
   2177  fd84		       42		      .byte.b	#%01000010	; 
   2178  fd85		       24		      .byte.b	#%00100100	; 
   2179  fd86		       c3		      .byte.b	#%11000011	;
   2180  fd87
   2181  fd87				   CT
   2182  fd87		       42		      .byte.b	#%01000010	;
   2183  fd88		       42		      .byte.b	#%01000010	; 
   2184  fd89		       42		      .byte.b	#%01000010	; 
   2185  fd8a		       42		      .byte.b	#%01000010	; 
   2186  fd8b		       e7		      .byte.b	#%11100111	;
   2187  fd8c
   2188  fd8c				   CV
   2189  fd8c		       42		      .byte.b	#%01000010	;
   2190  fd8d		       a5		      .byte.b	#%10100101	; 
   2191  fd8e		       a5		      .byte.b	#%10100101	; 
   2192  fd8f		       a5		      .byte.b	#%10100101	; 
   2193  fd90		       a5		      .byte.b	#%10100101	;	
   2194  fd91
   2195  fd91				   CY
   2196  fd91		       42		      .byte.b	#%01000010	;
   2197  fd92		       42		      .byte.b	#%01000010	; 
   2198  fd93		       42		      .byte.b	#%01000010	; 
   2199  fd94		       a5		      .byte.b	#%10100101	; 
   2200  fd95		       a5		      .byte.b	#%10100101	;
   2201  fd96
   2202  fd96				   CW
   2203  fd96		       a5		      .byte.b	#%10100101	;
   2204  fd97		       e7		      .byte.b	#%11100111	; 
   2205  fd98		       a5		      .byte.b	#%10100101	; 
   2206  fd99		       a5		      .byte.b	#%10100101	; 
   2207  fd9a		       a5		      .byte.b	#%10100101	;
   2208  fd9b
   2209  fd9b				   CZ
   2210  fd9b		       e7		      .byte.b	#%11100111	;
   2211  fd9c		       24		      .byte.b	#%00100100	; 
   2212  fd9d		       42		      .byte.b	#%01000010	; 
   2213  fd9e		       81		      .byte.b	#%10000001	; 
   2214  fd9f		       e7		      .byte.b	#%11100111	;
   2215  fda0
   2216  fda0				   Pipe
   2217  fda0		       42		      .byte.b	#%01000010	;
   2218  fda1		       00		      .byte.b	#%00000000	; 
   2219  fda2		       42		      .byte.b	#%01000010	; 
   2220  fda3		       00		      .byte.b	#%00000000	; 
   2221  fda4		       42		      .byte.b	#%01000010	;
   2222  fda5
   2223  fda5				   Exclamation
   2224  fda5		       42		      .byte.b	#%01000010	;
   2225  fda6		       00		      .byte.b	#%00000000	; 
   2226  fda7		       42		      .byte.b	#%01000010	; 
   2227  fda8		       42		      .byte.b	#%01000010	; 
   2228  fda9		       42		      .byte.b	#%01000010	;
   2229  fdaa
   2230  fdaa				   Dot
   2231  fdaa		       42		      .byte.b	#%01000010	;
   2232  fdab		       42		      .byte.b	#%01000010	; 
   2233  fdac		       00		      .byte.b	#%00000000	; 
   2234  fdad		       00		      .byte.b	#%00000000	; 
   2235  fdae		       00		      .byte.b	#%00000000	;
   2236  fdaf
   2237  fdaf				   Colon
   2238  fdaf		       42		      .byte.b	#%01000010	;
   2239  fdb0		       42		      .byte.b	#%01000010	; 
   2240  fdb1		       00		      .byte.b	#%00000000	; 
   2241  fdb2		       42		      .byte.b	#%01000010	; 
   2242  fdb3		       42		      .byte.b	#%01000010	;
   2243  fdb4
   2244  fdb4				   Triangle
   2245  fdb4		       81		      .byte.b	#%10000001	;
   2246  fdb5		       c3		      .byte.b	#%11000011	; 
   2247  fdb6		       e7		      .byte.b	#%11100111	; 
   2248  fdb7		       c3		      .byte.b	#%11000011	; 
   2249  fdb8		       81		      .byte.b	#%10000001	;
   2250  fdb9
   2251  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2252  fdb9		       00		      .byte.b	#0	;
   2253  fdba		       00		      .byte.b	#0	;
   2254  fdbb		       00		      .byte.b	#0	;
   2255  fdbc		       00		      .byte.b	#0	;
   2256  fdbd		       00		      .byte.b	#0	;
   2257  fdbe
   2258  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2259  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2260  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2261  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2262  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2263  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2264  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2265  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2266  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2267  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2268  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2269  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2270  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2271  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2272  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2273  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2274  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2275  fdce
   2276  fdce				   EngineSoundType
   2277  fdce		       02		      .byte.b	#2
   2278  fdcf		       02		      .byte.b	#2
   2279  fdd0		       0e		      .byte.b	#14
   2280  fdd1		       06		      .byte.b	#6
   2281  fdd2		       06		      .byte.b	#6
   2282  fdd3		       0e		      .byte.b	#14
   2283  fdd4
   2284  fdd4				   EngineBaseFrequence
   2285  fdd4		       1f		      .byte.b	#31
   2286  fdd5		       15		      .byte.b	#21
   2287  fdd6		       14		      .byte.b	#20
   2288  fdd7		       1f		      .byte.b	#31
   2289  fdd8		       16		      .byte.b	#22
   2290  fdd9		       03		      .byte.b	#3
   2291  fdda
   2292  fdda				   TachometerSizeLookup1
   2293  fdda		       1f		      .byte.b	#%00011111
   2294  fddb		       3f		      .byte.b	#%00111111
   2295  fddc		       7f		      .byte.b	#%01111111
   2296  fddd		       ff		      .byte.b	#%11111111
   2297  fdde		       ff		      .byte.b	#%11111111
   2298  fddf		       ff		      .byte.b	#%11111111
   2299  fde0		       ff		      .byte.b	#%11111111
   2300  fde1		       ff		      .byte.b	#%11111111
   2301  fde2
   2302  fde2				   TachometerSizeLookup2
   2303  fde2		       00		      .byte.b	#%00000000
   2304  fde3		       00		      .byte.b	#%00000000
   2305  fde4		       00		      .byte.b	#%00000000
   2306  fde5		       00		      .byte.b	#%00000000
   2307  fde6		       80		      .byte.b	#%10000000
   2308  fde7		       c0		      .byte.b	#%11000000
   2309  fde8		       e0		      .byte.b	#%11100000
   2310  fde9		       f0		      .byte.b	#%11110000
   2311  fdea
   2312  fdea				   TachometerGearLookup
   2313  fdea		       01		      .byte.b	#%00000001
   2314  fdeb		       02		      .byte.b	#%00000010
   2315  fdec		       04		      .byte.b	#%00000100
   2316  fded		       08		      .byte.b	#%00001000
   2317  fdee		       10		      .byte.b	#%00010000
   2318  fdef		       30		      .byte.b	#%00110000
   2319  fdf0
   2320  fe00					      org	$FE00
   2321  fe00				   AesTable
   2322  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2323  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2324  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2325  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2326  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2327  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2328  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2329  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2330  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2331  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2332  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2333  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2334  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2335  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2336  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2337  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2338  ff00
   2339  ff00							; From FF00 to FFFB (122 bytes) to use here
   2340  ff00
   2341  ff00				   StaticText		; All static text must be on the same MSB block. 
   2342  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2343  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2344  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2345  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2346  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2347  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2348  ff05
   2349  ff05				   HellwayLeftText
   2350  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2351  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2352  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2353  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2354  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2355  ff0a
   2356  ff0a				   HellwayRightText
   2357  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2358  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2359  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2360  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2361  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2362  ff0f
   2363  ff0f				   OpbText
   2364  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2365  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2366  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2367  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2368  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2369  ff14
   2370  ff14				   YearText
   2371  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2372  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2373  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2374  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2375  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2376  ff19
   2377  ff19				   GameText
   2378  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2379  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2380  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2381  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2382  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2383  ff1e
   2384  ff1e				   OverText
   2385  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2386  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2387  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2388  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2389  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2390  ff23				   GoText
   2391  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2392  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2393  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2394  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2395  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2396  ff28
   2397  ff28				   ZeldaTextLeft
   2398  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2399  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2400  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2401  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2402  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2403  ff2d
   2404  ff2d				   ZeldaTextRight
   2405  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2406  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2407  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2408  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2409  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2410  ff32
   2411  ff32				   ZeldaDateLeft
   2412  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2413  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2414  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2415  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2416  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2417  ff37
   2418  ff37				   ZeldaDateRight
   2419  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2420  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2421  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2422  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2423  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2424  ff3c
   2425  ff3c				   PolvinhosTextLeft
   2426  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2427  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2428  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2429  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2430  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2431  ff41
   2432  ff41				   PolvinhosTextRight
   2433  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2434  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2435  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2436  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2437  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2438  ff46
   2439  ff46				   PolvinhosDateLeft
   2440  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2441  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2442  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2443  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2444  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2445  ff4b
   2446  ff4b				   PolvinhosDateRight
   2447  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2448  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2449  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2450  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2451  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2452  ff50
   2453  ff50				   IvonneTextLeft
   2454  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2455  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2456  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2457  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2458  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2459  ff55
   2460  ff55				   IvonneTextRight
   2461  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2462  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2463  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2464  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2465  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2466  ff5a
   2467  ff5a				   IvonneDateLeft
   2468  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2469  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2470  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2471  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2472  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2473  ff5f
   2474  ff5f				   IvonneDateRight
   2475  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2476  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2477  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2478  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2479  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2480  ff64
   2481  ff64				   PaperArtTextLeft
   2482  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2483  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2484  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2485  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2486  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2487  ff69
   2488  ff69				   PaperArtTextRight
   2489  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2490  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2491  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2492  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2493  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2494  ff6e
   2495  ff6e				   LeonardoTextLeft
   2496  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2497  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2498  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2499  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2500  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2501  ff73
   2502  ff73				   LeonardoTextRight
   2503  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2504  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2505  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2506  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2507  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2508  ff78
   2509  ff78				   HitsText
   2510  ff78		       59		      .byte.b	#<CH + #FONT_OFFSET
   2511  ff79		       68		      .byte.b	#<CI + #FONT_OFFSET
   2512  ff7a		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2513  ff7b		       86		      .byte.b	#<CS + #FONT_OFFSET
   2514  ff7c		       b3		      .byte.b	#<Colon + #FONT_OFFSET
   2515  ff7d
   2516  ff7d
   2517  ff7d				   EndStaticText
   2518  ff7d
   2519  ff7d				   CarSprite		; Upside down
   2520  ff7d		       00 00 00 00*	      ds	6
   2521  ff83		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   2522  ff84		       7e		      .byte.b	#%01111110
   2523  ff85		       24		      .byte.b	#%00100100
   2524  ff86		       bd		      .byte.b	#%10111101
   2525  ff87		       3c		      .byte.b	#%00111100
   2526  ff88		       bd		      .byte.b	#%10111101
   2527  ff89		       3c		      .byte.b	#%00111100
   2528  ff8a		       00 00 00 00*	      ds	GAMEPLAY_AREA - 2
   2529  ffca
   2530  ffca				   TrafficSpeeds
   2531  ffca		       00		      .byte.b	#$00	;  Trafic0 L
   2532  ffcb		       00		      .byte.b	#$00	;  Trafic0 H
   2533  ffcc		       0a		      .byte.b	#$0A	;  Trafic1 L
   2534  ffcd		       01		      .byte.b	#$01	;  Trafic1 H
   2535  ffce		       e6		      .byte.b	#$E6	;  Trafic2 L
   2536  ffcf		       00		      .byte.b	#$00	;  Trafic2 H
   2537  ffd0		       c2		      .byte.b	#$C2	;  Trafic3 L
   2538  ffd1		       00		      .byte.b	#$00	;  Trafic3 H
   2539  ffd2		       9e		      .byte.b	#$9E	;  Trafic4 L
   2540  ffd3		       00		      .byte.b	#$00	;  Trafic4 H
   2541  ffd4				   TrafficSpeedsHighDelta
   2542  ffd4		       00		      .byte.b	#$00	;  Trafic0 L
   2543  ffd5		       00		      .byte.b	#$00	;  Trafic0 H
   2544  ffd6		       0a		      .byte.b	#$0A	;  Trafic1 L
   2545  ffd7		       01		      .byte.b	#$01	;  Trafic1 H
   2546  ffd8		       c8		      .byte.b	#$C8	;  Trafic2 L
   2547  ffd9		       00		      .byte.b	#$00	;  Trafic2 H
   2548  ffda		       86		      .byte.b	#$86	;  Trafic3 L
   2549  ffdb		       00		      .byte.b	#$00	;  Trafic3 H
   2550  ffdc		       44		      .byte.b	#$44	;  Trafic4 L
   2551  ffdd		       00		      .byte.b	#$00	;  Trafic4 H
   2552  ffde
   2553  fffc					      org	$FFFC
   2554  fffc		       00 f0		      .word.w	BeforeStart
   2555  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
