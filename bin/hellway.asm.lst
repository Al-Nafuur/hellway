------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 07	   CAR_SIZE   =	7
     11  f000		       00 07	   TRAFFIC_LINE_COUNT =	7
     12  f000		       00 0a	   CAR_0_Y    =	10
     13  f000							;16 bit precision
     14  f000							;640 max speed!
     15  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     16  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     17  f000		       00 00	   CAR_MIN_SPEED_H =	0
     18  f000		       00 00	   CAR_MIN_SPEED_L =	0
     19  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     20  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     21  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     22  f000		       00 01	   ACCELERATE_SPEED =	1
     23  f000		       00 04	   BREAK_SPEED =	4
     24  f000							;For now, will use in aal rows until figure out if make it dynamic or not.
     25  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000
     26  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     27  f000
     28  f000		       00 34	   TRAFFIC_COLOR =	$34
     29  f000		       00 81	   SCORE_BACKGROUND_COLOR =	$81
     30  f000		       00 0a	   SCORE_FONT_COLOR =	$0A
     31  f000
     32  f000							;memory	
     33  f000		       00 80	   Car0Line   =	$80
     34  f000
     35  f000		       00 81	   GRP0Cache  =	$81
     36  f000		       00 82	   PF0Cache   =	$82
     37  f000		       00 83	   PF1Cache   =	$83
     38  f000		       00 84	   PF2Cache   =	$84
     39  f000
     40  f000		       00 86	   FrameCount0 =	$86	;
     41  f000		       00 87	   FrameCount1 =	$87	;
     42  f000
     43  f000		       00 88	   Car0SpeedL =	$88
     44  f000		       00 89	   Car0SpeedH =	$89
     45  f000
     46  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     47  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     48  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     49  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     50  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     51  f000		       00 a4	   TrafficOffset5 =	$A4	; Traffic 1 $A5 $A6 (24 bit) $A7 is cache
     52  f000		       00 a8	   TrafficOffset6 =	$A8	; Traffic 1 $A9 $A0 (24 bit) $AA is cache
     53  f000
     54  f000							;Temporary variables, multiple uses
     55  f000		       00 b0	   Tmp0       =	$B0
     56  f000		       00 b1	   Tmp1       =	$B1
     57  f000		       00 b2	   Tmp2       =	$B2
     58  f000
     59  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     60  f000
     61  f000		       00 d0	   ScoreD0L   =	$D0
     62  f000		       00 d1	   ScoreD0H   =	$D1
     63  f000
     64  f000							;generic start up stuff, put zero in all...
     65  f000				   Start
     66  f000		       78		      SEI
     67  f001		       d8		      CLD
     68  f002		       a2 ff		      LDX	#$FF
     69  f004		       9a		      TXS
     70  f005		       a9 00		      LDA	#0
     71  f007				   ClearMem
     72  f007		       95 00		      STA	0,X
     73  f009		       ca		      DEX
     74  f00a		       d0 fb		      BNE	ClearMem
     75  f00c
     76  f00c							;Setting some variables...
     77  f00c
     78  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     79  f00e		       85 06		      STA	COLUP0
     80  f010
     81  f010		       a9 85		      LDA	#PLAYER_2_COLOR
     82  f012		       85 07		      STA	COLUP1
     83  f014
     84  f014							;Loop ?
     85  f014		       a9 20		      LDA	#$20
     86  f016		       85 96		      STA	TrafficOffset1 + 2
     87  f018		       a9 40		      LDA	#$40
     88  f01a		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
     89  f01c		       a9 60		      LDA	#$60
     90  f01e		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
     91  f020		       a9 80		      LDA	#$80
     92  f022		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
     93  f024		       a9 a0		      LDA	#$A0
     94  f026		       85 a6		      STA	TrafficOffset5 + 2	;Initial Y Position
     95  f028		       a9 c0		      LDA	#$C0
     96  f02a		       85 aa		      STA	TrafficOffset6 + 2	;Initial Y Position
     97  f02c
     98  f02c		       ad 13 ff 	      LDA	TrafficSpeeds + 6 * 2	; Same as the line he is in.
     99  f02f		       85 88		      STA	Car0SpeedL
    100  f031
    101  f031
    102  f031							;VSYNC time
    103  f031				   MainLoop
    104  f031		       a9 02		      LDA	#2
    105  f033		       85 00		      STA	VSYNC
    106  f035		       85 02		      STA	WSYNC
    107  f037		       85 02		      STA	WSYNC
    108  f039							;Cool, can put code here! It removed the black line on top
    109  f039							;Make Objects move in the X axys
    110  f039		       85 2a		      STA	HMOVE	;2
    111  f03b							;This must be done after a WSync, otherwise it is impossible to predict the X position
    112  f03b		       a5 c0		      LDA	GameStatus	;3
    113  f03d		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    114  f03f		       f0 13		      BEQ	DoNotSetPlayerX	;3
    115  f041							;Do something better with this 32 cycles
      0  f041					      SLEEP	33	; Maybe fine position with hmove...
      1  f041				   .CYCLES    SET	33
      2  f041
      3  f041				  -	      IF	.CYCLES < 2
      4  f041				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f041				  -	      ERR
      6  f041					      ENDIF
      7  f041
      8  f041					      IF	.CYCLES & 1
      9  f041				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f041				  -	      nop	0
     11  f041					      ELSE
     12  f041		       24 00		      bit	VSYNC
     13  f043					      ENDIF
     14  f043				   .CYCLES    SET	.CYCLES - 3
     15  f043					      ENDIF
     16  f043
     17  f043					      REPEAT	.CYCLES / 2
     18  f043		       ea		      nop
     17  f043					      REPEND
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     17  f047					      REPEND
     18  f048		       ea		      nop
     17  f048					      REPEND
     18  f049		       ea		      nop
     17  f049					      REPEND
     18  f04a		       ea		      nop
     17  f04a					      REPEND
     18  f04b		       ea		      nop
     17  f04b					      REPEND
     18  f04c		       ea		      nop
     17  f04c					      REPEND
     18  f04d		       ea		      nop
     17  f04d					      REPEND
     18  f04e		       ea		      nop
     17  f04e					      REPEND
     18  f04f		       ea		      nop
     17  f04f					      REPEND
     18  f050		       ea		      nop
     17  f050					      REPEND
     18  f051		       ea		      nop
     19  f052					      REPEND
    117  f052		       85 10		      STA	RESP0	;3
    118  f054
    119  f054				   DoNotSetPlayerX
    120  f054
    121  f054		       85 02		      STA	WSYNC
    122  f056		       a9 2b		      LDA	#43	; We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    123  f058		       8d 96 02 	      STA	TIM64T
    124  f05b		       a9 00		      LDA	#0
    125  f05d		       85 00		      STA	VSYNC
    126  f05f
    127  f05f							;Read Fire Button before, will make it start the game for now.
    128  f05f		       a5 0c		      LDA	INPT4
    129  f061		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    130  f063		       a5 c0		      LDA	GameStatus
    131  f065		       09 80		      ORA	#%10000000
    132  f067		       85 c0		      STA	GameStatus
    133  f069				   SkipGameStart
    134  f069
    135  f069				   CountFrame
    136  f069		       e6 86		      INC	FrameCount0	; Used to alternate lines
    137  f06b		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    138  f06d		       e6 87		      INC	FrameCount1	; Still not used
    139  f06f				   SkipIncFC1
    140  f06f
    141  f06f							;Does not update the game if not running
    142  f06f		       a5 c0		      LDA	GameStatus	;3
    143  f071		       49 80		      EOR	#%10000000	;2 game is running...
    144  f073		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    145  f075		       4c 32 f1 	      JMP	SkipUpdateLogic
    146  f078
    147  f078				   ContinueWithGameLogic
    148  f078
    149  f078							; for left and right, we're gonna 
    150  f078							; set the horizontal speed, and then do
    151  f078							; a single HMOVE.  We'll use X to hold the
    152  f078							; horizontal speed, then store it in the 
    153  f078							; appropriate register
    154  f078
    155  f078							;assum horiz speed will be zero
    156  f078
    157  f078							;Begin read dpad
    158  f078		       a2 00		      LDX	#0
    159  f07a
    160  f07a		       a9 40		      LDA	#%01000000	;Left
    161  f07c		       2c 80 02 	      BIT	SWCHA
    162  f07f		       d0 02		      BNE	SkipMoveLeft
    163  f081		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    164  f083				   SkipMoveLeft
    165  f083
    166  f083		       a9 80		      LDA	#%10000000	;Right
    167  f085		       2c 80 02 	      BIT	SWCHA
    168  f088		       d0 02		      BNE	SkipMoveRight
    169  f08a		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    170  f08c				   SkipMoveRight
    171  f08c
    172  f08c		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    173  f08e
    174  f08e
    175  f08e							;Acelerates / breaks the car
    176  f08e		       a9 10		      LDA	#%00010000	;UP in controller
    177  f090		       2c 80 02 	      BIT	SWCHA
    178  f093		       d0 21		      BNE	SkipAccelerate
    179  f095
    180  f095							;Adds speed
    181  f095		       18		      CLC
    182  f096		       a5 88		      LDA	Car0SpeedL
    183  f098		       69 01		      ADC	#ACCELERATE_SPEED
    184  f09a		       85 88		      STA	Car0SpeedL
    185  f09c		       a5 89		      LDA	Car0SpeedH
    186  f09e		       69 00		      ADC	#0
    187  f0a0		       85 89		      STA	Car0SpeedH
    188  f0a2
    189  f0a2							;Checks if already max
    190  f0a2		       c9 02		      CMP	#CAR_MAX_SPEED_H
    191  f0a4		       90 10		      BCC	SkipAccelerate	; less than my max speed
    192  f0a6		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    193  f0a8							;High bit is max, compare the low
    194  f0a8		       a5 88		      LDA	Car0SpeedL
    195  f0aa		       c9 80		      CMP	#CAR_MAX_SPEED_L
    196  f0ac		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    197  f0ae							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    198  f0ae
    199  f0ae				   ResetToMaxSpeed		; Speed is more, or is already max
    200  f0ae		       a9 02		      LDA	#CAR_MAX_SPEED_H
    201  f0b0		       85 89		      STA	Car0SpeedH
    202  f0b2		       a9 80		      LDA	#CAR_MAX_SPEED_L
    203  f0b4		       85 88		      STA	Car0SpeedL
    204  f0b6
    205  f0b6				   SkipAccelerate
    206  f0b6
    207  f0b6				   Break
    208  f0b6		       a9 20		      LDA	#%00100000	;Down in controller
    209  f0b8		       2c 80 02 	      BIT	SWCHA
    210  f0bb		       d0 26		      BNE	SkipBreak
    211  f0bd
    212  f0bd							;Decrease speed
    213  f0bd		       38		      SEC
    214  f0be		       a5 88		      LDA	Car0SpeedL
    215  f0c0		       e9 04		      SBC	#BREAK_SPEED
    216  f0c2		       85 88		      STA	Car0SpeedL
    217  f0c4		       a5 89		      LDA	Car0SpeedH
    218  f0c6		       e9 00		      SBC	#0
    219  f0c8		       85 89		      STA	Car0SpeedH
    220  f0ca
    221  f0ca							;Checks if is min speed
    222  f0ca		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    223  f0cc		       c9 00		      CMP	#CAR_MIN_SPEED_H
    224  f0ce		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    225  f0d0		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    226  f0d2
    227  f0d2				   CompareLBreakSpeed
    228  f0d2		       a5 88		      LDA	Car0SpeedL
    229  f0d4		       c9 00		      CMP	#CAR_MIN_SPEED_L
    230  f0d6		       90 03		      BCC	ResetMinSpeed	; Less than memory
    231  f0d8		       4c e3 f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    232  f0db
    233  f0db				   ResetMinSpeed
    234  f0db		       a9 00		      LDA	#CAR_MIN_SPEED_H
    235  f0dd		       85 89		      STA	Car0SpeedH
    236  f0df		       a9 00		      LDA	#CAR_MIN_SPEED_L
    237  f0e1		       85 88		      STA	Car0SpeedL
    238  f0e3				   SkipBreak
    239  f0e3
    240  f0e3							;Updates all offsets 24 bits
    241  f0e3		       a2 00		      LDX	#0	; Memory Offset 24 bit
    242  f0e5		       a0 00		      LDY	#0	; Line Speeds 16 bits
    243  f0e7				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    244  f0e7		       38		      SEC
    245  f0e8		       a5 88		      LDA	Car0SpeedL
    246  f0ea		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    247  f0ed		       85 b0		      STA	Tmp0
    248  f0ef		       c8		      INY
    249  f0f0		       a5 89		      LDA	Car0SpeedH
    250  f0f2		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    251  f0f5		       85 b1		      STA	Tmp1
    252  f0f7		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    253  f0f9		       e9 00		      SBC	#0
    254  f0fb		       85 b2		      STA	Tmp2
    255  f0fd
    256  f0fd
    257  f0fd							;Adds the result
    258  f0fd		       18		      CLC
    259  f0fe		       a5 b0		      LDA	Tmp0
    260  f100		       75 90		      ADC	TrafficOffset0,X
    261  f102		       95 90		      STA	TrafficOffset0,X
    262  f104		       e8		      INX
    263  f105		       a5 b1		      LDA	Tmp1
    264  f107		       75 90		      ADC	TrafficOffset0,X
    265  f109		       95 90		      STA	TrafficOffset0,X
    266  f10b		       e8		      INX
    267  f10c		       a5 b2		      LDA	Tmp2	; Carry
    268  f10e		       75 90		      ADC	TrafficOffset0,X
    269  f110		       95 90		      STA	TrafficOffset0,X
    270  f112		       e8		      INX
    271  f113		       38		      SEC
    272  f114		       69 00		      ADC	#0	;Increment by one
    273  f116		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    274  f118
    275  f118
    276  f118				   PrepareNextUpdateLoop
    277  f118		       c8		      INY
    278  f119		       e8		      INX
    279  f11a		       e0 1c		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    280  f11c		       d0 c9		      BNE	UpdateOffsets
    281  f11e		       a9 00		      LDA	#0	;2
    282  f120		       85 0d		      STA	PF0	;3
    283  f122		       85 0e		      STA	PF1	;3
    284  f124		       85 0f		      STA	PF2	;3	
    285  f126
    286  f126				   TestCollision		;
    287  f126							; see if car0 and playfield collide, and change the background color if so
    288  f126		       a9 80		      LDA	#%10000000
    289  f128		       24 02		      BIT	CXP0FB
    290  f12a		       f0 04		      BEQ	NoCollision	;skip if not hitting...
    291  f12c		       a5 86		      LDA	FrameCount0	;must be a hit! Change rand color bg
    292  f12e		       85 09		      STA	COLUBK	;and store as the bgcolor
    293  f130				   NoCollision
    294  f130		       85 2c		      STA	CXCLR	;reset the collision detection for next frame
    295  f132
    296  f132				   SkipUpdateLogic
    297  f132		       a9 81		      LDA	#SCORE_BACKGROUND_COLOR
    298  f134		       85 09		      STA	COLUBK
    299  f136		       a9 0a		      LDA	#SCORE_FONT_COLOR
    300  f138		       85 08		      STA	COLUPF
    301  f13a		       20 bc f2 	      JSR	ClearPF
    302  f13d							;LDA #0 ;Clear play field sets 0 for you
    303  f13d		       85 0a		      STA	CTRLPF
    304  f13f							;Temporary code
    305  f13f		       a2 00		      LDX	#0
    306  f141		       ad 00 fe 	      LDA	AesTable
    307  f144
    308  f144							; After here we are going to update the screen, No more heavy code
    309  f144				   WaitForVblankEnd
    310  f144		       ad 84 02 	      LDA	INTIM
    311  f147		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    312  f149		       85 02		      STA	WSYNC
    313  f14b		       a9 1a		      LDA	#<N1
    314  f14d		       85 d0		      STA	ScoreD0L
    315  f14f		       a9 ff		      LDA	#>N1
    316  f151		       85 d1		      STA	ScoreD0H
    317  f153
    318  f153		       a9 00		      LDA	#0	;2
    319  f155		       85 0d		      STA	PF0	;3
    320  f157		       85 0e		      STA	PF1	;3
    321  f159		       85 0f		      STA	PF2	;3	
    322  f15b
    323  f15b		       a9 01		      LDA	#1
    324  f15d		       85 01		      STA	VBLANK
    325  f15f
    326  f15f		       85 02		      STA	WSYNC
    327  f161		       a9 e5		      LDA	#%11100101
    328  f163		       85 0e		      STA	PF1
    329  f165		       85 02		      STA	WSYNC
    330  f167
    331  f167		       85 02		      STA	WSYNC
    332  f169		       a9 a5		      LDA	#%10100101
    333  f16b		       85 0e		      STA	PF1
    334  f16d
    335  f16d		       85 02		      STA	WSYNC
    336  f16f		       85 02		      STA	WSYNC
    337  f171		       a9 e2		      LDA	#%11100010
    338  f173		       85 0e		      STA	PF1
    339  f175
    340  f175		       85 02		      STA	WSYNC
    341  f177		       85 02		      STA	WSYNC
    342  f179		       a9 a5		      LDA	#%10100101
    343  f17b		       85 0e		      STA	PF1
    344  f17d
    345  f17d		       85 02		      STA	WSYNC
    346  f17f		       85 02		      STA	WSYNC
    347  f181		       a9 a5		      LDA	#%10100101
    348  f183		       85 0e		      STA	PF1
    349  f185
    350  f185		       85 02		      STA	WSYNC
    351  f187		       85 02		      STA	WSYNC
    352  f189		       a9 01		      LDA	#%00000001
    353  f18b		       85 0a		      STA	CTRLPF
    354  f18d
    355  f18d							;19 cycles worse case before the VSync 
    356  f18d
    357  f18d		       20 bc f2 	      JSR	ClearPF	;30
    358  f190							;Traffic colour
    359  f190		       a9 34		      LDA	#TRAFFIC_COLOR
    360  f192		       85 08		      STA	COLUPF
    361  f194
    362  f194		       a0 3b		      LDY	#SCREEN_SIZE - 5	;2 #63 ; (Score)
    363  f196
    364  f196		       a9 00		      LDA	#BACKGROUND_COLOR	;2 Make it in the very end, so we have one mor nice blue line
    365  f198		       85 09		      STA	COLUBK	;3
    366  f19a
    367  f19a							;main scanline loop...
    368  f19a				   ScanLoop
    369  f19a		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    370  f19c
    371  f19c							;Start of next line!			
    372  f19c				   DrawCache		;24 Is the last line going to the top of the next frame?
    373  f19c
    374  f19c		       a5 82		      LDA	PF0Cache	;3
    375  f19e		       85 0d		      STA	PF0	;3
    376  f1a0
    377  f1a0		       a5 81		      LDA	GRP0Cache	;3 ;buffer was set during last scanline
    378  f1a2		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    379  f1a4
    380  f1a4		       a5 83		      LDA	PF1Cache	;3
    381  f1a6		       85 0e		      STA	PF1	;3
    382  f1a8
    383  f1a8		       a5 84		      LDA	PF2Cache	;3
    384  f1aa		       85 0f		      STA	PF2	;3
    385  f1ac
    386  f1ac				   DrawTraffic0 		; 16 max, 14 min, traffic 0 is the border
    387  f1ac		       98		      TYA		;2
    388  f1ad		       18		      CLC		;2
    389  f1ae		       65 91		      ADC	TrafficOffset0 + 1	; 3
    390  f1b0		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    391  f1b2		       f0 05		      BEQ	EraseTraffic0	; 2
    392  f1b4		       a9 70		      LDA	#%01110000	; 2
    393  f1b6		       4c bb f1 	      JMP	StoreTraffic0	;3
    394  f1b9				   EraseTraffic0
    395  f1b9		       a9 00		      LDA	#0	; 2
    396  f1bb				   StoreTraffic0
    397  f1bb		       85 82		      STA	PF0Cache	;3
    398  f1bd				   SkipDrawTraffic0
    399  f1bd
    400  f1bd				   BeginDrawCar0Block		;20 is the max, since if draw, does not check active
    401  f1bd		       a6 80		      LDX	Car0Line	;3 check the visible player line...
    402  f1bf		       f0 0a		      BEQ	FinishDrawCar0	;2	skip the drawing if its zero...
    403  f1c1				   DrawCar0
    404  f1c1		       bd ff fe 	      LDA	CarSprite-1,X	;4 (no page cross) otherwise, load the correct line from CarSprite
    405  f1c4							;section below... it's off by 1 though, since at zero
    406  f1c4							;we stop drawing
    407  f1c4		       85 81		      STA	GRP0Cache	;3	;put that line as player graphic for the next line
    408  f1c6		       c6 80		      DEC	Car0Line	;5	and decrement the line count
    409  f1c8							;STA WSYNC
    410  f1c8		       4c d3 f1 	      JMP	SkipActivateCar0	;3 save some cpu time
    411  f1cb				   FinishDrawCar0
    412  f1cb
    413  f1cb				   CheckActivateCar0		;9 max
    414  f1cb		       c0 0a		      CPY	#CAR_0_Y	;2
    415  f1cd		       d0 04		      BNE	SkipActivateCar0	;2
    416  f1cf		       a9 07		      LDA	#CAR_SIZE	;2
    417  f1d1		       85 80		      STA	Car0Line	;3
    418  f1d3							;STA WSYNC
    419  f1d3				   SkipActivateCar0		;EndDrawCar0Block
    420  f1d3
    421  f1d3							;STA WSYNC ; 3 71 max
    422  f1d3
    423  f1d3		       98		      TYA		;2
    424  f1d4		       45 86		      EOR	FrameCount0	;3
    425  f1d6		       29 01		      AND	#%00000001	;2
    426  f1d8		       f0 5d		      BEQ	DrawTraffic4	;2,4
    427  f1da							;NOP
    428  f1da							; LDA #TRAFFIC_COLOR ;2
    429  f1da							; STA COLUPF ;3
    430  f1da
    431  f1da							;Will set the initial value for PF1Cache
    432  f1da				   DrawTraffic1 		; 
    433  f1da		       98		      TYA		; 2
    434  f1db		       18		      CLC		; 2 
    435  f1dc		       65 95		      ADC	TrafficOffset1 + 1	;3
    436  f1de		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    437  f1e0		       b0 05		      BCS	EorOffsetWithCarry	; 4 max if branch max, 2 otherwise
    438  f1e2		       45 96		      EOR	TrafficOffset1 + 2	; 2
    439  f1e4		       4c e9 f1 	      JMP	AfterEorOffsetWithCarry	; 3
    440  f1e7				   EorOffsetWithCarry
    441  f1e7		       45 97		      EOR	TrafficOffset1 + 3	; 3
    442  f1e9				   AfterEorOffsetWithCarry		;18
    443  f1e9		       aa		      TAX		;2
    444  f1ea		       bd 00 fe 	      LDA	AesTable,X	; 4
    445  f1ed		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    446  f1ef		       b0 05		      BCS	EraseTraffic1	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    447  f1f1		       a9 c0		      LDA	#%11000000	;2
    448  f1f3		       4c f8 f1 	      JMP	StoreTraffic1	;3
    449  f1f6				   EraseTraffic1
    450  f1f6		       a9 00		      LDA	#0	;2
    451  f1f8				   StoreTraffic1
    452  f1f8		       85 83		      STA	PF1Cache	;3
    453  f1fa				   FinishDrawTraffic1
    454  f1fa							;36 worse, 35 best
    455  f1fa
    456  f1fa				   DrawTraffic2 		;
    457  f1fa		       98		      TYA		; 2
    458  f1fb		       18		      CLC		; 2 
    459  f1fc		       65 99		      ADC	TrafficOffset2 + 1	;3
    460  f1fe		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    461  f200		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    462  f202		       45 9a		      EOR	TrafficOffset2 + 2	; 2
    463  f204		       4c 09 f2 	      JMP	AfterEorOffsetWithCarry2	; 3
    464  f207				   EorOffsetWithCarry2
    465  f207		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    466  f209				   AfterEorOffsetWithCarry2		;18
    467  f209		       aa		      TAX		;2
    468  f20a		       bd 00 fe 	      LDA	AesTable,X	; 4
    469  f20d		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    470  f20f		       b0 06		      BCS	FinishDrawTraffic2	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    471  f211		       a5 83		      LDA	PF1Cache	;3
    472  f213		       09 18		      ORA	#%00011000	;2
    473  f215		       85 83		      STA	PF1Cache	;3
    474  f217				   FinishDrawTraffic2
    475  f217							;36 cyles worse case!
    476  f217
    477  f217							;STA WSYNC ;65 / 137
    478  f217
    479  f217				   DrawTraffic3 		; PF2 is shared with odd and even lines, needs specific logic to erase
    480  f217		       98		      TYA		; 2
    481  f218		       18		      CLC		; 2 
    482  f219		       65 9d		      ADC	TrafficOffset3 + 1	;3
    483  f21b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    484  f21d		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    485  f21f		       45 9e		      EOR	TrafficOffset3 + 2	; 2
    486  f221		       4c 26 f2 	      JMP	AfterEorOffsetWithCarry3	; 3
    487  f224				   EorOffsetWithCarry3
    488  f224		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    489  f226				   AfterEorOffsetWithCarry3		; 18
    490  f226		       aa		      TAX		;2
    491  f227		       bd 00 fe 	      LDA	AesTable,X	; 4
    492  f22a		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    493  f22c		       b0 06		      BCS	FinishDrawTraffic3	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    494  f22e		       a5 83		      LDA	PF1Cache	;3
    495  f230		       09 03		      ORA	#%00000011	;2
    496  f232		       85 83		      STA	PF1Cache	;3
    497  f234				   FinishDrawTraffic3
    498  f234							;36 cyles worse case!
    499  f234
    500  f234		       4c 91 f2 	      JMP	WhileScanLoop	; 3
    501  f237
    502  f237				   DrawTraffic4 		;
    503  f237		       98		      TYA		; 2
    504  f238		       18		      CLC		; 2 
    505  f239		       65 a1		      ADC	TrafficOffset4 + 1	;3
    506  f23b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    507  f23d		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    508  f23f		       45 a2		      EOR	TrafficOffset4 + 2	; 2
    509  f241		       4c 46 f2 	      JMP	AfterEorOffsetWithCarry4	; 3
    510  f244				   EorOffsetWithCarry4
    511  f244		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    512  f246				   AfterEorOffsetWithCarry4		;18
    513  f246		       aa		      TAX		;2
    514  f247		       bd 00 fe 	      LDA	AesTable,X	; 4
    515  f24a		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    516  f24c		       b0 05		      BCS	EraseTraffic4	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    517  f24e		       a9 06		      LDA	#%00000110	;2
    518  f250		       4c 55 f2 	      JMP	StoreTraffic4	;3
    519  f253				   EraseTraffic4
    520  f253		       a9 00		      LDA	#0	;2
    521  f255				   StoreTraffic4
    522  f255		       85 84		      STA	PF2Cache	;3
    523  f257				   FinishDrawTraffic4
    524  f257							;36 max
    525  f257
    526  f257
    527  f257							;SLEEP 80
    528  f257				   DrawTraffic5 		;
    529  f257		       98		      TYA		; 2
    530  f258		       18		      CLC		; 2 
    531  f259		       65 a5		      ADC	TrafficOffset5 + 1	;3
    532  f25b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    533  f25d		       b0 05		      BCS	EorOffsetWithCarry5	; 4 max if branch max, 2 otherwise
    534  f25f		       45 a6		      EOR	TrafficOffset5 + 2	; 2
    535  f261		       4c 66 f2 	      JMP	AfterEorOffsetWithCarry5	; 3
    536  f264				   EorOffsetWithCarry5
    537  f264		       45 a7		      EOR	TrafficOffset5 + 3	; 3
    538  f266				   AfterEorOffsetWithCarry5		;18
    539  f266		       aa		      TAX		;2
    540  f267		       bd 00 fe 	      LDA	AesTable,X	; 4
    541  f26a		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    542  f26c		       b0 06		      BCS	FinishDrawTraffic5	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    543  f26e		       a5 84		      LDA	PF2Cache	;3
    544  f270		       09 30		      ORA	#%00110000	;2
    545  f272		       85 84		      STA	PF2Cache	;3	
    546  f274				   FinishDrawTraffic5
    547  f274
    548  f274				   DrawTraffic6 		;
    549  f274		       98		      TYA		; 2
    550  f275		       18		      CLC		; 2 
    551  f276		       65 a9		      ADC	TrafficOffset6 + 1	;3
    552  f278		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    553  f27a		       b0 05		      BCS	EorOffsetWithCarry6	; 4 max if branch max, 2 otherwise
    554  f27c		       45 aa		      EOR	TrafficOffset6 + 2	; 2
    555  f27e		       4c 83 f2 	      JMP	AfterEorOffsetWithCarry6	; 3
    556  f281				   EorOffsetWithCarry6
    557  f281		       45 ab		      EOR	TrafficOffset6 + 3	; 3
    558  f283				   AfterEorOffsetWithCarry6		;18
    559  f283		       aa		      TAX		;2
    560  f284		       bd 00 fe 	      LDA	AesTable,X	; 4
    561  f287		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    562  f289		       b0 06		      BCS	FinishDrawTraffic6	; 4 Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    563  f28b		       a5 84		      LDA	PF2Cache	;3
    564  f28d		       09 80		      ORA	#%10000000	;2
    565  f28f		       85 84		      STA	PF2Cache	;3	
    566  f291				   FinishDrawTraffic6
    567  f291
    568  f291							;36 max	
    569  f291							;SLEEP 36
    570  f291
    571  f291
    572  f291							;STA WSYNC ;65 / 202 of 222
    573  f291
    574  f291				   WhileScanLoop
    575  f291		       88		      DEY		;2
    576  f292		       30 03		      BMI	FinishScanLoop	;2 or 3 ;two big Breach	
    577  f294		       4c 9a f1 	      JMP	ScanLoop	;3
    578  f297				   FinishScanLoop		; 7 209 of 222
    579  f297
    580  f297		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    581  f299		       a5 82		      LDA	PF0Cache	;3
    582  f29b		       85 0d		      STA	PF0	;3
    583  f29d
    584  f29d		       a5 81		      LDA	GRP0Cache	;3 
    585  f29f		       85 1b		      STA	GRP0	;3   
    586  f2a1
    587  f2a1		       a5 83		      LDA	PF1Cache	;3
    588  f2a3		       85 0e		      STA	PF1	;3
    589  f2a5
    590  f2a5		       a5 84		      LDA	PF2Cache	;3
    591  f2a7		       85 0f		      STA	PF2	;3
    592  f2a9
    593  f2a9							;42 cycles to use here
    594  f2a9
    595  f2a9				   PrepareOverscan
    596  f2a9		       a9 02		      LDA	#2
    597  f2ab		       85 02		      STA	WSYNC
    598  f2ad		       85 01		      STA	VBLANK
    599  f2af
    600  f2af		       a9 24		      LDA	#36	; one more line before overscan
    601  f2b1		       8d 96 02 	      STA	TIM64T
    602  f2b4							;LDA #0
    603  f2b4							;STA VSYNC Is it needed? Why is this here, I don't remember		
    604  f2b4
    605  f2b4							;Do more logic
    606  f2b4
    607  f2b4				   OverScanWait
    608  f2b4		       ad 84 02 	      LDA	INTIM
    609  f2b7		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    610  f2b9		       4c 31 f0 	      JMP	MainLoop
    611  f2bc
    612  f2bc				   ClearPF		; 26
    613  f2bc		       a9 00		      LDA	#0	;2
    614  f2be		       85 0d		      STA	PF0	;3
    615  f2c0		       85 0e		      STA	PF1	;3
    616  f2c2		       85 0f		      STA	PF2	;3	
    617  f2c4		       85 82		      STA	PF0Cache	;3
    618  f2c6		       85 83		      STA	PF1Cache	;3
    619  f2c8		       85 84		      STA	PF2Cache	;3 
    620  f2ca		       60		      RTS		;6
    621  f2cb
    622  fe00					      org	$FE00
    623  fe00				   AesTable
    624  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    625  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    626  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    627  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    628  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    629  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    630  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    631  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    632  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    633  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    634  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    635  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    636  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    637  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    638  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    639  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    640  ff00
    641  ff00							; From FF00 to FFFB (122 bytes) to use here
    642  ff00
    643  ff00				   CarSprite		; Upside down
    644  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    645  ff01		       ff		      .byte.b	#%11111111
    646  ff02		       24		      .byte.b	#%00100100
    647  ff03		       bd		      .byte.b	#%10111101
    648  ff04		       3c		      .byte.b	#%00111100
    649  ff05		       bd		      .byte.b	#%10111101
    650  ff06		       3c		      .byte.b	#%00111100
    651  ff07
    652  ff07
    653  ff07				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    654  ff07		       00		      .byte.b	#$00	;  Trafic0 L
    655  ff08		       00		      .byte.b	#$00	;  Trafic0 H
    656  ff09		       0a		      .byte.b	#$0A	;  Trafic1 L
    657  ff0a		       01		      .byte.b	#$01	;  Trafic1 H
    658  ff0b		       e6		      .byte.b	#$E6	;  Trafic2 L
    659  ff0c		       00		      .byte.b	#$00	;  Trafic2 H
    660  ff0d		       c2		      .byte.b	#$C2	;  Trafic3 L
    661  ff0e		       00		      .byte.b	#$00	;  Trafic3 H
    662  ff0f		       9e		      .byte.b	#$9E	;  Trafic4 L
    663  ff10		       00		      .byte.b	#$00	;  Trafic4 H
    664  ff11		       7a		      .byte.b	#$7A	;  Trafic5 L
    665  ff12		       00		      .byte.b	#$00	;  Trafic5 H
    666  ff13		       56		      .byte.b	#$56	;  Trafic6 L
    667  ff14		       00		      .byte.b	#$00	;  Trafic6 H
    668  ff15
    669  ff15				   Font 		;5 x 3, upside down 
    670  ff15				   Space
    671  ff15		       00		      .byte.b	%0	;
    672  ff16		       00		      .byte.b	#0	;
    673  ff17		       00		      .byte.b	#0	;
    674  ff18		       00		      .byte.b	#0	;
    675  ff19		       00		      .byte.b	#0	;
    676  ff1a				   N1
    677  ff1a		       e0		      .byte.b	#%11100000	;
    678  ff1b		       40		      .byte.b	#%01000000	; 
    679  ff1c		       40		      .byte.b	#%01000000	; 
    680  ff1d		       40		      .byte.b	#%01000000	; 
    681  ff1e		       c0		      .byte.b	#%11000000	;
    682  ff1f				   N2
    683  ff1f		       e0		      .byte.b	#%11100000	;
    684  ff20		       20		      .byte.b	#%00100000	; 
    685  ff21		       e0		      .byte.b	#%11100000	; 
    686  ff22		       80		      .byte.b	#%10000000	; 
    687  ff23		       e0		      .byte.b	#%11100000	;
    688  ff24
    689  ff24
    690  fffc					      org	$FFFC
    691  fffc		       00 f0		      .word.w	Start
    692  fffe		       00 f0		      .word.w	Start
