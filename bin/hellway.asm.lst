------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     25  f000
     26  f000		       00 00	   CAR_ID_DEFAULT =	0
     27  f000		       00 01	   CAR_ID_HATCHBACK =	1
     28  f000		       00 02	   CAR_ID_SEDAN =	2
     29  f000		       00 03	   CAR_ID_DRAGSTER =	3
     30  f000
     31  f000		       00 0a	   BREAK_SPEED =	10
     32  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     33  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     34  f000
     35  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     36  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     37  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     38  f000
     39  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     40  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     41  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     42  f000
     43  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     44  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     45  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     46  f000
     47  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     48  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     49  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     50  f000
     51  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     52  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     53  f000
     54  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     55  f000
     56  f000		       00 96	   PLAYER1_COLOR =	$96
     57  f000
     58  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     59  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     62  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     63  f000
     64  f000		       00 35	   PLAYER_0_X_START =	$35	;
     65  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     66  f000
     67  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     68  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     69  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     70  f000		       00 03	   TIMEOVER_BREAK_INTERVAL =	%00000011	; Every 4 frames
     71  f000
     72  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     73  f000
     74  f000		       00 00	   BLACK      =	$00	;
     75  f000
     76  f000		       00 10	   MAX_GAME_MODE =	16
     77  f000
     78  f000		       00 08	   PARALLAX_SIZE =	8
     79  f000
     80  f000		       00 05	   HALF_TEXT_SIZE =	5
     81  f000
     82  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     83  f000
     84  f000		       00 49	   VERSION_COLOR =	$49
     85  f000
     86  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     87  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     88  f000		       00 00	   QR_CODE_COLOR =	$00
     89  f000		       00 19	   QR_CODE_SIZE =	25
     90  f000
     91  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     92  f000
     93  f000		       00 80	   GRP0Cache  =	$80
     94  f000		       00 81	   PF0Cache   =	$81
     95  f000		       00 82	   PF1Cache   =	$82
     96  f000		       00 83	   PF2Cache   =	$83
     97  f000		       00 84	   GRP1Cache  =	$84
     98  f000		       00 85	   ENABLCache =	$85
     99  f000		       00 86	   ENAM0Cache =	$86
    100  f000		       00 87	   ENAM1Cache =	$87
    101  f000
    102  f000		       00 88	   ParallaxMode =	$88
    103  f000
    104  f000		       00 8c	   FrameCount0 =	$8C	;
    105  f000		       00 8d	   FrameCount1 =	$8D	;
    106  f000
    107  f000		       00 8e	   Player0SpeedL =	$8E
    108  f000		       00 8f	   Player0SpeedH =	$8F
    109  f000
    110  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    111  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    112  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    113  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    114  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    115  f000
    116  f000		       00 a4	   CheckpointBcd0 =	$A4
    117  f000		       00 a5	   CheckpointBcd1 =	$A5
    118  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    119  f000		       00 a7	   CarSpritePointerL =	$A7
    120  f000		       00 a8	   CarSpritePointerH =	$A8
    121  f000		       00 a9	   CurrentCarId =	$A9
    122  f000
    123  f000							;Temporary variables, multiple uses
    124  f000		       00 b0	   Tmp0       =	$B0
    125  f000		       00 b1	   Tmp1       =	$B1
    126  f000		       00 b2	   Tmp2       =	$B2
    127  f000		       00 b3	   Tmp3       =	$B3
    128  f000
    129  f000		       00 b4	   ScoreBcd0  =	$B4
    130  f000		       00 b5	   ScoreBcd1  =	$B5
    131  f000		       00 b6	   ScoreBcd2  =	$B6
    132  f000		       00 b7	   ScoreBcd3  =	$B7
    133  f000
    134  f000		       00 b8	   CollisionCounter =	$B8
    135  f000		       00 b9	   Player0X   =	$B9
    136  f000		       00 ba	   CountdownTimer =	$BA
    137  f000		       00 bb	   Traffic0Msb =	$BB
    138  f000		       00 bc	   SwitchDebounceCounter =	$BC
    139  f000
    140  f000		       00 bd	   TimeBcd0   =	$BD
    141  f000		       00 be	   TimeBcd1   =	$BE
    142  f000		       00 bf	   TimeBcd2   =	$BF
    143  f000
    144  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    145  f000		       00 c1	   TrafficChance =	$C1
    146  f000		       00 c2	   CheckpointTime =	$C2
    147  f000		       00 c3	   TrafficColor =	$C3
    148  f000		       00 c4	   CurrentDifficulty =	$C4
    149  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    150  f000
    151  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    152  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    153  f000
    154  f000		       00 ca	   BorderType =	$CA
    155  f000
    156  f000		       00 cb	   HitCountBcd0 =	$CB
    157  f000		       00 cc	   HitCountBcd1 =	$CC
    158  f000
    159  f000		       00 cd	   GlideTimeBcd0 =	$CD
    160  f000		       00 ce	   GlideTimeBcd1 =	$CE
    161  f000
    162  f000		       00 cf	   OneSecondConter =	$CF
    163  f000
    164  f000		       00 d0	   ScoreD0    =	$D0
    165  f000		       00 d1	   ScoreD1    =	$D1
    166  f000		       00 d2	   ScoreD2    =	$D2
    167  f000		       00 d3	   ScoreD3    =	$D3
    168  f000		       00 d4	   ScoreD4    =	$D4
    169  f000		       00 d5	   ScoreFontColor =	$D5
    170  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    171  f000		       00 d7	   NextCheckpoint =	$D7
    172  f000
    173  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    174  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    175  f000
    176  f000
    177  f000							;generic start up stuff, put zero in all...
    178  f000				   BeforeStart		;All variables that are kept on game reset or select
    179  f000		       a0 00		      LDY	#0
    180  f002		       84 bc		      STY	SwitchDebounceCounter
    181  f004		       84 c4		      STY	CurrentDifficulty
    182  f006		       84 c0		      STY	GameStatus
    183  f008		       a0 10		      LDY	#16
    184  f00a		       84 c5		      STY	GameMode
    185  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    186  f00e		       84 88		      STY	ParallaxMode
    187  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    188  f012		       84 a9		      STY	CurrentCarId
    189  f014
    190  f014				   Start
    191  f014		       78		      SEI
    192  f015		       d8		      CLD
    193  f016		       a2 ff		      LDX	#$FF
    194  f018		       9a		      TXS
    195  f019		       a9 00		      LDA	#0
    196  f01b				   ClearMem
    197  f01b		       e0 bc		      CPX	#SwitchDebounceCounter
    198  f01d		       f0 16		      BEQ	SkipClean
    199  f01f		       e0 c5		      CPX	#GameMode
    200  f021		       f0 12		      BEQ	SkipClean
    201  f023		       e0 88		      CPX	#ParallaxMode
    202  f025		       f0 0e		      BEQ	SkipClean
    203  f027		       e0 a9		      CPX	#CurrentCarId
    204  f029		       f0 0a		      BEQ	SkipClean
    205  f02b		       e0 c4		      CPX	#CurrentDifficulty
    206  f02d		       f0 06		      BEQ	SkipClean
    207  f02f		       e0 c0		      CPX	#GameStatus
    208  f031		       f0 02		      BEQ	SkipClean
    209  f033		       95 00		      STA	0,X
    210  f035				   SkipClean
    211  f035		       ca		      DEX
    212  f036		       d0 e3		      BNE	ClearMem
    213  f038
    214  f038							;Setting some variables...
    215  f038
    216  f038				   SettingTrafficOffsets		; Time sensitive with player H position
    217  f038		       85 02		      STA	WSYNC	;We will set player position
    218  f03a		       20 92 f7 	      JSR	DefaultOffsets
    219  f03d
    220  f03d		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    221  f040		       85 8e		      STA	Player0SpeedL
    222  f042
      0  f042					      SLEEP	11	;18
      1  f042				   .CYCLES    SET	11
      2  f042
      3  f042				  -	      IF	.CYCLES < 2
      4  f042				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f042				  -	      ERR
      6  f042					      ENDIF
      7  f042
      8  f042					      IF	.CYCLES & 1
      9  f042				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f042				  -	      nop	0
     11  f042					      ELSE
     12  f042		       24 00		      bit	VSYNC
     13  f044					      ENDIF
     14  f044				   .CYCLES    SET	.CYCLES - 3
     15  f044					      ENDIF
     16  f044
     17  f044					      REPEAT	.CYCLES / 2
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     19  f048					      REPEND
    224  f048		       85 10		      STA	RESP0
    225  f04a
    226  f04a		       a2 00		      LDX	#0
    227  f04c		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    228  f04f		       85 a6		      STA	StartSWCHB	; For game over
    229  f051		       29 c0		      AND	#%11000000
    230  f053		       f0 0b		      BEQ	CallConfigureDifficulty
    231  f055		       e8		      INX
    232  f056		       c9 80		      CMP	#%10000000
    233  f058		       f0 06		      BEQ	CallConfigureDifficulty
    234  f05a		       e8		      INX
    235  f05b		       c9 40		      CMP	#%01000000
    236  f05d		       f0 01		      BEQ	CallConfigureDifficulty
    237  f05f		       e8		      INX
    238  f060
    239  f060				   CallConfigureDifficulty
    240  f060		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    241  f062		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    242  f064		       a5 c0		      LDA	GameStatus
    243  f066		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    244  f068				   NextCar
    245  f068		       a4 a9		      LDY	CurrentCarId
    246  f06a		       c8		      INY
    247  f06b		       98		      TYA
    248  f06c		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    249  f06e		       85 a9		      STA	CurrentCarId
    250  f070				   StoreCurrentDifficulty
    251  f070		       86 c4		      STX	CurrentDifficulty
    252  f072		       20 4a f7 	      JSR	ConfigureDifficulty
    253  f075
    254  f075				   ConfigureCarSprite
    255  f075		       a4 a9		      LDY	CurrentCarId
    256  f077		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    257  f07a		       85 a7		      STA	CarSpritePointerL
    258  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    259  f07f		       85 a8		      STA	CarSpritePointerH
    260  f081
    261  f081				   SetGameNotRunning
    262  f081		       a9 00		      LDA	#0
    263  f083		       85 c0		      STA	GameStatus
    264  f085
    265  f085				   ConfigureOneSecondTimer
    266  f085		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    267  f087		       85 cf		      STA	OneSecondConter
    268  f089
    269  f089				   HPositioning
    270  f089		       85 02		      STA	WSYNC
    271  f08b
    272  f08b		       a9 30		      LDA	#%00110000	;2 Missile Size
    273  f08d		       85 04		      STA	NUSIZ0	;3
    274  f08f		       85 05		      STA	NUSIZ1	;3
    275  f091
    276  f091		       a9 35		      LDA	#PLAYER_0_X_START	;2
    277  f093		       85 b9		      STA	Player0X	;3
    278  f095
    279  f095		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    280  f097		       85 ba		      STA	CountdownTimer	;3
    281  f099
    282  f099		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    283  f09b		       85 d7		      STA	NextCheckpoint
    284  f09d
    285  f09d		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f09f					      SLEEP	11	;
      1  f09f				   .CYCLES    SET	11
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f					      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f					      ELSE
     12  f09f		       24 00		      bit	VSYNC
     13  f0a1					      ENDIF
     14  f0a1				   .CYCLES    SET	.CYCLES - 3
     15  f0a1					      ENDIF
     16  f0a1
     17  f0a1					      REPEAT	.CYCLES / 2
     18  f0a1		       ea		      nop
     17  f0a1					      REPEND
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     17  f0a3					      REPEND
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    287  f0a5		       85 11		      STA	RESP1
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    289  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2	;
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    291  f0ab		       85 12		      STA	RESM0
      0  f0ad					      SLEEP	2
      1  f0ad				   .CYCLES    SET	2
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad				  -	      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad				  -	      ELSE
     12  f0ad				  -	      bit	VSYNC
     13  f0ad				  -	      ENDIF
     14  f0ad				  -.CYCLES    SET	.CYCLES - 3
     15  f0ad					      ENDIF
     16  f0ad
     17  f0ad					      REPEAT	.CYCLES / 2
     18  f0ad		       ea		      nop
     19  f0ae					      REPEND
    293  f0ae		       85 13		      STA	RESM1
    294  f0b0
    295  f0b0		       a9 f0		      LDA	#$F0
    296  f0b2		       85 24		      STA	HMBL
    297  f0b4		       85 22		      STA	HMM0
    298  f0b6		       85 23		      STA	HMM1
    299  f0b8		       85 02		      STA	WSYNC
    300  f0ba		       85 2a		      STA	HMOVE
    301  f0bc		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    302  f0be		       85 2b		      STA	HMCLR
    303  f0c0
    304  f0c0							;SLEEP 24
    305  f0c0							;STA HMCLR
    306  f0c0
    307  f0c0							;VSYNC time
    308  f0c0				   MainLoop
    309  f0c0		       a9 02		      LDA	#2
    310  f0c2		       85 00		      STA	VSYNC
    311  f0c4		       85 02		      STA	WSYNC
    312  f0c6		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    313  f0c8		       85 2a		      STA	HMOVE	;2
    314  f0ca		       85 02		      STA	WSYNC	;3
    315  f0cc		       a9 29		      LDA	#41	;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    316  f0ce		       8d 96 02 	      STA	TIM64T	;3	
    317  f0d1		       a9 00		      LDA	#0	;2
    318  f0d3		       85 00		      STA	VSYNC	;3	
    319  f0d5
    320  f0d5							;Read Fire Button before, will make it start the game for now.
    321  f0d5				   StartGame
    322  f0d5		       a5 0c		      LDA	INPT4	;3
    323  f0d7		       30 2e		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    324  f0d9		       a5 c0		      LDA	GameStatus	;3
    325  f0db		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
    326  f0dd		       d0 28		      BNE	SkipGameStart
    327  f0df		       a5 c5		      LDA	GameMode
    328  f0e1		       c9 10		      CMP	#MAX_GAME_MODE
    329  f0e3		       d0 0b		      BNE	SetGameRunning
    330  f0e5		       a9 00		      LDA	#0
    331  f0e7		       85 c5		      STA	GameMode
    332  f0e9		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    333  f0eb		       85 bc		      STA	SwitchDebounceCounter
    334  f0ed		       4c 07 f1 	      JMP	SkipGameStart
    335  f0f0				   SetGameRunning
    336  f0f0		       e6 c0		      INC	GameStatus
    337  f0f2		       a9 00		      LDA	#0	;
    338  f0f4		       85 8c		      STA	FrameCount0
    339  f0f6		       85 8d		      STA	FrameCount1
    340  f0f8		       a9 0a		      LDA	#10
    341  f0fa		       85 19		      STA	AUDV0
    342  f0fc		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    343  f0fe		       85 d5		      STA	ScoreFontColor
    344  f100		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    345  f102		       85 d6		      STA	ScoreFontColorHoldChange
    346  f104		       4c 83 f1 	      JMP	SkipIncFC1	; Make the worse case stable
    347  f107				   SkipGameStart
    348  f107
    349  f107				   RandomizeGame
    350  f107		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    351  f109		       d0 30		      BNE	EndRandomizeGame
    352  f10b		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    353  f10d		       29 02		      AND	#%00000010
    354  f10f		       f0 27		      BEQ	DeterministicGame
    355  f111		       a6 96		      LDX	TrafficOffset1 + 2
    356  f113		       bd 00 fe 	      LDA	AesTable,X
    357  f116		       45 8c		      EOR	FrameCount0
    358  f118		       85 96		      STA	TrafficOffset1 + 2
    359  f11a		       a6 9a		      LDX	TrafficOffset2 + 2
    360  f11c		       bd 00 fe 	      LDA	AesTable,X
    361  f11f		       45 8c		      EOR	FrameCount0
    362  f121		       85 9a		      STA	TrafficOffset2 + 2
    363  f123		       a6 9e		      LDX	TrafficOffset3 + 2
    364  f125		       bd 00 fe 	      LDA	AesTable,X
    365  f128		       45 8c		      EOR	FrameCount0
    366  f12a		       85 9e		      STA	TrafficOffset3 + 2
    367  f12c		       a6 a2		      LDX	TrafficOffset4 + 2
    368  f12e		       bd 00 fe 	      LDA	AesTable,X
    369  f131		       45 8c		      EOR	FrameCount0
    370  f133		       85 a2		      STA	TrafficOffset4 + 2
    371  f135		       4c 3b f1 	      JMP	EndRandomizeGame
    372  f138
    373  f138				   DeterministicGame
    374  f138		       20 92 f7 	      JSR	DefaultOffsets
    375  f13b
    376  f13b				   EndRandomizeGame
    377  f13b
    378  f13b				   ReadSwitches
    379  f13b		       a6 bc		      LDX	SwitchDebounceCounter
    380  f13d		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    381  f13f		       a9 01		      LDA	#%00000001
    382  f141		       2c 82 02 	      BIT	SWCHB
    383  f144		       d0 07		      BNE	SkipReset
    384  f146		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    385  f148		       85 bc		      STA	SwitchDebounceCounter
    386  f14a		       4c 14 f0 	      JMP	Start
    387  f14d				   SkipReset
    388  f14d
    389  f14d				   GameModeSelect
    390  f14d		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    391  f14f		       d0 27		      BNE	SkipGameSelect
    392  f151		       20 4a f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    393  f154				   ReadDpadParallax
    394  f154		       ad 80 02 	      LDA	SWCHA
    395  f157		       29 f0		      AND	#%11110000
    396  f159		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    397  f15b		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    398  f15d		       85 88		      STA	ParallaxMode
    399  f15f				   ContinueGameSelect
    400  f15f		       a9 02		      LDA	#%00000010
    401  f161		       2c 82 02 	      BIT	SWCHB
    402  f164		       d0 12		      BNE	SkipGameSelect
    403  f166		       a6 c5		      LDX	GameMode
    404  f168		       e0 10		      CPX	#MAX_GAME_MODE
    405  f16a		       f0 04		      BEQ	ResetGameMode
    406  f16c		       e8		      INX
    407  f16d		       4c 72 f1 	      JMP	StoreGameMode
    408  f170				   ResetGameMode
    409  f170		       a2 00		      LDX	#0
    410  f172				   StoreGameMode
    411  f172		       86 c5		      STX	GameMode
    412  f174		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    413  f176		       85 bc		      STA	SwitchDebounceCounter
    414  f178				   SkipGameSelect
    415  f178		       4c 7d f1 	      JMP	EndReadSwitches
    416  f17b				   DecrementSwitchDebounceCounter
    417  f17b		       c6 bc		      DEC	SwitchDebounceCounter
    418  f17d				   EndReadSwitches
    419  f17d
    420  f17d				   CountFrame
    421  f17d		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    422  f17f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    423  f181		       e6 8d		      INC	FrameCount1	; 5 Still not used
    424  f183				   SkipIncFC1
    425  f183
    426  f183				   CallDrawQrCode
    427  f183		       a5 c5		      LDA	GameMode
    428  f185		       c9 10		      CMP	#MAX_GAME_MODE
    429  f187		       d0 03		      BNE	TestIsGameRunning
    430  f189		       4c 44 fb 	      JMP	DrawQrCode
    431  f18c
    432  f18c							;Does not update the game if not running
    433  f18c				   TestIsGameRunning
    434  f18c		       a5 c0		      LDA	GameStatus	;3
    435  f18e		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    436  f190		       4c 6e f3 	      JMP	SkipUpdateLogic
    437  f193				   ContinueWithGameLogic
    438  f193
    439  f193
    440  f193				   EverySecond		; 64 frames to be more precise
    441  f193		       a9 3f		      LDA	#%00111111
    442  f195		       25 8c		      AND	FrameCount0
    443  f197		       d0 06		      BNE	SkipEverySecondAction
    444  f199		       c5 ba		      CMP	CountdownTimer
    445  f19b		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    446  f19d		       c6 ba		      DEC	CountdownTimer
    447  f19f				   SkipEverySecondAction
    448  f19f
    449  f19f
    450  f19f				   BreakOnTimeOver		; Uses LDX as the breaking speed
    451  f19f		       a2 00		      LDX	#0
    452  f1a1		       a5 ba		      LDA	CountdownTimer
    453  f1a3		       d0 08		      BNE	Break
    454  f1a5		       a5 8c		      LDA	FrameCount0
    455  f1a7		       29 03		      AND	#TIMEOVER_BREAK_INTERVAL
    456  f1a9		       d0 02		      BNE	Break
    457  f1ab		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    458  f1ad
    459  f1ad				   Break
    460  f1ad		       a9 20		      LDA	#%00100000	;Down in controller
    461  f1af		       2c 80 02 	      BIT	SWCHA
    462  f1b2		       d0 0b		      BNE	BreakNonZero
    463  f1b4		       a5 0c		      LDA	INPT4	;3
    464  f1b6		       10 05		      BPL	BreakWhileAccelerating
    465  f1b8		       a2 0a		      LDX	#BREAK_SPEED
    466  f1ba		       4c bf f1 	      JMP	BreakNonZero
    467  f1bd				   BreakWhileAccelerating		; Allow better control while breaking.
    468  f1bd		       a2 05		      LDX	#BREAK_SPEED / 2
    469  f1bf
    470  f1bf				   BreakNonZero
    471  f1bf		       e0 00		      CPX	#0
    472  f1c1		       f0 2b		      BEQ	SkipBreak
    473  f1c3		       86 b0		      STX	Tmp0
    474  f1c5
    475  f1c5				   DecreaseSpeed
    476  f1c5		       38		      SEC
    477  f1c6		       a5 8e		      LDA	Player0SpeedL
    478  f1c8		       e5 b0		      SBC	Tmp0
    479  f1ca		       85 8e		      STA	Player0SpeedL
    480  f1cc		       a5 8f		      LDA	Player0SpeedH
    481  f1ce		       e9 00		      SBC	#0
    482  f1d0		       85 8f		      STA	Player0SpeedH
    483  f1d2
    484  f1d2				   CheckMinSpeed
    485  f1d2		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    486  f1d4		       c9 00		      CMP	#CAR_MIN_SPEED_H
    487  f1d6		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    488  f1d8		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    489  f1da
    490  f1da				   CompareLBreakSpeed
    491  f1da		       a5 8e		      LDA	Player0SpeedL
    492  f1dc		       c9 00		      CMP	#CAR_MIN_SPEED_L
    493  f1de		       90 03		      BCC	ResetMinSpeed	; Less than memory
    494  f1e0		       4c eb f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    495  f1e3
    496  f1e3				   ResetMinSpeed
    497  f1e3		       a9 00		      LDA	#CAR_MIN_SPEED_H
    498  f1e5		       85 8f		      STA	Player0SpeedH
    499  f1e7		       a9 00		      LDA	#CAR_MIN_SPEED_L
    500  f1e9		       85 8e		      STA	Player0SpeedL
    501  f1eb
    502  f1eb				   SkipAccelerateIfBreaking
    503  f1eb		       4c 21 f2 	      JMP	SkipAccelerate
    504  f1ee				   SkipBreak
    505  f1ee
    506  f1ee				   Acelerates
    507  f1ee		       a5 ba		      LDA	CountdownTimer
    508  f1f0		       f0 2f		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    509  f1f2		       a5 0c		      LDA	INPT4	;3
    510  f1f4		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    511  f1f6		       a9 10		      LDA	#%00010000	;UP in controller
    512  f1f8		       2c 80 02 	      BIT	SWCHA
    513  f1fb		       d0 24		      BNE	SkipAccelerate
    514  f1fd
    515  f1fd				   IncreaseCarSpeed
    516  f1fd							;Adds speed
    517  f1fd		       18		      CLC
    518  f1fe		       a5 8e		      LDA	Player0SpeedL
    519  f200		       a4 a9		      LDY	CurrentCarId
    520  f202		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    521  f205		       85 8e		      STA	Player0SpeedL
    522  f207		       a5 8f		      LDA	Player0SpeedH
    523  f209		       69 00		      ADC	#0
    524  f20b		       85 8f		      STA	Player0SpeedH
    525  f20d
    526  f20d				   CheckIfAlreadyMaxSpeed
    527  f20d		       c9 02		      CMP	#CAR_MAX_SPEED_H
    528  f20f		       90 10		      BCC	SkipAccelerate	; less than my max speed
    529  f211		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    530  f213							;High bit is max, compare the low
    531  f213		       a5 8e		      LDA	Player0SpeedL
    532  f215		       c9 80		      CMP	#CAR_MAX_SPEED_L
    533  f217		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    534  f219							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    535  f219
    536  f219				   ResetToMaxSpeed		; Speed is more, or is already max
    537  f219		       a9 02		      LDA	#CAR_MAX_SPEED_H
    538  f21b		       85 8f		      STA	Player0SpeedH
    539  f21d		       a9 80		      LDA	#CAR_MAX_SPEED_L
    540  f21f		       85 8e		      STA	Player0SpeedL
    541  f221				   SkipAccelerate
    542  f221
    543  f221				   InitUpdateOffsets
    544  f221		       a2 00		      LDX	#0	; Memory Offset 24 bit
    545  f223		       a0 00		      LDY	#0	; Line Speeds 16 bits
    546  f225		       a5 91		      LDA	TrafficOffset0 + 1	;
    547  f227		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    548  f229		       a5 c5		      LDA	GameMode
    549  f22b		       29 04		      AND	#%00000100	; GameModes with high delta
    550  f22d		       f0 02		      BEQ	UpdateOffsets
    551  f22f		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    552  f231
    553  f231				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    554  f231		       38		      SEC
    555  f232		       a5 8e		      LDA	Player0SpeedL
    556  f234		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    557  f237		       85 b0		      STA	Tmp0
    558  f239		       c8		      INY
    559  f23a		       a5 8f		      LDA	Player0SpeedH
    560  f23c		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    561  f23f		       85 b1		      STA	Tmp1
    562  f241		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    563  f243		       e9 00		      SBC	#0
    564  f245		       85 b2		      STA	Tmp2
    565  f247
    566  f247				   AddsTheResult
    567  f247		       18		      CLC
    568  f248		       a5 b0		      LDA	Tmp0
    569  f24a		       75 90		      ADC	TrafficOffset0,X
    570  f24c		       95 90		      STA	TrafficOffset0,X
    571  f24e		       e8		      INX
    572  f24f		       a5 b1		      LDA	Tmp1
    573  f251		       75 90		      ADC	TrafficOffset0,X
    574  f253		       95 90		      STA	TrafficOffset0,X
    575  f255		       e8		      INX
    576  f256		       a5 b2		      LDA	Tmp2	; Carry
    577  f258		       75 90		      ADC	TrafficOffset0,X
    578  f25a		       95 90		      STA	TrafficOffset0,X
    579  f25c		       90 06		      BCC	CalculateOffsetCache
    580  f25e		       e0 02		      CPX	#2	;MSB offset 0
    581  f260		       d0 02		      BNE	CalculateOffsetCache
    582  f262		       e6 bb		      INC	Traffic0Msb
    583  f264
    584  f264				   CalculateOffsetCache
    585  f264		       e8		      INX
    586  f265		       38		      SEC
    587  f266		       69 00		      ADC	#0	;Increment by one
    588  f268		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    589  f26a
    590  f26a				   PrepareNextUpdateLoop
    591  f26a		       c8		      INY
    592  f26b		       e8		      INX
    593  f26c		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    594  f26e		       d0 c1		      BNE	UpdateOffsets
    595  f270
    596  f270				   BcdScore		; 48
    597  f270		       a5 91		      LDA	TrafficOffset0 + 1	;3
    598  f272		       45 b3		      EOR	Tmp3	;3
    599  f274		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    600  f276		       f0 1b		      BEQ	FinishBcdScore	;2
    601  f278
    602  f278				   ContinueBcdScore
    603  f278		       f8		      SED		;2
    604  f279		       18		      CLC		;2
    605  f27a		       a5 b4		      LDA	ScoreBcd0	;3
    606  f27c		       69 01		      ADC	#1	;2
    607  f27e		       85 b4		      STA	ScoreBcd0	;3
    608  f280		       a5 b5		      LDA	ScoreBcd1	;3
    609  f282		       69 00		      ADC	#0	;2
    610  f284		       85 b5		      STA	ScoreBcd1	;3
    611  f286		       a5 b6		      LDA	ScoreBcd2	;3
    612  f288		       69 00		      ADC	#0	;2
    613  f28a		       85 b6		      STA	ScoreBcd2	;3
    614  f28c		       a5 b7		      LDA	ScoreBcd3	;3
    615  f28e		       69 00		      ADC	#0	;2
    616  f290		       85 b7		      STA	ScoreBcd3	;3
    617  f292		       d8		      CLD		;2
    618  f293				   FinishBcdScore
    619  f293
    620  f293							;Until store the movemnt, LDX contains the value to be stored.
    621  f293				   TestCollision		;
    622  f293							; see if player0 colides with the rest
    623  f293		       a5 00		      LDA	CXM0P
    624  f295		       05 01		      ORA	CXM1P
    625  f297		       05 01		      ORA	CXM1P
    626  f299		       05 02		      ORA	CXP0FB
    627  f29b		       05 07		      ORA	CXPPMM
    628  f29d		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    629  f29f		       f0 38		      BEQ	NoCollision	;skip if not hitting...
    630  f2a1		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    631  f2a3		       d0 34		      BNE	NoCollision
    632  f2a5		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    633  f2a7		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    634  f2a9		       f0 2e		      BEQ	NoCollision
    635  f2ab		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    636  f2ad		       f0 2a		      BEQ	NoCollision
    637  f2af		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    638  f2b1		       85 b8		      STA	CollisionCounter	;and store as colision.
    639  f2b3				   CountBcdColision
    640  f2b3		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    641  f2b5		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    642  f2b7		       f0 17		      BEQ	SkipSetColisionSpeed
    643  f2b9		       f8		      SED		;2
    644  f2ba		       18		      CLC		;2
    645  f2bb		       a5 cb		      LDA	HitCountBcd0	;3
    646  f2bd		       69 01		      ADC	#1	;3
    647  f2bf		       85 cb		      STA	HitCountBcd0	;3
    648  f2c1		       a5 cc		      LDA	HitCountBcd1	;3
    649  f2c3		       69 00		      ADC	#0	;2
    650  f2c5		       85 cc		      STA	HitCountBcd1	;3
    651  f2c7		       d8		      CLD		;2
    652  f2c8				   EndCountBcdColision
    653  f2c8		       a9 10		      LDA	#COLLISION_SPEED_L	;
    654  f2ca		       c5 8e		      CMP	Player0SpeedL
    655  f2cc		       b0 02		      BCS	SkipSetColisionSpeed
    656  f2ce		       85 8e		      STA	Player0SpeedL
    657  f2d0				   SkipSetColisionSpeed
    658  f2d0		       a9 00		      LDA	#0
    659  f2d2		       85 8f		      STA	Player0SpeedH
    660  f2d4		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    661  f2d6		       4c 22 f3 	      JMP	StoreHMove	; We keep position consistent
    662  f2d9				   NoCollision
    663  f2d9
    664  f2d9				   DecrementCollision
    665  f2d9		       a4 b8		      LDY	CollisionCounter
    666  f2db		       f0 07		      BEQ	FinishDecrementCollision
    667  f2dd		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    668  f2df		       85 04		      STA	NUSIZ0
    669  f2e1		       88		      DEY
    670  f2e2		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    671  f2e4				   FinishDecrementCollision
    672  f2e4
    673  f2e4				   ResetPlayerSize
    674  f2e4		       d0 04		      BNE	FinishResetPlayerSize
    675  f2e6		       a9 30		      LDA	#%00110000
    676  f2e8		       85 04		      STA	NUSIZ0	;
    677  f2ea				   FinishResetPlayerSize
    678  f2ea
    679  f2ea				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    680  f2ea		       c0 01		      CPY	#1	; Last frame before reset
    681  f2ec		       d0 05		      BNE	SkipResetPlayerPosition
    682  f2ee		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    683  f2f0		       4c 22 f3 	      JMP	StoreHMove
    684  f2f3				   SkipResetPlayerPosition
    685  f2f3
    686  f2f3							; for left and right, we're gonna 
    687  f2f3							; set the horizontal speed, and then do
    688  f2f3							; a single HMOVE.  We'll use X to hold the
    689  f2f3							; horizontal speed, then store it in the 
    690  f2f3							; appropriate register
    691  f2f3				   PrepareReadXAxis
    692  f2f3		       a2 00		      LDX	#0
    693  f2f5		       a4 b9		      LDY	Player0X
    694  f2f7				   MakeDragsterTurnSlow
    695  f2f7		       a5 a9		      LDA	CurrentCarId
    696  f2f9		       c9 03		      CMP	#CAR_ID_DRAGSTER
    697  f2fb		       d0 06		      BNE	BeginReadLeft
    698  f2fd		       a5 8c		      LDA	FrameCount0
    699  f2ff		       29 01		      AND	#%00000001
    700  f301		       f0 1f		      BEQ	StoreHMove	; Ignore movement on odd frames for dragster
    701  f303				   BeginReadLeft
    702  f303		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    703  f305		       a9 40		      LDA	#%01000000	;Left
    704  f307		       2c 80 02 	      BIT	SWCHA
    705  f30a		       d0 07		      BNE	SkipMoveLeft
    706  f30c		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    707  f30e		       c6 b9		      DEC	Player0X
    708  f310		       4c 22 f3 	      JMP	StoreHMove	; Cannot move left and right...
    709  f313				   SkipMoveLeft
    710  f313				   BeginReadRight
    711  f313		       c0 36		      CPY	#PLAYER_0_MAX_X
    712  f315		       f0 0b		      BEQ	SkipMoveRight	; At max already
    713  f317		       a9 80		      LDA	#%10000000	;Right
    714  f319		       2c 80 02 	      BIT	SWCHA
    715  f31c		       d0 04		      BNE	SkipMoveRight
    716  f31e		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    717  f320		       e6 b9		      INC	Player0X
    718  f322				   SkipMoveRight
    719  f322				   StoreHMove
    720  f322		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    721  f324		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    722  f326
    723  f326				   DividePlayerSpeedBy4
    724  f326		       a5 8f		      LDA	Player0SpeedH
    725  f328		       0a		      ASL
    726  f329		       0a		      ASL
    727  f32a		       0a		      ASL
    728  f32b		       0a		      ASL
    729  f32c		       0a		      ASL
    730  f32d		       0a		      ASL
    731  f32e		       85 b1		      STA	Tmp1
    732  f330		       a5 8e		      LDA	Player0SpeedL
    733  f332		       4a		      LSR
    734  f333		       4a		      LSR
    735  f334		       29 3f		      AND	#%00111111
    736  f336		       05 b1		      ORA	Tmp1
    737  f338		       85 b0		      STA	Tmp0	; Division Result
    738  f33a
    739  f33a				   CalculateParallax1Offset		; 7/8 speed
    740  f33a		       38		      SEC
    741  f33b		       a5 8e		      LDA	Player0SpeedL
    742  f33d		       e5 b0		      SBC	Tmp0
    743  f33f		       85 b2		      STA	Tmp2
    744  f341		       a5 8f		      LDA	Player0SpeedH
    745  f343		       e9 00		      SBC	#0
    746  f345		       85 b3		      STA	Tmp3
    747  f347
    748  f347		       18		      CLC
    749  f348		       a5 c6		      LDA	ParallaxOffset1
    750  f34a		       65 b2		      ADC	Tmp2
    751  f34c		       85 c6		      STA	ParallaxOffset1
    752  f34e		       a5 c7		      LDA	ParallaxOffset1 + 1
    753  f350		       65 b3		      ADC	Tmp3
    754  f352		       85 c7		      STA	ParallaxOffset1 + 1
    755  f354
    756  f354				   CalculateParallax2Offset		; 6/8 speed
    757  f354		       38		      SEC
    758  f355		       a5 b2		      LDA	Tmp2
    759  f357		       e5 b0		      SBC	Tmp0
    760  f359		       85 b2		      STA	Tmp2
    761  f35b		       a5 b3		      LDA	Tmp3
    762  f35d		       e9 00		      SBC	#0
    763  f35f		       85 b3		      STA	Tmp3
    764  f361
    765  f361		       18		      CLC
    766  f362		       a5 c8		      LDA	ParallaxOffset2
    767  f364		       65 b2		      ADC	Tmp2
    768  f366		       85 c8		      STA	ParallaxOffset2
    769  f368		       a5 c9		      LDA	ParallaxOffset2 + 1
    770  f36a		       65 b3		      ADC	Tmp3
    771  f36c		       85 c9		      STA	ParallaxOffset2 + 1
    772  f36e
    773  f36e				   SkipUpdateLogic		; Continue here if not paused
    774  f36e
    775  f36e
    776  f36e				   ProcessBorder		;Can be optimized (probably)
    777  f36e		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    778  f370		       a5 88		      LDA	ParallaxMode
    779  f372		       c9 70		      CMP	#%01110000
    780  f374		       f0 1a		      BEQ	HorizontalParallaxMode
    781  f376		       c9 d0		      CMP	#%11010000
    782  f378		       f0 0a		      BEQ	VerticalParallaxMode
    783  f37a		       c9 b0		      CMP	#%10110000
    784  f37c		       f0 0c		      BEQ	TachometerMode
    785  f37e
    786  f37e				   DefaultBorderMode
    787  f37e		       20 11 f8 	      JSR	DefaultBorderLoop
    788  f381		       4c 93 f3 	      JMP	EndProcessingBorder
    789  f384				   VerticalParallaxMode
    790  f384		       20 80 f8 	      JSR	VerticalParallaxLoop
    791  f387		       4c 93 f3 	      JMP	EndProcessingBorder
    792  f38a				   TachometerMode
    793  f38a		       20 2c f8 	      JSR	PrepareTachometerBorderLoop
    794  f38d		       4c 93 f3 	      JMP	EndProcessingBorder
    795  f390				   HorizontalParallaxMode
    796  f390		       20 c3 f7 	      JSR	HorizontalParallaxLoop
    797  f393
    798  f393				   EndProcessingBorder
    799  f393
    800  f393				   ProcessScoreFontColor
    801  f393		       a6 d6		      LDX	ScoreFontColorHoldChange
    802  f395		       f0 06		      BEQ	ResetScoreFontColor
    803  f397		       ca		      DEX
    804  f398		       86 d6		      STX	ScoreFontColorHoldChange
    805  f39a		       4c a1 f3 	      JMP	SkipScoreFontColor
    806  f39d				   ResetScoreFontColor
    807  f39d		       a9 f9		      LDA	#SCORE_FONT_COLOR
    808  f39f		       85 d5		      STA	ScoreFontColor
    809  f3a1				   SkipScoreFontColor
    810  f3a1
    811  f3a1				   IsGameOver
    812  f3a1		       a5 ba		      LDA	CountdownTimer
    813  f3a3		       05 8e		      ORA	Player0SpeedL
    814  f3a5		       05 8f		      ORA	Player0SpeedH
    815  f3a7		       d0 0b		      BNE	IsCheckpoint
    816  f3a9		       a9 01		      LDA	#1
    817  f3ab		       85 d6		      STA	ScoreFontColorHoldChange
    818  f3ad		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    819  f3af		       85 d5		      STA	ScoreFontColor
    820  f3b1		       4c f5 f3 	      JMP	SkipIsTimeOver
    821  f3b4
    822  f3b4				   IsCheckpoint
    823  f3b4		       a5 d7		      LDA	NextCheckpoint
    824  f3b6		       c5 92		      CMP	TrafficOffset0 + 2
    825  f3b8		       d0 2f		      BNE	SkipIsCheckpoint
    826  f3ba		       18		      CLC
    827  f3bb		       69 10		      ADC	#CHECKPOINT_INTERVAL
    828  f3bd		       85 d7		      STA	NextCheckpoint
    829  f3bf		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    830  f3c1		       85 d5		      STA	ScoreFontColor
    831  f3c3		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    832  f3c5		       85 d6		      STA	ScoreFontColorHoldChange
    833  f3c7				   AddCheckpointBcd
    834  f3c7		       f8		      SED		;2
    835  f3c8		       18		      CLC		;2
    836  f3c9		       a5 a4		      LDA	CheckpointBcd0	;3
    837  f3cb		       69 01		      ADC	#1	;3
    838  f3cd		       85 a4		      STA	CheckpointBcd0	;3
    839  f3cf		       a5 a5		      LDA	CheckpointBcd1	;3
    840  f3d1		       69 00		      ADC	#0	;2
    841  f3d3		       85 a5		      STA	CheckpointBcd1	;3
    842  f3d5		       d8		      CLD		;2
    843  f3d6				   EndCheckpointBcd
    844  f3d6		       a5 ba		      LDA	CountdownTimer
    845  f3d8		       18		      CLC
    846  f3d9		       65 c2		      ADC	CheckpointTime
    847  f3db		       85 ba		      STA	CountdownTimer
    848  f3dd		       90 04		      BCC	JumpSkipTimeOver
    849  f3df		       a9 ff		      LDA	#$FF
    850  f3e1		       85 ba		      STA	CountdownTimer	; Does not overflow!
    851  f3e3				   JumpSkipTimeOver
    852  f3e3		       20 3b f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    853  f3e6		       4c f5 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    854  f3e9				   SkipIsCheckpoint
    855  f3e9
    856  f3e9				   IsTimeOver
    857  f3e9		       a5 ba		      LDA	CountdownTimer
    858  f3eb		       d0 08		      BNE	SkipIsTimeOver
    859  f3ed		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    860  f3ef		       85 d6		      STA	ScoreFontColorHoldChange
    861  f3f1		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    862  f3f3		       85 d5		      STA	ScoreFontColor
    863  f3f5				   SkipIsTimeOver
    864  f3f5
    865  f3f5				   PrintEasterEggCondition
    866  f3f5		       a5 8d		      LDA	FrameCount1
    867  f3f7		       29 38		      AND	#%00111000
    868  f3f9		       05 c0		      ORA	GameStatus
    869  f3fb		       c9 38		      CMP	#%00111000
    870  f3fd		       d0 06		      BNE	ChooseTextSide
    871  f3ff		       20 d4 f8 	      JSR	PrintEasterEgg
    872  f402		       4c f6 f4 	      JMP	RightScoreWriteEnd
    873  f405
    874  f405							;Could be done during on vblank to save this comparisson time (before draw score), 
    875  f405							;but I am saving vblank cycles for now, in case of 2 players.
    876  f405				   ChooseTextSide		; 
    877  f405		       a5 8c		      LDA	FrameCount0	;3
    878  f407		       29 01		      AND	#%00000001	;2
    879  f409		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    880  f40b		       4c 8c f4 	      JMP	RightScoreWrite
    881  f40e
    882  f40e				   LeftScoreWrite
    883  f40e		       a5 d5		      LDA	ScoreFontColor
    884  f410		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    885  f412		       f0 4e		      BEQ	PrintCheckpoint
    886  f414		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    887  f416		       f0 52		      BEQ	PrintStartGame
    888  f418		       a5 c0		      LDA	GameStatus
    889  f41a		       f0 56		      BEQ	PrintHellwayLeft
    890  f41c				   WriteDistance		;Not optimized yet, ugly code.
    891  f41c				   Digit0Distance
    892  f41c		       a5 91		      LDA	TrafficOffset0 + 1	;3
    893  f41e		       4a		      LSR		; 2
    894  f41f		       4a		      LSR		; 2
    895  f420		       4a		      LSR		; 2
    896  f421		       4a		      LSR		; 2
    897  f422		       aa		      TAX		; 2
    898  f423		       bd be fd 	      LDA	FontLookup,X	;4
    899  f426		       85 d3		      STA	ScoreD3	;3
    900  f428
    901  f428				   Digit1Distance
    902  f428		       a5 92		      LDA	TrafficOffset0 + 2	;3
    903  f42a		       29 0f		      AND	#%00001111	;2
    904  f42c		       aa		      TAX		; 2
    905  f42d		       bd be fd 	      LDA	FontLookup,X	;4 
    906  f430		       85 d2		      STA	ScoreD2	;3
    907  f432
    908  f432				   Digit2Distance
    909  f432		       a5 92		      LDA	TrafficOffset0 + 2	;3
    910  f434		       4a		      LSR		; 2
    911  f435		       4a		      LSR		; 2
    912  f436		       4a		      LSR		; 2
    913  f437		       4a		      LSR		; 2
    914  f438		       aa		      TAX		; 2
    915  f439		       bd be fd 	      LDA	FontLookup,X	;4
    916  f43c		       85 d1		      STA	ScoreD1	;3
    917  f43e
    918  f43e				   Digit3Distance
    919  f43e		       a5 bb		      LDA	Traffic0Msb	;3
    920  f440		       29 0f		      AND	#%00001111	;2
    921  f442		       aa		      TAX		; 2
    922  f443		       bd be fd 	      LDA	FontLookup,X	;4 
    923  f446		       85 d0		      STA	ScoreD0	;3
    924  f448
    925  f448				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    926  f448		       a5 bb		      LDA	Traffic0Msb
    927  f44a		       29 f0		      AND	#%11110000	;2
    928  f44c		       d0 07		      BNE	DrawDistanceExtraDigit
    929  f44e		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    930  f450		       85 d4		      STA	ScoreD4	;3
    931  f452		       4c 5f f4 	      JMP	EndDrawDistance
    932  f455				   DrawDistanceExtraDigit
    933  f455		       4a		      LSR		; 2
    934  f456		       4a		      LSR		; 2
    935  f457		       4a		      LSR		; 2
    936  f458		       4a		      LSR		; 2
    937  f459		       aa		      TAX		; 2
    938  f45a		       bd be fd 	      LDA	FontLookup,X	;4
    939  f45d		       85 d4		      STA	ScoreD4	;3
    940  f45f
    941  f45f				   EndDrawDistance
    942  f45f		       4c f6 f4 	      JMP	RightScoreWriteEnd	;3
    943  f462
    944  f462				   PrintCheckpoint
    945  f462		       a2 00		      LDX	#<CheckpointText
    946  f464		       20 a5 f7 	      JSR	PrintStaticText
    947  f467		       4c f6 f4 	      JMP	RightScoreWriteEnd	;3
    948  f46a				   PrintStartGame
    949  f46a		       a2 23		      LDX	#<GoText
    950  f46c		       20 a5 f7 	      JSR	PrintStaticText
    951  f46f		       4c f6 f4 	      JMP	RightScoreWriteEnd	;3
    952  f472
    953  f472				   PrintHellwayLeft
    954  f472		       a5 8d		      LDA	FrameCount1
    955  f474		       29 01		      AND	#1
    956  f476		       d0 05		      BNE	PrintCreditsLeft
    957  f478		       a2 05		      LDX	#<HellwayLeftText
    958  f47a		       4c 7f f4 	      JMP	PrintGameMode
    959  f47d				   PrintCreditsLeft
    960  f47d		       a2 0f		      LDX	#<OpbText
    961  f47f
    962  f47f				   PrintGameMode
    963  f47f		       20 a5 f7 	      JSR	PrintStaticText
    964  f482		       a6 c5		      LDX	GameMode
    965  f484		       bd be fd 	      LDA	FontLookup,X	;4 
    966  f487		       85 d0		      STA	ScoreD0	;3
    967  f489		       4c f6 f4 	      JMP	RightScoreWriteEnd	;3
    968  f48c
    969  f48c				   RightScoreWrite
    970  f48c		       a5 c0		      LDA	GameStatus
    971  f48e		       f0 45		      BEQ	PrintHellwayRight
    972  f490		       a5 d5		      LDA	ScoreFontColor
    973  f492		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    974  f494		       f0 52		      BEQ	PrintGameOver
    975  f496				   Digit0Timer
    976  f496		       a5 ba		      LDA	CountdownTimer	;3
    977  f498		       29 0f		      AND	#%00001111	;2
    978  f49a		       aa		      TAX		; 2
    979  f49b		       bd be fd 	      LDA	FontLookup,X	;4 
    980  f49e		       85 d1		      STA	ScoreD1	;3
    981  f4a0
    982  f4a0				   Digit1Timer
    983  f4a0		       a5 ba		      LDA	CountdownTimer	;3
    984  f4a2		       4a		      LSR		; 2
    985  f4a3		       4a		      LSR		; 2
    986  f4a4		       4a		      LSR		; 2
    987  f4a5		       4a		      LSR		; 2
    988  f4a6		       aa		      TAX		; 2
    989  f4a7		       bd be fd 	      LDA	FontLookup,X	;4
    990  f4aa		       85 d0		      STA	ScoreD0	;3
    991  f4ac
    992  f4ac		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    993  f4ae		       85 d2		      STA	ScoreD2	;3
    994  f4b0
    995  f4b0				   Digit0Speed
    996  f4b0		       a5 8e		      LDA	Player0SpeedL
    997  f4b2		       29 3c		      AND	#%00111100	;2 Discard the last bits
    998  f4b4		       4a		      LSR		; 2
    999  f4b5		       4a		      LSR		; 2
   1000  f4b6		       aa		      TAX		; 2
   1001  f4b7		       bd be fd 	      LDA	FontLookup,X	;4
   1002  f4ba		       85 d4		      STA	ScoreD4	;3
   1003  f4bc
   1004  f4bc				   Digit1Speed
   1005  f4bc		       a5 8e		      LDA	Player0SpeedL
   1006  f4be		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1007  f4c0		       18		      CLC
   1008  f4c1		       2a		      ROL		;First goes into carry
   1009  f4c2		       2a		      ROL
   1010  f4c3		       2a		      ROL
   1011  f4c4		       85 b0		      STA	Tmp0
   1012  f4c6		       a5 8f		      LDA	Player0SpeedH
   1013  f4c8		       0a		      ASL
   1014  f4c9		       0a		      ASL
   1015  f4ca		       05 b0		      ORA	Tmp0
   1016  f4cc		       aa		      TAX		; 2
   1017  f4cd		       bd be fd 	      LDA	FontLookup,X	;4
   1018  f4d0		       85 d3		      STA	ScoreD3	;3
   1019  f4d2		       4c f6 f4 	      JMP	RightScoreWriteEnd
   1020  f4d5
   1021  f4d5				   PrintHellwayRight
   1022  f4d5		       a5 8d		      LDA	FrameCount1
   1023  f4d7		       29 01		      AND	#1
   1024  f4d9		       d0 05		      BNE	PrintCreditsRight
   1025  f4db		       a2 0a		      LDX	#<HellwayRightText
   1026  f4dd		       4c e2 f4 	      JMP	PrintRightIntro
   1027  f4e0				   PrintCreditsRight
   1028  f4e0		       a2 14		      LDX	#<YearText
   1029  f4e2				   PrintRightIntro
   1030  f4e2		       20 a5 f7 	      JSR	PrintStaticText
   1031  f4e5		       4c f6 f4 	      JMP	RightScoreWriteEnd
   1032  f4e8				   PrintGameOver
   1033  f4e8		       a5 8c		      LDA	FrameCount0
   1034  f4ea		       30 05		      BMI	PrintOverText
   1035  f4ec		       a2 19		      LDX	#<GameText
   1036  f4ee		       4c f3 f4 	      JMP	StoreGameOverText
   1037  f4f1				   PrintOverText
   1038  f4f1		       a2 1e		      LDX	#<OverText
   1039  f4f3				   StoreGameOverText
   1040  f4f3		       20 a5 f7 	      JSR	PrintStaticText
   1041  f4f6				   RightScoreWriteEnd
   1042  f4f6
   1043  f4f6
   1044  f4f6				   ScoreBackgroundColor
   1045  f4f6		       a2 00		      LDX	#0
   1046  f4f8		       ad 82 02 	      LDA	SWCHB
   1047  f4fb		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1048  f4fd		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1049  f4ff		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1050  f501		       a2 03		      LDX	#BACKGROUND_COLOR
   1051  f503				   BlackAndWhiteScoreBg
   1052  f503		       85 b2		      STA	Tmp2	; Score Background
   1053  f505		       86 b3		      STX	Tmp3	; Traffic Background
   1054  f507
   1055  f507				   ConfigurePFForScore
   1056  f507							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1057  f507		       85 09		      STA	COLUBK
   1058  f509		       20 fd f6 	      JSR	ClearAll
   1059  f50c		       a9 02		      LDA	#%00000010	; Score mode
   1060  f50e		       85 0a		      STA	CTRLPF
   1061  f510		       a5 8c		      LDA	FrameCount0	;3
   1062  f512		       29 01		      AND	#%00000001	;2
   1063  f514		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
   1064  f516				   LeftScoreOn
   1065  f516		       a5 d5		      LDA	ScoreFontColor
   1066  f518		       85 07		      STA	COLUP1
   1067  f51a		       a5 b2		      LDA	Tmp2
   1068  f51c		       85 06		      STA	COLUP0
   1069  f51e		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1070  f520		       85 b1		      STA	Tmp1
   1071  f522		       4c 31 f5 	      JMP	CallWaitForVblankEnd
   1072  f525				   RightScoreOn
   1073  f525		       a5 d5		      LDA	ScoreFontColor
   1074  f527		       85 06		      STA	COLUP0
   1075  f529		       a5 b2		      LDA	Tmp2
   1076  f52b		       85 07		      STA	COLUP1
   1077  f52d		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1078  f52f		       85 b1		      STA	Tmp1
   1079  f531
   1080  f531							; After here we are going to update the screen, No more heavy code
   1081  f531				   CallWaitForVblankEnd
   1082  f531		       20 a8 fb 	      JSR	WaitForVblankEnd
   1083  f534
   1084  f534				   DrawScoreHud
   1085  f534		       20 46 f9 	      JSR	PrintScore
   1086  f537
   1087  f537		       85 02		      STA	WSYNC
   1088  f539
   1089  f539		       a5 0c		      LDA	INPT4	;3
   1090  f53b		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1091  f53d		       a5 d5		      LDA	ScoreFontColor
   1092  f53f		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1093  f541		       d0 0c		      BNE	WaitAnotherScoreLine
   1094  f543		       a5 8c		      LDA	FrameCount0	;3
   1095  f545		       29 01		      AND	#%00000001	;2
   1096  f547		       f0 03		      BEQ	LeftScoreOnGameOver
   1097  f549		       4c d1 fa 	      JMP	DrawGameOverScreenRight
   1098  f54c				   LeftScoreOnGameOver
   1099  f54c		       4c 03 fa 	      JMP	DrawGameOverScreenLeft
   1100  f54f
   1101  f54f				   WaitAnotherScoreLine
   1102  f54f		       85 02		      STA	WSYNC
   1103  f551
   1104  f551				   PrepareForTraffic
   1105  f551		       20 0f f7 	      JSR	ClearPF	; 32
   1106  f554
   1107  f554		       85 02		      STA	WSYNC
   1108  f556		       85 02		      STA	WSYNC
   1109  f558
   1110  f558		       a9 31		      LDA	#%00110001	; 2 Score mode
   1111  f55a		       85 0a		      STA	CTRLPF	;3
   1112  f55c
   1113  f55c		       a5 c3		      LDA	TrafficColor	;3
   1114  f55e		       85 08		      STA	COLUPF	;3
   1115  f560
   1116  f560		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1117  f562		       85 07		      STA	COLUP1	;3
   1118  f564
   1119  f564		       a5 d5		      LDA	ScoreFontColor	;3
   1120  f566		       85 06		      STA	COLUP0	;3
   1121  f568
   1122  f568		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1123  f56a
   1124  f56a		       20 0f f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1125  f56d
      0  f56d					      SLEEP	14
      1  f56d				   .CYCLES    SET	14
      2  f56d
      3  f56d				  -	      IF	.CYCLES < 2
      4  f56d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f56d				  -	      ERR
      6  f56d					      ENDIF
      7  f56d
      8  f56d				  -	      IF	.CYCLES & 1
      9  f56d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f56d				  -	      nop	0
     11  f56d				  -	      ELSE
     12  f56d				  -	      bit	VSYNC
     13  f56d				  -	      ENDIF
     14  f56d				  -.CYCLES    SET	.CYCLES - 3
     15  f56d					      ENDIF
     16  f56d
     17  f56d					      REPEAT	.CYCLES / 2
     18  f56d		       ea		      nop
     17  f56d					      REPEND
     18  f56e		       ea		      nop
     17  f56e					      REPEND
     18  f56f		       ea		      nop
     17  f56f					      REPEND
     18  f570		       ea		      nop
     17  f570					      REPEND
     18  f571		       ea		      nop
     17  f571					      REPEND
     18  f572		       ea		      nop
     17  f572					      REPEND
     18  f573		       ea		      nop
     19  f574					      REPEND
   1127  f574
   1128  f574		       a5 b3		      LDA	Tmp3	;3
   1129  f576		       85 09		      STA	COLUBK	;3
   1130  f578		       4c 7d f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1131  f57b							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1132  f57b
   1133  f57b							;main scanline loop...
   1134  f57b				   ScanLoop
   1135  f57b		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1136  f57d
   1137  f57d							;Start of next line!			
   1138  f57d				   DrawCache		;63 Is the last line going to the top of the next frame?
   1139  f57d		       a5 81		      LDA	PF0Cache	;3
   1140  f57f		       85 0d		      STA	PF0	;3
   1141  f581
   1142  f581		       a5 82		      LDA	PF1Cache	;3
   1143  f583		       85 0e		      STA	PF1	;3
   1144  f585
   1145  f585		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1146  f587		       b0 04		      BCS	SkipDrawCar	;2
   1147  f589		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1148  f58b		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1149  f58d				   SkipDrawCar
   1150  f58d
   1151  f58d		       a5 84		      LDA	GRP1Cache	;3
   1152  f58f		       85 1c		      STA	GRP1	;3
   1153  f591
   1154  f591		       a5 85		      LDA	ENABLCache	;3
   1155  f593		       85 1f		      STA	ENABL	;3
   1156  f595
   1157  f595		       a5 86		      LDA	ENAM0Cache	;3
   1158  f597		       85 1d		      STA	ENAM0	;3
   1159  f599
   1160  f599		       a5 87		      LDA	ENAM1Cache	;3
   1161  f59b		       85 1e		      STA	ENAM1	;3
   1162  f59d
   1163  f59d		       a9 00		      LDA	#0	;2
   1164  f59f							;STA PF1Cache ;3
   1165  f59f		       85 84		      STA	GRP1Cache	;3
   1166  f5a1		       85 85		      STA	ENABLCache	;3
   1167  f5a3		       85 86		      STA	ENAM0Cache	;3
   1168  f5a5		       85 87		      STA	ENAM1Cache	; 3
   1169  f5a7
   1170  f5a7							;BEQ DrawTraffic3
   1171  f5a7				   DrawTraffic1 		; 33
   1172  f5a7		       98		      TYA		; 2
   1173  f5a8		       18		      CLC		; 2 
   1174  f5a9		       65 95		      ADC	TrafficOffset1 + 1	;3
   1175  f5ab		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1176  f5ad		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1177  f5af		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1178  f5b1		       4c b6 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1179  f5b4				   EorOffsetWithCarry
   1180  f5b4		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1181  f5b6				   AfterEorOffsetWithCarry		;17
   1182  f5b6		       aa		      TAX		;2
   1183  f5b7		       bd 00 fe 	      LDA	AesTable,X	; 4
   1184  f5ba		       c5 c1		      CMP	TrafficChance	;3
   1185  f5bc		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1186  f5be		       a9 ff		      LDA	#$FF	;2
   1187  f5c0		       85 84		      STA	GRP1Cache	;3
   1188  f5c2				   FinishDrawTraffic1
   1189  f5c2
   1190  f5c2				   DrawTraffic2 		; 33
   1191  f5c2		       98		      TYA		; 2
   1192  f5c3		       18		      CLC		; 2 
   1193  f5c4		       65 99		      ADC	TrafficOffset2 + 1	;3
   1194  f5c6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1195  f5c8		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1196  f5ca		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1197  f5cc		       4c d1 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1198  f5cf				   EorOffsetWithCarry2
   1199  f5cf		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1200  f5d1				   AfterEorOffsetWithCarry2		;17
   1201  f5d1		       aa		      TAX		;2
   1202  f5d2		       bd 00 fe 	      LDA	AesTable,X	; 4
   1203  f5d5		       c5 c1		      CMP	TrafficChance	;3
   1204  f5d7		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1205  f5d9		       a9 02		      LDA	#%00000010	;2
   1206  f5db		       85 85		      STA	ENABLCache	;3
   1207  f5dd				   FinishDrawTraffic2
   1208  f5dd
   1209  f5dd							;STA WSYNC ;65 / 137
   1210  f5dd
   1211  f5dd							; LDA Tmp0 ; Flicker this line if drawing car
   1212  f5dd							; BEQ FinishDrawTraffic4
   1213  f5dd				   DrawTraffic3 		; 33
   1214  f5dd		       98		      TYA		; 2
   1215  f5de		       18		      CLC		; 2 
   1216  f5df		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1217  f5e1		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1218  f5e3		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1219  f5e5		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1220  f5e7		       4c ec f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1221  f5ea				   EorOffsetWithCarry3
   1222  f5ea		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1223  f5ec				   AfterEorOffsetWithCarry3		;17
   1224  f5ec		       aa		      TAX		;2
   1225  f5ed		       bd 00 fe 	      LDA	AesTable,X	; 4
   1226  f5f0		       c5 c1		      CMP	TrafficChance	;3
   1227  f5f2		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1228  f5f4		       a9 02		      LDA	#%00000010	;2
   1229  f5f6		       85 86		      STA	ENAM0Cache
   1230  f5f8				   FinishDrawTraffic3
   1231  f5f8
   1232  f5f8				   DrawTraffic4 		; 33
   1233  f5f8		       98		      TYA		; 2
   1234  f5f9		       18		      CLC		; 2 
   1235  f5fa		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1236  f5fc		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1237  f5fe		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1238  f600		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1239  f602		       4c 07 f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1240  f605				   EorOffsetWithCarry4
   1241  f605		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1242  f607				   AfterEorOffsetWithCarry4		;17
   1243  f607		       aa		      TAX		;2
   1244  f608		       bd 00 fe 	      LDA	AesTable,X	; 4
   1245  f60b		       c5 c1		      CMP	TrafficChance	;3
   1246  f60d		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1247  f60f		       a9 02		      LDA	#%00000010	;2
   1248  f611		       85 87		      STA	ENAM1Cache	;3
   1249  f613				   FinishDrawTraffic4
   1250  f613
   1251  f613				   DrawTraffic0 		; 20
   1252  f613		       98		      TYA		;2
   1253  f614		       29 07		      AND	#%00000111	;2
   1254  f616		       aa		      TAX		;2
   1255  f617		       b5 d8		      LDA	ParallaxCache,X	;4
   1256  f619		       85 82		      STA	PF1Cache	;3
   1257  f61b		       b5 f0		      LDA	ParallaxCache2,X	;4
   1258  f61d		       85 81		      STA	PF0Cache	;3
   1259  f61f
   1260  f61f				   SkipDrawTraffic0
   1261  f61f
   1262  f61f				   WhileScanLoop
   1263  f61f		       88		      DEY		;2
   1264  f620		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1265  f622		       4c 7b f5 	      JMP	ScanLoop	;3
   1266  f625				   FinishScanLoop		; 7 209 of 222
   1267  f625
   1268  f625		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1269  f627		       20 1e f7 	      JSR	LoadAll
   1270  f62a		       85 02		      STA	WSYNC	; do stuff!
   1271  f62c		       85 02		      STA	WSYNC
   1272  f62e		       85 02		      STA	WSYNC
   1273  f630							;42 cycles to use here
   1274  f630
   1275  f630				   PrepareOverscan
   1276  f630		       a9 02		      LDA	#2
   1277  f632		       85 02		      STA	WSYNC
   1278  f634		       85 01		      STA	VBLANK
   1279  f636
   1280  f636		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1281  f638		       8d 96 02 	      STA	TIM64T
   1282  f63b
   1283  f63b				   LeftSound		;58
   1284  f63b		       a5 ba		      LDA	CountdownTimer	;3
   1285  f63d		       f0 24		      BEQ	EngineOff	;2
   1286  f63f		       a5 8e		      LDA	Player0SpeedL	;3
   1287  f641		       29 80		      AND	#%10000000	;2
   1288  f643		       05 8f		      ORA	Player0SpeedH	;3
   1289  f645		       18		      CLC		;2
   1290  f646		       2a		      ROL		;2
   1291  f647		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1292  f649		       aa		      TAX		;2
   1293  f64a		       a5 8e		      LDA	Player0SpeedL	;3
   1294  f64c		       4a		      LSR		;2
   1295  f64d		       4a		      LSR		;2
   1296  f64e		       4a		      LSR		;2
   1297  f64f		       29 0f		      AND	#%00001111	;2
   1298  f651		       85 b0		      STA	Tmp0	;3
   1299  f653		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1300  f656		       38		      SEC		;2
   1301  f657		       e5 b0		      SBC	Tmp0	;3
   1302  f659		       85 17		      STA	AUDF0	;3
   1303  f65b		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1304  f65e		       85 15		      STA	AUDC0	;3
   1305  f660		       4c 67 f6 	      JMP	EndLeftSound	;3
   1306  f663				   EngineOff
   1307  f663		       a9 00		      LDA	#0
   1308  f665		       85 15		      STA	AUDC0
   1309  f667
   1310  f667				   EndLeftSound
   1311  f667
   1312  f667
   1313  f667				   RightSound		; 56 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1314  f667		       a5 d5		      LDA	ScoreFontColor	;3
   1315  f669		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1316  f66b		       f0 4a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1317  f66d		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1318  f66f		       f0 21		      BEQ	PlayCheckpoint	;2
   1319  f671		       a5 b8		      LDA	CollisionCounter	;3
   1320  f673		       c9 e0		      CMP	#$E0	;2
   1321  f675		       b0 0c		      BCS	PlayColision	;2
   1322  f677		       a5 d7		      LDA	NextCheckpoint	;3
   1323  f679		       38		      SEC		;2
   1324  f67a		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1325  f67c		       c9 02		      CMP	#$02	;2
   1326  f67e		       90 24		      BCC	PlayBeforeCheckpoint	;4
   1327  f680		       4c b7 f6 	      JMP	MuteRightSound
   1328  f683				   PlayColision
   1329  f683		       a9 1f		      LDA	#31
   1330  f685		       85 18		      STA	AUDF1
   1331  f687		       a9 08		      LDA	#8
   1332  f689		       85 16		      STA	AUDC1
   1333  f68b		       a9 08		      LDA	#8
   1334  f68d		       85 1a		      STA	AUDV1
   1335  f68f		       4c bb f6 	      JMP	EndRightSound
   1336  f692
   1337  f692				   PlayCheckpoint
   1338  f692		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1339  f694		       4a		      LSR		;2
   1340  f695		       4a		      LSR		;2
   1341  f696		       4a		      LSR		;2
   1342  f697		       85 18		      STA	AUDF1	;3
   1343  f699		       a9 0c		      LDA	#12	;2
   1344  f69b		       85 16		      STA	AUDC1	;3
   1345  f69d		       a9 06		      LDA	#6	;2
   1346  f69f		       85 1a		      STA	AUDV1	;3
   1347  f6a1		       4c bb f6 	      JMP	EndRightSound	;3
   1348  f6a4
   1349  f6a4				   PlayBeforeCheckpoint
   1350  f6a4		       a5 8c		      LDA	FrameCount0	;3
   1351  f6a6		       29 1c		      AND	#%00011100	;2
   1352  f6a8		       09 03		      ORA	#%00000011	;2
   1353  f6aa		       85 18		      STA	AUDF1	;3
   1354  f6ac		       a9 0c		      LDA	#12	;2
   1355  f6ae		       85 16		      STA	AUDC1	;3
   1356  f6b0		       a9 03		      LDA	#3	;2
   1357  f6b2		       85 1a		      STA	AUDV1	;3
   1358  f6b4		       4c bb f6 	      JMP	EndRightSound	;3
   1359  f6b7
   1360  f6b7				   MuteRightSound
   1361  f6b7		       a9 00		      LDA	#0
   1362  f6b9		       85 1a		      STA	AUDV1
   1363  f6bb				   EndRightSound
   1364  f6bb
   1365  f6bb				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1366  f6bb		       a5 c0		      LDA	GameStatus	;3
   1367  f6bd		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1368  f6bf		       a5 d5		      LDA	ScoreFontColor	;3
   1369  f6c1		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1370  f6c3		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1371  f6c5		       c6 cf		      DEC	OneSecondConter	;5
   1372  f6c7		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1373  f6c9
   1374  f6c9		       f8		      SED		;2 BCD Operations after this point
   1375  f6ca				   CountGlideTimeBcd
   1376  f6ca		       a5 d5		      LDA	ScoreFontColor	;3
   1377  f6cc		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1378  f6ce		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1379  f6d0		       18		      CLC		;2
   1380  f6d1		       a5 cd		      LDA	GlideTimeBcd0	;3
   1381  f6d3		       69 01		      ADC	#1	;3
   1382  f6d5		       85 cd		      STA	GlideTimeBcd0	;3
   1383  f6d7		       a5 ce		      LDA	GlideTimeBcd1	;3
   1384  f6d9		       69 00		      ADC	#0	;2
   1385  f6db		       85 ce		      STA	GlideTimeBcd1	;3
   1386  f6dd				   EndCountGlideTimeBcd
   1387  f6dd				   IncreaseTotalTimerBcd
   1388  f6dd		       18		      CLC		;2
   1389  f6de		       a5 bd		      LDA	TimeBcd0	;3
   1390  f6e0		       69 01		      ADC	#1	;2
   1391  f6e2		       85 bd		      STA	TimeBcd0	;3
   1392  f6e4		       a5 be		      LDA	TimeBcd1	;3
   1393  f6e6		       69 00		      ADC	#0	;2
   1394  f6e8		       85 be		      STA	TimeBcd1	;3
   1395  f6ea		       a5 bf		      LDA	TimeBcd2	;3
   1396  f6ec		       69 00		      ADC	#0	;2
   1397  f6ee		       85 bf		      STA	TimeBcd2	;3
   1398  f6f0
   1399  f6f0				   ResetOneSecondCounter
   1400  f6f0		       d8		      CLD		;2
   1401  f6f1		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1402  f6f3		       85 cf		      STA	OneSecondConter	;3
   1403  f6f5
   1404  f6f5				   EndExactlyEverySecond
   1405  f6f5
   1406  f6f5				   OverScanWait
   1407  f6f5		       ad 84 02 	      LDA	INTIM
   1408  f6f8		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1409  f6fa		       4c c0 f0 	      JMP	MainLoop
   1410  f6fd
   1411  f6fd				   Subroutines
   1412  f6fd
   1413  f6fd				   ClearAll		; 52
   1414  f6fd		       a9 00		      LDA	#0	;2
   1415  f6ff		       85 1c		      STA	GRP1	;3
   1416  f701		       85 1f		      STA	ENABL	;3
   1417  f703		       85 1d		      STA	ENAM0	;3
   1418  f705		       85 1e		      STA	ENAM1	;3
   1419  f707		       85 84		      STA	GRP1Cache	;3
   1420  f709		       85 85		      STA	ENABLCache	;3
   1421  f70b		       85 86		      STA	ENAM0Cache	;3
   1422  f70d		       85 87		      STA	ENAM1Cache	;3
   1423  f70f
   1424  f70f				   ClearPF		; 26
   1425  f70f		       a9 00		      LDA	#0	;2
   1426  f711				   ClearPFSkipLDA0
   1427  f711		       85 0d		      STA	PF0	;3
   1428  f713		       85 0e		      STA	PF1	;3
   1429  f715		       85 0f		      STA	PF2	;3	
   1430  f717		       85 81		      STA	PF0Cache	;3
   1431  f719		       85 82		      STA	PF1Cache	;3
   1432  f71b		       85 83		      STA	PF2Cache	;3 
   1433  f71d		       60		      RTS		;6
   1434  f71e				   EndClearAll
   1435  f71e
   1436  f71e				   LoadAll		; 48
   1437  f71e		       a5 81		      LDA	PF0Cache	;3
   1438  f720		       85 0d		      STA	PF0	;3
   1439  f722
   1440  f722		       a5 82		      LDA	PF1Cache	;3
   1441  f724		       85 0e		      STA	PF1	;3
   1442  f726
   1443  f726		       a5 83		      LDA	PF2Cache	;3
   1444  f728		       85 0f		      STA	PF2	;3
   1445  f72a
   1446  f72a		       a5 84		      LDA	GRP1Cache	;3
   1447  f72c		       85 1c		      STA	GRP1	;3
   1448  f72e
   1449  f72e		       a5 85		      LDA	ENABLCache	;3
   1450  f730		       85 1f		      STA	ENABL	;3
   1451  f732
   1452  f732		       a5 86		      LDA	ENAM0Cache	;3
   1453  f734		       85 1d		      STA	ENAM0	;3
   1454  f736
   1455  f736		       a5 87		      LDA	ENAM1Cache	;3
   1456  f738		       85 1e		      STA	ENAM1	;3
   1457  f73a
   1458  f73a		       60		      RTS		;6
   1459  f73b				   EndLoadAll
   1460  f73b
   1461  f73b				   NextDifficulty
   1462  f73b		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1463  f73d		       29 01		      AND	#%00000001
   1464  f73f		       d0 3f		      BNE	CheckRandomDifficulty
   1465  f741
   1466  f741		       a5 c4		      LDA	CurrentDifficulty
   1467  f743		       18		      CLC
   1468  f744		       69 01		      ADC	#1
   1469  f746		       29 03		      AND	#%00000011	; 0 to 3
   1470  f748		       85 c4		      STA	CurrentDifficulty
   1471  f74a
   1472  f74a				   ConfigureDifficulty
   1473  f74a		       a5 c4		      LDA	CurrentDifficulty
   1474  f74c		       f0 0b		      BEQ	ConfigureLightTraffic
   1475  f74e		       c9 01		      CMP	#1
   1476  f750		       f0 10		      BEQ	ConfigureRegularTraffic
   1477  f752		       c9 02		      CMP	#2
   1478  f754		       f0 15		      BEQ	ConfigureIntenseTraffic
   1479  f756		       4c 74 f7 	      JMP	ConfigureRushHourTraffic
   1480  f759
   1481  f759				   ConfigureLightTraffic
   1482  f759		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1483  f75b		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1484  f75d		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1485  f75f		       4c 7a f7 	      JMP	StoreTrafficChance
   1486  f762				   ConfigureRegularTraffic
   1487  f762		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1488  f764		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1489  f766		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1490  f768		       4c 7a f7 	      JMP	StoreTrafficChance
   1491  f76b				   ConfigureIntenseTraffic
   1492  f76b		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1493  f76d		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1494  f76f		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1495  f771		       4c 7a f7 	      JMP	StoreTrafficChance
   1496  f774				   ConfigureRushHourTraffic
   1497  f774		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1498  f776		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1499  f778		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1500  f77a
   1501  f77a				   StoreTrafficChance
   1502  f77a		       86 c1		      STX	TrafficChance
   1503  f77c		       84 c2		      STY	CheckpointTime
   1504  f77e		       85 c3		      STA	TrafficColor
   1505  f780
   1506  f780				   CheckRandomDifficulty
   1507  f780		       a5 c5		      LDA	GameMode
   1508  f782		       29 08		      AND	#%00001000	; Random difficulties
   1509  f784		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1510  f786				   RandomDificulty
   1511  f786		       a6 8c		      LDX	FrameCount0
   1512  f788		       bd 00 fe 	      LDA	AesTable,X
   1513  f78b		       45 c1		      EOR	TrafficChance
   1514  f78d		       29 3f		      AND	#%00111111
   1515  f78f		       85 c1		      STA	TrafficChance
   1516  f791
   1517  f791				   ReturnFromNextDifficulty
   1518  f791		       60		      RTS
   1519  f792				   EndNextDifficulty
   1520  f792
   1521  f792				   DefaultOffsets
   1522  f792		       a9 20		      LDA	#$20
   1523  f794		       85 96		      STA	TrafficOffset1 + 2
   1524  f796		       a9 40		      LDA	#$40
   1525  f798		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1526  f79a		       a9 60		      LDA	#$60
   1527  f79c		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1528  f79e		       a9 80		      LDA	#$80
   1529  f7a0		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1530  f7a2		       a9 a0		      LDA	#$A0
   1531  f7a4		       60		      RTS
   1532  f7a5
   1533  f7a5				   PrintStaticText		; Preload X with the offset referent to StaticText
   1534  f7a5		       bd 00 ff 	      LDA	StaticText,X
   1535  f7a8		       85 d0		      STA	ScoreD0
   1536  f7aa		       e8		      INX
   1537  f7ab		       bd 00 ff 	      LDA	StaticText,X
   1538  f7ae		       85 d1		      STA	ScoreD1
   1539  f7b0		       e8		      INX
   1540  f7b1		       bd 00 ff 	      LDA	StaticText,X
   1541  f7b4		       85 d2		      STA	ScoreD2
   1542  f7b6		       e8		      INX
   1543  f7b7		       bd 00 ff 	      LDA	StaticText,X
   1544  f7ba		       85 d3		      STA	ScoreD3
   1545  f7bc		       e8		      INX
   1546  f7bd		       bd 00 ff 	      LDA	StaticText,X
   1547  f7c0		       85 d4		      STA	ScoreD4
   1548  f7c2		       60		      RTS
   1549  f7c3
   1550  f7c3				   HorizontalParallaxLoop
   1551  f7c3		       a9 ef		      LDA	#%11101111	; Clear the house
   1552  f7c5		       39 d8 00 	      AND	ParallaxCache,Y
   1553  f7c8		       99 d8 00 	      STA	ParallaxCache,Y
   1554  f7cb				   CalculateParallax0
   1555  f7cb		       98		      TYA
   1556  f7cc		       18		      CLC
   1557  f7cd		       65 91		      ADC	TrafficOffset0 + 1
   1558  f7cf		       29 04		      AND	#%00000100
   1559  f7d1		       f0 08		      BEQ	HasEmptySpace0
   1560  f7d3				   HasBorder0
   1561  f7d3		       b9 d8 00 	      LDA	ParallaxCache,Y
   1562  f7d6		       09 0f		      ORA	#%00001111
   1563  f7d8		       4c e0 f7 	      JMP	StoreParallax0
   1564  f7db				   HasEmptySpace0
   1565  f7db		       b9 d8 00 	      LDA	ParallaxCache,Y
   1566  f7de		       29 f0		      AND	#%11110000
   1567  f7e0
   1568  f7e0				   StoreParallax0
   1569  f7e0		       99 d8 00 	      STA	ParallaxCache,Y
   1570  f7e3
   1571  f7e3				   CalculateParallax1
   1572  f7e3		       98		      TYA
   1573  f7e4		       18		      CLC
   1574  f7e5		       65 c7		      ADC	ParallaxOffset1 + 1
   1575  f7e7		       29 04		      AND	#%00000100
   1576  f7e9		       f0 08		      BEQ	HasEmptySpace1
   1577  f7eb				   HasBorder1
   1578  f7eb		       b9 d8 00 	      LDA	ParallaxCache,Y
   1579  f7ee		       09 e0		      ORA	#%11100000
   1580  f7f0		       4c f8 f7 	      JMP	StoreParallax1
   1581  f7f3				   HasEmptySpace1
   1582  f7f3		       b9 d8 00 	      LDA	ParallaxCache,Y
   1583  f7f6		       29 1f		      AND	#%00011111
   1584  f7f8
   1585  f7f8				   StoreParallax1
   1586  f7f8		       99 d8 00 	      STA	ParallaxCache,Y
   1587  f7fb
   1588  f7fb				   CalculateParallax2
   1589  f7fb		       98		      TYA
   1590  f7fc		       18		      CLC
   1591  f7fd		       65 c9		      ADC	ParallaxOffset2 + 1
   1592  f7ff		       29 04		      AND	#%00000100
   1593  f801		       f0 05		      BEQ	HasEmptySpace2
   1594  f803				   HasBorder2
   1595  f803		       a9 60		      LDA	#%01100000
   1596  f805		       4c 0a f8 	      JMP	StoreParallax2
   1597  f808				   HasEmptySpace2
   1598  f808		       a9 00		      LDA	#0
   1599  f80a
   1600  f80a				   StoreParallax2
   1601  f80a		       99 f0 00 	      STA	ParallaxCache2,Y
   1602  f80d
   1603  f80d				   ContinueHorizontalParallaxLoop
   1604  f80d		       88		      DEY
   1605  f80e		       10 b3		      BPL	HorizontalParallaxLoop
   1606  f810		       60		      RTS
   1607  f811
   1608  f811				   DefaultBorderLoop
   1609  f811				   CalculateDefaultBorder
   1610  f811		       98		      TYA
   1611  f812		       18		      CLC
   1612  f813		       65 91		      ADC	TrafficOffset0 + 1
   1613  f815		       29 04		      AND	#%00000100
   1614  f817		       f0 05		      BEQ	HasEmptySpace
   1615  f819				   HasBorder
   1616  f819		       a9 ff		      LDA	#$FF
   1617  f81b		       4c 20 f8 	      JMP	StoreBorder
   1618  f81e				   HasEmptySpace
   1619  f81e		       a9 00		      LDA	#0
   1620  f820
   1621  f820				   StoreBorder
   1622  f820		       99 d8 00 	      STA	ParallaxCache,Y
   1623  f823		       a9 00		      LDA	#0
   1624  f825		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1625  f828
   1626  f828				   ContinueDefaultBorderLoop
   1627  f828		       88		      DEY
   1628  f829		       10 e6		      BPL	DefaultBorderLoop
   1629  f82b		       60		      RTS
   1630  f82c
   1631  f82c				   PrepareTachometerBorderLoop
   1632  f82c		       a5 8e		      LDA	Player0SpeedL
   1633  f82e		       29 80		      AND	#%10000000
   1634  f830		       05 8f		      ORA	Player0SpeedH
   1635  f832		       18		      CLC
   1636  f833		       2a		      ROL
   1637  f834		       69 00		      ADC	#0
   1638  f836		       85 b0		      STA	Tmp0	; Gear
   1639  f838		       a5 8e		      LDA	Player0SpeedL
   1640  f83a		       4a		      LSR
   1641  f83b		       4a		      LSR
   1642  f83c		       4a		      LSR
   1643  f83d		       4a		      LSR
   1644  f83e		       29 07		      AND	#%00000111
   1645  f840		       85 b1		      STA	Tmp1	; RPM
   1646  f842
   1647  f842				   TachometerBorderLoop
   1648  f842		       98		      TYA
   1649  f843		       18		      CLC
   1650  f844		       65 91		      ADC	TrafficOffset0 + 1
   1651  f846		       29 04		      AND	#%00000100
   1652  f848		       f0 10		      BEQ	HasBorderTac
   1653  f84a		       a6 b0		      LDX	Tmp0
   1654  f84c		       bd eb fd 	      LDA	TachometerGearLookup,X
   1655  f84f		       99 d8 00 	      STA	ParallaxCache,Y
   1656  f852		       a9 00		      LDA	#0
   1657  f854		       99 f0 00 	      STA	ParallaxCache2,Y
   1658  f857		       4c 7c f8 	      JMP	ContinueBorderTac
   1659  f85a				   HasBorderTac
   1660  f85a		       a9 05		      LDA	#5
   1661  f85c		       c5 b0		      CMP	Tmp0	; Only on max speed
   1662  f85e		       f0 11		      BEQ	FullBorderTac
   1663  f860		       a6 b1		      LDX	Tmp1
   1664  f862		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1665  f865		       99 d8 00 	      STA	ParallaxCache,Y
   1666  f868		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1667  f86b		       99 f0 00 	      STA	ParallaxCache2,Y
   1668  f86e		       4c 7c f8 	      JMP	ContinueBorderTac
   1669  f871
   1670  f871				   FullBorderTac
   1671  f871		       a9 ff		      LDA	#$FF
   1672  f873		       99 d8 00 	      STA	ParallaxCache,Y
   1673  f876		       99 f0 00 	      STA	ParallaxCache2,Y
   1674  f879		       4c 7c f8 	      JMP	ContinueBorderTac
   1675  f87c
   1676  f87c				   ContinueBorderTac
   1677  f87c		       88		      DEY
   1678  f87d		       10 c3		      BPL	TachometerBorderLoop
   1679  f87f		       60		      RTS
   1680  f880
   1681  f880				   VerticalParallaxLoop
   1682  f880				   CalculateVerticalParallax0
   1683  f880		       98		      TYA
   1684  f881		       18		      CLC
   1685  f882		       65 91		      ADC	TrafficOffset0 + 1
   1686  f884		       29 06		      AND	#%00000110
   1687  f886		       d0 0b		      BNE	HasNoVerticalLine0
   1688  f888				   HasVerticalLine0
   1689  f888		       a9 ff		      LDA	#$FF
   1690  f88a		       99 d8 00 	      STA	ParallaxCache,Y
   1691  f88d		       99 f0 00 	      STA	ParallaxCache2,Y
   1692  f890		       4c d0 f8 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1693  f893				   HasNoVerticalLine0
   1694  f893		       a9 00		      LDA	#0
   1695  f895		       99 d8 00 	      STA	ParallaxCache,Y
   1696  f898		       99 f0 00 	      STA	ParallaxCache2,Y
   1697  f89b
   1698  f89b				   CalculateVerticalParallax1
   1699  f89b		       98		      TYA
   1700  f89c		       18		      CLC
   1701  f89d		       65 c7		      ADC	ParallaxOffset1 + 1
   1702  f89f		       29 07		      AND	#%00000111
   1703  f8a1		       d0 0d		      BNE	HasNoVerticalLine1
   1704  f8a3
   1705  f8a3				   HasVerticalLine1
   1706  f8a3		       a9 fc		      LDA	#%11111100
   1707  f8a5		       99 d8 00 	      STA	ParallaxCache,Y
   1708  f8a8		       a9 c0		      LDA	#%11000000
   1709  f8aa		       99 f0 00 	      STA	ParallaxCache2,Y
   1710  f8ad		       4c d0 f8 	      JMP	ContinueVerticalParallaxLoop
   1711  f8b0				   HasNoVerticalLine1
   1712  f8b0		       a9 00		      LDA	#0
   1713  f8b2		       99 d8 00 	      STA	ParallaxCache,Y
   1714  f8b5		       99 f0 00 	      STA	ParallaxCache2,Y
   1715  f8b8
   1716  f8b8				   CalculateVerticalParallax2
   1717  f8b8		       98		      TYA
   1718  f8b9		       18		      CLC
   1719  f8ba		       65 c9		      ADC	ParallaxOffset2 + 1
   1720  f8bc		       29 07		      AND	#%00000111
   1721  f8be		       d0 08		      BNE	HasNoVerticalLine2
   1722  f8c0
   1723  f8c0				   HasVerticalLine2
   1724  f8c0		       a9 f0		      LDA	#%11110000
   1725  f8c2		       99 d8 00 	      STA	ParallaxCache,Y
   1726  f8c5		       4c d0 f8 	      JMP	ContinueVerticalParallaxLoop
   1727  f8c8				   HasNoVerticalLine2
   1728  f8c8		       a9 00		      LDA	#0
   1729  f8ca		       99 d8 00 	      STA	ParallaxCache,Y
   1730  f8cd		       99 f0 00 	      STA	ParallaxCache2,Y
   1731  f8d0
   1732  f8d0				   ContinueVerticalParallaxLoop
   1733  f8d0		       88		      DEY
   1734  f8d1		       10 ad		      BPL	VerticalParallaxLoop
   1735  f8d3		       60		      RTS
   1736  f8d4
   1737  f8d4				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1738  f8d4		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1739  f8d6		       85 d5		      STA	ScoreFontColor
   1740  f8d8		       a9 01		      LDA	#1
   1741  f8da		       85 d6		      STA	ScoreFontColorHoldChange
   1742  f8dc
   1743  f8dc		       a5 8d		      LDA	FrameCount1
   1744  f8de		       29 07		      AND	#%00000111
   1745  f8e0		       85 b3		      STA	Tmp3
   1746  f8e2							;0 is Zelda Name, (default)
   1747  f8e2		       a9 01		      LDA	#1
   1748  f8e4		       c5 b3		      CMP	Tmp3
   1749  f8e6		       f0 38		      BEQ	PrintZeldaDateLeft
   1750  f8e8
   1751  f8e8		       a9 02		      LDA	#2
   1752  f8ea		       c5 b3		      CMP	Tmp3
   1753  f8ec		       f0 23		      BEQ	PrintPolvinhosLeft
   1754  f8ee
   1755  f8ee		       a9 03		      LDA	#3
   1756  f8f0		       c5 b3		      CMP	Tmp3
   1757  f8f2		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1758  f8f4
   1759  f8f4		       a9 04		      LDA	#4
   1760  f8f6		       c5 b3		      CMP	Tmp3
   1761  f8f8		       f0 1c		      BEQ	PrintIvonneLeft
   1762  f8fa
   1763  f8fa		       a9 05		      LDA	#5
   1764  f8fc		       c5 b3		      CMP	Tmp3
   1765  f8fe		       f0 2a		      BEQ	PrintIvonneDateLeft
   1766  f900
   1767  f900		       a9 06		      LDA	#6
   1768  f902		       c5 b3		      CMP	Tmp3
   1769  f904		       f0 15		      BEQ	PrintArtLeft
   1770  f906
   1771  f906		       a9 07		      LDA	#7
   1772  f908		       c5 b3		      CMP	Tmp3
   1773  f90a		       f0 23		      BEQ	PrintLeonardoLeft
   1774  f90c
   1775  f90c				   PrintZeldaLeft
   1776  f90c		       a2 28		      LDX	#<ZeldaTextLeft
   1777  f90e		       4c 34 f9 	      JMP	ProcessPrintEasterEgg
   1778  f911				   PrintPolvinhosLeft
   1779  f911		       a2 3c		      LDX	#<PolvinhosTextLeft
   1780  f913		       4c 34 f9 	      JMP	ProcessPrintEasterEgg
   1781  f916				   PrintIvonneLeft
   1782  f916		       a2 50		      LDX	#<IvonneTextLeft
   1783  f918		       4c 34 f9 	      JMP	ProcessPrintEasterEgg
   1784  f91b				   PrintArtLeft
   1785  f91b		       a2 64		      LDX	#<PaperArtTextLeft
   1786  f91d		       4c 34 f9 	      JMP	ProcessPrintEasterEgg
   1787  f920
   1788  f920				   PrintZeldaDateLeft
   1789  f920		       a2 32		      LDX	#<ZeldaDateLeft
   1790  f922		       4c 34 f9 	      JMP	ProcessPrintEasterEgg
   1791  f925				   PrintPolvinhosDateLeft
   1792  f925		       a2 46		      LDX	#<PolvinhosDateLeft
   1793  f927		       4c 34 f9 	      JMP	ProcessPrintEasterEgg
   1794  f92a				   PrintIvonneDateLeft
   1795  f92a		       a2 5a		      LDX	#<IvonneDateLeft
   1796  f92c		       4c 34 f9 	      JMP	ProcessPrintEasterEgg
   1797  f92f				   PrintLeonardoLeft
   1798  f92f		       a2 6e		      LDX	#<LeonardoTextLeft
   1799  f931		       4c 34 f9 	      JMP	ProcessPrintEasterEgg
   1800  f934
   1801  f934				   ProcessPrintEasterEgg
   1802  f934		       a5 8c		      LDA	FrameCount0	;3
   1803  f936		       29 01		      AND	#%00000001	;2
   1804  f938		       d0 03		      BNE	TranformIntoRightText
   1805  f93a		       4c 42 f9 	      JMP	PrintEasterEggText
   1806  f93d				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1807  f93d		       8a		      TXA
   1808  f93e		       18		      CLC
   1809  f93f		       69 05		      ADC	#HALF_TEXT_SIZE
   1810  f941		       aa		      TAX
   1811  f942
   1812  f942				   PrintEasterEggText
   1813  f942		       20 a5 f7 	      JSR	PrintStaticText
   1814  f945		       60		      RTS
   1815  f946
   1816  f946				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1817  f946		       a2 00		      LDX	#0
   1818  f948		       a0 04		      LDY	#FONT_OFFSET
   1819  f94a
   1820  f94a				   ScoreLoop		; 20 
   1821  f94a		       85 02		      STA	WSYNC	;2
   1822  f94c
   1823  f94c		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1824  f94e		       85 0d		      STA	PF0	;3
   1825  f950
   1826  f950		       a5 82		      LDA	PF1Cache	;3
   1827  f952		       85 0e		      STA	PF1	;3
   1828  f954
   1829  f954		       a5 83		      LDA	PF2Cache	;3
   1830  f956		       85 0f		      STA	PF2	;3
   1831  f958
   1832  f958				   DrawScoreD0		; 15
   1833  f958		       a6 d0		      LDX	ScoreD0	; 3
   1834  f95a		       bd 00 fd 	      LDA	Font,X	;4
   1835  f95d		       85 81		      STA	PF0Cache	;3
   1836  f95f		       c6 d0		      DEC	ScoreD0	;5
   1837  f961
   1838  f961				   DrawScoreD1		; 23	
   1839  f961		       a6 d1		      LDX	ScoreD1	; 3
   1840  f963		       bd 00 fd 	      LDA	Font,X	;4
   1841  f966		       0a		      ASL		;2
   1842  f967		       0a		      ASL		;2
   1843  f968		       0a		      ASL		;2
   1844  f969		       0a		      ASL		;2
   1845  f96a		       85 82		      STA	PF1Cache	;3
   1846  f96c		       c6 d1		      DEC	ScoreD1	;5
   1847  f96e
   1848  f96e				   DrawScoreD2		; 20
   1849  f96e		       a6 d2		      LDX	ScoreD2	; 3
   1850  f970		       bd 00 fd 	      LDA	Font,X	;4
   1851  f973		       29 0f		      AND	#%00001111	;2
   1852  f975		       05 82		      ORA	PF1Cache	;3
   1853  f977		       85 82		      STA	PF1Cache	;3
   1854  f979		       c6 d2		      DEC	ScoreD2	;5
   1855  f97b
   1856  f97b				   DrawScoreD3		; 23
   1857  f97b		       a6 d3		      LDX	ScoreD3	; 3
   1858  f97d		       bd 00 fd 	      LDA	Font,X	;4
   1859  f980		       4a		      LSR		;2
   1860  f981		       4a		      LSR		;2
   1861  f982		       4a		      LSR		;2
   1862  f983		       4a		      LSR		;2
   1863  f984		       85 83		      STA	PF2Cache	;3
   1864  f986		       c6 d3		      DEC	ScoreD3	;5
   1865  f988
   1866  f988				   DrawScoreD4		; 20
   1867  f988		       a6 d4		      LDX	ScoreD4	; 3
   1868  f98a		       bd 00 fd 	      LDA	Font,X	;4
   1869  f98d		       29 f0		      AND	#%11110000	;2
   1870  f98f		       05 83		      ORA	PF2Cache	;3
   1871  f991		       85 83		      STA	PF2Cache	;3
   1872  f993		       c6 d4		      DEC	ScoreD4	;5
   1873  f995
   1874  f995
   1875  f995		       88		      DEY		;2
   1876  f996		       10 b2		      BPL	ScoreLoop	;4
   1877  f998
   1878  f998		       85 02		      STA	WSYNC
   1879  f99a		       20 1e f7 	      JSR	LoadAll
   1880  f99d		       60		      RTS		; 6
   1881  f99e
   1882  f99e				   PrintRightDecimalDigits
   1883  f99e		       b9 00 00 	      LDA	0,Y
   1884  f9a1		       4a		      LSR
   1885  f9a2		       4a		      LSR
   1886  f9a3		       4a		      LSR
   1887  f9a4		       4a		      LSR
   1888  f9a5		       aa		      TAX
   1889  f9a6		       bd be fd 	      LDA	FontLookup,X	;4
   1890  f9a9		       85 d2		      STA	ScoreD2	;3
   1891  f9ab
   1892  f9ab		       b9 00 00 	      LDA	0,Y
   1893  f9ae		       29 0f		      AND	#%00001111
   1894  f9b0		       aa		      TAX
   1895  f9b1		       bd be fd 	      LDA	FontLookup,X	;4
   1896  f9b4		       85 d3		      STA	ScoreD3	;3
   1897  f9b6
   1898  f9b6		       c8		      INY
   1899  f9b7		       b9 00 00 	      LDA	0,Y
   1900  f9ba		       4a		      LSR
   1901  f9bb		       4a		      LSR
   1902  f9bc		       4a		      LSR
   1903  f9bd		       4a		      LSR
   1904  f9be		       aa		      TAX
   1905  f9bf		       bd be fd 	      LDA	FontLookup,X	;4
   1906  f9c2		       85 d0		      STA	ScoreD0	;3
   1907  f9c4
   1908  f9c4		       b9 00 00 	      LDA	0,Y
   1909  f9c7		       29 0f		      AND	#%00001111
   1910  f9c9		       aa		      TAX
   1911  f9ca		       bd be fd 	      LDA	FontLookup,X	;4
   1912  f9cd		       85 d1		      STA	ScoreD1	;3
   1913  f9cf
   1914  f9cf		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1915  f9d1		       85 d4		      STA	ScoreD4
   1916  f9d3		       60		      RTS
   1917  f9d4
   1918  f9d4				   PrintLastLeftDecimalDigits
   1919  f9d4		       b9 00 00 	      LDA	0,Y
   1920  f9d7		       4a		      LSR
   1921  f9d8		       4a		      LSR
   1922  f9d9		       4a		      LSR
   1923  f9da		       4a		      LSR
   1924  f9db		       aa		      TAX
   1925  f9dc		       bd be fd 	      LDA	FontLookup,X	;4
   1926  f9df		       85 d3		      STA	ScoreD3	;3
   1927  f9e1		       b9 00 00 	      LDA	0,Y
   1928  f9e4		       29 0f		      AND	#%00001111
   1929  f9e6		       aa		      TAX
   1930  f9e7		       bd be fd 	      LDA	FontLookup,X	;4
   1931  f9ea		       85 d4		      STA	ScoreD4	;3
   1932  f9ec		       60		      RTS
   1933  f9ed
   1934  f9ed				   PrintZerosLeft
   1935  f9ed		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1936  f9ef		       85 d2		      STA	ScoreD2
   1937  f9f1		       85 d3		      STA	ScoreD3
   1938  f9f3		       85 d4		      STA	ScoreD4
   1939  f9f5		       60		      RTS
   1940  f9f6
   1941  f9f6				   DrawGameOverScoreLine
   1942  f9f6		       85 02		      STA	WSYNC
   1943  f9f8		       20 46 f9 	      JSR	PrintScore
   1944  f9fb		       85 02		      STA	WSYNC
   1945  f9fd		       85 02		      STA	WSYNC
   1946  f9ff		       20 0f f7 	      JSR	ClearPF
   1947  fa02		       60		      RTS
   1948  fa03
   1949  fa03				   DrawGameOverScreenLeft
   1950  fa03		       85 02		      STA	WSYNC
   1951  fa05		       20 0f f7 	      JSR	ClearPF
   1952  fa08
   1953  fa08				   DrawBcdScoreLeft
   1954  fa08		       20 bb fb 	      JSR	Sleep8Lines
   1955  fa0b		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1956  fa0d		       85 06		      STA	COLUP0
   1957  fa0f		       85 02		      STA	WSYNC
   1958  fa11		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1959  fa13		       85 d0		      STA	ScoreD0
   1960  fa15
   1961  fa15		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1962  fa17		       85 d1		      STA	ScoreD1
   1963  fa19
   1964  fa19		       a5 b7		      LDA	ScoreBcd3
   1965  fa1b		       29 0f		      AND	#%00001111
   1966  fa1d		       aa		      TAX
   1967  fa1e		       bd be fd 	      LDA	FontLookup,X	;4
   1968  fa21		       85 d2		      STA	ScoreD2	;3
   1969  fa23
   1970  fa23		       a0 b6		      LDY	#ScoreBcd2
   1971  fa25		       20 d4 f9 	      JSR	PrintLastLeftDecimalDigits
   1972  fa28
   1973  fa28		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   1974  fa2b
   1975  fa2b				   DrawTimerLeft
   1976  fa2b		       20 bb fb 	      JSR	Sleep8Lines
   1977  fa2e		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1978  fa30		       85 06		      STA	COLUP0
   1979  fa32		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1980  fa34		       85 d0		      STA	ScoreD0
   1981  fa36		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1982  fa38		       85 d1		      STA	ScoreD1
   1983  fa3a		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1984  fa3c		       85 d2		      STA	ScoreD2
   1985  fa3e		       a0 bf		      LDY	#TimeBcd2
   1986  fa40		       85 02		      STA	WSYNC
   1987  fa42		       20 d4 f9 	      JSR	PrintLastLeftDecimalDigits
   1988  fa45		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   1989  fa48
   1990  fa48				   DrawGlideTimerLeft
   1991  fa48		       20 bb fb 	      JSR	Sleep8Lines
   1992  fa4b		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1993  fa4d		       85 06		      STA	COLUP0
   1994  fa4f		       85 02		      STA	WSYNC
   1995  fa51		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1996  fa53		       85 d0		      STA	ScoreD0
   1997  fa55		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1998  fa57		       85 d1		      STA	ScoreD1
   1999  fa59		       20 ed f9 	      JSR	PrintZerosLeft
   2000  fa5c		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   2001  fa5f
   2002  fa5f				   DrawHitCountLeft
   2003  fa5f		       20 bb fb 	      JSR	Sleep8Lines
   2004  fa62		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2005  fa64		       85 06		      STA	COLUP0
   2006  fa66		       85 02		      STA	WSYNC
   2007  fa68		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2008  fa6a		       85 d0		      STA	ScoreD0
   2009  fa6c		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2010  fa6e		       85 d1		      STA	ScoreD1
   2011  fa70		       20 ed f9 	      JSR	PrintZerosLeft
   2012  fa73		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   2013  fa76
   2014  fa76				   DrawCheckpointCountLeft
   2015  fa76		       20 bb fb 	      JSR	Sleep8Lines
   2016  fa79		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2017  fa7b		       85 06		      STA	COLUP0
   2018  fa7d		       85 02		      STA	WSYNC
   2019  fa7f		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2020  fa81		       85 d0		      STA	ScoreD0
   2021  fa83		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2022  fa85		       85 d1		      STA	ScoreD1
   2023  fa87		       20 ed f9 	      JSR	PrintZerosLeft
   2024  fa8a		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   2025  fa8d
   2026  fa8d				   DrawGameVersionLeft
   2027  fa8d		       20 bb fb 	      JSR	Sleep8Lines
   2028  fa90		       a9 49		      LDA	#VERSION_COLOR
   2029  fa92		       85 06		      STA	COLUP0
   2030  fa94
   2031  fa94		       a5 c5		      LDA	GameMode
   2032  fa96		       aa		      TAX
   2033  fa97		       bd be fd 	      LDA	FontLookup,X	;4
   2034  fa9a		       85 d0		      STA	ScoreD0	;3
   2035  fa9c
   2036  fa9c		       a5 a9		      LDA	CurrentCarId
   2037  fa9e		       aa		      TAX
   2038  fa9f		       bd be fd 	      LDA	FontLookup,X	;4
   2039  faa2		       85 d1		      STA	ScoreD1	;3
   2040  faa4
   2041  faa4		       a5 a6		      LDA	StartSWCHB
   2042  faa6		       29 40		      AND	#%01000000	; P0 difficulty
   2043  faa8		       49 40		      EOR	#%01000000	; Reverse bytes
   2044  faaa		       2a		      ROL
   2045  faab		       2a		      ROL
   2046  faac		       2a		      ROL
   2047  faad		       18		      CLC
   2048  faae		       69 0a		      ADC	#10
   2049  fab0		       aa		      TAX
   2050  fab1		       bd be fd 	      LDA	FontLookup,X	;4
   2051  fab4		       85 d2		      STA	ScoreD2	;3
   2052  fab6
   2053  fab6		       a5 a6		      LDA	StartSWCHB
   2054  fab8		       29 80		      AND	#%10000000	; P0 difficulty
   2055  faba		       49 80		      EOR	#%10000000	; Reverse bytes
   2056  fabc		       2a		      ROL
   2057  fabd		       2a		      ROL
   2058  fabe		       18		      CLC
   2059  fabf		       69 0a		      ADC	#10
   2060  fac1		       aa		      TAX
   2061  fac2		       bd be fd 	      LDA	FontLookup,X	;4
   2062  fac5		       85 d3		      STA	ScoreD3	;3
   2063  fac7
   2064  fac7		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2065  fac9		       85 d4		      STA	ScoreD4
   2066  facb
   2067  facb		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   2068  face
   2069  face		       4c 34 fb 	      JMP	FinalizeDrawGameOver
   2070  fad1
   2071  fad1				   DrawGameOverScreenRight
   2072  fad1		       85 02		      STA	WSYNC
   2073  fad3		       20 0f f7 	      JSR	ClearPF
   2074  fad6
   2075  fad6				   DrawBcdScoreRight
   2076  fad6		       20 bb fb 	      JSR	Sleep8Lines
   2077  fad9		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2078  fadb		       85 07		      STA	COLUP1
   2079  fadd		       85 02		      STA	WSYNC
   2080  fadf		       a0 b4		      LDY	#ScoreBcd0
   2081  fae1		       20 9e f9 	      JSR	PrintRightDecimalDigits
   2082  fae4
   2083  fae4		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   2084  fae7
   2085  fae7				   DrawTimerRight
   2086  fae7		       20 bb fb 	      JSR	Sleep8Lines
   2087  faea		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2088  faec		       85 07		      STA	COLUP1
   2089  faee		       a0 bd		      LDY	#TimeBcd0
   2090  faf0		       20 9e f9 	      JSR	PrintRightDecimalDigits
   2091  faf3
   2092  faf3		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   2093  faf6				   DrawGlideTimeRight
   2094  faf6		       20 bb fb 	      JSR	Sleep8Lines
   2095  faf9		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2096  fafb		       85 07		      STA	COLUP1
   2097  fafd		       a0 cd		      LDY	#GlideTimeBcd0
   2098  faff		       20 9e f9 	      JSR	PrintRightDecimalDigits
   2099  fb02		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   2100  fb05
   2101  fb05				   DrawHitCountRight
   2102  fb05		       20 bb fb 	      JSR	Sleep8Lines
   2103  fb08		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2104  fb0a		       85 07		      STA	COLUP1
   2105  fb0c		       a0 cb		      LDY	#HitCountBcd0
   2106  fb0e		       20 9e f9 	      JSR	PrintRightDecimalDigits
   2107  fb11		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   2108  fb14
   2109  fb14				   DrawCheckpointCountRight
   2110  fb14		       20 bb fb 	      JSR	Sleep8Lines
   2111  fb17		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2112  fb19		       85 07		      STA	COLUP1
   2113  fb1b		       a0 a4		      LDY	#CheckpointBcd0
   2114  fb1d		       20 9e f9 	      JSR	PrintRightDecimalDigits
   2115  fb20		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   2116  fb23
   2117  fb23				   DrawVersionRight
   2118  fb23		       20 bb fb 	      JSR	Sleep8Lines
   2119  fb26		       a9 49		      LDA	#VERSION_COLOR
   2120  fb28		       85 07		      STA	COLUP1
   2121  fb2a		       85 02		      STA	WSYNC
   2122  fb2c		       a2 78		      LDX	#<VersionText
   2123  fb2e		       20 a5 f7 	      JSR	PrintStaticText
   2124  fb31		       20 f6 f9 	      JSR	DrawGameOverScoreLine
   2125  fb34
   2126  fb34				   FinalizeDrawGameOver
   2127  fb34		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2128  fb36		       85 d5		      STA	ScoreFontColor
   2129  fb38		       20 b2 fb 	      JSR	Sleep4Lines
   2130  fb3b		       20 c2 fb 	      JSR	Sleep32Lines
   2131  fb3e		       20 c2 fb 	      JSR	Sleep32Lines
   2132  fb41		       4c 30 f6 	      JMP	PrepareOverscan
   2133  fb44
   2134  fb44				   DrawQrCode
   2135  fb44		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2136  fb46		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2137  fb48		       a9 01		      LDA	#%00000001	; Mirror playfield
   2138  fb4a		       85 0a		      STA	CTRLPF
   2139  fb4c		       20 fd f6 	      JSR	ClearAll	; To be 100 sure!
   2140  fb4f		       ad 82 02 	      LDA	SWCHB
   2141  fb52		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2142  fb54		       f0 07		      BEQ	StoreReversedQrCode
   2143  fb56		       86 09		      STX	COLUBK
   2144  fb58		       84 08		      STY	COLUPF
   2145  fb5a		       4c 61 fb 	      JMP	ContinueQrCode
   2146  fb5d				   StoreReversedQrCode
   2147  fb5d		       86 08		      STX	COLUPF
   2148  fb5f		       84 09		      STY	COLUBK
   2149  fb61
   2150  fb61				   ContinueQrCode
   2151  fb61		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2152  fb63		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2153  fb65		       20 a8 fb 	      JSR	WaitForVblankEnd
   2154  fb68		       20 bb fb 	      JSR	Sleep8Lines
   2155  fb6b		       20 b2 fb 	      JSR	Sleep4Lines
   2156  fb6e
   2157  fb6e				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2158  fb6e		       85 02		      STA	WSYNC
   2159  fb70		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2160  fb73		       85 0e		      STA	PF1	;3
   2161  fb75		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2162  fb78		       85 0f		      STA	PF2	;3
      0  fb7a					      SLEEP	27	; 
      1  fb7a				   .CYCLES    SET	27
      2  fb7a
      3  fb7a				  -	      IF	.CYCLES < 2
      4  fb7a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb7a				  -	      ERR
      6  fb7a					      ENDIF
      7  fb7a
      8  fb7a					      IF	.CYCLES & 1
      9  fb7a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb7a				  -	      nop	0
     11  fb7a					      ELSE
     12  fb7a		       24 00		      bit	VSYNC
     13  fb7c					      ENDIF
     14  fb7c				   .CYCLES    SET	.CYCLES - 3
     15  fb7c					      ENDIF
     16  fb7c
     17  fb7c					      REPEAT	.CYCLES / 2
     18  fb7c		       ea		      nop
     17  fb7c					      REPEND
     18  fb7d		       ea		      nop
     17  fb7d					      REPEND
     18  fb7e		       ea		      nop
     17  fb7e					      REPEND
     18  fb7f		       ea		      nop
     17  fb7f					      REPEND
     18  fb80		       ea		      nop
     17  fb80					      REPEND
     18  fb81		       ea		      nop
     17  fb81					      REPEND
     18  fb82		       ea		      nop
     17  fb82					      REPEND
     18  fb83		       ea		      nop
     17  fb83					      REPEND
     18  fb84		       ea		      nop
     17  fb84					      REPEND
     18  fb85		       ea		      nop
     17  fb85					      REPEND
     18  fb86		       ea		      nop
     17  fb86					      REPEND
     18  fb87		       ea		      nop
     19  fb88					      REPEND
   2164  fb88		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2165  fb8b		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2166  fb8d		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2167  fb90		       85 0e		      STA	PF1	;3
   2168  fb92
   2169  fb92		       ca		      DEX		;2
   2170  fb93		       d0 d9		      BNE	QrCodeLoop	;2
   2171  fb95		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2172  fb97		       88		      DEY		;2
   2173  fb98		       10 d4		      BPL	QrCodeLoop	;4
   2174  fb9a
   2175  fb9a				   EndQrCodeLoop
   2176  fb9a		       85 02		      STA	WSYNC	;
   2177  fb9c		       a9 00		      LDA	#0
   2178  fb9e		       85 0e		      STA	PF1	;3
   2179  fba0		       85 0f		      STA	PF2	;3
   2180  fba2
   2181  fba2		       20 c2 fb 	      JSR	Sleep32Lines
   2182  fba5		       4c 30 f6 	      JMP	PrepareOverscan
   2183  fba8
   2184  fba8				   WaitForVblankEnd
   2185  fba8		       ad 84 02 	      LDA	INTIM
   2186  fbab		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
   2187  fbad		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline? 
   2188  fbaf		       85 01		      STA	VBLANK
   2189  fbb1		       60		      RTS
   2190  fbb2
   2191  fbb2				   Sleep4Lines
   2192  fbb2		       85 02		      STA	WSYNC
   2193  fbb4		       85 02		      STA	WSYNC
   2194  fbb6		       85 02		      STA	WSYNC
   2195  fbb8		       85 02		      STA	WSYNC
   2196  fbba		       60		      RTS
   2197  fbbb
   2198  fbbb				   Sleep8Lines
   2199  fbbb		       20 b2 fb 	      JSR	Sleep4Lines
   2200  fbbe		       20 b2 fb 	      JSR	Sleep4Lines
   2201  fbc1		       60		      RTS
   2202  fbc2
   2203  fbc2				   Sleep32Lines
   2204  fbc2		       20 bb fb 	      JSR	Sleep8Lines
   2205  fbc5		       20 bb fb 	      JSR	Sleep8Lines
   2206  fbc8		       20 bb fb 	      JSR	Sleep8Lines
   2207  fbcb		       20 bb fb 	      JSR	Sleep8Lines
   2208  fbce		       60		      RTS
   2209  fbcf
   2210  fbcf							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   2211  fc00					      org	$FC00
   2212  fc00				   QrCode1
   2213  fc00		       1f		      .byte.b	#%00011111
   2214  fc01		       10		      .byte.b	#%00010000
   2215  fc02		       17		      .byte.b	#%00010111
   2216  fc03		       17		      .byte.b	#%00010111
   2217  fc04		       17		      .byte.b	#%00010111
   2218  fc05		       10		      .byte.b	#%00010000
   2219  fc06		       1f		      .byte.b	#%00011111
   2220  fc07		       00		      .byte.b	#%00000000
   2221  fc08		       17		      .byte.b	#%00010111
   2222  fc09		       10		      .byte.b	#%00010000
   2223  fc0a		       1d		      .byte.b	#%00011101
   2224  fc0b		       16		      .byte.b	#%00010110
   2225  fc0c		       03		      .byte.b	#%00000011
   2226  fc0d		       19		      .byte.b	#%00011001
   2227  fc0e		       13		      .byte.b	#%00010011
   2228  fc0f		       1c		      .byte.b	#%00011100
   2229  fc10		       0b		      .byte.b	#%00001011
   2230  fc11		       00		      .byte.b	#%00000000
   2231  fc12		       1f		      .byte.b	#%00011111
   2232  fc13		       10		      .byte.b	#%00010000
   2233  fc14		       17		      .byte.b	#%00010111
   2234  fc15		       17		      .byte.b	#%00010111
   2235  fc16		       17		      .byte.b	#%00010111
   2236  fc17		       10		      .byte.b	#%00010000
   2237  fc18		       1f		      .byte.b	#%00011111
   2238  fc19
   2239  fc19				   QrCode2
   2240  fc19		       c3		      .byte.b	#%11000011
   2241  fc1a		       9a		      .byte.b	#%10011010
   2242  fc1b		       82		      .byte.b	#%10000010
   2243  fc1c		       da		      .byte.b	#%11011010
   2244  fc1d		       aa		      .byte.b	#%10101010
   2245  fc1e		       ca		      .byte.b	#%11001010
   2246  fc1f		       f3		      .byte.b	#%11110011
   2247  fc20		       78		      .byte.b	#%01111000
   2248  fc21		       df		      .byte.b	#%11011111
   2249  fc22		       fc		      .byte.b	#%11111100
   2250  fc23		       c7		      .byte.b	#%11000111
   2251  fc24		       98		      .byte.b	#%10011000
   2252  fc25		       23		      .byte.b	#%00100011
   2253  fc26		       b9		      .byte.b	#%10111001
   2254  fc27		       d2		      .byte.b	#%11010010
   2255  fc28		       30		      .byte.b	#%00110000
   2256  fc29		       eb		      .byte.b	#%11101011
   2257  fc2a		       28		      .byte.b	#%00101000
   2258  fc2b		       ab		      .byte.b	#%10101011
   2259  fc2c		       72		      .byte.b	#%01110010
   2260  fc2d		       fa		      .byte.b	#%11111010
   2261  fc2e		       7a		      .byte.b	#%01111010
   2262  fc2f		       32		      .byte.b	#%00110010
   2263  fc30		       3a		      .byte.b	#%00111010
   2264  fc31		       63		      .byte.b	#%01100011
   2265  fc32
   2266  fc32				   QrCode3
   2267  fc32		       98		      .byte.b	#%10011000
   2268  fc33		       c3		      .byte.b	#%11000011
   2269  fc34		       39		      .byte.b	#%00111001
   2270  fc35		       34		      .byte.b	#%00110100
   2271  fc36		       ff		      .byte.b	#%11111111
   2272  fc37		       71		      .byte.b	#%01110001
   2273  fc38		       d5		      .byte.b	#%11010101
   2274  fc39		       d1		      .byte.b	#%11010001
   2275  fc3a		       5f		      .byte.b	#%01011111
   2276  fc3b		       26		      .byte.b	#%00100110
   2277  fc3c		       2d		      .byte.b	#%00101101
   2278  fc3d		       e9		      .byte.b	#%11101001
   2279  fc3e		       d6		      .byte.b	#%11010110
   2280  fc3f		       26		      .byte.b	#%00100110
   2281  fc40		       ba		      .byte.b	#%10111010
   2282  fc41		       03		      .byte.b	#%00000011
   2283  fc42		       dd		      .byte.b	#%11011101
   2284  fc43		       e0		      .byte.b	#%11100000
   2285  fc44		       57		      .byte.b	#%01010111
   2286  fc45		       14		      .byte.b	#%00010100
   2287  fc46		       35		      .byte.b	#%00110101
   2288  fc47		       e5		      .byte.b	#%11100101
   2289  fc48		       b5		      .byte.b	#%10110101
   2290  fc49		       d4		      .byte.b	#%11010100
   2291  fc4a		       97		      .byte.b	#%10010111
   2292  fc4b
   2293  fc4b				   QrCode4
   2294  fc4b		       09		      .byte.b	#%00001001
   2295  fc4c		       0e		      .byte.b	#%00001110
   2296  fc4d		       0f		      .byte.b	#%00001111
   2297  fc4e		       0c		      .byte.b	#%00001100
   2298  fc4f		       0c		      .byte.b	#%00001100
   2299  fc50		       08		      .byte.b	#%00001000
   2300  fc51		       08		      .byte.b	#%00001000
   2301  fc52		       06		      .byte.b	#%00000110
   2302  fc53		       06		      .byte.b	#%00000110
   2303  fc54		       0b		      .byte.b	#%00001011
   2304  fc55		       0f		      .byte.b	#%00001111
   2305  fc56		       04		      .byte.b	#%00000100
   2306  fc57		       08		      .byte.b	#%00001000
   2307  fc58		       0f		      .byte.b	#%00001111
   2308  fc59		       09		      .byte.b	#%00001001
   2309  fc5a		       07		      .byte.b	#%00000111
   2310  fc5b		       05		      .byte.b	#%00000101
   2311  fc5c		       00		      .byte.b	#%00000000
   2312  fc5d		       0f		      .byte.b	#%00001111
   2313  fc5e		       08		      .byte.b	#%00001000
   2314  fc5f		       0b		      .byte.b	#%00001011
   2315  fc60		       0b		      .byte.b	#%00001011
   2316  fc61		       0b		      .byte.b	#%00001011
   2317  fc62		       08		      .byte.b	#%00001000
   2318  fc63		       0f		      .byte.b	#%00001111
   2319  fc64
   2320  fd00					      org	$FD00
   2321  fd00				   Font
   2322  fd00				   C0
   2323  fd00		       e7		      .byte.b	#%11100111	;
   2324  fd01		       a5		      .byte.b	#%10100101	; 
   2325  fd02		       a5		      .byte.b	#%10100101	; 
   2326  fd03		       a5		      .byte.b	#%10100101	; 
   2327  fd04		       e7		      .byte.b	#%11100111	;	
   2328  fd05				   C1
   2329  fd05		       e7		      .byte.b	#%11100111	;
   2330  fd06		       42		      .byte.b	#%01000010	; 
   2331  fd07		       42		      .byte.b	#%01000010	; 
   2332  fd08		       42		      .byte.b	#%01000010	; 
   2333  fd09		       66		      .byte.b	#%01100110	;
   2334  fd0a				   C2
   2335  fd0a		       e7		      .byte.b	#%11100111	;
   2336  fd0b		       24		      .byte.b	#%00100100	; 
   2337  fd0c		       e7		      .byte.b	#%11100111	; 
   2338  fd0d		       81		      .byte.b	#%10000001	; 
   2339  fd0e		       e7		      .byte.b	#%11100111	;
   2340  fd0f				   C3
   2341  fd0f		       e7		      .byte.b	#%11100111	;
   2342  fd10		       81		      .byte.b	#%10000001	; 
   2343  fd11		       e7		      .byte.b	#%11100111	; 
   2344  fd12		       81		      .byte.b	#%10000001	; 
   2345  fd13		       e7		      .byte.b	#%11100111	;
   2346  fd14				   C4
   2347  fd14		       81		      .byte.b	#%10000001	;
   2348  fd15		       81		      .byte.b	#%10000001	; 
   2349  fd16		       e7		      .byte.b	#%11100111	; 
   2350  fd17		       a5		      .byte.b	#%10100101	; 
   2351  fd18		       a5		      .byte.b	#%10100101	;
   2352  fd19				   C5
   2353  fd19		       e7		      .byte.b	#%11100111	;
   2354  fd1a		       81		      .byte.b	#%10000001	; 
   2355  fd1b		       e7		      .byte.b	#%11100111	; 
   2356  fd1c		       24		      .byte.b	#%00100100	; 
   2357  fd1d		       e7		      .byte.b	#%11100111	;
   2358  fd1e				   C6
   2359  fd1e		       e7		      .byte.b	#%11100111	;
   2360  fd1f		       a5		      .byte.b	#%10100101	; 
   2361  fd20		       e7		      .byte.b	#%11100111	; 
   2362  fd21		       24		      .byte.b	#%00100100	; 
   2363  fd22		       e7		      .byte.b	#%11100111	;
   2364  fd23				   C7
   2365  fd23		       81		      .byte.b	#%10000001	;
   2366  fd24		       81		      .byte.b	#%10000001	; 
   2367  fd25		       81		      .byte.b	#%10000001	; 
   2368  fd26		       81		      .byte.b	#%10000001	; 
   2369  fd27		       e7		      .byte.b	#%11100111	;
   2370  fd28				   C8
   2371  fd28		       e7		      .byte.b	#%11100111	;
   2372  fd29		       a5		      .byte.b	#%10100101	; 
   2373  fd2a		       e7		      .byte.b	#%11100111	; 
   2374  fd2b		       a5		      .byte.b	#%10100101	; 
   2375  fd2c		       e7		      .byte.b	#%11100111	;
   2376  fd2d				   C9
   2377  fd2d		       e7		      .byte.b	#%11100111	;
   2378  fd2e		       81		      .byte.b	#%10000001	; 
   2379  fd2f		       e7		      .byte.b	#%11100111	; 
   2380  fd30		       a5		      .byte.b	#%10100101	; 
   2381  fd31		       e7		      .byte.b	#%11100111	;
   2382  fd32				   CA
   2383  fd32		       a5		      .byte.b	#%10100101	;
   2384  fd33		       a5		      .byte.b	#%10100101	; 
   2385  fd34		       e7		      .byte.b	#%11100111	; 
   2386  fd35		       a5		      .byte.b	#%10100101	; 
   2387  fd36		       e7		      .byte.b	#%11100111	;
   2388  fd37				   CB
   2389  fd37		       66		      .byte.b	#%01100110	;
   2390  fd38		       a5		      .byte.b	#%10100101	; 
   2391  fd39		       66		      .byte.b	#%01100110	; 
   2392  fd3a		       a5		      .byte.b	#%10100101	;
   2393  fd3b		       66		      .byte.b	#%01100110	;
   2394  fd3c				   CC
   2395  fd3c		       e7		      .byte.b	#%11100111	;
   2396  fd3d		       24		      .byte.b	#%00100100	; 
   2397  fd3e		       24		      .byte.b	#%00100100	; 
   2398  fd3f		       24		      .byte.b	#%00100100	;
   2399  fd40		       e7		      .byte.b	#%11100111	;
   2400  fd41
   2401  fd41				   CD
   2402  fd41		       66		      .byte.b	#%01100110	;
   2403  fd42		       a5		      .byte.b	#%10100101	; 
   2404  fd43		       a5		      .byte.b	#%10100101	; 
   2405  fd44		       a5		      .byte.b	#%10100101	;
   2406  fd45		       66		      .byte.b	#%01100110	;
   2407  fd46
   2408  fd46				   CE
   2409  fd46		       e7		      .byte.b	#%11100111	;
   2410  fd47		       24		      .byte.b	#%00100100	; 
   2411  fd48		       e7		      .byte.b	#%11100111	; 
   2412  fd49		       24		      .byte.b	#%00100100	; 
   2413  fd4a		       e7		      .byte.b	#%11100111	;
   2414  fd4b
   2415  fd4b				   CF
   2416  fd4b		       24		      .byte.b	#%00100100	;
   2417  fd4c		       24		      .byte.b	#%00100100	; 
   2418  fd4d		       e7		      .byte.b	#%11100111	; 
   2419  fd4e		       24		      .byte.b	#%00100100	; 
   2420  fd4f		       e7		      .byte.b	#%11100111	;
   2421  fd50
   2422  fd50				   CG
   2423  fd50		       c3		      .byte.b	#%11000011	;
   2424  fd51		       a5		      .byte.b	#%10100101	; 
   2425  fd52		       a5		      .byte.b	#%10100101	; 
   2426  fd53		       24		      .byte.b	#%00100100	; 
   2427  fd54		       c3		      .byte.b	#%11000011	;	
   2428  fd55
   2429  fd55				   CH
   2430  fd55		       a5		      .byte.b	#%10100101	;
   2431  fd56		       a5		      .byte.b	#%10100101	; 
   2432  fd57		       e7		      .byte.b	#%11100111	; 
   2433  fd58		       a5		      .byte.b	#%10100101	; 
   2434  fd59		       a5		      .byte.b	#%10100101	;
   2435  fd5a
   2436  fd5a				   CK
   2437  fd5a		       a5		      .byte.b	#%10100101	;
   2438  fd5b		       a5		      .byte.b	#%10100101	; 
   2439  fd5c		       66		      .byte.b	#%01100110	; 
   2440  fd5d		       a5		      .byte.b	#%10100101	; 
   2441  fd5e		       a5		      .byte.b	#%10100101	;
   2442  fd5f
   2443  fd5f				   CL
   2444  fd5f		       e7		      .byte.b	#%11100111	;
   2445  fd60		       24		      .byte.b	#%00100100	; 
   2446  fd61		       24		      .byte.b	#%00100100	; 
   2447  fd62		       24		      .byte.b	#%00100100	; 
   2448  fd63		       24		      .byte.b	#%00100100	;
   2449  fd64
   2450  fd64				   CI
   2451  fd64		       42		      .byte.b	#%01000010	;
   2452  fd65		       42		      .byte.b	#%01000010	; 
   2453  fd66		       42		      .byte.b	#%01000010	; 
   2454  fd67		       42		      .byte.b	#%01000010	; 
   2455  fd68		       42		      .byte.b	#%01000010	;
   2456  fd69
   2457  fd69				   CM
   2458  fd69		       a5		      .byte.b	#%10100101	;
   2459  fd6a		       a5		      .byte.b	#%10100101	; 
   2460  fd6b		       a5		      .byte.b	#%10100101	; 
   2461  fd6c		       e7		      .byte.b	#%11100111	; 
   2462  fd6d		       a5		      .byte.b	#%10100101	;
   2463  fd6e
   2464  fd6e				   CN
   2465  fd6e		       a5		      .byte.b	#%10100101	;
   2466  fd6f		       a5		      .byte.b	#%10100101	; 
   2467  fd70		       a5		      .byte.b	#%10100101	; 
   2468  fd71		       a5		      .byte.b	#%10100101	; 
   2469  fd72		       66		      .byte.b	#%01100110	;	
   2470  fd73
   2471  fd73
   2472  fd73				   CO
   2473  fd73		       42		      .byte.b	#%01000010	;
   2474  fd74		       a5		      .byte.b	#%10100101	; 
   2475  fd75		       a5		      .byte.b	#%10100101	; 
   2476  fd76		       a5		      .byte.b	#%10100101	; 
   2477  fd77		       42		      .byte.b	#%01000010	;	
   2478  fd78
   2479  fd78				   CP
   2480  fd78		       24		      .byte.b	#%00100100	;
   2481  fd79		       24		      .byte.b	#%00100100	; 
   2482  fd7a		       e7		      .byte.b	#%11100111	; 
   2483  fd7b		       a5		      .byte.b	#%10100101	; 
   2484  fd7c		       e7		      .byte.b	#%11100111	;
   2485  fd7d
   2486  fd7d				   CR
   2487  fd7d		       a5		      .byte.b	#%10100101	;
   2488  fd7e		       a5		      .byte.b	#%10100101	; 
   2489  fd7f		       66		      .byte.b	#%01100110	; 
   2490  fd80		       a5		      .byte.b	#%10100101	; 
   2491  fd81		       66		      .byte.b	#%01100110	;
   2492  fd82
   2493  fd82				   CS
   2494  fd82		       66		      .byte.b	#%01100110	;
   2495  fd83		       81		      .byte.b	#%10000001	; 
   2496  fd84		       42		      .byte.b	#%01000010	; 
   2497  fd85		       24		      .byte.b	#%00100100	; 
   2498  fd86		       c3		      .byte.b	#%11000011	;
   2499  fd87
   2500  fd87				   CT
   2501  fd87		       42		      .byte.b	#%01000010	;
   2502  fd88		       42		      .byte.b	#%01000010	; 
   2503  fd89		       42		      .byte.b	#%01000010	; 
   2504  fd8a		       42		      .byte.b	#%01000010	; 
   2505  fd8b		       e7		      .byte.b	#%11100111	;
   2506  fd8c
   2507  fd8c				   CV
   2508  fd8c		       42		      .byte.b	#%01000010	;
   2509  fd8d		       a5		      .byte.b	#%10100101	; 
   2510  fd8e		       a5		      .byte.b	#%10100101	; 
   2511  fd8f		       a5		      .byte.b	#%10100101	; 
   2512  fd90		       a5		      .byte.b	#%10100101	;	
   2513  fd91
   2514  fd91				   CY
   2515  fd91		       42		      .byte.b	#%01000010	;
   2516  fd92		       42		      .byte.b	#%01000010	; 
   2517  fd93		       42		      .byte.b	#%01000010	; 
   2518  fd94		       a5		      .byte.b	#%10100101	; 
   2519  fd95		       a5		      .byte.b	#%10100101	;
   2520  fd96
   2521  fd96				   CW
   2522  fd96		       a5		      .byte.b	#%10100101	;
   2523  fd97		       e7		      .byte.b	#%11100111	; 
   2524  fd98		       a5		      .byte.b	#%10100101	; 
   2525  fd99		       a5		      .byte.b	#%10100101	; 
   2526  fd9a		       a5		      .byte.b	#%10100101	;
   2527  fd9b
   2528  fd9b				   CZ
   2529  fd9b		       e7		      .byte.b	#%11100111	;
   2530  fd9c		       24		      .byte.b	#%00100100	; 
   2531  fd9d		       42		      .byte.b	#%01000010	; 
   2532  fd9e		       81		      .byte.b	#%10000001	; 
   2533  fd9f		       e7		      .byte.b	#%11100111	;
   2534  fda0
   2535  fda0				   Pipe
   2536  fda0		       42		      .byte.b	#%01000010	;
   2537  fda1		       00		      .byte.b	#%00000000	; 
   2538  fda2		       42		      .byte.b	#%01000010	; 
   2539  fda3		       00		      .byte.b	#%00000000	; 
   2540  fda4		       42		      .byte.b	#%01000010	;
   2541  fda5
   2542  fda5				   Exclamation
   2543  fda5		       42		      .byte.b	#%01000010	;
   2544  fda6		       00		      .byte.b	#%00000000	; 
   2545  fda7		       42		      .byte.b	#%01000010	; 
   2546  fda8		       42		      .byte.b	#%01000010	; 
   2547  fda9		       42		      .byte.b	#%01000010	;
   2548  fdaa
   2549  fdaa				   Dot
   2550  fdaa		       42		      .byte.b	#%01000010	;
   2551  fdab		       42		      .byte.b	#%01000010	; 
   2552  fdac		       00		      .byte.b	#%00000000	; 
   2553  fdad		       00		      .byte.b	#%00000000	; 
   2554  fdae		       00		      .byte.b	#%00000000	;
   2555  fdaf
   2556  fdaf				   Colon
   2557  fdaf		       42		      .byte.b	#%01000010	;
   2558  fdb0		       42		      .byte.b	#%01000010	; 
   2559  fdb1		       00		      .byte.b	#%00000000	; 
   2560  fdb2		       42		      .byte.b	#%01000010	; 
   2561  fdb3		       42		      .byte.b	#%01000010	;
   2562  fdb4
   2563  fdb4				   Triangle
   2564  fdb4		       81		      .byte.b	#%10000001	;
   2565  fdb5		       c3		      .byte.b	#%11000011	; 
   2566  fdb6		       e7		      .byte.b	#%11100111	; 
   2567  fdb7		       c3		      .byte.b	#%11000011	; 
   2568  fdb8		       81		      .byte.b	#%10000001	;
   2569  fdb9
   2570  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2571  fdb9		       00		      .byte.b	#0	;
   2572  fdba		       00		      .byte.b	#0	;
   2573  fdbb		       00		      .byte.b	#0	;
   2574  fdbc		       00		      .byte.b	#0	;
   2575  fdbd		       00		      .byte.b	#0	;
   2576  fdbe
   2577  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2578  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2579  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2580  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2581  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2582  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2583  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2584  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2585  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2586  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2587  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2588  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2589  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2590  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2591  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2592  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2593  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2594  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2595  fdcf
   2596  fdcf				   EngineSoundType
   2597  fdcf		       02		      .byte.b	#2
   2598  fdd0		       02		      .byte.b	#2
   2599  fdd1		       0e		      .byte.b	#14
   2600  fdd2		       06		      .byte.b	#6
   2601  fdd3		       06		      .byte.b	#6
   2602  fdd4		       0e		      .byte.b	#14
   2603  fdd5
   2604  fdd5				   EngineBaseFrequence
   2605  fdd5		       1f		      .byte.b	#31
   2606  fdd6		       15		      .byte.b	#21
   2607  fdd7		       14		      .byte.b	#20
   2608  fdd8		       1f		      .byte.b	#31
   2609  fdd9		       16		      .byte.b	#22
   2610  fdda		       03		      .byte.b	#3
   2611  fddb
   2612  fddb				   TachometerSizeLookup1
   2613  fddb		       1f		      .byte.b	#%00011111
   2614  fddc		       3f		      .byte.b	#%00111111
   2615  fddd		       7f		      .byte.b	#%01111111
   2616  fdde		       ff		      .byte.b	#%11111111
   2617  fddf		       ff		      .byte.b	#%11111111
   2618  fde0		       ff		      .byte.b	#%11111111
   2619  fde1		       ff		      .byte.b	#%11111111
   2620  fde2		       ff		      .byte.b	#%11111111
   2621  fde3
   2622  fde3				   TachometerSizeLookup2
   2623  fde3		       00		      .byte.b	#%00000000
   2624  fde4		       00		      .byte.b	#%00000000
   2625  fde5		       00		      .byte.b	#%00000000
   2626  fde6		       00		      .byte.b	#%00000000
   2627  fde7		       80		      .byte.b	#%10000000
   2628  fde8		       c0		      .byte.b	#%11000000
   2629  fde9		       e0		      .byte.b	#%11100000
   2630  fdea		       f0		      .byte.b	#%11110000
   2631  fdeb
   2632  fdeb				   TachometerGearLookup
   2633  fdeb		       01		      .byte.b	#%00000001
   2634  fdec		       02		      .byte.b	#%00000010
   2635  fded		       04		      .byte.b	#%00000100
   2636  fdee		       08		      .byte.b	#%00001000
   2637  fdef		       10		      .byte.b	#%00010000
   2638  fdf0		       30		      .byte.b	#%00110000
   2639  fdf1
   2640  fe00					      org	$FE00
   2641  fe00				   AesTable
   2642  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2643  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2644  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2645  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2646  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2647  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2648  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2649  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2650  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2651  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2652  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2653  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2654  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2655  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2656  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2657  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2658  ff00
   2659  ff00							; From FF00 to FFFB (122 bytes) to use here
   2660  ff00
   2661  ff00				   StaticText		; All static text must be on the same MSB block. 
   2662  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2663  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2664  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2665  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2666  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2667  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2668  ff05
   2669  ff05				   HellwayLeftText
   2670  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2671  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2672  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2673  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2674  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2675  ff0a
   2676  ff0a				   HellwayRightText
   2677  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2678  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2679  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2680  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2681  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2682  ff0f
   2683  ff0f				   OpbText
   2684  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2685  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2686  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2687  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2688  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2689  ff14
   2690  ff14				   YearText
   2691  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2692  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2693  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2694  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2695  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2696  ff19
   2697  ff19				   GameText
   2698  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2699  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2700  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2701  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2702  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2703  ff1e
   2704  ff1e				   OverText
   2705  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2706  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2707  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2708  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2709  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2710  ff23				   GoText
   2711  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2712  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2713  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2714  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2715  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2716  ff28
   2717  ff28				   ZeldaTextLeft
   2718  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2719  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2720  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2721  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2722  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2723  ff2d
   2724  ff2d				   ZeldaTextRight
   2725  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2726  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2727  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2728  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2729  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2730  ff32
   2731  ff32				   ZeldaDateLeft
   2732  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2733  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2734  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2735  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2736  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2737  ff37
   2738  ff37				   ZeldaDateRight
   2739  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2740  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2741  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2742  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2743  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2744  ff3c
   2745  ff3c				   PolvinhosTextLeft
   2746  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2747  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2748  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2749  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2750  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2751  ff41
   2752  ff41				   PolvinhosTextRight
   2753  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2754  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2755  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2756  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2757  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2758  ff46
   2759  ff46				   PolvinhosDateLeft
   2760  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2761  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2762  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2763  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2764  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2765  ff4b
   2766  ff4b				   PolvinhosDateRight
   2767  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2768  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2769  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2770  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2771  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2772  ff50
   2773  ff50				   IvonneTextLeft
   2774  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2775  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2776  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2777  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2778  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2779  ff55
   2780  ff55				   IvonneTextRight
   2781  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2782  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2783  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2784  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2785  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2786  ff5a
   2787  ff5a				   IvonneDateLeft
   2788  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2789  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2790  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2791  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2792  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2793  ff5f
   2794  ff5f				   IvonneDateRight
   2795  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2796  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2797  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2798  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2799  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2800  ff64
   2801  ff64				   PaperArtTextLeft
   2802  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2803  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2804  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2805  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2806  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2807  ff69
   2808  ff69				   PaperArtTextRight
   2809  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2810  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2811  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2812  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2813  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2814  ff6e
   2815  ff6e				   LeonardoTextLeft
   2816  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2817  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2818  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2819  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2820  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2821  ff73
   2822  ff73				   LeonardoTextRight
   2823  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2824  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2825  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2826  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2827  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2828  ff78
   2829  ff78				   VersionText
   2830  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2831  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2832  ff7a		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2833  ff7b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2834  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2835  ff7d
   2836  ff7d
   2837  ff7d				   EndStaticText
   2838  ff7d
   2839  ff7d				   CarSprite0		; Upside down, Original Car
   2840  ff7d		       00 00 00 00*	      ds	7
   2841  ff84		       7e		      .byte.b	#%01111110
   2842  ff85		       24		      .byte.b	#%00100100
   2843  ff86		       bd		      .byte.b	#%10111101
   2844  ff87		       3c		      .byte.b	#%00111100
   2845  ff88		       bd		      .byte.b	#%10111101
   2846  ff89		       3c		      .byte.b	#%00111100
   2847  ff8a
   2848  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2849  ff8a		       00 00 00 00*	      ds	7
   2850  ff91		       bd		      .byte.b	#%10111101
   2851  ff92		       7e		      .byte.b	#%01111110
   2852  ff93		       5a		      .byte.b	#%01011010
   2853  ff94		       66		      .byte.b	#%01100110
   2854  ff95		       bd		      .byte.b	#%10111101
   2855  ff96		       3c		      .byte.b	#%00111100
   2856  ff97
   2857  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2858  ff97		       00 00 00 00*	      ds	7
   2859  ff9e		       7e		      .byte.b	#%01111110
   2860  ff9f		       a5		      .byte.b	#%10100101
   2861  ffa0		       42		      .byte.b	#%01000010
   2862  ffa1		       42		      .byte.b	#%01000010
   2863  ffa2		       bd		      .byte.b	#%10111101
   2864  ffa3		       7e		      .byte.b	#%01111110
   2865  ffa4
   2866  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2867  ffa4		       00 00 00 00*	      ds	7
   2868  ffab		       3c		      .byte.b	#%00111100
   2869  ffac		       db		      .byte.b	#%11011011
   2870  ffad		       db		      .byte.b	#%11011011
   2871  ffae		       3c		      .byte.b	#%00111100
   2872  ffaf		       5a		      .byte.b	#%01011010
   2873  ffb0		       3c		      .byte.b	#%00111100
   2874  ffb1
   2875  ffb1				   TrafficSpeeds
   2876  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2877  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2878  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2879  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2880  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2881  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2882  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2883  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2884  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2885  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2886  ffbb				   TrafficSpeedsHighDelta
   2887  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2888  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2889  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2890  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2891  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2892  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2893  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2894  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2895  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2896  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2897  ffc5
   2898  ffc5				   CarIdToSpriteAddressL
   2899  ffc5		       7d		      .byte.b	#<CarSprite0
   2900  ffc6		       8a		      .byte.b	#<CarSprite1
   2901  ffc7		       97		      .byte.b	#<CarSprite2
   2902  ffc8		       a4		      .byte.b	#<CarSprite3
   2903  ffc9
   2904  ffc9				   CarIdToSpriteAddressH
   2905  ffc9		       ff		      .byte.b	#>CarSprite0
   2906  ffca		       ff		      .byte.b	#>CarSprite1
   2907  ffcb		       ff		      .byte.b	#>CarSprite2
   2908  ffcc		       ff		      .byte.b	#>CarSprite3
   2909  ffcd
   2910  ffcd				   CarIdToAccelerateSpeed
   2911  ffcd		       01		      .byte.b	#1
   2912  ffce		       01		      .byte.b	#1
   2913  ffcf		       01		      .byte.b	#1
   2914  ffd0		       02		      .byte.b	#2
   2915  ffd1
   2916  ffd1
   2917  fffc					      org	$FFFC
   2918  fffc		       00 f0		      .word.w	BeforeStart
   2919  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
