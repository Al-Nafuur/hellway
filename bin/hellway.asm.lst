------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     25  f000
     26  f000		       00 00	   CAR_ID_DEFAULT =	0
     27  f000		       00 01	   CAR_ID_HATCHBACK =	1
     28  f000		       00 02	   CAR_ID_SEDAN =	2
     29  f000		       00 03	   CAR_ID_DRAGSTER =	3
     30  f000
     31  f000		       00 0a	   BREAK_SPEED =	10
     32  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     33  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     34  f000
     35  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     36  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     37  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     38  f000
     39  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     40  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     41  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     42  f000
     43  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     44  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     45  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     46  f000
     47  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     48  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     49  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     50  f000
     51  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     52  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     53  f000
     54  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     55  f000
     56  f000		       00 96	   PLAYER1_COLOR =	$96
     57  f000
     58  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     59  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     62  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     63  f000
     64  f000		       00 35	   PLAYER_0_X_START =	$35	;
     65  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     66  f000
     67  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     68  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     69  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     70  f000
     71  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     72  f000
     73  f000		       00 00	   BLACK      =	$00	;
     74  f000
     75  f000		       00 10	   MAX_GAME_MODE =	16
     76  f000
     77  f000		       00 08	   PARALLAX_SIZE =	8
     78  f000
     79  f000		       00 05	   HALF_TEXT_SIZE =	5
     80  f000
     81  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     82  f000
     83  f000		       00 49	   VERSION_COLOR =	$49
     84  f000
     85  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     86  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     87  f000		       00 00	   QR_CODE_COLOR =	$00
     88  f000		       00 19	   QR_CODE_SIZE =	25
     89  f000
     90  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     91  f000
     92  f000		       00 80	   GRP0Cache  =	$80
     93  f000		       00 81	   PF0Cache   =	$81
     94  f000		       00 82	   PF1Cache   =	$82
     95  f000		       00 83	   PF2Cache   =	$83
     96  f000		       00 84	   GRP1Cache  =	$84
     97  f000		       00 85	   ENABLCache =	$85
     98  f000		       00 86	   ENAM0Cache =	$86
     99  f000		       00 87	   ENAM1Cache =	$87
    100  f000
    101  f000		       00 88	   ParallaxMode =	$88
    102  f000
    103  f000		       00 8c	   FrameCount0 =	$8C	;
    104  f000		       00 8d	   FrameCount1 =	$8D	;
    105  f000
    106  f000		       00 8e	   Player0SpeedL =	$8E
    107  f000		       00 8f	   Player0SpeedH =	$8F
    108  f000
    109  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    110  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    111  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    112  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    113  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    114  f000
    115  f000		       00 a4	   CheckpointBcd0 =	$A4
    116  f000		       00 a5	   CheckpointBcd1 =	$A5
    117  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    118  f000		       00 a7	   CarSpritePointerL =	$A7
    119  f000		       00 a8	   CarSpritePointerH =	$A8
    120  f000		       00 a9	   CurrentCarId =	$A9
    121  f000		       00 aa	   AccelerateBuffer =	$AA	; Chnage speed on buffer overflow.
    122  f000
    123  f000							;Temporary variables, multiple uses
    124  f000		       00 b0	   Tmp0       =	$B0
    125  f000		       00 b1	   Tmp1       =	$B1
    126  f000		       00 b2	   Tmp2       =	$B2
    127  f000		       00 b3	   Tmp3       =	$B3
    128  f000
    129  f000		       00 b4	   ScoreBcd0  =	$B4
    130  f000		       00 b5	   ScoreBcd1  =	$B5
    131  f000		       00 b6	   ScoreBcd2  =	$B6
    132  f000		       00 b7	   ScoreBcd3  =	$B7
    133  f000
    134  f000		       00 b8	   CollisionCounter =	$B8
    135  f000		       00 b9	   Player0X   =	$B9
    136  f000		       00 ba	   CountdownTimer =	$BA
    137  f000		       00 bb	   Traffic0Msb =	$BB
    138  f000		       00 bc	   SwitchDebounceCounter =	$BC
    139  f000
    140  f000		       00 bd	   TimeBcd0   =	$BD
    141  f000		       00 be	   TimeBcd1   =	$BE
    142  f000		       00 bf	   TimeBcd2   =	$BF
    143  f000
    144  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    145  f000		       00 c1	   TrafficChance =	$C1
    146  f000		       00 c2	   CheckpointTime =	$C2
    147  f000		       00 c3	   TrafficColor =	$C3
    148  f000		       00 c4	   CurrentDifficulty =	$C4
    149  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    150  f000							;Bit 2 speed delta, Bit 3 random traffic 
    151  f000
    152  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    153  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    154  f000
    155  f000		       00 ca	   BorderType =	$CA
    156  f000
    157  f000		       00 cb	   HitCountBcd0 =	$CB
    158  f000		       00 cc	   HitCountBcd1 =	$CC
    159  f000
    160  f000		       00 cd	   GlideTimeBcd0 =	$CD
    161  f000		       00 ce	   GlideTimeBcd1 =	$CE
    162  f000
    163  f000		       00 cf	   OneSecondConter =	$CF
    164  f000
    165  f000		       00 d0	   ScoreD0    =	$D0
    166  f000		       00 d1	   ScoreD1    =	$D1
    167  f000		       00 d2	   ScoreD2    =	$D2
    168  f000		       00 d3	   ScoreD3    =	$D3
    169  f000		       00 d4	   ScoreD4    =	$D4
    170  f000		       00 d5	   ScoreFontColor =	$D5
    171  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    172  f000		       00 d7	   NextCheckpoint =	$D7
    173  f000
    174  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    175  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    176  f000
    177  f000
    178  f000							;generic start up stuff, put zero in almost all...
    179  f000				   BeforeStart		;All variables that are kept on game reset or select
    180  f000		       a0 00		      LDY	#0
    181  f002		       84 bc		      STY	SwitchDebounceCounter
    182  f004		       84 c4		      STY	CurrentDifficulty
    183  f006		       84 c0		      STY	GameStatus
    184  f008		       a0 10		      LDY	#16
    185  f00a		       84 c5		      STY	GameMode
    186  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    187  f00e		       84 88		      STY	ParallaxMode
    188  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    189  f012		       84 a9		      STY	CurrentCarId
    190  f014
    191  f014				   Start
    192  f014		       78		      SEI
    193  f015		       d8		      CLD
    194  f016		       a2 ff		      LDX	#$FF
    195  f018		       9a		      TXS
    196  f019		       a9 00		      LDA	#0
    197  f01b				   ClearMem
    198  f01b		       e0 bc		      CPX	#SwitchDebounceCounter
    199  f01d		       f0 16		      BEQ	SkipClean
    200  f01f		       e0 c5		      CPX	#GameMode
    201  f021		       f0 12		      BEQ	SkipClean
    202  f023		       e0 88		      CPX	#ParallaxMode
    203  f025		       f0 0e		      BEQ	SkipClean
    204  f027		       e0 a9		      CPX	#CurrentCarId
    205  f029		       f0 0a		      BEQ	SkipClean
    206  f02b		       e0 c4		      CPX	#CurrentDifficulty
    207  f02d		       f0 06		      BEQ	SkipClean
    208  f02f		       e0 c0		      CPX	#GameStatus
    209  f031		       f0 02		      BEQ	SkipClean
    210  f033		       95 00		      STA	0,X
    211  f035				   SkipClean
    212  f035		       ca		      DEX
    213  f036		       d0 e3		      BNE	ClearMem
    214  f038
    215  f038							;Setting some variables...
    216  f038
    217  f038				   SettingTrafficOffsets		; Time sensitive with player H position
    218  f038		       85 02		      STA	WSYNC	;We will set player position
    219  f03a		       20 ac f7 	      JSR	DefaultOffsets
    220  f03d
    221  f03d		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    222  f040		       85 8e		      STA	Player0SpeedL
    223  f042
      0  f042					      SLEEP	11	;18
      1  f042				   .CYCLES    SET	11
      2  f042
      3  f042				  -	      IF	.CYCLES < 2
      4  f042				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f042				  -	      ERR
      6  f042					      ENDIF
      7  f042
      8  f042					      IF	.CYCLES & 1
      9  f042				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f042				  -	      nop	0
     11  f042					      ELSE
     12  f042		       24 00		      bit	VSYNC
     13  f044					      ENDIF
     14  f044				   .CYCLES    SET	.CYCLES - 3
     15  f044					      ENDIF
     16  f044
     17  f044					      REPEAT	.CYCLES / 2
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     19  f048					      REPEND
    225  f048		       85 10		      STA	RESP0
    226  f04a
    227  f04a		       a2 00		      LDX	#0
    228  f04c		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    229  f04f		       85 a6		      STA	StartSWCHB	; For game over
    230  f051		       29 c0		      AND	#%11000000
    231  f053		       f0 0b		      BEQ	CallConfigureDifficulty
    232  f055		       e8		      INX
    233  f056		       c9 80		      CMP	#%10000000
    234  f058		       f0 06		      BEQ	CallConfigureDifficulty
    235  f05a		       e8		      INX
    236  f05b		       c9 40		      CMP	#%01000000
    237  f05d		       f0 01		      BEQ	CallConfigureDifficulty
    238  f05f		       e8		      INX
    239  f060
    240  f060				   CallConfigureDifficulty
    241  f060		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    242  f062		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    243  f064		       a5 c0		      LDA	GameStatus
    244  f066		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    245  f068				   NextCar
    246  f068		       a4 a9		      LDY	CurrentCarId
    247  f06a		       c8		      INY
    248  f06b		       98		      TYA
    249  f06c		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    250  f06e		       85 a9		      STA	CurrentCarId
    251  f070				   StoreCurrentDifficulty
    252  f070		       86 c4		      STX	CurrentDifficulty
    253  f072		       20 64 f7 	      JSR	ConfigureDifficulty
    254  f075
    255  f075				   ConfigureCarSprite
    256  f075		       a4 a9		      LDY	CurrentCarId
    257  f077		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    258  f07a		       85 a7		      STA	CarSpritePointerL
    259  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    260  f07f		       85 a8		      STA	CarSpritePointerH
    261  f081
    262  f081				   SetGameNotRunning
    263  f081		       a9 00		      LDA	#0
    264  f083		       85 c0		      STA	GameStatus
    265  f085
    266  f085				   ConfigureOneSecondTimer
    267  f085		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    268  f087		       85 cf		      STA	OneSecondConter
    269  f089
    270  f089				   HPositioning
    271  f089		       85 02		      STA	WSYNC
    272  f08b
    273  f08b		       a9 30		      LDA	#%00110000	;2 Missile Size
    274  f08d		       85 04		      STA	NUSIZ0	;3
    275  f08f		       85 05		      STA	NUSIZ1	;3
    276  f091
    277  f091		       a9 35		      LDA	#PLAYER_0_X_START	;2
    278  f093		       85 b9		      STA	Player0X	;3
    279  f095
    280  f095		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f097		       85 ba		      STA	CountdownTimer	;3
    282  f099
    283  f099		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    284  f09b		       85 d7		      STA	NextCheckpoint
    285  f09d
    286  f09d		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f09f					      SLEEP	11	;
      1  f09f				   .CYCLES    SET	11
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f					      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f					      ELSE
     12  f09f		       24 00		      bit	VSYNC
     13  f0a1					      ENDIF
     14  f0a1				   .CYCLES    SET	.CYCLES - 3
     15  f0a1					      ENDIF
     16  f0a1
     17  f0a1					      REPEAT	.CYCLES / 2
     18  f0a1		       ea		      nop
     17  f0a1					      REPEND
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     17  f0a3					      REPEND
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    288  f0a5		       85 11		      STA	RESP1
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    290  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2	;
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    292  f0ab		       85 12		      STA	RESM0
      0  f0ad					      SLEEP	2
      1  f0ad				   .CYCLES    SET	2
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad				  -	      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad				  -	      ELSE
     12  f0ad				  -	      bit	VSYNC
     13  f0ad				  -	      ENDIF
     14  f0ad				  -.CYCLES    SET	.CYCLES - 3
     15  f0ad					      ENDIF
     16  f0ad
     17  f0ad					      REPEAT	.CYCLES / 2
     18  f0ad		       ea		      nop
     19  f0ae					      REPEND
    294  f0ae		       85 13		      STA	RESM1
    295  f0b0
    296  f0b0		       a9 f0		      LDA	#$F0
    297  f0b2		       85 24		      STA	HMBL
    298  f0b4		       85 22		      STA	HMM0
    299  f0b6		       85 23		      STA	HMM1
    300  f0b8		       85 02		      STA	WSYNC
    301  f0ba		       85 2a		      STA	HMOVE
    302  f0bc		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    303  f0be		       85 2b		      STA	HMCLR
    304  f0c0
    305  f0c0							;SLEEP 24
    306  f0c0							;STA HMCLR
    307  f0c0
    308  f0c0							;VSYNC time
    309  f0c0				   MainLoop
    310  f0c0		       a9 02		      LDA	#2
    311  f0c2		       85 00		      STA	VSYNC
    312  f0c4		       85 02		      STA	WSYNC
    313  f0c6		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    314  f0c8		       85 2a		      STA	HMOVE	;2
    315  f0ca		       85 02		      STA	WSYNC	;3
    316  f0cc		       a9 29		      LDA	#41	;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    317  f0ce		       8d 96 02 	      STA	TIM64T	;3	
    318  f0d1		       a9 00		      LDA	#0	;2
    319  f0d3		       85 00		      STA	VSYNC	;3	
    320  f0d5
    321  f0d5							;Read Fire Button before, will make it start the game for now.
    322  f0d5				   StartGame
    323  f0d5		       a5 0c		      LDA	INPT4	;3
    324  f0d7		       30 2e		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    325  f0d9		       a5 c0		      LDA	GameStatus	;3
    326  f0db		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
    327  f0dd		       d0 28		      BNE	SkipGameStart
    328  f0df		       a5 c5		      LDA	GameMode
    329  f0e1		       c9 10		      CMP	#MAX_GAME_MODE
    330  f0e3		       d0 0b		      BNE	SetGameRunning
    331  f0e5		       a9 00		      LDA	#0
    332  f0e7		       85 c5		      STA	GameMode
    333  f0e9		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    334  f0eb		       85 bc		      STA	SwitchDebounceCounter
    335  f0ed		       4c 07 f1 	      JMP	SkipGameStart
    336  f0f0				   SetGameRunning
    337  f0f0		       e6 c0		      INC	GameStatus
    338  f0f2		       a9 00		      LDA	#0	;
    339  f0f4		       85 8c		      STA	FrameCount0
    340  f0f6		       85 8d		      STA	FrameCount1
    341  f0f8		       a9 0a		      LDA	#10
    342  f0fa		       85 19		      STA	AUDV0
    343  f0fc		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    344  f0fe		       85 d5		      STA	ScoreFontColor
    345  f100		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    346  f102		       85 d6		      STA	ScoreFontColorHoldChange
    347  f104		       4c 83 f1 	      JMP	SkipIncFC1	; Make the worse case stable
    348  f107				   SkipGameStart
    349  f107
    350  f107				   RandomizeGame
    351  f107		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    352  f109		       d0 30		      BNE	EndRandomizeGame
    353  f10b		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    354  f10d		       29 02		      AND	#%00000010
    355  f10f		       f0 27		      BEQ	DeterministicGame
    356  f111		       a6 96		      LDX	TrafficOffset1 + 2
    357  f113		       bd 00 fe 	      LDA	AesTable,X
    358  f116		       45 8c		      EOR	FrameCount0
    359  f118		       85 96		      STA	TrafficOffset1 + 2
    360  f11a		       a6 9a		      LDX	TrafficOffset2 + 2
    361  f11c		       bd 00 fe 	      LDA	AesTable,X
    362  f11f		       45 8c		      EOR	FrameCount0
    363  f121		       85 9a		      STA	TrafficOffset2 + 2
    364  f123		       a6 9e		      LDX	TrafficOffset3 + 2
    365  f125		       bd 00 fe 	      LDA	AesTable,X
    366  f128		       45 8c		      EOR	FrameCount0
    367  f12a		       85 9e		      STA	TrafficOffset3 + 2
    368  f12c		       a6 a2		      LDX	TrafficOffset4 + 2
    369  f12e		       bd 00 fe 	      LDA	AesTable,X
    370  f131		       45 8c		      EOR	FrameCount0
    371  f133		       85 a2		      STA	TrafficOffset4 + 2
    372  f135		       4c 3b f1 	      JMP	EndRandomizeGame
    373  f138
    374  f138				   DeterministicGame
    375  f138		       20 ac f7 	      JSR	DefaultOffsets
    376  f13b
    377  f13b				   EndRandomizeGame
    378  f13b
    379  f13b				   ReadSwitches
    380  f13b		       a6 bc		      LDX	SwitchDebounceCounter
    381  f13d		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    382  f13f		       a9 01		      LDA	#%00000001
    383  f141		       2c 82 02 	      BIT	SWCHB
    384  f144		       d0 07		      BNE	SkipReset
    385  f146		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    386  f148		       85 bc		      STA	SwitchDebounceCounter
    387  f14a		       4c 14 f0 	      JMP	Start
    388  f14d				   SkipReset
    389  f14d
    390  f14d				   GameModeSelect
    391  f14d		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    392  f14f		       d0 27		      BNE	SkipGameSelect
    393  f151		       20 64 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    394  f154				   ReadDpadParallax
    395  f154		       ad 80 02 	      LDA	SWCHA
    396  f157		       29 f0		      AND	#%11110000
    397  f159		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    398  f15b		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    399  f15d		       85 88		      STA	ParallaxMode
    400  f15f				   ContinueGameSelect
    401  f15f		       a9 02		      LDA	#%00000010
    402  f161		       2c 82 02 	      BIT	SWCHB
    403  f164		       d0 12		      BNE	SkipGameSelect
    404  f166		       a6 c5		      LDX	GameMode
    405  f168		       e0 10		      CPX	#MAX_GAME_MODE
    406  f16a		       f0 04		      BEQ	ResetGameMode
    407  f16c		       e8		      INX
    408  f16d		       4c 72 f1 	      JMP	StoreGameMode
    409  f170				   ResetGameMode
    410  f170		       a2 00		      LDX	#0
    411  f172				   StoreGameMode
    412  f172		       86 c5		      STX	GameMode
    413  f174		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    414  f176		       85 bc		      STA	SwitchDebounceCounter
    415  f178				   SkipGameSelect
    416  f178		       4c 7d f1 	      JMP	EndReadSwitches
    417  f17b				   DecrementSwitchDebounceCounter
    418  f17b		       c6 bc		      DEC	SwitchDebounceCounter
    419  f17d				   EndReadSwitches
    420  f17d
    421  f17d				   CountFrame
    422  f17d		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    423  f17f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    424  f181		       e6 8d		      INC	FrameCount1	; 5 Still not used
    425  f183				   SkipIncFC1
    426  f183
    427  f183				   CallDrawQrCode
    428  f183		       a5 c5		      LDA	GameMode
    429  f185		       c9 10		      CMP	#MAX_GAME_MODE
    430  f187		       d0 03		      BNE	TestIsGameRunning
    431  f189		       4c 65 fb 	      JMP	DrawQrCode
    432  f18c
    433  f18c							;Does not update the game if not running
    434  f18c				   TestIsGameRunning
    435  f18c		       a5 c0		      LDA	GameStatus	;3
    436  f18e		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    437  f190		       4c 88 f3 	      JMP	SkipUpdateLogic
    438  f193				   ContinueWithGameLogic
    439  f193
    440  f193
    441  f193				   EverySecond		; 64 frames to be more precise
    442  f193		       a9 3f		      LDA	#%00111111
    443  f195		       25 8c		      AND	FrameCount0
    444  f197		       d0 06		      BNE	SkipEverySecondAction
    445  f199		       c5 ba		      CMP	CountdownTimer
    446  f19b		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    447  f19d		       c6 ba		      DEC	CountdownTimer
    448  f19f				   SkipEverySecondAction
    449  f19f
    450  f19f
    451  f19f				   BreakOnTimeOver		; Uses LDX as the breaking speed
    452  f19f		       a2 00		      LDX	#0
    453  f1a1		       a5 ba		      LDA	CountdownTimer
    454  f1a3		       d0 0b		      BNE	Break
    455  f1a5		       a4 a9		      LDY	CurrentCarId
    456  f1a7		       a5 8c		      LDA	FrameCount0
    457  f1a9		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    458  f1ac		       d0 02		      BNE	Break
    459  f1ae		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    460  f1b0
    461  f1b0				   Break
    462  f1b0		       a9 20		      LDA	#%00100000	;Down in controller
    463  f1b2		       2c 80 02 	      BIT	SWCHA
    464  f1b5		       d0 0b		      BNE	BreakNonZero
    465  f1b7		       a5 0c		      LDA	INPT4	;3
    466  f1b9		       10 05		      BPL	BreakWhileAccelerating
    467  f1bb		       a2 0a		      LDX	#BREAK_SPEED
    468  f1bd		       4c c2 f1 	      JMP	BreakNonZero
    469  f1c0				   BreakWhileAccelerating		; Allow better control while breaking.
    470  f1c0		       a2 05		      LDX	#BREAK_SPEED / 2
    471  f1c2
    472  f1c2				   BreakNonZero
    473  f1c2		       e0 00		      CPX	#0
    474  f1c4		       f0 2b		      BEQ	SkipBreak
    475  f1c6		       86 b0		      STX	Tmp0
    476  f1c8
    477  f1c8				   DecreaseSpeed
    478  f1c8		       38		      SEC
    479  f1c9		       a5 8e		      LDA	Player0SpeedL
    480  f1cb		       e5 b0		      SBC	Tmp0
    481  f1cd		       85 8e		      STA	Player0SpeedL
    482  f1cf		       a5 8f		      LDA	Player0SpeedH
    483  f1d1		       e9 00		      SBC	#0
    484  f1d3		       85 8f		      STA	Player0SpeedH
    485  f1d5
    486  f1d5				   CheckMinSpeed
    487  f1d5		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    488  f1d7		       c9 00		      CMP	#CAR_MIN_SPEED_H
    489  f1d9		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    490  f1db		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    491  f1dd
    492  f1dd				   CompareLBreakSpeed
    493  f1dd		       a5 8e		      LDA	Player0SpeedL
    494  f1df		       c9 00		      CMP	#CAR_MIN_SPEED_L
    495  f1e1		       90 03		      BCC	ResetMinSpeed	; Less than memory
    496  f1e3		       4c ee f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    497  f1e6
    498  f1e6				   ResetMinSpeed
    499  f1e6		       a9 00		      LDA	#CAR_MIN_SPEED_H
    500  f1e8		       85 8f		      STA	Player0SpeedH
    501  f1ea		       a9 00		      LDA	#CAR_MIN_SPEED_L
    502  f1ec		       85 8e		      STA	Player0SpeedL
    503  f1ee
    504  f1ee				   SkipAccelerateIfBreaking
    505  f1ee		       4c 33 f2 	      JMP	SkipAccelerate
    506  f1f1				   SkipBreak
    507  f1f1
    508  f1f1				   Acelerates
    509  f1f1		       a5 ba		      LDA	CountdownTimer
    510  f1f3		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    511  f1f5
    512  f1f5				   ContinueAccelerateTest
    513  f1f5		       a5 0c		      LDA	INPT4	;3
    514  f1f7		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    515  f1f9		       a9 10		      LDA	#%00010000	;UP in controller
    516  f1fb		       2c 80 02 	      BIT	SWCHA
    517  f1fe		       d0 33		      BNE	SkipAccelerate
    518  f200
    519  f200				   IncreaseCarSpeed
    520  f200		       a2 02		      LDX	#2
    521  f202		       a4 a9		      LDY	CurrentCarId
    522  f204				   IncreaseCarSpeedLoop
    523  f204							;Adds speed
    524  f204		       18		      CLC
    525  f205		       a5 aa		      LDA	AccelerateBuffer
    526  f207		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    527  f20a		       85 aa		      STA	AccelerateBuffer
    528  f20c		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    529  f20e		       e6 8e		      INC	Player0SpeedL
    530  f210		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    531  f212		       e6 8f		      INC	Player0SpeedH
    532  f214				   ContinueIncreaseSpeedLoop
    533  f214		       ca		      DEX
    534  f215		       d0 ed		      BNE	IncreaseCarSpeedLoop
    535  f217				   SkipIncreaseCarSpeed
    536  f217
    537  f217				   CheckIfAlreadyMaxSpeed
    538  f217		       a5 8f		      LDA	Player0SpeedH
    539  f219		       c9 02		      CMP	#CAR_MAX_SPEED_H
    540  f21b		       90 16		      BCC	SkipAccelerate	; less than my max speed
    541  f21d		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    542  f21f							;High bit is max, compare the low
    543  f21f		       a4 a9		      LDY	CurrentCarId
    544  f221		       a5 8e		      LDA	Player0SpeedL
    545  f223		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    546  f226		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    547  f228							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    548  f228
    549  f228				   ResetToMaxSpeed		; Speed is more, or is already max
    550  f228		       a9 02		      LDA	#CAR_MAX_SPEED_H
    551  f22a		       85 8f		      STA	Player0SpeedH
    552  f22c		       a4 a9		      LDY	CurrentCarId
    553  f22e		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    554  f231		       85 8e		      STA	Player0SpeedL
    555  f233				   SkipAccelerate
    556  f233
    557  f233				   InitUpdateOffsets
    558  f233		       a2 00		      LDX	#0	; Memory Offset 24 bit
    559  f235		       a0 00		      LDY	#0	; Line Speeds 16 bits
    560  f237		       a5 91		      LDA	TrafficOffset0 + 1	;
    561  f239		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    562  f23b		       a5 c5		      LDA	GameMode
    563  f23d		       29 04		      AND	#%00000100	; GameModes with high delta
    564  f23f		       f0 02		      BEQ	UpdateOffsets
    565  f241		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    566  f243
    567  f243				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    568  f243		       38		      SEC
    569  f244		       a5 8e		      LDA	Player0SpeedL
    570  f246		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    571  f249		       85 b0		      STA	Tmp0
    572  f24b		       c8		      INY
    573  f24c		       a5 8f		      LDA	Player0SpeedH
    574  f24e		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    575  f251		       85 b1		      STA	Tmp1
    576  f253		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    577  f255		       e9 00		      SBC	#0
    578  f257		       85 b2		      STA	Tmp2
    579  f259
    580  f259				   AddsTheResult
    581  f259		       18		      CLC
    582  f25a		       a5 b0		      LDA	Tmp0
    583  f25c		       75 90		      ADC	TrafficOffset0,X
    584  f25e		       95 90		      STA	TrafficOffset0,X
    585  f260		       e8		      INX
    586  f261		       a5 b1		      LDA	Tmp1
    587  f263		       75 90		      ADC	TrafficOffset0,X
    588  f265		       95 90		      STA	TrafficOffset0,X
    589  f267		       e8		      INX
    590  f268		       a5 b2		      LDA	Tmp2	; Carry
    591  f26a		       75 90		      ADC	TrafficOffset0,X
    592  f26c		       95 90		      STA	TrafficOffset0,X
    593  f26e		       90 06		      BCC	CalculateOffsetCache
    594  f270		       e0 02		      CPX	#2	;MSB offset 0
    595  f272		       d0 02		      BNE	CalculateOffsetCache
    596  f274		       e6 bb		      INC	Traffic0Msb
    597  f276
    598  f276				   CalculateOffsetCache
    599  f276		       e8		      INX
    600  f277		       38		      SEC
    601  f278		       69 00		      ADC	#0	;Increment by one
    602  f27a		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    603  f27c
    604  f27c				   PrepareNextUpdateLoop
    605  f27c		       c8		      INY
    606  f27d		       e8		      INX
    607  f27e		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    608  f280		       d0 c1		      BNE	UpdateOffsets
    609  f282
    610  f282				   BcdScore		; 48
    611  f282		       a5 91		      LDA	TrafficOffset0 + 1	;3
    612  f284		       45 b3		      EOR	Tmp3	;3
    613  f286		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    614  f288		       f0 1b		      BEQ	FinishBcdScore	;2
    615  f28a
    616  f28a				   ContinueBcdScore
    617  f28a		       f8		      SED		;2
    618  f28b		       18		      CLC		;2
    619  f28c		       a5 b4		      LDA	ScoreBcd0	;3
    620  f28e		       69 01		      ADC	#1	;2
    621  f290		       85 b4		      STA	ScoreBcd0	;3
    622  f292		       a5 b5		      LDA	ScoreBcd1	;3
    623  f294		       69 00		      ADC	#0	;2
    624  f296		       85 b5		      STA	ScoreBcd1	;3
    625  f298		       a5 b6		      LDA	ScoreBcd2	;3
    626  f29a		       69 00		      ADC	#0	;2
    627  f29c		       85 b6		      STA	ScoreBcd2	;3
    628  f29e		       a5 b7		      LDA	ScoreBcd3	;3
    629  f2a0		       69 00		      ADC	#0	;2
    630  f2a2		       85 b7		      STA	ScoreBcd3	;3
    631  f2a4		       d8		      CLD		;2
    632  f2a5				   FinishBcdScore
    633  f2a5
    634  f2a5							;Until store the movemnt, LDX contains the value to be stored.
    635  f2a5				   TestCollision		;
    636  f2a5							; see if player0 colides with the rest
    637  f2a5		       a5 00		      LDA	CXM0P
    638  f2a7		       05 01		      ORA	CXM1P
    639  f2a9		       05 01		      ORA	CXM1P
    640  f2ab		       05 02		      ORA	CXP0FB
    641  f2ad		       05 07		      ORA	CXPPMM
    642  f2af		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    643  f2b1		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    644  f2b3		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    645  f2b5		       d0 3a		      BNE	NoCollision
    646  f2b7		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    647  f2b9		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    648  f2bb		       f0 34		      BEQ	NoCollision
    649  f2bd		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    650  f2bf		       f0 30		      BEQ	NoCollision
    651  f2c1		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    652  f2c3		       85 b8		      STA	CollisionCounter	;and store as colision.
    653  f2c5				   CountBcdColision
    654  f2c5		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    655  f2c7		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    656  f2c9		       f0 1d		      BEQ	SkipSetColisionSpeedL
    657  f2cb		       f8		      SED		;2
    658  f2cc		       18		      CLC		;2
    659  f2cd		       a5 cb		      LDA	HitCountBcd0	;3
    660  f2cf		       69 01		      ADC	#1	;3
    661  f2d1		       85 cb		      STA	HitCountBcd0	;3
    662  f2d3		       a5 cc		      LDA	HitCountBcd1	;3
    663  f2d5		       69 00		      ADC	#0	;2
    664  f2d7		       85 cc		      STA	HitCountBcd1	;3
    665  f2d9		       d8		      CLD		;2
    666  f2da				   EndCountBcdColision
    667  f2da		       a5 8f		      LDA	Player0SpeedH
    668  f2dc		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    669  f2de		       a9 10		      LDA	#COLLISION_SPEED_L
    670  f2e0		       c5 8e		      CMP	Player0SpeedL
    671  f2e2		       b0 04		      BCS	SkipSetColisionSpeedL
    672  f2e4				   SetColisionSpeedL
    673  f2e4		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    674  f2e6		       85 8e		      STA	Player0SpeedL
    675  f2e8				   SkipSetColisionSpeedL
    676  f2e8		       a9 00		      LDA	#0
    677  f2ea		       85 8f		      STA	Player0SpeedH
    678  f2ec		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    679  f2ee		       4c 3c f3 	      JMP	StoreHMove	; We keep position consistent
    680  f2f1				   NoCollision
    681  f2f1
    682  f2f1				   DecrementCollision
    683  f2f1		       a4 b8		      LDY	CollisionCounter
    684  f2f3		       f0 07		      BEQ	FinishDecrementCollision
    685  f2f5		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    686  f2f7		       85 04		      STA	NUSIZ0
    687  f2f9		       88		      DEY
    688  f2fa		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    689  f2fc				   FinishDecrementCollision
    690  f2fc
    691  f2fc				   ResetPlayerSize
    692  f2fc		       d0 04		      BNE	FinishResetPlayerSize
    693  f2fe		       a9 30		      LDA	#%00110000
    694  f300		       85 04		      STA	NUSIZ0	;
    695  f302				   FinishResetPlayerSize
    696  f302
    697  f302				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    698  f302		       c0 01		      CPY	#1	; Last frame before reset
    699  f304		       d0 05		      BNE	SkipResetPlayerPosition
    700  f306		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    701  f308		       4c 3c f3 	      JMP	StoreHMove
    702  f30b				   SkipResetPlayerPosition
    703  f30b
    704  f30b				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    705  f30b		       a5 a9		      LDA	CurrentCarId
    706  f30d		       c9 03		      CMP	#CAR_ID_DRAGSTER
    707  f30f		       d0 08		      BNE	PrepareReadXAxis
    708  f311		       a2 00		      LDX	#0
    709  f313		       a5 8c		      LDA	FrameCount0
    710  f315		       29 01		      AND	#%00000001
    711  f317		       f0 23		      BEQ	StoreHMove	; Ignore movement on odd frames for dragster
    712  f319
    713  f319							; for left and right, we're gonna 
    714  f319							; set the horizontal speed, and then do
    715  f319							; a single HMOVE.  We'll use X to hold the
    716  f319							; horizontal speed, then store it in the 
    717  f319							; appropriate register
    718  f319				   PrepareReadXAxis
    719  f319		       a2 00		      LDX	#0
    720  f31b		       a4 b9		      LDY	Player0X
    721  f31d				   BeginReadLeft
    722  f31d		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    723  f31f		       a9 40		      LDA	#%01000000	;Left
    724  f321		       2c 80 02 	      BIT	SWCHA
    725  f324		       d0 07		      BNE	SkipMoveLeft
    726  f326		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    727  f328		       c6 b9		      DEC	Player0X
    728  f32a		       4c 3c f3 	      JMP	StoreHMove	; Cannot move left and right...
    729  f32d				   SkipMoveLeft
    730  f32d				   BeginReadRight
    731  f32d		       c0 36		      CPY	#PLAYER_0_MAX_X
    732  f32f		       f0 0b		      BEQ	SkipMoveRight	; At max already
    733  f331		       a9 80		      LDA	#%10000000	;Right
    734  f333		       2c 80 02 	      BIT	SWCHA
    735  f336		       d0 04		      BNE	SkipMoveRight
    736  f338		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    737  f33a		       e6 b9		      INC	Player0X
    738  f33c				   SkipMoveRight
    739  f33c				   StoreHMove
    740  f33c		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    741  f33e		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    742  f340
    743  f340				   DividePlayerSpeedBy4
    744  f340		       a5 8f		      LDA	Player0SpeedH
    745  f342		       0a		      ASL
    746  f343		       0a		      ASL
    747  f344		       0a		      ASL
    748  f345		       0a		      ASL
    749  f346		       0a		      ASL
    750  f347		       0a		      ASL
    751  f348		       85 b1		      STA	Tmp1
    752  f34a		       a5 8e		      LDA	Player0SpeedL
    753  f34c		       4a		      LSR
    754  f34d		       4a		      LSR
    755  f34e		       29 3f		      AND	#%00111111
    756  f350		       05 b1		      ORA	Tmp1
    757  f352		       85 b0		      STA	Tmp0	; Division Result
    758  f354
    759  f354				   CalculateParallax1Offset		; 7/8 speed
    760  f354		       38		      SEC
    761  f355		       a5 8e		      LDA	Player0SpeedL
    762  f357		       e5 b0		      SBC	Tmp0
    763  f359		       85 b2		      STA	Tmp2
    764  f35b		       a5 8f		      LDA	Player0SpeedH
    765  f35d		       e9 00		      SBC	#0
    766  f35f		       85 b3		      STA	Tmp3
    767  f361
    768  f361		       18		      CLC
    769  f362		       a5 c6		      LDA	ParallaxOffset1
    770  f364		       65 b2		      ADC	Tmp2
    771  f366		       85 c6		      STA	ParallaxOffset1
    772  f368		       a5 c7		      LDA	ParallaxOffset1 + 1
    773  f36a		       65 b3		      ADC	Tmp3
    774  f36c		       85 c7		      STA	ParallaxOffset1 + 1
    775  f36e
    776  f36e				   CalculateParallax2Offset		; 6/8 speed
    777  f36e		       38		      SEC
    778  f36f		       a5 b2		      LDA	Tmp2
    779  f371		       e5 b0		      SBC	Tmp0
    780  f373		       85 b2		      STA	Tmp2
    781  f375		       a5 b3		      LDA	Tmp3
    782  f377		       e9 00		      SBC	#0
    783  f379		       85 b3		      STA	Tmp3
    784  f37b
    785  f37b		       18		      CLC
    786  f37c		       a5 c8		      LDA	ParallaxOffset2
    787  f37e		       65 b2		      ADC	Tmp2
    788  f380		       85 c8		      STA	ParallaxOffset2
    789  f382		       a5 c9		      LDA	ParallaxOffset2 + 1
    790  f384		       65 b3		      ADC	Tmp3
    791  f386		       85 c9		      STA	ParallaxOffset2 + 1
    792  f388
    793  f388				   SkipUpdateLogic		; Continue here if not paused
    794  f388
    795  f388
    796  f388				   ProcessBorder		;Can be optimized (probably)
    797  f388		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    798  f38a		       a5 88		      LDA	ParallaxMode
    799  f38c		       c9 70		      CMP	#%01110000
    800  f38e		       f0 1a		      BEQ	HorizontalParallaxMode
    801  f390		       c9 d0		      CMP	#%11010000
    802  f392		       f0 0a		      BEQ	VerticalParallaxMode
    803  f394		       c9 b0		      CMP	#%10110000
    804  f396		       f0 0c		      BEQ	TachometerMode
    805  f398
    806  f398				   DefaultBorderMode
    807  f398		       20 2b f8 	      JSR	DefaultBorderLoop
    808  f39b		       4c ad f3 	      JMP	EndProcessingBorder
    809  f39e				   VerticalParallaxMode
    810  f39e		       20 a1 f8 	      JSR	VerticalParallaxLoop
    811  f3a1		       4c ad f3 	      JMP	EndProcessingBorder
    812  f3a4				   TachometerMode
    813  f3a4		       20 46 f8 	      JSR	PrepareTachometerBorderLoop
    814  f3a7		       4c ad f3 	      JMP	EndProcessingBorder
    815  f3aa				   HorizontalParallaxMode
    816  f3aa		       20 dd f7 	      JSR	HorizontalParallaxLoop
    817  f3ad
    818  f3ad				   EndProcessingBorder
    819  f3ad
    820  f3ad				   ProcessScoreFontColor
    821  f3ad		       a6 d6		      LDX	ScoreFontColorHoldChange
    822  f3af		       f0 06		      BEQ	ResetScoreFontColor
    823  f3b1		       ca		      DEX
    824  f3b2		       86 d6		      STX	ScoreFontColorHoldChange
    825  f3b4		       4c bb f3 	      JMP	SkipScoreFontColor
    826  f3b7				   ResetScoreFontColor
    827  f3b7		       a9 f9		      LDA	#SCORE_FONT_COLOR
    828  f3b9		       85 d5		      STA	ScoreFontColor
    829  f3bb				   SkipScoreFontColor
    830  f3bb
    831  f3bb				   IsGameOver
    832  f3bb		       a5 ba		      LDA	CountdownTimer
    833  f3bd		       05 8e		      ORA	Player0SpeedL
    834  f3bf		       05 8f		      ORA	Player0SpeedH
    835  f3c1		       d0 0b		      BNE	IsCheckpoint
    836  f3c3		       a9 01		      LDA	#1
    837  f3c5		       85 d6		      STA	ScoreFontColorHoldChange
    838  f3c7		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    839  f3c9		       85 d5		      STA	ScoreFontColor
    840  f3cb		       4c 0f f4 	      JMP	SkipIsTimeOver
    841  f3ce
    842  f3ce				   IsCheckpoint
    843  f3ce		       a5 d7		      LDA	NextCheckpoint
    844  f3d0		       c5 92		      CMP	TrafficOffset0 + 2
    845  f3d2		       d0 2f		      BNE	SkipIsCheckpoint
    846  f3d4		       18		      CLC
    847  f3d5		       69 10		      ADC	#CHECKPOINT_INTERVAL
    848  f3d7		       85 d7		      STA	NextCheckpoint
    849  f3d9		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    850  f3db		       85 d5		      STA	ScoreFontColor
    851  f3dd		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    852  f3df		       85 d6		      STA	ScoreFontColorHoldChange
    853  f3e1				   AddCheckpointBcd
    854  f3e1		       f8		      SED		;2
    855  f3e2		       18		      CLC		;2
    856  f3e3		       a5 a4		      LDA	CheckpointBcd0	;3
    857  f3e5		       69 01		      ADC	#1	;3
    858  f3e7		       85 a4		      STA	CheckpointBcd0	;3
    859  f3e9		       a5 a5		      LDA	CheckpointBcd1	;3
    860  f3eb		       69 00		      ADC	#0	;2
    861  f3ed		       85 a5		      STA	CheckpointBcd1	;3
    862  f3ef		       d8		      CLD		;2
    863  f3f0				   EndCheckpointBcd
    864  f3f0		       a5 ba		      LDA	CountdownTimer
    865  f3f2		       18		      CLC
    866  f3f3		       65 c2		      ADC	CheckpointTime
    867  f3f5		       85 ba		      STA	CountdownTimer
    868  f3f7		       90 04		      BCC	JumpSkipTimeOver
    869  f3f9		       a9 ff		      LDA	#$FF
    870  f3fb		       85 ba		      STA	CountdownTimer	; Does not overflow!
    871  f3fd				   JumpSkipTimeOver
    872  f3fd		       20 55 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    873  f400		       4c 0f f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    874  f403				   SkipIsCheckpoint
    875  f403
    876  f403				   IsTimeOver
    877  f403		       a5 ba		      LDA	CountdownTimer
    878  f405		       d0 08		      BNE	SkipIsTimeOver
    879  f407		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    880  f409		       85 d6		      STA	ScoreFontColorHoldChange
    881  f40b		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    882  f40d		       85 d5		      STA	ScoreFontColor
    883  f40f				   SkipIsTimeOver
    884  f40f
    885  f40f				   PrintEasterEggCondition
    886  f40f		       a5 8d		      LDA	FrameCount1
    887  f411		       29 38		      AND	#%00111000
    888  f413		       05 c0		      ORA	GameStatus
    889  f415		       c9 38		      CMP	#%00111000
    890  f417		       d0 06		      BNE	ChooseTextSide
    891  f419		       20 f5 f8 	      JSR	PrintEasterEgg
    892  f41c		       4c 10 f5 	      JMP	RightScoreWriteEnd
    893  f41f
    894  f41f							;Could be done during on vblank to save this comparisson time (before draw score), 
    895  f41f							;but I am saving vblank cycles for now, in case of 2 players.
    896  f41f				   ChooseTextSide		; 
    897  f41f		       a5 8c		      LDA	FrameCount0	;3
    898  f421		       29 01		      AND	#%00000001	;2
    899  f423		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    900  f425		       4c a6 f4 	      JMP	RightScoreWrite
    901  f428
    902  f428				   LeftScoreWrite
    903  f428		       a5 d5		      LDA	ScoreFontColor
    904  f42a		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    905  f42c		       f0 4e		      BEQ	PrintCheckpoint
    906  f42e		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    907  f430		       f0 52		      BEQ	PrintStartGame
    908  f432		       a5 c0		      LDA	GameStatus
    909  f434		       f0 56		      BEQ	PrintHellwayLeft
    910  f436				   WriteDistance		;Not optimized yet, ugly code.
    911  f436				   Digit0Distance
    912  f436		       a5 91		      LDA	TrafficOffset0 + 1	;3
    913  f438		       4a		      LSR		; 2
    914  f439		       4a		      LSR		; 2
    915  f43a		       4a		      LSR		; 2
    916  f43b		       4a		      LSR		; 2
    917  f43c		       aa		      TAX		; 2
    918  f43d		       bd be fd 	      LDA	FontLookup,X	;4
    919  f440		       85 d3		      STA	ScoreD3	;3
    920  f442
    921  f442				   Digit1Distance
    922  f442		       a5 92		      LDA	TrafficOffset0 + 2	;3
    923  f444		       29 0f		      AND	#%00001111	;2
    924  f446		       aa		      TAX		; 2
    925  f447		       bd be fd 	      LDA	FontLookup,X	;4 
    926  f44a		       85 d2		      STA	ScoreD2	;3
    927  f44c
    928  f44c				   Digit2Distance
    929  f44c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    930  f44e		       4a		      LSR		; 2
    931  f44f		       4a		      LSR		; 2
    932  f450		       4a		      LSR		; 2
    933  f451		       4a		      LSR		; 2
    934  f452		       aa		      TAX		; 2
    935  f453		       bd be fd 	      LDA	FontLookup,X	;4
    936  f456		       85 d1		      STA	ScoreD1	;3
    937  f458
    938  f458				   Digit3Distance
    939  f458		       a5 bb		      LDA	Traffic0Msb	;3
    940  f45a		       29 0f		      AND	#%00001111	;2
    941  f45c		       aa		      TAX		; 2
    942  f45d		       bd be fd 	      LDA	FontLookup,X	;4 
    943  f460		       85 d0		      STA	ScoreD0	;3
    944  f462
    945  f462				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    946  f462		       a5 bb		      LDA	Traffic0Msb
    947  f464		       29 f0		      AND	#%11110000	;2
    948  f466		       d0 07		      BNE	DrawDistanceExtraDigit
    949  f468		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    950  f46a		       85 d4		      STA	ScoreD4	;3
    951  f46c		       4c 79 f4 	      JMP	EndDrawDistance
    952  f46f				   DrawDistanceExtraDigit
    953  f46f		       4a		      LSR		; 2
    954  f470		       4a		      LSR		; 2
    955  f471		       4a		      LSR		; 2
    956  f472		       4a		      LSR		; 2
    957  f473		       aa		      TAX		; 2
    958  f474		       bd be fd 	      LDA	FontLookup,X	;4
    959  f477		       85 d4		      STA	ScoreD4	;3
    960  f479
    961  f479				   EndDrawDistance
    962  f479		       4c 10 f5 	      JMP	RightScoreWriteEnd	;3
    963  f47c
    964  f47c				   PrintCheckpoint
    965  f47c		       a2 00		      LDX	#<CheckpointText
    966  f47e		       20 bf f7 	      JSR	PrintStaticText
    967  f481		       4c 10 f5 	      JMP	RightScoreWriteEnd	;3
    968  f484				   PrintStartGame
    969  f484		       a2 23		      LDX	#<GoText
    970  f486		       20 bf f7 	      JSR	PrintStaticText
    971  f489		       4c 10 f5 	      JMP	RightScoreWriteEnd	;3
    972  f48c
    973  f48c				   PrintHellwayLeft
    974  f48c		       a5 8d		      LDA	FrameCount1
    975  f48e		       29 01		      AND	#1
    976  f490		       d0 05		      BNE	PrintCreditsLeft
    977  f492		       a2 05		      LDX	#<HellwayLeftText
    978  f494		       4c 99 f4 	      JMP	PrintGameMode
    979  f497				   PrintCreditsLeft
    980  f497		       a2 0f		      LDX	#<OpbText
    981  f499
    982  f499				   PrintGameMode
    983  f499		       20 bf f7 	      JSR	PrintStaticText
    984  f49c		       a6 c5		      LDX	GameMode
    985  f49e		       bd be fd 	      LDA	FontLookup,X	;4 
    986  f4a1		       85 d0		      STA	ScoreD0	;3
    987  f4a3		       4c 10 f5 	      JMP	RightScoreWriteEnd	;3
    988  f4a6
    989  f4a6				   RightScoreWrite
    990  f4a6		       a5 c0		      LDA	GameStatus
    991  f4a8		       f0 45		      BEQ	PrintHellwayRight
    992  f4aa		       a5 d5		      LDA	ScoreFontColor
    993  f4ac		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    994  f4ae		       f0 52		      BEQ	PrintGameOver
    995  f4b0				   Digit0Timer
    996  f4b0		       a5 ba		      LDA	CountdownTimer	;3
    997  f4b2		       29 0f		      AND	#%00001111	;2
    998  f4b4		       aa		      TAX		; 2
    999  f4b5		       bd be fd 	      LDA	FontLookup,X	;4 
   1000  f4b8		       85 d1		      STA	ScoreD1	;3
   1001  f4ba
   1002  f4ba				   Digit1Timer
   1003  f4ba		       a5 ba		      LDA	CountdownTimer	;3
   1004  f4bc		       4a		      LSR		; 2
   1005  f4bd		       4a		      LSR		; 2
   1006  f4be		       4a		      LSR		; 2
   1007  f4bf		       4a		      LSR		; 2
   1008  f4c0		       aa		      TAX		; 2
   1009  f4c1		       bd be fd 	      LDA	FontLookup,X	;4
   1010  f4c4		       85 d0		      STA	ScoreD0	;3
   1011  f4c6
   1012  f4c6		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1013  f4c8		       85 d2		      STA	ScoreD2	;3
   1014  f4ca
   1015  f4ca				   Digit0Speed
   1016  f4ca		       a5 8e		      LDA	Player0SpeedL
   1017  f4cc		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1018  f4ce		       4a		      LSR		; 2
   1019  f4cf		       4a		      LSR		; 2
   1020  f4d0		       aa		      TAX		; 2
   1021  f4d1		       bd be fd 	      LDA	FontLookup,X	;4
   1022  f4d4		       85 d4		      STA	ScoreD4	;3
   1023  f4d6
   1024  f4d6				   Digit1Speed
   1025  f4d6		       a5 8e		      LDA	Player0SpeedL
   1026  f4d8		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1027  f4da		       18		      CLC
   1028  f4db		       2a		      ROL		;First goes into carry
   1029  f4dc		       2a		      ROL
   1030  f4dd		       2a		      ROL
   1031  f4de		       85 b0		      STA	Tmp0
   1032  f4e0		       a5 8f		      LDA	Player0SpeedH
   1033  f4e2		       0a		      ASL
   1034  f4e3		       0a		      ASL
   1035  f4e4		       05 b0		      ORA	Tmp0
   1036  f4e6		       aa		      TAX		; 2
   1037  f4e7		       bd be fd 	      LDA	FontLookup,X	;4
   1038  f4ea		       85 d3		      STA	ScoreD3	;3
   1039  f4ec		       4c 10 f5 	      JMP	RightScoreWriteEnd
   1040  f4ef
   1041  f4ef				   PrintHellwayRight
   1042  f4ef		       a5 8d		      LDA	FrameCount1
   1043  f4f1		       29 01		      AND	#1
   1044  f4f3		       d0 05		      BNE	PrintCreditsRight
   1045  f4f5		       a2 0a		      LDX	#<HellwayRightText
   1046  f4f7		       4c fc f4 	      JMP	PrintRightIntro
   1047  f4fa				   PrintCreditsRight
   1048  f4fa		       a2 14		      LDX	#<YearText
   1049  f4fc				   PrintRightIntro
   1050  f4fc		       20 bf f7 	      JSR	PrintStaticText
   1051  f4ff		       4c 10 f5 	      JMP	RightScoreWriteEnd
   1052  f502				   PrintGameOver
   1053  f502		       a5 8c		      LDA	FrameCount0
   1054  f504		       30 05		      BMI	PrintOverText
   1055  f506		       a2 19		      LDX	#<GameText
   1056  f508		       4c 0d f5 	      JMP	StoreGameOverText
   1057  f50b				   PrintOverText
   1058  f50b		       a2 1e		      LDX	#<OverText
   1059  f50d				   StoreGameOverText
   1060  f50d		       20 bf f7 	      JSR	PrintStaticText
   1061  f510				   RightScoreWriteEnd
   1062  f510
   1063  f510
   1064  f510				   ScoreBackgroundColor
   1065  f510		       a2 00		      LDX	#0
   1066  f512		       ad 82 02 	      LDA	SWCHB
   1067  f515		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1068  f517		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1069  f519		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1070  f51b		       a2 03		      LDX	#BACKGROUND_COLOR
   1071  f51d				   BlackAndWhiteScoreBg
   1072  f51d		       85 b2		      STA	Tmp2	; Score Background
   1073  f51f		       86 b3		      STX	Tmp3	; Traffic Background
   1074  f521
   1075  f521				   ConfigurePFForScore
   1076  f521							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1077  f521		       85 09		      STA	COLUBK
   1078  f523		       20 17 f7 	      JSR	ClearAll
   1079  f526		       a9 02		      LDA	#%00000010	; Score mode
   1080  f528		       85 0a		      STA	CTRLPF
   1081  f52a		       a5 8c		      LDA	FrameCount0	;3
   1082  f52c		       29 01		      AND	#%00000001	;2
   1083  f52e		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
   1084  f530				   LeftScoreOn
   1085  f530		       a5 d5		      LDA	ScoreFontColor
   1086  f532		       85 07		      STA	COLUP1
   1087  f534		       a5 b2		      LDA	Tmp2
   1088  f536		       85 06		      STA	COLUP0
   1089  f538		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1090  f53a		       85 b1		      STA	Tmp1
   1091  f53c		       4c 4b f5 	      JMP	CallWaitForVblankEnd
   1092  f53f				   RightScoreOn
   1093  f53f		       a5 d5		      LDA	ScoreFontColor
   1094  f541		       85 06		      STA	COLUP0
   1095  f543		       a5 b2		      LDA	Tmp2
   1096  f545		       85 07		      STA	COLUP1
   1097  f547		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1098  f549		       85 b1		      STA	Tmp1
   1099  f54b
   1100  f54b							; After here we are going to update the screen, No more heavy code
   1101  f54b				   CallWaitForVblankEnd
   1102  f54b		       20 c9 fb 	      JSR	WaitForVblankEnd
   1103  f54e
   1104  f54e				   DrawScoreHud
   1105  f54e		       20 67 f9 	      JSR	PrintScore
   1106  f551
   1107  f551		       85 02		      STA	WSYNC
   1108  f553
   1109  f553		       a5 0c		      LDA	INPT4	;3
   1110  f555		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1111  f557		       a5 d5		      LDA	ScoreFontColor
   1112  f559		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1113  f55b		       d0 0c		      BNE	WaitAnotherScoreLine
   1114  f55d		       a5 8c		      LDA	FrameCount0	;3
   1115  f55f		       29 01		      AND	#%00000001	;2
   1116  f561		       f0 03		      BEQ	LeftScoreOnGameOver
   1117  f563		       4c f2 fa 	      JMP	DrawGameOverScreenRight
   1118  f566				   LeftScoreOnGameOver
   1119  f566		       4c 24 fa 	      JMP	DrawGameOverScreenLeft
   1120  f569
   1121  f569				   WaitAnotherScoreLine
   1122  f569		       85 02		      STA	WSYNC
   1123  f56b
   1124  f56b				   PrepareForTraffic
   1125  f56b		       20 29 f7 	      JSR	ClearPF	; 32
   1126  f56e
   1127  f56e		       85 02		      STA	WSYNC
   1128  f570		       85 02		      STA	WSYNC
   1129  f572
   1130  f572		       a9 31		      LDA	#%00110001	; 2 Score mode
   1131  f574		       85 0a		      STA	CTRLPF	;3
   1132  f576
   1133  f576		       a5 c3		      LDA	TrafficColor	;3
   1134  f578		       85 08		      STA	COLUPF	;3
   1135  f57a
   1136  f57a		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1137  f57c		       85 07		      STA	COLUP1	;3
   1138  f57e
   1139  f57e		       a5 d5		      LDA	ScoreFontColor	;3
   1140  f580		       85 06		      STA	COLUP0	;3
   1141  f582
   1142  f582		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1143  f584
   1144  f584		       20 29 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1145  f587
      0  f587					      SLEEP	14
      1  f587				   .CYCLES    SET	14
      2  f587
      3  f587				  -	      IF	.CYCLES < 2
      4  f587				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f587				  -	      ERR
      6  f587					      ENDIF
      7  f587
      8  f587				  -	      IF	.CYCLES & 1
      9  f587				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f587				  -	      nop	0
     11  f587				  -	      ELSE
     12  f587				  -	      bit	VSYNC
     13  f587				  -	      ENDIF
     14  f587				  -.CYCLES    SET	.CYCLES - 3
     15  f587					      ENDIF
     16  f587
     17  f587					      REPEAT	.CYCLES / 2
     18  f587		       ea		      nop
     17  f587					      REPEND
     18  f588		       ea		      nop
     17  f588					      REPEND
     18  f589		       ea		      nop
     17  f589					      REPEND
     18  f58a		       ea		      nop
     17  f58a					      REPEND
     18  f58b		       ea		      nop
     17  f58b					      REPEND
     18  f58c		       ea		      nop
     17  f58c					      REPEND
     18  f58d		       ea		      nop
     19  f58e					      REPEND
   1147  f58e
   1148  f58e		       a5 b3		      LDA	Tmp3	;3
   1149  f590		       85 09		      STA	COLUBK	;3
   1150  f592		       4c 97 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1151  f595							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1152  f595
   1153  f595							;main scanline loop...
   1154  f595				   ScanLoop
   1155  f595		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1156  f597
   1157  f597							;Start of next line!			
   1158  f597				   DrawCache		;63 Is the last line going to the top of the next frame?
   1159  f597		       a5 81		      LDA	PF0Cache	;3
   1160  f599		       85 0d		      STA	PF0	;3
   1161  f59b
   1162  f59b		       a5 82		      LDA	PF1Cache	;3
   1163  f59d		       85 0e		      STA	PF1	;3
   1164  f59f
   1165  f59f		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1166  f5a1		       b0 04		      BCS	SkipDrawCar	;2
   1167  f5a3		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1168  f5a5		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1169  f5a7				   SkipDrawCar
   1170  f5a7
   1171  f5a7		       a5 84		      LDA	GRP1Cache	;3
   1172  f5a9		       85 1c		      STA	GRP1	;3
   1173  f5ab
   1174  f5ab		       a5 85		      LDA	ENABLCache	;3
   1175  f5ad		       85 1f		      STA	ENABL	;3
   1176  f5af
   1177  f5af		       a5 86		      LDA	ENAM0Cache	;3
   1178  f5b1		       85 1d		      STA	ENAM0	;3
   1179  f5b3
   1180  f5b3		       a5 87		      LDA	ENAM1Cache	;3
   1181  f5b5		       85 1e		      STA	ENAM1	;3
   1182  f5b7
   1183  f5b7		       a9 00		      LDA	#0	;2
   1184  f5b9							;STA PF1Cache ;3
   1185  f5b9		       85 84		      STA	GRP1Cache	;3
   1186  f5bb		       85 85		      STA	ENABLCache	;3
   1187  f5bd		       85 86		      STA	ENAM0Cache	;3
   1188  f5bf		       85 87		      STA	ENAM1Cache	; 3
   1189  f5c1
   1190  f5c1							;BEQ DrawTraffic3
   1191  f5c1				   DrawTraffic1 		; 33
   1192  f5c1		       98		      TYA		; 2
   1193  f5c2		       18		      CLC		; 2 
   1194  f5c3		       65 95		      ADC	TrafficOffset1 + 1	;3
   1195  f5c5		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1196  f5c7		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1197  f5c9		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1198  f5cb		       4c d0 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1199  f5ce				   EorOffsetWithCarry
   1200  f5ce		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1201  f5d0				   AfterEorOffsetWithCarry		;17
   1202  f5d0		       aa		      TAX		;2
   1203  f5d1		       bd 00 fe 	      LDA	AesTable,X	; 4
   1204  f5d4		       c5 c1		      CMP	TrafficChance	;3
   1205  f5d6		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1206  f5d8		       a9 ff		      LDA	#$FF	;2
   1207  f5da		       85 84		      STA	GRP1Cache	;3
   1208  f5dc				   FinishDrawTraffic1
   1209  f5dc
   1210  f5dc				   DrawTraffic2 		; 33
   1211  f5dc		       98		      TYA		; 2
   1212  f5dd		       18		      CLC		; 2 
   1213  f5de		       65 99		      ADC	TrafficOffset2 + 1	;3
   1214  f5e0		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1215  f5e2		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1216  f5e4		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1217  f5e6		       4c eb f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1218  f5e9				   EorOffsetWithCarry2
   1219  f5e9		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1220  f5eb				   AfterEorOffsetWithCarry2		;17
   1221  f5eb		       aa		      TAX		;2
   1222  f5ec		       bd 00 fe 	      LDA	AesTable,X	; 4
   1223  f5ef		       c5 c1		      CMP	TrafficChance	;3
   1224  f5f1		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1225  f5f3		       a9 02		      LDA	#%00000010	;2
   1226  f5f5		       85 85		      STA	ENABLCache	;3
   1227  f5f7				   FinishDrawTraffic2
   1228  f5f7
   1229  f5f7							;STA WSYNC ;65 / 137
   1230  f5f7
   1231  f5f7							; LDA Tmp0 ; Flicker this line if drawing car
   1232  f5f7							; BEQ FinishDrawTraffic4
   1233  f5f7				   DrawTraffic3 		; 33
   1234  f5f7		       98		      TYA		; 2
   1235  f5f8		       18		      CLC		; 2 
   1236  f5f9		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1237  f5fb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1238  f5fd		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1239  f5ff		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1240  f601		       4c 06 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1241  f604				   EorOffsetWithCarry3
   1242  f604		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1243  f606				   AfterEorOffsetWithCarry3		;17
   1244  f606		       aa		      TAX		;2
   1245  f607		       bd 00 fe 	      LDA	AesTable,X	; 4
   1246  f60a		       c5 c1		      CMP	TrafficChance	;3
   1247  f60c		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1248  f60e		       a9 02		      LDA	#%00000010	;2
   1249  f610		       85 86		      STA	ENAM0Cache
   1250  f612				   FinishDrawTraffic3
   1251  f612
   1252  f612				   DrawTraffic4 		; 33
   1253  f612		       98		      TYA		; 2
   1254  f613		       18		      CLC		; 2 
   1255  f614		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1256  f616		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1257  f618		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1258  f61a		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1259  f61c		       4c 21 f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1260  f61f				   EorOffsetWithCarry4
   1261  f61f		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1262  f621				   AfterEorOffsetWithCarry4		;17
   1263  f621		       aa		      TAX		;2
   1264  f622		       bd 00 fe 	      LDA	AesTable,X	; 4
   1265  f625		       c5 c1		      CMP	TrafficChance	;3
   1266  f627		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1267  f629		       a9 02		      LDA	#%00000010	;2
   1268  f62b		       85 87		      STA	ENAM1Cache	;3
   1269  f62d				   FinishDrawTraffic4
   1270  f62d
   1271  f62d				   DrawTraffic0 		; 20
   1272  f62d		       98		      TYA		;2
   1273  f62e		       29 07		      AND	#%00000111	;2
   1274  f630		       aa		      TAX		;2
   1275  f631		       b5 d8		      LDA	ParallaxCache,X	;4
   1276  f633		       85 82		      STA	PF1Cache	;3
   1277  f635		       b5 f0		      LDA	ParallaxCache2,X	;4
   1278  f637		       85 81		      STA	PF0Cache	;3
   1279  f639
   1280  f639				   SkipDrawTraffic0
   1281  f639
   1282  f639				   WhileScanLoop
   1283  f639		       88		      DEY		;2
   1284  f63a		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1285  f63c		       4c 95 f5 	      JMP	ScanLoop	;3
   1286  f63f				   FinishScanLoop		; 7 209 of 222
   1287  f63f
   1288  f63f		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1289  f641		       20 38 f7 	      JSR	LoadAll
   1290  f644		       85 02		      STA	WSYNC	; do stuff!
   1291  f646		       85 02		      STA	WSYNC
   1292  f648		       85 02		      STA	WSYNC
   1293  f64a							;42 cycles to use here
   1294  f64a
   1295  f64a				   PrepareOverscan
   1296  f64a		       a9 02		      LDA	#2
   1297  f64c		       85 02		      STA	WSYNC
   1298  f64e		       85 01		      STA	VBLANK
   1299  f650
   1300  f650		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1301  f652		       8d 96 02 	      STA	TIM64T
   1302  f655
   1303  f655				   LeftSound		;58
   1304  f655		       a5 ba		      LDA	CountdownTimer	;3
   1305  f657		       f0 24		      BEQ	EngineOff	;2
   1306  f659		       a5 8e		      LDA	Player0SpeedL	;3
   1307  f65b		       29 80		      AND	#%10000000	;2
   1308  f65d		       05 8f		      ORA	Player0SpeedH	;3
   1309  f65f		       18		      CLC		;2
   1310  f660		       2a		      ROL		;2
   1311  f661		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1312  f663		       aa		      TAX		;2
   1313  f664		       a5 8e		      LDA	Player0SpeedL	;3
   1314  f666		       4a		      LSR		;2
   1315  f667		       4a		      LSR		;2
   1316  f668		       4a		      LSR		;2
   1317  f669		       29 0f		      AND	#%00001111	;2
   1318  f66b		       85 b0		      STA	Tmp0	;3
   1319  f66d		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1320  f670		       38		      SEC		;2
   1321  f671		       e5 b0		      SBC	Tmp0	;3
   1322  f673		       85 17		      STA	AUDF0	;3
   1323  f675		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1324  f678		       85 15		      STA	AUDC0	;3
   1325  f67a		       4c 81 f6 	      JMP	EndLeftSound	;3
   1326  f67d				   EngineOff
   1327  f67d		       a9 00		      LDA	#0
   1328  f67f		       85 15		      STA	AUDC0
   1329  f681
   1330  f681				   EndLeftSound
   1331  f681
   1332  f681
   1333  f681				   RightSound		; 56 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1334  f681		       a5 d5		      LDA	ScoreFontColor	;3
   1335  f683		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1336  f685		       f0 4a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1337  f687		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1338  f689		       f0 21		      BEQ	PlayCheckpoint	;2
   1339  f68b		       a5 b8		      LDA	CollisionCounter	;3
   1340  f68d		       c9 e0		      CMP	#$E0	;2
   1341  f68f		       b0 0c		      BCS	PlayColision	;2
   1342  f691		       a5 d7		      LDA	NextCheckpoint	;3
   1343  f693		       38		      SEC		;2
   1344  f694		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1345  f696		       c9 02		      CMP	#$02	;2
   1346  f698		       90 24		      BCC	PlayBeforeCheckpoint	;4
   1347  f69a		       4c d1 f6 	      JMP	MuteRightSound
   1348  f69d				   PlayColision
   1349  f69d		       a9 1f		      LDA	#31
   1350  f69f		       85 18		      STA	AUDF1
   1351  f6a1		       a9 08		      LDA	#8
   1352  f6a3		       85 16		      STA	AUDC1
   1353  f6a5		       a9 08		      LDA	#8
   1354  f6a7		       85 1a		      STA	AUDV1
   1355  f6a9		       4c d5 f6 	      JMP	EndRightSound
   1356  f6ac
   1357  f6ac				   PlayCheckpoint
   1358  f6ac		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1359  f6ae		       4a		      LSR		;2
   1360  f6af		       4a		      LSR		;2
   1361  f6b0		       4a		      LSR		;2
   1362  f6b1		       85 18		      STA	AUDF1	;3
   1363  f6b3		       a9 0c		      LDA	#12	;2
   1364  f6b5		       85 16		      STA	AUDC1	;3
   1365  f6b7		       a9 06		      LDA	#6	;2
   1366  f6b9		       85 1a		      STA	AUDV1	;3
   1367  f6bb		       4c d5 f6 	      JMP	EndRightSound	;3
   1368  f6be
   1369  f6be				   PlayBeforeCheckpoint
   1370  f6be		       a5 8c		      LDA	FrameCount0	;3
   1371  f6c0		       29 1c		      AND	#%00011100	;2
   1372  f6c2		       09 03		      ORA	#%00000011	;2
   1373  f6c4		       85 18		      STA	AUDF1	;3
   1374  f6c6		       a9 0c		      LDA	#12	;2
   1375  f6c8		       85 16		      STA	AUDC1	;3
   1376  f6ca		       a9 03		      LDA	#3	;2
   1377  f6cc		       85 1a		      STA	AUDV1	;3
   1378  f6ce		       4c d5 f6 	      JMP	EndRightSound	;3
   1379  f6d1
   1380  f6d1				   MuteRightSound
   1381  f6d1		       a9 00		      LDA	#0
   1382  f6d3		       85 1a		      STA	AUDV1
   1383  f6d5				   EndRightSound
   1384  f6d5
   1385  f6d5				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1386  f6d5		       a5 c0		      LDA	GameStatus	;3
   1387  f6d7		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1388  f6d9		       a5 d5		      LDA	ScoreFontColor	;3
   1389  f6db		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1390  f6dd		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1391  f6df		       c6 cf		      DEC	OneSecondConter	;5
   1392  f6e1		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1393  f6e3
   1394  f6e3		       f8		      SED		;2 BCD Operations after this point
   1395  f6e4				   CountGlideTimeBcd
   1396  f6e4		       a5 d5		      LDA	ScoreFontColor	;3
   1397  f6e6		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1398  f6e8		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1399  f6ea		       18		      CLC		;2
   1400  f6eb		       a5 cd		      LDA	GlideTimeBcd0	;3
   1401  f6ed		       69 01		      ADC	#1	;3
   1402  f6ef		       85 cd		      STA	GlideTimeBcd0	;3
   1403  f6f1		       a5 ce		      LDA	GlideTimeBcd1	;3
   1404  f6f3		       69 00		      ADC	#0	;2
   1405  f6f5		       85 ce		      STA	GlideTimeBcd1	;3
   1406  f6f7				   EndCountGlideTimeBcd
   1407  f6f7				   IncreaseTotalTimerBcd
   1408  f6f7		       18		      CLC		;2
   1409  f6f8		       a5 bd		      LDA	TimeBcd0	;3
   1410  f6fa		       69 01		      ADC	#1	;2
   1411  f6fc		       85 bd		      STA	TimeBcd0	;3
   1412  f6fe		       a5 be		      LDA	TimeBcd1	;3
   1413  f700		       69 00		      ADC	#0	;2
   1414  f702		       85 be		      STA	TimeBcd1	;3
   1415  f704		       a5 bf		      LDA	TimeBcd2	;3
   1416  f706		       69 00		      ADC	#0	;2
   1417  f708		       85 bf		      STA	TimeBcd2	;3
   1418  f70a
   1419  f70a				   ResetOneSecondCounter
   1420  f70a		       d8		      CLD		;2
   1421  f70b		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1422  f70d		       85 cf		      STA	OneSecondConter	;3
   1423  f70f
   1424  f70f				   EndExactlyEverySecond
   1425  f70f
   1426  f70f				   OverScanWait
   1427  f70f		       ad 84 02 	      LDA	INTIM
   1428  f712		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1429  f714		       4c c0 f0 	      JMP	MainLoop
   1430  f717
   1431  f717				   Subroutines
   1432  f717
   1433  f717				   ClearAll		; 52
   1434  f717		       a9 00		      LDA	#0	;2
   1435  f719		       85 1c		      STA	GRP1	;3
   1436  f71b		       85 1f		      STA	ENABL	;3
   1437  f71d		       85 1d		      STA	ENAM0	;3
   1438  f71f		       85 1e		      STA	ENAM1	;3
   1439  f721		       85 84		      STA	GRP1Cache	;3
   1440  f723		       85 85		      STA	ENABLCache	;3
   1441  f725		       85 86		      STA	ENAM0Cache	;3
   1442  f727		       85 87		      STA	ENAM1Cache	;3
   1443  f729
   1444  f729				   ClearPF		; 26
   1445  f729		       a9 00		      LDA	#0	;2
   1446  f72b				   ClearPFSkipLDA0
   1447  f72b		       85 0d		      STA	PF0	;3
   1448  f72d		       85 0e		      STA	PF1	;3
   1449  f72f		       85 0f		      STA	PF2	;3	
   1450  f731		       85 81		      STA	PF0Cache	;3
   1451  f733		       85 82		      STA	PF1Cache	;3
   1452  f735		       85 83		      STA	PF2Cache	;3 
   1453  f737		       60		      RTS		;6
   1454  f738				   EndClearAll
   1455  f738
   1456  f738				   LoadAll		; 48
   1457  f738		       a5 81		      LDA	PF0Cache	;3
   1458  f73a		       85 0d		      STA	PF0	;3
   1459  f73c
   1460  f73c		       a5 82		      LDA	PF1Cache	;3
   1461  f73e		       85 0e		      STA	PF1	;3
   1462  f740
   1463  f740		       a5 83		      LDA	PF2Cache	;3
   1464  f742		       85 0f		      STA	PF2	;3
   1465  f744
   1466  f744		       a5 84		      LDA	GRP1Cache	;3
   1467  f746		       85 1c		      STA	GRP1	;3
   1468  f748
   1469  f748		       a5 85		      LDA	ENABLCache	;3
   1470  f74a		       85 1f		      STA	ENABL	;3
   1471  f74c
   1472  f74c		       a5 86		      LDA	ENAM0Cache	;3
   1473  f74e		       85 1d		      STA	ENAM0	;3
   1474  f750
   1475  f750		       a5 87		      LDA	ENAM1Cache	;3
   1476  f752		       85 1e		      STA	ENAM1	;3
   1477  f754
   1478  f754		       60		      RTS		;6
   1479  f755				   EndLoadAll
   1480  f755
   1481  f755				   NextDifficulty
   1482  f755		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1483  f757		       29 01		      AND	#%00000001
   1484  f759		       d0 3f		      BNE	CheckRandomDifficulty
   1485  f75b
   1486  f75b		       a5 c4		      LDA	CurrentDifficulty
   1487  f75d		       18		      CLC
   1488  f75e		       69 01		      ADC	#1
   1489  f760		       29 03		      AND	#%00000011	; 0 to 3
   1490  f762		       85 c4		      STA	CurrentDifficulty
   1491  f764
   1492  f764				   ConfigureDifficulty
   1493  f764		       a5 c4		      LDA	CurrentDifficulty
   1494  f766		       f0 0b		      BEQ	ConfigureLightTraffic
   1495  f768		       c9 01		      CMP	#1
   1496  f76a		       f0 10		      BEQ	ConfigureRegularTraffic
   1497  f76c		       c9 02		      CMP	#2
   1498  f76e		       f0 15		      BEQ	ConfigureIntenseTraffic
   1499  f770		       4c 8e f7 	      JMP	ConfigureRushHourTraffic
   1500  f773
   1501  f773				   ConfigureLightTraffic
   1502  f773		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1503  f775		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1504  f777		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1505  f779		       4c 94 f7 	      JMP	StoreTrafficChance
   1506  f77c				   ConfigureRegularTraffic
   1507  f77c		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1508  f77e		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1509  f780		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1510  f782		       4c 94 f7 	      JMP	StoreTrafficChance
   1511  f785				   ConfigureIntenseTraffic
   1512  f785		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1513  f787		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1514  f789		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1515  f78b		       4c 94 f7 	      JMP	StoreTrafficChance
   1516  f78e				   ConfigureRushHourTraffic
   1517  f78e		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1518  f790		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1519  f792		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1520  f794
   1521  f794				   StoreTrafficChance
   1522  f794		       86 c1		      STX	TrafficChance
   1523  f796		       84 c2		      STY	CheckpointTime
   1524  f798		       85 c3		      STA	TrafficColor
   1525  f79a
   1526  f79a				   CheckRandomDifficulty
   1527  f79a		       a5 c5		      LDA	GameMode
   1528  f79c		       29 08		      AND	#%00001000	; Random difficulties
   1529  f79e		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1530  f7a0				   RandomDificulty
   1531  f7a0		       a6 8c		      LDX	FrameCount0
   1532  f7a2		       bd 00 fe 	      LDA	AesTable,X
   1533  f7a5		       45 c1		      EOR	TrafficChance
   1534  f7a7		       29 3f		      AND	#%00111111
   1535  f7a9		       85 c1		      STA	TrafficChance
   1536  f7ab
   1537  f7ab				   ReturnFromNextDifficulty
   1538  f7ab		       60		      RTS
   1539  f7ac				   EndNextDifficulty
   1540  f7ac
   1541  f7ac				   DefaultOffsets
   1542  f7ac		       a9 20		      LDA	#$20
   1543  f7ae		       85 96		      STA	TrafficOffset1 + 2
   1544  f7b0		       a9 40		      LDA	#$40
   1545  f7b2		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1546  f7b4		       a9 60		      LDA	#$60
   1547  f7b6		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1548  f7b8		       a9 80		      LDA	#$80
   1549  f7ba		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1550  f7bc		       a9 a0		      LDA	#$A0
   1551  f7be		       60		      RTS
   1552  f7bf
   1553  f7bf				   PrintStaticText		; Preload X with the offset referent to StaticText
   1554  f7bf		       bd 00 ff 	      LDA	StaticText,X
   1555  f7c2		       85 d0		      STA	ScoreD0
   1556  f7c4		       e8		      INX
   1557  f7c5		       bd 00 ff 	      LDA	StaticText,X
   1558  f7c8		       85 d1		      STA	ScoreD1
   1559  f7ca		       e8		      INX
   1560  f7cb		       bd 00 ff 	      LDA	StaticText,X
   1561  f7ce		       85 d2		      STA	ScoreD2
   1562  f7d0		       e8		      INX
   1563  f7d1		       bd 00 ff 	      LDA	StaticText,X
   1564  f7d4		       85 d3		      STA	ScoreD3
   1565  f7d6		       e8		      INX
   1566  f7d7		       bd 00 ff 	      LDA	StaticText,X
   1567  f7da		       85 d4		      STA	ScoreD4
   1568  f7dc		       60		      RTS
   1569  f7dd
   1570  f7dd				   HorizontalParallaxLoop
   1571  f7dd		       a9 ef		      LDA	#%11101111	; Clear the house
   1572  f7df		       39 d8 00 	      AND	ParallaxCache,Y
   1573  f7e2		       99 d8 00 	      STA	ParallaxCache,Y
   1574  f7e5				   CalculateParallax0
   1575  f7e5		       98		      TYA
   1576  f7e6		       18		      CLC
   1577  f7e7		       65 91		      ADC	TrafficOffset0 + 1
   1578  f7e9		       29 04		      AND	#%00000100
   1579  f7eb		       f0 08		      BEQ	HasEmptySpace0
   1580  f7ed				   HasBorder0
   1581  f7ed		       b9 d8 00 	      LDA	ParallaxCache,Y
   1582  f7f0		       09 0f		      ORA	#%00001111
   1583  f7f2		       4c fa f7 	      JMP	StoreParallax0
   1584  f7f5				   HasEmptySpace0
   1585  f7f5		       b9 d8 00 	      LDA	ParallaxCache,Y
   1586  f7f8		       29 f0		      AND	#%11110000
   1587  f7fa
   1588  f7fa				   StoreParallax0
   1589  f7fa		       99 d8 00 	      STA	ParallaxCache,Y
   1590  f7fd
   1591  f7fd				   CalculateParallax1
   1592  f7fd		       98		      TYA
   1593  f7fe		       18		      CLC
   1594  f7ff		       65 c7		      ADC	ParallaxOffset1 + 1
   1595  f801		       29 04		      AND	#%00000100
   1596  f803		       f0 08		      BEQ	HasEmptySpace1
   1597  f805				   HasBorder1
   1598  f805		       b9 d8 00 	      LDA	ParallaxCache,Y
   1599  f808		       09 e0		      ORA	#%11100000
   1600  f80a		       4c 12 f8 	      JMP	StoreParallax1
   1601  f80d				   HasEmptySpace1
   1602  f80d		       b9 d8 00 	      LDA	ParallaxCache,Y
   1603  f810		       29 1f		      AND	#%00011111
   1604  f812
   1605  f812				   StoreParallax1
   1606  f812		       99 d8 00 	      STA	ParallaxCache,Y
   1607  f815
   1608  f815				   CalculateParallax2
   1609  f815		       98		      TYA
   1610  f816		       18		      CLC
   1611  f817		       65 c9		      ADC	ParallaxOffset2 + 1
   1612  f819		       29 04		      AND	#%00000100
   1613  f81b		       f0 05		      BEQ	HasEmptySpace2
   1614  f81d				   HasBorder2
   1615  f81d		       a9 60		      LDA	#%01100000
   1616  f81f		       4c 24 f8 	      JMP	StoreParallax2
   1617  f822				   HasEmptySpace2
   1618  f822		       a9 00		      LDA	#0
   1619  f824
   1620  f824				   StoreParallax2
   1621  f824		       99 f0 00 	      STA	ParallaxCache2,Y
   1622  f827
   1623  f827				   ContinueHorizontalParallaxLoop
   1624  f827		       88		      DEY
   1625  f828		       10 b3		      BPL	HorizontalParallaxLoop
   1626  f82a		       60		      RTS
   1627  f82b
   1628  f82b				   DefaultBorderLoop
   1629  f82b				   CalculateDefaultBorder
   1630  f82b		       98		      TYA
   1631  f82c		       18		      CLC
   1632  f82d		       65 91		      ADC	TrafficOffset0 + 1
   1633  f82f		       29 04		      AND	#%00000100
   1634  f831		       f0 05		      BEQ	HasEmptySpace
   1635  f833				   HasBorder
   1636  f833		       a9 ff		      LDA	#$FF
   1637  f835		       4c 3a f8 	      JMP	StoreBorder
   1638  f838				   HasEmptySpace
   1639  f838		       a9 00		      LDA	#0
   1640  f83a
   1641  f83a				   StoreBorder
   1642  f83a		       99 d8 00 	      STA	ParallaxCache,Y
   1643  f83d		       a9 00		      LDA	#0
   1644  f83f		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1645  f842
   1646  f842				   ContinueDefaultBorderLoop
   1647  f842		       88		      DEY
   1648  f843		       10 e6		      BPL	DefaultBorderLoop
   1649  f845		       60		      RTS
   1650  f846
   1651  f846				   PrepareTachometerBorderLoop
   1652  f846		       a5 8e		      LDA	Player0SpeedL
   1653  f848		       29 80		      AND	#%10000000
   1654  f84a		       05 8f		      ORA	Player0SpeedH
   1655  f84c		       18		      CLC
   1656  f84d		       2a		      ROL
   1657  f84e		       69 00		      ADC	#0
   1658  f850		       85 b0		      STA	Tmp0	; Gear
   1659  f852		       a5 8e		      LDA	Player0SpeedL
   1660  f854		       4a		      LSR
   1661  f855		       4a		      LSR
   1662  f856		       4a		      LSR
   1663  f857		       4a		      LSR
   1664  f858		       29 07		      AND	#%00000111
   1665  f85a		       85 b1		      STA	Tmp1	; RPM
   1666  f85c		       a6 a9		      LDX	CurrentCarId	; Y cannot be destroyed here
   1667  f85e		       bd d9 ff 	      LDA	CarIdToMaxGear,X
   1668  f861		       85 b2		      STA	Tmp2	; Max Gear
   1669  f863
   1670  f863				   TachometerBorderLoop
   1671  f863		       98		      TYA
   1672  f864		       18		      CLC
   1673  f865		       65 91		      ADC	TrafficOffset0 + 1
   1674  f867		       29 04		      AND	#%00000100
   1675  f869		       f0 10		      BEQ	HasBorderTac
   1676  f86b		       a6 b0		      LDX	Tmp0
   1677  f86d		       bd eb fd 	      LDA	TachometerGearLookup,X
   1678  f870		       99 d8 00 	      STA	ParallaxCache,Y
   1679  f873		       a9 00		      LDA	#0
   1680  f875		       99 f0 00 	      STA	ParallaxCache2,Y
   1681  f878		       4c 9d f8 	      JMP	ContinueBorderTac
   1682  f87b				   HasBorderTac
   1683  f87b		       a5 b2		      LDA	Tmp2	; Max Gear
   1684  f87d		       c5 b0		      CMP	Tmp0	; Only on max speed
   1685  f87f		       f0 11		      BEQ	FullBorderTac
   1686  f881		       a6 b1		      LDX	Tmp1
   1687  f883		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1688  f886		       99 d8 00 	      STA	ParallaxCache,Y
   1689  f889		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1690  f88c		       99 f0 00 	      STA	ParallaxCache2,Y
   1691  f88f		       4c 9d f8 	      JMP	ContinueBorderTac
   1692  f892
   1693  f892				   FullBorderTac
   1694  f892		       a9 ff		      LDA	#$FF
   1695  f894		       99 d8 00 	      STA	ParallaxCache,Y
   1696  f897		       99 f0 00 	      STA	ParallaxCache2,Y
   1697  f89a		       4c 9d f8 	      JMP	ContinueBorderTac
   1698  f89d
   1699  f89d				   ContinueBorderTac
   1700  f89d		       88		      DEY
   1701  f89e		       10 c3		      BPL	TachometerBorderLoop
   1702  f8a0		       60		      RTS
   1703  f8a1
   1704  f8a1				   VerticalParallaxLoop
   1705  f8a1				   CalculateVerticalParallax0
   1706  f8a1		       98		      TYA
   1707  f8a2		       18		      CLC
   1708  f8a3		       65 91		      ADC	TrafficOffset0 + 1
   1709  f8a5		       29 06		      AND	#%00000110
   1710  f8a7		       d0 0b		      BNE	HasNoVerticalLine0
   1711  f8a9				   HasVerticalLine0
   1712  f8a9		       a9 ff		      LDA	#$FF
   1713  f8ab		       99 d8 00 	      STA	ParallaxCache,Y
   1714  f8ae		       99 f0 00 	      STA	ParallaxCache2,Y
   1715  f8b1		       4c f1 f8 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1716  f8b4				   HasNoVerticalLine0
   1717  f8b4		       a9 00		      LDA	#0
   1718  f8b6		       99 d8 00 	      STA	ParallaxCache,Y
   1719  f8b9		       99 f0 00 	      STA	ParallaxCache2,Y
   1720  f8bc
   1721  f8bc				   CalculateVerticalParallax1
   1722  f8bc		       98		      TYA
   1723  f8bd		       18		      CLC
   1724  f8be		       65 c7		      ADC	ParallaxOffset1 + 1
   1725  f8c0		       29 07		      AND	#%00000111
   1726  f8c2		       d0 0d		      BNE	HasNoVerticalLine1
   1727  f8c4
   1728  f8c4				   HasVerticalLine1
   1729  f8c4		       a9 fc		      LDA	#%11111100
   1730  f8c6		       99 d8 00 	      STA	ParallaxCache,Y
   1731  f8c9		       a9 c0		      LDA	#%11000000
   1732  f8cb		       99 f0 00 	      STA	ParallaxCache2,Y
   1733  f8ce		       4c f1 f8 	      JMP	ContinueVerticalParallaxLoop
   1734  f8d1				   HasNoVerticalLine1
   1735  f8d1		       a9 00		      LDA	#0
   1736  f8d3		       99 d8 00 	      STA	ParallaxCache,Y
   1737  f8d6		       99 f0 00 	      STA	ParallaxCache2,Y
   1738  f8d9
   1739  f8d9				   CalculateVerticalParallax2
   1740  f8d9		       98		      TYA
   1741  f8da		       18		      CLC
   1742  f8db		       65 c9		      ADC	ParallaxOffset2 + 1
   1743  f8dd		       29 07		      AND	#%00000111
   1744  f8df		       d0 08		      BNE	HasNoVerticalLine2
   1745  f8e1
   1746  f8e1				   HasVerticalLine2
   1747  f8e1		       a9 f0		      LDA	#%11110000
   1748  f8e3		       99 d8 00 	      STA	ParallaxCache,Y
   1749  f8e6		       4c f1 f8 	      JMP	ContinueVerticalParallaxLoop
   1750  f8e9				   HasNoVerticalLine2
   1751  f8e9		       a9 00		      LDA	#0
   1752  f8eb		       99 d8 00 	      STA	ParallaxCache,Y
   1753  f8ee		       99 f0 00 	      STA	ParallaxCache2,Y
   1754  f8f1
   1755  f8f1				   ContinueVerticalParallaxLoop
   1756  f8f1		       88		      DEY
   1757  f8f2		       10 ad		      BPL	VerticalParallaxLoop
   1758  f8f4		       60		      RTS
   1759  f8f5
   1760  f8f5				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1761  f8f5		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1762  f8f7		       85 d5		      STA	ScoreFontColor
   1763  f8f9		       a9 01		      LDA	#1
   1764  f8fb		       85 d6		      STA	ScoreFontColorHoldChange
   1765  f8fd
   1766  f8fd		       a5 8d		      LDA	FrameCount1
   1767  f8ff		       29 07		      AND	#%00000111
   1768  f901		       85 b3		      STA	Tmp3
   1769  f903							;0 is Zelda Name, (default)
   1770  f903		       a9 01		      LDA	#1
   1771  f905		       c5 b3		      CMP	Tmp3
   1772  f907		       f0 38		      BEQ	PrintZeldaDateLeft
   1773  f909
   1774  f909		       a9 02		      LDA	#2
   1775  f90b		       c5 b3		      CMP	Tmp3
   1776  f90d		       f0 23		      BEQ	PrintPolvinhosLeft
   1777  f90f
   1778  f90f		       a9 03		      LDA	#3
   1779  f911		       c5 b3		      CMP	Tmp3
   1780  f913		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1781  f915
   1782  f915		       a9 04		      LDA	#4
   1783  f917		       c5 b3		      CMP	Tmp3
   1784  f919		       f0 1c		      BEQ	PrintIvonneLeft
   1785  f91b
   1786  f91b		       a9 05		      LDA	#5
   1787  f91d		       c5 b3		      CMP	Tmp3
   1788  f91f		       f0 2a		      BEQ	PrintIvonneDateLeft
   1789  f921
   1790  f921		       a9 06		      LDA	#6
   1791  f923		       c5 b3		      CMP	Tmp3
   1792  f925		       f0 15		      BEQ	PrintArtLeft
   1793  f927
   1794  f927		       a9 07		      LDA	#7
   1795  f929		       c5 b3		      CMP	Tmp3
   1796  f92b		       f0 23		      BEQ	PrintLeonardoLeft
   1797  f92d
   1798  f92d				   PrintZeldaLeft
   1799  f92d		       a2 28		      LDX	#<ZeldaTextLeft
   1800  f92f		       4c 55 f9 	      JMP	ProcessPrintEasterEgg
   1801  f932				   PrintPolvinhosLeft
   1802  f932		       a2 3c		      LDX	#<PolvinhosTextLeft
   1803  f934		       4c 55 f9 	      JMP	ProcessPrintEasterEgg
   1804  f937				   PrintIvonneLeft
   1805  f937		       a2 50		      LDX	#<IvonneTextLeft
   1806  f939		       4c 55 f9 	      JMP	ProcessPrintEasterEgg
   1807  f93c				   PrintArtLeft
   1808  f93c		       a2 64		      LDX	#<PaperArtTextLeft
   1809  f93e		       4c 55 f9 	      JMP	ProcessPrintEasterEgg
   1810  f941
   1811  f941				   PrintZeldaDateLeft
   1812  f941		       a2 32		      LDX	#<ZeldaDateLeft
   1813  f943		       4c 55 f9 	      JMP	ProcessPrintEasterEgg
   1814  f946				   PrintPolvinhosDateLeft
   1815  f946		       a2 46		      LDX	#<PolvinhosDateLeft
   1816  f948		       4c 55 f9 	      JMP	ProcessPrintEasterEgg
   1817  f94b				   PrintIvonneDateLeft
   1818  f94b		       a2 5a		      LDX	#<IvonneDateLeft
   1819  f94d		       4c 55 f9 	      JMP	ProcessPrintEasterEgg
   1820  f950				   PrintLeonardoLeft
   1821  f950		       a2 6e		      LDX	#<LeonardoTextLeft
   1822  f952		       4c 55 f9 	      JMP	ProcessPrintEasterEgg
   1823  f955
   1824  f955				   ProcessPrintEasterEgg
   1825  f955		       a5 8c		      LDA	FrameCount0	;3
   1826  f957		       29 01		      AND	#%00000001	;2
   1827  f959		       d0 03		      BNE	TranformIntoRightText
   1828  f95b		       4c 63 f9 	      JMP	PrintEasterEggText
   1829  f95e				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1830  f95e		       8a		      TXA
   1831  f95f		       18		      CLC
   1832  f960		       69 05		      ADC	#HALF_TEXT_SIZE
   1833  f962		       aa		      TAX
   1834  f963
   1835  f963				   PrintEasterEggText
   1836  f963		       20 bf f7 	      JSR	PrintStaticText
   1837  f966		       60		      RTS
   1838  f967
   1839  f967				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1840  f967		       a2 00		      LDX	#0
   1841  f969		       a0 04		      LDY	#FONT_OFFSET
   1842  f96b
   1843  f96b				   ScoreLoop		; 20 
   1844  f96b		       85 02		      STA	WSYNC	;2
   1845  f96d
   1846  f96d		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1847  f96f		       85 0d		      STA	PF0	;3
   1848  f971
   1849  f971		       a5 82		      LDA	PF1Cache	;3
   1850  f973		       85 0e		      STA	PF1	;3
   1851  f975
   1852  f975		       a5 83		      LDA	PF2Cache	;3
   1853  f977		       85 0f		      STA	PF2	;3
   1854  f979
   1855  f979				   DrawScoreD0		; 15
   1856  f979		       a6 d0		      LDX	ScoreD0	; 3
   1857  f97b		       bd 00 fd 	      LDA	Font,X	;4
   1858  f97e		       85 81		      STA	PF0Cache	;3
   1859  f980		       c6 d0		      DEC	ScoreD0	;5
   1860  f982
   1861  f982				   DrawScoreD1		; 23	
   1862  f982		       a6 d1		      LDX	ScoreD1	; 3
   1863  f984		       bd 00 fd 	      LDA	Font,X	;4
   1864  f987		       0a		      ASL		;2
   1865  f988		       0a		      ASL		;2
   1866  f989		       0a		      ASL		;2
   1867  f98a		       0a		      ASL		;2
   1868  f98b		       85 82		      STA	PF1Cache	;3
   1869  f98d		       c6 d1		      DEC	ScoreD1	;5
   1870  f98f
   1871  f98f				   DrawScoreD2		; 20
   1872  f98f		       a6 d2		      LDX	ScoreD2	; 3
   1873  f991		       bd 00 fd 	      LDA	Font,X	;4
   1874  f994		       29 0f		      AND	#%00001111	;2
   1875  f996		       05 82		      ORA	PF1Cache	;3
   1876  f998		       85 82		      STA	PF1Cache	;3
   1877  f99a		       c6 d2		      DEC	ScoreD2	;5
   1878  f99c
   1879  f99c				   DrawScoreD3		; 23
   1880  f99c		       a6 d3		      LDX	ScoreD3	; 3
   1881  f99e		       bd 00 fd 	      LDA	Font,X	;4
   1882  f9a1		       4a		      LSR		;2
   1883  f9a2		       4a		      LSR		;2
   1884  f9a3		       4a		      LSR		;2
   1885  f9a4		       4a		      LSR		;2
   1886  f9a5		       85 83		      STA	PF2Cache	;3
   1887  f9a7		       c6 d3		      DEC	ScoreD3	;5
   1888  f9a9
   1889  f9a9				   DrawScoreD4		; 20
   1890  f9a9		       a6 d4		      LDX	ScoreD4	; 3
   1891  f9ab		       bd 00 fd 	      LDA	Font,X	;4
   1892  f9ae		       29 f0		      AND	#%11110000	;2
   1893  f9b0		       05 83		      ORA	PF2Cache	;3
   1894  f9b2		       85 83		      STA	PF2Cache	;3
   1895  f9b4		       c6 d4		      DEC	ScoreD4	;5
   1896  f9b6
   1897  f9b6
   1898  f9b6		       88		      DEY		;2
   1899  f9b7		       10 b2		      BPL	ScoreLoop	;4
   1900  f9b9
   1901  f9b9		       85 02		      STA	WSYNC
   1902  f9bb		       20 38 f7 	      JSR	LoadAll
   1903  f9be		       60		      RTS		; 6
   1904  f9bf
   1905  f9bf				   PrintRightDecimalDigits
   1906  f9bf		       b9 00 00 	      LDA	0,Y
   1907  f9c2		       4a		      LSR
   1908  f9c3		       4a		      LSR
   1909  f9c4		       4a		      LSR
   1910  f9c5		       4a		      LSR
   1911  f9c6		       aa		      TAX
   1912  f9c7		       bd be fd 	      LDA	FontLookup,X	;4
   1913  f9ca		       85 d2		      STA	ScoreD2	;3
   1914  f9cc
   1915  f9cc		       b9 00 00 	      LDA	0,Y
   1916  f9cf		       29 0f		      AND	#%00001111
   1917  f9d1		       aa		      TAX
   1918  f9d2		       bd be fd 	      LDA	FontLookup,X	;4
   1919  f9d5		       85 d3		      STA	ScoreD3	;3
   1920  f9d7
   1921  f9d7		       c8		      INY
   1922  f9d8		       b9 00 00 	      LDA	0,Y
   1923  f9db		       4a		      LSR
   1924  f9dc		       4a		      LSR
   1925  f9dd		       4a		      LSR
   1926  f9de		       4a		      LSR
   1927  f9df		       aa		      TAX
   1928  f9e0		       bd be fd 	      LDA	FontLookup,X	;4
   1929  f9e3		       85 d0		      STA	ScoreD0	;3
   1930  f9e5
   1931  f9e5		       b9 00 00 	      LDA	0,Y
   1932  f9e8		       29 0f		      AND	#%00001111
   1933  f9ea		       aa		      TAX
   1934  f9eb		       bd be fd 	      LDA	FontLookup,X	;4
   1935  f9ee		       85 d1		      STA	ScoreD1	;3
   1936  f9f0
   1937  f9f0		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1938  f9f2		       85 d4		      STA	ScoreD4
   1939  f9f4		       60		      RTS
   1940  f9f5
   1941  f9f5				   PrintLastLeftDecimalDigits
   1942  f9f5		       b9 00 00 	      LDA	0,Y
   1943  f9f8		       4a		      LSR
   1944  f9f9		       4a		      LSR
   1945  f9fa		       4a		      LSR
   1946  f9fb		       4a		      LSR
   1947  f9fc		       aa		      TAX
   1948  f9fd		       bd be fd 	      LDA	FontLookup,X	;4
   1949  fa00		       85 d3		      STA	ScoreD3	;3
   1950  fa02		       b9 00 00 	      LDA	0,Y
   1951  fa05		       29 0f		      AND	#%00001111
   1952  fa07		       aa		      TAX
   1953  fa08		       bd be fd 	      LDA	FontLookup,X	;4
   1954  fa0b		       85 d4		      STA	ScoreD4	;3
   1955  fa0d		       60		      RTS
   1956  fa0e
   1957  fa0e				   PrintZerosLeft
   1958  fa0e		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1959  fa10		       85 d2		      STA	ScoreD2
   1960  fa12		       85 d3		      STA	ScoreD3
   1961  fa14		       85 d4		      STA	ScoreD4
   1962  fa16		       60		      RTS
   1963  fa17
   1964  fa17				   DrawGameOverScoreLine
   1965  fa17		       85 02		      STA	WSYNC
   1966  fa19		       20 67 f9 	      JSR	PrintScore
   1967  fa1c		       85 02		      STA	WSYNC
   1968  fa1e		       85 02		      STA	WSYNC
   1969  fa20		       20 29 f7 	      JSR	ClearPF
   1970  fa23		       60		      RTS
   1971  fa24
   1972  fa24				   DrawGameOverScreenLeft
   1973  fa24		       85 02		      STA	WSYNC
   1974  fa26		       20 29 f7 	      JSR	ClearPF
   1975  fa29
   1976  fa29				   DrawBcdScoreLeft
   1977  fa29		       20 dc fb 	      JSR	Sleep8Lines
   1978  fa2c		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1979  fa2e		       85 06		      STA	COLUP0
   1980  fa30		       85 02		      STA	WSYNC
   1981  fa32		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1982  fa34		       85 d0		      STA	ScoreD0
   1983  fa36
   1984  fa36		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1985  fa38		       85 d1		      STA	ScoreD1
   1986  fa3a
   1987  fa3a		       a5 b7		      LDA	ScoreBcd3
   1988  fa3c		       29 0f		      AND	#%00001111
   1989  fa3e		       aa		      TAX
   1990  fa3f		       bd be fd 	      LDA	FontLookup,X	;4
   1991  fa42		       85 d2		      STA	ScoreD2	;3
   1992  fa44
   1993  fa44		       a0 b6		      LDY	#ScoreBcd2
   1994  fa46		       20 f5 f9 	      JSR	PrintLastLeftDecimalDigits
   1995  fa49
   1996  fa49		       20 17 fa 	      JSR	DrawGameOverScoreLine
   1997  fa4c
   1998  fa4c				   DrawTimerLeft
   1999  fa4c		       20 dc fb 	      JSR	Sleep8Lines
   2000  fa4f		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2001  fa51		       85 06		      STA	COLUP0
   2002  fa53		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   2003  fa55		       85 d0		      STA	ScoreD0
   2004  fa57		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2005  fa59		       85 d1		      STA	ScoreD1
   2006  fa5b		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   2007  fa5d		       85 d2		      STA	ScoreD2
   2008  fa5f		       a0 bf		      LDY	#TimeBcd2
   2009  fa61		       85 02		      STA	WSYNC
   2010  fa63		       20 f5 f9 	      JSR	PrintLastLeftDecimalDigits
   2011  fa66		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2012  fa69
   2013  fa69				   DrawGlideTimerLeft
   2014  fa69		       20 dc fb 	      JSR	Sleep8Lines
   2015  fa6c		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2016  fa6e		       85 06		      STA	COLUP0
   2017  fa70		       85 02		      STA	WSYNC
   2018  fa72		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2019  fa74		       85 d0		      STA	ScoreD0
   2020  fa76		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2021  fa78		       85 d1		      STA	ScoreD1
   2022  fa7a		       20 0e fa 	      JSR	PrintZerosLeft
   2023  fa7d		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2024  fa80
   2025  fa80				   DrawHitCountLeft
   2026  fa80		       20 dc fb 	      JSR	Sleep8Lines
   2027  fa83		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2028  fa85		       85 06		      STA	COLUP0
   2029  fa87		       85 02		      STA	WSYNC
   2030  fa89		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2031  fa8b		       85 d0		      STA	ScoreD0
   2032  fa8d		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2033  fa8f		       85 d1		      STA	ScoreD1
   2034  fa91		       20 0e fa 	      JSR	PrintZerosLeft
   2035  fa94		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2036  fa97
   2037  fa97				   DrawCheckpointCountLeft
   2038  fa97		       20 dc fb 	      JSR	Sleep8Lines
   2039  fa9a		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2040  fa9c		       85 06		      STA	COLUP0
   2041  fa9e		       85 02		      STA	WSYNC
   2042  faa0		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2043  faa2		       85 d0		      STA	ScoreD0
   2044  faa4		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2045  faa6		       85 d1		      STA	ScoreD1
   2046  faa8		       20 0e fa 	      JSR	PrintZerosLeft
   2047  faab		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2048  faae
   2049  faae				   DrawGameVersionLeft
   2050  faae		       20 dc fb 	      JSR	Sleep8Lines
   2051  fab1		       a9 49		      LDA	#VERSION_COLOR
   2052  fab3		       85 06		      STA	COLUP0
   2053  fab5
   2054  fab5		       a5 c5		      LDA	GameMode
   2055  fab7		       aa		      TAX
   2056  fab8		       bd be fd 	      LDA	FontLookup,X	;4
   2057  fabb		       85 d0		      STA	ScoreD0	;3
   2058  fabd
   2059  fabd		       a5 a9		      LDA	CurrentCarId
   2060  fabf		       aa		      TAX
   2061  fac0		       bd be fd 	      LDA	FontLookup,X	;4
   2062  fac3		       85 d1		      STA	ScoreD1	;3
   2063  fac5
   2064  fac5		       a5 a6		      LDA	StartSWCHB
   2065  fac7		       29 40		      AND	#%01000000	; P0 difficulty
   2066  fac9		       49 40		      EOR	#%01000000	; Reverse bytes
   2067  facb		       2a		      ROL
   2068  facc		       2a		      ROL
   2069  facd		       2a		      ROL
   2070  face		       18		      CLC
   2071  facf		       69 0a		      ADC	#10
   2072  fad1		       aa		      TAX
   2073  fad2		       bd be fd 	      LDA	FontLookup,X	;4
   2074  fad5		       85 d2		      STA	ScoreD2	;3
   2075  fad7
   2076  fad7		       a5 a6		      LDA	StartSWCHB
   2077  fad9		       29 80		      AND	#%10000000	; P0 difficulty
   2078  fadb		       49 80		      EOR	#%10000000	; Reverse bytes
   2079  fadd		       2a		      ROL
   2080  fade		       2a		      ROL
   2081  fadf		       18		      CLC
   2082  fae0		       69 0a		      ADC	#10
   2083  fae2		       aa		      TAX
   2084  fae3		       bd be fd 	      LDA	FontLookup,X	;4
   2085  fae6		       85 d3		      STA	ScoreD3	;3
   2086  fae8
   2087  fae8		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2088  faea		       85 d4		      STA	ScoreD4
   2089  faec
   2090  faec		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2091  faef
   2092  faef		       4c 55 fb 	      JMP	FinalizeDrawGameOver
   2093  faf2
   2094  faf2				   DrawGameOverScreenRight
   2095  faf2		       85 02		      STA	WSYNC
   2096  faf4		       20 29 f7 	      JSR	ClearPF
   2097  faf7
   2098  faf7				   DrawBcdScoreRight
   2099  faf7		       20 dc fb 	      JSR	Sleep8Lines
   2100  fafa		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2101  fafc		       85 07		      STA	COLUP1
   2102  fafe		       85 02		      STA	WSYNC
   2103  fb00		       a0 b4		      LDY	#ScoreBcd0
   2104  fb02		       20 bf f9 	      JSR	PrintRightDecimalDigits
   2105  fb05
   2106  fb05		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2107  fb08
   2108  fb08				   DrawTimerRight
   2109  fb08		       20 dc fb 	      JSR	Sleep8Lines
   2110  fb0b		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2111  fb0d		       85 07		      STA	COLUP1
   2112  fb0f		       a0 bd		      LDY	#TimeBcd0
   2113  fb11		       20 bf f9 	      JSR	PrintRightDecimalDigits
   2114  fb14
   2115  fb14		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2116  fb17				   DrawGlideTimeRight
   2117  fb17		       20 dc fb 	      JSR	Sleep8Lines
   2118  fb1a		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2119  fb1c		       85 07		      STA	COLUP1
   2120  fb1e		       a0 cd		      LDY	#GlideTimeBcd0
   2121  fb20		       20 bf f9 	      JSR	PrintRightDecimalDigits
   2122  fb23		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2123  fb26
   2124  fb26				   DrawHitCountRight
   2125  fb26		       20 dc fb 	      JSR	Sleep8Lines
   2126  fb29		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2127  fb2b		       85 07		      STA	COLUP1
   2128  fb2d		       a0 cb		      LDY	#HitCountBcd0
   2129  fb2f		       20 bf f9 	      JSR	PrintRightDecimalDigits
   2130  fb32		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2131  fb35
   2132  fb35				   DrawCheckpointCountRight
   2133  fb35		       20 dc fb 	      JSR	Sleep8Lines
   2134  fb38		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2135  fb3a		       85 07		      STA	COLUP1
   2136  fb3c		       a0 a4		      LDY	#CheckpointBcd0
   2137  fb3e		       20 bf f9 	      JSR	PrintRightDecimalDigits
   2138  fb41		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2139  fb44
   2140  fb44				   DrawVersionRight
   2141  fb44		       20 dc fb 	      JSR	Sleep8Lines
   2142  fb47		       a9 49		      LDA	#VERSION_COLOR
   2143  fb49		       85 07		      STA	COLUP1
   2144  fb4b		       85 02		      STA	WSYNC
   2145  fb4d		       a2 78		      LDX	#<VersionText
   2146  fb4f		       20 bf f7 	      JSR	PrintStaticText
   2147  fb52		       20 17 fa 	      JSR	DrawGameOverScoreLine
   2148  fb55
   2149  fb55				   FinalizeDrawGameOver
   2150  fb55		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2151  fb57		       85 d5		      STA	ScoreFontColor
   2152  fb59		       20 d3 fb 	      JSR	Sleep4Lines
   2153  fb5c		       20 e3 fb 	      JSR	Sleep32Lines
   2154  fb5f		       20 e3 fb 	      JSR	Sleep32Lines
   2155  fb62		       4c 4a f6 	      JMP	PrepareOverscan
   2156  fb65
   2157  fb65				   DrawQrCode
   2158  fb65		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2159  fb67		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2160  fb69		       a9 01		      LDA	#%00000001	; Mirror playfield
   2161  fb6b		       85 0a		      STA	CTRLPF
   2162  fb6d		       20 17 f7 	      JSR	ClearAll	; To be 100 sure!
   2163  fb70		       ad 82 02 	      LDA	SWCHB
   2164  fb73		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2165  fb75		       f0 07		      BEQ	StoreReversedQrCode
   2166  fb77		       86 09		      STX	COLUBK
   2167  fb79		       84 08		      STY	COLUPF
   2168  fb7b		       4c 82 fb 	      JMP	ContinueQrCode
   2169  fb7e				   StoreReversedQrCode
   2170  fb7e		       86 08		      STX	COLUPF
   2171  fb80		       84 09		      STY	COLUBK
   2172  fb82
   2173  fb82				   ContinueQrCode
   2174  fb82		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2175  fb84		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2176  fb86		       20 c9 fb 	      JSR	WaitForVblankEnd
   2177  fb89		       20 dc fb 	      JSR	Sleep8Lines
   2178  fb8c		       20 d3 fb 	      JSR	Sleep4Lines
   2179  fb8f
   2180  fb8f				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2181  fb8f		       85 02		      STA	WSYNC
   2182  fb91		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2183  fb94		       85 0e		      STA	PF1	;3
   2184  fb96		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2185  fb99		       85 0f		      STA	PF2	;3
      0  fb9b					      SLEEP	27	; 
      1  fb9b				   .CYCLES    SET	27
      2  fb9b
      3  fb9b				  -	      IF	.CYCLES < 2
      4  fb9b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb9b				  -	      ERR
      6  fb9b					      ENDIF
      7  fb9b
      8  fb9b					      IF	.CYCLES & 1
      9  fb9b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb9b				  -	      nop	0
     11  fb9b					      ELSE
     12  fb9b		       24 00		      bit	VSYNC
     13  fb9d					      ENDIF
     14  fb9d				   .CYCLES    SET	.CYCLES - 3
     15  fb9d					      ENDIF
     16  fb9d
     17  fb9d					      REPEAT	.CYCLES / 2
     18  fb9d		       ea		      nop
     17  fb9d					      REPEND
     18  fb9e		       ea		      nop
     17  fb9e					      REPEND
     18  fb9f		       ea		      nop
     17  fb9f					      REPEND
     18  fba0		       ea		      nop
     17  fba0					      REPEND
     18  fba1		       ea		      nop
     17  fba1					      REPEND
     18  fba2		       ea		      nop
     17  fba2					      REPEND
     18  fba3		       ea		      nop
     17  fba3					      REPEND
     18  fba4		       ea		      nop
     17  fba4					      REPEND
     18  fba5		       ea		      nop
     17  fba5					      REPEND
     18  fba6		       ea		      nop
     17  fba6					      REPEND
     18  fba7		       ea		      nop
     17  fba7					      REPEND
     18  fba8		       ea		      nop
     19  fba9					      REPEND
   2187  fba9		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2188  fbac		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2189  fbae		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2190  fbb1		       85 0e		      STA	PF1	;3
   2191  fbb3
   2192  fbb3		       ca		      DEX		;2
   2193  fbb4		       d0 d9		      BNE	QrCodeLoop	;2
   2194  fbb6		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2195  fbb8		       88		      DEY		;2
   2196  fbb9		       10 d4		      BPL	QrCodeLoop	;4
   2197  fbbb
   2198  fbbb				   EndQrCodeLoop
   2199  fbbb		       85 02		      STA	WSYNC	;
   2200  fbbd		       a9 00		      LDA	#0
   2201  fbbf		       85 0e		      STA	PF1	;3
   2202  fbc1		       85 0f		      STA	PF2	;3
   2203  fbc3
   2204  fbc3		       20 e3 fb 	      JSR	Sleep32Lines
   2205  fbc6		       4c 4a f6 	      JMP	PrepareOverscan
   2206  fbc9
   2207  fbc9				   WaitForVblankEnd
   2208  fbc9		       ad 84 02 	      LDA	INTIM
   2209  fbcc		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
   2210  fbce		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline? 
   2211  fbd0		       85 01		      STA	VBLANK
   2212  fbd2		       60		      RTS
   2213  fbd3
   2214  fbd3				   Sleep4Lines
   2215  fbd3		       85 02		      STA	WSYNC
   2216  fbd5		       85 02		      STA	WSYNC
   2217  fbd7		       85 02		      STA	WSYNC
   2218  fbd9		       85 02		      STA	WSYNC
   2219  fbdb		       60		      RTS
   2220  fbdc
   2221  fbdc				   Sleep8Lines
   2222  fbdc		       20 d3 fb 	      JSR	Sleep4Lines
   2223  fbdf		       20 d3 fb 	      JSR	Sleep4Lines
   2224  fbe2		       60		      RTS
   2225  fbe3
   2226  fbe3				   Sleep32Lines
   2227  fbe3		       20 dc fb 	      JSR	Sleep8Lines
   2228  fbe6		       20 dc fb 	      JSR	Sleep8Lines
   2229  fbe9		       20 dc fb 	      JSR	Sleep8Lines
   2230  fbec		       20 dc fb 	      JSR	Sleep8Lines
   2231  fbef		       60		      RTS
   2232  fbf0
   2233  fbf0							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   2234  fc00					      org	$FC00
   2235  fc00				   QrCode1
   2236  fc00		       1f		      .byte.b	#%00011111
   2237  fc01		       10		      .byte.b	#%00010000
   2238  fc02		       17		      .byte.b	#%00010111
   2239  fc03		       17		      .byte.b	#%00010111
   2240  fc04		       17		      .byte.b	#%00010111
   2241  fc05		       10		      .byte.b	#%00010000
   2242  fc06		       1f		      .byte.b	#%00011111
   2243  fc07		       00		      .byte.b	#%00000000
   2244  fc08		       17		      .byte.b	#%00010111
   2245  fc09		       10		      .byte.b	#%00010000
   2246  fc0a		       1d		      .byte.b	#%00011101
   2247  fc0b		       16		      .byte.b	#%00010110
   2248  fc0c		       03		      .byte.b	#%00000011
   2249  fc0d		       19		      .byte.b	#%00011001
   2250  fc0e		       13		      .byte.b	#%00010011
   2251  fc0f		       1c		      .byte.b	#%00011100
   2252  fc10		       0b		      .byte.b	#%00001011
   2253  fc11		       00		      .byte.b	#%00000000
   2254  fc12		       1f		      .byte.b	#%00011111
   2255  fc13		       10		      .byte.b	#%00010000
   2256  fc14		       17		      .byte.b	#%00010111
   2257  fc15		       17		      .byte.b	#%00010111
   2258  fc16		       17		      .byte.b	#%00010111
   2259  fc17		       10		      .byte.b	#%00010000
   2260  fc18		       1f		      .byte.b	#%00011111
   2261  fc19
   2262  fc19				   QrCode2
   2263  fc19		       c3		      .byte.b	#%11000011
   2264  fc1a		       9a		      .byte.b	#%10011010
   2265  fc1b		       82		      .byte.b	#%10000010
   2266  fc1c		       da		      .byte.b	#%11011010
   2267  fc1d		       aa		      .byte.b	#%10101010
   2268  fc1e		       ca		      .byte.b	#%11001010
   2269  fc1f		       f3		      .byte.b	#%11110011
   2270  fc20		       78		      .byte.b	#%01111000
   2271  fc21		       df		      .byte.b	#%11011111
   2272  fc22		       fc		      .byte.b	#%11111100
   2273  fc23		       c7		      .byte.b	#%11000111
   2274  fc24		       98		      .byte.b	#%10011000
   2275  fc25		       23		      .byte.b	#%00100011
   2276  fc26		       b9		      .byte.b	#%10111001
   2277  fc27		       d2		      .byte.b	#%11010010
   2278  fc28		       30		      .byte.b	#%00110000
   2279  fc29		       eb		      .byte.b	#%11101011
   2280  fc2a		       28		      .byte.b	#%00101000
   2281  fc2b		       ab		      .byte.b	#%10101011
   2282  fc2c		       72		      .byte.b	#%01110010
   2283  fc2d		       fa		      .byte.b	#%11111010
   2284  fc2e		       7a		      .byte.b	#%01111010
   2285  fc2f		       32		      .byte.b	#%00110010
   2286  fc30		       3a		      .byte.b	#%00111010
   2287  fc31		       63		      .byte.b	#%01100011
   2288  fc32
   2289  fc32				   QrCode3
   2290  fc32		       98		      .byte.b	#%10011000
   2291  fc33		       c3		      .byte.b	#%11000011
   2292  fc34		       39		      .byte.b	#%00111001
   2293  fc35		       34		      .byte.b	#%00110100
   2294  fc36		       ff		      .byte.b	#%11111111
   2295  fc37		       71		      .byte.b	#%01110001
   2296  fc38		       d5		      .byte.b	#%11010101
   2297  fc39		       d1		      .byte.b	#%11010001
   2298  fc3a		       5f		      .byte.b	#%01011111
   2299  fc3b		       26		      .byte.b	#%00100110
   2300  fc3c		       2d		      .byte.b	#%00101101
   2301  fc3d		       e9		      .byte.b	#%11101001
   2302  fc3e		       d6		      .byte.b	#%11010110
   2303  fc3f		       26		      .byte.b	#%00100110
   2304  fc40		       ba		      .byte.b	#%10111010
   2305  fc41		       03		      .byte.b	#%00000011
   2306  fc42		       dd		      .byte.b	#%11011101
   2307  fc43		       e0		      .byte.b	#%11100000
   2308  fc44		       57		      .byte.b	#%01010111
   2309  fc45		       14		      .byte.b	#%00010100
   2310  fc46		       35		      .byte.b	#%00110101
   2311  fc47		       e5		      .byte.b	#%11100101
   2312  fc48		       b5		      .byte.b	#%10110101
   2313  fc49		       d4		      .byte.b	#%11010100
   2314  fc4a		       97		      .byte.b	#%10010111
   2315  fc4b
   2316  fc4b				   QrCode4
   2317  fc4b		       09		      .byte.b	#%00001001
   2318  fc4c		       0e		      .byte.b	#%00001110
   2319  fc4d		       0f		      .byte.b	#%00001111
   2320  fc4e		       0c		      .byte.b	#%00001100
   2321  fc4f		       0c		      .byte.b	#%00001100
   2322  fc50		       08		      .byte.b	#%00001000
   2323  fc51		       08		      .byte.b	#%00001000
   2324  fc52		       06		      .byte.b	#%00000110
   2325  fc53		       06		      .byte.b	#%00000110
   2326  fc54		       0b		      .byte.b	#%00001011
   2327  fc55		       0f		      .byte.b	#%00001111
   2328  fc56		       04		      .byte.b	#%00000100
   2329  fc57		       08		      .byte.b	#%00001000
   2330  fc58		       0f		      .byte.b	#%00001111
   2331  fc59		       09		      .byte.b	#%00001001
   2332  fc5a		       07		      .byte.b	#%00000111
   2333  fc5b		       05		      .byte.b	#%00000101
   2334  fc5c		       00		      .byte.b	#%00000000
   2335  fc5d		       0f		      .byte.b	#%00001111
   2336  fc5e		       08		      .byte.b	#%00001000
   2337  fc5f		       0b		      .byte.b	#%00001011
   2338  fc60		       0b		      .byte.b	#%00001011
   2339  fc61		       0b		      .byte.b	#%00001011
   2340  fc62		       08		      .byte.b	#%00001000
   2341  fc63		       0f		      .byte.b	#%00001111
   2342  fc64
   2343  fd00					      org	$FD00
   2344  fd00				   Font
   2345  fd00				   C0
   2346  fd00		       e7		      .byte.b	#%11100111	;
   2347  fd01		       a5		      .byte.b	#%10100101	; 
   2348  fd02		       a5		      .byte.b	#%10100101	; 
   2349  fd03		       a5		      .byte.b	#%10100101	; 
   2350  fd04		       e7		      .byte.b	#%11100111	;	
   2351  fd05				   C1
   2352  fd05		       e7		      .byte.b	#%11100111	;
   2353  fd06		       42		      .byte.b	#%01000010	; 
   2354  fd07		       42		      .byte.b	#%01000010	; 
   2355  fd08		       42		      .byte.b	#%01000010	; 
   2356  fd09		       66		      .byte.b	#%01100110	;
   2357  fd0a				   C2
   2358  fd0a		       e7		      .byte.b	#%11100111	;
   2359  fd0b		       24		      .byte.b	#%00100100	; 
   2360  fd0c		       e7		      .byte.b	#%11100111	; 
   2361  fd0d		       81		      .byte.b	#%10000001	; 
   2362  fd0e		       e7		      .byte.b	#%11100111	;
   2363  fd0f				   C3
   2364  fd0f		       e7		      .byte.b	#%11100111	;
   2365  fd10		       81		      .byte.b	#%10000001	; 
   2366  fd11		       e7		      .byte.b	#%11100111	; 
   2367  fd12		       81		      .byte.b	#%10000001	; 
   2368  fd13		       e7		      .byte.b	#%11100111	;
   2369  fd14				   C4
   2370  fd14		       81		      .byte.b	#%10000001	;
   2371  fd15		       81		      .byte.b	#%10000001	; 
   2372  fd16		       e7		      .byte.b	#%11100111	; 
   2373  fd17		       a5		      .byte.b	#%10100101	; 
   2374  fd18		       a5		      .byte.b	#%10100101	;
   2375  fd19				   C5
   2376  fd19		       e7		      .byte.b	#%11100111	;
   2377  fd1a		       81		      .byte.b	#%10000001	; 
   2378  fd1b		       e7		      .byte.b	#%11100111	; 
   2379  fd1c		       24		      .byte.b	#%00100100	; 
   2380  fd1d		       e7		      .byte.b	#%11100111	;
   2381  fd1e				   C6
   2382  fd1e		       e7		      .byte.b	#%11100111	;
   2383  fd1f		       a5		      .byte.b	#%10100101	; 
   2384  fd20		       e7		      .byte.b	#%11100111	; 
   2385  fd21		       24		      .byte.b	#%00100100	; 
   2386  fd22		       e7		      .byte.b	#%11100111	;
   2387  fd23				   C7
   2388  fd23		       81		      .byte.b	#%10000001	;
   2389  fd24		       81		      .byte.b	#%10000001	; 
   2390  fd25		       81		      .byte.b	#%10000001	; 
   2391  fd26		       81		      .byte.b	#%10000001	; 
   2392  fd27		       e7		      .byte.b	#%11100111	;
   2393  fd28				   C8
   2394  fd28		       e7		      .byte.b	#%11100111	;
   2395  fd29		       a5		      .byte.b	#%10100101	; 
   2396  fd2a		       e7		      .byte.b	#%11100111	; 
   2397  fd2b		       a5		      .byte.b	#%10100101	; 
   2398  fd2c		       e7		      .byte.b	#%11100111	;
   2399  fd2d				   C9
   2400  fd2d		       e7		      .byte.b	#%11100111	;
   2401  fd2e		       81		      .byte.b	#%10000001	; 
   2402  fd2f		       e7		      .byte.b	#%11100111	; 
   2403  fd30		       a5		      .byte.b	#%10100101	; 
   2404  fd31		       e7		      .byte.b	#%11100111	;
   2405  fd32				   CA
   2406  fd32		       a5		      .byte.b	#%10100101	;
   2407  fd33		       a5		      .byte.b	#%10100101	; 
   2408  fd34		       e7		      .byte.b	#%11100111	; 
   2409  fd35		       a5		      .byte.b	#%10100101	; 
   2410  fd36		       e7		      .byte.b	#%11100111	;
   2411  fd37				   CB
   2412  fd37		       66		      .byte.b	#%01100110	;
   2413  fd38		       a5		      .byte.b	#%10100101	; 
   2414  fd39		       66		      .byte.b	#%01100110	; 
   2415  fd3a		       a5		      .byte.b	#%10100101	;
   2416  fd3b		       66		      .byte.b	#%01100110	;
   2417  fd3c				   CC
   2418  fd3c		       e7		      .byte.b	#%11100111	;
   2419  fd3d		       24		      .byte.b	#%00100100	; 
   2420  fd3e		       24		      .byte.b	#%00100100	; 
   2421  fd3f		       24		      .byte.b	#%00100100	;
   2422  fd40		       e7		      .byte.b	#%11100111	;
   2423  fd41
   2424  fd41				   CD
   2425  fd41		       66		      .byte.b	#%01100110	;
   2426  fd42		       a5		      .byte.b	#%10100101	; 
   2427  fd43		       a5		      .byte.b	#%10100101	; 
   2428  fd44		       a5		      .byte.b	#%10100101	;
   2429  fd45		       66		      .byte.b	#%01100110	;
   2430  fd46
   2431  fd46				   CE
   2432  fd46		       e7		      .byte.b	#%11100111	;
   2433  fd47		       24		      .byte.b	#%00100100	; 
   2434  fd48		       e7		      .byte.b	#%11100111	; 
   2435  fd49		       24		      .byte.b	#%00100100	; 
   2436  fd4a		       e7		      .byte.b	#%11100111	;
   2437  fd4b
   2438  fd4b				   CF
   2439  fd4b		       24		      .byte.b	#%00100100	;
   2440  fd4c		       24		      .byte.b	#%00100100	; 
   2441  fd4d		       e7		      .byte.b	#%11100111	; 
   2442  fd4e		       24		      .byte.b	#%00100100	; 
   2443  fd4f		       e7		      .byte.b	#%11100111	;
   2444  fd50
   2445  fd50				   CG
   2446  fd50		       c3		      .byte.b	#%11000011	;
   2447  fd51		       a5		      .byte.b	#%10100101	; 
   2448  fd52		       a5		      .byte.b	#%10100101	; 
   2449  fd53		       24		      .byte.b	#%00100100	; 
   2450  fd54		       c3		      .byte.b	#%11000011	;	
   2451  fd55
   2452  fd55				   CH
   2453  fd55		       a5		      .byte.b	#%10100101	;
   2454  fd56		       a5		      .byte.b	#%10100101	; 
   2455  fd57		       e7		      .byte.b	#%11100111	; 
   2456  fd58		       a5		      .byte.b	#%10100101	; 
   2457  fd59		       a5		      .byte.b	#%10100101	;
   2458  fd5a
   2459  fd5a				   CK
   2460  fd5a		       a5		      .byte.b	#%10100101	;
   2461  fd5b		       a5		      .byte.b	#%10100101	; 
   2462  fd5c		       66		      .byte.b	#%01100110	; 
   2463  fd5d		       a5		      .byte.b	#%10100101	; 
   2464  fd5e		       a5		      .byte.b	#%10100101	;
   2465  fd5f
   2466  fd5f				   CL
   2467  fd5f		       e7		      .byte.b	#%11100111	;
   2468  fd60		       24		      .byte.b	#%00100100	; 
   2469  fd61		       24		      .byte.b	#%00100100	; 
   2470  fd62		       24		      .byte.b	#%00100100	; 
   2471  fd63		       24		      .byte.b	#%00100100	;
   2472  fd64
   2473  fd64				   CI
   2474  fd64		       42		      .byte.b	#%01000010	;
   2475  fd65		       42		      .byte.b	#%01000010	; 
   2476  fd66		       42		      .byte.b	#%01000010	; 
   2477  fd67		       42		      .byte.b	#%01000010	; 
   2478  fd68		       42		      .byte.b	#%01000010	;
   2479  fd69
   2480  fd69				   CM
   2481  fd69		       a5		      .byte.b	#%10100101	;
   2482  fd6a		       a5		      .byte.b	#%10100101	; 
   2483  fd6b		       a5		      .byte.b	#%10100101	; 
   2484  fd6c		       e7		      .byte.b	#%11100111	; 
   2485  fd6d		       a5		      .byte.b	#%10100101	;
   2486  fd6e
   2487  fd6e				   CN
   2488  fd6e		       a5		      .byte.b	#%10100101	;
   2489  fd6f		       a5		      .byte.b	#%10100101	; 
   2490  fd70		       a5		      .byte.b	#%10100101	; 
   2491  fd71		       a5		      .byte.b	#%10100101	; 
   2492  fd72		       66		      .byte.b	#%01100110	;	
   2493  fd73
   2494  fd73
   2495  fd73				   CO
   2496  fd73		       42		      .byte.b	#%01000010	;
   2497  fd74		       a5		      .byte.b	#%10100101	; 
   2498  fd75		       a5		      .byte.b	#%10100101	; 
   2499  fd76		       a5		      .byte.b	#%10100101	; 
   2500  fd77		       42		      .byte.b	#%01000010	;	
   2501  fd78
   2502  fd78				   CP
   2503  fd78		       24		      .byte.b	#%00100100	;
   2504  fd79		       24		      .byte.b	#%00100100	; 
   2505  fd7a		       e7		      .byte.b	#%11100111	; 
   2506  fd7b		       a5		      .byte.b	#%10100101	; 
   2507  fd7c		       e7		      .byte.b	#%11100111	;
   2508  fd7d
   2509  fd7d				   CR
   2510  fd7d		       a5		      .byte.b	#%10100101	;
   2511  fd7e		       a5		      .byte.b	#%10100101	; 
   2512  fd7f		       66		      .byte.b	#%01100110	; 
   2513  fd80		       a5		      .byte.b	#%10100101	; 
   2514  fd81		       66		      .byte.b	#%01100110	;
   2515  fd82
   2516  fd82				   CS
   2517  fd82		       66		      .byte.b	#%01100110	;
   2518  fd83		       81		      .byte.b	#%10000001	; 
   2519  fd84		       42		      .byte.b	#%01000010	; 
   2520  fd85		       24		      .byte.b	#%00100100	; 
   2521  fd86		       c3		      .byte.b	#%11000011	;
   2522  fd87
   2523  fd87				   CT
   2524  fd87		       42		      .byte.b	#%01000010	;
   2525  fd88		       42		      .byte.b	#%01000010	; 
   2526  fd89		       42		      .byte.b	#%01000010	; 
   2527  fd8a		       42		      .byte.b	#%01000010	; 
   2528  fd8b		       e7		      .byte.b	#%11100111	;
   2529  fd8c
   2530  fd8c				   CV
   2531  fd8c		       42		      .byte.b	#%01000010	;
   2532  fd8d		       a5		      .byte.b	#%10100101	; 
   2533  fd8e		       a5		      .byte.b	#%10100101	; 
   2534  fd8f		       a5		      .byte.b	#%10100101	; 
   2535  fd90		       a5		      .byte.b	#%10100101	;	
   2536  fd91
   2537  fd91				   CY
   2538  fd91		       42		      .byte.b	#%01000010	;
   2539  fd92		       42		      .byte.b	#%01000010	; 
   2540  fd93		       42		      .byte.b	#%01000010	; 
   2541  fd94		       a5		      .byte.b	#%10100101	; 
   2542  fd95		       a5		      .byte.b	#%10100101	;
   2543  fd96
   2544  fd96				   CW
   2545  fd96		       a5		      .byte.b	#%10100101	;
   2546  fd97		       e7		      .byte.b	#%11100111	; 
   2547  fd98		       a5		      .byte.b	#%10100101	; 
   2548  fd99		       a5		      .byte.b	#%10100101	; 
   2549  fd9a		       a5		      .byte.b	#%10100101	;
   2550  fd9b
   2551  fd9b				   CZ
   2552  fd9b		       e7		      .byte.b	#%11100111	;
   2553  fd9c		       24		      .byte.b	#%00100100	; 
   2554  fd9d		       42		      .byte.b	#%01000010	; 
   2555  fd9e		       81		      .byte.b	#%10000001	; 
   2556  fd9f		       e7		      .byte.b	#%11100111	;
   2557  fda0
   2558  fda0				   Pipe
   2559  fda0		       42		      .byte.b	#%01000010	;
   2560  fda1		       00		      .byte.b	#%00000000	; 
   2561  fda2		       42		      .byte.b	#%01000010	; 
   2562  fda3		       00		      .byte.b	#%00000000	; 
   2563  fda4		       42		      .byte.b	#%01000010	;
   2564  fda5
   2565  fda5				   Exclamation
   2566  fda5		       42		      .byte.b	#%01000010	;
   2567  fda6		       00		      .byte.b	#%00000000	; 
   2568  fda7		       42		      .byte.b	#%01000010	; 
   2569  fda8		       42		      .byte.b	#%01000010	; 
   2570  fda9		       42		      .byte.b	#%01000010	;
   2571  fdaa
   2572  fdaa				   Dot
   2573  fdaa		       42		      .byte.b	#%01000010	;
   2574  fdab		       42		      .byte.b	#%01000010	; 
   2575  fdac		       00		      .byte.b	#%00000000	; 
   2576  fdad		       00		      .byte.b	#%00000000	; 
   2577  fdae		       00		      .byte.b	#%00000000	;
   2578  fdaf
   2579  fdaf				   Colon
   2580  fdaf		       42		      .byte.b	#%01000010	;
   2581  fdb0		       42		      .byte.b	#%01000010	; 
   2582  fdb1		       00		      .byte.b	#%00000000	; 
   2583  fdb2		       42		      .byte.b	#%01000010	; 
   2584  fdb3		       42		      .byte.b	#%01000010	;
   2585  fdb4
   2586  fdb4				   Triangle
   2587  fdb4		       81		      .byte.b	#%10000001	;
   2588  fdb5		       c3		      .byte.b	#%11000011	; 
   2589  fdb6		       e7		      .byte.b	#%11100111	; 
   2590  fdb7		       c3		      .byte.b	#%11000011	; 
   2591  fdb8		       81		      .byte.b	#%10000001	;
   2592  fdb9
   2593  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2594  fdb9		       00		      .byte.b	#0	;
   2595  fdba		       00		      .byte.b	#0	;
   2596  fdbb		       00		      .byte.b	#0	;
   2597  fdbc		       00		      .byte.b	#0	;
   2598  fdbd		       00		      .byte.b	#0	;
   2599  fdbe
   2600  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2601  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2602  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2603  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2604  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2605  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2606  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2607  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2608  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2609  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2610  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2611  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2612  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2613  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2614  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2615  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2616  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2617  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2618  fdcf
   2619  fdcf				   EngineSoundType
   2620  fdcf		       02		      .byte.b	#2
   2621  fdd0		       02		      .byte.b	#2
   2622  fdd1		       0e		      .byte.b	#14
   2623  fdd2		       06		      .byte.b	#6
   2624  fdd3		       06		      .byte.b	#6
   2625  fdd4		       0e		      .byte.b	#14
   2626  fdd5
   2627  fdd5				   EngineBaseFrequence
   2628  fdd5		       1f		      .byte.b	#31
   2629  fdd6		       15		      .byte.b	#21
   2630  fdd7		       14		      .byte.b	#20
   2631  fdd8		       1f		      .byte.b	#31
   2632  fdd9		       16		      .byte.b	#22
   2633  fdda		       03		      .byte.b	#3
   2634  fddb
   2635  fddb				   TachometerSizeLookup1
   2636  fddb		       1f		      .byte.b	#%00011111
   2637  fddc		       3f		      .byte.b	#%00111111
   2638  fddd		       7f		      .byte.b	#%01111111
   2639  fdde		       ff		      .byte.b	#%11111111
   2640  fddf		       ff		      .byte.b	#%11111111
   2641  fde0		       ff		      .byte.b	#%11111111
   2642  fde1		       ff		      .byte.b	#%11111111
   2643  fde2		       ff		      .byte.b	#%11111111
   2644  fde3
   2645  fde3				   TachometerSizeLookup2
   2646  fde3		       00		      .byte.b	#%00000000
   2647  fde4		       00		      .byte.b	#%00000000
   2648  fde5		       00		      .byte.b	#%00000000
   2649  fde6		       00		      .byte.b	#%00000000
   2650  fde7		       80		      .byte.b	#%10000000
   2651  fde8		       c0		      .byte.b	#%11000000
   2652  fde9		       e0		      .byte.b	#%11100000
   2653  fdea		       f0		      .byte.b	#%11110000
   2654  fdeb
   2655  fdeb				   TachometerGearLookup
   2656  fdeb		       01		      .byte.b	#%00000001
   2657  fdec		       02		      .byte.b	#%00000010
   2658  fded		       04		      .byte.b	#%00000100
   2659  fdee		       08		      .byte.b	#%00001000
   2660  fdef		       10		      .byte.b	#%00010000
   2661  fdf0		       30		      .byte.b	#%00110000
   2662  fdf1
   2663  fe00					      org	$FE00
   2664  fe00				   AesTable
   2665  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2666  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2667  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2668  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2669  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2670  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2671  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2672  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2673  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2674  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2675  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2676  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2677  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2678  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2679  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2680  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2681  ff00
   2682  ff00							; From FF00 to FFFB (122 bytes) to use here
   2683  ff00
   2684  ff00				   StaticText		; All static text must be on the same MSB block. 
   2685  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2686  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2687  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2688  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2689  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2690  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2691  ff05
   2692  ff05				   HellwayLeftText
   2693  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2694  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2695  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2696  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2697  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2698  ff0a
   2699  ff0a				   HellwayRightText
   2700  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2701  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2702  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2703  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2704  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2705  ff0f
   2706  ff0f				   OpbText
   2707  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2708  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2709  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2710  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2711  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2712  ff14
   2713  ff14				   YearText
   2714  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2715  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2716  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2717  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2718  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2719  ff19
   2720  ff19				   GameText
   2721  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2722  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2723  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2724  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2725  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2726  ff1e
   2727  ff1e				   OverText
   2728  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2729  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2730  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2731  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2732  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2733  ff23				   GoText
   2734  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2735  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2736  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2737  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2738  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2739  ff28
   2740  ff28				   ZeldaTextLeft
   2741  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2742  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2743  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2744  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2745  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2746  ff2d
   2747  ff2d				   ZeldaTextRight
   2748  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2749  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2750  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2751  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2752  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2753  ff32
   2754  ff32				   ZeldaDateLeft
   2755  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2756  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2757  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2758  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2759  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2760  ff37
   2761  ff37				   ZeldaDateRight
   2762  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2763  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2764  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2765  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2766  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2767  ff3c
   2768  ff3c				   PolvinhosTextLeft
   2769  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2770  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2771  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2772  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2773  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2774  ff41
   2775  ff41				   PolvinhosTextRight
   2776  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2777  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2778  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2779  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2780  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2781  ff46
   2782  ff46				   PolvinhosDateLeft
   2783  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2784  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2785  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2786  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2787  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2788  ff4b
   2789  ff4b				   PolvinhosDateRight
   2790  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2791  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2792  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2793  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2794  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2795  ff50
   2796  ff50				   IvonneTextLeft
   2797  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2798  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2799  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2800  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2801  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2802  ff55
   2803  ff55				   IvonneTextRight
   2804  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2805  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2806  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2807  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2808  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2809  ff5a
   2810  ff5a				   IvonneDateLeft
   2811  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2812  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2813  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2814  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2815  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2816  ff5f
   2817  ff5f				   IvonneDateRight
   2818  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2819  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2820  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2821  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2822  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2823  ff64
   2824  ff64				   PaperArtTextLeft
   2825  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2826  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2827  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2828  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2829  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2830  ff69
   2831  ff69				   PaperArtTextRight
   2832  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2833  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2834  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2835  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2836  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2837  ff6e
   2838  ff6e				   LeonardoTextLeft
   2839  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2840  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2841  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2842  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2843  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2844  ff73
   2845  ff73				   LeonardoTextRight
   2846  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2847  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2848  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2849  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2850  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2851  ff78
   2852  ff78				   VersionText
   2853  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2854  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2855  ff7a		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2856  ff7b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2857  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2858  ff7d
   2859  ff7d
   2860  ff7d				   EndStaticText
   2861  ff7d
   2862  ff7d				   CarSprite0		; Upside down, Original Car
   2863  ff7d		       00 00 00 00*	      ds	7
   2864  ff84		       7e		      .byte.b	#%01111110
   2865  ff85		       24		      .byte.b	#%00100100
   2866  ff86		       bd		      .byte.b	#%10111101
   2867  ff87		       3c		      .byte.b	#%00111100
   2868  ff88		       bd		      .byte.b	#%10111101
   2869  ff89		       3c		      .byte.b	#%00111100
   2870  ff8a
   2871  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2872  ff8a		       00 00 00 00*	      ds	7
   2873  ff91		       bd		      .byte.b	#%10111101
   2874  ff92		       7e		      .byte.b	#%01111110
   2875  ff93		       5a		      .byte.b	#%01011010
   2876  ff94		       66		      .byte.b	#%01100110
   2877  ff95		       bd		      .byte.b	#%10111101
   2878  ff96		       3c		      .byte.b	#%00111100
   2879  ff97
   2880  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2881  ff97		       00 00 00 00*	      ds	7
   2882  ff9e		       7e		      .byte.b	#%01111110
   2883  ff9f		       a5		      .byte.b	#%10100101
   2884  ffa0		       42		      .byte.b	#%01000010
   2885  ffa1		       42		      .byte.b	#%01000010
   2886  ffa2		       bd		      .byte.b	#%10111101
   2887  ffa3		       7e		      .byte.b	#%01111110
   2888  ffa4
   2889  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2890  ffa4		       00 00 00 00*	      ds	7
   2891  ffab		       3c		      .byte.b	#%00111100
   2892  ffac		       db		      .byte.b	#%11011011
   2893  ffad		       db		      .byte.b	#%11011011
   2894  ffae		       3c		      .byte.b	#%00111100
   2895  ffaf		       5a		      .byte.b	#%01011010
   2896  ffb0		       3c		      .byte.b	#%00111100
   2897  ffb1
   2898  ffb1				   TrafficSpeeds
   2899  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2900  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2901  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2902  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2903  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2904  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2905  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2906  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2907  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2908  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2909  ffbb				   TrafficSpeedsHighDelta
   2910  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2911  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2912  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2913  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2914  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2915  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2916  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2917  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2918  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2919  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2920  ffc5
   2921  ffc5				   CarIdToSpriteAddressL
   2922  ffc5		       7d		      .byte.b	#<CarSprite0
   2923  ffc6		       8a		      .byte.b	#<CarSprite1
   2924  ffc7		       97		      .byte.b	#<CarSprite2
   2925  ffc8		       a4		      .byte.b	#<CarSprite3
   2926  ffc9
   2927  ffc9				   CarIdToSpriteAddressH
   2928  ffc9		       ff		      .byte.b	#>CarSprite0
   2929  ffca		       ff		      .byte.b	#>CarSprite1
   2930  ffcb		       ff		      .byte.b	#>CarSprite2
   2931  ffcc		       ff		      .byte.b	#>CarSprite3
   2932  ffcd
   2933  ffcd				   CarIdToAccelerateSpeed
   2934  ffcd		       80		      .byte.b	#128
   2935  ffce		       c0		      .byte.b	#192
   2936  ffcf		       60		      .byte.b	#96
   2937  ffd0		       c0		      .byte.b	#192
   2938  ffd1
   2939  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2940  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   2941  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   2942  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   2943  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   2944  ffd5
   2945  ffd5				   CarIdToMaxSpeedL
   2946  ffd5		       80		      .byte.b	#$80
   2947  ffd6		       00		      .byte.b	#$00	; One less gear
   2948  ffd7		       80		      .byte.b	#$80
   2949  ffd8		       80		      .byte.b	#$80
   2950  ffd9
   2951  ffd9				   CarIdToMaxGear
   2952  ffd9		       05		      .byte.b	#5
   2953  ffda		       04		      .byte.b	#4	; One less gear
   2954  ffdb		       05		      .byte.b	#5
   2955  ffdc		       05		      .byte.b	#5
   2956  ffdd
   2957  ffdd
   2958  fffc					      org	$FFFC
   2959  fffc		       00 f0		      .word.w	BeforeStart
   2960  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
