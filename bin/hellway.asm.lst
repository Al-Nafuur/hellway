------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 00	   NTSC       =	0	; 1 = NTSC version, 0 = PAL version
     10  f000		       00 01	   PLUSROM    =	1
     11  f000							;colors
     12  f000				  -	      IF	NTSC
     13  f000				  -_D4	      =	$D4
     14  f000				  -_34	      =	$34
     15  f000				  -_79	      =	$79
     16  f000				  -_09	      =	$09
     17  f000				  -_03	      =	$03
     18  f000				  -_A0	      =	$A0
     19  f000				  -_38	      =	$38
     20  f000				  -_96	      =	$96
     21  f000				  -_F9	      =	$F9
     22  f000				  -_D8	      =	$D8
     23  f000				  -_44	      =	$44
     24  f000				  -_C8	      =	$C8
     25  f000				  -_0C	      =	$0C
     26  f000				  -_49	      =	$49
     27  f000					      ELSE
     28  f000		       00 34	   _D4	      =	$34
     29  f000		       00 44	   _34	      =	$44
     30  f000		       00 c9	   _79	      =	$C9
     31  f000		       00 09	   _09	      =	$09
     32  f000		       00 03	   _03	      =	$03
     33  f000		       00 90	   _A0	      =	$90
     34  f000		       00 48	   _38	      =	$48
     35  f000		       00 b6	   _96	      =	$B6
     36  f000		       00 29	   _F9	      =	$29
     37  f000		       00 38	   _D8	      =	$38
     38  f000		       00 64	   _44	      =	$64
     39  f000		       00 58	   _C8	      =	$58
     40  f000		       00 0c	   _0C	      =	$0C
     41  f000		       00 69	   _49	      =	$69
     42  f000					      ENDIF
     43  f000
     44  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     45  f000		       00 05	   SCORE_SIZE =	5
     46  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     47  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     48  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     49  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     50  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     51  f000
     52  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     53  f000
     54  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     55  f000							;16 bit precision
     56  f000							;640 max speed!
     57  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     58  f000
     59  f000		       00 00	   CAR_MIN_SPEED_H =	0
     60  f000		       00 00	   CAR_MIN_SPEED_L =	0
     61  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     62  f000
     63  f000		       00 00	   CAR_ID_DEFAULT =	0
     64  f000		       00 01	   CAR_ID_HATCHBACK =	1
     65  f000		       00 02	   CAR_ID_SEDAN =	2
     66  f000		       00 03	   CAR_ID_DRAGSTER =	3
     67  f000
     68  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     69  f000
     70  f000		       00 0a	   BREAK_SPEED =	10
     71  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     72  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     73  f000
     74  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     75  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     76  f000		       00 34	   TRAFFIC_COLOR_LIGHT =	_D4
     77  f000
     78  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     79  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     80  f000		       00 44	   TRAFFIC_COLOR_REGULAR =	_34
     81  f000
     82  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     83  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     84  f000		       00 c9	   TRAFFIC_COLOR_INTENSE =	_79
     85  f000
     86  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     87  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     88  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	_09
     89  f000
     90  f000		       00 03	   BACKGROUND_COLOR =	_03	;Grey
     91  f000		       00 90	   SCORE_BACKGROUND_COLOR =	_A0
     92  f000
     93  f000		       00 48	   SCORE_FONT_COLOR_EASTER_EGG =	_38
     94  f000
     95  f000		       00 b6	   PLAYER1_COLOR =	_96
     96  f000
     97  f000		       00 29	   SCORE_FONT_COLOR =	_F9
     98  f000		       00 38	   SCORE_FONT_COLOR_GOOD =	_D8
     99  f000		       00 64	   SCORE_FONT_COLOR_BAD =	_44
    100  f000		       00 58	   SCORE_FONT_COLOR_START =	_C8	;Cannot be the same as good, font colors = game state
    101  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	_0C
    102  f000
    103  f000		       00 35	   PLAYER_0_X_START =	$35	;
    104  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
    105  f000
    106  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
    107  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
    108  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
    109  f000
    110  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
    111  f000
    112  f000		       00 00	   BLACK      =	$00	;
    113  f000
    114  f000		       00 10	   MAX_GAME_MODE =	16
    115  f000
    116  f000		       00 08	   PARALLAX_SIZE =	8
    117  f000
    118  f000		       00 05	   HALF_TEXT_SIZE =	5
    119  f000
    120  f000		       00 3c	   ONE_SECOND_FRAMES =	60
    121  f000
    122  f000		       00 69	   VERSION_COLOR =	_49
    123  f000
    124  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
    125  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
    126  f000		       00 00	   QR_CODE_COLOR =	$00
    127  f000		       00 19	   QR_CODE_SIZE =	25
    128  f000
    129  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
    130  f000
    131  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    132  f000		       00 29	   VBLANK_TIMER =	41
    133  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    134  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    135  f000
    136  f000					      IF	PLUSROM
    137  f000		       1f f0	   WriteToBuffer equ	$1ff0
    138  f000		       1f f1	   WriteSendBuffer equ	$1ff1
    139  f000		       1f f2	   ReceiveBuffer equ	$1ff2
    140  f000		       1f f3	   ReceiveBufferSize equ	$1ff3
    141  f000
    142  f000		       00 23	   HIGHSCORE_ID equ	35	; Hellway game ID in PlusROM Highscore DB
    143  f000					      ENDIF
    144  f000
    145  f000		       00 80	   GRP0Cache  =	$80
    146  f000		       00 81	   PF0Cache   =	$81
    147  f000		       00 82	   PF1Cache   =	$82
    148  f000		       00 83	   PF2Cache   =	$83
    149  f000		       00 84	   GRP1Cache  =	$84
    150  f000		       00 85	   ENABLCache =	$85
    151  f000		       00 86	   ENAM0Cache =	$86
    152  f000		       00 87	   ENAM1Cache =	$87
    153  f000
    154  f000		       00 88	   ParallaxMode =	$88
    155  f000
    156  f000		       00 8c	   FrameCount0 =	$8C	;
    157  f000		       00 8d	   FrameCount1 =	$8D	;
    158  f000
    159  f000		       00 8e	   Player0SpeedL =	$8E
    160  f000		       00 8f	   Player0SpeedH =	$8F
    161  f000
    162  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    163  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    164  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    165  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    166  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    167  f000
    168  f000		       00 a4	   CheckpointBcd0 =	$A4
    169  f000		       00 a5	   CheckpointBcd1 =	$A5
    170  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    171  f000		       00 a7	   CarSpritePointerL =	$A7
    172  f000		       00 a8	   CarSpritePointerH =	$A8
    173  f000		       00 a9	   CurrentCarId =	$A9
    174  f000		       00 aa	   AccelerateBuffer =	$AA	; Change speed on buffer overflow.
    175  f000		       00 ab	   TextSide   =	$AB
    176  f000		       00 ac	   TextFlickerMode =	$AC
    177  f000		       00 ad	   Gear       =	$AD
    178  f000
    179  f000							;Temporary variables, multiple uses
    180  f000		       00 b0	   Tmp0       =	$B0
    181  f000		       00 b1	   Tmp1       =	$B1
    182  f000		       00 b2	   Tmp2       =	$B2
    183  f000		       00 b3	   Tmp3       =	$B3
    184  f000
    185  f000		       00 b4	   ScoreBcd0  =	$B4
    186  f000		       00 b5	   ScoreBcd1  =	$B5
    187  f000		       00 b6	   ScoreBcd2  =	$B6
    188  f000		       00 b7	   ScoreBcd3  =	$B7
    189  f000
    190  f000		       00 b8	   CollisionCounter =	$B8
    191  f000		       00 b9	   Player0X   =	$B9
    192  f000		       00 ba	   CountdownTimer =	$BA
    193  f000		       00 bb	   Traffic0Msb =	$BB
    194  f000		       00 bc	   SwitchDebounceCounter =	$BC
    195  f000
    196  f000		       00 bd	   TimeBcd0   =	$BD
    197  f000		       00 be	   TimeBcd1   =	$BE
    198  f000		       00 bf	   TimeBcd2   =	$BF
    199  f000
    200  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    201  f000		       00 c1	   TrafficChance =	$C1
    202  f000		       00 c2	   CheckpointTime =	$C2
    203  f000		       00 c3	   TrafficColor =	$C3
    204  f000		       00 c4	   CurrentDifficulty =	$C4
    205  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    206  f000							;Bit 2 speed delta, Bit 3 random traffic 
    207  f000
    208  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    209  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    210  f000
    211  f000		       00 ca	   BorderType =	$CA
    212  f000
    213  f000		       00 cb	   HitCountBcd0 =	$CB
    214  f000		       00 cc	   HitCountBcd1 =	$CC
    215  f000
    216  f000		       00 cd	   GlideTimeBcd0 =	$CD
    217  f000		       00 ce	   GlideTimeBcd1 =	$CE
    218  f000
    219  f000		       00 cf	   OneSecondConter =	$CF
    220  f000
    221  f000		       00 d0	   ScoreD0    =	$D0
    222  f000		       00 d1	   ScoreD1    =	$D1
    223  f000		       00 d2	   ScoreD2    =	$D2
    224  f000		       00 d3	   ScoreD3    =	$D3
    225  f000		       00 d4	   ScoreD4    =	$D4
    226  f000		       00 d5	   ScoreFontColor =	$D5
    227  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    228  f000		       00 d7	   NextCheckpoint =	$D7
    229  f000
    230  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    231  f000		       00 f0	   ParallaxCache2 =	$F0	; to F7
    232  f000
    233  f000
    234  f000							;generic start up stuff, put zero in almost all...
    235  f000				   BeforeStart		;All variables that are kept on game reset or select
    236  f000		       a0 00		      LDY	#0
    237  f002		       84 bc		      STY	SwitchDebounceCounter
    238  f004		       84 c4		      STY	CurrentDifficulty
    239  f006		       84 c0		      STY	GameStatus
    240  f008		       a0 10		      LDY	#16
    241  f00a		       84 c5		      STY	GameMode
    242  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    243  f00e		       84 88		      STY	ParallaxMode
    244  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    245  f012		       84 a9		      STY	CurrentCarId
    246  f014
    247  f014				   Start
    248  f014		       a9 02		      LDA	#2
    249  f016		       85 00		      STA	VSYNC
    250  f018		       85 02		      STA	WSYNC
    251  f01a		       85 02		      STA	WSYNC
    252  f01c		       85 02		      STA	WSYNC
    253  f01e		       a9 00		      LDA	#0	;2
    254  f020		       85 00		      STA	VSYNC	;3
    255  f022
    256  f022		       78		      SEI
    257  f023		       d8		      CLD
    258  f024		       a2 ff		      LDX	#$FF
    259  f026		       9a		      TXS
    260  f027
    261  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    262  f029				   CleanMem
    263  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    264  f02b		       f0 16		      BEQ	SkipClean
    265  f02d		       e0 c5		      CPX	#GameMode
    266  f02f		       f0 12		      BEQ	SkipClean
    267  f031		       e0 88		      CPX	#ParallaxMode
    268  f033		       f0 0e		      BEQ	SkipClean
    269  f035		       e0 a9		      CPX	#CurrentCarId
    270  f037		       f0 0a		      BEQ	SkipClean
    271  f039		       e0 c4		      CPX	#CurrentDifficulty
    272  f03b		       f0 06		      BEQ	SkipClean
    273  f03d		       e0 c0		      CPX	#GameStatus
    274  f03f		       f0 02		      BEQ	SkipClean
    275  f041		       95 00		      STA	0,X
    276  f043				   SkipClean
    277  f043		       e8		      INX
    278  f044		       d0 e3		      BNE	CleanMem
    279  f046
    280  f046		       a9 d5		      LDA	#213
    281  f048		       8d 96 02 	      STA	TIM64T	;3	
    282  f04b
    283  f04b							;Setting some variables...
    284  f04b
    285  f04b				   SettingTrafficOffsets		; Time sensitive with player H position
    286  f04b		       85 02		      STA	WSYNC	;We will set player position
    287  f04d		       20 04 f8 	      JSR	DefaultOffsets
    288  f050
    289  f050		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    290  f053		       85 8e		      STA	Player0SpeedL
    291  f055
      0  f055					      SLEEP	11	;18
      1  f055				   .CYCLES    SET	11
      2  f055
      3  f055				  -	      IF	.CYCLES < 2
      4  f055				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f055				  -	      ERR
      6  f055					      ENDIF
      7  f055
      8  f055					      IF	.CYCLES & 1
      9  f055					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f055		       04 00		      nop	0
     11  f057				  -	      ELSE
     12  f057				  -	      bit	VSYNC
     13  f057					      ENDIF
     14  f057				   .CYCLES    SET	.CYCLES - 3
     15  f057					      ENDIF
     16  f057
     17  f057					      REPEAT	.CYCLES / 2
     18  f057		       ea		      nop
     17  f057					      REPEND
     18  f058		       ea		      nop
     17  f058					      REPEND
     18  f059		       ea		      nop
     17  f059					      REPEND
     18  f05a		       ea		      nop
     19  f05b					      REPEND
    293  f05b		       85 10		      STA	RESP0
    294  f05d
    295  f05d		       a2 00		      LDX	#0
    296  f05f		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    297  f062		       85 a6		      STA	StartSWCHB	; For game over
    298  f064		       29 c0		      AND	#%11000000
    299  f066		       f0 0b		      BEQ	CallConfigureDifficulty
    300  f068		       e8		      INX
    301  f069		       c9 80		      CMP	#%10000000
    302  f06b		       f0 06		      BEQ	CallConfigureDifficulty
    303  f06d		       e8		      INX
    304  f06e		       c9 40		      CMP	#%01000000
    305  f070		       f0 01		      BEQ	CallConfigureDifficulty
    306  f072		       e8		      INX
    307  f073
    308  f073				   CallConfigureDifficulty
    309  f073		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    310  f075		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    311  f077		       a5 c0		      LDA	GameStatus
    312  f079		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    313  f07b				   NextCar
    314  f07b		       a4 a9		      LDY	CurrentCarId
    315  f07d		       c8		      INY
    316  f07e		       98		      TYA
    317  f07f		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    318  f081		       85 a9		      STA	CurrentCarId
    319  f083				   StoreCurrentDifficulty
    320  f083		       86 c4		      STX	CurrentDifficulty
    321  f085		       20 d9 f7 	      JSR	ConfigureDifficulty
    322  f088
    323  f088				   ConfigureCarSprite
    324  f088		       a4 a9		      LDY	CurrentCarId
    325  f08a		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    326  f08d		       85 a7		      STA	CarSpritePointerL
    327  f08f		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    328  f092		       85 a8		      STA	CarSpritePointerH
    329  f094
    330  f094				   SetGameNotRunning
    331  f094		       a9 00		      LDA	#0
    332  f096		       85 c0		      STA	GameStatus
    333  f098
    334  f098				   ConfigureOneSecondTimer
    335  f098		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    336  f09a		       85 cf		      STA	OneSecondConter
    337  f09c
    338  f09c				   HPositioning
    339  f09c		       85 02		      STA	WSYNC
    340  f09e
    341  f09e		       a9 30		      LDA	#%00110000	;2 Missile Size
    342  f0a0		       85 04		      STA	NUSIZ0	;3
    343  f0a2		       85 05		      STA	NUSIZ1	;3
    344  f0a4
    345  f0a4		       a9 35		      LDA	#PLAYER_0_X_START	;2
    346  f0a6		       85 b9		      STA	Player0X	;3
    347  f0a8
    348  f0a8		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    349  f0aa		       85 ba		      STA	CountdownTimer	;3
    350  f0ac
    351  f0ac		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    352  f0ae		       85 d7		      STA	NextCheckpoint
    353  f0b0
    354  f0b0		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0b2					      SLEEP	11	;
      1  f0b2				   .CYCLES    SET	11
      2  f0b2
      3  f0b2				  -	      IF	.CYCLES < 2
      4  f0b2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b2				  -	      ERR
      6  f0b2					      ENDIF
      7  f0b2
      8  f0b2					      IF	.CYCLES & 1
      9  f0b2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b2		       04 00		      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4					      ENDIF
     14  f0b4				   .CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     19  f0b8					      REPEND
    356  f0b8		       85 11		      STA	RESP1
      0  f0ba					      SLEEP	2	;
      1  f0ba				   .CYCLES    SET	2
      2  f0ba
      3  f0ba				  -	      IF	.CYCLES < 2
      4  f0ba				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ba				  -	      ERR
      6  f0ba					      ENDIF
      7  f0ba
      8  f0ba				  -	      IF	.CYCLES & 1
      9  f0ba				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ba				  -	      nop	0
     11  f0ba				  -	      ELSE
     12  f0ba				  -	      bit	VSYNC
     13  f0ba				  -	      ENDIF
     14  f0ba				  -.CYCLES    SET	.CYCLES - 3
     15  f0ba					      ENDIF
     16  f0ba
     17  f0ba					      REPEAT	.CYCLES / 2
     18  f0ba		       ea		      nop
     19  f0bb					      REPEND
    358  f0bb		       85 14		      STA	RESBL
      0  f0bd					      SLEEP	2	;
      1  f0bd				   .CYCLES    SET	2
      2  f0bd
      3  f0bd				  -	      IF	.CYCLES < 2
      4  f0bd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bd				  -	      ERR
      6  f0bd					      ENDIF
      7  f0bd
      8  f0bd				  -	      IF	.CYCLES & 1
      9  f0bd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bd				  -	      nop	0
     11  f0bd				  -	      ELSE
     12  f0bd				  -	      bit	VSYNC
     13  f0bd				  -	      ENDIF
     14  f0bd				  -.CYCLES    SET	.CYCLES - 3
     15  f0bd					      ENDIF
     16  f0bd
     17  f0bd					      REPEAT	.CYCLES / 2
     18  f0bd		       ea		      nop
     19  f0be					      REPEND
    360  f0be		       85 12		      STA	RESM0
      0  f0c0					      SLEEP	2
      1  f0c0				   .CYCLES    SET	2
      2  f0c0
      3  f0c0				  -	      IF	.CYCLES < 2
      4  f0c0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c0				  -	      ERR
      6  f0c0					      ENDIF
      7  f0c0
      8  f0c0				  -	      IF	.CYCLES & 1
      9  f0c0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c0				  -	      nop	0
     11  f0c0				  -	      ELSE
     12  f0c0				  -	      bit	VSYNC
     13  f0c0				  -	      ENDIF
     14  f0c0				  -.CYCLES    SET	.CYCLES - 3
     15  f0c0					      ENDIF
     16  f0c0
     17  f0c0					      REPEAT	.CYCLES / 2
     18  f0c0		       ea		      nop
     19  f0c1					      REPEND
    362  f0c1		       85 13		      STA	RESM1
    363  f0c3
    364  f0c3		       a9 f0		      LDA	#$F0
    365  f0c5		       85 24		      STA	HMBL
    366  f0c7		       85 22		      STA	HMM0
    367  f0c9		       85 23		      STA	HMM1
    368  f0cb		       85 02		      STA	WSYNC
    369  f0cd		       85 2a		      STA	HMOVE
    370  f0cf		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    371  f0d1		       85 2b		      STA	HMCLR
    372  f0d3
    373  f0d3				   WaitResetToEnd
    374  f0d3		       ad 84 02 	      LDA	INTIM
    375  f0d6		       d0 fb		      BNE	WaitResetToEnd
    376  f0d8
    377  f0d8				   MainLoop
    378  f0d8		       a9 02		      LDA	#2
    379  f0da		       85 00		      STA	VSYNC
    380  f0dc		       85 02		      STA	WSYNC
    381  f0de
    382  f0de				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    383  f0de		       a9 01		      LDA	#%00000001
    384  f0e0		       24 ac		      BIT	TextFlickerMode
    385  f0e2		       f0 05		      BEQ	TextSideFrameZero
    386  f0e4		       25 8d		      AND	FrameCount1
    387  f0e6		       4c eb f0 	      JMP	StoreTextSize
    388  f0e9				   TextSideFrameZero
    389  f0e9		       25 8c		      AND	FrameCount0
    390  f0eb				   StoreTextSize
    391  f0eb		       85 ab		      STA	TextSide
    392  f0ed
    393  f0ed		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    394  f0ef		       85 2a		      STA	HMOVE	;2
    395  f0f1				   ConfigVBlankTimer
    396  f0f1		       a5 c5		      LDA	GameMode
    397  f0f3		       c9 10		      CMP	#MAX_GAME_MODE
    398  f0f5		       f0 05		      BEQ	SetVblankTimerQrCode
    399  f0f7		       a9 29		      LDA	#VBLANK_TIMER
    400  f0f9		       4c fe f0 	      JMP	SetVblankTimer
    401  f0fc				   SetVblankTimerQrCode
    402  f0fc		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    403  f0fe				   SetVblankTimer
    404  f0fe		       85 02		      STA	WSYNC	;3
    405  f100		       8d 96 02 	      STA	TIM64T	;3	
    406  f103		       a9 00		      LDA	#0	;2
    407  f105		       85 00		      STA	VSYNC	;3	
    408  f107
    409  f107				   RandomizeGame
    410  f107		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    411  f109		       d0 30		      BNE	EndRandomizeGame
    412  f10b		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    413  f10d		       29 02		      AND	#%00000010
    414  f10f		       f0 27		      BEQ	DeterministicGame
    415  f111		       a6 96		      LDX	TrafficOffset1 + 2
    416  f113		       bd 00 fe 	      LDA	AesTable,X
    417  f116		       45 8c		      EOR	FrameCount0
    418  f118		       85 96		      STA	TrafficOffset1 + 2
    419  f11a		       a6 9a		      LDX	TrafficOffset2 + 2
    420  f11c		       bd 00 fe 	      LDA	AesTable,X
    421  f11f		       45 8c		      EOR	FrameCount0
    422  f121		       85 9a		      STA	TrafficOffset2 + 2
    423  f123		       a6 9e		      LDX	TrafficOffset3 + 2
    424  f125		       bd 00 fe 	      LDA	AesTable,X
    425  f128		       45 8c		      EOR	FrameCount0
    426  f12a		       85 9e		      STA	TrafficOffset3 + 2
    427  f12c		       a6 a2		      LDX	TrafficOffset4 + 2
    428  f12e		       bd 00 fe 	      LDA	AesTable,X
    429  f131		       45 8c		      EOR	FrameCount0
    430  f133		       85 a2		      STA	TrafficOffset4 + 2
    431  f135		       4c 3b f1 	      JMP	EndRandomizeGame
    432  f138
    433  f138				   DeterministicGame
    434  f138		       20 04 f8 	      JSR	DefaultOffsets
    435  f13b
    436  f13b				   EndRandomizeGame
    437  f13b
    438  f13b				   CountFrame
    439  f13b		       e6 8c		      INC	FrameCount0	; 5
    440  f13d		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    441  f13f		       e6 8d		      INC	FrameCount1	; 5 
    442  f141				   SkipIncFC1
    443  f141
    444  f141				   CallDrawQrCode
    445  f141		       a5 c5		      LDA	GameMode
    446  f143		       c9 10		      CMP	#MAX_GAME_MODE
    447  f145		       d0 03		      BNE	TestIsGameRunning
    448  f147		       4c 64 fc 	      JMP	DrawQrCode
    449  f14a
    450  f14a							;Does not update the game if not running
    451  f14a				   TestIsGameRunning
    452  f14a		       a5 c0		      LDA	GameStatus	;3
    453  f14c		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    454  f14e		       4c 5a f3 	      JMP	SkipUpdateLogic
    455  f151				   ContinueWithGameLogic
    456  f151
    457  f151				   EverySecond		; 64 frames to be more precise
    458  f151		       a9 3f		      LDA	#%00111111
    459  f153		       25 8c		      AND	FrameCount0
    460  f155		       d0 06		      BNE	SkipEverySecondAction
    461  f157		       c5 ba		      CMP	CountdownTimer
    462  f159		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    463  f15b		       c6 ba		      DEC	CountdownTimer
    464  f15d				   SkipEverySecondAction
    465  f15d
    466  f15d				   ChangeTextFlickerMode
    467  f15d		       a5 bc		      LDA	SwitchDebounceCounter
    468  f15f		       d0 0d		      BNE	EndChangeTextFlickerMode
    469  f161		       ad 82 02 	      LDA	SWCHB
    470  f164		       29 02		      AND	#%00000010	;Game select
    471  f166		       d0 06		      BNE	EndChangeTextFlickerMode
    472  f168		       e6 ac		      INC	TextFlickerMode
    473  f16a		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    474  f16c		       85 bc		      STA	SwitchDebounceCounter
    475  f16e				   EndChangeTextFlickerMode
    476  f16e
    477  f16e				   BreakOnTimeOver		; Uses LDX as the breaking speed
    478  f16e		       a2 00		      LDX	#0
    479  f170		       a5 ba		      LDA	CountdownTimer
    480  f172		       d0 0b		      BNE	Break
    481  f174		       a4 a9		      LDY	CurrentCarId
    482  f176		       a5 8c		      LDA	FrameCount0
    483  f178		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    484  f17b		       d0 02		      BNE	Break
    485  f17d		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    486  f17f
    487  f17f				   Break
    488  f17f		       a9 20		      LDA	#%00100000	;Down in controller
    489  f181		       2c 80 02 	      BIT	SWCHA
    490  f184		       d0 0e		      BNE	BreakNonZero
    491  f186		       a5 0c		      LDA	INPT4	;3
    492  f188		       10 08		      BPL	BreakWhileAccelerating
    493  f18a		       a4 ad		      LDY	Gear
    494  f18c		       be dd ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    495  f18f		       4c 94 f1 	      JMP	BreakNonZero
    496  f192				   BreakWhileAccelerating		; Allow better control while breaking.
    497  f192		       a2 05		      LDX	(#BREAK_SPEED / 2)
    498  f194
    499  f194				   BreakNonZero
    500  f194		       e0 00		      CPX	#0
    501  f196		       f0 2b		      BEQ	SkipBreak
    502  f198		       86 b0		      STX	Tmp0
    503  f19a
    504  f19a				   DecreaseSpeed
    505  f19a		       38		      SEC
    506  f19b		       a5 8e		      LDA	Player0SpeedL
    507  f19d		       e5 b0		      SBC	Tmp0
    508  f19f		       85 8e		      STA	Player0SpeedL
    509  f1a1		       a5 8f		      LDA	Player0SpeedH
    510  f1a3		       e9 00		      SBC	#0
    511  f1a5		       85 8f		      STA	Player0SpeedH
    512  f1a7
    513  f1a7				   CheckMinSpeed
    514  f1a7		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    515  f1a9		       c9 00		      CMP	#CAR_MIN_SPEED_H
    516  f1ab		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    517  f1ad		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    518  f1af
    519  f1af				   CompareLBreakSpeed
    520  f1af		       a5 8e		      LDA	Player0SpeedL
    521  f1b1		       c9 00		      CMP	#CAR_MIN_SPEED_L
    522  f1b3		       90 03		      BCC	ResetMinSpeed	; Less than memory
    523  f1b5		       4c c0 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    524  f1b8
    525  f1b8				   ResetMinSpeed
    526  f1b8		       a9 00		      LDA	#CAR_MIN_SPEED_H
    527  f1ba		       85 8f		      STA	Player0SpeedH
    528  f1bc		       a9 00		      LDA	#CAR_MIN_SPEED_L
    529  f1be		       85 8e		      STA	Player0SpeedL
    530  f1c0
    531  f1c0				   SkipAccelerateIfBreaking
    532  f1c0		       4c 05 f2 	      JMP	SkipAccelerate
    533  f1c3				   SkipBreak
    534  f1c3
    535  f1c3				   Acelerates
    536  f1c3		       a5 ba		      LDA	CountdownTimer
    537  f1c5		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    538  f1c7
    539  f1c7				   ContinueAccelerateTest
    540  f1c7		       a5 0c		      LDA	INPT4	;3
    541  f1c9		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    542  f1cb		       a9 10		      LDA	#%00010000	;UP in controller
    543  f1cd		       2c 80 02 	      BIT	SWCHA
    544  f1d0		       d0 33		      BNE	SkipAccelerate
    545  f1d2
    546  f1d2				   IncreaseCarSpeed
    547  f1d2		       a2 02		      LDX	#2
    548  f1d4		       a4 a9		      LDY	CurrentCarId
    549  f1d6				   IncreaseCarSpeedLoop
    550  f1d6							;Adds speed
    551  f1d6		       18		      CLC
    552  f1d7		       a5 aa		      LDA	AccelerateBuffer
    553  f1d9		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    554  f1dc		       85 aa		      STA	AccelerateBuffer
    555  f1de		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    556  f1e0		       e6 8e		      INC	Player0SpeedL
    557  f1e2		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    558  f1e4		       e6 8f		      INC	Player0SpeedH
    559  f1e6				   ContinueIncreaseSpeedLoop
    560  f1e6		       ca		      DEX
    561  f1e7		       d0 ed		      BNE	IncreaseCarSpeedLoop
    562  f1e9				   SkipIncreaseCarSpeed
    563  f1e9
    564  f1e9				   CheckIfAlreadyMaxSpeed
    565  f1e9		       a5 8f		      LDA	Player0SpeedH
    566  f1eb		       c9 02		      CMP	#CAR_MAX_SPEED_H
    567  f1ed		       90 16		      BCC	SkipAccelerate	; less than my max speed
    568  f1ef		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    569  f1f1							;High bit is max, compare the low
    570  f1f1		       a4 a9		      LDY	CurrentCarId
    571  f1f3		       a5 8e		      LDA	Player0SpeedL
    572  f1f5		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    573  f1f8		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    574  f1fa							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    575  f1fa
    576  f1fa				   ResetToMaxSpeed		; Speed is more, or is already max
    577  f1fa		       a9 02		      LDA	#CAR_MAX_SPEED_H
    578  f1fc		       85 8f		      STA	Player0SpeedH
    579  f1fe		       a4 a9		      LDY	CurrentCarId
    580  f200		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    581  f203		       85 8e		      STA	Player0SpeedL
    582  f205				   SkipAccelerate
    583  f205
    584  f205				   InitUpdateOffsets
    585  f205		       a2 00		      LDX	#0	; Memory Offset 24 bit
    586  f207		       a0 00		      LDY	#0	; Line Speeds 16 bits
    587  f209		       a5 91		      LDA	TrafficOffset0 + 1	;
    588  f20b		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    589  f20d		       a5 c5		      LDA	GameMode
    590  f20f		       29 04		      AND	#%00000100	; GameModes with high delta
    591  f211		       f0 02		      BEQ	UpdateOffsets
    592  f213		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    593  f215
    594  f215				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    595  f215		       38		      SEC
    596  f216		       a5 8e		      LDA	Player0SpeedL
    597  f218		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    598  f21b		       85 b0		      STA	Tmp0
    599  f21d		       c8		      INY
    600  f21e		       a5 8f		      LDA	Player0SpeedH
    601  f220		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    602  f223		       85 b1		      STA	Tmp1
    603  f225		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    604  f227		       e9 00		      SBC	#0
    605  f229		       85 b2		      STA	Tmp2
    606  f22b
    607  f22b				   AddsTheResult
    608  f22b		       18		      CLC
    609  f22c		       a5 b0		      LDA	Tmp0
    610  f22e		       75 90		      ADC	TrafficOffset0,X
    611  f230		       95 90		      STA	TrafficOffset0,X
    612  f232		       e8		      INX
    613  f233		       a5 b1		      LDA	Tmp1
    614  f235		       75 90		      ADC	TrafficOffset0,X
    615  f237		       95 90		      STA	TrafficOffset0,X
    616  f239		       e8		      INX
    617  f23a		       a5 b2		      LDA	Tmp2	; Carry
    618  f23c		       75 90		      ADC	TrafficOffset0,X
    619  f23e		       95 90		      STA	TrafficOffset0,X
    620  f240		       90 06		      BCC	CalculateOffsetCache
    621  f242		       e0 02		      CPX	#2	;MSB offset 0
    622  f244		       d0 02		      BNE	CalculateOffsetCache
    623  f246		       e6 bb		      INC	Traffic0Msb
    624  f248
    625  f248				   CalculateOffsetCache
    626  f248		       e8		      INX
    627  f249		       38		      SEC
    628  f24a		       69 00		      ADC	#0	;Increment by one
    629  f24c		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    630  f24e
    631  f24e				   PrepareNextUpdateLoop
    632  f24e		       c8		      INY
    633  f24f		       e8		      INX
    634  f250		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    635  f252		       d0 c1		      BNE	UpdateOffsets
    636  f254
    637  f254				   BcdScore		; 48
    638  f254		       a5 91		      LDA	TrafficOffset0 + 1	;3
    639  f256		       45 b3		      EOR	Tmp3	;3
    640  f258		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    641  f25a		       f0 1b		      BEQ	FinishBcdScore	;2
    642  f25c
    643  f25c				   ContinueBcdScore
    644  f25c		       f8		      SED		;2
    645  f25d		       18		      CLC		;2
    646  f25e		       a5 b4		      LDA	ScoreBcd0	;3
    647  f260		       69 01		      ADC	#1	;2
    648  f262		       85 b4		      STA	ScoreBcd0	;3
    649  f264		       a5 b5		      LDA	ScoreBcd1	;3
    650  f266		       69 00		      ADC	#0	;2
    651  f268		       85 b5		      STA	ScoreBcd1	;3
    652  f26a		       a5 b6		      LDA	ScoreBcd2	;3
    653  f26c		       69 00		      ADC	#0	;2
    654  f26e		       85 b6		      STA	ScoreBcd2	;3
    655  f270		       a5 b7		      LDA	ScoreBcd3	;3
    656  f272		       69 00		      ADC	#0	;2
    657  f274		       85 b7		      STA	ScoreBcd3	;3
    658  f276		       d8		      CLD		;2
    659  f277				   FinishBcdScore
    660  f277
    661  f277							;Until store the movemnt, LDX contains the value to be stored.
    662  f277				   TestCollision		;
    663  f277							; see if player0 colides with the rest
    664  f277		       a5 00		      LDA	CXM0P
    665  f279		       05 01		      ORA	CXM1P
    666  f27b		       05 01		      ORA	CXM1P
    667  f27d		       05 02		      ORA	CXP0FB
    668  f27f		       05 07		      ORA	CXPPMM
    669  f281		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    670  f283		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    671  f285		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    672  f287		       d0 3a		      BNE	NoCollision
    673  f289		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    674  f28b		       c9 38		      CMP	#SCORE_FONT_COLOR_GOOD
    675  f28d		       f0 34		      BEQ	NoCollision
    676  f28f		       c9 58		      CMP	#SCORE_FONT_COLOR_START
    677  f291		       f0 30		      BEQ	NoCollision
    678  f293		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    679  f295		       85 b8		      STA	CollisionCounter	;and store as colision.
    680  f297				   CountBcdColision
    681  f297		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    682  f299		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    683  f29b		       f0 1d		      BEQ	SkipSetColisionSpeedL
    684  f29d		       f8		      SED		;2
    685  f29e		       18		      CLC		;2
    686  f29f		       a5 cb		      LDA	HitCountBcd0	;3
    687  f2a1		       69 01		      ADC	#1	;3
    688  f2a3		       85 cb		      STA	HitCountBcd0	;3
    689  f2a5		       a5 cc		      LDA	HitCountBcd1	;3
    690  f2a7		       69 00		      ADC	#0	;2
    691  f2a9		       85 cc		      STA	HitCountBcd1	;3
    692  f2ab		       d8		      CLD		;2
    693  f2ac				   EndCountBcdColision
    694  f2ac		       a5 8f		      LDA	Player0SpeedH
    695  f2ae		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    696  f2b0		       a9 10		      LDA	#COLLISION_SPEED_L
    697  f2b2		       c5 8e		      CMP	Player0SpeedL
    698  f2b4		       b0 04		      BCS	SkipSetColisionSpeedL
    699  f2b6				   SetColisionSpeedL
    700  f2b6		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    701  f2b8		       85 8e		      STA	Player0SpeedL
    702  f2ba				   SkipSetColisionSpeedL
    703  f2ba		       a9 00		      LDA	#0
    704  f2bc		       85 8f		      STA	Player0SpeedH
    705  f2be		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    706  f2c0		       4c 0e f3 	      JMP	StoreHMove	; We keep position consistent
    707  f2c3				   NoCollision
    708  f2c3
    709  f2c3				   DecrementCollision
    710  f2c3		       a4 b8		      LDY	CollisionCounter
    711  f2c5		       f0 07		      BEQ	FinishDecrementCollision
    712  f2c7		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    713  f2c9		       85 04		      STA	NUSIZ0
    714  f2cb		       88		      DEY
    715  f2cc		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    716  f2ce				   FinishDecrementCollision
    717  f2ce
    718  f2ce				   ResetPlayerSize
    719  f2ce		       d0 04		      BNE	FinishResetPlayerSize
    720  f2d0		       a9 30		      LDA	#%00110000
    721  f2d2		       85 04		      STA	NUSIZ0	;
    722  f2d4				   FinishResetPlayerSize
    723  f2d4
    724  f2d4				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    725  f2d4		       c0 01		      CPY	#1	; Last frame before reset
    726  f2d6		       d0 05		      BNE	SkipResetPlayerPosition
    727  f2d8		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    728  f2da		       4c 0e f3 	      JMP	StoreHMove
    729  f2dd				   SkipResetPlayerPosition
    730  f2dd
    731  f2dd				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    732  f2dd		       a5 a9		      LDA	CurrentCarId
    733  f2df		       c9 03		      CMP	#CAR_ID_DRAGSTER
    734  f2e1		       d0 08		      BNE	PrepareReadXAxis
    735  f2e3		       a2 00		      LDX	#0
    736  f2e5		       a5 8c		      LDA	FrameCount0
    737  f2e7		       29 01		      AND	#DRAGSTER_TURN_MASK
    738  f2e9		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    739  f2eb
    740  f2eb							; for left and right, we're gonna 
    741  f2eb							; set the horizontal speed, and then do
    742  f2eb							; a single HMOVE.  We'll use X to hold the
    743  f2eb							; horizontal speed, then store it in the 
    744  f2eb							; appropriate register
    745  f2eb				   PrepareReadXAxis
    746  f2eb		       a2 00		      LDX	#0
    747  f2ed		       a4 b9		      LDY	Player0X
    748  f2ef				   BeginReadLeft
    749  f2ef		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    750  f2f1		       a9 40		      LDA	#%01000000	;Left
    751  f2f3		       2c 80 02 	      BIT	SWCHA
    752  f2f6		       d0 07		      BNE	SkipMoveLeft
    753  f2f8		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    754  f2fa		       c6 b9		      DEC	Player0X
    755  f2fc		       4c 0e f3 	      JMP	StoreHMove	; Cannot move left and right...
    756  f2ff				   SkipMoveLeft
    757  f2ff				   BeginReadRight
    758  f2ff		       c0 36		      CPY	#PLAYER_0_MAX_X
    759  f301		       f0 0b		      BEQ	SkipMoveRight	; At max already
    760  f303		       a9 80		      LDA	#%10000000	;Right
    761  f305		       2c 80 02 	      BIT	SWCHA
    762  f308		       d0 04		      BNE	SkipMoveRight
    763  f30a		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    764  f30c		       e6 b9		      INC	Player0X
    765  f30e				   SkipMoveRight
    766  f30e				   StoreHMove
    767  f30e		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    768  f310		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    769  f312
    770  f312				   DividePlayerSpeedBy4
    771  f312		       a5 8f		      LDA	Player0SpeedH
    772  f314		       0a		      ASL
    773  f315		       0a		      ASL
    774  f316		       0a		      ASL
    775  f317		       0a		      ASL
    776  f318		       0a		      ASL
    777  f319		       0a		      ASL
    778  f31a		       85 b1		      STA	Tmp1
    779  f31c		       a5 8e		      LDA	Player0SpeedL
    780  f31e		       4a		      LSR
    781  f31f		       4a		      LSR
    782  f320		       29 3f		      AND	#%00111111
    783  f322		       05 b1		      ORA	Tmp1
    784  f324		       85 b0		      STA	Tmp0	; Division Result
    785  f326
    786  f326				   CalculateParallax1Offset		; 3/4 speed
    787  f326		       38		      SEC
    788  f327		       a5 8e		      LDA	Player0SpeedL
    789  f329		       e5 b0		      SBC	Tmp0
    790  f32b		       85 b2		      STA	Tmp2
    791  f32d		       a5 8f		      LDA	Player0SpeedH
    792  f32f		       e9 00		      SBC	#0
    793  f331		       85 b3		      STA	Tmp3
    794  f333
    795  f333		       18		      CLC
    796  f334		       a5 c6		      LDA	ParallaxOffset1
    797  f336		       65 b2		      ADC	Tmp2
    798  f338		       85 c6		      STA	ParallaxOffset1
    799  f33a		       a5 c7		      LDA	ParallaxOffset1 + 1
    800  f33c		       65 b3		      ADC	Tmp3
    801  f33e		       85 c7		      STA	ParallaxOffset1 + 1
    802  f340
    803  f340				   CalculateParallax2Offset		; 2/4 speed
    804  f340		       38		      SEC
    805  f341		       a5 b2		      LDA	Tmp2
    806  f343		       e5 b0		      SBC	Tmp0
    807  f345		       85 b2		      STA	Tmp2
    808  f347		       a5 b3		      LDA	Tmp3
    809  f349		       e9 00		      SBC	#0
    810  f34b		       85 b3		      STA	Tmp3
    811  f34d
    812  f34d		       18		      CLC
    813  f34e		       a5 c8		      LDA	ParallaxOffset2
    814  f350		       65 b2		      ADC	Tmp2
    815  f352		       85 c8		      STA	ParallaxOffset2
    816  f354		       a5 c9		      LDA	ParallaxOffset2 + 1
    817  f356		       65 b3		      ADC	Tmp3
    818  f358		       85 c9		      STA	ParallaxOffset2 + 1
    819  f35a
    820  f35a				   SkipUpdateLogic		; Continue here if not paused
    821  f35a
    822  f35a				   CalculateGear
    823  f35a		       a5 8e		      LDA	Player0SpeedL	;3
    824  f35c		       29 80		      AND	#%10000000	;2
    825  f35e		       05 8f		      ORA	Player0SpeedH	;3
    826  f360		       18		      CLC		;2
    827  f361		       2a		      ROL		;2
    828  f362		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    829  f364		       85 ad		      STA	Gear
    830  f366
    831  f366				   ProcessBorder		;Can be optimized (probably)
    832  f366		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    833  f368		       a5 88		      LDA	ParallaxMode
    834  f36a		       c9 70		      CMP	#%01110000
    835  f36c		       f0 1a		      BEQ	HorizontalParallaxMode
    836  f36e		       c9 d0		      CMP	#%11010000
    837  f370		       f0 0a		      BEQ	VerticalParallaxMode
    838  f372		       c9 b0		      CMP	#%10110000
    839  f374		       f0 0c		      BEQ	TachometerMode
    840  f376
    841  f376				   DefaultBorderMode
    842  f376		       20 83 f8 	      JSR	DefaultBorderLoop
    843  f379		       4c 8b f3 	      JMP	EndProcessingBorder
    844  f37c				   VerticalParallaxMode
    845  f37c		       20 ed f8 	      JSR	VerticalParallaxLoop
    846  f37f		       4c 8b f3 	      JMP	EndProcessingBorder
    847  f382				   TachometerMode
    848  f382		       20 9e f8 	      JSR	PrepareTachometerBorderLoop
    849  f385		       4c 8b f3 	      JMP	EndProcessingBorder
    850  f388				   HorizontalParallaxMode
    851  f388		       20 35 f8 	      JSR	HorizontalParallaxLoop
    852  f38b
    853  f38b				   EndProcessingBorder
    854  f38b
    855  f38b				   ProcessScoreFontColor
    856  f38b		       a6 d6		      LDX	ScoreFontColorHoldChange
    857  f38d		       f0 06		      BEQ	ResetScoreFontColor
    858  f38f		       ca		      DEX
    859  f390		       86 d6		      STX	ScoreFontColorHoldChange
    860  f392		       4c 99 f3 	      JMP	SkipScoreFontColor
    861  f395				   ResetScoreFontColor
    862  f395		       a9 29		      LDA	#SCORE_FONT_COLOR
    863  f397		       85 d5		      STA	ScoreFontColor
    864  f399				   SkipScoreFontColor
    865  f399
    866  f399				   IsGameOver
    867  f399		       a5 ba		      LDA	CountdownTimer
    868  f39b		       05 8e		      ORA	Player0SpeedL
    869  f39d		       05 8f		      ORA	Player0SpeedH
    870  f39f		       d0 18		      BNE	IsCheckpoint
    871  f3a1		       a9 01		      LDA	#1
    872  f3a3		       85 d6		      STA	ScoreFontColorHoldChange
    873  f3a5		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    874  f3a7		       85 d5		      STA	ScoreFontColor
    875  f3a9		       24 c0		      BIT	GameStatus
    876  f3ab		       30 09		      BMI	SkipSendScore
    877  f3ad		       a5 c0		      LDA	GameStatus
    878  f3af		       09 80		      ORA	#%10000000
    879  f3b1		       85 c0		      STA	GameStatus
    880  f3b3		       20 dc fc 	      JSR	SendPlusROMScore
    881  f3b6
    882  f3b6				   SkipSendScore
    883  f3b6		       4c fa f3 	      JMP	SkipIsTimeOver
    884  f3b9
    885  f3b9				   IsCheckpoint
    886  f3b9		       a5 d7		      LDA	NextCheckpoint
    887  f3bb		       c5 92		      CMP	TrafficOffset0 + 2
    888  f3bd		       d0 2f		      BNE	SkipIsCheckpoint
    889  f3bf		       18		      CLC
    890  f3c0		       69 10		      ADC	#CHECKPOINT_INTERVAL
    891  f3c2		       85 d7		      STA	NextCheckpoint
    892  f3c4		       a9 38		      LDA	#SCORE_FONT_COLOR_GOOD
    893  f3c6		       85 d5		      STA	ScoreFontColor
    894  f3c8		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    895  f3ca		       85 d6		      STA	ScoreFontColorHoldChange
    896  f3cc				   AddCheckpointBcd
    897  f3cc		       f8		      SED		;2
    898  f3cd		       18		      CLC		;2
    899  f3ce		       a5 a4		      LDA	CheckpointBcd0	;3
    900  f3d0		       69 01		      ADC	#1	;3
    901  f3d2		       85 a4		      STA	CheckpointBcd0	;3
    902  f3d4		       a5 a5		      LDA	CheckpointBcd1	;3
    903  f3d6		       69 00		      ADC	#0	;2
    904  f3d8		       85 a5		      STA	CheckpointBcd1	;3
    905  f3da		       d8		      CLD		;2
    906  f3db				   EndCheckpointBcd
    907  f3db		       a5 ba		      LDA	CountdownTimer
    908  f3dd		       18		      CLC
    909  f3de		       65 c2		      ADC	CheckpointTime
    910  f3e0		       85 ba		      STA	CountdownTimer
    911  f3e2		       90 04		      BCC	JumpSkipTimeOver
    912  f3e4		       a9 ff		      LDA	#$FF
    913  f3e6		       85 ba		      STA	CountdownTimer	; Does not overflow!
    914  f3e8				   JumpSkipTimeOver
    915  f3e8		       20 ca f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    916  f3eb		       4c fa f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    917  f3ee				   SkipIsCheckpoint
    918  f3ee
    919  f3ee				   IsTimeOver
    920  f3ee		       a5 ba		      LDA	CountdownTimer
    921  f3f0		       d0 08		      BNE	SkipIsTimeOver
    922  f3f2		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    923  f3f4		       85 d6		      STA	ScoreFontColorHoldChange
    924  f3f6		       a9 64		      LDA	#SCORE_FONT_COLOR_BAD
    925  f3f8		       85 d5		      STA	ScoreFontColor
    926  f3fa				   SkipIsTimeOver
    927  f3fa
    928  f3fa				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
    929  f3fa		       a5 c0		      LDA	GameStatus	;3
    930  f3fc		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
    931  f3fe		       a5 d5		      LDA	ScoreFontColor	;3
    932  f400		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
    933  f402		       f0 30		      BEQ	EndExactlyEverySecond	;2
    934  f404		       c6 cf		      DEC	OneSecondConter	;5
    935  f406		       d0 2c		      BNE	EndExactlyEverySecond	;2
    936  f408
    937  f408		       f8		      SED		;2 BCD Operations after this point
    938  f409				   CountGlideTimeBcd
    939  f409		       a5 d5		      LDA	ScoreFontColor	;3
    940  f40b		       c9 64		      CMP	#SCORE_FONT_COLOR_BAD	;2
    941  f40d		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
    942  f40f		       18		      CLC		;2
    943  f410		       a5 cd		      LDA	GlideTimeBcd0	;3
    944  f412		       69 01		      ADC	#1	;3
    945  f414		       85 cd		      STA	GlideTimeBcd0	;3
    946  f416		       a5 ce		      LDA	GlideTimeBcd1	;3
    947  f418		       69 00		      ADC	#0	;2
    948  f41a		       85 ce		      STA	GlideTimeBcd1	;3
    949  f41c				   EndCountGlideTimeBcd
    950  f41c				   IncreaseTotalTimerBcd
    951  f41c		       18		      CLC		;2
    952  f41d		       a5 bd		      LDA	TimeBcd0	;3
    953  f41f		       69 01		      ADC	#1	;2
    954  f421		       85 bd		      STA	TimeBcd0	;3
    955  f423		       a5 be		      LDA	TimeBcd1	;3
    956  f425		       69 00		      ADC	#0	;2
    957  f427		       85 be		      STA	TimeBcd1	;3
    958  f429		       a5 bf		      LDA	TimeBcd2	;3
    959  f42b		       69 00		      ADC	#0	;2
    960  f42d		       85 bf		      STA	TimeBcd2	;3
    961  f42f
    962  f42f				   ResetOneSecondCounter
    963  f42f		       d8		      CLD		;2
    964  f430		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
    965  f432		       85 cf		      STA	OneSecondConter	;3
    966  f434
    967  f434				   EndExactlyEverySecond
    968  f434
    969  f434				   PrintEasterEggCondition
    970  f434		       a5 8d		      LDA	FrameCount1
    971  f436		       29 38		      AND	#%00111000
    972  f438		       05 c0		      ORA	GameStatus
    973  f43a		       c9 38		      CMP	#%00111000
    974  f43c		       d0 06		      BNE	ChooseTextSide
    975  f43e		       20 41 f9 	      JSR	PrintEasterEgg
    976  f441		       4c 33 f5 	      JMP	RightScoreWriteEnd
    977  f444
    978  f444							;Could be done during on vblank to save this comparisson time (before draw score), 
    979  f444							;but I am saving vblank cycles for now, in case of 2 players.
    980  f444				   ChooseTextSide		; 
    981  f444		       a5 ab		      LDA	TextSide	;3
    982  f446		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    983  f448		       4c c9 f4 	      JMP	RightScoreWrite
    984  f44b
    985  f44b				   LeftScoreWrite
    986  f44b		       a5 d5		      LDA	ScoreFontColor
    987  f44d		       c9 38		      CMP	#SCORE_FONT_COLOR_GOOD
    988  f44f		       f0 4e		      BEQ	PrintCheckpoint
    989  f451		       c9 58		      CMP	#SCORE_FONT_COLOR_START
    990  f453		       f0 52		      BEQ	PrintStartGame
    991  f455		       a5 c0		      LDA	GameStatus
    992  f457		       f0 56		      BEQ	PrintHellwayLeft
    993  f459				   WriteDistance		;Not optimized yet, ugly code.
    994  f459				   Digit0Distance
    995  f459		       a5 91		      LDA	TrafficOffset0 + 1	;3
    996  f45b		       4a		      LSR		; 2
    997  f45c		       4a		      LSR		; 2
    998  f45d		       4a		      LSR		; 2
    999  f45e		       4a		      LSR		; 2
   1000  f45f		       aa		      TAX		; 2
   1001  f460		       bd be fd 	      LDA	FontLookup,X	;4
   1002  f463		       85 d3		      STA	ScoreD3	;3
   1003  f465
   1004  f465				   Digit1Distance
   1005  f465		       a5 92		      LDA	TrafficOffset0 + 2	;3
   1006  f467		       29 0f		      AND	#%00001111	;2
   1007  f469		       aa		      TAX		; 2
   1008  f46a		       bd be fd 	      LDA	FontLookup,X	;4 
   1009  f46d		       85 d2		      STA	ScoreD2	;3
   1010  f46f
   1011  f46f				   Digit2Distance
   1012  f46f		       a5 92		      LDA	TrafficOffset0 + 2	;3
   1013  f471		       4a		      LSR		; 2
   1014  f472		       4a		      LSR		; 2
   1015  f473		       4a		      LSR		; 2
   1016  f474		       4a		      LSR		; 2
   1017  f475		       aa		      TAX		; 2
   1018  f476		       bd be fd 	      LDA	FontLookup,X	;4
   1019  f479		       85 d1		      STA	ScoreD1	;3
   1020  f47b
   1021  f47b				   Digit3Distance
   1022  f47b		       a5 bb		      LDA	Traffic0Msb	;3
   1023  f47d		       29 0f		      AND	#%00001111	;2
   1024  f47f		       aa		      TAX		; 2
   1025  f480		       bd be fd 	      LDA	FontLookup,X	;4 
   1026  f483		       85 d0		      STA	ScoreD0	;3
   1027  f485
   1028  f485				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
   1029  f485		       a5 bb		      LDA	Traffic0Msb
   1030  f487		       29 f0		      AND	#%11110000	;2
   1031  f489		       d0 07		      BNE	DrawDistanceExtraDigit
   1032  f48b		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1033  f48d		       85 d4		      STA	ScoreD4	;3
   1034  f48f		       4c 9c f4 	      JMP	EndDrawDistance
   1035  f492				   DrawDistanceExtraDigit
   1036  f492		       4a		      LSR		; 2
   1037  f493		       4a		      LSR		; 2
   1038  f494		       4a		      LSR		; 2
   1039  f495		       4a		      LSR		; 2
   1040  f496		       aa		      TAX		; 2
   1041  f497		       bd be fd 	      LDA	FontLookup,X	;4
   1042  f49a		       85 d4		      STA	ScoreD4	;3
   1043  f49c
   1044  f49c				   EndDrawDistance
   1045  f49c		       4c 33 f5 	      JMP	RightScoreWriteEnd	;3
   1046  f49f
   1047  f49f				   PrintCheckpoint
   1048  f49f		       a2 00		      LDX	#<CheckpointText
   1049  f4a1		       20 17 f8 	      JSR	PrintStaticText
   1050  f4a4		       4c 33 f5 	      JMP	RightScoreWriteEnd	;3
   1051  f4a7				   PrintStartGame
   1052  f4a7		       a2 23		      LDX	#<GoText
   1053  f4a9		       20 17 f8 	      JSR	PrintStaticText
   1054  f4ac		       4c 33 f5 	      JMP	RightScoreWriteEnd	;3
   1055  f4af
   1056  f4af				   PrintHellwayLeft
   1057  f4af		       a5 8d		      LDA	FrameCount1
   1058  f4b1		       29 01		      AND	#1
   1059  f4b3		       d0 05		      BNE	PrintCreditsLeft
   1060  f4b5		       a2 05		      LDX	#<HellwayLeftText
   1061  f4b7		       4c bc f4 	      JMP	PrintGameMode
   1062  f4ba				   PrintCreditsLeft
   1063  f4ba		       a2 0f		      LDX	#<OpbText
   1064  f4bc
   1065  f4bc				   PrintGameMode
   1066  f4bc		       20 17 f8 	      JSR	PrintStaticText
   1067  f4bf		       a6 c5		      LDX	GameMode
   1068  f4c1		       bd be fd 	      LDA	FontLookup,X	;4 
   1069  f4c4		       85 d0		      STA	ScoreD0	;3
   1070  f4c6		       4c 33 f5 	      JMP	RightScoreWriteEnd	;3
   1071  f4c9
   1072  f4c9				   RightScoreWrite
   1073  f4c9		       a5 c0		      LDA	GameStatus
   1074  f4cb		       f0 45		      BEQ	PrintHellwayRight
   1075  f4cd		       a5 d5		      LDA	ScoreFontColor
   1076  f4cf		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1077  f4d1		       f0 52		      BEQ	PrintGameOver
   1078  f4d3				   Digit0Timer
   1079  f4d3		       a5 ba		      LDA	CountdownTimer	;3
   1080  f4d5		       29 0f		      AND	#%00001111	;2
   1081  f4d7		       aa		      TAX		; 2
   1082  f4d8		       bd be fd 	      LDA	FontLookup,X	;4 
   1083  f4db		       85 d1		      STA	ScoreD1	;3
   1084  f4dd
   1085  f4dd				   Digit1Timer
   1086  f4dd		       a5 ba		      LDA	CountdownTimer	;3
   1087  f4df		       4a		      LSR		; 2
   1088  f4e0		       4a		      LSR		; 2
   1089  f4e1		       4a		      LSR		; 2
   1090  f4e2		       4a		      LSR		; 2
   1091  f4e3		       aa		      TAX		; 2
   1092  f4e4		       bd be fd 	      LDA	FontLookup,X	;4
   1093  f4e7		       85 d0		      STA	ScoreD0	;3
   1094  f4e9
   1095  f4e9		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1096  f4eb		       85 d2		      STA	ScoreD2	;3
   1097  f4ed
   1098  f4ed				   Digit0Speed
   1099  f4ed		       a5 8e		      LDA	Player0SpeedL
   1100  f4ef		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1101  f4f1		       4a		      LSR		; 2
   1102  f4f2		       4a		      LSR		; 2
   1103  f4f3		       aa		      TAX		; 2
   1104  f4f4		       bd be fd 	      LDA	FontLookup,X	;4
   1105  f4f7		       85 d4		      STA	ScoreD4	;3
   1106  f4f9
   1107  f4f9				   Digit1Speed
   1108  f4f9		       a5 8e		      LDA	Player0SpeedL
   1109  f4fb		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1110  f4fd		       18		      CLC
   1111  f4fe		       2a		      ROL		;First goes into carry
   1112  f4ff		       2a		      ROL
   1113  f500		       2a		      ROL
   1114  f501		       85 b0		      STA	Tmp0
   1115  f503		       a5 8f		      LDA	Player0SpeedH
   1116  f505		       0a		      ASL
   1117  f506		       0a		      ASL
   1118  f507		       05 b0		      ORA	Tmp0
   1119  f509		       aa		      TAX		; 2
   1120  f50a		       bd be fd 	      LDA	FontLookup,X	;4
   1121  f50d		       85 d3		      STA	ScoreD3	;3
   1122  f50f		       4c 33 f5 	      JMP	RightScoreWriteEnd
   1123  f512
   1124  f512				   PrintHellwayRight
   1125  f512		       a5 8d		      LDA	FrameCount1
   1126  f514		       29 01		      AND	#1
   1127  f516		       d0 05		      BNE	PrintCreditsRight
   1128  f518		       a2 0a		      LDX	#<HellwayRightText
   1129  f51a		       4c 1f f5 	      JMP	PrintRightIntro
   1130  f51d				   PrintCreditsRight
   1131  f51d		       a2 14		      LDX	#<YearText
   1132  f51f				   PrintRightIntro
   1133  f51f		       20 17 f8 	      JSR	PrintStaticText
   1134  f522		       4c 33 f5 	      JMP	RightScoreWriteEnd
   1135  f525				   PrintGameOver
   1136  f525		       a5 8c		      LDA	FrameCount0
   1137  f527		       30 05		      BMI	PrintOverText
   1138  f529		       a2 19		      LDX	#<GameText
   1139  f52b		       4c 30 f5 	      JMP	StoreGameOverText
   1140  f52e				   PrintOverText
   1141  f52e		       a2 1e		      LDX	#<OverText
   1142  f530				   StoreGameOverText
   1143  f530		       20 17 f8 	      JSR	PrintStaticText
   1144  f533				   RightScoreWriteEnd
   1145  f533
   1146  f533
   1147  f533				   ScoreBackgroundColor
   1148  f533		       a2 00		      LDX	#0
   1149  f535		       ad 82 02 	      LDA	SWCHB
   1150  f538		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1151  f53a		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1152  f53c		       a9 90		      LDA	#SCORE_BACKGROUND_COLOR
   1153  f53e		       a2 03		      LDX	#BACKGROUND_COLOR
   1154  f540				   BlackAndWhiteScoreBg
   1155  f540		       85 b2		      STA	Tmp2	; Score Background
   1156  f542		       86 b3		      STX	Tmp3	; Traffic Background
   1157  f544
   1158  f544				   ConfigurePFForScore
   1159  f544							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1160  f544		       85 09		      STA	COLUBK
   1161  f546		       20 8c f7 	      JSR	ClearAll
   1162  f549		       a9 02		      LDA	#%00000010	; Score mode
   1163  f54b		       85 0a		      STA	CTRLPF
   1164  f54d		       a5 ab		      LDA	TextSide	;3
   1165  f54f		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1166  f551				   LeftScoreOn
   1167  f551		       a5 d5		      LDA	ScoreFontColor
   1168  f553		       85 07		      STA	COLUP1
   1169  f555		       a5 b2		      LDA	Tmp2
   1170  f557		       85 06		      STA	COLUP0
   1171  f559		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1172  f55b		       85 b1		      STA	Tmp1
   1173  f55d		       4c 6c f5 	      JMP	CallWaitForVblankEnd
   1174  f560				   RightScoreOn
   1175  f560		       a5 d5		      LDA	ScoreFontColor
   1176  f562		       85 06		      STA	COLUP0
   1177  f564		       a5 b2		      LDA	Tmp2
   1178  f566		       85 07		      STA	COLUP1
   1179  f568		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1180  f56a		       85 b1		      STA	Tmp1
   1181  f56c
   1182  f56c							; After here we are going to update the screen, No more heavy code
   1183  f56c				   CallWaitForVblankEnd
   1184  f56c		       20 b1 fb 	      JSR	WaitForVblankEnd
   1185  f56f
   1186  f56f				   DrawScoreHud
   1187  f56f		       20 b3 f9 	      JSR	PrintScore
   1188  f572
   1189  f572		       85 02		      STA	WSYNC
   1190  f574
   1191  f574		       a5 0c		      LDA	INPT4	;3
   1192  f576		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1193  f578		       a5 d5		      LDA	ScoreFontColor
   1194  f57a		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1195  f57c		       d0 0a		      BNE	WaitAnotherScoreLine
   1196  f57e		       a5 ab		      LDA	TextSide	;3
   1197  f580		       d0 03		      BNE	LeftScoreOnGameOver
   1198  f582		       4c 3e fb 	      JMP	DrawGameOverScreenRight
   1199  f585				   LeftScoreOnGameOver
   1200  f585		       4c 70 fa 	      JMP	DrawGameOverScreenLeft
   1201  f588
   1202  f588				   WaitAnotherScoreLine
   1203  f588		       85 02		      STA	WSYNC
   1204  f58a
   1205  f58a				   PrepareForTraffic
   1206  f58a		       20 9e f7 	      JSR	ClearPF	; 32
   1207  f58d
   1208  f58d		       85 02		      STA	WSYNC
   1209  f58f		       85 02		      STA	WSYNC
   1210  f591
   1211  f591		       a9 31		      LDA	#%00110001	; 2 Score mode
   1212  f593		       85 0a		      STA	CTRLPF	;3
   1213  f595
   1214  f595		       a5 c3		      LDA	TrafficColor	;3
   1215  f597		       85 08		      STA	COLUPF	;3
   1216  f599
   1217  f599		       a9 b6		      LDA	#PLAYER1_COLOR	;2
   1218  f59b		       85 07		      STA	COLUP1	;3
   1219  f59d
   1220  f59d		       a5 d5		      LDA	ScoreFontColor	;3
   1221  f59f		       85 06		      STA	COLUP0	;3
   1222  f5a1
   1223  f5a1		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1224  f5a3
   1225  f5a3		       20 9e f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1226  f5a6
      0  f5a6					      SLEEP	14
      1  f5a6				   .CYCLES    SET	14
      2  f5a6
      3  f5a6				  -	      IF	.CYCLES < 2
      4  f5a6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5a6				  -	      ERR
      6  f5a6					      ENDIF
      7  f5a6
      8  f5a6				  -	      IF	.CYCLES & 1
      9  f5a6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5a6				  -	      nop	0
     11  f5a6				  -	      ELSE
     12  f5a6				  -	      bit	VSYNC
     13  f5a6				  -	      ENDIF
     14  f5a6				  -.CYCLES    SET	.CYCLES - 3
     15  f5a6					      ENDIF
     16  f5a6
     17  f5a6					      REPEAT	.CYCLES / 2
     18  f5a6		       ea		      nop
     17  f5a6					      REPEND
     18  f5a7		       ea		      nop
     17  f5a7					      REPEND
     18  f5a8		       ea		      nop
     17  f5a8					      REPEND
     18  f5a9		       ea		      nop
     17  f5a9					      REPEND
     18  f5aa		       ea		      nop
     17  f5aa					      REPEND
     18  f5ab		       ea		      nop
     17  f5ab					      REPEND
     18  f5ac		       ea		      nop
     19  f5ad					      REPEND
   1228  f5ad
   1229  f5ad		       a5 b3		      LDA	Tmp3	;3
   1230  f5af		       85 09		      STA	COLUBK	;3
   1231  f5b1		       4c b6 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1232  f5b4							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1233  f5b4
   1234  f5b4							;main scanline loop...
   1235  f5b4				   ScanLoop
   1236  f5b4		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1237  f5b6
   1238  f5b6							;Start of next line!			
   1239  f5b6				   DrawCache		;63 Is the last line going to the top of the next frame?
   1240  f5b6		       a5 81		      LDA	PF0Cache	;3
   1241  f5b8		       85 0d		      STA	PF0	;3
   1242  f5ba
   1243  f5ba		       a5 82		      LDA	PF1Cache	;3
   1244  f5bc		       85 0e		      STA	PF1	;3
   1245  f5be
   1246  f5be		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1247  f5c0		       b0 04		      BCS	SkipDrawCar	;2
   1248  f5c2		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1249  f5c4		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1250  f5c6				   SkipDrawCar
   1251  f5c6
   1252  f5c6		       a5 84		      LDA	GRP1Cache	;3
   1253  f5c8		       85 1c		      STA	GRP1	;3
   1254  f5ca
   1255  f5ca		       a5 85		      LDA	ENABLCache	;3
   1256  f5cc		       85 1f		      STA	ENABL	;3
   1257  f5ce
   1258  f5ce		       a5 86		      LDA	ENAM0Cache	;3
   1259  f5d0		       85 1d		      STA	ENAM0	;3
   1260  f5d2
   1261  f5d2		       a5 87		      LDA	ENAM1Cache	;3
   1262  f5d4		       85 1e		      STA	ENAM1	;3
   1263  f5d6
   1264  f5d6		       a9 00		      LDA	#0	;2
   1265  f5d8							;STA PF1Cache ;3
   1266  f5d8		       85 84		      STA	GRP1Cache	;3
   1267  f5da		       85 85		      STA	ENABLCache	;3
   1268  f5dc		       85 86		      STA	ENAM0Cache	;3
   1269  f5de		       85 87		      STA	ENAM1Cache	; 3
   1270  f5e0
   1271  f5e0							;BEQ DrawTraffic3
   1272  f5e0				   DrawTraffic1 		; 33
   1273  f5e0		       98		      TYA		; 2
   1274  f5e1		       18		      CLC		; 2 
   1275  f5e2		       65 95		      ADC	TrafficOffset1 + 1	;3
   1276  f5e4		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1277  f5e6		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1278  f5e8		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1279  f5ea		       4c ef f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1280  f5ed				   EorOffsetWithCarry
   1281  f5ed		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1282  f5ef				   AfterEorOffsetWithCarry		;17
   1283  f5ef		       aa		      TAX		;2
   1284  f5f0		       bd 00 fe 	      LDA	AesTable,X	; 4
   1285  f5f3		       c5 c1		      CMP	TrafficChance	;3
   1286  f5f5		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1287  f5f7		       a9 ff		      LDA	#$FF	;2
   1288  f5f9		       85 84		      STA	GRP1Cache	;3
   1289  f5fb				   FinishDrawTraffic1
   1290  f5fb
   1291  f5fb				   DrawTraffic2 		; 33
   1292  f5fb		       98		      TYA		; 2
   1293  f5fc		       18		      CLC		; 2 
   1294  f5fd		       65 99		      ADC	TrafficOffset2 + 1	;3
   1295  f5ff		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1296  f601		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1297  f603		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1298  f605		       4c 0a f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1299  f608				   EorOffsetWithCarry2
   1300  f608		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1301  f60a				   AfterEorOffsetWithCarry2		;17
   1302  f60a		       aa		      TAX		;2
   1303  f60b		       bd 00 fe 	      LDA	AesTable,X	; 4
   1304  f60e		       c5 c1		      CMP	TrafficChance	;3
   1305  f610		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1306  f612		       a9 02		      LDA	#%00000010	;2
   1307  f614		       85 85		      STA	ENABLCache	;3
   1308  f616				   FinishDrawTraffic2
   1309  f616
   1310  f616							;STA WSYNC ;65 / 137
   1311  f616
   1312  f616							; LDA Tmp0 ; Flicker this line if drawing car
   1313  f616							; BEQ FinishDrawTraffic4
   1314  f616				   DrawTraffic3 		; 33
   1315  f616		       98		      TYA		; 2
   1316  f617		       18		      CLC		; 2 
   1317  f618		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1318  f61a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1319  f61c		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1320  f61e		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1321  f620		       4c 25 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1322  f623				   EorOffsetWithCarry3
   1323  f623		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1324  f625				   AfterEorOffsetWithCarry3		;17
   1325  f625		       aa		      TAX		;2
   1326  f626		       bd 00 fe 	      LDA	AesTable,X	; 4
   1327  f629		       c5 c1		      CMP	TrafficChance	;3
   1328  f62b		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1329  f62d		       a9 02		      LDA	#%00000010	;2
   1330  f62f		       85 86		      STA	ENAM0Cache
   1331  f631				   FinishDrawTraffic3
   1332  f631
   1333  f631				   DrawTraffic4 		; 33
   1334  f631		       98		      TYA		; 2
   1335  f632		       18		      CLC		; 2 
   1336  f633		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1337  f635		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1338  f637		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1339  f639		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1340  f63b		       4c 40 f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1341  f63e				   EorOffsetWithCarry4
   1342  f63e		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1343  f640				   AfterEorOffsetWithCarry4		;17
   1344  f640		       aa		      TAX		;2
   1345  f641		       bd 00 fe 	      LDA	AesTable,X	; 4
   1346  f644		       c5 c1		      CMP	TrafficChance	;3
   1347  f646		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1348  f648		       a9 02		      LDA	#%00000010	;2
   1349  f64a		       85 87		      STA	ENAM1Cache	;3
   1350  f64c				   FinishDrawTraffic4
   1351  f64c
   1352  f64c				   DrawTraffic0 		; 20
   1353  f64c		       98		      TYA		;2
   1354  f64d		       29 07		      AND	#%00000111	;2
   1355  f64f		       aa		      TAX		;2
   1356  f650		       b5 d8		      LDA	ParallaxCache,X	;4
   1357  f652		       85 82		      STA	PF1Cache	;3
   1358  f654		       b5 f0		      LDA	ParallaxCache2,X	;4
   1359  f656		       85 81		      STA	PF0Cache	;3
   1360  f658
   1361  f658				   SkipDrawTraffic0
   1362  f658
   1363  f658				   WhileScanLoop
   1364  f658		       88		      DEY		;2
   1365  f659		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1366  f65b		       4c b4 f5 	      JMP	ScanLoop	;3
   1367  f65e				   FinishScanLoop		; 7 209 of 222
   1368  f65e
   1369  f65e		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1370  f660		       20 ad f7 	      JSR	LoadAll
   1371  f663		       85 02		      STA	WSYNC	; do stuff!
   1372  f665		       85 02		      STA	WSYNC
   1373  f667		       85 02		      STA	WSYNC
   1374  f669							;42 cycles to use here
   1375  f669
   1376  f669				   PrepareOverscan
   1377  f669		       a9 02		      LDA	#2
   1378  f66b		       85 02		      STA	WSYNC
   1379  f66d		       85 01		      STA	VBLANK
   1380  f66f
   1381  f66f		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1382  f671		       8d 96 02 	      STA	TIM64T
   1383  f674
   1384  f674				   LeftSound		;41
   1385  f674		       a5 ba		      LDA	CountdownTimer	;3
   1386  f676		       f0 1b		      BEQ	EngineOff	;2
   1387  f678		       a6 ad		      LDX	Gear
   1388  f67a		       a5 8e		      LDA	Player0SpeedL	;3
   1389  f67c		       4a		      LSR		;2
   1390  f67d		       4a		      LSR		;2
   1391  f67e		       4a		      LSR		;2
   1392  f67f		       29 0f		      AND	#%00001111	;2
   1393  f681		       85 b0		      STA	Tmp0	;3
   1394  f683		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1395  f686		       38		      SEC		;2
   1396  f687		       e5 b0		      SBC	Tmp0	;3
   1397  f689		       85 17		      STA	AUDF0	;3
   1398  f68b		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1399  f68e		       85 15		      STA	AUDC0	;3
   1400  f690		       4c 97 f6 	      JMP	EndLeftSound	;3
   1401  f693				   EngineOff
   1402  f693		       a9 00		      LDA	#0
   1403  f695		       85 15		      STA	AUDC0
   1404  f697
   1405  f697				   EndLeftSound
   1406  f697
   1407  f697
   1408  f697				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1409  f697		       a5 d5		      LDA	ScoreFontColor	;3
   1410  f699		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1411  f69b		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1412  f69d		       c9 38		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1413  f69f		       f0 29		      BEQ	PlayCheckpoint	;2
   1414  f6a1		       a5 b8		      LDA	CollisionCounter	;3
   1415  f6a3		       c9 e0		      CMP	#$E0	;2
   1416  f6a5		       b0 14		      BCS	PlayColision	;2
   1417  f6a7		       a5 d7		      LDA	NextCheckpoint	;3
   1418  f6a9		       38		      SEC		;2
   1419  f6aa		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1420  f6ac		       c9 02		      CMP	#$02	;2
   1421  f6ae		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1422  f6b0		       a5 ba		      LDA	CountdownTimer	; 3
   1423  f6b2		       f0 53		      BEQ	MuteRightSound	;2
   1424  f6b4		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1425  f6b6		       90 37		      BCC	PlayWarnTimeEnding	;4
   1426  f6b8		       4c 07 f7 	      JMP	MuteRightSound	;3
   1427  f6bb				   PlayColision
   1428  f6bb		       a9 1f		      LDA	#31
   1429  f6bd		       85 18		      STA	AUDF1
   1430  f6bf		       a9 08		      LDA	#8
   1431  f6c1		       85 16		      STA	AUDC1
   1432  f6c3		       a9 08		      LDA	#8
   1433  f6c5		       85 1a		      STA	AUDV1
   1434  f6c7		       4c 0b f7 	      JMP	EndRightSound
   1435  f6ca
   1436  f6ca				   PlayCheckpoint
   1437  f6ca		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1438  f6cc		       4a		      LSR		;2
   1439  f6cd		       4a		      LSR		;2
   1440  f6ce		       4a		      LSR		;2
   1441  f6cf		       85 18		      STA	AUDF1	;3
   1442  f6d1		       a9 0c		      LDA	#12	;2
   1443  f6d3		       85 16		      STA	AUDC1	;3
   1444  f6d5		       a9 06		      LDA	#6	;2
   1445  f6d7		       85 1a		      STA	AUDV1	;3
   1446  f6d9		       4c 0b f7 	      JMP	EndRightSound	;3
   1447  f6dc
   1448  f6dc				   PlayBeforeCheckpoint
   1449  f6dc		       a5 8c		      LDA	FrameCount0	;3
   1450  f6de		       29 1c		      AND	#%00011100	;2
   1451  f6e0		       09 03		      ORA	#%00000011	;2
   1452  f6e2		       85 18		      STA	AUDF1	;3
   1453  f6e4		       a9 0c		      LDA	#12	;2
   1454  f6e6		       85 16		      STA	AUDC1	;3
   1455  f6e8		       a9 03		      LDA	#3	;2
   1456  f6ea		       85 1a		      STA	AUDV1	;3
   1457  f6ec		       4c 0b f7 	      JMP	EndRightSound	;3
   1458  f6ef
   1459  f6ef				   PlayWarnTimeEnding
   1460  f6ef		       a5 8c		      LDA	FrameCount0	;3
   1461  f6f1		       29 04		      AND	#%00000100	;2
   1462  f6f3		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1463  f6f5		       18		      CLC		;2
   1464  f6f6		       a9 0a		      LDA	#10	;2
   1465  f6f8		       65 ba		      ADC	CountdownTimer	;2
   1466  f6fa		       85 18		      STA	AUDF1	;3
   1467  f6fc		       a9 0c		      LDA	#12	;2
   1468  f6fe		       85 16		      STA	AUDC1	;3
   1469  f700		       a9 03		      LDA	#3	;2
   1470  f702		       85 1a		      STA	AUDV1	;3
   1471  f704		       4c 0b f7 	      JMP	EndRightSound	;3
   1472  f707
   1473  f707				   MuteRightSound
   1474  f707		       a9 00		      LDA	#0
   1475  f709		       85 1a		      STA	AUDV1
   1476  f70b				   EndRightSound
   1477  f70b
   1478  f70b							;Read Fire Button before, will make it start the game for now.
   1479  f70b				   StartGame
   1480  f70b		       a5 0c		      LDA	INPT4	;3
   1481  f70d		       30 2b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1482  f70f		       a5 c0		      LDA	GameStatus	;3
   1483  f711		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1484  f713		       d0 25		      BNE	SkipGameStart
   1485  f715		       a5 c5		      LDA	GameMode
   1486  f717		       c9 10		      CMP	#MAX_GAME_MODE
   1487  f719		       d0 0b		      BNE	SetGameRunning
   1488  f71b		       a9 00		      LDA	#0
   1489  f71d		       85 c5		      STA	GameMode
   1490  f71f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1491  f721		       85 bc		      STA	SwitchDebounceCounter
   1492  f723		       4c 3a f7 	      JMP	SkipGameStart
   1493  f726				   SetGameRunning
   1494  f726		       e6 c0		      INC	GameStatus
   1495  f728		       a9 00		      LDA	#0	;
   1496  f72a		       85 8c		      STA	FrameCount0
   1497  f72c		       85 8d		      STA	FrameCount1
   1498  f72e		       a9 0a		      LDA	#10
   1499  f730		       85 19		      STA	AUDV0
   1500  f732		       a9 58		      LDA	#SCORE_FONT_COLOR_START
   1501  f734		       85 d5		      STA	ScoreFontColor
   1502  f736		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1503  f738		       85 d6		      STA	ScoreFontColorHoldChange
   1504  f73a				   SkipGameStart
   1505  f73a
   1506  f73a				   ReadSwitches
   1507  f73a		       a6 bc		      LDX	SwitchDebounceCounter
   1508  f73c		       d0 3c		      BNE	DecrementSwitchDebounceCounter
   1509  f73e		       a9 01		      LDA	#%00000001
   1510  f740		       2c 82 02 	      BIT	SWCHB
   1511  f743		       d0 07		      BNE	SkipReset
   1512  f745		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1513  f747		       85 bc		      STA	SwitchDebounceCounter
   1514  f749		       4c 84 f7 	      JMP	OverScanWaitBeforeReset
   1515  f74c				   SkipReset
   1516  f74c
   1517  f74c				   GameModeSelect
   1518  f74c		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1519  f74e		       d0 27		      BNE	SkipGameSelect
   1520  f750		       20 d9 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1521  f753				   ReadDpadParallax
   1522  f753		       ad 80 02 	      LDA	SWCHA
   1523  f756		       29 f0		      AND	#%11110000
   1524  f758		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
   1525  f75a		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
   1526  f75c		       85 88		      STA	ParallaxMode
   1527  f75e				   ContinueGameSelect
   1528  f75e		       a9 02		      LDA	#%00000010
   1529  f760		       2c 82 02 	      BIT	SWCHB
   1530  f763		       d0 12		      BNE	SkipGameSelect
   1531  f765		       a6 c5		      LDX	GameMode
   1532  f767		       e0 10		      CPX	#MAX_GAME_MODE
   1533  f769		       f0 04		      BEQ	ResetGameMode
   1534  f76b		       e8		      INX
   1535  f76c		       4c 71 f7 	      JMP	StoreGameMode
   1536  f76f				   ResetGameMode
   1537  f76f		       a2 00		      LDX	#0
   1538  f771				   StoreGameMode
   1539  f771		       86 c5		      STX	GameMode
   1540  f773		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1541  f775		       85 bc		      STA	SwitchDebounceCounter
   1542  f777				   SkipGameSelect
   1543  f777		       4c 7c f7 	      JMP	EndReadSwitches
   1544  f77a				   DecrementSwitchDebounceCounter
   1545  f77a		       c6 bc		      DEC	SwitchDebounceCounter
   1546  f77c				   EndReadSwitches
   1547  f77c
   1548  f77c				   OverScanWait
   1549  f77c		       ad 84 02 	      LDA	INTIM
   1550  f77f		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1551  f781		       4c d8 f0 	      JMP	MainLoop
   1552  f784
   1553  f784				   OverScanWaitBeforeReset
   1554  f784		       ad 84 02 	      LDA	INTIM
   1555  f787		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1556  f789		       4c 14 f0 	      JMP	Start
   1557  f78c
   1558  f78c				   Subroutines
   1559  f78c
   1560  f78c				   ClearAll		; 52
   1561  f78c		       a9 00		      LDA	#0	;2
   1562  f78e		       85 1c		      STA	GRP1	;3
   1563  f790		       85 1f		      STA	ENABL	;3
   1564  f792		       85 1d		      STA	ENAM0	;3
   1565  f794		       85 1e		      STA	ENAM1	;3
   1566  f796		       85 84		      STA	GRP1Cache	;3
   1567  f798		       85 85		      STA	ENABLCache	;3
   1568  f79a		       85 86		      STA	ENAM0Cache	;3
   1569  f79c		       85 87		      STA	ENAM1Cache	;3
   1570  f79e
   1571  f79e				   ClearPF		; 26
   1572  f79e		       a9 00		      LDA	#0	;2
   1573  f7a0				   ClearPFSkipLDA0
   1574  f7a0		       85 0d		      STA	PF0	;3
   1575  f7a2		       85 0e		      STA	PF1	;3
   1576  f7a4		       85 0f		      STA	PF2	;3	
   1577  f7a6		       85 81		      STA	PF0Cache	;3
   1578  f7a8		       85 82		      STA	PF1Cache	;3
   1579  f7aa		       85 83		      STA	PF2Cache	;3 
   1580  f7ac		       60		      RTS		;6
   1581  f7ad				   EndClearAll
   1582  f7ad
   1583  f7ad				   LoadAll		; 48
   1584  f7ad		       a5 81		      LDA	PF0Cache	;3
   1585  f7af		       85 0d		      STA	PF0	;3
   1586  f7b1
   1587  f7b1		       a5 82		      LDA	PF1Cache	;3
   1588  f7b3		       85 0e		      STA	PF1	;3
   1589  f7b5
   1590  f7b5		       a5 83		      LDA	PF2Cache	;3
   1591  f7b7		       85 0f		      STA	PF2	;3
   1592  f7b9
   1593  f7b9		       a5 84		      LDA	GRP1Cache	;3
   1594  f7bb		       85 1c		      STA	GRP1	;3
   1595  f7bd
   1596  f7bd		       a5 85		      LDA	ENABLCache	;3
   1597  f7bf		       85 1f		      STA	ENABL	;3
   1598  f7c1
   1599  f7c1		       a5 86		      LDA	ENAM0Cache	;3
   1600  f7c3		       85 1d		      STA	ENAM0	;3
   1601  f7c5
   1602  f7c5		       a5 87		      LDA	ENAM1Cache	;3
   1603  f7c7		       85 1e		      STA	ENAM1	;3
   1604  f7c9
   1605  f7c9		       60		      RTS		;6
   1606  f7ca				   EndLoadAll
   1607  f7ca
   1608  f7ca				   NextDifficulty
   1609  f7ca		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1610  f7cc		       29 01		      AND	#%00000001
   1611  f7ce		       d0 24		      BNE	CheckRandomDifficulty
   1612  f7d0
   1613  f7d0		       a5 c4		      LDA	CurrentDifficulty
   1614  f7d2		       18		      CLC
   1615  f7d3		       69 01		      ADC	#1
   1616  f7d5		       29 03		      AND	#%00000011	; 0 to 3
   1617  f7d7		       85 c4		      STA	CurrentDifficulty
   1618  f7d9
   1619  f7d9				   ConfigureDifficulty
   1620  f7d9		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1621  f7db		       b9 e7 ff 	      LDA	TrafficChanceTable,Y
   1622  f7de		       85 c1		      STA	TrafficChance
   1623  f7e0		       b9 e3 ff 	      LDA	TrafficColorTable,Y
   1624  f7e3		       85 c3		      STA	TrafficColor
   1625  f7e5
   1626  f7e5		       a5 c5		      LDA	GameMode	;
   1627  f7e7		       29 01		      AND	#%00000001
   1628  f7e9		       f0 03		      BEQ	UseNextDifficultyTime
   1629  f7eb		       4c ef f7 	      JMP	StoreDifficultyTime
   1630  f7ee				   UseNextDifficultyTime
   1631  f7ee		       c8		      INY
   1632  f7ef				   StoreDifficultyTime
   1633  f7ef		       b9 eb ff 	      LDA	TrafficTimeTable,Y
   1634  f7f2		       85 c2		      STA	CheckpointTime
   1635  f7f4
   1636  f7f4				   CheckRandomDifficulty
   1637  f7f4		       a5 c5		      LDA	GameMode
   1638  f7f6		       29 08		      AND	#%00001000	; Random difficulties
   1639  f7f8		       f0 09		      BEQ	ReturnFromNextDifficulty
   1640  f7fa				   RandomDifficulty
   1641  f7fa		       a6 8c		      LDX	FrameCount0
   1642  f7fc		       bd 00 fe 	      LDA	AesTable,X
   1643  f7ff							;EOR TrafficChance, no need, lets make life simple
   1644  f7ff		       29 3f		      AND	#%00111111
   1645  f801		       85 c1		      STA	TrafficChance
   1646  f803
   1647  f803				   ReturnFromNextDifficulty
   1648  f803		       60		      RTS
   1649  f804				   EndNextDifficulty
   1650  f804
   1651  f804				   DefaultOffsets
   1652  f804		       a9 20		      LDA	#$20
   1653  f806		       85 96		      STA	TrafficOffset1 + 2
   1654  f808		       a9 40		      LDA	#$40
   1655  f80a		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1656  f80c		       a9 60		      LDA	#$60
   1657  f80e		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1658  f810		       a9 80		      LDA	#$80
   1659  f812		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1660  f814		       a9 a0		      LDA	#$A0
   1661  f816		       60		      RTS
   1662  f817
   1663  f817				   PrintStaticText		; Preload X with the offset referent to StaticText
   1664  f817		       bd 00 ff 	      LDA	StaticText,X
   1665  f81a		       85 d0		      STA	ScoreD0
   1666  f81c		       e8		      INX
   1667  f81d		       bd 00 ff 	      LDA	StaticText,X
   1668  f820		       85 d1		      STA	ScoreD1
   1669  f822		       e8		      INX
   1670  f823		       bd 00 ff 	      LDA	StaticText,X
   1671  f826		       85 d2		      STA	ScoreD2
   1672  f828		       e8		      INX
   1673  f829		       bd 00 ff 	      LDA	StaticText,X
   1674  f82c		       85 d3		      STA	ScoreD3
   1675  f82e		       e8		      INX
   1676  f82f		       bd 00 ff 	      LDA	StaticText,X
   1677  f832		       85 d4		      STA	ScoreD4
   1678  f834		       60		      RTS
   1679  f835
   1680  f835				   HorizontalParallaxLoop
   1681  f835		       a9 ef		      LDA	#%11101111	; Clear the house
   1682  f837		       39 d8 00 	      AND	ParallaxCache,Y
   1683  f83a		       99 d8 00 	      STA	ParallaxCache,Y
   1684  f83d				   CalculateParallax0
   1685  f83d		       98		      TYA
   1686  f83e		       18		      CLC
   1687  f83f		       65 91		      ADC	TrafficOffset0 + 1
   1688  f841		       29 04		      AND	#%00000100
   1689  f843		       f0 08		      BEQ	HasEmptySpace0
   1690  f845				   HasBorder0
   1691  f845		       b9 d8 00 	      LDA	ParallaxCache,Y
   1692  f848		       09 0f		      ORA	#%00001111
   1693  f84a		       4c 52 f8 	      JMP	StoreParallax0
   1694  f84d				   HasEmptySpace0
   1695  f84d		       b9 d8 00 	      LDA	ParallaxCache,Y
   1696  f850		       29 f0		      AND	#%11110000
   1697  f852
   1698  f852				   StoreParallax0
   1699  f852		       99 d8 00 	      STA	ParallaxCache,Y
   1700  f855
   1701  f855				   CalculateParallax1
   1702  f855		       98		      TYA
   1703  f856		       18		      CLC
   1704  f857		       65 c7		      ADC	ParallaxOffset1 + 1
   1705  f859		       29 04		      AND	#%00000100
   1706  f85b		       f0 08		      BEQ	HasEmptySpace1
   1707  f85d				   HasBorder1
   1708  f85d		       b9 d8 00 	      LDA	ParallaxCache,Y
   1709  f860		       09 e0		      ORA	#%11100000
   1710  f862		       4c 6a f8 	      JMP	StoreParallax1
   1711  f865				   HasEmptySpace1
   1712  f865		       b9 d8 00 	      LDA	ParallaxCache,Y
   1713  f868		       29 1f		      AND	#%00011111
   1714  f86a
   1715  f86a				   StoreParallax1
   1716  f86a		       99 d8 00 	      STA	ParallaxCache,Y
   1717  f86d
   1718  f86d				   CalculateParallax2
   1719  f86d		       98		      TYA
   1720  f86e		       18		      CLC
   1721  f86f		       65 c9		      ADC	ParallaxOffset2 + 1
   1722  f871		       29 04		      AND	#%00000100
   1723  f873		       f0 05		      BEQ	HasEmptySpace2
   1724  f875				   HasBorder2
   1725  f875		       a9 60		      LDA	#%01100000
   1726  f877		       4c 7c f8 	      JMP	StoreParallax2
   1727  f87a				   HasEmptySpace2
   1728  f87a		       a9 00		      LDA	#0
   1729  f87c
   1730  f87c				   StoreParallax2
   1731  f87c		       99 f0 00 	      STA	ParallaxCache2,Y
   1732  f87f
   1733  f87f				   ContinueHorizontalParallaxLoop
   1734  f87f		       88		      DEY
   1735  f880		       10 b3		      BPL	HorizontalParallaxLoop
   1736  f882		       60		      RTS
   1737  f883
   1738  f883				   DefaultBorderLoop
   1739  f883				   CalculateDefaultBorder
   1740  f883		       98		      TYA
   1741  f884		       18		      CLC
   1742  f885		       65 91		      ADC	TrafficOffset0 + 1
   1743  f887		       29 04		      AND	#%00000100
   1744  f889		       f0 05		      BEQ	HasEmptySpace
   1745  f88b				   HasBorder
   1746  f88b		       a9 ff		      LDA	#$FF
   1747  f88d		       4c 92 f8 	      JMP	StoreBorder
   1748  f890				   HasEmptySpace
   1749  f890		       a9 00		      LDA	#0
   1750  f892
   1751  f892				   StoreBorder
   1752  f892		       99 d8 00 	      STA	ParallaxCache,Y
   1753  f895		       a9 00		      LDA	#0
   1754  f897		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1755  f89a
   1756  f89a				   ContinueDefaultBorderLoop
   1757  f89a		       88		      DEY
   1758  f89b		       10 e6		      BPL	DefaultBorderLoop
   1759  f89d		       60		      RTS
   1760  f89e
   1761  f89e				   PrepareTachometerBorderLoop
   1762  f89e		       a5 8e		      LDA	Player0SpeedL
   1763  f8a0		       4a		      LSR
   1764  f8a1		       4a		      LSR
   1765  f8a2		       4a		      LSR
   1766  f8a3		       4a		      LSR
   1767  f8a4		       29 07		      AND	#%00000111
   1768  f8a6		       85 b1		      STA	Tmp1	; RPM
   1769  f8a8		       a6 a9		      LDX	CurrentCarId	; Y cannot be destroyed here
   1770  f8aa		       bd d9 ff 	      LDA	CarIdToMaxGear,X
   1771  f8ad		       85 b2		      STA	Tmp2	; Max Gear
   1772  f8af
   1773  f8af				   TachometerBorderLoop
   1774  f8af		       98		      TYA
   1775  f8b0		       18		      CLC
   1776  f8b1		       65 91		      ADC	TrafficOffset0 + 1
   1777  f8b3		       29 04		      AND	#%00000100
   1778  f8b5		       f0 10		      BEQ	HasBorderTac
   1779  f8b7		       a6 ad		      LDX	Gear
   1780  f8b9		       bd eb fd 	      LDA	TachometerGearLookup,X
   1781  f8bc		       99 d8 00 	      STA	ParallaxCache,Y
   1782  f8bf		       a9 00		      LDA	#0
   1783  f8c1		       99 f0 00 	      STA	ParallaxCache2,Y
   1784  f8c4		       4c e9 f8 	      JMP	ContinueBorderTac
   1785  f8c7				   HasBorderTac
   1786  f8c7		       a5 b2		      LDA	Tmp2	; Max Gear
   1787  f8c9		       c5 ad		      CMP	Gear	; Only on max speed
   1788  f8cb		       f0 11		      BEQ	FullBorderTac
   1789  f8cd		       a6 b1		      LDX	Tmp1
   1790  f8cf		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1791  f8d2		       99 d8 00 	      STA	ParallaxCache,Y
   1792  f8d5		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1793  f8d8		       99 f0 00 	      STA	ParallaxCache2,Y
   1794  f8db		       4c e9 f8 	      JMP	ContinueBorderTac
   1795  f8de
   1796  f8de				   FullBorderTac
   1797  f8de		       a9 ff		      LDA	#$FF
   1798  f8e0		       99 d8 00 	      STA	ParallaxCache,Y
   1799  f8e3		       99 f0 00 	      STA	ParallaxCache2,Y
   1800  f8e6		       4c e9 f8 	      JMP	ContinueBorderTac
   1801  f8e9
   1802  f8e9				   ContinueBorderTac
   1803  f8e9		       88		      DEY
   1804  f8ea		       10 c3		      BPL	TachometerBorderLoop
   1805  f8ec		       60		      RTS
   1806  f8ed
   1807  f8ed				   VerticalParallaxLoop
   1808  f8ed				   CalculateVerticalParallax0
   1809  f8ed		       98		      TYA
   1810  f8ee		       18		      CLC
   1811  f8ef		       65 91		      ADC	TrafficOffset0 + 1
   1812  f8f1		       29 06		      AND	#%00000110
   1813  f8f3		       d0 0b		      BNE	HasNoVerticalLine0
   1814  f8f5				   HasVerticalLine0
   1815  f8f5		       a9 ff		      LDA	#$FF
   1816  f8f7		       99 d8 00 	      STA	ParallaxCache,Y
   1817  f8fa		       99 f0 00 	      STA	ParallaxCache2,Y
   1818  f8fd		       4c 3d f9 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1819  f900				   HasNoVerticalLine0
   1820  f900		       a9 00		      LDA	#0
   1821  f902		       99 d8 00 	      STA	ParallaxCache,Y
   1822  f905		       99 f0 00 	      STA	ParallaxCache2,Y
   1823  f908
   1824  f908				   CalculateVerticalParallax1
   1825  f908		       98		      TYA
   1826  f909		       18		      CLC
   1827  f90a		       65 c7		      ADC	ParallaxOffset1 + 1
   1828  f90c		       29 07		      AND	#%00000111
   1829  f90e		       d0 0d		      BNE	HasNoVerticalLine1
   1830  f910
   1831  f910				   HasVerticalLine1
   1832  f910		       a9 fc		      LDA	#%11111100
   1833  f912		       99 d8 00 	      STA	ParallaxCache,Y
   1834  f915		       a9 c0		      LDA	#%11000000
   1835  f917		       99 f0 00 	      STA	ParallaxCache2,Y
   1836  f91a		       4c 3d f9 	      JMP	ContinueVerticalParallaxLoop
   1837  f91d				   HasNoVerticalLine1
   1838  f91d		       a9 00		      LDA	#0
   1839  f91f		       99 d8 00 	      STA	ParallaxCache,Y
   1840  f922		       99 f0 00 	      STA	ParallaxCache2,Y
   1841  f925
   1842  f925				   CalculateVerticalParallax2
   1843  f925		       98		      TYA
   1844  f926		       18		      CLC
   1845  f927		       65 c9		      ADC	ParallaxOffset2 + 1
   1846  f929		       29 07		      AND	#%00000111
   1847  f92b		       d0 08		      BNE	HasNoVerticalLine2
   1848  f92d
   1849  f92d				   HasVerticalLine2
   1850  f92d		       a9 f0		      LDA	#%11110000
   1851  f92f		       99 d8 00 	      STA	ParallaxCache,Y
   1852  f932		       4c 3d f9 	      JMP	ContinueVerticalParallaxLoop
   1853  f935				   HasNoVerticalLine2
   1854  f935		       a9 00		      LDA	#0
   1855  f937		       99 d8 00 	      STA	ParallaxCache,Y
   1856  f93a		       99 f0 00 	      STA	ParallaxCache2,Y
   1857  f93d
   1858  f93d				   ContinueVerticalParallaxLoop
   1859  f93d		       88		      DEY
   1860  f93e		       10 ad		      BPL	VerticalParallaxLoop
   1861  f940		       60		      RTS
   1862  f941
   1863  f941				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1864  f941		       a9 48		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1865  f943		       85 d5		      STA	ScoreFontColor
   1866  f945		       a9 01		      LDA	#1
   1867  f947		       85 d6		      STA	ScoreFontColorHoldChange
   1868  f949
   1869  f949		       a5 8d		      LDA	FrameCount1
   1870  f94b		       29 07		      AND	#%00000111
   1871  f94d		       85 b3		      STA	Tmp3
   1872  f94f							;0 is Zelda Name, (default)
   1873  f94f		       a9 01		      LDA	#1
   1874  f951		       c5 b3		      CMP	Tmp3
   1875  f953		       f0 38		      BEQ	PrintZeldaDateLeft
   1876  f955
   1877  f955		       a9 02		      LDA	#2
   1878  f957		       c5 b3		      CMP	Tmp3
   1879  f959		       f0 23		      BEQ	PrintPolvinhosLeft
   1880  f95b
   1881  f95b		       a9 03		      LDA	#3
   1882  f95d		       c5 b3		      CMP	Tmp3
   1883  f95f		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1884  f961
   1885  f961		       a9 04		      LDA	#4
   1886  f963		       c5 b3		      CMP	Tmp3
   1887  f965		       f0 1c		      BEQ	PrintIvonneLeft
   1888  f967
   1889  f967		       a9 05		      LDA	#5
   1890  f969		       c5 b3		      CMP	Tmp3
   1891  f96b		       f0 2a		      BEQ	PrintIvonneDateLeft
   1892  f96d
   1893  f96d		       a9 06		      LDA	#6
   1894  f96f		       c5 b3		      CMP	Tmp3
   1895  f971		       f0 15		      BEQ	PrintArtLeft
   1896  f973
   1897  f973		       a9 07		      LDA	#7
   1898  f975		       c5 b3		      CMP	Tmp3
   1899  f977		       f0 23		      BEQ	PrintLeonardoLeft
   1900  f979
   1901  f979				   PrintZeldaLeft
   1902  f979		       a2 28		      LDX	#<ZeldaTextLeft
   1903  f97b		       4c a1 f9 	      JMP	ProcessPrintEasterEgg
   1904  f97e				   PrintPolvinhosLeft
   1905  f97e		       a2 3c		      LDX	#<PolvinhosTextLeft
   1906  f980		       4c a1 f9 	      JMP	ProcessPrintEasterEgg
   1907  f983				   PrintIvonneLeft
   1908  f983		       a2 50		      LDX	#<IvonneTextLeft
   1909  f985		       4c a1 f9 	      JMP	ProcessPrintEasterEgg
   1910  f988				   PrintArtLeft
   1911  f988		       a2 64		      LDX	#<PaperArtTextLeft
   1912  f98a		       4c a1 f9 	      JMP	ProcessPrintEasterEgg
   1913  f98d
   1914  f98d				   PrintZeldaDateLeft
   1915  f98d		       a2 32		      LDX	#<ZeldaDateLeft
   1916  f98f		       4c a1 f9 	      JMP	ProcessPrintEasterEgg
   1917  f992				   PrintPolvinhosDateLeft
   1918  f992		       a2 46		      LDX	#<PolvinhosDateLeft
   1919  f994		       4c a1 f9 	      JMP	ProcessPrintEasterEgg
   1920  f997				   PrintIvonneDateLeft
   1921  f997		       a2 5a		      LDX	#<IvonneDateLeft
   1922  f999		       4c a1 f9 	      JMP	ProcessPrintEasterEgg
   1923  f99c				   PrintLeonardoLeft
   1924  f99c		       a2 6e		      LDX	#<LeonardoTextLeft
   1925  f99e		       4c a1 f9 	      JMP	ProcessPrintEasterEgg
   1926  f9a1
   1927  f9a1				   ProcessPrintEasterEgg
   1928  f9a1		       a5 8c		      LDA	FrameCount0	;3
   1929  f9a3		       29 01		      AND	#%00000001	;2
   1930  f9a5		       d0 03		      BNE	TranformIntoRightText
   1931  f9a7		       4c af f9 	      JMP	PrintEasterEggText
   1932  f9aa				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1933  f9aa		       8a		      TXA
   1934  f9ab		       18		      CLC
   1935  f9ac		       69 05		      ADC	#HALF_TEXT_SIZE
   1936  f9ae		       aa		      TAX
   1937  f9af
   1938  f9af				   PrintEasterEggText
   1939  f9af		       20 17 f8 	      JSR	PrintStaticText
   1940  f9b2		       60		      RTS
   1941  f9b3
   1942  f9b3				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1943  f9b3		       a2 00		      LDX	#0
   1944  f9b5		       a0 04		      LDY	#FONT_OFFSET
   1945  f9b7
   1946  f9b7				   ScoreLoop		; 20 
   1947  f9b7		       85 02		      STA	WSYNC	;2
   1948  f9b9
   1949  f9b9		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1950  f9bb		       85 0d		      STA	PF0	;3
   1951  f9bd
   1952  f9bd		       a5 82		      LDA	PF1Cache	;3
   1953  f9bf		       85 0e		      STA	PF1	;3
   1954  f9c1
   1955  f9c1		       a5 83		      LDA	PF2Cache	;3
   1956  f9c3		       85 0f		      STA	PF2	;3
   1957  f9c5
   1958  f9c5				   DrawScoreD0		; 15
   1959  f9c5		       a6 d0		      LDX	ScoreD0	; 3
   1960  f9c7		       bd 00 fd 	      LDA	Font,X	;4
   1961  f9ca		       85 81		      STA	PF0Cache	;3
   1962  f9cc		       c6 d0		      DEC	ScoreD0	;5
   1963  f9ce
   1964  f9ce				   DrawScoreD1		; 23	
   1965  f9ce		       a6 d1		      LDX	ScoreD1	; 3
   1966  f9d0		       bd 00 fd 	      LDA	Font,X	;4
   1967  f9d3		       0a		      ASL		;2
   1968  f9d4		       0a		      ASL		;2
   1969  f9d5		       0a		      ASL		;2
   1970  f9d6		       0a		      ASL		;2
   1971  f9d7		       85 82		      STA	PF1Cache	;3
   1972  f9d9		       c6 d1		      DEC	ScoreD1	;5
   1973  f9db
   1974  f9db				   DrawScoreD2		; 20
   1975  f9db		       a6 d2		      LDX	ScoreD2	; 3
   1976  f9dd		       bd 00 fd 	      LDA	Font,X	;4
   1977  f9e0		       29 0f		      AND	#%00001111	;2
   1978  f9e2		       05 82		      ORA	PF1Cache	;3
   1979  f9e4		       85 82		      STA	PF1Cache	;3
   1980  f9e6		       c6 d2		      DEC	ScoreD2	;5
   1981  f9e8
   1982  f9e8				   DrawScoreD3		; 23
   1983  f9e8		       a6 d3		      LDX	ScoreD3	; 3
   1984  f9ea		       bd 00 fd 	      LDA	Font,X	;4
   1985  f9ed		       4a		      LSR		;2
   1986  f9ee		       4a		      LSR		;2
   1987  f9ef		       4a		      LSR		;2
   1988  f9f0		       4a		      LSR		;2
   1989  f9f1		       85 83		      STA	PF2Cache	;3
   1990  f9f3		       c6 d3		      DEC	ScoreD3	;5
   1991  f9f5
   1992  f9f5				   DrawScoreD4		; 20
   1993  f9f5		       a6 d4		      LDX	ScoreD4	; 3
   1994  f9f7		       bd 00 fd 	      LDA	Font,X	;4
   1995  f9fa		       29 f0		      AND	#%11110000	;2
   1996  f9fc		       05 83		      ORA	PF2Cache	;3
   1997  f9fe		       85 83		      STA	PF2Cache	;3
   1998  fa00		       c6 d4		      DEC	ScoreD4	;5
   1999  fa02
   2000  fa02
   2001  fa02		       88		      DEY		;2
   2002  fa03		       10 b2		      BPL	ScoreLoop	;4
   2003  fa05
   2004  fa05		       85 02		      STA	WSYNC
   2005  fa07		       20 ad f7 	      JSR	LoadAll
   2006  fa0a		       60		      RTS		; 6
   2007  fa0b
   2008  fa0b				   PrintRightDecimalDigits
   2009  fa0b		       b9 00 00 	      LDA	0,Y
   2010  fa0e		       4a		      LSR
   2011  fa0f		       4a		      LSR
   2012  fa10		       4a		      LSR
   2013  fa11		       4a		      LSR
   2014  fa12		       aa		      TAX
   2015  fa13		       bd be fd 	      LDA	FontLookup,X	;4
   2016  fa16		       85 d2		      STA	ScoreD2	;3
   2017  fa18
   2018  fa18		       b9 00 00 	      LDA	0,Y
   2019  fa1b		       29 0f		      AND	#%00001111
   2020  fa1d		       aa		      TAX
   2021  fa1e		       bd be fd 	      LDA	FontLookup,X	;4
   2022  fa21		       85 d3		      STA	ScoreD3	;3
   2023  fa23
   2024  fa23		       c8		      INY
   2025  fa24		       b9 00 00 	      LDA	0,Y
   2026  fa27		       4a		      LSR
   2027  fa28		       4a		      LSR
   2028  fa29		       4a		      LSR
   2029  fa2a		       4a		      LSR
   2030  fa2b		       aa		      TAX
   2031  fa2c		       bd be fd 	      LDA	FontLookup,X	;4
   2032  fa2f		       85 d0		      STA	ScoreD0	;3
   2033  fa31
   2034  fa31		       b9 00 00 	      LDA	0,Y
   2035  fa34		       29 0f		      AND	#%00001111
   2036  fa36		       aa		      TAX
   2037  fa37		       bd be fd 	      LDA	FontLookup,X	;4
   2038  fa3a		       85 d1		      STA	ScoreD1	;3
   2039  fa3c
   2040  fa3c		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   2041  fa3e		       85 d4		      STA	ScoreD4
   2042  fa40		       60		      RTS
   2043  fa41
   2044  fa41				   PrintLastLeftDecimalDigits
   2045  fa41		       b9 00 00 	      LDA	0,Y
   2046  fa44		       4a		      LSR
   2047  fa45		       4a		      LSR
   2048  fa46		       4a		      LSR
   2049  fa47		       4a		      LSR
   2050  fa48		       aa		      TAX
   2051  fa49		       bd be fd 	      LDA	FontLookup,X	;4
   2052  fa4c		       85 d3		      STA	ScoreD3	;3
   2053  fa4e		       b9 00 00 	      LDA	0,Y
   2054  fa51		       29 0f		      AND	#%00001111
   2055  fa53		       aa		      TAX
   2056  fa54		       bd be fd 	      LDA	FontLookup,X	;4
   2057  fa57		       85 d4		      STA	ScoreD4	;3
   2058  fa59		       60		      RTS
   2059  fa5a
   2060  fa5a				   PrintZerosLeft
   2061  fa5a		       a9 04		      LDA	#<C0 + FONT_OFFSET
   2062  fa5c		       85 d2		      STA	ScoreD2
   2063  fa5e		       85 d3		      STA	ScoreD3
   2064  fa60		       85 d4		      STA	ScoreD4
   2065  fa62		       60		      RTS
   2066  fa63
   2067  fa63				   DrawGameOverScoreLine
   2068  fa63		       85 02		      STA	WSYNC
   2069  fa65		       20 b3 f9 	      JSR	PrintScore
   2070  fa68		       85 02		      STA	WSYNC
   2071  fa6a		       85 02		      STA	WSYNC
   2072  fa6c		       20 9e f7 	      JSR	ClearPF
   2073  fa6f		       60		      RTS
   2074  fa70
   2075  fa70				   DrawGameOverScreenLeft
   2076  fa70		       85 02		      STA	WSYNC
   2077  fa72		       20 9e f7 	      JSR	ClearPF
   2078  fa75
   2079  fa75				   DrawBcdScoreLeft
   2080  fa75		       20 c4 fb 	      JSR	Sleep8Lines
   2081  fa78		       a9 29		      LDA	#SCORE_FONT_COLOR
   2082  fa7a		       85 06		      STA	COLUP0
   2083  fa7c		       85 02		      STA	WSYNC
   2084  fa7e		       a9 86		      LDA	#<CS + #FONT_OFFSET
   2085  fa80		       85 d0		      STA	ScoreD0
   2086  fa82
   2087  fa82		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2088  fa84		       85 d1		      STA	ScoreD1
   2089  fa86
   2090  fa86		       a5 b7		      LDA	ScoreBcd3
   2091  fa88		       29 0f		      AND	#%00001111
   2092  fa8a		       aa		      TAX
   2093  fa8b		       bd be fd 	      LDA	FontLookup,X	;4
   2094  fa8e		       85 d2		      STA	ScoreD2	;3
   2095  fa90
   2096  fa90		       a0 b6		      LDY	#ScoreBcd2
   2097  fa92		       20 41 fa 	      JSR	PrintLastLeftDecimalDigits
   2098  fa95
   2099  fa95		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2100  fa98
   2101  fa98				   DrawTimerLeft
   2102  fa98		       20 c4 fb 	      JSR	Sleep8Lines
   2103  fa9b		       a9 48		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2104  fa9d		       85 06		      STA	COLUP0
   2105  fa9f		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   2106  faa1		       85 d0		      STA	ScoreD0
   2107  faa3		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2108  faa5		       85 d1		      STA	ScoreD1
   2109  faa7		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   2110  faa9		       85 d2		      STA	ScoreD2
   2111  faab		       a0 bf		      LDY	#TimeBcd2
   2112  faad		       85 02		      STA	WSYNC
   2113  faaf		       20 41 fa 	      JSR	PrintLastLeftDecimalDigits
   2114  fab2		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2115  fab5
   2116  fab5				   DrawGlideTimerLeft
   2117  fab5		       20 c4 fb 	      JSR	Sleep8Lines
   2118  fab8		       a9 64		      LDA	#SCORE_FONT_COLOR_BAD
   2119  faba		       85 06		      STA	COLUP0
   2120  fabc		       85 02		      STA	WSYNC
   2121  fabe		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2122  fac0		       85 d0		      STA	ScoreD0
   2123  fac2		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2124  fac4		       85 d1		      STA	ScoreD1
   2125  fac6		       20 5a fa 	      JSR	PrintZerosLeft
   2126  fac9		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2127  facc
   2128  facc				   DrawHitCountLeft
   2129  facc		       20 c4 fb 	      JSR	Sleep8Lines
   2130  facf		       a9 c9		      LDA	#TRAFFIC_COLOR_INTENSE
   2131  fad1		       85 06		      STA	COLUP0
   2132  fad3		       85 02		      STA	WSYNC
   2133  fad5		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2134  fad7		       85 d0		      STA	ScoreD0
   2135  fad9		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2136  fadb		       85 d1		      STA	ScoreD1
   2137  fadd		       20 5a fa 	      JSR	PrintZerosLeft
   2138  fae0		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2139  fae3
   2140  fae3				   DrawCheckpointCountLeft
   2141  fae3		       20 c4 fb 	      JSR	Sleep8Lines
   2142  fae6		       a9 38		      LDA	#SCORE_FONT_COLOR_GOOD
   2143  fae8		       85 06		      STA	COLUP0
   2144  faea		       85 02		      STA	WSYNC
   2145  faec		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2146  faee		       85 d0		      STA	ScoreD0
   2147  faf0		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2148  faf2		       85 d1		      STA	ScoreD1
   2149  faf4		       20 5a fa 	      JSR	PrintZerosLeft
   2150  faf7		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2151  fafa
   2152  fafa				   DrawGameVersionLeft
   2153  fafa		       20 c4 fb 	      JSR	Sleep8Lines
   2154  fafd		       a9 69		      LDA	#VERSION_COLOR
   2155  faff		       85 06		      STA	COLUP0
   2156  fb01
   2157  fb01		       a5 c5		      LDA	GameMode
   2158  fb03		       aa		      TAX
   2159  fb04		       bd be fd 	      LDA	FontLookup,X	;4
   2160  fb07		       85 d0		      STA	ScoreD0	;3
   2161  fb09
   2162  fb09		       a5 a9		      LDA	CurrentCarId
   2163  fb0b		       aa		      TAX
   2164  fb0c		       bd be fd 	      LDA	FontLookup,X	;4
   2165  fb0f		       85 d1		      STA	ScoreD1	;3
   2166  fb11
   2167  fb11		       a5 a6		      LDA	StartSWCHB
   2168  fb13		       29 40		      AND	#%01000000	; P0 difficulty
   2169  fb15		       49 40		      EOR	#%01000000	; Reverse bytes
   2170  fb17		       2a		      ROL
   2171  fb18		       2a		      ROL
   2172  fb19		       2a		      ROL
   2173  fb1a		       18		      CLC
   2174  fb1b		       69 0a		      ADC	#10
   2175  fb1d		       aa		      TAX
   2176  fb1e		       bd be fd 	      LDA	FontLookup,X	;4
   2177  fb21		       85 d2		      STA	ScoreD2	;3
   2178  fb23
   2179  fb23		       a5 a6		      LDA	StartSWCHB
   2180  fb25		       29 80		      AND	#%10000000	; P0 difficulty
   2181  fb27		       49 80		      EOR	#%10000000	; Reverse bytes
   2182  fb29		       2a		      ROL
   2183  fb2a		       2a		      ROL
   2184  fb2b		       18		      CLC
   2185  fb2c		       69 0a		      ADC	#10
   2186  fb2e		       aa		      TAX
   2187  fb2f		       bd be fd 	      LDA	FontLookup,X	;4
   2188  fb32		       85 d3		      STA	ScoreD3	;3
   2189  fb34
   2190  fb34		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2191  fb36		       85 d4		      STA	ScoreD4
   2192  fb38
   2193  fb38		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2194  fb3b
   2195  fb3b		       4c a1 fb 	      JMP	FinalizeDrawGameOver
   2196  fb3e
   2197  fb3e				   DrawGameOverScreenRight
   2198  fb3e		       85 02		      STA	WSYNC
   2199  fb40		       20 9e f7 	      JSR	ClearPF
   2200  fb43
   2201  fb43				   DrawBcdScoreRight
   2202  fb43		       20 c4 fb 	      JSR	Sleep8Lines
   2203  fb46		       a9 29		      LDA	#SCORE_FONT_COLOR
   2204  fb48		       85 07		      STA	COLUP1
   2205  fb4a		       85 02		      STA	WSYNC
   2206  fb4c		       a0 b4		      LDY	#ScoreBcd0
   2207  fb4e		       20 0b fa 	      JSR	PrintRightDecimalDigits
   2208  fb51
   2209  fb51		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2210  fb54
   2211  fb54				   DrawTimerRight
   2212  fb54		       20 c4 fb 	      JSR	Sleep8Lines
   2213  fb57		       a9 48		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2214  fb59		       85 07		      STA	COLUP1
   2215  fb5b		       a0 bd		      LDY	#TimeBcd0
   2216  fb5d		       20 0b fa 	      JSR	PrintRightDecimalDigits
   2217  fb60
   2218  fb60		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2219  fb63				   DrawGlideTimeRight
   2220  fb63		       20 c4 fb 	      JSR	Sleep8Lines
   2221  fb66		       a9 64		      LDA	#SCORE_FONT_COLOR_BAD
   2222  fb68		       85 07		      STA	COLUP1
   2223  fb6a		       a0 cd		      LDY	#GlideTimeBcd0
   2224  fb6c		       20 0b fa 	      JSR	PrintRightDecimalDigits
   2225  fb6f		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2226  fb72
   2227  fb72				   DrawHitCountRight
   2228  fb72		       20 c4 fb 	      JSR	Sleep8Lines
   2229  fb75		       a9 c9		      LDA	#TRAFFIC_COLOR_INTENSE
   2230  fb77		       85 07		      STA	COLUP1
   2231  fb79		       a0 cb		      LDY	#HitCountBcd0
   2232  fb7b		       20 0b fa 	      JSR	PrintRightDecimalDigits
   2233  fb7e		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2234  fb81
   2235  fb81				   DrawCheckpointCountRight
   2236  fb81		       20 c4 fb 	      JSR	Sleep8Lines
   2237  fb84		       a9 38		      LDA	#SCORE_FONT_COLOR_GOOD
   2238  fb86		       85 07		      STA	COLUP1
   2239  fb88		       a0 a4		      LDY	#CheckpointBcd0
   2240  fb8a		       20 0b fa 	      JSR	PrintRightDecimalDigits
   2241  fb8d		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2242  fb90
   2243  fb90				   DrawVersionRight
   2244  fb90		       20 c4 fb 	      JSR	Sleep8Lines
   2245  fb93		       a9 69		      LDA	#VERSION_COLOR
   2246  fb95		       85 07		      STA	COLUP1
   2247  fb97		       85 02		      STA	WSYNC
   2248  fb99		       a2 78		      LDX	#<VersionText
   2249  fb9b		       20 17 f8 	      JSR	PrintStaticText
   2250  fb9e		       20 63 fa 	      JSR	DrawGameOverScoreLine
   2251  fba1
   2252  fba1				   FinalizeDrawGameOver
   2253  fba1		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2254  fba3		       85 d5		      STA	ScoreFontColor
   2255  fba5		       20 bb fb 	      JSR	Sleep4Lines
   2256  fba8		       20 cb fb 	      JSR	Sleep32Lines
   2257  fbab		       20 cb fb 	      JSR	Sleep32Lines
   2258  fbae		       4c 69 f6 	      JMP	PrepareOverscan
   2259  fbb1
   2260  fbb1				   WaitForVblankEnd
   2261  fbb1		       ad 84 02 	      LDA	INTIM
   2262  fbb4		       d0 fb		      BNE	WaitForVblankEnd
   2263  fbb6		       85 02		      STA	WSYNC
   2264  fbb8		       85 01		      STA	VBLANK
   2265  fbba		       60		      RTS
   2266  fbbb
   2267  fbbb				   Sleep4Lines
   2268  fbbb		       85 02		      STA	WSYNC
   2269  fbbd		       85 02		      STA	WSYNC
   2270  fbbf		       85 02		      STA	WSYNC
   2271  fbc1		       85 02		      STA	WSYNC
   2272  fbc3		       60		      RTS
   2273  fbc4
   2274  fbc4				   Sleep8Lines
   2275  fbc4		       20 bb fb 	      JSR	Sleep4Lines
   2276  fbc7		       20 bb fb 	      JSR	Sleep4Lines
   2277  fbca		       60		      RTS
   2278  fbcb
   2279  fbcb				   Sleep32Lines
   2280  fbcb		       20 c4 fb 	      JSR	Sleep8Lines
   2281  fbce		       20 c4 fb 	      JSR	Sleep8Lines
   2282  fbd1		       20 c4 fb 	      JSR	Sleep8Lines
   2283  fbd4		       20 c4 fb 	      JSR	Sleep8Lines
   2284  fbd7		       60		      RTS
   2285  fbd8
   2286  fbd8							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2287  fc00					      org	$FC00
   2288  fc00				   QrCode1
   2289  fc00		       1f		      .byte.b	#%00011111
   2290  fc01		       10		      .byte.b	#%00010000
   2291  fc02		       17		      .byte.b	#%00010111
   2292  fc03		       17		      .byte.b	#%00010111
   2293  fc04		       17		      .byte.b	#%00010111
   2294  fc05		       10		      .byte.b	#%00010000
   2295  fc06		       1f		      .byte.b	#%00011111
   2296  fc07		       00		      .byte.b	#%00000000
   2297  fc08		       17		      .byte.b	#%00010111
   2298  fc09		       10		      .byte.b	#%00010000
   2299  fc0a		       1d		      .byte.b	#%00011101
   2300  fc0b		       16		      .byte.b	#%00010110
   2301  fc0c		       03		      .byte.b	#%00000011
   2302  fc0d		       19		      .byte.b	#%00011001
   2303  fc0e		       13		      .byte.b	#%00010011
   2304  fc0f		       1c		      .byte.b	#%00011100
   2305  fc10		       0b		      .byte.b	#%00001011
   2306  fc11		       00		      .byte.b	#%00000000
   2307  fc12		       1f		      .byte.b	#%00011111
   2308  fc13		       10		      .byte.b	#%00010000
   2309  fc14		       17		      .byte.b	#%00010111
   2310  fc15		       17		      .byte.b	#%00010111
   2311  fc16		       17		      .byte.b	#%00010111
   2312  fc17		       10		      .byte.b	#%00010000
   2313  fc18		       1f		      .byte.b	#%00011111
   2314  fc19
   2315  fc19				   QrCode2
   2316  fc19		       c3		      .byte.b	#%11000011
   2317  fc1a		       9a		      .byte.b	#%10011010
   2318  fc1b		       82		      .byte.b	#%10000010
   2319  fc1c		       da		      .byte.b	#%11011010
   2320  fc1d		       aa		      .byte.b	#%10101010
   2321  fc1e		       ca		      .byte.b	#%11001010
   2322  fc1f		       f3		      .byte.b	#%11110011
   2323  fc20		       78		      .byte.b	#%01111000
   2324  fc21		       df		      .byte.b	#%11011111
   2325  fc22		       fc		      .byte.b	#%11111100
   2326  fc23		       c7		      .byte.b	#%11000111
   2327  fc24		       98		      .byte.b	#%10011000
   2328  fc25		       23		      .byte.b	#%00100011
   2329  fc26		       b9		      .byte.b	#%10111001
   2330  fc27		       d2		      .byte.b	#%11010010
   2331  fc28		       30		      .byte.b	#%00110000
   2332  fc29		       eb		      .byte.b	#%11101011
   2333  fc2a		       28		      .byte.b	#%00101000
   2334  fc2b		       ab		      .byte.b	#%10101011
   2335  fc2c		       72		      .byte.b	#%01110010
   2336  fc2d		       fa		      .byte.b	#%11111010
   2337  fc2e		       7a		      .byte.b	#%01111010
   2338  fc2f		       32		      .byte.b	#%00110010
   2339  fc30		       3a		      .byte.b	#%00111010
   2340  fc31		       63		      .byte.b	#%01100011
   2341  fc32
   2342  fc32				   QrCode3
   2343  fc32		       98		      .byte.b	#%10011000
   2344  fc33		       c3		      .byte.b	#%11000011
   2345  fc34		       39		      .byte.b	#%00111001
   2346  fc35		       34		      .byte.b	#%00110100
   2347  fc36		       ff		      .byte.b	#%11111111
   2348  fc37		       71		      .byte.b	#%01110001
   2349  fc38		       d5		      .byte.b	#%11010101
   2350  fc39		       d1		      .byte.b	#%11010001
   2351  fc3a		       5f		      .byte.b	#%01011111
   2352  fc3b		       26		      .byte.b	#%00100110
   2353  fc3c		       2d		      .byte.b	#%00101101
   2354  fc3d		       e9		      .byte.b	#%11101001
   2355  fc3e		       d6		      .byte.b	#%11010110
   2356  fc3f		       26		      .byte.b	#%00100110
   2357  fc40		       ba		      .byte.b	#%10111010
   2358  fc41		       03		      .byte.b	#%00000011
   2359  fc42		       dd		      .byte.b	#%11011101
   2360  fc43		       e0		      .byte.b	#%11100000
   2361  fc44		       57		      .byte.b	#%01010111
   2362  fc45		       14		      .byte.b	#%00010100
   2363  fc46		       35		      .byte.b	#%00110101
   2364  fc47		       e5		      .byte.b	#%11100101
   2365  fc48		       b5		      .byte.b	#%10110101
   2366  fc49		       d4		      .byte.b	#%11010100
   2367  fc4a		       97		      .byte.b	#%10010111
   2368  fc4b
   2369  fc4b				   QrCode4
   2370  fc4b		       09		      .byte.b	#%00001001
   2371  fc4c		       0e		      .byte.b	#%00001110
   2372  fc4d		       0f		      .byte.b	#%00001111
   2373  fc4e		       0c		      .byte.b	#%00001100
   2374  fc4f		       0c		      .byte.b	#%00001100
   2375  fc50		       08		      .byte.b	#%00001000
   2376  fc51		       08		      .byte.b	#%00001000
   2377  fc52		       06		      .byte.b	#%00000110
   2378  fc53		       06		      .byte.b	#%00000110
   2379  fc54		       0b		      .byte.b	#%00001011
   2380  fc55		       0f		      .byte.b	#%00001111
   2381  fc56		       04		      .byte.b	#%00000100
   2382  fc57		       08		      .byte.b	#%00001000
   2383  fc58		       0f		      .byte.b	#%00001111
   2384  fc59		       09		      .byte.b	#%00001001
   2385  fc5a		       07		      .byte.b	#%00000111
   2386  fc5b		       05		      .byte.b	#%00000101
   2387  fc5c		       00		      .byte.b	#%00000000
   2388  fc5d		       0f		      .byte.b	#%00001111
   2389  fc5e		       08		      .byte.b	#%00001000
   2390  fc5f		       0b		      .byte.b	#%00001011
   2391  fc60		       0b		      .byte.b	#%00001011
   2392  fc61		       0b		      .byte.b	#%00001011
   2393  fc62		       08		      .byte.b	#%00001000
   2394  fc63		       0f		      .byte.b	#%00001111
   2395  fc64
   2396  fc64							; Moved here because of rom space.
   2397  fc64							; The only SBR in constants space
   2398  fc64				   DrawQrCode
   2399  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2400  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2401  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2402  fc6a		       85 0a		      STA	CTRLPF
   2403  fc6c		       20 8c f7 	      JSR	ClearAll	; To be 100 sure!
   2404  fc6f		       ad 82 02 	      LDA	SWCHB
   2405  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2406  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2407  fc76		       86 09		      STX	COLUBK
   2408  fc78		       84 08		      STY	COLUPF
   2409  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2410  fc7d				   StoreReversedQrCode
   2411  fc7d		       86 08		      STX	COLUPF
   2412  fc7f		       84 09		      STY	COLUBK
   2413  fc81
   2414  fc81				   ContinueQrCode
   2415  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2416  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2417  fc85		       20 b1 fb 	      JSR	WaitForVblankEnd
   2418  fc88		       20 c4 fb 	      JSR	Sleep8Lines
   2419  fc8b		       20 c4 fb 	      JSR	Sleep8Lines
   2420  fc8e		       20 c4 fb 	      JSR	Sleep8Lines
   2421  fc91
   2422  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2423  fc91		       85 02		      STA	WSYNC
   2424  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2425  fc96		       85 0e		      STA	PF1	;3
   2426  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2427  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d		       04 00		      nop	0
     11  fc9f				  -	      ELSE
     12  fc9f				  -	      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2429  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2430  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2431  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2432  fcb3		       85 0e		      STA	PF1	;3
   2433  fcb5
   2434  fcb5		       ca		      DEX		;2
   2435  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2436  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2437  fcba		       88		      DEY		;2
   2438  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2439  fcbd
   2440  fcbd				   EndQrCodeLoop
   2441  fcbd		       85 02		      STA	WSYNC	;
   2442  fcbf		       a9 00		      LDA	#0
   2443  fcc1		       85 0e		      STA	PF1	;3
   2444  fcc3		       85 0f		      STA	PF2	;3
   2445  fcc5
   2446  fcc5		       20 cb fb 	      JSR	Sleep32Lines
   2447  fcc8		       4c 69 f6 	      JMP	PrepareOverscan
   2448  fccb					      IF	PLUSROM
   2449  fccb				   PlusROM_API
   2450  fccb		       61 00 68 2e*	      .byte.b	"a", 0, "h.firmaplus.de", 0
   2451  fcdc				   SendPlusROMScore
   2452  fcdc		       a5 c5		      LDA	GameMode
   2453  fcde		       8d f0 1f 	      STA	WriteToBuffer
   2454  fce1		       a5 a6		      LDA	StartSWCHB
   2455  fce3		       8d f0 1f 	      STA	WriteToBuffer
   2456  fce6		       a5 b7		      LDA	ScoreBcd3
   2457  fce8		       8d f0 1f 	      STA	WriteToBuffer
   2458  fceb		       a5 b6		      LDA	ScoreBcd2
   2459  fced		       8d f0 1f 	      STA	WriteToBuffer
   2460  fcf0		       a5 b5		      LDA	ScoreBcd1
   2461  fcf2		       8d f0 1f 	      STA	WriteToBuffer
   2462  fcf5		       a5 b4		      LDA	ScoreBcd0
   2463  fcf7		       8d f0 1f 	      STA	WriteToBuffer
   2464  fcfa		       a9 23		      LDA	#HIGHSCORE_ID
   2465  fcfc		       8d f1 1f 	      STA	WriteSendBuffer
   2466  fcff		       60		      RTS
   2467  fd00					      ENDIF
   2468  fd00
   2469  fd00					      org	$FD00
   2470  fd00				   Font
   2471  fd00				   C0
   2472  fd00		       e7		      .byte.b	#%11100111	;
   2473  fd01		       a5		      .byte.b	#%10100101	; 
   2474  fd02		       a5		      .byte.b	#%10100101	; 
   2475  fd03		       a5		      .byte.b	#%10100101	; 
   2476  fd04		       e7		      .byte.b	#%11100111	;	
   2477  fd05				   C1
   2478  fd05		       e7		      .byte.b	#%11100111	;
   2479  fd06		       42		      .byte.b	#%01000010	; 
   2480  fd07		       42		      .byte.b	#%01000010	; 
   2481  fd08		       42		      .byte.b	#%01000010	; 
   2482  fd09		       66		      .byte.b	#%01100110	;
   2483  fd0a				   C2
   2484  fd0a		       e7		      .byte.b	#%11100111	;
   2485  fd0b		       24		      .byte.b	#%00100100	; 
   2486  fd0c		       e7		      .byte.b	#%11100111	; 
   2487  fd0d		       81		      .byte.b	#%10000001	; 
   2488  fd0e		       e7		      .byte.b	#%11100111	;
   2489  fd0f				   C3
   2490  fd0f		       e7		      .byte.b	#%11100111	;
   2491  fd10		       81		      .byte.b	#%10000001	; 
   2492  fd11		       e7		      .byte.b	#%11100111	; 
   2493  fd12		       81		      .byte.b	#%10000001	; 
   2494  fd13		       e7		      .byte.b	#%11100111	;
   2495  fd14				   C4
   2496  fd14		       81		      .byte.b	#%10000001	;
   2497  fd15		       81		      .byte.b	#%10000001	; 
   2498  fd16		       e7		      .byte.b	#%11100111	; 
   2499  fd17		       a5		      .byte.b	#%10100101	; 
   2500  fd18		       a5		      .byte.b	#%10100101	;
   2501  fd19				   C5
   2502  fd19		       e7		      .byte.b	#%11100111	;
   2503  fd1a		       81		      .byte.b	#%10000001	; 
   2504  fd1b		       e7		      .byte.b	#%11100111	; 
   2505  fd1c		       24		      .byte.b	#%00100100	; 
   2506  fd1d		       e7		      .byte.b	#%11100111	;
   2507  fd1e				   C6
   2508  fd1e		       e7		      .byte.b	#%11100111	;
   2509  fd1f		       a5		      .byte.b	#%10100101	; 
   2510  fd20		       e7		      .byte.b	#%11100111	; 
   2511  fd21		       24		      .byte.b	#%00100100	; 
   2512  fd22		       e7		      .byte.b	#%11100111	;
   2513  fd23				   C7
   2514  fd23		       81		      .byte.b	#%10000001	;
   2515  fd24		       81		      .byte.b	#%10000001	; 
   2516  fd25		       81		      .byte.b	#%10000001	; 
   2517  fd26		       81		      .byte.b	#%10000001	; 
   2518  fd27		       e7		      .byte.b	#%11100111	;
   2519  fd28				   C8
   2520  fd28		       e7		      .byte.b	#%11100111	;
   2521  fd29		       a5		      .byte.b	#%10100101	; 
   2522  fd2a		       e7		      .byte.b	#%11100111	; 
   2523  fd2b		       a5		      .byte.b	#%10100101	; 
   2524  fd2c		       e7		      .byte.b	#%11100111	;
   2525  fd2d				   C9
   2526  fd2d		       e7		      .byte.b	#%11100111	;
   2527  fd2e		       81		      .byte.b	#%10000001	; 
   2528  fd2f		       e7		      .byte.b	#%11100111	; 
   2529  fd30		       a5		      .byte.b	#%10100101	; 
   2530  fd31		       e7		      .byte.b	#%11100111	;
   2531  fd32				   CA
   2532  fd32		       a5		      .byte.b	#%10100101	;
   2533  fd33		       a5		      .byte.b	#%10100101	; 
   2534  fd34		       e7		      .byte.b	#%11100111	; 
   2535  fd35		       a5		      .byte.b	#%10100101	; 
   2536  fd36		       e7		      .byte.b	#%11100111	;
   2537  fd37				   CB
   2538  fd37		       66		      .byte.b	#%01100110	;
   2539  fd38		       a5		      .byte.b	#%10100101	; 
   2540  fd39		       66		      .byte.b	#%01100110	; 
   2541  fd3a		       a5		      .byte.b	#%10100101	;
   2542  fd3b		       66		      .byte.b	#%01100110	;
   2543  fd3c				   CC
   2544  fd3c		       e7		      .byte.b	#%11100111	;
   2545  fd3d		       24		      .byte.b	#%00100100	; 
   2546  fd3e		       24		      .byte.b	#%00100100	; 
   2547  fd3f		       24		      .byte.b	#%00100100	;
   2548  fd40		       e7		      .byte.b	#%11100111	;
   2549  fd41
   2550  fd41				   CD
   2551  fd41		       66		      .byte.b	#%01100110	;
   2552  fd42		       a5		      .byte.b	#%10100101	; 
   2553  fd43		       a5		      .byte.b	#%10100101	; 
   2554  fd44		       a5		      .byte.b	#%10100101	;
   2555  fd45		       66		      .byte.b	#%01100110	;
   2556  fd46
   2557  fd46				   CE
   2558  fd46		       e7		      .byte.b	#%11100111	;
   2559  fd47		       24		      .byte.b	#%00100100	; 
   2560  fd48		       e7		      .byte.b	#%11100111	; 
   2561  fd49		       24		      .byte.b	#%00100100	; 
   2562  fd4a		       e7		      .byte.b	#%11100111	;
   2563  fd4b
   2564  fd4b				   CF
   2565  fd4b		       24		      .byte.b	#%00100100	;
   2566  fd4c		       24		      .byte.b	#%00100100	; 
   2567  fd4d		       e7		      .byte.b	#%11100111	; 
   2568  fd4e		       24		      .byte.b	#%00100100	; 
   2569  fd4f		       e7		      .byte.b	#%11100111	;
   2570  fd50
   2571  fd50				   CG
   2572  fd50		       c3		      .byte.b	#%11000011	;
   2573  fd51		       a5		      .byte.b	#%10100101	; 
   2574  fd52		       a5		      .byte.b	#%10100101	; 
   2575  fd53		       24		      .byte.b	#%00100100	; 
   2576  fd54		       c3		      .byte.b	#%11000011	;	
   2577  fd55
   2578  fd55				   CH
   2579  fd55		       a5		      .byte.b	#%10100101	;
   2580  fd56		       a5		      .byte.b	#%10100101	; 
   2581  fd57		       e7		      .byte.b	#%11100111	; 
   2582  fd58		       a5		      .byte.b	#%10100101	; 
   2583  fd59		       a5		      .byte.b	#%10100101	;
   2584  fd5a
   2585  fd5a				   CK
   2586  fd5a		       a5		      .byte.b	#%10100101	;
   2587  fd5b		       a5		      .byte.b	#%10100101	; 
   2588  fd5c		       66		      .byte.b	#%01100110	; 
   2589  fd5d		       a5		      .byte.b	#%10100101	; 
   2590  fd5e		       a5		      .byte.b	#%10100101	;
   2591  fd5f
   2592  fd5f				   CL
   2593  fd5f		       e7		      .byte.b	#%11100111	;
   2594  fd60		       24		      .byte.b	#%00100100	; 
   2595  fd61		       24		      .byte.b	#%00100100	; 
   2596  fd62		       24		      .byte.b	#%00100100	; 
   2597  fd63		       24		      .byte.b	#%00100100	;
   2598  fd64
   2599  fd64				   CI
   2600  fd64		       42		      .byte.b	#%01000010	;
   2601  fd65		       42		      .byte.b	#%01000010	; 
   2602  fd66		       42		      .byte.b	#%01000010	; 
   2603  fd67		       42		      .byte.b	#%01000010	; 
   2604  fd68		       42		      .byte.b	#%01000010	;
   2605  fd69
   2606  fd69				   CM
   2607  fd69		       a5		      .byte.b	#%10100101	;
   2608  fd6a		       a5		      .byte.b	#%10100101	; 
   2609  fd6b		       a5		      .byte.b	#%10100101	; 
   2610  fd6c		       e7		      .byte.b	#%11100111	; 
   2611  fd6d		       a5		      .byte.b	#%10100101	;
   2612  fd6e
   2613  fd6e				   CN
   2614  fd6e		       a5		      .byte.b	#%10100101	;
   2615  fd6f		       a5		      .byte.b	#%10100101	; 
   2616  fd70		       a5		      .byte.b	#%10100101	; 
   2617  fd71		       a5		      .byte.b	#%10100101	; 
   2618  fd72		       66		      .byte.b	#%01100110	;	
   2619  fd73
   2620  fd73
   2621  fd73				   CO
   2622  fd73		       42		      .byte.b	#%01000010	;
   2623  fd74		       a5		      .byte.b	#%10100101	; 
   2624  fd75		       a5		      .byte.b	#%10100101	; 
   2625  fd76		       a5		      .byte.b	#%10100101	; 
   2626  fd77		       42		      .byte.b	#%01000010	;	
   2627  fd78
   2628  fd78				   CP
   2629  fd78		       24		      .byte.b	#%00100100	;
   2630  fd79		       24		      .byte.b	#%00100100	; 
   2631  fd7a		       e7		      .byte.b	#%11100111	; 
   2632  fd7b		       a5		      .byte.b	#%10100101	; 
   2633  fd7c		       e7		      .byte.b	#%11100111	;
   2634  fd7d
   2635  fd7d				   CR
   2636  fd7d		       a5		      .byte.b	#%10100101	;
   2637  fd7e		       a5		      .byte.b	#%10100101	; 
   2638  fd7f		       66		      .byte.b	#%01100110	; 
   2639  fd80		       a5		      .byte.b	#%10100101	; 
   2640  fd81		       66		      .byte.b	#%01100110	;
   2641  fd82
   2642  fd82				   CS
   2643  fd82		       66		      .byte.b	#%01100110	;
   2644  fd83		       81		      .byte.b	#%10000001	; 
   2645  fd84		       42		      .byte.b	#%01000010	; 
   2646  fd85		       24		      .byte.b	#%00100100	; 
   2647  fd86		       c3		      .byte.b	#%11000011	;
   2648  fd87
   2649  fd87				   CT
   2650  fd87		       42		      .byte.b	#%01000010	;
   2651  fd88		       42		      .byte.b	#%01000010	; 
   2652  fd89		       42		      .byte.b	#%01000010	; 
   2653  fd8a		       42		      .byte.b	#%01000010	; 
   2654  fd8b		       e7		      .byte.b	#%11100111	;
   2655  fd8c
   2656  fd8c				   CV
   2657  fd8c		       42		      .byte.b	#%01000010	;
   2658  fd8d		       a5		      .byte.b	#%10100101	; 
   2659  fd8e		       a5		      .byte.b	#%10100101	; 
   2660  fd8f		       a5		      .byte.b	#%10100101	; 
   2661  fd90		       a5		      .byte.b	#%10100101	;	
   2662  fd91
   2663  fd91				   CY
   2664  fd91		       42		      .byte.b	#%01000010	;
   2665  fd92		       42		      .byte.b	#%01000010	; 
   2666  fd93		       42		      .byte.b	#%01000010	; 
   2667  fd94		       a5		      .byte.b	#%10100101	; 
   2668  fd95		       a5		      .byte.b	#%10100101	;
   2669  fd96
   2670  fd96				   CW
   2671  fd96		       a5		      .byte.b	#%10100101	;
   2672  fd97		       e7		      .byte.b	#%11100111	; 
   2673  fd98		       a5		      .byte.b	#%10100101	; 
   2674  fd99		       a5		      .byte.b	#%10100101	; 
   2675  fd9a		       a5		      .byte.b	#%10100101	;
   2676  fd9b
   2677  fd9b				   CZ
   2678  fd9b		       e7		      .byte.b	#%11100111	;
   2679  fd9c		       24		      .byte.b	#%00100100	; 
   2680  fd9d		       42		      .byte.b	#%01000010	; 
   2681  fd9e		       81		      .byte.b	#%10000001	; 
   2682  fd9f		       e7		      .byte.b	#%11100111	;
   2683  fda0
   2684  fda0				   Pipe
   2685  fda0		       42		      .byte.b	#%01000010	;
   2686  fda1		       00		      .byte.b	#%00000000	; 
   2687  fda2		       42		      .byte.b	#%01000010	; 
   2688  fda3		       00		      .byte.b	#%00000000	; 
   2689  fda4		       42		      .byte.b	#%01000010	;
   2690  fda5
   2691  fda5				   Exclamation
   2692  fda5		       42		      .byte.b	#%01000010	;
   2693  fda6		       00		      .byte.b	#%00000000	; 
   2694  fda7		       42		      .byte.b	#%01000010	; 
   2695  fda8		       42		      .byte.b	#%01000010	; 
   2696  fda9		       42		      .byte.b	#%01000010	;
   2697  fdaa
   2698  fdaa				   Dot
   2699  fdaa		       42		      .byte.b	#%01000010	;
   2700  fdab		       42		      .byte.b	#%01000010	; 
   2701  fdac		       00		      .byte.b	#%00000000	; 
   2702  fdad		       00		      .byte.b	#%00000000	; 
   2703  fdae		       00		      .byte.b	#%00000000	;
   2704  fdaf
   2705  fdaf				   Colon
   2706  fdaf		       42		      .byte.b	#%01000010	;
   2707  fdb0		       42		      .byte.b	#%01000010	; 
   2708  fdb1		       00		      .byte.b	#%00000000	; 
   2709  fdb2		       42		      .byte.b	#%01000010	; 
   2710  fdb3		       42		      .byte.b	#%01000010	;
   2711  fdb4
   2712  fdb4				   Triangle
   2713  fdb4		       81		      .byte.b	#%10000001	;
   2714  fdb5		       c3		      .byte.b	#%11000011	; 
   2715  fdb6		       e7		      .byte.b	#%11100111	; 
   2716  fdb7		       c3		      .byte.b	#%11000011	; 
   2717  fdb8		       81		      .byte.b	#%10000001	;
   2718  fdb9
   2719  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2720  fdb9		       00		      .byte.b	#0	;
   2721  fdba		       00		      .byte.b	#0	;
   2722  fdbb		       00		      .byte.b	#0	;
   2723  fdbc		       00		      .byte.b	#0	;
   2724  fdbd		       00		      .byte.b	#0	;
   2725  fdbe
   2726  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2727  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2728  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2729  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2730  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2731  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2732  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2733  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2734  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2735  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2736  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2737  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2738  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2739  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2740  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2741  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2742  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2743  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2744  fdcf
   2745  fdcf				   EngineSoundType
   2746  fdcf		       02		      .byte.b	#2
   2747  fdd0		       02		      .byte.b	#2
   2748  fdd1		       0e		      .byte.b	#14
   2749  fdd2		       06		      .byte.b	#6
   2750  fdd3		       06		      .byte.b	#6
   2751  fdd4		       0e		      .byte.b	#14
   2752  fdd5
   2753  fdd5				   EngineBaseFrequence
   2754  fdd5		       1f		      .byte.b	#31
   2755  fdd6		       15		      .byte.b	#21
   2756  fdd7		       14		      .byte.b	#20
   2757  fdd8		       1f		      .byte.b	#31
   2758  fdd9		       16		      .byte.b	#22
   2759  fdda		       03		      .byte.b	#3
   2760  fddb
   2761  fddb				   TachometerSizeLookup1
   2762  fddb		       1f		      .byte.b	#%00011111
   2763  fddc		       3f		      .byte.b	#%00111111
   2764  fddd		       7f		      .byte.b	#%01111111
   2765  fdde		       ff		      .byte.b	#%11111111
   2766  fddf		       ff		      .byte.b	#%11111111
   2767  fde0		       ff		      .byte.b	#%11111111
   2768  fde1		       ff		      .byte.b	#%11111111
   2769  fde2		       ff		      .byte.b	#%11111111
   2770  fde3
   2771  fde3				   TachometerSizeLookup2
   2772  fde3		       00		      .byte.b	#%00000000
   2773  fde4		       00		      .byte.b	#%00000000
   2774  fde5		       00		      .byte.b	#%00000000
   2775  fde6		       00		      .byte.b	#%00000000
   2776  fde7		       80		      .byte.b	#%10000000
   2777  fde8		       c0		      .byte.b	#%11000000
   2778  fde9		       e0		      .byte.b	#%11100000
   2779  fdea		       f0		      .byte.b	#%11110000
   2780  fdeb
   2781  fdeb				   TachometerGearLookup
   2782  fdeb		       01		      .byte.b	#%00000001
   2783  fdec		       02		      .byte.b	#%00000010
   2784  fded		       04		      .byte.b	#%00000100
   2785  fdee		       08		      .byte.b	#%00001000
   2786  fdef		       10		      .byte.b	#%00010000
   2787  fdf0		       30		      .byte.b	#%00110000
   2788  fdf1
   2789  fe00					      org	$FE00
   2790  fe00				   AesTable
   2791  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2792  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2793  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2794  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2795  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2796  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2797  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2798  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2799  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2800  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2801  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2802  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2803  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2804  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2805  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2806  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2807  ff00
   2808  ff00							; From FF00 to FFFB (122 bytes) to use here
   2809  ff00
   2810  ff00				   StaticText		; All static text must be on the same MSB block. 
   2811  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2812  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2813  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2814  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2815  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2816  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2817  ff05
   2818  ff05				   HellwayLeftText
   2819  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2820  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2821  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2822  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2823  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2824  ff0a
   2825  ff0a				   HellwayRightText
   2826  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2827  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2828  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2829  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2830  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2831  ff0f
   2832  ff0f				   OpbText
   2833  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2834  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2835  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2836  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2837  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2838  ff14
   2839  ff14				   YearText
   2840  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2841  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2842  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2843  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2844  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2845  ff19
   2846  ff19				   GameText
   2847  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2848  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2849  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2850  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2851  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2852  ff1e
   2853  ff1e				   OverText
   2854  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2855  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2856  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2857  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2858  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2859  ff23				   GoText
   2860  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2861  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2862  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2863  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2864  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2865  ff28
   2866  ff28				   ZeldaTextLeft
   2867  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2868  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2869  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2870  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2871  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2872  ff2d
   2873  ff2d				   ZeldaTextRight
   2874  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2875  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2876  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2877  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2878  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2879  ff32
   2880  ff32				   ZeldaDateLeft
   2881  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2882  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2883  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2884  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2885  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2886  ff37
   2887  ff37				   ZeldaDateRight
   2888  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2889  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2890  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2891  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2892  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2893  ff3c
   2894  ff3c				   PolvinhosTextLeft
   2895  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2896  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2897  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2898  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2899  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2900  ff41
   2901  ff41				   PolvinhosTextRight
   2902  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2903  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2904  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2905  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2906  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2907  ff46
   2908  ff46				   PolvinhosDateLeft
   2909  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2910  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2911  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2912  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2913  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2914  ff4b
   2915  ff4b				   PolvinhosDateRight
   2916  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2917  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2918  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2919  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2920  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2921  ff50
   2922  ff50				   IvonneTextLeft
   2923  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2924  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2925  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2926  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2927  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2928  ff55
   2929  ff55				   IvonneTextRight
   2930  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2931  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2932  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2933  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2934  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2935  ff5a
   2936  ff5a				   IvonneDateLeft
   2937  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2938  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2939  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2940  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2941  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2942  ff5f
   2943  ff5f				   IvonneDateRight
   2944  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2945  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2946  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2947  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2948  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2949  ff64
   2950  ff64				   PaperArtTextLeft
   2951  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2952  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2953  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2954  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2955  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2956  ff69
   2957  ff69				   PaperArtTextRight
   2958  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2959  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2960  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2961  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2962  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2963  ff6e
   2964  ff6e				   LeonardoTextLeft
   2965  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2966  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2967  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2968  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2969  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2970  ff73
   2971  ff73				   LeonardoTextRight
   2972  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2973  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2974  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2975  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2976  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2977  ff78
   2978  ff78				   VersionText
   2979  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2980  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2981  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2982  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2983  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2984  ff7d
   2985  ff7d
   2986  ff7d				   EndStaticText
   2987  ff7d
   2988  ff7d				   CarSprite0		; Upside down, Original Car
   2989  ff7d		       00 00 00 00*	      ds	7
   2990  ff84		       7e		      .byte.b	#%01111110
   2991  ff85		       24		      .byte.b	#%00100100
   2992  ff86		       bd		      .byte.b	#%10111101
   2993  ff87		       3c		      .byte.b	#%00111100
   2994  ff88		       bd		      .byte.b	#%10111101
   2995  ff89		       3c		      .byte.b	#%00111100
   2996  ff8a
   2997  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2998  ff8a		       00 00 00 00*	      ds	7
   2999  ff91		       bd		      .byte.b	#%10111101
   3000  ff92		       7e		      .byte.b	#%01111110
   3001  ff93		       5a		      .byte.b	#%01011010
   3002  ff94		       66		      .byte.b	#%01100110
   3003  ff95		       bd		      .byte.b	#%10111101
   3004  ff96		       3c		      .byte.b	#%00111100
   3005  ff97
   3006  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   3007  ff97		       00 00 00 00*	      ds	7
   3008  ff9e		       7e		      .byte.b	#%01111110
   3009  ff9f		       a5		      .byte.b	#%10100101
   3010  ffa0		       42		      .byte.b	#%01000010
   3011  ffa1		       42		      .byte.b	#%01000010
   3012  ffa2		       bd		      .byte.b	#%10111101
   3013  ffa3		       7e		      .byte.b	#%01111110
   3014  ffa4
   3015  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   3016  ffa4		       00 00 00 00*	      ds	7
   3017  ffab		       3c		      .byte.b	#%00111100
   3018  ffac		       db		      .byte.b	#%11011011
   3019  ffad		       db		      .byte.b	#%11011011
   3020  ffae		       3c		      .byte.b	#%00111100
   3021  ffaf		       5a		      .byte.b	#%01011010
   3022  ffb0		       3c		      .byte.b	#%00111100
   3023  ffb1
   3024  ffb1				   TrafficSpeeds
   3025  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   3026  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   3027  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   3028  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   3029  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   3030  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   3031  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   3032  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   3033  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   3034  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   3035  ffbb				   TrafficSpeedsHighDelta
   3036  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   3037  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   3038  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   3039  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   3040  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   3041  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   3042  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   3043  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   3044  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   3045  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   3046  ffc5
   3047  ffc5				   CarIdToSpriteAddressL
   3048  ffc5		       7d		      .byte.b	#<CarSprite0
   3049  ffc6		       8a		      .byte.b	#<CarSprite1
   3050  ffc7		       97		      .byte.b	#<CarSprite2
   3051  ffc8		       a4		      .byte.b	#<CarSprite3
   3052  ffc9
   3053  ffc9				   CarIdToSpriteAddressH
   3054  ffc9		       ff		      .byte.b	#>CarSprite0
   3055  ffca		       ff		      .byte.b	#>CarSprite1
   3056  ffcb		       ff		      .byte.b	#>CarSprite2
   3057  ffcc		       ff		      .byte.b	#>CarSprite3
   3058  ffcd
   3059  ffcd				   CarIdToAccelerateSpeed
   3060  ffcd		       80		      .byte.b	#128
   3061  ffce		       c0		      .byte.b	#192
   3062  ffcf		       60		      .byte.b	#96
   3063  ffd0		       c0		      .byte.b	#192
   3064  ffd1
   3065  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   3066  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   3067  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   3068  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   3069  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   3070  ffd5
   3071  ffd5				   CarIdToMaxSpeedL
   3072  ffd5		       80		      .byte.b	#$80
   3073  ffd6		       00		      .byte.b	#$00	; One less gear
   3074  ffd7		       80		      .byte.b	#$80
   3075  ffd8		       80		      .byte.b	#$80
   3076  ffd9
   3077  ffd9				   CarIdToMaxGear
   3078  ffd9		       05		      .byte.b	#5
   3079  ffda		       04		      .byte.b	#4	; One less gear
   3080  ffdb		       05		      .byte.b	#5
   3081  ffdc		       05		      .byte.b	#5
   3082  ffdd
   3083  ffdd				   GearToBreakSpeedTable
   3084  ffdd		       09		      .byte.b	#(BREAK_SPEED - 1)
   3085  ffde		       09		      .byte.b	#(BREAK_SPEED - 1)
   3086  ffdf		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3087  ffe0		       0b		      .byte.b	#(BREAK_SPEED + 1)
   3088  ffe1		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3089  ffe2		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3090  ffe3
   3091  ffe3				   TrafficColorTable
   3092  ffe3		       34		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3093  ffe4		       44		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3094  ffe5		       c9		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3095  ffe6		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3096  ffe7
   3097  ffe7				   TrafficChanceTable
   3098  ffe7		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3099  ffe8		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3100  ffe9		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3101  ffea		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3102  ffeb
   3103  ffeb				   TrafficTimeTable
   3104  ffeb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3105  ffec		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3106  ffed		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3107  ffee		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3108  ffef		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3109  fff0
   3110  fff0
   3111  fff0					      IF	PLUSROM
   3112  fff0					      org	$FFF0
   3113  fff0		       ff ff ff ff	      .byte.b	$ff,$ff,$ff,$ff	; keep PlusROM hotspots free
   3114  fffa					      org	$FFFA
   3115  fffa		       cb 1c		      .word.w	((PlusROM_API & $0FFF) + $1000)
   3116  fffc					      ENDIF
   3117  fffc					      org	$FFFC
   3118  fffc		       00 f0		      .word.w	BeforeStart
   3119  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
