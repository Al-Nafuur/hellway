------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     13  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     14  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     15  f000
     16  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     17  f000							;16 bit precision
     18  f000							;640 max speed!
     19  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     20  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     21  f000		       00 00	   CAR_MIN_SPEED_H =	0
     22  f000		       00 00	   CAR_MIN_SPEED_L =	0
     23  f000		       00 01	   ACCELERATE_SPEED =	1
     24  f000		       00 0a	   BREAK_SPEED =	10
     25  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     26  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     27  f000
     28  f000		       00 12	   TRAFFIC_CHANCE_LIGHT =	18
     29  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     30  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     31  f000
     32  f000		       00 1c	   TRAFFIC_CHANCE_REGULAR =	28
     33  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     34  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     35  f000
     36  f000		       00 26	   TRAFFIC_CHANCE_INTENSE =	38
     37  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     38  f000		       00 16	   TRAFFIC_COLOR_INTENSE =	$16
     39  f000
     40  f000		       00 30	   TRAFFIC_CHANCE_RUSH_HOUR =	48
     41  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     42  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     43  f000
     44  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     45  f000		       00 87	   SCORE_BACKGROUND_COLOR =	$87
     46  f000
     47  f000		       00 0c	   SCORE_FONT_COLOR =	$0C
     48  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     49  f000		       00 34	   SCORE_FONT_COLOR_BAD =	$34
     50  f000		       00 2f	   SCORE_FONT_COLOR_OVER =	$2F
     51  f000
     52  f000		       00 28	   PLAYER_0_X_START =	$28	;
     53  f000		       00 2a	   PLAYER_0_MAX_X =	$2A	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     54  f000
     55  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     56  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     57  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     58  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	%00000111	; Every 8 frames
     59  f000
     60  f000		       00 3c	   SWITCHES_DEBOUNCE_TIME =	60	; Frames
     61  f000
     62  f000
     63  f000		       00 80	   GRP0Cache  =	$80
     64  f000		       00 81	   PF0Cache   =	$81
     65  f000		       00 82	   PF1Cache   =	$82
     66  f000		       00 83	   PF2Cache   =	$83
     67  f000
     68  f000		       00 86	   FrameCount0 =	$86	;
     69  f000		       00 87	   FrameCount1 =	$87	;
     70  f000
     71  f000		       00 88	   Player0SpeedL =	$88
     72  f000		       00 89	   Player0SpeedH =	$89
     73  f000
     74  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     75  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     76  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     77  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     78  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     79  f000
     80  f000							;Temporary variables, multiple uses
     81  f000		       00 b0	   Tmp0       =	$B0
     82  f000		       00 b1	   Tmp1       =	$B1
     83  f000		       00 b2	   Tmp2       =	$B2
     84  f000
     85  f000		       00 ba	   CollisionCounter =	$BA
     86  f000		       00 bb	   Player0X   =	$BB
     87  f000		       00 bc	   CountdownTimer =	$BC
     88  f000		       00 bd	   Traffic0Msb =	$BD
     89  f000		       00 be	   SwitchDebounceCounter =	$BE
     90  f000
     91  f000
     92  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, D6 = player 0 outside area
     93  f000		       00 c1	   TrafficChance =	$C1
     94  f000		       00 c2	   CheckpointTime =	$C2
     95  f000		       00 c3	   TrafficColor =	$C3
     96  f000
     97  f000		       00 d0	   ScoreD0    =	$D0
     98  f000		       00 d1	   ScoreD1    =	$D1
     99  f000		       00 d2	   ScoreD2    =	$D2
    100  f000		       00 d3	   ScoreD3    =	$D3
    101  f000		       00 d4	   ScoreD4    =	$D4
    102  f000		       00 d5	   ScoreFontColor =	$D5
    103  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    104  f000		       00 d7	   NextCheckpoint =	$D7
    105  f000
    106  f000
    107  f000							;generic start up stuff, put zero in all...
    108  f000				   BeforeStart		;All variables that are kept on game reset or select
    109  f000		       a0 00		      LDY	#0
    110  f002		       84 be		      STY	SwitchDebounceCounter
    111  f004
    112  f004				   Start
    113  f004		       78		      SEI
    114  f005		       d8		      CLD
    115  f006		       a2 ff		      LDX	#$FF
    116  f008		       9a		      TXS
    117  f009		       a9 00		      LDA	#0
    118  f00b				   ClearMem
    119  f00b		       e0 be		      CPX	#SwitchDebounceCounter
    120  f00d		       f0 02		      BEQ	SkipClean
    121  f00f		       95 00		      STA	0,X
    122  f011				   SkipClean
    123  f011		       ca		      DEX
    124  f012
    125  f012		       d0 f7		      BNE	ClearMem
    126  f014
    127  f014							;Setting some variables...
    128  f014
    129  f014							;Loop ?
    130  f014		       a9 01		      LDA	#1
    131  f016		       85 94		      STA	TrafficOffset1 + 0	; So we can detect loop
    132  f018		       a9 20		      LDA	#$20
    133  f01a		       85 96		      STA	TrafficOffset1 + 2
    134  f01c		       a9 40		      LDA	#$40
    135  f01e		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
    136  f020		       a9 60		      LDA	#$60
    137  f022		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
    138  f024		       a9 80		      LDA	#$80
    139  f026		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
    140  f028		       a9 a0		      LDA	#$A0
    141  f02a
    142  f02a		       ad 41 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    143  f02d		       85 88		      STA	Player0SpeedL
    144  f02f
    145  f02f		       a5 28		      LDA	PLAYER_0_X_START
    146  f031		       85 bb		      STA	Player0X
    147  f033
    148  f033		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME
    149  f035		       85 bc		      STA	CountdownTimer
    150  f037
    151  f037		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    152  f039		       85 d7		      STA	NextCheckpoint
    153  f03b
    154  f03b		       ad 82 02 	      LDA	SWCHB	; Reading the switches as binary number A = 1, B = 0
    155  f03e		       29 c0		      AND	#%11000000
    156  f040		       f0 0c		      BEQ	ConfigureLightTraffic
    157  f042		       c9 80		      CMP	#%10000000
    158  f044		       f0 11		      BEQ	ConfigureRegularTraffic
    159  f046		       c9 40		      CMP	#%01000000
    160  f048		       f0 16		      BEQ	ConfigureIntenseTraffic
    161  f04a		       c9 c0		      CMP	#%11000000
    162  f04c		       f0 1b		      BEQ	ConfigureRushHourTraffic
    163  f04e
    164  f04e				   ConfigureLightTraffic
    165  f04e		       a2 12		      LDX	#TRAFFIC_CHANCE_LIGHT
    166  f050		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
    167  f052		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
    168  f054		       4c 6f f0 	      JMP	StoreTrafficChance
    169  f057				   ConfigureRegularTraffic
    170  f057		       a2 1c		      LDX	#TRAFFIC_CHANCE_REGULAR
    171  f059		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
    172  f05b		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
    173  f05d		       4c 6f f0 	      JMP	StoreTrafficChance
    174  f060				   ConfigureIntenseTraffic
    175  f060		       a2 26		      LDX	#TRAFFIC_CHANCE_INTENSE
    176  f062		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
    177  f064		       a9 16		      LDA	#TRAFFIC_COLOR_INTENSE
    178  f066		       4c 6f f0 	      JMP	StoreTrafficChance
    179  f069				   ConfigureRushHourTraffic
    180  f069		       a2 30		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
    181  f06b		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
    182  f06d		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
    183  f06f
    184  f06f				   StoreTrafficChance
    185  f06f		       86 c1		      STX	TrafficChance
    186  f071		       84 c2		      STY	CheckpointTime
    187  f073		       85 c3		      STA	TrafficColor
    188  f075
    189  f075							;VSYNC time
    190  f075				   MainLoop
    191  f075		       a9 02		      LDA	#2
    192  f077		       85 00		      STA	VSYNC
    193  f079		       85 02		      STA	WSYNC
    194  f07b		       85 02		      STA	WSYNC
    195  f07d							;Apply Movement, must be done after a WSYNC
    196  f07d		       85 2a		      STA	HMOVE	;2
    197  f07f							;This must be done after a WSync, otherwise it is impossible to predict the X position
    198  f07f		       a5 c0		      LDA	GameStatus	;3
    199  f081		       29 80		      AND	#%10000000	;2 game running, we get 0 and not reset the position.
    200  f083		       d0 11		      BNE	DoNotSetPlayerX	;3
    201  f085		       a6 28		      LDX	PLAYER_0_X_START	; 2
    202  f087		       86 bb		      STX	Player0X	; 3
    203  f089							;Do something better than sleep
      0  f089					      SLEEP	21	;
      1  f089				   .CYCLES    SET	21
      2  f089
      3  f089				  -	      IF	.CYCLES < 2
      4  f089				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f089				  -	      ERR
      6  f089					      ENDIF
      7  f089
      8  f089					      IF	.CYCLES & 1
      9  f089				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f089				  -	      nop	0
     11  f089					      ELSE
     12  f089		       24 00		      bit	VSYNC
     13  f08b					      ENDIF
     14  f08b				   .CYCLES    SET	.CYCLES - 3
     15  f08b					      ENDIF
     16  f08b
     17  f08b					      REPEAT	.CYCLES / 2
     18  f08b		       ea		      nop
     17  f08b					      REPEND
     18  f08c		       ea		      nop
     17  f08c					      REPEND
     18  f08d		       ea		      nop
     17  f08d					      REPEND
     18  f08e		       ea		      nop
     17  f08e					      REPEND
     18  f08f		       ea		      nop
     17  f08f					      REPEND
     18  f090		       ea		      nop
     17  f090					      REPEND
     18  f091		       ea		      nop
     17  f091					      REPEND
     18  f092		       ea		      nop
     17  f092					      REPEND
     18  f093		       ea		      nop
     19  f094					      REPEND
    205  f094		       85 10		      STA	RESP0	;3
    206  f096
    207  f096				   DoNotSetPlayerX
    208  f096
    209  f096		       85 02		      STA	WSYNC	;3
    210  f098		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    211  f09a		       8d 96 02 	      STA	TIM64T	;3	
    212  f09d		       a9 00		      LDA	#0	;2
    213  f09f		       85 00		      STA	VSYNC	;3	
    214  f0a1
    215  f0a1							;Read Fire Button before, will make it start the game for now.
    216  f0a1				   StartGame
    217  f0a1		       a5 0c		      LDA	INPT4	;3
    218  f0a3		       30 10		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    219  f0a5		       a5 c0		      LDA	GameStatus	;3
    220  f0a7		       29 80		      AND	#%10000000
    221  f0a9		       d0 0a		      BNE	SkipGameStart
    222  f0ab		       09 80		      ORA	#%10000000	;2
    223  f0ad		       85 c0		      STA	GameStatus	;3
    224  f0af		       a9 00		      LDA	#0	;
    225  f0b1		       85 86		      STA	FrameCount0
    226  f0b3		       85 87		      STA	FrameCount1
    227  f0b5				   SkipGameStart
    228  f0b5
    229  f0b5				   ReadSwitches
    230  f0b5		       a6 be		      LDX	SwitchDebounceCounter
    231  f0b7		       d0 11		      BNE	DecrementSwitchDebounceCounter
    232  f0b9		       a9 01		      LDA	#%00000001
    233  f0bb		       2c 82 02 	      BIT	SWCHB
    234  f0be		       d0 07		      BNE	SkipReset
    235  f0c0		       a9 3c		      LDA	#SWITCHES_DEBOUNCE_TIME
    236  f0c2		       85 be		      STA	SwitchDebounceCounter
    237  f0c4		       4c 04 f0 	      JMP	Start
    238  f0c7				   SkipReset
    239  f0c7		       4c cc f0 	      JMP	EndReadSwitches
    240  f0ca				   DecrementSwitchDebounceCounter
    241  f0ca		       c6 be		      DEC	SwitchDebounceCounter
    242  f0cc				   EndReadSwitches
    243  f0cc
    244  f0cc				   CountFrame
    245  f0cc		       e6 86		      INC	FrameCount0	; 5 Used to alternate lines
    246  f0ce		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    247  f0d0		       e6 87		      INC	FrameCount1	; 5 Still not used
    248  f0d2				   SkipIncFC1
    249  f0d2
    250  f0d2							;Does not update the game if not running
    251  f0d2		       a5 c0		      LDA	GameStatus	;3
    252  f0d4		       29 80		      AND	#%10000000	;2 game is running...
    253  f0d6		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    254  f0d8		       4c 07 f2 	      JMP	SkipUpdateLogic
    255  f0db				   ContinueWithGameLogic
    256  f0db
    257  f0db				   EverySecond		; 64 frames to be more precise
    258  f0db		       a9 3f		      LDA	#%00111111
    259  f0dd		       25 86		      AND	FrameCount0
    260  f0df		       d0 06		      BNE	SkipEverySecondAction
    261  f0e1		       c5 bc		      CMP	CountdownTimer
    262  f0e3		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    263  f0e5		       c6 bc		      DEC	CountdownTimer
    264  f0e7				   SkipEverySecondAction
    265  f0e7
    266  f0e7
    267  f0e7
    268  f0e7				   BreakOnTimeOver		; Uses LDX as the breaking speed
    269  f0e7		       a2 00		      LDX	#0
    270  f0e9		       a5 bc		      LDA	CountdownTimer
    271  f0eb		       d0 08		      BNE	Break
    272  f0ed		       a5 86		      LDA	FrameCount0
    273  f0ef		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    274  f0f1		       d0 02		      BNE	Break
    275  f0f3		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    276  f0f5
    277  f0f5				   Break
    278  f0f5		       a9 20		      LDA	#%00100000	;Down in controller
    279  f0f7		       2c 80 02 	      BIT	SWCHA
    280  f0fa		       d0 0b		      BNE	BreakNonZero
    281  f0fc		       a5 0c		      LDA	INPT4	;3
    282  f0fe		       10 05		      BPL	BreakWhileAccelerating
    283  f100		       a2 0a		      LDX	#BREAK_SPEED
    284  f102		       4c 07 f1 	      JMP	BreakNonZero
    285  f105				   BreakWhileAccelerating		; Allow better control while breaking.
    286  f105		       a2 05		      LDX	#BREAK_SPEED / 2
    287  f107
    288  f107				   BreakNonZero
    289  f107		       e0 00		      CPX	#0
    290  f109		       f0 2b		      BEQ	SkipBreak
    291  f10b		       86 b0		      STX	Tmp0
    292  f10d
    293  f10d				   DecreaseSpeed
    294  f10d		       38		      SEC
    295  f10e		       a5 88		      LDA	Player0SpeedL
    296  f110		       e5 b0		      SBC	Tmp0
    297  f112		       85 88		      STA	Player0SpeedL
    298  f114		       a5 89		      LDA	Player0SpeedH
    299  f116		       e9 00		      SBC	#0
    300  f118		       85 89		      STA	Player0SpeedH
    301  f11a
    302  f11a				   CheckMinSpeed
    303  f11a		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    304  f11c		       c9 00		      CMP	#CAR_MIN_SPEED_H
    305  f11e		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    306  f120		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    307  f122
    308  f122				   CompareLBreakSpeed
    309  f122		       a5 88		      LDA	Player0SpeedL
    310  f124		       c9 00		      CMP	#CAR_MIN_SPEED_L
    311  f126		       90 03		      BCC	ResetMinSpeed	; Less than memory
    312  f128		       4c 33 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    313  f12b
    314  f12b				   ResetMinSpeed
    315  f12b		       a9 00		      LDA	#CAR_MIN_SPEED_H
    316  f12d		       85 89		      STA	Player0SpeedH
    317  f12f		       a9 00		      LDA	#CAR_MIN_SPEED_L
    318  f131		       85 88		      STA	Player0SpeedL
    319  f133
    320  f133				   SkipAccelerateIfBreaking
    321  f133		       4c 66 f1 	      JMP	SkipAccelerate
    322  f136				   SkipBreak
    323  f136
    324  f136				   Acelerates
    325  f136		       a5 bc		      LDA	CountdownTimer
    326  f138		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    327  f13a		       a5 0c		      LDA	INPT4	;3
    328  f13c		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    329  f13e		       a9 10		      LDA	#%00010000	;UP in controller
    330  f140		       2c 80 02 	      BIT	SWCHA
    331  f143		       d0 21		      BNE	SkipAccelerate
    332  f145
    333  f145				   IncreaseCarSpeed
    334  f145							;Adds speed
    335  f145		       18		      CLC
    336  f146		       a5 88		      LDA	Player0SpeedL
    337  f148		       69 01		      ADC	#ACCELERATE_SPEED
    338  f14a		       85 88		      STA	Player0SpeedL
    339  f14c		       a5 89		      LDA	Player0SpeedH
    340  f14e		       69 00		      ADC	#0
    341  f150		       85 89		      STA	Player0SpeedH
    342  f152
    343  f152							;Checks if already max
    344  f152		       c9 02		      CMP	#CAR_MAX_SPEED_H
    345  f154		       90 10		      BCC	SkipAccelerate	; less than my max speed
    346  f156		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    347  f158							;High bit is max, compare the low
    348  f158		       a5 88		      LDA	Player0SpeedL
    349  f15a		       c9 80		      CMP	#CAR_MAX_SPEED_L
    350  f15c		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    351  f15e							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    352  f15e
    353  f15e				   ResetToMaxSpeed		; Speed is more, or is already max
    354  f15e		       a9 02		      LDA	#CAR_MAX_SPEED_H
    355  f160		       85 89		      STA	Player0SpeedH
    356  f162		       a9 80		      LDA	#CAR_MAX_SPEED_L
    357  f164		       85 88		      STA	Player0SpeedL
    358  f166				   SkipAccelerate
    359  f166
    360  f166							;Updates all offsets 24 bits
    361  f166		       a2 00		      LDX	#0	; Memory Offset 24 bit
    362  f168		       a0 00		      LDY	#0	; Line Speeds 16 bits
    363  f16a				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    364  f16a		       38		      SEC
    365  f16b		       a5 88		      LDA	Player0SpeedL
    366  f16d		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    367  f170		       85 b0		      STA	Tmp0
    368  f172		       c8		      INY
    369  f173		       a5 89		      LDA	Player0SpeedH
    370  f175		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    371  f178		       85 b1		      STA	Tmp1
    372  f17a		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    373  f17c		       e9 00		      SBC	#0
    374  f17e		       85 b2		      STA	Tmp2
    375  f180
    376  f180
    377  f180				   AddsTheResult
    378  f180		       18		      CLC
    379  f181		       a5 b0		      LDA	Tmp0
    380  f183		       75 90		      ADC	TrafficOffset0,X
    381  f185		       95 90		      STA	TrafficOffset0,X
    382  f187		       e8		      INX
    383  f188		       a5 b1		      LDA	Tmp1
    384  f18a		       75 90		      ADC	TrafficOffset0,X
    385  f18c		       95 90		      STA	TrafficOffset0,X
    386  f18e		       e8		      INX
    387  f18f		       a5 b2		      LDA	Tmp2	; Carry
    388  f191		       75 90		      ADC	TrafficOffset0,X
    389  f193		       95 90		      STA	TrafficOffset0,X
    390  f195		       90 06		      BCC	CalculateOffsetCache
    391  f197		       e0 02		      CPX	#2	;MSB offset 0
    392  f199		       d0 02		      BNE	CalculateOffsetCache
    393  f19b		       e6 bd		      INC	Traffic0Msb
    394  f19d
    395  f19d				   CalculateOffsetCache
    396  f19d		       e8		      INX
    397  f19e		       38		      SEC
    398  f19f		       69 00		      ADC	#0	;Increment by one
    399  f1a1		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    400  f1a3
    401  f1a3				   PrepareNextUpdateLoop
    402  f1a3		       c8		      INY
    403  f1a4		       e8		      INX
    404  f1a5		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    405  f1a7		       d0 c1		      BNE	UpdateOffsets
    406  f1a9
    407  f1a9
    408  f1a9
    409  f1a9							;Until store the movemnt, LDX contains the value to be stored.
    410  f1a9				   TestCollision		;
    411  f1a9							; see if car0 and playfield collide.
    412  f1a9		       a9 80		      LDA	#%10000000
    413  f1ab		       24 02		      BIT	CXP0FB
    414  f1ad		       f0 19		      BEQ	NoCollision	;skip if not hitting...
    415  f1af		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    416  f1b1		       d0 15		      BNE	NoCollision
    417  f1b3		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    418  f1b5		       85 ba		      STA	CollisionCounter	;and store as colision.
    419  f1b7		       a9 10		      LDA	#COLLISION_SPEED_L	;
    420  f1b9		       c5 88		      CMP	Player0SpeedL
    421  f1bb		       b0 02		      BCS	SkipSetColisionSpeed
    422  f1bd		       85 88		      STA	Player0SpeedL
    423  f1bf				   SkipSetColisionSpeed
    424  f1bf		       a9 00		      LDA	#0
    425  f1c1		       85 89		      STA	Player0SpeedH
    426  f1c3		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    427  f1c5		       4c 03 f2 	      JMP	StoreHMove	; We keep position consistent
    428  f1c8				   NoCollision
    429  f1c8
    430  f1c8				   DecrementCollision
    431  f1c8		       a4 ba		      LDY	CollisionCounter
    432  f1ca		       f0 07		      BEQ	FinishDecrementCollision
    433  f1cc		       a9 05		      LDA	#%00000101	; Make player bigger to show colision
    434  f1ce		       85 04		      STA	NUSIZ0
    435  f1d0		       88		      DEY
    436  f1d1		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    437  f1d3				   FinishDecrementCollision
    438  f1d3
    439  f1d3				   ResetPlayerSize
    440  f1d3		       d0 02		      BNE	FinishResetPlayerSize
    441  f1d5		       84 04		      STY	NUSIZ0	;
    442  f1d7				   FinishResetPlayerSize
    443  f1d7
    444  f1d7				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    445  f1d7		       c0 01		      CPY	#1	; Last frame before reset
    446  f1d9		       d0 05		      BNE	SkipResetPlayerPosition
    447  f1db		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    448  f1dd		       4c 03 f2 	      JMP	StoreHMove
    449  f1e0				   SkipResetPlayerPosition
    450  f1e0
    451  f1e0							; for left and right, we're gonna 
    452  f1e0							; set the horizontal speed, and then do
    453  f1e0							; a single HMOVE.  We'll use X to hold the
    454  f1e0							; horizontal speed, then store it in the 
    455  f1e0							; appropriate register
    456  f1e0				   PrepareReadXAxis
    457  f1e0		       a2 00		      LDX	#0
    458  f1e2		       a4 bb		      LDY	Player0X
    459  f1e4				   BeginReadLeft
    460  f1e4		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    461  f1e6		       a9 40		      LDA	#%01000000	;Left
    462  f1e8		       2c 80 02 	      BIT	SWCHA
    463  f1eb		       d0 07		      BNE	SkipMoveLeft
    464  f1ed		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    465  f1ef		       c6 bb		      DEC	Player0X
    466  f1f1		       4c 03 f2 	      JMP	StoreHMove	; Cannot move left and right...
    467  f1f4				   SkipMoveLeft
    468  f1f4				   BeginReadRight
    469  f1f4		       c0 2a		      CPY	#PLAYER_0_MAX_X
    470  f1f6		       f0 0b		      BEQ	SkipMoveRight	; At max already
    471  f1f8		       a9 80		      LDA	#%10000000	;Right
    472  f1fa		       2c 80 02 	      BIT	SWCHA
    473  f1fd		       d0 04		      BNE	SkipMoveRight
    474  f1ff		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    475  f201		       e6 bb		      INC	Player0X
    476  f203				   SkipMoveRight
    477  f203				   StoreHMove
    478  f203		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    479  f205		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    480  f207
    481  f207
    482  f207				   SkipUpdateLogic
    483  f207		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    484  f209		       85 09		      STA	COLUBK
    485  f20b		       a5 d5		      LDA	ScoreFontColor
    486  f20d		       85 08		      STA	COLUPF
    487  f20f		       20 42 f4 	      JSR	ClearPF
    488  f212		       a9 02		      LDA	#%00000010	; Score mode
    489  f214		       85 0a		      STA	CTRLPF
    490  f216		       a0 04		      LDY	#SCORE_SIZE - 1
    491  f218		       a2 00		      LDX	#0
    492  f21a
    493  f21a		       a5 86		      LDA	FrameCount0	;3
    494  f21c		       29 01		      AND	#%00000001	;2
    495  f21e		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    496  f220				   LeftScoreOn
    497  f220		       a5 d5		      LDA	ScoreFontColor
    498  f222		       85 07		      STA	COLUP1
    499  f224		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    500  f226		       85 06		      STA	COLUP0
    501  f228		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    502  f22a		       85 b1		      STA	Tmp1
    503  f22c		       4c 3b f2 	      JMP	WaitForVblankEnd
    504  f22f				   RightScoreOn
    505  f22f		       a5 d5		      LDA	ScoreFontColor
    506  f231		       85 06		      STA	COLUP0
    507  f233		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    508  f235		       85 07		      STA	COLUP1
    509  f237		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    510  f239		       85 b1		      STA	Tmp1
    511  f23b
    512  f23b
    513  f23b							; After here we are going to update the screen, No more heavy code
    514  f23b				   WaitForVblankEnd
    515  f23b		       ad 84 02 	      LDA	INTIM
    516  f23e		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    517  f240							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    518  f240		       85 01		      STA	VBLANK
    519  f242
    520  f242				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    521  f242		       85 02		      STA	WSYNC
    522  f244
    523  f244		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    524  f246		       85 0d		      STA	PF0	;3
    525  f248
    526  f248		       a5 82		      LDA	PF1Cache	;3
    527  f24a		       85 0e		      STA	PF1	;3
    528  f24c
    529  f24c		       a5 83		      LDA	PF2Cache	;3
    530  f24e		       85 0f		      STA	PF2	;3
    531  f250
    532  f250							;39
    533  f250				   DrawScore
    534  f250		       a6 d0		      LDX	ScoreD0	; 4
    535  f252		       bd 00 fd 	      LDA	Font,X	;4
    536  f255		       85 81		      STA	PF0Cache	;3
    537  f257		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    538  f259							;17
    539  f259
    540  f259		       a6 d1		      LDX	ScoreD1	; 4
    541  f25b		       bd 00 fd 	      LDA	Font,X	;4
    542  f25e		       0a		      ASL		;2
    543  f25f		       0a		      ASL		;2
    544  f260		       0a		      ASL		;2
    545  f261		       0a		      ASL		;2
    546  f262		       85 82		      STA	PF1Cache	;3
    547  f264		       c6 d1		      DEC	ScoreD1	;6
    548  f266							;9 (After Wsync)
    549  f266
    550  f266		       a6 d2		      LDX	ScoreD2	; 4
    551  f268		       bd 00 fd 	      LDA	Font,X	;4
    552  f26b		       29 0f		      AND	#%00001111
    553  f26d		       05 82		      ORA	PF1Cache	;3
    554  f26f		       85 82		      STA	PF1Cache	;3
    555  f271		       c6 d2		      DEC	ScoreD2	;6
    556  f273							;20
    557  f273
    558  f273		       a6 d3		      LDX	ScoreD3	; 3
    559  f275		       bd 00 fd 	      LDA	Font,X	;4
    560  f278		       4a		      LSR		;2
    561  f279		       4a		      LSR		;2
    562  f27a		       4a		      LSR		;2
    563  f27b		       4a		      LSR		;2
    564  f27c		       85 83		      STA	PF2Cache	;3
    565  f27e		       c6 d3		      DEC	ScoreD3	;5
    566  f280							;23
    567  f280
    568  f280		       a6 d4		      LDX	ScoreD4	; 3
    569  f282		       bd 00 fd 	      LDA	Font,X	;4
    570  f285		       29 f0		      AND	#%11110000
    571  f287		       05 83		      ORA	PF2Cache	;3
    572  f289		       85 83		      STA	PF2Cache	;3
    573  f28b		       c6 d4		      DEC	ScoreD4	;5
    574  f28d							;18
    575  f28d
    576  f28d		       88		      DEY		;2
    577  f28e		       10 b2		      BPL	ScoreLoop	;4
    578  f290
    579  f290		       85 02		      STA	WSYNC
    580  f292
    581  f292		       20 51 f4 	      JSR	LoadPF
    582  f295
    583  f295		       85 02		      STA	WSYNC
    584  f297		       85 02		      STA	WSYNC
    585  f299
    586  f299				   PrepareForTraffic
    587  f299		       20 42 f4 	      JSR	ClearPF	; 32
    588  f29c
    589  f29c		       a5 c3		      LDA	TrafficColor	;2
    590  f29e		       85 06		      STA	COLUP0
    591  f2a0
    592  f2a0		       a9 03		      LDA	#BACKGROUND_COLOR	;2
    593  f2a2		       85 07		      STA	COLUP1	;3
    594  f2a4
    595  f2a4		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    596  f2a6
    597  f2a6		       a9 03		      LDA	#BACKGROUND_COLOR	;2 Make it in the very end, so we have one more nice blue line
      0  f2a8					      SLEEP	18	; Wait, so the line stay blue
      1  f2a8				   .CYCLES    SET	18
      2  f2a8
      3  f2a8				  -	      IF	.CYCLES < 2
      4  f2a8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2a8				  -	      ERR
      6  f2a8					      ENDIF
      7  f2a8
      8  f2a8				  -	      IF	.CYCLES & 1
      9  f2a8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2a8				  -	      nop	0
     11  f2a8				  -	      ELSE
     12  f2a8				  -	      bit	VSYNC
     13  f2a8				  -	      ENDIF
     14  f2a8				  -.CYCLES    SET	.CYCLES - 3
     15  f2a8					      ENDIF
     16  f2a8
     17  f2a8					      REPEAT	.CYCLES / 2
     18  f2a8		       ea		      nop
     17  f2a8					      REPEND
     18  f2a9		       ea		      nop
     17  f2a9					      REPEND
     18  f2aa		       ea		      nop
     17  f2aa					      REPEND
     18  f2ab		       ea		      nop
     17  f2ab					      REPEND
     18  f2ac		       ea		      nop
     17  f2ac					      REPEND
     18  f2ad		       ea		      nop
     17  f2ad					      REPEND
     18  f2ae		       ea		      nop
     17  f2ae					      REPEND
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     19  f2b1					      REPEND
    599  f2b1		       85 09		      STA	COLUBK	;3
    600  f2b3
    601  f2b3
    602  f2b3							;main scanline loop...
    603  f2b3				   ScanLoop
    604  f2b3		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    605  f2b5
    606  f2b5							;Start of next line!			
    607  f2b5				   DrawCache		;36 Is the last line going to the top of the next frame?
    608  f2b5
    609  f2b5		       a5 81		      LDA	PF0Cache	;3
    610  f2b7		       85 0d		      STA	PF0	;3
    611  f2b9
    612  f2b9		       b9 00 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    613  f2bc		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    614  f2be
    615  f2be		       a5 82		      LDA	PF1Cache	;3
    616  f2c0		       85 0e		      STA	PF1	;3
    617  f2c2
    618  f2c2		       a5 83		      LDA	PF2Cache	;3
    619  f2c4		       85 0f		      STA	PF2	;3
    620  f2c6
    621  f2c6		       a9 00		      LDA	#0	;2
    622  f2c8		       85 81		      STA	PF0Cache	;3
    623  f2ca		       85 82		      STA	PF1Cache	;3
    624  f2cc		       85 83		      STA	PF2Cache	;3
    625  f2ce
    626  f2ce							;BEQ DrawTraffic3
    627  f2ce				   DrawTraffic1 		; 33
    628  f2ce		       98		      TYA		; 2
    629  f2cf		       18		      CLC		; 2 
    630  f2d0		       65 95		      ADC	TrafficOffset1 + 1	;3
    631  f2d2		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    632  f2d4		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    633  f2d6		       45 96		      EOR	TrafficOffset1 + 2	; 3
    634  f2d8		       4c dd f2 	      JMP	AfterEorOffsetWithCarry	; 3
    635  f2db				   EorOffsetWithCarry
    636  f2db		       45 97		      EOR	TrafficOffset1 + 3	; 3
    637  f2dd				   AfterEorOffsetWithCarry		;17
    638  f2dd		       aa		      TAX		;2
    639  f2de		       bd 00 fe 	      LDA	AesTable,X	; 4
    640  f2e1		       c5 c1		      CMP	TrafficChance	;3
    641  f2e3		       b0 04		      BCS	FinishDrawTraffic1	; 2
    642  f2e5		       a9 60		      LDA	#%01100000	;2
    643  f2e7		       85 82		      STA	PF1Cache	;3
    644  f2e9				   FinishDrawTraffic1
    645  f2e9
    646  f2e9				   DrawTraffic2 		; 35
    647  f2e9		       98		      TYA		; 2
    648  f2ea		       18		      CLC		; 2 
    649  f2eb		       65 99		      ADC	TrafficOffset2 + 1	;3
    650  f2ed		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    651  f2ef		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    652  f2f1		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    653  f2f3		       4c f8 f2 	      JMP	AfterEorOffsetWithCarry2	; 3
    654  f2f6				   EorOffsetWithCarry2
    655  f2f6		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    656  f2f8				   AfterEorOffsetWithCarry2		;17
    657  f2f8		       aa		      TAX		;2
    658  f2f9		       bd 00 fe 	      LDA	AesTable,X	; 4
    659  f2fc		       c5 c1		      CMP	TrafficChance	;2
    660  f2fe		       b0 06		      BCS	FinishDrawTraffic2	; 2
    661  f300		       a5 82		      LDA	PF1Cache	;3
    662  f302		       09 0c		      ORA	#%00001100	;2
    663  f304		       85 82		      STA	PF1Cache	;3
    664  f306				   FinishDrawTraffic2
    665  f306
    666  f306							;STA WSYNC ;65 / 137
    667  f306
    668  f306							; LDA Tmp0 ; Flicker this line if drawing car
    669  f306							; BEQ FinishDrawTraffic4
    670  f306				   DrawTraffic3 		; 38
    671  f306		       98		      TYA		; 2
    672  f307		       18		      CLC		; 2 
    673  f308		       65 9d		      ADC	TrafficOffset3 + 1	;3
    674  f30a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    675  f30c		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    676  f30e		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    677  f310		       4c 15 f3 	      JMP	AfterEorOffsetWithCarry3	; 3
    678  f313				   EorOffsetWithCarry3
    679  f313		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    680  f315				   AfterEorOffsetWithCarry3		;17
    681  f315		       aa		      TAX		;2
    682  f316		       bd 00 fe 	      LDA	AesTable,X	; 4
    683  f319		       c5 c1		      CMP	TrafficChance	;2
    684  f31b		       b0 08		      BCS	FinishDrawTraffic3	; 2 
    685  f31d		       a9 01		      LDA	#%00000001	;2
    686  f31f		       85 83		      STA	PF2Cache	;3
    687  f321		       05 82		      ORA	PF1Cache	;3
    688  f323		       85 82		      STA	PF1Cache	;3
    689  f325				   FinishDrawTraffic3
    690  f325
    691  f325				   DrawTraffic4 		; 35
    692  f325		       98		      TYA		; 2
    693  f326		       18		      CLC		; 2 
    694  f327		       65 a1		      ADC	TrafficOffset4 + 1	;3
    695  f329		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    696  f32b		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    697  f32d		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    698  f32f		       4c 34 f3 	      JMP	AfterEorOffsetWithCarry4	; 3
    699  f332				   EorOffsetWithCarry4
    700  f332		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    701  f334				   AfterEorOffsetWithCarry4		;17
    702  f334		       aa		      TAX		;2
    703  f335		       bd 00 fe 	      LDA	AesTable,X	; 4
    704  f338		       c5 c1		      CMP	TrafficChance	;2
    705  f33a		       b0 06		      BCS	FinishDrawTraffic4	; 2
    706  f33c		       a5 83		      LDA	PF2Cache	;3
    707  f33e		       09 0c		      ORA	#%00001100	;2
    708  f340		       85 83		      STA	PF2Cache	;3	
    709  f342				   FinishDrawTraffic4
    710  f342
    711  f342				   DrawTraffic0 		; 24
    712  f342		       98		      TYA		;2
    713  f343		       18		      CLC		;2
    714  f344		       65 91		      ADC	TrafficOffset0 + 1	; 3
    715  f346		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    716  f348		       f0 0a		      BEQ	SkipDrawTraffic0	; 2
    717  f34a		       a9 f0		      LDA	#%11110000	; 2
    718  f34c		       85 81		      STA	PF0Cache	;3
    719  f34e		       a5 83		      LDA	PF2Cache	;3
    720  f350		       09 e0		      ORA	#%11100000	;2
    721  f352		       85 83		      STA	PF2Cache	; 3
    722  f354				   SkipDrawTraffic0
    723  f354
    724  f354				   WhileScanLoop
    725  f354		       88		      DEY		;2
    726  f355		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    727  f357		       4c b3 f2 	      JMP	ScanLoop	;3
    728  f35a				   FinishScanLoop		; 7 209 of 222
    729  f35a
    730  f35a		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    731  f35c		       20 51 f4 	      JSR	LoadPF
    732  f35f		       85 02		      STA	WSYNC	; do stuff!
    733  f361		       85 02		      STA	WSYNC
    734  f363		       85 02		      STA	WSYNC
    735  f365							;42 cycles to use here
    736  f365
    737  f365				   PrepareOverscan
    738  f365		       a9 02		      LDA	#2
    739  f367		       85 02		      STA	WSYNC
    740  f369		       85 01		      STA	VBLANK
    741  f36b
    742  f36b		       a9 24		      LDA	#36	; one more line before overscan...
    743  f36d		       8d 96 02 	      STA	TIM64T
    744  f370
    745  f370				   ProcessScoreFontColor
    746  f370		       a6 d6		      LDX	ScoreFontColorHoldChange
    747  f372		       f0 06		      BEQ	ResetScoreFontColor
    748  f374		       ca		      DEX
    749  f375		       86 d6		      STX	ScoreFontColorHoldChange
    750  f377		       4c 7e f3 	      JMP	SkipScoreFontColor
    751  f37a				   ResetScoreFontColor
    752  f37a		       a9 0c		      LDA	#SCORE_FONT_COLOR
    753  f37c		       85 d5		      STA	ScoreFontColor
    754  f37e				   SkipScoreFontColor
    755  f37e
    756  f37e				   IsGameOver
    757  f37e		       a5 bc		      LDA	CountdownTimer
    758  f380		       05 88		      ORA	Player0SpeedL
    759  f382		       05 89		      ORA	Player0SpeedH
    760  f384		       d0 0b		      BNE	IsCheckpoint
    761  f386		       a9 01		      LDA	#1
    762  f388		       85 d6		      STA	ScoreFontColorHoldChange
    763  f38a		       a9 2f		      LDA	#SCORE_FONT_COLOR_OVER
    764  f38c		       85 d5		      STA	ScoreFontColor
    765  f38e		       4c c0 f3 	      JMP	SkipIsTimeOver
    766  f391
    767  f391				   IsCheckpoint
    768  f391		       a5 d7		      LDA	NextCheckpoint
    769  f393		       c5 92		      CMP	TrafficOffset0 + 2
    770  f395		       d0 1d		      BNE	SkipIsCheckpoint
    771  f397		       18		      CLC
    772  f398		       69 10		      ADC	#CHECKPOINT_INTERVAL
    773  f39a		       85 d7		      STA	NextCheckpoint
    774  f39c		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    775  f39e		       85 d5		      STA	ScoreFontColor
    776  f3a0		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    777  f3a2		       85 d6		      STA	ScoreFontColorHoldChange
    778  f3a4		       a5 bc		      LDA	CountdownTimer
    779  f3a6		       18		      CLC
    780  f3a7		       65 c2		      ADC	CheckpointTime
    781  f3a9		       85 bc		      STA	CountdownTimer
    782  f3ab		       90 04		      BCC	JumpSkipTimeOver
    783  f3ad		       a9 ff		      LDA	#$FF
    784  f3af		       85 bc		      STA	CountdownTimer	; Does not overflow!
    785  f3b1				   JumpSkipTimeOver
    786  f3b1		       4c c0 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    787  f3b4				   SkipIsCheckpoint
    788  f3b4
    789  f3b4				   IsTimeOver
    790  f3b4		       a5 bc		      LDA	CountdownTimer
    791  f3b6		       d0 08		      BNE	SkipIsTimeOver
    792  f3b8		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    793  f3ba		       85 d6		      STA	ScoreFontColorHoldChange
    794  f3bc		       a9 34		      LDA	#SCORE_FONT_COLOR_BAD
    795  f3be		       85 d5		      STA	ScoreFontColor
    796  f3c0				   SkipIsTimeOver
    797  f3c0
    798  f3c0							;Could be done during on vblank to save this comparisson time (before draw score), 
    799  f3c0							;but I am saving vblank cycles for now, in case of 2 players.
    800  f3c0				   ChooseSide		; 
    801  f3c0		       a5 86		      LDA	FrameCount0	;3
    802  f3c2		       29 01		      AND	#%00000001	;2
    803  f3c4		       f0 37		      BEQ	RightScoreWrite	; Half of the screen with the correct colors.
    804  f3c6
    805  f3c6				   LeftScoreWrite
    806  f3c6				   WriteDistance		;Not optimized yet, ugly code.
    807  f3c6
    808  f3c6				   Digit0Distance
    809  f3c6		       a5 91		      LDA	TrafficOffset0 + 1	;3
    810  f3c8		       29 f0		      AND	#%11110000	;2
    811  f3ca		       4a		      LSR		; 2
    812  f3cb		       4a		      LSR		; 2
    813  f3cc		       4a		      LSR		; 2
    814  f3cd		       4a		      LSR		; 2
    815  f3ce		       aa		      TAX		; 2
    816  f3cf		       bd 64 fd 	      LDA	FontLookup,X	;4
    817  f3d2		       85 d3		      STA	ScoreD3	;3
    818  f3d4
    819  f3d4				   Digit1Distance
    820  f3d4		       a5 92		      LDA	TrafficOffset0 + 2	;3
    821  f3d6		       29 0f		      AND	#%00001111	;2
    822  f3d8		       aa		      TAX		; 2
    823  f3d9		       bd 64 fd 	      LDA	FontLookup,X	;4 
    824  f3dc		       85 d2		      STA	ScoreD2	;3
    825  f3de
    826  f3de				   Digit2Distance
    827  f3de		       a5 92		      LDA	TrafficOffset0 + 2	;3
    828  f3e0		       29 f0		      AND	#%11110000	;2
    829  f3e2		       4a		      LSR		; 2
    830  f3e3		       4a		      LSR		; 2
    831  f3e4		       4a		      LSR		; 2
    832  f3e5		       4a		      LSR		; 2
    833  f3e6		       aa		      TAX		; 2
    834  f3e7		       bd 64 fd 	      LDA	FontLookup,X	;4
    835  f3ea		       85 d1		      STA	ScoreD1	;3
    836  f3ec
    837  f3ec				   Digit3Distance
    838  f3ec		       a5 bd		      LDA	Traffic0Msb	;3
    839  f3ee		       29 0f		      AND	#%00001111	;2
    840  f3f0		       aa		      TAX		; 2
    841  f3f1		       bd 64 fd 	      LDA	FontLookup,X	;4 
    842  f3f4		       85 d0		      STA	ScoreD0	;3
    843  f3f6
    844  f3f6		       a9 63		      LDA	#<Pipe + #SCORE_SIZE -1	;3
    845  f3f8		       85 d4		      STA	ScoreD4	;3
    846  f3fa				   EndDrawDistance
    847  f3fa		       4c 3a f4 	      JMP	RightScoreWriteEnd	;3
    848  f3fd
    849  f3fd				   RightScoreWrite
    850  f3fd				   Digit0Timer
    851  f3fd		       a5 bc		      LDA	CountdownTimer	;3
    852  f3ff		       29 0f		      AND	#%00001111	;2
    853  f401		       aa		      TAX		; 2
    854  f402		       bd 64 fd 	      LDA	FontLookup,X	;4 
    855  f405		       85 d1		      STA	ScoreD1	;3
    856  f407
    857  f407				   Digit1Timer
    858  f407		       a5 bc		      LDA	CountdownTimer	;3
    859  f409		       29 f0		      AND	#%11110000	;2
    860  f40b		       4a		      LSR		; 2
    861  f40c		       4a		      LSR		; 2
    862  f40d		       4a		      LSR		; 2
    863  f40e		       4a		      LSR		; 2
    864  f40f		       aa		      TAX		; 2
    865  f410		       bd 64 fd 	      LDA	FontLookup,X	;4
    866  f413		       85 d0		      STA	ScoreD0	;3
    867  f415
    868  f415		       a9 63		      LDA	#<Pipe + #SCORE_SIZE -1	;3
    869  f417		       85 d2		      STA	ScoreD2	;3
    870  f419
    871  f419				   Digit0Speed
    872  f419		       a5 88		      LDA	Player0SpeedL
    873  f41b		       29 3c		      AND	#%00111100	;2 Discard the last bits
    874  f41d		       4a		      LSR		; 2
    875  f41e		       4a		      LSR		; 2
    876  f41f		       aa		      TAX		; 2
    877  f420		       bd 64 fd 	      LDA	FontLookup,X	;4
    878  f423		       85 d4		      STA	ScoreD4	;3
    879  f425
    880  f425				   Digit1Speed
    881  f425		       a5 88		      LDA	Player0SpeedL
    882  f427		       29 c0		      AND	#%11000000	;2 Discard the last bits
    883  f429		       2a		      ROL		;First goes into carry
    884  f42a		       2a		      ROL
    885  f42b		       2a		      ROL
    886  f42c		       85 b0		      STA	Tmp0
    887  f42e		       a5 89		      LDA	Player0SpeedH
    888  f430		       0a		      ASL
    889  f431		       0a		      ASL
    890  f432		       05 b0		      ORA	Tmp0
    891  f434		       aa		      TAX		; 2
    892  f435		       bd 64 fd 	      LDA	FontLookup,X	;4
    893  f438		       85 d3		      STA	ScoreD3	;3
    894  f43a
    895  f43a				   RightScoreWriteEnd
    896  f43a
    897  f43a				   OverScanWait
    898  f43a		       ad 84 02 	      LDA	INTIM
    899  f43d		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    900  f43f		       4c 75 f0 	      JMP	MainLoop
    901  f442
    902  f442				   Subroutines
    903  f442
    904  f442				   ClearPF		; 26
    905  f442		       a9 00		      LDA	#0	;2
    906  f444		       85 0d		      STA	PF0	;3
    907  f446		       85 0e		      STA	PF1	;3
    908  f448		       85 0f		      STA	PF2	;3	
    909  f44a		       85 81		      STA	PF0Cache	;3
    910  f44c		       85 82		      STA	PF1Cache	;3
    911  f44e		       85 83		      STA	PF2Cache	;3 
    912  f450		       60		      RTS		;6
    913  f451
    914  f451				   LoadPF		; 24
    915  f451		       a5 81		      LDA	PF0Cache	;3
    916  f453		       85 0d		      STA	PF0	;3
    917  f455
    918  f455		       a5 82		      LDA	PF1Cache	;3
    919  f457		       85 0e		      STA	PF1	;3
    920  f459
    921  f459		       a5 83		      LDA	PF2Cache	;3
    922  f45b		       85 0f		      STA	PF2	;3
    923  f45d
    924  f45d		       60		      RTS		;6
    925  f45e
    926  f45e							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
    927  fd00					      org	$FD00
    928  fd00				   Font
    929  fd00				   C0
    930  fd00		       e7		      .byte.b	#%11100111	;
    931  fd01		       a5		      .byte.b	#%10100101	; 
    932  fd02		       a5		      .byte.b	#%10100101	; 
    933  fd03		       a5		      .byte.b	#%10100101	; 
    934  fd04		       e7		      .byte.b	#%11100111	;	
    935  fd05				   C1
    936  fd05		       e7		      .byte.b	#%11100111	;
    937  fd06		       42		      .byte.b	#%01000010	; 
    938  fd07		       42		      .byte.b	#%01000010	; 
    939  fd08		       42		      .byte.b	#%01000010	; 
    940  fd09		       66		      .byte.b	#%01100110	;
    941  fd0a				   C2
    942  fd0a		       e7		      .byte.b	#%11100111	;
    943  fd0b		       24		      .byte.b	#%00100100	; 
    944  fd0c		       e7		      .byte.b	#%11100111	; 
    945  fd0d		       81		      .byte.b	#%10000001	; 
    946  fd0e		       e7		      .byte.b	#%11100111	;
    947  fd0f				   C3
    948  fd0f		       e7		      .byte.b	#%11100111	;
    949  fd10		       81		      .byte.b	#%10000001	; 
    950  fd11		       e7		      .byte.b	#%11100111	; 
    951  fd12		       81		      .byte.b	#%10000001	; 
    952  fd13		       e7		      .byte.b	#%11100111	;
    953  fd14				   C4
    954  fd14		       81		      .byte.b	#%10000001	;
    955  fd15		       81		      .byte.b	#%10000001	; 
    956  fd16		       e7		      .byte.b	#%11100111	; 
    957  fd17		       a5		      .byte.b	#%10100101	; 
    958  fd18		       a5		      .byte.b	#%10100101	;
    959  fd19				   C5
    960  fd19		       e7		      .byte.b	#%11100111	;
    961  fd1a		       81		      .byte.b	#%10000001	; 
    962  fd1b		       e7		      .byte.b	#%11100111	; 
    963  fd1c		       24		      .byte.b	#%00100100	; 
    964  fd1d		       e7		      .byte.b	#%11100111	;
    965  fd1e				   C6
    966  fd1e		       e7		      .byte.b	#%11100111	;
    967  fd1f		       a5		      .byte.b	#%10100101	; 
    968  fd20		       e7		      .byte.b	#%11100111	; 
    969  fd21		       24		      .byte.b	#%00100100	; 
    970  fd22		       e7		      .byte.b	#%11100111	;
    971  fd23				   C7
    972  fd23		       81		      .byte.b	#%10000001	;
    973  fd24		       81		      .byte.b	#%10000001	; 
    974  fd25		       81		      .byte.b	#%10000001	; 
    975  fd26		       81		      .byte.b	#%10000001	; 
    976  fd27		       e7		      .byte.b	#%11100111	;
    977  fd28				   C8
    978  fd28		       e7		      .byte.b	#%11100111	;
    979  fd29		       a5		      .byte.b	#%10100101	; 
    980  fd2a		       e7		      .byte.b	#%11100111	; 
    981  fd2b		       a5		      .byte.b	#%10100101	; 
    982  fd2c		       e7		      .byte.b	#%11100111	;
    983  fd2d				   C9
    984  fd2d		       e7		      .byte.b	#%11100111	;
    985  fd2e		       81		      .byte.b	#%10000001	; 
    986  fd2f		       e7		      .byte.b	#%11100111	; 
    987  fd30		       a5		      .byte.b	#%10100101	; 
    988  fd31		       e7		      .byte.b	#%11100111	;
    989  fd32				   CA
    990  fd32		       a5		      .byte.b	#%10100101	;
    991  fd33		       a5		      .byte.b	#%10100101	; 
    992  fd34		       e7		      .byte.b	#%11100111	; 
    993  fd35		       a5		      .byte.b	#%10100101	; 
    994  fd36		       e7		      .byte.b	#%11100111	;
    995  fd37				   CB
    996  fd37		       66		      .byte.b	#%01100110	;
    997  fd38		       a5		      .byte.b	#%10100101	; 
    998  fd39		       66		      .byte.b	#%01100110	; 
    999  fd3a		       a5		      .byte.b	#%10100101	;
   1000  fd3b		       66		      .byte.b	#%01100110	;
   1001  fd3c				   CC
   1002  fd3c		       e7		      .byte.b	#%11100111	;
   1003  fd3d		       24		      .byte.b	#%00100100	; 
   1004  fd3e		       24		      .byte.b	#%00100100	; 
   1005  fd3f		       24		      .byte.b	#%00100100	;
   1006  fd40		       e7		      .byte.b	#%11100111	;
   1007  fd41
   1008  fd41				   CD
   1009  fd41		       66		      .byte.b	#%01100110	;
   1010  fd42		       a5		      .byte.b	#%10100101	; 
   1011  fd43		       a5		      .byte.b	#%10100101	; 
   1012  fd44		       a5		      .byte.b	#%10100101	;
   1013  fd45		       66		      .byte.b	#%01100110	;
   1014  fd46
   1015  fd46				   CE
   1016  fd46		       e7		      .byte.b	#%11100111	;
   1017  fd47		       24		      .byte.b	#%00100100	; 
   1018  fd48		       e7		      .byte.b	#%11100111	; 
   1019  fd49		       24		      .byte.b	#%00100100	; 
   1020  fd4a		       e7		      .byte.b	#%11100111	;
   1021  fd4b
   1022  fd4b				   CF
   1023  fd4b		       24		      .byte.b	#%00100100	;
   1024  fd4c		       24		      .byte.b	#%00100100	; 
   1025  fd4d		       e7		      .byte.b	#%11100111	; 
   1026  fd4e		       24		      .byte.b	#%00100100	; 
   1027  fd4f		       e7		      .byte.b	#%11100111	;
   1028  fd50
   1029  fd50				   Space		; Moved from the beggining so 0 to F is fast to draw.
   1030  fd50		       00		      .byte.b	%0	;
   1031  fd51		       00		      .byte.b	#0	;
   1032  fd52		       00		      .byte.b	#0	;
   1033  fd53		       00		      .byte.b	#0	;
   1034  fd54		       00		      .byte.b	#0	;
   1035  fd55
   1036  fd55				   CS
   1037  fd55		       66		      .byte.b	#%01100110	;
   1038  fd56		       81		      .byte.b	#%10000001	; 
   1039  fd57		       42		      .byte.b	#%01000010	; 
   1040  fd58		       24		      .byte.b	#%00100100	; 
   1041  fd59		       c3		      .byte.b	#%11000011	;
   1042  fd5a
   1043  fd5a				   CT
   1044  fd5a		       42		      .byte.b	#%01000010	;
   1045  fd5b		       42		      .byte.b	#%01000010	; 
   1046  fd5c		       42		      .byte.b	#%01000010	; 
   1047  fd5d		       42		      .byte.b	#%01000010	; 
   1048  fd5e		       e7		      .byte.b	#%11100111	;
   1049  fd5f
   1050  fd5f				   Pipe
   1051  fd5f		       42		      .byte.b	#%01000010	;
   1052  fd60		       00		      .byte.b	#%00000000	; 
   1053  fd61		       42		      .byte.b	#%01000010	; 
   1054  fd62		       00		      .byte.b	#%00000000	; 
   1055  fd63		       42		      .byte.b	#%01000010	;
   1056  fd64
   1057  fd64				   FontLookup		; Very fast font lookup for dynamic values!
   1058  fd64		       04		      .byte.b	#<C0 + #SCORE_SIZE -1
   1059  fd65		       09		      .byte.b	#<C1 + #SCORE_SIZE -1
   1060  fd66		       0e		      .byte.b	#<C2 + #SCORE_SIZE -1
   1061  fd67		       13		      .byte.b	#<C3 + #SCORE_SIZE -1
   1062  fd68		       18		      .byte.b	#<C4 + #SCORE_SIZE -1
   1063  fd69		       1d		      .byte.b	#<C5 + #SCORE_SIZE -1
   1064  fd6a		       22		      .byte.b	#<C6 + #SCORE_SIZE -1
   1065  fd6b		       27		      .byte.b	#<C7 + #SCORE_SIZE -1
   1066  fd6c		       2c		      .byte.b	#<C8 + #SCORE_SIZE -1
   1067  fd6d		       31		      .byte.b	#<C9 + #SCORE_SIZE -1
   1068  fd6e		       36		      .byte.b	#<CA + #SCORE_SIZE -1
   1069  fd6f		       3b		      .byte.b	#<CB + #SCORE_SIZE -1
   1070  fd70		       40		      .byte.b	#<CC + #SCORE_SIZE -1
   1071  fd71		       45		      .byte.b	#<CD + #SCORE_SIZE -1
   1072  fd72		       4a		      .byte.b	#<CE + #SCORE_SIZE -1
   1073  fd73		       4f		      .byte.b	#<CF + #SCORE_SIZE -1
   1074  fd74
   1075  fd74
   1076  fe00					      org	$FE00
   1077  fe00				   AesTable
   1078  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   1079  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   1080  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   1081  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   1082  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   1083  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   1084  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   1085  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   1086  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   1087  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   1088  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   1089  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   1090  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   1091  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   1092  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   1093  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   1094  ff00
   1095  ff00							; From FF00 to FFFB (122 bytes) to use here
   1096  ff00
   1097  ff00				   CarSprite		; Upside down
   1098  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   1099  ff01		       7e		      .byte.b	#%01111110
   1100  ff02		       24		      .byte.b	#%00100100
   1101  ff03		       bd		      .byte.b	#%10111101
   1102  ff04		       3c		      .byte.b	#%00111100
   1103  ff05		       bd		      .byte.b	#%10111101
   1104  ff06		       3c		      .byte.b	#%00111100
   1105  ff07		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
   1106  ff39
   1107  ff39
   1108  ff39				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
   1109  ff39		       00		      .byte.b	#$00	;  Trafic0 L
   1110  ff3a		       00		      .byte.b	#$00	;  Trafic0 H
   1111  ff3b		       0a		      .byte.b	#$0A	;  Trafic1 L
   1112  ff3c		       01		      .byte.b	#$01	;  Trafic1 H
   1113  ff3d		       e6		      .byte.b	#$E6	;  Trafic2 L
   1114  ff3e		       00		      .byte.b	#$00	;  Trafic2 H
   1115  ff3f		       c2		      .byte.b	#$C2	;  Trafic3 L
   1116  ff40		       00		      .byte.b	#$00	;  Trafic3 H
   1117  ff41		       9e		      .byte.b	#$9E	;  Trafic4 L
   1118  ff42		       00		      .byte.b	#$00	;  Trafic4 H
   1119  ff43
   1120  ff43
   1121  fffc					      org	$FFFC
   1122  fffc		       04 f0		      .word.w	Start
   1123  fffe		       04 f0		      .word.w	Start
