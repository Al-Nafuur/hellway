------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 07	   CAR_SIZE   =	7
     11  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     12  f000		       00 0a	   CAR_0_Y    =	10
     13  f000							;16 bit precision
     14  f000							;640 max speed!
     15  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     16  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     17  f000		       00 00	   CAR_MIN_SPEED_H =	0
     18  f000		       00 00	   CAR_MIN_SPEED_L =	0
     19  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     20  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     21  f000		       00 01	   ACCELERATE_SPEED =	1
     22  f000		       00 04	   BREAK_SPEED =	4
     23  f000		       00 10	   ROM_START_MSB =	$10
     24  f000							;For now, will use in aal rows until figure out if make it dynamic or not.
     25  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000
     26  f000		       00 20	   TRAFFIC_1_CHANCE =	#$20
     27  f000
     28  f000		       00 34	   TRAFFIC_COLOR =	$34
     29  f000
     30  f000							;memory	
     31  f000		       00 80	   Car0Line   =	$80
     32  f000
     33  f000		       00 81	   GRP0Cache  =	$81
     34  f000		       00 82	   PF0Cache   =	$82
     35  f000		       00 83	   PF1Cache   =	$83
     36  f000		       00 84	   PF2Cache   =	$84
     37  f000
     38  f000		       00 86	   FrameCount0 =	$86	;
     39  f000		       00 87	   FrameCount1 =	$87	;
     40  f000
     41  f000		       00 88	   Car0SpeedL =	$88
     42  f000		       00 89	   Car0SpeedH =	$89
     43  f000
     44  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     45  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     46  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     47  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     48  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     49  f000
     50  f000							;Temporary variables, multiple uses
     51  f000		       00 b0	   Tmp0       =	$B0
     52  f000		       00 b1	   Tmp1       =	$B1
     53  f000		       00 b2	   Tmp2       =	$B2
     54  f000
     55  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     56  f000
     57  f000							;generic start up stuff, put zero in all...
     58  f000				   Start
     59  f000		       78		      SEI
     60  f001		       d8		      CLD
     61  f002		       a2 ff		      LDX	#$FF
     62  f004		       9a		      TXS
     63  f005		       a9 00		      LDA	#0
     64  f007				   ClearMem
     65  f007		       95 00		      STA	0,X
     66  f009		       ca		      DEX
     67  f00a		       d0 fb		      BNE	ClearMem
     68  f00c
     69  f00c							;Setting some variables...
     70  f00c
     71  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     72  f00e		       85 06		      STA	COLUP0
     73  f010
     74  f010		       a9 0a		      LDA	#10
     75  f012		       85 94		      STA	TrafficOffset1	;Initial Y Position
     76  f014
     77  f014							;Extract to subrotine? Used also dor the offsets
     78  f014		       a9 00		      LDA	#CAR_MIN_SPEED_L
     79  f016		       85 88		      STA	Car0SpeedL
     80  f018		       a9 00		      LDA	#CAR_MIN_SPEED_H
     81  f01a		       85 89		      STA	Car0SpeedH
     82  f01c
     83  f01c							;Traffic colour
     84  f01c		       a9 34		      LDA	#TRAFFIC_COLOR
     85  f01e		       85 08		      STA	COLUPF
     86  f020
     87  f020							;mirror the playfield, also score mode.
     88  f020		       a9 00		      LDA	#%00000000
     89  f022		       85 0a		      STA	CTRLPF
     90  f024
     91  f024							;VSYNC time
     92  f024				   MainLoop
     93  f024		       a9 02		      LDA	#2
     94  f026		       85 00		      STA	VSYNC
     95  f028		       85 02		      STA	WSYNC
     96  f02a		       85 02		      STA	WSYNC
     97  f02c							;Cool, can put code here! It removed the black line on top
     98  f02c							;Make Objects move in the X axys
     99  f02c		       85 2a		      STA	HMOVE	;2
    100  f02e							;This must be done after a WSync, otherwise it is impossible to predict the X position
    101  f02e		       a5 c0		      LDA	GameStatus	;3
    102  f030		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    103  f032		       f0 12		      BEQ	DoNotSetPlayerX	;3
    104  f034							;Do something better with this 32 cycles
      0  f034					      SLEEP	32	;
      1  f034				   .CYCLES    SET	32
      2  f034
      3  f034				  -	      IF	.CYCLES < 2
      4  f034				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f034				  -	      ERR
      6  f034					      ENDIF
      7  f034
      8  f034				  -	      IF	.CYCLES & 1
      9  f034				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f034				  -	      nop	0
     11  f034				  -	      ELSE
     12  f034				  -	      bit	VSYNC
     13  f034				  -	      ENDIF
     14  f034				  -.CYCLES    SET	.CYCLES - 3
     15  f034					      ENDIF
     16  f034
     17  f034					      REPEAT	.CYCLES / 2
     18  f034		       ea		      nop
     17  f034					      REPEND
     18  f035		       ea		      nop
     17  f035					      REPEND
     18  f036		       ea		      nop
     17  f036					      REPEND
     18  f037		       ea		      nop
     17  f037					      REPEND
     18  f038		       ea		      nop
     17  f038					      REPEND
     18  f039		       ea		      nop
     17  f039					      REPEND
     18  f03a		       ea		      nop
     17  f03a					      REPEND
     18  f03b		       ea		      nop
     17  f03b					      REPEND
     18  f03c		       ea		      nop
     17  f03c					      REPEND
     18  f03d		       ea		      nop
     17  f03d					      REPEND
     18  f03e		       ea		      nop
     17  f03e					      REPEND
     18  f03f		       ea		      nop
     17  f03f					      REPEND
     18  f040		       ea		      nop
     17  f040					      REPEND
     18  f041		       ea		      nop
     17  f041					      REPEND
     18  f042		       ea		      nop
     17  f042					      REPEND
     18  f043		       ea		      nop
     19  f044					      REPEND
    106  f044		       85 10		      STA	RESP0	;3
    107  f046				   DoNotSetPlayerX
    108  f046
    109  f046		       85 02		      STA	WSYNC
    110  f048		       a9 2b		      LDA	#43
    111  f04a		       8d 96 02 	      STA	TIM64T
    112  f04d		       a9 00		      LDA	#0
    113  f04f		       85 00		      STA	VSYNC
    114  f051
    115  f051							;Read Fire Button before, will make it start the game for now.
    116  f051		       a5 0c		      LDA	INPT4
    117  f053		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    118  f055		       a5 c0		      LDA	GameStatus
    119  f057		       09 80		      ORA	#%10000000
    120  f059		       85 c0		      STA	GameStatus
    121  f05b				   SkipGameStart
    122  f05b
    123  f05b							;Does not update the game if not running
    124  f05b		       a5 c0		      LDA	GameStatus	;3
    125  f05d		       49 80		      EOR	#%10000000	;2 game is running...
    126  f05f		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    127  f061		       4c 18 f1 	      JMP	SkipUpdateLogic
    128  f064
    129  f064				   ContinueWithGameLogic
    130  f064
    131  f064							; for left and right, we're gonna 
    132  f064							; set the horizontal speed, and then do
    133  f064							; a single HMOVE.  We'll use X to hold the
    134  f064							; horizontal speed, then store it in the 
    135  f064							; appropriate register
    136  f064
    137  f064							;assum horiz speed will be zero
    138  f064
    139  f064							;Begin read dpad
    140  f064		       a2 00		      LDX	#0
    141  f066
    142  f066		       a9 40		      LDA	#%01000000	;Left
    143  f068		       2c 80 02 	      BIT	SWCHA
    144  f06b		       d0 02		      BNE	SkipMoveLeft
    145  f06d		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    146  f06f				   SkipMoveLeft
    147  f06f
    148  f06f		       a9 80		      LDA	#%10000000	;Right
    149  f071		       2c 80 02 	      BIT	SWCHA
    150  f074		       d0 02		      BNE	SkipMoveRight
    151  f076		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    152  f078				   SkipMoveRight
    153  f078
    154  f078		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    155  f07a
    156  f07a
    157  f07a							;Acelerates / breaks the car
    158  f07a		       a9 10		      LDA	#%00010000	;UP in controller
    159  f07c		       2c 80 02 	      BIT	SWCHA
    160  f07f		       d0 21		      BNE	SkipAccelerate
    161  f081
    162  f081							;Adds speed
    163  f081		       18		      CLC
    164  f082		       a5 88		      LDA	Car0SpeedL
    165  f084		       69 01		      ADC	#ACCELERATE_SPEED
    166  f086		       85 88		      STA	Car0SpeedL
    167  f088		       a5 89		      LDA	Car0SpeedH
    168  f08a		       69 00		      ADC	#0
    169  f08c		       85 89		      STA	Car0SpeedH
    170  f08e
    171  f08e							;Checks if already max
    172  f08e		       c9 02		      CMP	#CAR_MAX_SPEED_H
    173  f090		       90 10		      BCC	SkipAccelerate	; less than my max speed
    174  f092		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    175  f094							;High bit is max, compare the low
    176  f094		       a5 88		      LDA	Car0SpeedL
    177  f096		       c9 80		      CMP	#CAR_MAX_SPEED_L
    178  f098		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    179  f09a							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    180  f09a
    181  f09a				   ResetToMaxSpeed		; Speed is more, or is already max
    182  f09a		       a9 02		      LDA	#CAR_MAX_SPEED_H
    183  f09c		       85 89		      STA	Car0SpeedH
    184  f09e		       a9 80		      LDA	#CAR_MAX_SPEED_L
    185  f0a0		       85 88		      STA	Car0SpeedL
    186  f0a2
    187  f0a2				   SkipAccelerate
    188  f0a2
    189  f0a2							;Break
    190  f0a2		       a9 20		      LDA	#%00100000	;Down in controller
    191  f0a4		       2c 80 02 	      BIT	SWCHA
    192  f0a7		       d0 26		      BNE	SkipBreak
    193  f0a9
    194  f0a9							;Decrease speed
    195  f0a9		       38		      SEC
    196  f0aa		       a5 88		      LDA	Car0SpeedL
    197  f0ac		       e9 04		      SBC	#BREAK_SPEED
    198  f0ae		       85 88		      STA	Car0SpeedL
    199  f0b0		       a5 89		      LDA	Car0SpeedH
    200  f0b2		       e9 00		      SBC	#0
    201  f0b4		       85 89		      STA	Car0SpeedH
    202  f0b6
    203  f0b6							;Checks if is min speed
    204  f0b6		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    205  f0b8		       c9 00		      CMP	#CAR_MIN_SPEED_H
    206  f0ba		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    207  f0bc		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    208  f0be
    209  f0be				   CompareLBreakSpeed
    210  f0be		       a5 88		      LDA	Car0SpeedL
    211  f0c0		       c9 00		      CMP	#CAR_MIN_SPEED_L
    212  f0c2		       90 03		      BCC	ResetMinSpeed	; Less than memory
    213  f0c4		       4c cf f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    214  f0c7
    215  f0c7				   ResetMinSpeed
    216  f0c7		       a9 00		      LDA	#CAR_MIN_SPEED_H
    217  f0c9		       85 89		      STA	Car0SpeedH
    218  f0cb		       a9 00		      LDA	#CAR_MIN_SPEED_L
    219  f0cd		       85 88		      STA	Car0SpeedL
    220  f0cf
    221  f0cf				   SkipBreak
    222  f0cf
    223  f0cf							;Temporary code until cars are dynamic, will make it wrap
    224  f0cf							;LDA TrafficOffset1
    225  f0cf							;AND #%00111111
    226  f0cf							;STA TrafficOffset1
    227  f0cf
    228  f0cf							;Finish read dpad
    229  f0cf
    230  f0cf
    231  f0cf							;Updates all offsets 24 bits
    232  f0cf		       a2 00		      LDX	#0	; Memory Offset 24 bit
    233  f0d1		       a0 00		      LDY	#0	; Line Speeds 16 bits
    234  f0d3				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    235  f0d3		       38		      SEC
    236  f0d4		       a5 88		      LDA	Car0SpeedL
    237  f0d6		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    238  f0d9		       85 b0		      STA	Tmp0
    239  f0db		       c8		      INY
    240  f0dc		       a5 89		      LDA	Car0SpeedH
    241  f0de		       f9 07 ff 	      SBC	TrafficSpeeds,Y
    242  f0e1		       85 b1		      STA	Tmp1
    243  f0e3		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    244  f0e5		       e9 00		      SBC	#0
    245  f0e7		       85 b2		      STA	Tmp2
    246  f0e9
    247  f0e9
    248  f0e9							;Adds the result
    249  f0e9		       18		      CLC
    250  f0ea		       a5 b0		      LDA	Tmp0
    251  f0ec		       75 90		      ADC	TrafficOffset0,X
    252  f0ee		       95 90		      STA	TrafficOffset0,X
    253  f0f0		       e8		      INX
    254  f0f1		       a5 b1		      LDA	Tmp1
    255  f0f3		       75 90		      ADC	TrafficOffset0,X
    256  f0f5		       95 90		      STA	TrafficOffset0,X
    257  f0f7		       e8		      INX
    258  f0f8		       a5 b2		      LDA	Tmp2	; Carry
    259  f0fa		       75 90		      ADC	TrafficOffset0,X
    260  f0fc		       95 90		      STA	TrafficOffset0,X
    261  f0fe		       e8		      INX
    262  f0ff		       38		      SEC
    263  f100		       69 00		      ADC	#0	;Increment by one
    264  f102		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    265  f104
    266  f104
    267  f104				   PrepareNextUpdateLoop
    268  f104		       c8		      INY
    269  f105		       e8		      INX
    270  f106		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    271  f108		       d0 c9		      BNE	UpdateOffsets
    272  f10a
    273  f10a							;Will probably be useful		
    274  f10a				   CountFrame
    275  f10a		       e6 86		      INC	FrameCount0
    276  f10c		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    277  f10e		       e6 87		      INC	FrameCount1
    278  f110				   SkipIncFC1
    279  f110
    280  f110							; ;Remove this	
    281  f110							;	LDA #0
    282  f110							;	STA COLUPF 
    283  f110							;	LDA FrameCount0
    284  f110							;	; AND #%00000011
    285  f110							;	; BEQ FinishBlink
    286  f110							;	AND #%00000001
    287  f110							;	BEQ FinishBlink
    288  f110							;	LDA #TRAFFIC_COLOR
    289  f110							;	STA COLUPF 
    290  f110							; FinishBlink
    291  f110
    292  f110				   TestCollision		;
    293  f110							; see if car0 and playfield collide, and change the background color if so
    294  f110		       a9 80		      LDA	#%10000000
    295  f112		       24 02		      BIT	CXP0FB
    296  f114		       f0 00		      BEQ	NoCollision	;skip if not hitting...
    297  f116							;LDA FrameCount0	;must be a hit! Change rand color bg
    298  f116							;STA COLUBK	;and store as the bgcolor
    299  f116				   NoCollision
    300  f116		       85 2c		      STA	CXCLR	;reset the collision detection for next frame
    301  f118
    302  f118				   SkipUpdateLogic
    303  f118
    304  f118							; After here we are going to update the screen, No more heavy code
    305  f118				   WaitForVblankEnd
    306  f118		       ad 84 02 	      LDA	INTIM
    307  f11b		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    308  f11d
    309  f11d							;50 cycles worse case before the VSync 
    310  f11d		       a0 3f		      LDY	#SCREEN_SIZE - 1	;#63 ; 	
    311  f11f
    312  f11f		       85 02		      STA	WSYNC
    313  f121
    314  f121		       a9 01		      LDA	#1
    315  f123		       85 01		      STA	VBLANK
    316  f125
    317  f125
    318  f125							;main scanline loop...
    319  f125				   ScanLoop
    320  f125		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    321  f127
    322  f127							;Start of next line!			
    323  f127				   DrawCache		;24 Is the last line going to the top of the next frame?
    324  f127
    325  f127		       a5 81		      LDA	GRP0Cache	;3 ;buffer was set during last scanline
    326  f129		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    327  f12b
    328  f12b		       a5 82		      LDA	PF0Cache	;3
    329  f12d		       85 0d		      STA	PF0	;3
    330  f12f
    331  f12f		       a5 83		      LDA	PF1Cache	;3
    332  f131		       85 0e		      STA	PF1	;3
    333  f133
    334  f133		       a5 84		      LDA	PF2Cache	;3
    335  f135		       85 0f		      STA	PF2	;3
    336  f137
    337  f137
    338  f137				   ClearCache		;11 Only the playfields
    339  f137							;LDA #$0 ;2 ;Clear cache
    340  f137							;STA PF1Cache ;3
    341  f137							;STA PF2Cache ; 3
    342  f137							;STA PF0Cache ; 3
    343  f137
    344  f137				   DrawTraffic0 		; 16 max, traffic 0 is the border
    345  f137		       98		      TYA		;2
    346  f138		       18		      CLC		;2
    347  f139		       65 91		      ADC	TrafficOffset0 + 1	; 3
    348  f13b		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    349  f13d		       f0 05		      BEQ	EraseTraffic0	; 2
    350  f13f		       a9 f0		      LDA	#%11110000	; 2
    351  f141		       4c 46 f1 	      JMP	StoreTraffic0	;3
    352  f144				   EraseTraffic0
    353  f144		       a9 00		      LDA	#0	; 2	
    354  f146				   StoreTraffic0
    355  f146		       85 82		      STA	PF0Cache	;3
    356  f148				   SkipDrawTraffic0
    357  f148
    358  f148				   BeginDrawCar0Block		;21 is the max, since if draw, does not check active
    359  f148		       a6 80		      LDX	Car0Line	;3 check the visible player line...
    360  f14a		       f0 0a		      BEQ	FinishDrawCar0	;2	skip the drawing if its zero...
    361  f14c				   DrawCar0
    362  f14c		       bd ff fe 	      LDA	CarSprite-1,X	;5	;otherwise, load the correct line from CarSprite
    363  f14f							;section below... it's off by 1 though, since at zero
    364  f14f							;we stop drawing
    365  f14f		       85 81		      STA	GRP0Cache	;3	;put that line as player graphic for the next line
    366  f151		       c6 80		      DEC	Car0Line	;5	and decrement the line count
    367  f153		       4c 5e f1 	      JMP	SkipActivateCar0	;3 save some cpu time
    368  f156				   FinishDrawCar0
    369  f156
    370  f156				   CheckActivateCar0		;9 max
    371  f156		       c0 0a		      CPY	#CAR_0_Y	;2
    372  f158		       d0 04		      BNE	SkipActivateCar0	;2
    373  f15a		       a9 07		      LDA	#CAR_SIZE	;2
    374  f15c		       85 80		      STA	Car0Line	;3
    375  f15e				   SkipActivateCar0		;EndDrawCar0Block
    376  f15e
    377  f15e							;STA WSYNC ;72
    378  f15e
    379  f15e
    380  f15e				   DrawTraffic1 		;
    381  f15e		       98		      TYA		; 2
    382  f15f		       18		      CLC		; 2 
    383  f160		       65 95		      ADC	TrafficOffset1 + 1	;3
    384  f162		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    385  f164		       b0 05		      BCS	EorOffsetWithCarry	; 4 max if branch max, 2 otherwise
    386  f166		       45 96		      EOR	TrafficOffset1 + 2	; 2
    387  f168		       4c 6d f1 	      JMP	AfterEorOffsetWithCarry	; 3
    388  f16b				   EorOffsetWithCarry
    389  f16b		       45 97		      EOR	TrafficOffset1 + 3	; 3
    390  f16d				   AfterEorOffsetWithCarry
    391  f16d		       aa		      TAX		;2
    392  f16e		       bd 00 fe 	      LDA	AesTable,X	; 4
    393  f171		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    394  f173		       b0 05		      BCS	EraseTraffic1	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    395  f175		       a9 60		      LDA	#%01100000	;2
    396  f177		       4c 7c f1 	      JMP	StoreTraffic1	;3
    397  f17a				   EraseTraffic1
    398  f17a		       a9 00		      LDA	#0	;2
    399  f17c				   StoreTraffic1
    400  f17c		       85 83		      STA	PF1Cache	;3
    401  f17e				   FinishDrawTraffic1
    402  f17e							;34 worse
    403  f17e
    404  f17e				   DrawTraffic2 		;
    405  f17e		       98		      TYA		; 2
    406  f17f		       18		      CLC		; 2 
    407  f180		       65 99		      ADC	TrafficOffset2 + 1	;3
    408  f182		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    409  f184		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    410  f186		       45 9a		      EOR	TrafficOffset2 + 2	; 2
    411  f188		       4c 8d f1 	      JMP	AfterEorOffsetWithCarry2	; 3
    412  f18b				   EorOffsetWithCarry2
    413  f18b		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    414  f18d				   AfterEorOffsetWithCarry2
    415  f18d		       aa		      TAX		;2
    416  f18e		       bd 00 fe 	      LDA	AesTable,X	; 4
    417  f191		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    418  f193		       b0 04		      BCS	EraseTraffic2	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    419  f195		       a5 83		      LDA	PF1Cache	;3
    420  f197		       09 18		      ORA	#%00011000	;2
    421  f199							;STA PF1Cache ;3
    422  f199				   EraseTraffic2
    423  f199		       a9 00		      LDA	#0
    424  f19b				   StoreTraffic2
    425  f19b							;STA PF1Cache ;3
    426  f19b				   FinishDrawTraffic2
    427  f19b							;34 cyles worse case!
    428  f19b
    429  f19b							;STA WSYNC ;65 / 137
    430  f19b
    431  f19b				   DrawTraffic3 		;
    432  f19b		       98		      TYA		; 2
    433  f19c		       18		      CLC		; 2 
    434  f19d		       65 9d		      ADC	TrafficOffset3 + 1	;3
    435  f19f		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    436  f1a1		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    437  f1a3		       45 9e		      EOR	TrafficOffset3 + 2	; 2
    438  f1a5		       4c aa f1 	      JMP	AfterEorOffsetWithCarry3	; 3
    439  f1a8				   EorOffsetWithCarry3
    440  f1a8		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    441  f1aa				   AfterEorOffsetWithCarry3
    442  f1aa		       aa		      TAX		;2
    443  f1ab		       bd 00 fe 	      LDA	AesTable,X	; 4
    444  f1ae		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    445  f1b0		       b0 04		      BCS	FinishDrawTraffic3	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    446  f1b2		       a5 83		      LDA	PF1Cache	;3
    447  f1b4		       09 03		      ORA	#%00000011	;2
    448  f1b6							;STA PF1Cache ;3
    449  f1b6				   FinishDrawTraffic3
    450  f1b6							;34 cyles worse case!
    451  f1b6
    452  f1b6				   DrawTraffic4 		;
    453  f1b6		       98		      TYA		; 2
    454  f1b7		       18		      CLC		; 2 
    455  f1b8		       65 a1		      ADC	TrafficOffset4 + 1	;3
    456  f1ba		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    457  f1bc		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    458  f1be		       45 a2		      EOR	TrafficOffset4 + 2	; 2
    459  f1c0		       4c c5 f1 	      JMP	AfterEorOffsetWithCarry4	; 3
    460  f1c3				   EorOffsetWithCarry4
    461  f1c3		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    462  f1c5				   AfterEorOffsetWithCarry4
    463  f1c5		       aa		      TAX		;2
    464  f1c6		       bd 00 fe 	      LDA	AesTable,X	; 4
    465  f1c9		       c9 20		      CMP	#TRAFFIC_1_CHANCE	;2
    466  f1cb		       b0 02		      BCS	FinishDrawTraffic4	; Greater or equal don't draw; 2 (no branch) or 3 (branch) or 4 (Branch cross page) 
    467  f1cd		       a9 b6		      LDA	#%10110110	;2
    468  f1cf							;STA PF2Cache ;3
    469  f1cf				   FinishDrawTraffic4
    470  f1cf							;31 max
    471  f1cf
    472  f1cf							;STA WSYNC ;65 / 202 of 222
    473  f1cf
    474  f1cf				   WhileScanLoop
    475  f1cf		       88		      DEY		;2
    476  f1d0		       30 03		      BMI	FinishScanLoop	;2 or 3 ;two big Breach	
    477  f1d2		       4c 25 f1 	      JMP	ScanLoop	;3
    478  f1d5				   FinishScanLoop		; 7 209 of 222
    479  f1d5
    480  f1d5
    481  f1d5				   PrepareOverscan
    482  f1d5		       a9 02		      LDA	#2
    483  f1d7		       85 02		      STA	WSYNC
    484  f1d9		       85 01		      STA	VBLANK
    485  f1db
    486  f1db		       a9 25		      LDA	#37
    487  f1dd		       8d 96 02 	      STA	TIM64T
    488  f1e0							;LDA #0
    489  f1e0							;STA VSYNC Is it needed? Why is this here, I don't remember		
    490  f1e0
    491  f1e0							;Do more logic
    492  f1e0
    493  f1e0				   OverScanWait
    494  f1e0		       ad 84 02 	      LDA	INTIM
    495  f1e3		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    496  f1e5		       4c 24 f0 	      JMP	MainLoop
    497  f1e8
    498  f1e8
    499  fe00					      org	$FE00
    500  fe00				   AesTable
    501  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
    502  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
    503  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
    504  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
    505  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
    506  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
    507  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
    508  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
    509  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
    510  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
    511  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
    512  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
    513  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
    514  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
    515  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
    516  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
    517  ff00
    518  ff00							; From FF00 to FFFB (122 bytes) to use here
    519  ff00
    520  ff00				   CarSprite		; Upside down
    521  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    522  ff01		       ff		      .byte.b	#%11111111
    523  ff02		       24		      .byte.b	#%00100100
    524  ff03		       bd		      .byte.b	#%10111101
    525  ff04		       3c		      .byte.b	#%00111100
    526  ff05		       bd		      .byte.b	#%10111101
    527  ff06		       3c		      .byte.b	#%00111100
    528  ff07
    529  ff07
    530  ff07				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    531  ff07		       00		      .byte.b	#$00	;  Trafic0 L
    532  ff08		       00		      .byte.b	#$00	;  Trafic0 H
    533  ff09		       a0		      .byte.b	#$A0	;  Trafic1 L
    534  ff0a		       00		      .byte.b	#$00	;  Trafic1 H
    535  ff0b		       ea		      .byte.b	#$EA	;  Trafic2 L
    536  ff0c		       00		      .byte.b	#$00	;  Trafic2 H
    537  ff0d		       00		      .byte.b	#$00	;  Trafic3 L
    538  ff0e		       01		      .byte.b	#$01	;  Trafic3 H
    539  ff0f		       a0		      .byte.b	#$A0	;  Trafic4 L
    540  ff10		       01		      .byte.b	#$01	;  Trafic4 H
    541  ff11
    542  ff11
    543  fffc					      org	$FFFC
    544  fffc		       00 f0		      .word.w	Start
    545  fffe		       00 f0		      .word.w	Start
