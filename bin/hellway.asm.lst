------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0c	   BREAK_SPEED =	12
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000		       00 80	   GRP0Cache  =	$80
     97  f000		       00 81	   PF0Cache   =	$81
     98  f000		       00 82	   PF1Cache   =	$82
     99  f000		       00 83	   PF2Cache   =	$83
    100  f000		       00 84	   GRP1Cache  =	$84
    101  f000		       00 85	   ENABLCache =	$85
    102  f000		       00 86	   ENAM0Cache =	$86
    103  f000		       00 87	   ENAM1Cache =	$87
    104  f000
    105  f000		       00 88	   ParallaxMode =	$88
    106  f000
    107  f000		       00 8c	   FrameCount0 =	$8C	;
    108  f000		       00 8d	   FrameCount1 =	$8D	;
    109  f000
    110  f000		       00 8e	   Player0SpeedL =	$8E
    111  f000		       00 8f	   Player0SpeedH =	$8F
    112  f000
    113  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    114  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    115  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    116  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    117  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    118  f000
    119  f000		       00 a4	   CheckpointBcd0 =	$A4
    120  f000		       00 a5	   CheckpointBcd1 =	$A5
    121  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    122  f000		       00 a7	   CarSpritePointerL =	$A7
    123  f000		       00 a8	   CarSpritePointerH =	$A8
    124  f000		       00 a9	   CurrentCarId =	$A9
    125  f000		       00 aa	   AccelerateBuffer =	$AA	; Chnage speed on buffer overflow.
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000
    133  f000		       00 b4	   ScoreBcd0  =	$B4
    134  f000		       00 b5	   ScoreBcd1  =	$B5
    135  f000		       00 b6	   ScoreBcd2  =	$B6
    136  f000		       00 b7	   ScoreBcd3  =	$B7
    137  f000
    138  f000		       00 b8	   CollisionCounter =	$B8
    139  f000		       00 b9	   Player0X   =	$B9
    140  f000		       00 ba	   CountdownTimer =	$BA
    141  f000		       00 bb	   Traffic0Msb =	$BB
    142  f000		       00 bc	   SwitchDebounceCounter =	$BC
    143  f000
    144  f000		       00 bd	   TimeBcd0   =	$BD
    145  f000		       00 be	   TimeBcd1   =	$BE
    146  f000		       00 bf	   TimeBcd2   =	$BF
    147  f000
    148  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    149  f000		       00 c1	   TrafficChance =	$C1
    150  f000		       00 c2	   CheckpointTime =	$C2
    151  f000		       00 c3	   TrafficColor =	$C3
    152  f000		       00 c4	   CurrentDifficulty =	$C4
    153  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    154  f000							;Bit 2 speed delta, Bit 3 random traffic 
    155  f000
    156  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    157  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    158  f000
    159  f000		       00 ca	   BorderType =	$CA
    160  f000
    161  f000		       00 cb	   HitCountBcd0 =	$CB
    162  f000		       00 cc	   HitCountBcd1 =	$CC
    163  f000
    164  f000		       00 cd	   GlideTimeBcd0 =	$CD
    165  f000		       00 ce	   GlideTimeBcd1 =	$CE
    166  f000
    167  f000		       00 cf	   OneSecondConter =	$CF
    168  f000
    169  f000		       00 d0	   ScoreD0    =	$D0
    170  f000		       00 d1	   ScoreD1    =	$D1
    171  f000		       00 d2	   ScoreD2    =	$D2
    172  f000		       00 d3	   ScoreD3    =	$D3
    173  f000		       00 d4	   ScoreD4    =	$D4
    174  f000		       00 d5	   ScoreFontColor =	$D5
    175  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    176  f000		       00 d7	   NextCheckpoint =	$D7
    177  f000
    178  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    179  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    180  f000
    181  f000
    182  f000							;generic start up stuff, put zero in almost all...
    183  f000				   BeforeStart		;All variables that are kept on game reset or select
    184  f000		       a0 00		      LDY	#0
    185  f002		       84 bc		      STY	SwitchDebounceCounter
    186  f004		       84 c4		      STY	CurrentDifficulty
    187  f006		       84 c0		      STY	GameStatus
    188  f008		       a0 10		      LDY	#16
    189  f00a		       84 c5		      STY	GameMode
    190  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    191  f00e		       84 88		      STY	ParallaxMode
    192  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    193  f012		       84 a9		      STY	CurrentCarId
    194  f014
    195  f014				   Start
    196  f014		       78		      SEI
    197  f015		       d8		      CLD
    198  f016		       a2 ff		      LDX	#$FF
    199  f018		       9a		      TXS
    200  f019		       a9 00		      LDA	#0
    201  f01b				   ClearMem
    202  f01b		       e0 bc		      CPX	#SwitchDebounceCounter
    203  f01d		       f0 16		      BEQ	SkipClean
    204  f01f		       e0 c5		      CPX	#GameMode
    205  f021		       f0 12		      BEQ	SkipClean
    206  f023		       e0 88		      CPX	#ParallaxMode
    207  f025		       f0 0e		      BEQ	SkipClean
    208  f027		       e0 a9		      CPX	#CurrentCarId
    209  f029		       f0 0a		      BEQ	SkipClean
    210  f02b		       e0 c4		      CPX	#CurrentDifficulty
    211  f02d		       f0 06		      BEQ	SkipClean
    212  f02f		       e0 c0		      CPX	#GameStatus
    213  f031		       f0 02		      BEQ	SkipClean
    214  f033		       95 00		      STA	0,X
    215  f035				   SkipClean
    216  f035		       ca		      DEX
    217  f036		       d0 e3		      BNE	ClearMem
    218  f038
    219  f038							;Setting some variables...
    220  f038
    221  f038				   SettingTrafficOffsets		; Time sensitive with player H position
    222  f038		       85 02		      STA	WSYNC	;We will set player position
    223  f03a		       20 cc f7 	      JSR	DefaultOffsets
    224  f03d
    225  f03d		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    226  f040		       85 8e		      STA	Player0SpeedL
    227  f042
      0  f042					      SLEEP	11	;18
      1  f042				   .CYCLES    SET	11
      2  f042
      3  f042				  -	      IF	.CYCLES < 2
      4  f042				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f042				  -	      ERR
      6  f042					      ENDIF
      7  f042
      8  f042					      IF	.CYCLES & 1
      9  f042				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f042				  -	      nop	0
     11  f042					      ELSE
     12  f042		       24 00		      bit	VSYNC
     13  f044					      ENDIF
     14  f044				   .CYCLES    SET	.CYCLES - 3
     15  f044					      ENDIF
     16  f044
     17  f044					      REPEAT	.CYCLES / 2
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     19  f048					      REPEND
    229  f048		       85 10		      STA	RESP0
    230  f04a
    231  f04a		       a2 00		      LDX	#0
    232  f04c		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    233  f04f		       85 a6		      STA	StartSWCHB	; For game over
    234  f051		       29 c0		      AND	#%11000000
    235  f053		       f0 0b		      BEQ	CallConfigureDifficulty
    236  f055		       e8		      INX
    237  f056		       c9 80		      CMP	#%10000000
    238  f058		       f0 06		      BEQ	CallConfigureDifficulty
    239  f05a		       e8		      INX
    240  f05b		       c9 40		      CMP	#%01000000
    241  f05d		       f0 01		      BEQ	CallConfigureDifficulty
    242  f05f		       e8		      INX
    243  f060
    244  f060				   CallConfigureDifficulty
    245  f060		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    246  f062		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    247  f064		       a5 c0		      LDA	GameStatus
    248  f066		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    249  f068				   NextCar
    250  f068		       a4 a9		      LDY	CurrentCarId
    251  f06a		       c8		      INY
    252  f06b		       98		      TYA
    253  f06c		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    254  f06e		       85 a9		      STA	CurrentCarId
    255  f070				   StoreCurrentDifficulty
    256  f070		       86 c4		      STX	CurrentDifficulty
    257  f072		       20 84 f7 	      JSR	ConfigureDifficulty
    258  f075
    259  f075				   ConfigureCarSprite
    260  f075		       a4 a9		      LDY	CurrentCarId
    261  f077		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    262  f07a		       85 a7		      STA	CarSpritePointerL
    263  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    264  f07f		       85 a8		      STA	CarSpritePointerH
    265  f081
    266  f081				   SetGameNotRunning
    267  f081		       a9 00		      LDA	#0
    268  f083		       85 c0		      STA	GameStatus
    269  f085
    270  f085				   ConfigureOneSecondTimer
    271  f085		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    272  f087		       85 cf		      STA	OneSecondConter
    273  f089
    274  f089				   HPositioning
    275  f089		       85 02		      STA	WSYNC
    276  f08b
    277  f08b		       a9 30		      LDA	#%00110000	;2 Missile Size
    278  f08d		       85 04		      STA	NUSIZ0	;3
    279  f08f		       85 05		      STA	NUSIZ1	;3
    280  f091
    281  f091		       a9 35		      LDA	#PLAYER_0_X_START	;2
    282  f093		       85 b9		      STA	Player0X	;3
    283  f095
    284  f095		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    285  f097		       85 ba		      STA	CountdownTimer	;3
    286  f099
    287  f099		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    288  f09b		       85 d7		      STA	NextCheckpoint
    289  f09d
    290  f09d		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f09f					      SLEEP	11	;
      1  f09f				   .CYCLES    SET	11
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f					      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f					      ELSE
     12  f09f		       24 00		      bit	VSYNC
     13  f0a1					      ENDIF
     14  f0a1				   .CYCLES    SET	.CYCLES - 3
     15  f0a1					      ENDIF
     16  f0a1
     17  f0a1					      REPEAT	.CYCLES / 2
     18  f0a1		       ea		      nop
     17  f0a1					      REPEND
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     17  f0a3					      REPEND
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    292  f0a5		       85 11		      STA	RESP1
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    294  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2	;
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    296  f0ab		       85 12		      STA	RESM0
      0  f0ad					      SLEEP	2
      1  f0ad				   .CYCLES    SET	2
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad				  -	      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad				  -	      ELSE
     12  f0ad				  -	      bit	VSYNC
     13  f0ad				  -	      ENDIF
     14  f0ad				  -.CYCLES    SET	.CYCLES - 3
     15  f0ad					      ENDIF
     16  f0ad
     17  f0ad					      REPEAT	.CYCLES / 2
     18  f0ad		       ea		      nop
     19  f0ae					      REPEND
    298  f0ae		       85 13		      STA	RESM1
    299  f0b0
    300  f0b0		       a9 f0		      LDA	#$F0
    301  f0b2		       85 24		      STA	HMBL
    302  f0b4		       85 22		      STA	HMM0
    303  f0b6		       85 23		      STA	HMM1
    304  f0b8		       85 02		      STA	WSYNC
    305  f0ba		       85 2a		      STA	HMOVE
    306  f0bc		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    307  f0be		       85 2b		      STA	HMCLR
    308  f0c0
    309  f0c0							;SLEEP 24
    310  f0c0							;STA HMCLR
    311  f0c0
    312  f0c0							;VSYNC time
    313  f0c0				   MainLoop
    314  f0c0		       a9 02		      LDA	#2
    315  f0c2		       85 00		      STA	VSYNC
    316  f0c4		       85 02		      STA	WSYNC
    317  f0c6		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    318  f0c8		       85 2a		      STA	HMOVE	;2
    319  f0ca		       85 02		      STA	WSYNC	;3
    320  f0cc		       a9 29		      LDA	#41	;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    321  f0ce		       8d 96 02 	      STA	TIM64T	;3	
    322  f0d1		       a9 00		      LDA	#0	;2
    323  f0d3		       85 00		      STA	VSYNC	;3	
    324  f0d5
    325  f0d5							;Read Fire Button before, will make it start the game for now.
    326  f0d5				   StartGame
    327  f0d5		       a5 0c		      LDA	INPT4	;3
    328  f0d7		       30 2e		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    329  f0d9		       a5 c0		      LDA	GameStatus	;3
    330  f0db		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
    331  f0dd		       d0 28		      BNE	SkipGameStart
    332  f0df		       a5 c5		      LDA	GameMode
    333  f0e1		       c9 10		      CMP	#MAX_GAME_MODE
    334  f0e3		       d0 0b		      BNE	SetGameRunning
    335  f0e5		       a9 00		      LDA	#0
    336  f0e7		       85 c5		      STA	GameMode
    337  f0e9		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    338  f0eb		       85 bc		      STA	SwitchDebounceCounter
    339  f0ed		       4c 07 f1 	      JMP	SkipGameStart
    340  f0f0				   SetGameRunning
    341  f0f0		       e6 c0		      INC	GameStatus
    342  f0f2		       a9 00		      LDA	#0	;
    343  f0f4		       85 8c		      STA	FrameCount0
    344  f0f6		       85 8d		      STA	FrameCount1
    345  f0f8		       a9 0a		      LDA	#10
    346  f0fa		       85 19		      STA	AUDV0
    347  f0fc		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    348  f0fe		       85 d5		      STA	ScoreFontColor
    349  f100		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    350  f102		       85 d6		      STA	ScoreFontColorHoldChange
    351  f104		       4c 83 f1 	      JMP	SkipIncFC1	; Make the worse case stable
    352  f107				   SkipGameStart
    353  f107
    354  f107				   RandomizeGame
    355  f107		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    356  f109		       d0 30		      BNE	EndRandomizeGame
    357  f10b		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    358  f10d		       29 02		      AND	#%00000010
    359  f10f		       f0 27		      BEQ	DeterministicGame
    360  f111		       a6 96		      LDX	TrafficOffset1 + 2
    361  f113		       bd 00 fe 	      LDA	AesTable,X
    362  f116		       45 8c		      EOR	FrameCount0
    363  f118		       85 96		      STA	TrafficOffset1 + 2
    364  f11a		       a6 9a		      LDX	TrafficOffset2 + 2
    365  f11c		       bd 00 fe 	      LDA	AesTable,X
    366  f11f		       45 8c		      EOR	FrameCount0
    367  f121		       85 9a		      STA	TrafficOffset2 + 2
    368  f123		       a6 9e		      LDX	TrafficOffset3 + 2
    369  f125		       bd 00 fe 	      LDA	AesTable,X
    370  f128		       45 8c		      EOR	FrameCount0
    371  f12a		       85 9e		      STA	TrafficOffset3 + 2
    372  f12c		       a6 a2		      LDX	TrafficOffset4 + 2
    373  f12e		       bd 00 fe 	      LDA	AesTable,X
    374  f131		       45 8c		      EOR	FrameCount0
    375  f133		       85 a2		      STA	TrafficOffset4 + 2
    376  f135		       4c 3b f1 	      JMP	EndRandomizeGame
    377  f138
    378  f138				   DeterministicGame
    379  f138		       20 cc f7 	      JSR	DefaultOffsets
    380  f13b
    381  f13b				   EndRandomizeGame
    382  f13b
    383  f13b				   ReadSwitches
    384  f13b		       a6 bc		      LDX	SwitchDebounceCounter
    385  f13d		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    386  f13f		       a9 01		      LDA	#%00000001
    387  f141		       2c 82 02 	      BIT	SWCHB
    388  f144		       d0 07		      BNE	SkipReset
    389  f146		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    390  f148		       85 bc		      STA	SwitchDebounceCounter
    391  f14a		       4c 14 f0 	      JMP	Start
    392  f14d				   SkipReset
    393  f14d
    394  f14d				   GameModeSelect
    395  f14d		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    396  f14f		       d0 27		      BNE	SkipGameSelect
    397  f151		       20 84 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    398  f154				   ReadDpadParallax
    399  f154		       ad 80 02 	      LDA	SWCHA
    400  f157		       29 f0		      AND	#%11110000
    401  f159		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    402  f15b		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    403  f15d		       85 88		      STA	ParallaxMode
    404  f15f				   ContinueGameSelect
    405  f15f		       a9 02		      LDA	#%00000010
    406  f161		       2c 82 02 	      BIT	SWCHB
    407  f164		       d0 12		      BNE	SkipGameSelect
    408  f166		       a6 c5		      LDX	GameMode
    409  f168		       e0 10		      CPX	#MAX_GAME_MODE
    410  f16a		       f0 04		      BEQ	ResetGameMode
    411  f16c		       e8		      INX
    412  f16d		       4c 72 f1 	      JMP	StoreGameMode
    413  f170				   ResetGameMode
    414  f170		       a2 00		      LDX	#0
    415  f172				   StoreGameMode
    416  f172		       86 c5		      STX	GameMode
    417  f174		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    418  f176		       85 bc		      STA	SwitchDebounceCounter
    419  f178				   SkipGameSelect
    420  f178		       4c 7d f1 	      JMP	EndReadSwitches
    421  f17b				   DecrementSwitchDebounceCounter
    422  f17b		       c6 bc		      DEC	SwitchDebounceCounter
    423  f17d				   EndReadSwitches
    424  f17d
    425  f17d				   CountFrame
    426  f17d		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    427  f17f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    428  f181		       e6 8d		      INC	FrameCount1	; 5 Still not used
    429  f183				   SkipIncFC1
    430  f183
    431  f183				   CallDrawQrCode
    432  f183		       a5 c5		      LDA	GameMode
    433  f185		       c9 10		      CMP	#MAX_GAME_MODE
    434  f187		       d0 03		      BNE	TestIsGameRunning
    435  f189		       4c 64 fc 	      JMP	DrawQrCode
    436  f18c
    437  f18c							;Does not update the game if not running
    438  f18c				   TestIsGameRunning
    439  f18c		       a5 c0		      LDA	GameStatus	;3
    440  f18e		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    441  f190		       4c 88 f3 	      JMP	SkipUpdateLogic
    442  f193				   ContinueWithGameLogic
    443  f193
    444  f193
    445  f193				   EverySecond		; 64 frames to be more precise
    446  f193		       a9 3f		      LDA	#%00111111
    447  f195		       25 8c		      AND	FrameCount0
    448  f197		       d0 06		      BNE	SkipEverySecondAction
    449  f199		       c5 ba		      CMP	CountdownTimer
    450  f19b		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    451  f19d		       c6 ba		      DEC	CountdownTimer
    452  f19f				   SkipEverySecondAction
    453  f19f
    454  f19f
    455  f19f				   BreakOnTimeOver		; Uses LDX as the breaking speed
    456  f19f		       a2 00		      LDX	#0
    457  f1a1		       a5 ba		      LDA	CountdownTimer
    458  f1a3		       d0 0b		      BNE	Break
    459  f1a5		       a4 a9		      LDY	CurrentCarId
    460  f1a7		       a5 8c		      LDA	FrameCount0
    461  f1a9		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    462  f1ac		       d0 02		      BNE	Break
    463  f1ae		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    464  f1b0
    465  f1b0				   Break
    466  f1b0		       a9 20		      LDA	#%00100000	;Down in controller
    467  f1b2		       2c 80 02 	      BIT	SWCHA
    468  f1b5		       d0 0b		      BNE	BreakNonZero
    469  f1b7		       a5 0c		      LDA	INPT4	;3
    470  f1b9		       10 05		      BPL	BreakWhileAccelerating
    471  f1bb		       a2 0c		      LDX	#BREAK_SPEED
    472  f1bd		       4c c2 f1 	      JMP	BreakNonZero
    473  f1c0				   BreakWhileAccelerating		; Allow better control while breaking.
    474  f1c0		       a2 06		      LDX	#(BREAK_SPEED / 2)
    475  f1c2
    476  f1c2				   BreakNonZero
    477  f1c2		       e0 00		      CPX	#0
    478  f1c4		       f0 2b		      BEQ	SkipBreak
    479  f1c6		       86 b0		      STX	Tmp0
    480  f1c8
    481  f1c8				   DecreaseSpeed
    482  f1c8		       38		      SEC
    483  f1c9		       a5 8e		      LDA	Player0SpeedL
    484  f1cb		       e5 b0		      SBC	Tmp0
    485  f1cd		       85 8e		      STA	Player0SpeedL
    486  f1cf		       a5 8f		      LDA	Player0SpeedH
    487  f1d1		       e9 00		      SBC	#0
    488  f1d3		       85 8f		      STA	Player0SpeedH
    489  f1d5
    490  f1d5				   CheckMinSpeed
    491  f1d5		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    492  f1d7		       c9 00		      CMP	#CAR_MIN_SPEED_H
    493  f1d9		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    494  f1db		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    495  f1dd
    496  f1dd				   CompareLBreakSpeed
    497  f1dd		       a5 8e		      LDA	Player0SpeedL
    498  f1df		       c9 00		      CMP	#CAR_MIN_SPEED_L
    499  f1e1		       90 03		      BCC	ResetMinSpeed	; Less than memory
    500  f1e3		       4c ee f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    501  f1e6
    502  f1e6				   ResetMinSpeed
    503  f1e6		       a9 00		      LDA	#CAR_MIN_SPEED_H
    504  f1e8		       85 8f		      STA	Player0SpeedH
    505  f1ea		       a9 00		      LDA	#CAR_MIN_SPEED_L
    506  f1ec		       85 8e		      STA	Player0SpeedL
    507  f1ee
    508  f1ee				   SkipAccelerateIfBreaking
    509  f1ee		       4c 33 f2 	      JMP	SkipAccelerate
    510  f1f1				   SkipBreak
    511  f1f1
    512  f1f1				   Acelerates
    513  f1f1		       a5 ba		      LDA	CountdownTimer
    514  f1f3		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    515  f1f5
    516  f1f5				   ContinueAccelerateTest
    517  f1f5		       a5 0c		      LDA	INPT4	;3
    518  f1f7		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    519  f1f9		       a9 10		      LDA	#%00010000	;UP in controller
    520  f1fb		       2c 80 02 	      BIT	SWCHA
    521  f1fe		       d0 33		      BNE	SkipAccelerate
    522  f200
    523  f200				   IncreaseCarSpeed
    524  f200		       a2 02		      LDX	#2
    525  f202		       a4 a9		      LDY	CurrentCarId
    526  f204				   IncreaseCarSpeedLoop
    527  f204							;Adds speed
    528  f204		       18		      CLC
    529  f205		       a5 aa		      LDA	AccelerateBuffer
    530  f207		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    531  f20a		       85 aa		      STA	AccelerateBuffer
    532  f20c		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    533  f20e		       e6 8e		      INC	Player0SpeedL
    534  f210		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    535  f212		       e6 8f		      INC	Player0SpeedH
    536  f214				   ContinueIncreaseSpeedLoop
    537  f214		       ca		      DEX
    538  f215		       d0 ed		      BNE	IncreaseCarSpeedLoop
    539  f217				   SkipIncreaseCarSpeed
    540  f217
    541  f217				   CheckIfAlreadyMaxSpeed
    542  f217		       a5 8f		      LDA	Player0SpeedH
    543  f219		       c9 02		      CMP	#CAR_MAX_SPEED_H
    544  f21b		       90 16		      BCC	SkipAccelerate	; less than my max speed
    545  f21d		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    546  f21f							;High bit is max, compare the low
    547  f21f		       a4 a9		      LDY	CurrentCarId
    548  f221		       a5 8e		      LDA	Player0SpeedL
    549  f223		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    550  f226		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    551  f228							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    552  f228
    553  f228				   ResetToMaxSpeed		; Speed is more, or is already max
    554  f228		       a9 02		      LDA	#CAR_MAX_SPEED_H
    555  f22a		       85 8f		      STA	Player0SpeedH
    556  f22c		       a4 a9		      LDY	CurrentCarId
    557  f22e		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    558  f231		       85 8e		      STA	Player0SpeedL
    559  f233				   SkipAccelerate
    560  f233
    561  f233				   InitUpdateOffsets
    562  f233		       a2 00		      LDX	#0	; Memory Offset 24 bit
    563  f235		       a0 00		      LDY	#0	; Line Speeds 16 bits
    564  f237		       a5 91		      LDA	TrafficOffset0 + 1	;
    565  f239		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    566  f23b		       a5 c5		      LDA	GameMode
    567  f23d		       29 04		      AND	#%00000100	; GameModes with high delta
    568  f23f		       f0 02		      BEQ	UpdateOffsets
    569  f241		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    570  f243
    571  f243				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    572  f243		       38		      SEC
    573  f244		       a5 8e		      LDA	Player0SpeedL
    574  f246		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    575  f249		       85 b0		      STA	Tmp0
    576  f24b		       c8		      INY
    577  f24c		       a5 8f		      LDA	Player0SpeedH
    578  f24e		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    579  f251		       85 b1		      STA	Tmp1
    580  f253		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    581  f255		       e9 00		      SBC	#0
    582  f257		       85 b2		      STA	Tmp2
    583  f259
    584  f259				   AddsTheResult
    585  f259		       18		      CLC
    586  f25a		       a5 b0		      LDA	Tmp0
    587  f25c		       75 90		      ADC	TrafficOffset0,X
    588  f25e		       95 90		      STA	TrafficOffset0,X
    589  f260		       e8		      INX
    590  f261		       a5 b1		      LDA	Tmp1
    591  f263		       75 90		      ADC	TrafficOffset0,X
    592  f265		       95 90		      STA	TrafficOffset0,X
    593  f267		       e8		      INX
    594  f268		       a5 b2		      LDA	Tmp2	; Carry
    595  f26a		       75 90		      ADC	TrafficOffset0,X
    596  f26c		       95 90		      STA	TrafficOffset0,X
    597  f26e		       90 06		      BCC	CalculateOffsetCache
    598  f270		       e0 02		      CPX	#2	;MSB offset 0
    599  f272		       d0 02		      BNE	CalculateOffsetCache
    600  f274		       e6 bb		      INC	Traffic0Msb
    601  f276
    602  f276				   CalculateOffsetCache
    603  f276		       e8		      INX
    604  f277		       38		      SEC
    605  f278		       69 00		      ADC	#0	;Increment by one
    606  f27a		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    607  f27c
    608  f27c				   PrepareNextUpdateLoop
    609  f27c		       c8		      INY
    610  f27d		       e8		      INX
    611  f27e		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    612  f280		       d0 c1		      BNE	UpdateOffsets
    613  f282
    614  f282				   BcdScore		; 48
    615  f282		       a5 91		      LDA	TrafficOffset0 + 1	;3
    616  f284		       45 b3		      EOR	Tmp3	;3
    617  f286		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    618  f288		       f0 1b		      BEQ	FinishBcdScore	;2
    619  f28a
    620  f28a				   ContinueBcdScore
    621  f28a		       f8		      SED		;2
    622  f28b		       18		      CLC		;2
    623  f28c		       a5 b4		      LDA	ScoreBcd0	;3
    624  f28e		       69 01		      ADC	#1	;2
    625  f290		       85 b4		      STA	ScoreBcd0	;3
    626  f292		       a5 b5		      LDA	ScoreBcd1	;3
    627  f294		       69 00		      ADC	#0	;2
    628  f296		       85 b5		      STA	ScoreBcd1	;3
    629  f298		       a5 b6		      LDA	ScoreBcd2	;3
    630  f29a		       69 00		      ADC	#0	;2
    631  f29c		       85 b6		      STA	ScoreBcd2	;3
    632  f29e		       a5 b7		      LDA	ScoreBcd3	;3
    633  f2a0		       69 00		      ADC	#0	;2
    634  f2a2		       85 b7		      STA	ScoreBcd3	;3
    635  f2a4		       d8		      CLD		;2
    636  f2a5				   FinishBcdScore
    637  f2a5
    638  f2a5							;Until store the movemnt, LDX contains the value to be stored.
    639  f2a5				   TestCollision		;
    640  f2a5							; see if player0 colides with the rest
    641  f2a5		       a5 00		      LDA	CXM0P
    642  f2a7		       05 01		      ORA	CXM1P
    643  f2a9		       05 01		      ORA	CXM1P
    644  f2ab		       05 02		      ORA	CXP0FB
    645  f2ad		       05 07		      ORA	CXPPMM
    646  f2af		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    647  f2b1		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    648  f2b3		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    649  f2b5		       d0 3a		      BNE	NoCollision
    650  f2b7		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    651  f2b9		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    652  f2bb		       f0 34		      BEQ	NoCollision
    653  f2bd		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    654  f2bf		       f0 30		      BEQ	NoCollision
    655  f2c1		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    656  f2c3		       85 b8		      STA	CollisionCounter	;and store as colision.
    657  f2c5				   CountBcdColision
    658  f2c5		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    659  f2c7		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    660  f2c9		       f0 1d		      BEQ	SkipSetColisionSpeedL
    661  f2cb		       f8		      SED		;2
    662  f2cc		       18		      CLC		;2
    663  f2cd		       a5 cb		      LDA	HitCountBcd0	;3
    664  f2cf		       69 01		      ADC	#1	;3
    665  f2d1		       85 cb		      STA	HitCountBcd0	;3
    666  f2d3		       a5 cc		      LDA	HitCountBcd1	;3
    667  f2d5		       69 00		      ADC	#0	;2
    668  f2d7		       85 cc		      STA	HitCountBcd1	;3
    669  f2d9		       d8		      CLD		;2
    670  f2da				   EndCountBcdColision
    671  f2da		       a5 8f		      LDA	Player0SpeedH
    672  f2dc		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    673  f2de		       a9 10		      LDA	#COLLISION_SPEED_L
    674  f2e0		       c5 8e		      CMP	Player0SpeedL
    675  f2e2		       b0 04		      BCS	SkipSetColisionSpeedL
    676  f2e4				   SetColisionSpeedL
    677  f2e4		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    678  f2e6		       85 8e		      STA	Player0SpeedL
    679  f2e8				   SkipSetColisionSpeedL
    680  f2e8		       a9 00		      LDA	#0
    681  f2ea		       85 8f		      STA	Player0SpeedH
    682  f2ec		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    683  f2ee		       4c 3c f3 	      JMP	StoreHMove	; We keep position consistent
    684  f2f1				   NoCollision
    685  f2f1
    686  f2f1				   DecrementCollision
    687  f2f1		       a4 b8		      LDY	CollisionCounter
    688  f2f3		       f0 07		      BEQ	FinishDecrementCollision
    689  f2f5		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    690  f2f7		       85 04		      STA	NUSIZ0
    691  f2f9		       88		      DEY
    692  f2fa		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    693  f2fc				   FinishDecrementCollision
    694  f2fc
    695  f2fc				   ResetPlayerSize
    696  f2fc		       d0 04		      BNE	FinishResetPlayerSize
    697  f2fe		       a9 30		      LDA	#%00110000
    698  f300		       85 04		      STA	NUSIZ0	;
    699  f302				   FinishResetPlayerSize
    700  f302
    701  f302				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    702  f302		       c0 01		      CPY	#1	; Last frame before reset
    703  f304		       d0 05		      BNE	SkipResetPlayerPosition
    704  f306		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    705  f308		       4c 3c f3 	      JMP	StoreHMove
    706  f30b				   SkipResetPlayerPosition
    707  f30b
    708  f30b				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    709  f30b		       a5 a9		      LDA	CurrentCarId
    710  f30d		       c9 03		      CMP	#CAR_ID_DRAGSTER
    711  f30f		       d0 08		      BNE	PrepareReadXAxis
    712  f311		       a2 00		      LDX	#0
    713  f313		       a5 8c		      LDA	FrameCount0
    714  f315		       29 01		      AND	#DRAGSTER_TURN_MASK
    715  f317		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    716  f319
    717  f319							; for left and right, we're gonna 
    718  f319							; set the horizontal speed, and then do
    719  f319							; a single HMOVE.  We'll use X to hold the
    720  f319							; horizontal speed, then store it in the 
    721  f319							; appropriate register
    722  f319				   PrepareReadXAxis
    723  f319		       a2 00		      LDX	#0
    724  f31b		       a4 b9		      LDY	Player0X
    725  f31d				   BeginReadLeft
    726  f31d		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    727  f31f		       a9 40		      LDA	#%01000000	;Left
    728  f321		       2c 80 02 	      BIT	SWCHA
    729  f324		       d0 07		      BNE	SkipMoveLeft
    730  f326		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    731  f328		       c6 b9		      DEC	Player0X
    732  f32a		       4c 3c f3 	      JMP	StoreHMove	; Cannot move left and right...
    733  f32d				   SkipMoveLeft
    734  f32d				   BeginReadRight
    735  f32d		       c0 36		      CPY	#PLAYER_0_MAX_X
    736  f32f		       f0 0b		      BEQ	SkipMoveRight	; At max already
    737  f331		       a9 80		      LDA	#%10000000	;Right
    738  f333		       2c 80 02 	      BIT	SWCHA
    739  f336		       d0 04		      BNE	SkipMoveRight
    740  f338		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    741  f33a		       e6 b9		      INC	Player0X
    742  f33c				   SkipMoveRight
    743  f33c				   StoreHMove
    744  f33c		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    745  f33e		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    746  f340
    747  f340				   DividePlayerSpeedBy4
    748  f340		       a5 8f		      LDA	Player0SpeedH
    749  f342		       0a		      ASL
    750  f343		       0a		      ASL
    751  f344		       0a		      ASL
    752  f345		       0a		      ASL
    753  f346		       0a		      ASL
    754  f347		       0a		      ASL
    755  f348		       85 b1		      STA	Tmp1
    756  f34a		       a5 8e		      LDA	Player0SpeedL
    757  f34c		       4a		      LSR
    758  f34d		       4a		      LSR
    759  f34e		       29 3f		      AND	#%00111111
    760  f350		       05 b1		      ORA	Tmp1
    761  f352		       85 b0		      STA	Tmp0	; Division Result
    762  f354
    763  f354				   CalculateParallax1Offset		; 7/8 speed
    764  f354		       38		      SEC
    765  f355		       a5 8e		      LDA	Player0SpeedL
    766  f357		       e5 b0		      SBC	Tmp0
    767  f359		       85 b2		      STA	Tmp2
    768  f35b		       a5 8f		      LDA	Player0SpeedH
    769  f35d		       e9 00		      SBC	#0
    770  f35f		       85 b3		      STA	Tmp3
    771  f361
    772  f361		       18		      CLC
    773  f362		       a5 c6		      LDA	ParallaxOffset1
    774  f364		       65 b2		      ADC	Tmp2
    775  f366		       85 c6		      STA	ParallaxOffset1
    776  f368		       a5 c7		      LDA	ParallaxOffset1 + 1
    777  f36a		       65 b3		      ADC	Tmp3
    778  f36c		       85 c7		      STA	ParallaxOffset1 + 1
    779  f36e
    780  f36e				   CalculateParallax2Offset		; 6/8 speed
    781  f36e		       38		      SEC
    782  f36f		       a5 b2		      LDA	Tmp2
    783  f371		       e5 b0		      SBC	Tmp0
    784  f373		       85 b2		      STA	Tmp2
    785  f375		       a5 b3		      LDA	Tmp3
    786  f377		       e9 00		      SBC	#0
    787  f379		       85 b3		      STA	Tmp3
    788  f37b
    789  f37b		       18		      CLC
    790  f37c		       a5 c8		      LDA	ParallaxOffset2
    791  f37e		       65 b2		      ADC	Tmp2
    792  f380		       85 c8		      STA	ParallaxOffset2
    793  f382		       a5 c9		      LDA	ParallaxOffset2 + 1
    794  f384		       65 b3		      ADC	Tmp3
    795  f386		       85 c9		      STA	ParallaxOffset2 + 1
    796  f388
    797  f388				   SkipUpdateLogic		; Continue here if not paused
    798  f388
    799  f388
    800  f388				   ProcessBorder		;Can be optimized (probably)
    801  f388		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    802  f38a		       a5 88		      LDA	ParallaxMode
    803  f38c		       c9 70		      CMP	#%01110000
    804  f38e		       f0 1a		      BEQ	HorizontalParallaxMode
    805  f390		       c9 d0		      CMP	#%11010000
    806  f392		       f0 0a		      BEQ	VerticalParallaxMode
    807  f394		       c9 b0		      CMP	#%10110000
    808  f396		       f0 0c		      BEQ	TachometerMode
    809  f398
    810  f398				   DefaultBorderMode
    811  f398		       20 4b f8 	      JSR	DefaultBorderLoop
    812  f39b		       4c ad f3 	      JMP	EndProcessingBorder
    813  f39e				   VerticalParallaxMode
    814  f39e		       20 c1 f8 	      JSR	VerticalParallaxLoop
    815  f3a1		       4c ad f3 	      JMP	EndProcessingBorder
    816  f3a4				   TachometerMode
    817  f3a4		       20 66 f8 	      JSR	PrepareTachometerBorderLoop
    818  f3a7		       4c ad f3 	      JMP	EndProcessingBorder
    819  f3aa				   HorizontalParallaxMode
    820  f3aa		       20 fd f7 	      JSR	HorizontalParallaxLoop
    821  f3ad
    822  f3ad				   EndProcessingBorder
    823  f3ad
    824  f3ad				   ProcessScoreFontColor
    825  f3ad		       a6 d6		      LDX	ScoreFontColorHoldChange
    826  f3af		       f0 06		      BEQ	ResetScoreFontColor
    827  f3b1		       ca		      DEX
    828  f3b2		       86 d6		      STX	ScoreFontColorHoldChange
    829  f3b4		       4c bb f3 	      JMP	SkipScoreFontColor
    830  f3b7				   ResetScoreFontColor
    831  f3b7		       a9 f9		      LDA	#SCORE_FONT_COLOR
    832  f3b9		       85 d5		      STA	ScoreFontColor
    833  f3bb				   SkipScoreFontColor
    834  f3bb
    835  f3bb				   IsGameOver
    836  f3bb		       a5 ba		      LDA	CountdownTimer
    837  f3bd		       05 8e		      ORA	Player0SpeedL
    838  f3bf		       05 8f		      ORA	Player0SpeedH
    839  f3c1		       d0 0b		      BNE	IsCheckpoint
    840  f3c3		       a9 01		      LDA	#1
    841  f3c5		       85 d6		      STA	ScoreFontColorHoldChange
    842  f3c7		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    843  f3c9		       85 d5		      STA	ScoreFontColor
    844  f3cb		       4c 0f f4 	      JMP	SkipIsTimeOver
    845  f3ce
    846  f3ce				   IsCheckpoint
    847  f3ce		       a5 d7		      LDA	NextCheckpoint
    848  f3d0		       c5 92		      CMP	TrafficOffset0 + 2
    849  f3d2		       d0 2f		      BNE	SkipIsCheckpoint
    850  f3d4		       18		      CLC
    851  f3d5		       69 10		      ADC	#CHECKPOINT_INTERVAL
    852  f3d7		       85 d7		      STA	NextCheckpoint
    853  f3d9		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    854  f3db		       85 d5		      STA	ScoreFontColor
    855  f3dd		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    856  f3df		       85 d6		      STA	ScoreFontColorHoldChange
    857  f3e1				   AddCheckpointBcd
    858  f3e1		       f8		      SED		;2
    859  f3e2		       18		      CLC		;2
    860  f3e3		       a5 a4		      LDA	CheckpointBcd0	;3
    861  f3e5		       69 01		      ADC	#1	;3
    862  f3e7		       85 a4		      STA	CheckpointBcd0	;3
    863  f3e9		       a5 a5		      LDA	CheckpointBcd1	;3
    864  f3eb		       69 00		      ADC	#0	;2
    865  f3ed		       85 a5		      STA	CheckpointBcd1	;3
    866  f3ef		       d8		      CLD		;2
    867  f3f0				   EndCheckpointBcd
    868  f3f0		       a5 ba		      LDA	CountdownTimer
    869  f3f2		       18		      CLC
    870  f3f3		       65 c2		      ADC	CheckpointTime
    871  f3f5		       85 ba		      STA	CountdownTimer
    872  f3f7		       90 04		      BCC	JumpSkipTimeOver
    873  f3f9		       a9 ff		      LDA	#$FF
    874  f3fb		       85 ba		      STA	CountdownTimer	; Does not overflow!
    875  f3fd				   JumpSkipTimeOver
    876  f3fd		       20 75 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    877  f400		       4c 0f f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    878  f403				   SkipIsCheckpoint
    879  f403
    880  f403				   IsTimeOver
    881  f403		       a5 ba		      LDA	CountdownTimer
    882  f405		       d0 08		      BNE	SkipIsTimeOver
    883  f407		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    884  f409		       85 d6		      STA	ScoreFontColorHoldChange
    885  f40b		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    886  f40d		       85 d5		      STA	ScoreFontColor
    887  f40f				   SkipIsTimeOver
    888  f40f
    889  f40f				   PrintEasterEggCondition
    890  f40f		       a5 8d		      LDA	FrameCount1
    891  f411		       29 38		      AND	#%00111000
    892  f413		       05 c0		      ORA	GameStatus
    893  f415		       c9 38		      CMP	#%00111000
    894  f417		       d0 06		      BNE	ChooseTextSide
    895  f419		       20 15 f9 	      JSR	PrintEasterEgg
    896  f41c		       4c 10 f5 	      JMP	RightScoreWriteEnd
    897  f41f
    898  f41f							;Could be done during on vblank to save this comparisson time (before draw score), 
    899  f41f							;but I am saving vblank cycles for now, in case of 2 players.
    900  f41f				   ChooseTextSide		; 
    901  f41f		       a5 8c		      LDA	FrameCount0	;3
    902  f421		       29 01		      AND	#%00000001	;2
    903  f423		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    904  f425		       4c a6 f4 	      JMP	RightScoreWrite
    905  f428
    906  f428				   LeftScoreWrite
    907  f428		       a5 d5		      LDA	ScoreFontColor
    908  f42a		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    909  f42c		       f0 4e		      BEQ	PrintCheckpoint
    910  f42e		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    911  f430		       f0 52		      BEQ	PrintStartGame
    912  f432		       a5 c0		      LDA	GameStatus
    913  f434		       f0 56		      BEQ	PrintHellwayLeft
    914  f436				   WriteDistance		;Not optimized yet, ugly code.
    915  f436				   Digit0Distance
    916  f436		       a5 91		      LDA	TrafficOffset0 + 1	;3
    917  f438		       4a		      LSR		; 2
    918  f439		       4a		      LSR		; 2
    919  f43a		       4a		      LSR		; 2
    920  f43b		       4a		      LSR		; 2
    921  f43c		       aa		      TAX		; 2
    922  f43d		       bd be fd 	      LDA	FontLookup,X	;4
    923  f440		       85 d3		      STA	ScoreD3	;3
    924  f442
    925  f442				   Digit1Distance
    926  f442		       a5 92		      LDA	TrafficOffset0 + 2	;3
    927  f444		       29 0f		      AND	#%00001111	;2
    928  f446		       aa		      TAX		; 2
    929  f447		       bd be fd 	      LDA	FontLookup,X	;4 
    930  f44a		       85 d2		      STA	ScoreD2	;3
    931  f44c
    932  f44c				   Digit2Distance
    933  f44c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    934  f44e		       4a		      LSR		; 2
    935  f44f		       4a		      LSR		; 2
    936  f450		       4a		      LSR		; 2
    937  f451		       4a		      LSR		; 2
    938  f452		       aa		      TAX		; 2
    939  f453		       bd be fd 	      LDA	FontLookup,X	;4
    940  f456		       85 d1		      STA	ScoreD1	;3
    941  f458
    942  f458				   Digit3Distance
    943  f458		       a5 bb		      LDA	Traffic0Msb	;3
    944  f45a		       29 0f		      AND	#%00001111	;2
    945  f45c		       aa		      TAX		; 2
    946  f45d		       bd be fd 	      LDA	FontLookup,X	;4 
    947  f460		       85 d0		      STA	ScoreD0	;3
    948  f462
    949  f462				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    950  f462		       a5 bb		      LDA	Traffic0Msb
    951  f464		       29 f0		      AND	#%11110000	;2
    952  f466		       d0 07		      BNE	DrawDistanceExtraDigit
    953  f468		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    954  f46a		       85 d4		      STA	ScoreD4	;3
    955  f46c		       4c 79 f4 	      JMP	EndDrawDistance
    956  f46f				   DrawDistanceExtraDigit
    957  f46f		       4a		      LSR		; 2
    958  f470		       4a		      LSR		; 2
    959  f471		       4a		      LSR		; 2
    960  f472		       4a		      LSR		; 2
    961  f473		       aa		      TAX		; 2
    962  f474		       bd be fd 	      LDA	FontLookup,X	;4
    963  f477		       85 d4		      STA	ScoreD4	;3
    964  f479
    965  f479				   EndDrawDistance
    966  f479		       4c 10 f5 	      JMP	RightScoreWriteEnd	;3
    967  f47c
    968  f47c				   PrintCheckpoint
    969  f47c		       a2 00		      LDX	#<CheckpointText
    970  f47e		       20 df f7 	      JSR	PrintStaticText
    971  f481		       4c 10 f5 	      JMP	RightScoreWriteEnd	;3
    972  f484				   PrintStartGame
    973  f484		       a2 23		      LDX	#<GoText
    974  f486		       20 df f7 	      JSR	PrintStaticText
    975  f489		       4c 10 f5 	      JMP	RightScoreWriteEnd	;3
    976  f48c
    977  f48c				   PrintHellwayLeft
    978  f48c		       a5 8d		      LDA	FrameCount1
    979  f48e		       29 01		      AND	#1
    980  f490		       d0 05		      BNE	PrintCreditsLeft
    981  f492		       a2 05		      LDX	#<HellwayLeftText
    982  f494		       4c 99 f4 	      JMP	PrintGameMode
    983  f497				   PrintCreditsLeft
    984  f497		       a2 0f		      LDX	#<OpbText
    985  f499
    986  f499				   PrintGameMode
    987  f499		       20 df f7 	      JSR	PrintStaticText
    988  f49c		       a6 c5		      LDX	GameMode
    989  f49e		       bd be fd 	      LDA	FontLookup,X	;4 
    990  f4a1		       85 d0		      STA	ScoreD0	;3
    991  f4a3		       4c 10 f5 	      JMP	RightScoreWriteEnd	;3
    992  f4a6
    993  f4a6				   RightScoreWrite
    994  f4a6		       a5 c0		      LDA	GameStatus
    995  f4a8		       f0 45		      BEQ	PrintHellwayRight
    996  f4aa		       a5 d5		      LDA	ScoreFontColor
    997  f4ac		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    998  f4ae		       f0 52		      BEQ	PrintGameOver
    999  f4b0				   Digit0Timer
   1000  f4b0		       a5 ba		      LDA	CountdownTimer	;3
   1001  f4b2		       29 0f		      AND	#%00001111	;2
   1002  f4b4		       aa		      TAX		; 2
   1003  f4b5		       bd be fd 	      LDA	FontLookup,X	;4 
   1004  f4b8		       85 d1		      STA	ScoreD1	;3
   1005  f4ba
   1006  f4ba				   Digit1Timer
   1007  f4ba		       a5 ba		      LDA	CountdownTimer	;3
   1008  f4bc		       4a		      LSR		; 2
   1009  f4bd		       4a		      LSR		; 2
   1010  f4be		       4a		      LSR		; 2
   1011  f4bf		       4a		      LSR		; 2
   1012  f4c0		       aa		      TAX		; 2
   1013  f4c1		       bd be fd 	      LDA	FontLookup,X	;4
   1014  f4c4		       85 d0		      STA	ScoreD0	;3
   1015  f4c6
   1016  f4c6		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1017  f4c8		       85 d2		      STA	ScoreD2	;3
   1018  f4ca
   1019  f4ca				   Digit0Speed
   1020  f4ca		       a5 8e		      LDA	Player0SpeedL
   1021  f4cc		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1022  f4ce		       4a		      LSR		; 2
   1023  f4cf		       4a		      LSR		; 2
   1024  f4d0		       aa		      TAX		; 2
   1025  f4d1		       bd be fd 	      LDA	FontLookup,X	;4
   1026  f4d4		       85 d4		      STA	ScoreD4	;3
   1027  f4d6
   1028  f4d6				   Digit1Speed
   1029  f4d6		       a5 8e		      LDA	Player0SpeedL
   1030  f4d8		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1031  f4da		       18		      CLC
   1032  f4db		       2a		      ROL		;First goes into carry
   1033  f4dc		       2a		      ROL
   1034  f4dd		       2a		      ROL
   1035  f4de		       85 b0		      STA	Tmp0
   1036  f4e0		       a5 8f		      LDA	Player0SpeedH
   1037  f4e2		       0a		      ASL
   1038  f4e3		       0a		      ASL
   1039  f4e4		       05 b0		      ORA	Tmp0
   1040  f4e6		       aa		      TAX		; 2
   1041  f4e7		       bd be fd 	      LDA	FontLookup,X	;4
   1042  f4ea		       85 d3		      STA	ScoreD3	;3
   1043  f4ec		       4c 10 f5 	      JMP	RightScoreWriteEnd
   1044  f4ef
   1045  f4ef				   PrintHellwayRight
   1046  f4ef		       a5 8d		      LDA	FrameCount1
   1047  f4f1		       29 01		      AND	#1
   1048  f4f3		       d0 05		      BNE	PrintCreditsRight
   1049  f4f5		       a2 0a		      LDX	#<HellwayRightText
   1050  f4f7		       4c fc f4 	      JMP	PrintRightIntro
   1051  f4fa				   PrintCreditsRight
   1052  f4fa		       a2 14		      LDX	#<YearText
   1053  f4fc				   PrintRightIntro
   1054  f4fc		       20 df f7 	      JSR	PrintStaticText
   1055  f4ff		       4c 10 f5 	      JMP	RightScoreWriteEnd
   1056  f502				   PrintGameOver
   1057  f502		       a5 8c		      LDA	FrameCount0
   1058  f504		       30 05		      BMI	PrintOverText
   1059  f506		       a2 19		      LDX	#<GameText
   1060  f508		       4c 0d f5 	      JMP	StoreGameOverText
   1061  f50b				   PrintOverText
   1062  f50b		       a2 1e		      LDX	#<OverText
   1063  f50d				   StoreGameOverText
   1064  f50d		       20 df f7 	      JSR	PrintStaticText
   1065  f510				   RightScoreWriteEnd
   1066  f510
   1067  f510
   1068  f510				   ScoreBackgroundColor
   1069  f510		       a2 00		      LDX	#0
   1070  f512		       ad 82 02 	      LDA	SWCHB
   1071  f515		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1072  f517		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1073  f519		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1074  f51b		       a2 03		      LDX	#BACKGROUND_COLOR
   1075  f51d				   BlackAndWhiteScoreBg
   1076  f51d		       85 b2		      STA	Tmp2	; Score Background
   1077  f51f		       86 b3		      STX	Tmp3	; Traffic Background
   1078  f521
   1079  f521				   ConfigurePFForScore
   1080  f521							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1081  f521		       85 09		      STA	COLUBK
   1082  f523		       20 37 f7 	      JSR	ClearAll
   1083  f526		       a9 02		      LDA	#%00000010	; Score mode
   1084  f528		       85 0a		      STA	CTRLPF
   1085  f52a		       a5 8c		      LDA	FrameCount0	;3
   1086  f52c		       29 01		      AND	#%00000001	;2
   1087  f52e		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
   1088  f530				   LeftScoreOn
   1089  f530		       a5 d5		      LDA	ScoreFontColor
   1090  f532		       85 07		      STA	COLUP1
   1091  f534		       a5 b2		      LDA	Tmp2
   1092  f536		       85 06		      STA	COLUP0
   1093  f538		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1094  f53a		       85 b1		      STA	Tmp1
   1095  f53c		       4c 4b f5 	      JMP	CallWaitForVblankEnd
   1096  f53f				   RightScoreOn
   1097  f53f		       a5 d5		      LDA	ScoreFontColor
   1098  f541		       85 06		      STA	COLUP0
   1099  f543		       a5 b2		      LDA	Tmp2
   1100  f545		       85 07		      STA	COLUP1
   1101  f547		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1102  f549		       85 b1		      STA	Tmp1
   1103  f54b
   1104  f54b							; After here we are going to update the screen, No more heavy code
   1105  f54b				   CallWaitForVblankEnd
   1106  f54b		       20 85 fb 	      JSR	WaitForVblankEnd
   1107  f54e
   1108  f54e				   DrawScoreHud
   1109  f54e		       20 87 f9 	      JSR	PrintScore
   1110  f551
   1111  f551		       85 02		      STA	WSYNC
   1112  f553
   1113  f553		       a5 0c		      LDA	INPT4	;3
   1114  f555		       10 12		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1115  f557		       a5 d5		      LDA	ScoreFontColor
   1116  f559		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1117  f55b		       d0 0c		      BNE	WaitAnotherScoreLine
   1118  f55d		       a5 8c		      LDA	FrameCount0	;3
   1119  f55f		       29 01		      AND	#%00000001	;2
   1120  f561		       f0 03		      BEQ	LeftScoreOnGameOver
   1121  f563		       4c 12 fb 	      JMP	DrawGameOverScreenRight
   1122  f566				   LeftScoreOnGameOver
   1123  f566		       4c 44 fa 	      JMP	DrawGameOverScreenLeft
   1124  f569
   1125  f569				   WaitAnotherScoreLine
   1126  f569		       85 02		      STA	WSYNC
   1127  f56b
   1128  f56b				   PrepareForTraffic
   1129  f56b		       20 49 f7 	      JSR	ClearPF	; 32
   1130  f56e
   1131  f56e		       85 02		      STA	WSYNC
   1132  f570		       85 02		      STA	WSYNC
   1133  f572
   1134  f572		       a9 31		      LDA	#%00110001	; 2 Score mode
   1135  f574		       85 0a		      STA	CTRLPF	;3
   1136  f576
   1137  f576		       a5 c3		      LDA	TrafficColor	;3
   1138  f578		       85 08		      STA	COLUPF	;3
   1139  f57a
   1140  f57a		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1141  f57c		       85 07		      STA	COLUP1	;3
   1142  f57e
   1143  f57e		       a5 d5		      LDA	ScoreFontColor	;3
   1144  f580		       85 06		      STA	COLUP0	;3
   1145  f582
   1146  f582		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1147  f584
   1148  f584		       20 49 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1149  f587
      0  f587					      SLEEP	14
      1  f587				   .CYCLES    SET	14
      2  f587
      3  f587				  -	      IF	.CYCLES < 2
      4  f587				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f587				  -	      ERR
      6  f587					      ENDIF
      7  f587
      8  f587				  -	      IF	.CYCLES & 1
      9  f587				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f587				  -	      nop	0
     11  f587				  -	      ELSE
     12  f587				  -	      bit	VSYNC
     13  f587				  -	      ENDIF
     14  f587				  -.CYCLES    SET	.CYCLES - 3
     15  f587					      ENDIF
     16  f587
     17  f587					      REPEAT	.CYCLES / 2
     18  f587		       ea		      nop
     17  f587					      REPEND
     18  f588		       ea		      nop
     17  f588					      REPEND
     18  f589		       ea		      nop
     17  f589					      REPEND
     18  f58a		       ea		      nop
     17  f58a					      REPEND
     18  f58b		       ea		      nop
     17  f58b					      REPEND
     18  f58c		       ea		      nop
     17  f58c					      REPEND
     18  f58d		       ea		      nop
     19  f58e					      REPEND
   1151  f58e
   1152  f58e		       a5 b3		      LDA	Tmp3	;3
   1153  f590		       85 09		      STA	COLUBK	;3
   1154  f592		       4c 97 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1155  f595							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1156  f595
   1157  f595							;main scanline loop...
   1158  f595				   ScanLoop
   1159  f595		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1160  f597
   1161  f597							;Start of next line!			
   1162  f597				   DrawCache		;63 Is the last line going to the top of the next frame?
   1163  f597		       a5 81		      LDA	PF0Cache	;3
   1164  f599		       85 0d		      STA	PF0	;3
   1165  f59b
   1166  f59b		       a5 82		      LDA	PF1Cache	;3
   1167  f59d		       85 0e		      STA	PF1	;3
   1168  f59f
   1169  f59f		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1170  f5a1		       b0 04		      BCS	SkipDrawCar	;2
   1171  f5a3		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1172  f5a5		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1173  f5a7				   SkipDrawCar
   1174  f5a7
   1175  f5a7		       a5 84		      LDA	GRP1Cache	;3
   1176  f5a9		       85 1c		      STA	GRP1	;3
   1177  f5ab
   1178  f5ab		       a5 85		      LDA	ENABLCache	;3
   1179  f5ad		       85 1f		      STA	ENABL	;3
   1180  f5af
   1181  f5af		       a5 86		      LDA	ENAM0Cache	;3
   1182  f5b1		       85 1d		      STA	ENAM0	;3
   1183  f5b3
   1184  f5b3		       a5 87		      LDA	ENAM1Cache	;3
   1185  f5b5		       85 1e		      STA	ENAM1	;3
   1186  f5b7
   1187  f5b7		       a9 00		      LDA	#0	;2
   1188  f5b9							;STA PF1Cache ;3
   1189  f5b9		       85 84		      STA	GRP1Cache	;3
   1190  f5bb		       85 85		      STA	ENABLCache	;3
   1191  f5bd		       85 86		      STA	ENAM0Cache	;3
   1192  f5bf		       85 87		      STA	ENAM1Cache	; 3
   1193  f5c1
   1194  f5c1							;BEQ DrawTraffic3
   1195  f5c1				   DrawTraffic1 		; 33
   1196  f5c1		       98		      TYA		; 2
   1197  f5c2		       18		      CLC		; 2 
   1198  f5c3		       65 95		      ADC	TrafficOffset1 + 1	;3
   1199  f5c5		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1200  f5c7		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1201  f5c9		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1202  f5cb		       4c d0 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1203  f5ce				   EorOffsetWithCarry
   1204  f5ce		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1205  f5d0				   AfterEorOffsetWithCarry		;17
   1206  f5d0		       aa		      TAX		;2
   1207  f5d1		       bd 00 fe 	      LDA	AesTable,X	; 4
   1208  f5d4		       c5 c1		      CMP	TrafficChance	;3
   1209  f5d6		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1210  f5d8		       a9 ff		      LDA	#$FF	;2
   1211  f5da		       85 84		      STA	GRP1Cache	;3
   1212  f5dc				   FinishDrawTraffic1
   1213  f5dc
   1214  f5dc				   DrawTraffic2 		; 33
   1215  f5dc		       98		      TYA		; 2
   1216  f5dd		       18		      CLC		; 2 
   1217  f5de		       65 99		      ADC	TrafficOffset2 + 1	;3
   1218  f5e0		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1219  f5e2		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1220  f5e4		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1221  f5e6		       4c eb f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1222  f5e9				   EorOffsetWithCarry2
   1223  f5e9		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1224  f5eb				   AfterEorOffsetWithCarry2		;17
   1225  f5eb		       aa		      TAX		;2
   1226  f5ec		       bd 00 fe 	      LDA	AesTable,X	; 4
   1227  f5ef		       c5 c1		      CMP	TrafficChance	;3
   1228  f5f1		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1229  f5f3		       a9 02		      LDA	#%00000010	;2
   1230  f5f5		       85 85		      STA	ENABLCache	;3
   1231  f5f7				   FinishDrawTraffic2
   1232  f5f7
   1233  f5f7							;STA WSYNC ;65 / 137
   1234  f5f7
   1235  f5f7							; LDA Tmp0 ; Flicker this line if drawing car
   1236  f5f7							; BEQ FinishDrawTraffic4
   1237  f5f7				   DrawTraffic3 		; 33
   1238  f5f7		       98		      TYA		; 2
   1239  f5f8		       18		      CLC		; 2 
   1240  f5f9		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1241  f5fb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1242  f5fd		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1243  f5ff		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1244  f601		       4c 06 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1245  f604				   EorOffsetWithCarry3
   1246  f604		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1247  f606				   AfterEorOffsetWithCarry3		;17
   1248  f606		       aa		      TAX		;2
   1249  f607		       bd 00 fe 	      LDA	AesTable,X	; 4
   1250  f60a		       c5 c1		      CMP	TrafficChance	;3
   1251  f60c		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1252  f60e		       a9 02		      LDA	#%00000010	;2
   1253  f610		       85 86		      STA	ENAM0Cache
   1254  f612				   FinishDrawTraffic3
   1255  f612
   1256  f612				   DrawTraffic4 		; 33
   1257  f612		       98		      TYA		; 2
   1258  f613		       18		      CLC		; 2 
   1259  f614		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1260  f616		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1261  f618		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1262  f61a		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1263  f61c		       4c 21 f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1264  f61f				   EorOffsetWithCarry4
   1265  f61f		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1266  f621				   AfterEorOffsetWithCarry4		;17
   1267  f621		       aa		      TAX		;2
   1268  f622		       bd 00 fe 	      LDA	AesTable,X	; 4
   1269  f625		       c5 c1		      CMP	TrafficChance	;3
   1270  f627		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1271  f629		       a9 02		      LDA	#%00000010	;2
   1272  f62b		       85 87		      STA	ENAM1Cache	;3
   1273  f62d				   FinishDrawTraffic4
   1274  f62d
   1275  f62d				   DrawTraffic0 		; 20
   1276  f62d		       98		      TYA		;2
   1277  f62e		       29 07		      AND	#%00000111	;2
   1278  f630		       aa		      TAX		;2
   1279  f631		       b5 d8		      LDA	ParallaxCache,X	;4
   1280  f633		       85 82		      STA	PF1Cache	;3
   1281  f635		       b5 f0		      LDA	ParallaxCache2,X	;4
   1282  f637		       85 81		      STA	PF0Cache	;3
   1283  f639
   1284  f639				   SkipDrawTraffic0
   1285  f639
   1286  f639				   WhileScanLoop
   1287  f639		       88		      DEY		;2
   1288  f63a		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1289  f63c		       4c 95 f5 	      JMP	ScanLoop	;3
   1290  f63f				   FinishScanLoop		; 7 209 of 222
   1291  f63f
   1292  f63f		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1293  f641		       20 58 f7 	      JSR	LoadAll
   1294  f644		       85 02		      STA	WSYNC	; do stuff!
   1295  f646		       85 02		      STA	WSYNC
   1296  f648		       85 02		      STA	WSYNC
   1297  f64a							;42 cycles to use here
   1298  f64a
   1299  f64a				   PrepareOverscan
   1300  f64a		       a9 02		      LDA	#2
   1301  f64c		       85 02		      STA	WSYNC
   1302  f64e		       85 01		      STA	VBLANK
   1303  f650
   1304  f650		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1305  f652		       8d 96 02 	      STA	TIM64T
   1306  f655
   1307  f655				   LeftSound		;58
   1308  f655		       a5 ba		      LDA	CountdownTimer	;3
   1309  f657		       f0 24		      BEQ	EngineOff	;2
   1310  f659		       a5 8e		      LDA	Player0SpeedL	;3
   1311  f65b		       29 80		      AND	#%10000000	;2
   1312  f65d		       05 8f		      ORA	Player0SpeedH	;3
   1313  f65f		       18		      CLC		;2
   1314  f660		       2a		      ROL		;2
   1315  f661		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   1316  f663		       aa		      TAX		;2
   1317  f664		       a5 8e		      LDA	Player0SpeedL	;3
   1318  f666		       4a		      LSR		;2
   1319  f667		       4a		      LSR		;2
   1320  f668		       4a		      LSR		;2
   1321  f669		       29 0f		      AND	#%00001111	;2
   1322  f66b		       85 b0		      STA	Tmp0	;3
   1323  f66d		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1324  f670		       38		      SEC		;2
   1325  f671		       e5 b0		      SBC	Tmp0	;3
   1326  f673		       85 17		      STA	AUDF0	;3
   1327  f675		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1328  f678		       85 15		      STA	AUDC0	;3
   1329  f67a		       4c 81 f6 	      JMP	EndLeftSound	;3
   1330  f67d				   EngineOff
   1331  f67d		       a9 00		      LDA	#0
   1332  f67f		       85 15		      STA	AUDC0
   1333  f681
   1334  f681				   EndLeftSound
   1335  f681
   1336  f681
   1337  f681				   RightSound		; 70 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1338  f681		       a5 d5		      LDA	ScoreFontColor	;3
   1339  f683		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1340  f685		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1341  f687		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1342  f689		       f0 29		      BEQ	PlayCheckpoint	;2
   1343  f68b		       a5 b8		      LDA	CollisionCounter	;3
   1344  f68d		       c9 e0		      CMP	#$E0	;2
   1345  f68f		       b0 14		      BCS	PlayColision	;2
   1346  f691		       a5 d7		      LDA	NextCheckpoint	;3
   1347  f693		       38		      SEC		;2
   1348  f694		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1349  f696		       c9 02		      CMP	#$02	;2
   1350  f698		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1351  f69a		       a5 ba		      LDA	CountdownTimer	; 3
   1352  f69c		       f0 53		      BEQ	MuteRightSound	;2
   1353  f69e		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1354  f6a0		       90 37		      BCC	PlayWarnTimeEnding	;4
   1355  f6a2		       4c f1 f6 	      JMP	MuteRightSound	;3
   1356  f6a5				   PlayColision
   1357  f6a5		       a9 1f		      LDA	#31
   1358  f6a7		       85 18		      STA	AUDF1
   1359  f6a9		       a9 08		      LDA	#8
   1360  f6ab		       85 16		      STA	AUDC1
   1361  f6ad		       a9 08		      LDA	#8
   1362  f6af		       85 1a		      STA	AUDV1
   1363  f6b1		       4c f5 f6 	      JMP	EndRightSound
   1364  f6b4
   1365  f6b4				   PlayCheckpoint
   1366  f6b4		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1367  f6b6		       4a		      LSR		;2
   1368  f6b7		       4a		      LSR		;2
   1369  f6b8		       4a		      LSR		;2
   1370  f6b9		       85 18		      STA	AUDF1	;3
   1371  f6bb		       a9 0c		      LDA	#12	;2
   1372  f6bd		       85 16		      STA	AUDC1	;3
   1373  f6bf		       a9 06		      LDA	#6	;2
   1374  f6c1		       85 1a		      STA	AUDV1	;3
   1375  f6c3		       4c f5 f6 	      JMP	EndRightSound	;3
   1376  f6c6
   1377  f6c6				   PlayBeforeCheckpoint
   1378  f6c6		       a5 8c		      LDA	FrameCount0	;3
   1379  f6c8		       29 1c		      AND	#%00011100	;2
   1380  f6ca		       09 03		      ORA	#%00000011	;2
   1381  f6cc		       85 18		      STA	AUDF1	;3
   1382  f6ce		       a9 0c		      LDA	#12	;2
   1383  f6d0		       85 16		      STA	AUDC1	;3
   1384  f6d2		       a9 03		      LDA	#3	;2
   1385  f6d4		       85 1a		      STA	AUDV1	;3
   1386  f6d6		       4c f5 f6 	      JMP	EndRightSound	;3
   1387  f6d9
   1388  f6d9				   PlayWarnTimeEnding
   1389  f6d9		       a5 8c		      LDA	FrameCount0	;3
   1390  f6db		       29 04		      AND	#%00000100	;2
   1391  f6dd		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1392  f6df		       18		      CLC		;2
   1393  f6e0		       a9 0a		      LDA	#10	;2
   1394  f6e2		       65 ba		      ADC	CountdownTimer
   1395  f6e4		       85 18		      STA	AUDF1	;3
   1396  f6e6		       a9 0c		      LDA	#12	;2
   1397  f6e8		       85 16		      STA	AUDC1	;3
   1398  f6ea		       a9 03		      LDA	#3	;2
   1399  f6ec		       85 1a		      STA	AUDV1	;3
   1400  f6ee		       4c f5 f6 	      JMP	EndRightSound	;3
   1401  f6f1
   1402  f6f1				   MuteRightSound
   1403  f6f1		       a9 00		      LDA	#0
   1404  f6f3		       85 1a		      STA	AUDV1
   1405  f6f5				   EndRightSound
   1406  f6f5
   1407  f6f5				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1408  f6f5		       a5 c0		      LDA	GameStatus	;3
   1409  f6f7		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1410  f6f9		       a5 d5		      LDA	ScoreFontColor	;3
   1411  f6fb		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1412  f6fd		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1413  f6ff		       c6 cf		      DEC	OneSecondConter	;5
   1414  f701		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1415  f703
   1416  f703		       f8		      SED		;2 BCD Operations after this point
   1417  f704				   CountGlideTimeBcd
   1418  f704		       a5 d5		      LDA	ScoreFontColor	;3
   1419  f706		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1420  f708		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1421  f70a		       18		      CLC		;2
   1422  f70b		       a5 cd		      LDA	GlideTimeBcd0	;3
   1423  f70d		       69 01		      ADC	#1	;3
   1424  f70f		       85 cd		      STA	GlideTimeBcd0	;3
   1425  f711		       a5 ce		      LDA	GlideTimeBcd1	;3
   1426  f713		       69 00		      ADC	#0	;2
   1427  f715		       85 ce		      STA	GlideTimeBcd1	;3
   1428  f717				   EndCountGlideTimeBcd
   1429  f717				   IncreaseTotalTimerBcd
   1430  f717		       18		      CLC		;2
   1431  f718		       a5 bd		      LDA	TimeBcd0	;3
   1432  f71a		       69 01		      ADC	#1	;2
   1433  f71c		       85 bd		      STA	TimeBcd0	;3
   1434  f71e		       a5 be		      LDA	TimeBcd1	;3
   1435  f720		       69 00		      ADC	#0	;2
   1436  f722		       85 be		      STA	TimeBcd1	;3
   1437  f724		       a5 bf		      LDA	TimeBcd2	;3
   1438  f726		       69 00		      ADC	#0	;2
   1439  f728		       85 bf		      STA	TimeBcd2	;3
   1440  f72a
   1441  f72a				   ResetOneSecondCounter
   1442  f72a		       d8		      CLD		;2
   1443  f72b		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1444  f72d		       85 cf		      STA	OneSecondConter	;3
   1445  f72f
   1446  f72f				   EndExactlyEverySecond
   1447  f72f
   1448  f72f				   OverScanWait
   1449  f72f		       ad 84 02 	      LDA	INTIM
   1450  f732		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1451  f734		       4c c0 f0 	      JMP	MainLoop
   1452  f737
   1453  f737				   Subroutines
   1454  f737
   1455  f737				   ClearAll		; 52
   1456  f737		       a9 00		      LDA	#0	;2
   1457  f739		       85 1c		      STA	GRP1	;3
   1458  f73b		       85 1f		      STA	ENABL	;3
   1459  f73d		       85 1d		      STA	ENAM0	;3
   1460  f73f		       85 1e		      STA	ENAM1	;3
   1461  f741		       85 84		      STA	GRP1Cache	;3
   1462  f743		       85 85		      STA	ENABLCache	;3
   1463  f745		       85 86		      STA	ENAM0Cache	;3
   1464  f747		       85 87		      STA	ENAM1Cache	;3
   1465  f749
   1466  f749				   ClearPF		; 26
   1467  f749		       a9 00		      LDA	#0	;2
   1468  f74b				   ClearPFSkipLDA0
   1469  f74b		       85 0d		      STA	PF0	;3
   1470  f74d		       85 0e		      STA	PF1	;3
   1471  f74f		       85 0f		      STA	PF2	;3	
   1472  f751		       85 81		      STA	PF0Cache	;3
   1473  f753		       85 82		      STA	PF1Cache	;3
   1474  f755		       85 83		      STA	PF2Cache	;3 
   1475  f757		       60		      RTS		;6
   1476  f758				   EndClearAll
   1477  f758
   1478  f758				   LoadAll		; 48
   1479  f758		       a5 81		      LDA	PF0Cache	;3
   1480  f75a		       85 0d		      STA	PF0	;3
   1481  f75c
   1482  f75c		       a5 82		      LDA	PF1Cache	;3
   1483  f75e		       85 0e		      STA	PF1	;3
   1484  f760
   1485  f760		       a5 83		      LDA	PF2Cache	;3
   1486  f762		       85 0f		      STA	PF2	;3
   1487  f764
   1488  f764		       a5 84		      LDA	GRP1Cache	;3
   1489  f766		       85 1c		      STA	GRP1	;3
   1490  f768
   1491  f768		       a5 85		      LDA	ENABLCache	;3
   1492  f76a		       85 1f		      STA	ENABL	;3
   1493  f76c
   1494  f76c		       a5 86		      LDA	ENAM0Cache	;3
   1495  f76e		       85 1d		      STA	ENAM0	;3
   1496  f770
   1497  f770		       a5 87		      LDA	ENAM1Cache	;3
   1498  f772		       85 1e		      STA	ENAM1	;3
   1499  f774
   1500  f774		       60		      RTS		;6
   1501  f775				   EndLoadAll
   1502  f775
   1503  f775				   NextDifficulty
   1504  f775		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1505  f777		       29 01		      AND	#%00000001
   1506  f779		       d0 3f		      BNE	CheckRandomDifficulty
   1507  f77b
   1508  f77b		       a5 c4		      LDA	CurrentDifficulty
   1509  f77d		       18		      CLC
   1510  f77e		       69 01		      ADC	#1
   1511  f780		       29 03		      AND	#%00000011	; 0 to 3
   1512  f782		       85 c4		      STA	CurrentDifficulty
   1513  f784
   1514  f784				   ConfigureDifficulty
   1515  f784		       a5 c4		      LDA	CurrentDifficulty
   1516  f786		       f0 0b		      BEQ	ConfigureLightTraffic
   1517  f788		       c9 01		      CMP	#1
   1518  f78a		       f0 10		      BEQ	ConfigureRegularTraffic
   1519  f78c		       c9 02		      CMP	#2
   1520  f78e		       f0 15		      BEQ	ConfigureIntenseTraffic
   1521  f790		       4c ae f7 	      JMP	ConfigureRushHourTraffic
   1522  f793
   1523  f793				   ConfigureLightTraffic
   1524  f793		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1525  f795		       a0 1d		      LDY	#CHECKPOINT_TIME_LIGHT
   1526  f797		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1527  f799		       4c b4 f7 	      JMP	StoreTrafficChance
   1528  f79c				   ConfigureRegularTraffic
   1529  f79c		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1530  f79e		       a0 22		      LDY	#CHECKPOINT_TIME_REGULAR
   1531  f7a0		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1532  f7a2		       4c b4 f7 	      JMP	StoreTrafficChance
   1533  f7a5				   ConfigureIntenseTraffic
   1534  f7a5		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1535  f7a7		       a0 27		      LDY	#CHECKPOINT_TIME_INTENSE
   1536  f7a9		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1537  f7ab		       4c b4 f7 	      JMP	StoreTrafficChance
   1538  f7ae				   ConfigureRushHourTraffic
   1539  f7ae		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1540  f7b0		       a0 2c		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1541  f7b2		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1542  f7b4
   1543  f7b4				   StoreTrafficChance
   1544  f7b4		       86 c1		      STX	TrafficChance
   1545  f7b6		       84 c2		      STY	CheckpointTime
   1546  f7b8		       85 c3		      STA	TrafficColor
   1547  f7ba
   1548  f7ba				   CheckRandomDifficulty
   1549  f7ba		       a5 c5		      LDA	GameMode
   1550  f7bc		       29 08		      AND	#%00001000	; Random difficulties
   1551  f7be		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1552  f7c0				   RandomDificulty
   1553  f7c0		       a6 8c		      LDX	FrameCount0
   1554  f7c2		       bd 00 fe 	      LDA	AesTable,X
   1555  f7c5		       45 c1		      EOR	TrafficChance
   1556  f7c7		       29 3f		      AND	#%00111111
   1557  f7c9		       85 c1		      STA	TrafficChance
   1558  f7cb
   1559  f7cb				   ReturnFromNextDifficulty
   1560  f7cb		       60		      RTS
   1561  f7cc				   EndNextDifficulty
   1562  f7cc
   1563  f7cc				   DefaultOffsets
   1564  f7cc		       a9 20		      LDA	#$20
   1565  f7ce		       85 96		      STA	TrafficOffset1 + 2
   1566  f7d0		       a9 40		      LDA	#$40
   1567  f7d2		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1568  f7d4		       a9 60		      LDA	#$60
   1569  f7d6		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1570  f7d8		       a9 80		      LDA	#$80
   1571  f7da		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1572  f7dc		       a9 a0		      LDA	#$A0
   1573  f7de		       60		      RTS
   1574  f7df
   1575  f7df				   PrintStaticText		; Preload X with the offset referent to StaticText
   1576  f7df		       bd 00 ff 	      LDA	StaticText,X
   1577  f7e2		       85 d0		      STA	ScoreD0
   1578  f7e4		       e8		      INX
   1579  f7e5		       bd 00 ff 	      LDA	StaticText,X
   1580  f7e8		       85 d1		      STA	ScoreD1
   1581  f7ea		       e8		      INX
   1582  f7eb		       bd 00 ff 	      LDA	StaticText,X
   1583  f7ee		       85 d2		      STA	ScoreD2
   1584  f7f0		       e8		      INX
   1585  f7f1		       bd 00 ff 	      LDA	StaticText,X
   1586  f7f4		       85 d3		      STA	ScoreD3
   1587  f7f6		       e8		      INX
   1588  f7f7		       bd 00 ff 	      LDA	StaticText,X
   1589  f7fa		       85 d4		      STA	ScoreD4
   1590  f7fc		       60		      RTS
   1591  f7fd
   1592  f7fd				   HorizontalParallaxLoop
   1593  f7fd		       a9 ef		      LDA	#%11101111	; Clear the house
   1594  f7ff		       39 d8 00 	      AND	ParallaxCache,Y
   1595  f802		       99 d8 00 	      STA	ParallaxCache,Y
   1596  f805				   CalculateParallax0
   1597  f805		       98		      TYA
   1598  f806		       18		      CLC
   1599  f807		       65 91		      ADC	TrafficOffset0 + 1
   1600  f809		       29 04		      AND	#%00000100
   1601  f80b		       f0 08		      BEQ	HasEmptySpace0
   1602  f80d				   HasBorder0
   1603  f80d		       b9 d8 00 	      LDA	ParallaxCache,Y
   1604  f810		       09 0f		      ORA	#%00001111
   1605  f812		       4c 1a f8 	      JMP	StoreParallax0
   1606  f815				   HasEmptySpace0
   1607  f815		       b9 d8 00 	      LDA	ParallaxCache,Y
   1608  f818		       29 f0		      AND	#%11110000
   1609  f81a
   1610  f81a				   StoreParallax0
   1611  f81a		       99 d8 00 	      STA	ParallaxCache,Y
   1612  f81d
   1613  f81d				   CalculateParallax1
   1614  f81d		       98		      TYA
   1615  f81e		       18		      CLC
   1616  f81f		       65 c7		      ADC	ParallaxOffset1 + 1
   1617  f821		       29 04		      AND	#%00000100
   1618  f823		       f0 08		      BEQ	HasEmptySpace1
   1619  f825				   HasBorder1
   1620  f825		       b9 d8 00 	      LDA	ParallaxCache,Y
   1621  f828		       09 e0		      ORA	#%11100000
   1622  f82a		       4c 32 f8 	      JMP	StoreParallax1
   1623  f82d				   HasEmptySpace1
   1624  f82d		       b9 d8 00 	      LDA	ParallaxCache,Y
   1625  f830		       29 1f		      AND	#%00011111
   1626  f832
   1627  f832				   StoreParallax1
   1628  f832		       99 d8 00 	      STA	ParallaxCache,Y
   1629  f835
   1630  f835				   CalculateParallax2
   1631  f835		       98		      TYA
   1632  f836		       18		      CLC
   1633  f837		       65 c9		      ADC	ParallaxOffset2 + 1
   1634  f839		       29 04		      AND	#%00000100
   1635  f83b		       f0 05		      BEQ	HasEmptySpace2
   1636  f83d				   HasBorder2
   1637  f83d		       a9 60		      LDA	#%01100000
   1638  f83f		       4c 44 f8 	      JMP	StoreParallax2
   1639  f842				   HasEmptySpace2
   1640  f842		       a9 00		      LDA	#0
   1641  f844
   1642  f844				   StoreParallax2
   1643  f844		       99 f0 00 	      STA	ParallaxCache2,Y
   1644  f847
   1645  f847				   ContinueHorizontalParallaxLoop
   1646  f847		       88		      DEY
   1647  f848		       10 b3		      BPL	HorizontalParallaxLoop
   1648  f84a		       60		      RTS
   1649  f84b
   1650  f84b				   DefaultBorderLoop
   1651  f84b				   CalculateDefaultBorder
   1652  f84b		       98		      TYA
   1653  f84c		       18		      CLC
   1654  f84d		       65 91		      ADC	TrafficOffset0 + 1
   1655  f84f		       29 04		      AND	#%00000100
   1656  f851		       f0 05		      BEQ	HasEmptySpace
   1657  f853				   HasBorder
   1658  f853		       a9 ff		      LDA	#$FF
   1659  f855		       4c 5a f8 	      JMP	StoreBorder
   1660  f858				   HasEmptySpace
   1661  f858		       a9 00		      LDA	#0
   1662  f85a
   1663  f85a				   StoreBorder
   1664  f85a		       99 d8 00 	      STA	ParallaxCache,Y
   1665  f85d		       a9 00		      LDA	#0
   1666  f85f		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1667  f862
   1668  f862				   ContinueDefaultBorderLoop
   1669  f862		       88		      DEY
   1670  f863		       10 e6		      BPL	DefaultBorderLoop
   1671  f865		       60		      RTS
   1672  f866
   1673  f866				   PrepareTachometerBorderLoop
   1674  f866		       a5 8e		      LDA	Player0SpeedL
   1675  f868		       29 80		      AND	#%10000000
   1676  f86a		       05 8f		      ORA	Player0SpeedH
   1677  f86c		       18		      CLC
   1678  f86d		       2a		      ROL
   1679  f86e		       69 00		      ADC	#0
   1680  f870		       85 b0		      STA	Tmp0	; Gear
   1681  f872		       a5 8e		      LDA	Player0SpeedL
   1682  f874		       4a		      LSR
   1683  f875		       4a		      LSR
   1684  f876		       4a		      LSR
   1685  f877		       4a		      LSR
   1686  f878		       29 07		      AND	#%00000111
   1687  f87a		       85 b1		      STA	Tmp1	; RPM
   1688  f87c		       a6 a9		      LDX	CurrentCarId	; Y cannot be destroyed here
   1689  f87e		       bd d9 ff 	      LDA	CarIdToMaxGear,X
   1690  f881		       85 b2		      STA	Tmp2	; Max Gear
   1691  f883
   1692  f883				   TachometerBorderLoop
   1693  f883		       98		      TYA
   1694  f884		       18		      CLC
   1695  f885		       65 91		      ADC	TrafficOffset0 + 1
   1696  f887		       29 04		      AND	#%00000100
   1697  f889		       f0 10		      BEQ	HasBorderTac
   1698  f88b		       a6 b0		      LDX	Tmp0
   1699  f88d		       bd eb fd 	      LDA	TachometerGearLookup,X
   1700  f890		       99 d8 00 	      STA	ParallaxCache,Y
   1701  f893		       a9 00		      LDA	#0
   1702  f895		       99 f0 00 	      STA	ParallaxCache2,Y
   1703  f898		       4c bd f8 	      JMP	ContinueBorderTac
   1704  f89b				   HasBorderTac
   1705  f89b		       a5 b2		      LDA	Tmp2	; Max Gear
   1706  f89d		       c5 b0		      CMP	Tmp0	; Only on max speed
   1707  f89f		       f0 11		      BEQ	FullBorderTac
   1708  f8a1		       a6 b1		      LDX	Tmp1
   1709  f8a3		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1710  f8a6		       99 d8 00 	      STA	ParallaxCache,Y
   1711  f8a9		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1712  f8ac		       99 f0 00 	      STA	ParallaxCache2,Y
   1713  f8af		       4c bd f8 	      JMP	ContinueBorderTac
   1714  f8b2
   1715  f8b2				   FullBorderTac
   1716  f8b2		       a9 ff		      LDA	#$FF
   1717  f8b4		       99 d8 00 	      STA	ParallaxCache,Y
   1718  f8b7		       99 f0 00 	      STA	ParallaxCache2,Y
   1719  f8ba		       4c bd f8 	      JMP	ContinueBorderTac
   1720  f8bd
   1721  f8bd				   ContinueBorderTac
   1722  f8bd		       88		      DEY
   1723  f8be		       10 c3		      BPL	TachometerBorderLoop
   1724  f8c0		       60		      RTS
   1725  f8c1
   1726  f8c1				   VerticalParallaxLoop
   1727  f8c1				   CalculateVerticalParallax0
   1728  f8c1		       98		      TYA
   1729  f8c2		       18		      CLC
   1730  f8c3		       65 91		      ADC	TrafficOffset0 + 1
   1731  f8c5		       29 06		      AND	#%00000110
   1732  f8c7		       d0 0b		      BNE	HasNoVerticalLine0
   1733  f8c9				   HasVerticalLine0
   1734  f8c9		       a9 ff		      LDA	#$FF
   1735  f8cb		       99 d8 00 	      STA	ParallaxCache,Y
   1736  f8ce		       99 f0 00 	      STA	ParallaxCache2,Y
   1737  f8d1		       4c 11 f9 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1738  f8d4				   HasNoVerticalLine0
   1739  f8d4		       a9 00		      LDA	#0
   1740  f8d6		       99 d8 00 	      STA	ParallaxCache,Y
   1741  f8d9		       99 f0 00 	      STA	ParallaxCache2,Y
   1742  f8dc
   1743  f8dc				   CalculateVerticalParallax1
   1744  f8dc		       98		      TYA
   1745  f8dd		       18		      CLC
   1746  f8de		       65 c7		      ADC	ParallaxOffset1 + 1
   1747  f8e0		       29 07		      AND	#%00000111
   1748  f8e2		       d0 0d		      BNE	HasNoVerticalLine1
   1749  f8e4
   1750  f8e4				   HasVerticalLine1
   1751  f8e4		       a9 fc		      LDA	#%11111100
   1752  f8e6		       99 d8 00 	      STA	ParallaxCache,Y
   1753  f8e9		       a9 c0		      LDA	#%11000000
   1754  f8eb		       99 f0 00 	      STA	ParallaxCache2,Y
   1755  f8ee		       4c 11 f9 	      JMP	ContinueVerticalParallaxLoop
   1756  f8f1				   HasNoVerticalLine1
   1757  f8f1		       a9 00		      LDA	#0
   1758  f8f3		       99 d8 00 	      STA	ParallaxCache,Y
   1759  f8f6		       99 f0 00 	      STA	ParallaxCache2,Y
   1760  f8f9
   1761  f8f9				   CalculateVerticalParallax2
   1762  f8f9		       98		      TYA
   1763  f8fa		       18		      CLC
   1764  f8fb		       65 c9		      ADC	ParallaxOffset2 + 1
   1765  f8fd		       29 07		      AND	#%00000111
   1766  f8ff		       d0 08		      BNE	HasNoVerticalLine2
   1767  f901
   1768  f901				   HasVerticalLine2
   1769  f901		       a9 f0		      LDA	#%11110000
   1770  f903		       99 d8 00 	      STA	ParallaxCache,Y
   1771  f906		       4c 11 f9 	      JMP	ContinueVerticalParallaxLoop
   1772  f909				   HasNoVerticalLine2
   1773  f909		       a9 00		      LDA	#0
   1774  f90b		       99 d8 00 	      STA	ParallaxCache,Y
   1775  f90e		       99 f0 00 	      STA	ParallaxCache2,Y
   1776  f911
   1777  f911				   ContinueVerticalParallaxLoop
   1778  f911		       88		      DEY
   1779  f912		       10 ad		      BPL	VerticalParallaxLoop
   1780  f914		       60		      RTS
   1781  f915
   1782  f915				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1783  f915		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1784  f917		       85 d5		      STA	ScoreFontColor
   1785  f919		       a9 01		      LDA	#1
   1786  f91b		       85 d6		      STA	ScoreFontColorHoldChange
   1787  f91d
   1788  f91d		       a5 8d		      LDA	FrameCount1
   1789  f91f		       29 07		      AND	#%00000111
   1790  f921		       85 b3		      STA	Tmp3
   1791  f923							;0 is Zelda Name, (default)
   1792  f923		       a9 01		      LDA	#1
   1793  f925		       c5 b3		      CMP	Tmp3
   1794  f927		       f0 38		      BEQ	PrintZeldaDateLeft
   1795  f929
   1796  f929		       a9 02		      LDA	#2
   1797  f92b		       c5 b3		      CMP	Tmp3
   1798  f92d		       f0 23		      BEQ	PrintPolvinhosLeft
   1799  f92f
   1800  f92f		       a9 03		      LDA	#3
   1801  f931		       c5 b3		      CMP	Tmp3
   1802  f933		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1803  f935
   1804  f935		       a9 04		      LDA	#4
   1805  f937		       c5 b3		      CMP	Tmp3
   1806  f939		       f0 1c		      BEQ	PrintIvonneLeft
   1807  f93b
   1808  f93b		       a9 05		      LDA	#5
   1809  f93d		       c5 b3		      CMP	Tmp3
   1810  f93f		       f0 2a		      BEQ	PrintIvonneDateLeft
   1811  f941
   1812  f941		       a9 06		      LDA	#6
   1813  f943		       c5 b3		      CMP	Tmp3
   1814  f945		       f0 15		      BEQ	PrintArtLeft
   1815  f947
   1816  f947		       a9 07		      LDA	#7
   1817  f949		       c5 b3		      CMP	Tmp3
   1818  f94b		       f0 23		      BEQ	PrintLeonardoLeft
   1819  f94d
   1820  f94d				   PrintZeldaLeft
   1821  f94d		       a2 28		      LDX	#<ZeldaTextLeft
   1822  f94f		       4c 75 f9 	      JMP	ProcessPrintEasterEgg
   1823  f952				   PrintPolvinhosLeft
   1824  f952		       a2 3c		      LDX	#<PolvinhosTextLeft
   1825  f954		       4c 75 f9 	      JMP	ProcessPrintEasterEgg
   1826  f957				   PrintIvonneLeft
   1827  f957		       a2 50		      LDX	#<IvonneTextLeft
   1828  f959		       4c 75 f9 	      JMP	ProcessPrintEasterEgg
   1829  f95c				   PrintArtLeft
   1830  f95c		       a2 64		      LDX	#<PaperArtTextLeft
   1831  f95e		       4c 75 f9 	      JMP	ProcessPrintEasterEgg
   1832  f961
   1833  f961				   PrintZeldaDateLeft
   1834  f961		       a2 32		      LDX	#<ZeldaDateLeft
   1835  f963		       4c 75 f9 	      JMP	ProcessPrintEasterEgg
   1836  f966				   PrintPolvinhosDateLeft
   1837  f966		       a2 46		      LDX	#<PolvinhosDateLeft
   1838  f968		       4c 75 f9 	      JMP	ProcessPrintEasterEgg
   1839  f96b				   PrintIvonneDateLeft
   1840  f96b		       a2 5a		      LDX	#<IvonneDateLeft
   1841  f96d		       4c 75 f9 	      JMP	ProcessPrintEasterEgg
   1842  f970				   PrintLeonardoLeft
   1843  f970		       a2 6e		      LDX	#<LeonardoTextLeft
   1844  f972		       4c 75 f9 	      JMP	ProcessPrintEasterEgg
   1845  f975
   1846  f975				   ProcessPrintEasterEgg
   1847  f975		       a5 8c		      LDA	FrameCount0	;3
   1848  f977		       29 01		      AND	#%00000001	;2
   1849  f979		       d0 03		      BNE	TranformIntoRightText
   1850  f97b		       4c 83 f9 	      JMP	PrintEasterEggText
   1851  f97e				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1852  f97e		       8a		      TXA
   1853  f97f		       18		      CLC
   1854  f980		       69 05		      ADC	#HALF_TEXT_SIZE
   1855  f982		       aa		      TAX
   1856  f983
   1857  f983				   PrintEasterEggText
   1858  f983		       20 df f7 	      JSR	PrintStaticText
   1859  f986		       60		      RTS
   1860  f987
   1861  f987				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1862  f987		       a2 00		      LDX	#0
   1863  f989		       a0 04		      LDY	#FONT_OFFSET
   1864  f98b
   1865  f98b				   ScoreLoop		; 20 
   1866  f98b		       85 02		      STA	WSYNC	;2
   1867  f98d
   1868  f98d		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1869  f98f		       85 0d		      STA	PF0	;3
   1870  f991
   1871  f991		       a5 82		      LDA	PF1Cache	;3
   1872  f993		       85 0e		      STA	PF1	;3
   1873  f995
   1874  f995		       a5 83		      LDA	PF2Cache	;3
   1875  f997		       85 0f		      STA	PF2	;3
   1876  f999
   1877  f999				   DrawScoreD0		; 15
   1878  f999		       a6 d0		      LDX	ScoreD0	; 3
   1879  f99b		       bd 00 fd 	      LDA	Font,X	;4
   1880  f99e		       85 81		      STA	PF0Cache	;3
   1881  f9a0		       c6 d0		      DEC	ScoreD0	;5
   1882  f9a2
   1883  f9a2				   DrawScoreD1		; 23	
   1884  f9a2		       a6 d1		      LDX	ScoreD1	; 3
   1885  f9a4		       bd 00 fd 	      LDA	Font,X	;4
   1886  f9a7		       0a		      ASL		;2
   1887  f9a8		       0a		      ASL		;2
   1888  f9a9		       0a		      ASL		;2
   1889  f9aa		       0a		      ASL		;2
   1890  f9ab		       85 82		      STA	PF1Cache	;3
   1891  f9ad		       c6 d1		      DEC	ScoreD1	;5
   1892  f9af
   1893  f9af				   DrawScoreD2		; 20
   1894  f9af		       a6 d2		      LDX	ScoreD2	; 3
   1895  f9b1		       bd 00 fd 	      LDA	Font,X	;4
   1896  f9b4		       29 0f		      AND	#%00001111	;2
   1897  f9b6		       05 82		      ORA	PF1Cache	;3
   1898  f9b8		       85 82		      STA	PF1Cache	;3
   1899  f9ba		       c6 d2		      DEC	ScoreD2	;5
   1900  f9bc
   1901  f9bc				   DrawScoreD3		; 23
   1902  f9bc		       a6 d3		      LDX	ScoreD3	; 3
   1903  f9be		       bd 00 fd 	      LDA	Font,X	;4
   1904  f9c1		       4a		      LSR		;2
   1905  f9c2		       4a		      LSR		;2
   1906  f9c3		       4a		      LSR		;2
   1907  f9c4		       4a		      LSR		;2
   1908  f9c5		       85 83		      STA	PF2Cache	;3
   1909  f9c7		       c6 d3		      DEC	ScoreD3	;5
   1910  f9c9
   1911  f9c9				   DrawScoreD4		; 20
   1912  f9c9		       a6 d4		      LDX	ScoreD4	; 3
   1913  f9cb		       bd 00 fd 	      LDA	Font,X	;4
   1914  f9ce		       29 f0		      AND	#%11110000	;2
   1915  f9d0		       05 83		      ORA	PF2Cache	;3
   1916  f9d2		       85 83		      STA	PF2Cache	;3
   1917  f9d4		       c6 d4		      DEC	ScoreD4	;5
   1918  f9d6
   1919  f9d6
   1920  f9d6		       88		      DEY		;2
   1921  f9d7		       10 b2		      BPL	ScoreLoop	;4
   1922  f9d9
   1923  f9d9		       85 02		      STA	WSYNC
   1924  f9db		       20 58 f7 	      JSR	LoadAll
   1925  f9de		       60		      RTS		; 6
   1926  f9df
   1927  f9df				   PrintRightDecimalDigits
   1928  f9df		       b9 00 00 	      LDA	0,Y
   1929  f9e2		       4a		      LSR
   1930  f9e3		       4a		      LSR
   1931  f9e4		       4a		      LSR
   1932  f9e5		       4a		      LSR
   1933  f9e6		       aa		      TAX
   1934  f9e7		       bd be fd 	      LDA	FontLookup,X	;4
   1935  f9ea		       85 d2		      STA	ScoreD2	;3
   1936  f9ec
   1937  f9ec		       b9 00 00 	      LDA	0,Y
   1938  f9ef		       29 0f		      AND	#%00001111
   1939  f9f1		       aa		      TAX
   1940  f9f2		       bd be fd 	      LDA	FontLookup,X	;4
   1941  f9f5		       85 d3		      STA	ScoreD3	;3
   1942  f9f7
   1943  f9f7		       c8		      INY
   1944  f9f8		       b9 00 00 	      LDA	0,Y
   1945  f9fb		       4a		      LSR
   1946  f9fc		       4a		      LSR
   1947  f9fd		       4a		      LSR
   1948  f9fe		       4a		      LSR
   1949  f9ff		       aa		      TAX
   1950  fa00		       bd be fd 	      LDA	FontLookup,X	;4
   1951  fa03		       85 d0		      STA	ScoreD0	;3
   1952  fa05
   1953  fa05		       b9 00 00 	      LDA	0,Y
   1954  fa08		       29 0f		      AND	#%00001111
   1955  fa0a		       aa		      TAX
   1956  fa0b		       bd be fd 	      LDA	FontLookup,X	;4
   1957  fa0e		       85 d1		      STA	ScoreD1	;3
   1958  fa10
   1959  fa10		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1960  fa12		       85 d4		      STA	ScoreD4
   1961  fa14		       60		      RTS
   1962  fa15
   1963  fa15				   PrintLastLeftDecimalDigits
   1964  fa15		       b9 00 00 	      LDA	0,Y
   1965  fa18		       4a		      LSR
   1966  fa19		       4a		      LSR
   1967  fa1a		       4a		      LSR
   1968  fa1b		       4a		      LSR
   1969  fa1c		       aa		      TAX
   1970  fa1d		       bd be fd 	      LDA	FontLookup,X	;4
   1971  fa20		       85 d3		      STA	ScoreD3	;3
   1972  fa22		       b9 00 00 	      LDA	0,Y
   1973  fa25		       29 0f		      AND	#%00001111
   1974  fa27		       aa		      TAX
   1975  fa28		       bd be fd 	      LDA	FontLookup,X	;4
   1976  fa2b		       85 d4		      STA	ScoreD4	;3
   1977  fa2d		       60		      RTS
   1978  fa2e
   1979  fa2e				   PrintZerosLeft
   1980  fa2e		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1981  fa30		       85 d2		      STA	ScoreD2
   1982  fa32		       85 d3		      STA	ScoreD3
   1983  fa34		       85 d4		      STA	ScoreD4
   1984  fa36		       60		      RTS
   1985  fa37
   1986  fa37				   DrawGameOverScoreLine
   1987  fa37		       85 02		      STA	WSYNC
   1988  fa39		       20 87 f9 	      JSR	PrintScore
   1989  fa3c		       85 02		      STA	WSYNC
   1990  fa3e		       85 02		      STA	WSYNC
   1991  fa40		       20 49 f7 	      JSR	ClearPF
   1992  fa43		       60		      RTS
   1993  fa44
   1994  fa44				   DrawGameOverScreenLeft
   1995  fa44		       85 02		      STA	WSYNC
   1996  fa46		       20 49 f7 	      JSR	ClearPF
   1997  fa49
   1998  fa49				   DrawBcdScoreLeft
   1999  fa49		       20 98 fb 	      JSR	Sleep8Lines
   2000  fa4c		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2001  fa4e		       85 06		      STA	COLUP0
   2002  fa50		       85 02		      STA	WSYNC
   2003  fa52		       a9 86		      LDA	#<CS + #FONT_OFFSET
   2004  fa54		       85 d0		      STA	ScoreD0
   2005  fa56
   2006  fa56		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2007  fa58		       85 d1		      STA	ScoreD1
   2008  fa5a
   2009  fa5a		       a5 b7		      LDA	ScoreBcd3
   2010  fa5c		       29 0f		      AND	#%00001111
   2011  fa5e		       aa		      TAX
   2012  fa5f		       bd be fd 	      LDA	FontLookup,X	;4
   2013  fa62		       85 d2		      STA	ScoreD2	;3
   2014  fa64
   2015  fa64		       a0 b6		      LDY	#ScoreBcd2
   2016  fa66		       20 15 fa 	      JSR	PrintLastLeftDecimalDigits
   2017  fa69
   2018  fa69		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2019  fa6c
   2020  fa6c				   DrawTimerLeft
   2021  fa6c		       20 98 fb 	      JSR	Sleep8Lines
   2022  fa6f		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2023  fa71		       85 06		      STA	COLUP0
   2024  fa73		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   2025  fa75		       85 d0		      STA	ScoreD0
   2026  fa77		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2027  fa79		       85 d1		      STA	ScoreD1
   2028  fa7b		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   2029  fa7d		       85 d2		      STA	ScoreD2
   2030  fa7f		       a0 bf		      LDY	#TimeBcd2
   2031  fa81		       85 02		      STA	WSYNC
   2032  fa83		       20 15 fa 	      JSR	PrintLastLeftDecimalDigits
   2033  fa86		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2034  fa89
   2035  fa89				   DrawGlideTimerLeft
   2036  fa89		       20 98 fb 	      JSR	Sleep8Lines
   2037  fa8c		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2038  fa8e		       85 06		      STA	COLUP0
   2039  fa90		       85 02		      STA	WSYNC
   2040  fa92		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2041  fa94		       85 d0		      STA	ScoreD0
   2042  fa96		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2043  fa98		       85 d1		      STA	ScoreD1
   2044  fa9a		       20 2e fa 	      JSR	PrintZerosLeft
   2045  fa9d		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2046  faa0
   2047  faa0				   DrawHitCountLeft
   2048  faa0		       20 98 fb 	      JSR	Sleep8Lines
   2049  faa3		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2050  faa5		       85 06		      STA	COLUP0
   2051  faa7		       85 02		      STA	WSYNC
   2052  faa9		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2053  faab		       85 d0		      STA	ScoreD0
   2054  faad		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2055  faaf		       85 d1		      STA	ScoreD1
   2056  fab1		       20 2e fa 	      JSR	PrintZerosLeft
   2057  fab4		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2058  fab7
   2059  fab7				   DrawCheckpointCountLeft
   2060  fab7		       20 98 fb 	      JSR	Sleep8Lines
   2061  faba		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2062  fabc		       85 06		      STA	COLUP0
   2063  fabe		       85 02		      STA	WSYNC
   2064  fac0		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2065  fac2		       85 d0		      STA	ScoreD0
   2066  fac4		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2067  fac6		       85 d1		      STA	ScoreD1
   2068  fac8		       20 2e fa 	      JSR	PrintZerosLeft
   2069  facb		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2070  face
   2071  face				   DrawGameVersionLeft
   2072  face		       20 98 fb 	      JSR	Sleep8Lines
   2073  fad1		       a9 49		      LDA	#VERSION_COLOR
   2074  fad3		       85 06		      STA	COLUP0
   2075  fad5
   2076  fad5		       a5 c5		      LDA	GameMode
   2077  fad7		       aa		      TAX
   2078  fad8		       bd be fd 	      LDA	FontLookup,X	;4
   2079  fadb		       85 d0		      STA	ScoreD0	;3
   2080  fadd
   2081  fadd		       a5 a9		      LDA	CurrentCarId
   2082  fadf		       aa		      TAX
   2083  fae0		       bd be fd 	      LDA	FontLookup,X	;4
   2084  fae3		       85 d1		      STA	ScoreD1	;3
   2085  fae5
   2086  fae5		       a5 a6		      LDA	StartSWCHB
   2087  fae7		       29 40		      AND	#%01000000	; P0 difficulty
   2088  fae9		       49 40		      EOR	#%01000000	; Reverse bytes
   2089  faeb		       2a		      ROL
   2090  faec		       2a		      ROL
   2091  faed		       2a		      ROL
   2092  faee		       18		      CLC
   2093  faef		       69 0a		      ADC	#10
   2094  faf1		       aa		      TAX
   2095  faf2		       bd be fd 	      LDA	FontLookup,X	;4
   2096  faf5		       85 d2		      STA	ScoreD2	;3
   2097  faf7
   2098  faf7		       a5 a6		      LDA	StartSWCHB
   2099  faf9		       29 80		      AND	#%10000000	; P0 difficulty
   2100  fafb		       49 80		      EOR	#%10000000	; Reverse bytes
   2101  fafd		       2a		      ROL
   2102  fafe		       2a		      ROL
   2103  faff		       18		      CLC
   2104  fb00		       69 0a		      ADC	#10
   2105  fb02		       aa		      TAX
   2106  fb03		       bd be fd 	      LDA	FontLookup,X	;4
   2107  fb06		       85 d3		      STA	ScoreD3	;3
   2108  fb08
   2109  fb08		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2110  fb0a		       85 d4		      STA	ScoreD4
   2111  fb0c
   2112  fb0c		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2113  fb0f
   2114  fb0f		       4c 75 fb 	      JMP	FinalizeDrawGameOver
   2115  fb12
   2116  fb12				   DrawGameOverScreenRight
   2117  fb12		       85 02		      STA	WSYNC
   2118  fb14		       20 49 f7 	      JSR	ClearPF
   2119  fb17
   2120  fb17				   DrawBcdScoreRight
   2121  fb17		       20 98 fb 	      JSR	Sleep8Lines
   2122  fb1a		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2123  fb1c		       85 07		      STA	COLUP1
   2124  fb1e		       85 02		      STA	WSYNC
   2125  fb20		       a0 b4		      LDY	#ScoreBcd0
   2126  fb22		       20 df f9 	      JSR	PrintRightDecimalDigits
   2127  fb25
   2128  fb25		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2129  fb28
   2130  fb28				   DrawTimerRight
   2131  fb28		       20 98 fb 	      JSR	Sleep8Lines
   2132  fb2b		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2133  fb2d		       85 07		      STA	COLUP1
   2134  fb2f		       a0 bd		      LDY	#TimeBcd0
   2135  fb31		       20 df f9 	      JSR	PrintRightDecimalDigits
   2136  fb34
   2137  fb34		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2138  fb37				   DrawGlideTimeRight
   2139  fb37		       20 98 fb 	      JSR	Sleep8Lines
   2140  fb3a		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2141  fb3c		       85 07		      STA	COLUP1
   2142  fb3e		       a0 cd		      LDY	#GlideTimeBcd0
   2143  fb40		       20 df f9 	      JSR	PrintRightDecimalDigits
   2144  fb43		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2145  fb46
   2146  fb46				   DrawHitCountRight
   2147  fb46		       20 98 fb 	      JSR	Sleep8Lines
   2148  fb49		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2149  fb4b		       85 07		      STA	COLUP1
   2150  fb4d		       a0 cb		      LDY	#HitCountBcd0
   2151  fb4f		       20 df f9 	      JSR	PrintRightDecimalDigits
   2152  fb52		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2153  fb55
   2154  fb55				   DrawCheckpointCountRight
   2155  fb55		       20 98 fb 	      JSR	Sleep8Lines
   2156  fb58		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2157  fb5a		       85 07		      STA	COLUP1
   2158  fb5c		       a0 a4		      LDY	#CheckpointBcd0
   2159  fb5e		       20 df f9 	      JSR	PrintRightDecimalDigits
   2160  fb61		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2161  fb64
   2162  fb64				   DrawVersionRight
   2163  fb64		       20 98 fb 	      JSR	Sleep8Lines
   2164  fb67		       a9 49		      LDA	#VERSION_COLOR
   2165  fb69		       85 07		      STA	COLUP1
   2166  fb6b		       85 02		      STA	WSYNC
   2167  fb6d		       a2 78		      LDX	#<VersionText
   2168  fb6f		       20 df f7 	      JSR	PrintStaticText
   2169  fb72		       20 37 fa 	      JSR	DrawGameOverScoreLine
   2170  fb75
   2171  fb75				   FinalizeDrawGameOver
   2172  fb75		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2173  fb77		       85 d5		      STA	ScoreFontColor
   2174  fb79		       20 8f fb 	      JSR	Sleep4Lines
   2175  fb7c		       20 9f fb 	      JSR	Sleep32Lines
   2176  fb7f		       20 9f fb 	      JSR	Sleep32Lines
   2177  fb82		       4c 4a f6 	      JMP	PrepareOverscan
   2178  fb85
   2179  fb85				   WaitForVblankEnd
   2180  fb85		       ad 84 02 	      LDA	INTIM
   2181  fb88		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
   2182  fb8a		       85 02		      STA	WSYNC	; Seems wastefull, can I live killing vblank midline? 
   2183  fb8c		       85 01		      STA	VBLANK
   2184  fb8e		       60		      RTS
   2185  fb8f
   2186  fb8f				   Sleep4Lines
   2187  fb8f		       85 02		      STA	WSYNC
   2188  fb91		       85 02		      STA	WSYNC
   2189  fb93		       85 02		      STA	WSYNC
   2190  fb95		       85 02		      STA	WSYNC
   2191  fb97		       60		      RTS
   2192  fb98
   2193  fb98				   Sleep8Lines
   2194  fb98		       20 8f fb 	      JSR	Sleep4Lines
   2195  fb9b		       20 8f fb 	      JSR	Sleep4Lines
   2196  fb9e		       60		      RTS
   2197  fb9f
   2198  fb9f				   Sleep32Lines
   2199  fb9f		       20 98 fb 	      JSR	Sleep8Lines
   2200  fba2		       20 98 fb 	      JSR	Sleep8Lines
   2201  fba5		       20 98 fb 	      JSR	Sleep8Lines
   2202  fba8		       20 98 fb 	      JSR	Sleep8Lines
   2203  fbab		       60		      RTS
   2204  fbac
   2205  fbac							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   2206  fc00					      org	$FC00
   2207  fc00				   QrCode1
   2208  fc00		       1f		      .byte.b	#%00011111
   2209  fc01		       10		      .byte.b	#%00010000
   2210  fc02		       17		      .byte.b	#%00010111
   2211  fc03		       17		      .byte.b	#%00010111
   2212  fc04		       17		      .byte.b	#%00010111
   2213  fc05		       10		      .byte.b	#%00010000
   2214  fc06		       1f		      .byte.b	#%00011111
   2215  fc07		       00		      .byte.b	#%00000000
   2216  fc08		       17		      .byte.b	#%00010111
   2217  fc09		       10		      .byte.b	#%00010000
   2218  fc0a		       1d		      .byte.b	#%00011101
   2219  fc0b		       16		      .byte.b	#%00010110
   2220  fc0c		       03		      .byte.b	#%00000011
   2221  fc0d		       19		      .byte.b	#%00011001
   2222  fc0e		       13		      .byte.b	#%00010011
   2223  fc0f		       1c		      .byte.b	#%00011100
   2224  fc10		       0b		      .byte.b	#%00001011
   2225  fc11		       00		      .byte.b	#%00000000
   2226  fc12		       1f		      .byte.b	#%00011111
   2227  fc13		       10		      .byte.b	#%00010000
   2228  fc14		       17		      .byte.b	#%00010111
   2229  fc15		       17		      .byte.b	#%00010111
   2230  fc16		       17		      .byte.b	#%00010111
   2231  fc17		       10		      .byte.b	#%00010000
   2232  fc18		       1f		      .byte.b	#%00011111
   2233  fc19
   2234  fc19				   QrCode2
   2235  fc19		       c3		      .byte.b	#%11000011
   2236  fc1a		       9a		      .byte.b	#%10011010
   2237  fc1b		       82		      .byte.b	#%10000010
   2238  fc1c		       da		      .byte.b	#%11011010
   2239  fc1d		       aa		      .byte.b	#%10101010
   2240  fc1e		       ca		      .byte.b	#%11001010
   2241  fc1f		       f3		      .byte.b	#%11110011
   2242  fc20		       78		      .byte.b	#%01111000
   2243  fc21		       df		      .byte.b	#%11011111
   2244  fc22		       fc		      .byte.b	#%11111100
   2245  fc23		       c7		      .byte.b	#%11000111
   2246  fc24		       98		      .byte.b	#%10011000
   2247  fc25		       23		      .byte.b	#%00100011
   2248  fc26		       b9		      .byte.b	#%10111001
   2249  fc27		       d2		      .byte.b	#%11010010
   2250  fc28		       30		      .byte.b	#%00110000
   2251  fc29		       eb		      .byte.b	#%11101011
   2252  fc2a		       28		      .byte.b	#%00101000
   2253  fc2b		       ab		      .byte.b	#%10101011
   2254  fc2c		       72		      .byte.b	#%01110010
   2255  fc2d		       fa		      .byte.b	#%11111010
   2256  fc2e		       7a		      .byte.b	#%01111010
   2257  fc2f		       32		      .byte.b	#%00110010
   2258  fc30		       3a		      .byte.b	#%00111010
   2259  fc31		       63		      .byte.b	#%01100011
   2260  fc32
   2261  fc32				   QrCode3
   2262  fc32		       98		      .byte.b	#%10011000
   2263  fc33		       c3		      .byte.b	#%11000011
   2264  fc34		       39		      .byte.b	#%00111001
   2265  fc35		       34		      .byte.b	#%00110100
   2266  fc36		       ff		      .byte.b	#%11111111
   2267  fc37		       71		      .byte.b	#%01110001
   2268  fc38		       d5		      .byte.b	#%11010101
   2269  fc39		       d1		      .byte.b	#%11010001
   2270  fc3a		       5f		      .byte.b	#%01011111
   2271  fc3b		       26		      .byte.b	#%00100110
   2272  fc3c		       2d		      .byte.b	#%00101101
   2273  fc3d		       e9		      .byte.b	#%11101001
   2274  fc3e		       d6		      .byte.b	#%11010110
   2275  fc3f		       26		      .byte.b	#%00100110
   2276  fc40		       ba		      .byte.b	#%10111010
   2277  fc41		       03		      .byte.b	#%00000011
   2278  fc42		       dd		      .byte.b	#%11011101
   2279  fc43		       e0		      .byte.b	#%11100000
   2280  fc44		       57		      .byte.b	#%01010111
   2281  fc45		       14		      .byte.b	#%00010100
   2282  fc46		       35		      .byte.b	#%00110101
   2283  fc47		       e5		      .byte.b	#%11100101
   2284  fc48		       b5		      .byte.b	#%10110101
   2285  fc49		       d4		      .byte.b	#%11010100
   2286  fc4a		       97		      .byte.b	#%10010111
   2287  fc4b
   2288  fc4b				   QrCode4
   2289  fc4b		       09		      .byte.b	#%00001001
   2290  fc4c		       0e		      .byte.b	#%00001110
   2291  fc4d		       0f		      .byte.b	#%00001111
   2292  fc4e		       0c		      .byte.b	#%00001100
   2293  fc4f		       0c		      .byte.b	#%00001100
   2294  fc50		       08		      .byte.b	#%00001000
   2295  fc51		       08		      .byte.b	#%00001000
   2296  fc52		       06		      .byte.b	#%00000110
   2297  fc53		       06		      .byte.b	#%00000110
   2298  fc54		       0b		      .byte.b	#%00001011
   2299  fc55		       0f		      .byte.b	#%00001111
   2300  fc56		       04		      .byte.b	#%00000100
   2301  fc57		       08		      .byte.b	#%00001000
   2302  fc58		       0f		      .byte.b	#%00001111
   2303  fc59		       09		      .byte.b	#%00001001
   2304  fc5a		       07		      .byte.b	#%00000111
   2305  fc5b		       05		      .byte.b	#%00000101
   2306  fc5c		       00		      .byte.b	#%00000000
   2307  fc5d		       0f		      .byte.b	#%00001111
   2308  fc5e		       08		      .byte.b	#%00001000
   2309  fc5f		       0b		      .byte.b	#%00001011
   2310  fc60		       0b		      .byte.b	#%00001011
   2311  fc61		       0b		      .byte.b	#%00001011
   2312  fc62		       08		      .byte.b	#%00001000
   2313  fc63		       0f		      .byte.b	#%00001111
   2314  fc64
   2315  fc64							; Moved here because of rom space.
   2316  fc64							; The only SBR in constants space
   2317  fc64				   DrawQrCode
   2318  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2319  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2320  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2321  fc6a		       85 0a		      STA	CTRLPF
   2322  fc6c		       20 37 f7 	      JSR	ClearAll	; To be 100 sure!
   2323  fc6f		       ad 82 02 	      LDA	SWCHB
   2324  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2325  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2326  fc76		       86 09		      STX	COLUBK
   2327  fc78		       84 08		      STY	COLUPF
   2328  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2329  fc7d				   StoreReversedQrCode
   2330  fc7d		       86 08		      STX	COLUPF
   2331  fc7f		       84 09		      STY	COLUBK
   2332  fc81
   2333  fc81				   ContinueQrCode
   2334  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2335  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2336  fc85		       20 85 fb 	      JSR	WaitForVblankEnd
   2337  fc88		       20 98 fb 	      JSR	Sleep8Lines
   2338  fc8b		       20 8f fb 	      JSR	Sleep4Lines
   2339  fc8e
   2340  fc8e				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2341  fc8e		       85 02		      STA	WSYNC
   2342  fc90		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2343  fc93		       85 0e		      STA	PF1	;3
   2344  fc95		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2345  fc98		       85 0f		      STA	PF2	;3
      0  fc9a					      SLEEP	27	; 
      1  fc9a				   .CYCLES    SET	27
      2  fc9a
      3  fc9a				  -	      IF	.CYCLES < 2
      4  fc9a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9a				  -	      ERR
      6  fc9a					      ENDIF
      7  fc9a
      8  fc9a					      IF	.CYCLES & 1
      9  fc9a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9a				  -	      nop	0
     11  fc9a					      ELSE
     12  fc9a		       24 00		      bit	VSYNC
     13  fc9c					      ENDIF
     14  fc9c				   .CYCLES    SET	.CYCLES - 3
     15  fc9c					      ENDIF
     16  fc9c
     17  fc9c					      REPEAT	.CYCLES / 2
     18  fc9c		       ea		      nop
     17  fc9c					      REPEND
     18  fc9d		       ea		      nop
     17  fc9d					      REPEND
     18  fc9e		       ea		      nop
     17  fc9e					      REPEND
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     19  fca8					      REPEND
   2347  fca8		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2348  fcab		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2349  fcad		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2350  fcb0		       85 0e		      STA	PF1	;3
   2351  fcb2
   2352  fcb2		       ca		      DEX		;2
   2353  fcb3		       d0 d9		      BNE	QrCodeLoop	;2
   2354  fcb5		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2355  fcb7		       88		      DEY		;2
   2356  fcb8		       10 d4		      BPL	QrCodeLoop	;4
   2357  fcba
   2358  fcba				   EndQrCodeLoop
   2359  fcba		       85 02		      STA	WSYNC	;
   2360  fcbc		       a9 00		      LDA	#0
   2361  fcbe		       85 0e		      STA	PF1	;3
   2362  fcc0		       85 0f		      STA	PF2	;3
   2363  fcc2
   2364  fcc2		       20 9f fb 	      JSR	Sleep32Lines
   2365  fcc5		       4c 4a f6 	      JMP	PrepareOverscan
   2366  fcc8
   2367  fd00					      org	$FD00
   2368  fd00				   Font
   2369  fd00				   C0
   2370  fd00		       e7		      .byte.b	#%11100111	;
   2371  fd01		       a5		      .byte.b	#%10100101	; 
   2372  fd02		       a5		      .byte.b	#%10100101	; 
   2373  fd03		       a5		      .byte.b	#%10100101	; 
   2374  fd04		       e7		      .byte.b	#%11100111	;	
   2375  fd05				   C1
   2376  fd05		       e7		      .byte.b	#%11100111	;
   2377  fd06		       42		      .byte.b	#%01000010	; 
   2378  fd07		       42		      .byte.b	#%01000010	; 
   2379  fd08		       42		      .byte.b	#%01000010	; 
   2380  fd09		       66		      .byte.b	#%01100110	;
   2381  fd0a				   C2
   2382  fd0a		       e7		      .byte.b	#%11100111	;
   2383  fd0b		       24		      .byte.b	#%00100100	; 
   2384  fd0c		       e7		      .byte.b	#%11100111	; 
   2385  fd0d		       81		      .byte.b	#%10000001	; 
   2386  fd0e		       e7		      .byte.b	#%11100111	;
   2387  fd0f				   C3
   2388  fd0f		       e7		      .byte.b	#%11100111	;
   2389  fd10		       81		      .byte.b	#%10000001	; 
   2390  fd11		       e7		      .byte.b	#%11100111	; 
   2391  fd12		       81		      .byte.b	#%10000001	; 
   2392  fd13		       e7		      .byte.b	#%11100111	;
   2393  fd14				   C4
   2394  fd14		       81		      .byte.b	#%10000001	;
   2395  fd15		       81		      .byte.b	#%10000001	; 
   2396  fd16		       e7		      .byte.b	#%11100111	; 
   2397  fd17		       a5		      .byte.b	#%10100101	; 
   2398  fd18		       a5		      .byte.b	#%10100101	;
   2399  fd19				   C5
   2400  fd19		       e7		      .byte.b	#%11100111	;
   2401  fd1a		       81		      .byte.b	#%10000001	; 
   2402  fd1b		       e7		      .byte.b	#%11100111	; 
   2403  fd1c		       24		      .byte.b	#%00100100	; 
   2404  fd1d		       e7		      .byte.b	#%11100111	;
   2405  fd1e				   C6
   2406  fd1e		       e7		      .byte.b	#%11100111	;
   2407  fd1f		       a5		      .byte.b	#%10100101	; 
   2408  fd20		       e7		      .byte.b	#%11100111	; 
   2409  fd21		       24		      .byte.b	#%00100100	; 
   2410  fd22		       e7		      .byte.b	#%11100111	;
   2411  fd23				   C7
   2412  fd23		       81		      .byte.b	#%10000001	;
   2413  fd24		       81		      .byte.b	#%10000001	; 
   2414  fd25		       81		      .byte.b	#%10000001	; 
   2415  fd26		       81		      .byte.b	#%10000001	; 
   2416  fd27		       e7		      .byte.b	#%11100111	;
   2417  fd28				   C8
   2418  fd28		       e7		      .byte.b	#%11100111	;
   2419  fd29		       a5		      .byte.b	#%10100101	; 
   2420  fd2a		       e7		      .byte.b	#%11100111	; 
   2421  fd2b		       a5		      .byte.b	#%10100101	; 
   2422  fd2c		       e7		      .byte.b	#%11100111	;
   2423  fd2d				   C9
   2424  fd2d		       e7		      .byte.b	#%11100111	;
   2425  fd2e		       81		      .byte.b	#%10000001	; 
   2426  fd2f		       e7		      .byte.b	#%11100111	; 
   2427  fd30		       a5		      .byte.b	#%10100101	; 
   2428  fd31		       e7		      .byte.b	#%11100111	;
   2429  fd32				   CA
   2430  fd32		       a5		      .byte.b	#%10100101	;
   2431  fd33		       a5		      .byte.b	#%10100101	; 
   2432  fd34		       e7		      .byte.b	#%11100111	; 
   2433  fd35		       a5		      .byte.b	#%10100101	; 
   2434  fd36		       e7		      .byte.b	#%11100111	;
   2435  fd37				   CB
   2436  fd37		       66		      .byte.b	#%01100110	;
   2437  fd38		       a5		      .byte.b	#%10100101	; 
   2438  fd39		       66		      .byte.b	#%01100110	; 
   2439  fd3a		       a5		      .byte.b	#%10100101	;
   2440  fd3b		       66		      .byte.b	#%01100110	;
   2441  fd3c				   CC
   2442  fd3c		       e7		      .byte.b	#%11100111	;
   2443  fd3d		       24		      .byte.b	#%00100100	; 
   2444  fd3e		       24		      .byte.b	#%00100100	; 
   2445  fd3f		       24		      .byte.b	#%00100100	;
   2446  fd40		       e7		      .byte.b	#%11100111	;
   2447  fd41
   2448  fd41				   CD
   2449  fd41		       66		      .byte.b	#%01100110	;
   2450  fd42		       a5		      .byte.b	#%10100101	; 
   2451  fd43		       a5		      .byte.b	#%10100101	; 
   2452  fd44		       a5		      .byte.b	#%10100101	;
   2453  fd45		       66		      .byte.b	#%01100110	;
   2454  fd46
   2455  fd46				   CE
   2456  fd46		       e7		      .byte.b	#%11100111	;
   2457  fd47		       24		      .byte.b	#%00100100	; 
   2458  fd48		       e7		      .byte.b	#%11100111	; 
   2459  fd49		       24		      .byte.b	#%00100100	; 
   2460  fd4a		       e7		      .byte.b	#%11100111	;
   2461  fd4b
   2462  fd4b				   CF
   2463  fd4b		       24		      .byte.b	#%00100100	;
   2464  fd4c		       24		      .byte.b	#%00100100	; 
   2465  fd4d		       e7		      .byte.b	#%11100111	; 
   2466  fd4e		       24		      .byte.b	#%00100100	; 
   2467  fd4f		       e7		      .byte.b	#%11100111	;
   2468  fd50
   2469  fd50				   CG
   2470  fd50		       c3		      .byte.b	#%11000011	;
   2471  fd51		       a5		      .byte.b	#%10100101	; 
   2472  fd52		       a5		      .byte.b	#%10100101	; 
   2473  fd53		       24		      .byte.b	#%00100100	; 
   2474  fd54		       c3		      .byte.b	#%11000011	;	
   2475  fd55
   2476  fd55				   CH
   2477  fd55		       a5		      .byte.b	#%10100101	;
   2478  fd56		       a5		      .byte.b	#%10100101	; 
   2479  fd57		       e7		      .byte.b	#%11100111	; 
   2480  fd58		       a5		      .byte.b	#%10100101	; 
   2481  fd59		       a5		      .byte.b	#%10100101	;
   2482  fd5a
   2483  fd5a				   CK
   2484  fd5a		       a5		      .byte.b	#%10100101	;
   2485  fd5b		       a5		      .byte.b	#%10100101	; 
   2486  fd5c		       66		      .byte.b	#%01100110	; 
   2487  fd5d		       a5		      .byte.b	#%10100101	; 
   2488  fd5e		       a5		      .byte.b	#%10100101	;
   2489  fd5f
   2490  fd5f				   CL
   2491  fd5f		       e7		      .byte.b	#%11100111	;
   2492  fd60		       24		      .byte.b	#%00100100	; 
   2493  fd61		       24		      .byte.b	#%00100100	; 
   2494  fd62		       24		      .byte.b	#%00100100	; 
   2495  fd63		       24		      .byte.b	#%00100100	;
   2496  fd64
   2497  fd64				   CI
   2498  fd64		       42		      .byte.b	#%01000010	;
   2499  fd65		       42		      .byte.b	#%01000010	; 
   2500  fd66		       42		      .byte.b	#%01000010	; 
   2501  fd67		       42		      .byte.b	#%01000010	; 
   2502  fd68		       42		      .byte.b	#%01000010	;
   2503  fd69
   2504  fd69				   CM
   2505  fd69		       a5		      .byte.b	#%10100101	;
   2506  fd6a		       a5		      .byte.b	#%10100101	; 
   2507  fd6b		       a5		      .byte.b	#%10100101	; 
   2508  fd6c		       e7		      .byte.b	#%11100111	; 
   2509  fd6d		       a5		      .byte.b	#%10100101	;
   2510  fd6e
   2511  fd6e				   CN
   2512  fd6e		       a5		      .byte.b	#%10100101	;
   2513  fd6f		       a5		      .byte.b	#%10100101	; 
   2514  fd70		       a5		      .byte.b	#%10100101	; 
   2515  fd71		       a5		      .byte.b	#%10100101	; 
   2516  fd72		       66		      .byte.b	#%01100110	;	
   2517  fd73
   2518  fd73
   2519  fd73				   CO
   2520  fd73		       42		      .byte.b	#%01000010	;
   2521  fd74		       a5		      .byte.b	#%10100101	; 
   2522  fd75		       a5		      .byte.b	#%10100101	; 
   2523  fd76		       a5		      .byte.b	#%10100101	; 
   2524  fd77		       42		      .byte.b	#%01000010	;	
   2525  fd78
   2526  fd78				   CP
   2527  fd78		       24		      .byte.b	#%00100100	;
   2528  fd79		       24		      .byte.b	#%00100100	; 
   2529  fd7a		       e7		      .byte.b	#%11100111	; 
   2530  fd7b		       a5		      .byte.b	#%10100101	; 
   2531  fd7c		       e7		      .byte.b	#%11100111	;
   2532  fd7d
   2533  fd7d				   CR
   2534  fd7d		       a5		      .byte.b	#%10100101	;
   2535  fd7e		       a5		      .byte.b	#%10100101	; 
   2536  fd7f		       66		      .byte.b	#%01100110	; 
   2537  fd80		       a5		      .byte.b	#%10100101	; 
   2538  fd81		       66		      .byte.b	#%01100110	;
   2539  fd82
   2540  fd82				   CS
   2541  fd82		       66		      .byte.b	#%01100110	;
   2542  fd83		       81		      .byte.b	#%10000001	; 
   2543  fd84		       42		      .byte.b	#%01000010	; 
   2544  fd85		       24		      .byte.b	#%00100100	; 
   2545  fd86		       c3		      .byte.b	#%11000011	;
   2546  fd87
   2547  fd87				   CT
   2548  fd87		       42		      .byte.b	#%01000010	;
   2549  fd88		       42		      .byte.b	#%01000010	; 
   2550  fd89		       42		      .byte.b	#%01000010	; 
   2551  fd8a		       42		      .byte.b	#%01000010	; 
   2552  fd8b		       e7		      .byte.b	#%11100111	;
   2553  fd8c
   2554  fd8c				   CV
   2555  fd8c		       42		      .byte.b	#%01000010	;
   2556  fd8d		       a5		      .byte.b	#%10100101	; 
   2557  fd8e		       a5		      .byte.b	#%10100101	; 
   2558  fd8f		       a5		      .byte.b	#%10100101	; 
   2559  fd90		       a5		      .byte.b	#%10100101	;	
   2560  fd91
   2561  fd91				   CY
   2562  fd91		       42		      .byte.b	#%01000010	;
   2563  fd92		       42		      .byte.b	#%01000010	; 
   2564  fd93		       42		      .byte.b	#%01000010	; 
   2565  fd94		       a5		      .byte.b	#%10100101	; 
   2566  fd95		       a5		      .byte.b	#%10100101	;
   2567  fd96
   2568  fd96				   CW
   2569  fd96		       a5		      .byte.b	#%10100101	;
   2570  fd97		       e7		      .byte.b	#%11100111	; 
   2571  fd98		       a5		      .byte.b	#%10100101	; 
   2572  fd99		       a5		      .byte.b	#%10100101	; 
   2573  fd9a		       a5		      .byte.b	#%10100101	;
   2574  fd9b
   2575  fd9b				   CZ
   2576  fd9b		       e7		      .byte.b	#%11100111	;
   2577  fd9c		       24		      .byte.b	#%00100100	; 
   2578  fd9d		       42		      .byte.b	#%01000010	; 
   2579  fd9e		       81		      .byte.b	#%10000001	; 
   2580  fd9f		       e7		      .byte.b	#%11100111	;
   2581  fda0
   2582  fda0				   Pipe
   2583  fda0		       42		      .byte.b	#%01000010	;
   2584  fda1		       00		      .byte.b	#%00000000	; 
   2585  fda2		       42		      .byte.b	#%01000010	; 
   2586  fda3		       00		      .byte.b	#%00000000	; 
   2587  fda4		       42		      .byte.b	#%01000010	;
   2588  fda5
   2589  fda5				   Exclamation
   2590  fda5		       42		      .byte.b	#%01000010	;
   2591  fda6		       00		      .byte.b	#%00000000	; 
   2592  fda7		       42		      .byte.b	#%01000010	; 
   2593  fda8		       42		      .byte.b	#%01000010	; 
   2594  fda9		       42		      .byte.b	#%01000010	;
   2595  fdaa
   2596  fdaa				   Dot
   2597  fdaa		       42		      .byte.b	#%01000010	;
   2598  fdab		       42		      .byte.b	#%01000010	; 
   2599  fdac		       00		      .byte.b	#%00000000	; 
   2600  fdad		       00		      .byte.b	#%00000000	; 
   2601  fdae		       00		      .byte.b	#%00000000	;
   2602  fdaf
   2603  fdaf				   Colon
   2604  fdaf		       42		      .byte.b	#%01000010	;
   2605  fdb0		       42		      .byte.b	#%01000010	; 
   2606  fdb1		       00		      .byte.b	#%00000000	; 
   2607  fdb2		       42		      .byte.b	#%01000010	; 
   2608  fdb3		       42		      .byte.b	#%01000010	;
   2609  fdb4
   2610  fdb4				   Triangle
   2611  fdb4		       81		      .byte.b	#%10000001	;
   2612  fdb5		       c3		      .byte.b	#%11000011	; 
   2613  fdb6		       e7		      .byte.b	#%11100111	; 
   2614  fdb7		       c3		      .byte.b	#%11000011	; 
   2615  fdb8		       81		      .byte.b	#%10000001	;
   2616  fdb9
   2617  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2618  fdb9		       00		      .byte.b	#0	;
   2619  fdba		       00		      .byte.b	#0	;
   2620  fdbb		       00		      .byte.b	#0	;
   2621  fdbc		       00		      .byte.b	#0	;
   2622  fdbd		       00		      .byte.b	#0	;
   2623  fdbe
   2624  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2625  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2626  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2627  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2628  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2629  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2630  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2631  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2632  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2633  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2634  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2635  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2636  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2637  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2638  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2639  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2640  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2641  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2642  fdcf
   2643  fdcf				   EngineSoundType
   2644  fdcf		       02		      .byte.b	#2
   2645  fdd0		       02		      .byte.b	#2
   2646  fdd1		       0e		      .byte.b	#14
   2647  fdd2		       06		      .byte.b	#6
   2648  fdd3		       06		      .byte.b	#6
   2649  fdd4		       0e		      .byte.b	#14
   2650  fdd5
   2651  fdd5				   EngineBaseFrequence
   2652  fdd5		       1f		      .byte.b	#31
   2653  fdd6		       15		      .byte.b	#21
   2654  fdd7		       14		      .byte.b	#20
   2655  fdd8		       1f		      .byte.b	#31
   2656  fdd9		       16		      .byte.b	#22
   2657  fdda		       03		      .byte.b	#3
   2658  fddb
   2659  fddb				   TachometerSizeLookup1
   2660  fddb		       1f		      .byte.b	#%00011111
   2661  fddc		       3f		      .byte.b	#%00111111
   2662  fddd		       7f		      .byte.b	#%01111111
   2663  fdde		       ff		      .byte.b	#%11111111
   2664  fddf		       ff		      .byte.b	#%11111111
   2665  fde0		       ff		      .byte.b	#%11111111
   2666  fde1		       ff		      .byte.b	#%11111111
   2667  fde2		       ff		      .byte.b	#%11111111
   2668  fde3
   2669  fde3				   TachometerSizeLookup2
   2670  fde3		       00		      .byte.b	#%00000000
   2671  fde4		       00		      .byte.b	#%00000000
   2672  fde5		       00		      .byte.b	#%00000000
   2673  fde6		       00		      .byte.b	#%00000000
   2674  fde7		       80		      .byte.b	#%10000000
   2675  fde8		       c0		      .byte.b	#%11000000
   2676  fde9		       e0		      .byte.b	#%11100000
   2677  fdea		       f0		      .byte.b	#%11110000
   2678  fdeb
   2679  fdeb				   TachometerGearLookup
   2680  fdeb		       01		      .byte.b	#%00000001
   2681  fdec		       02		      .byte.b	#%00000010
   2682  fded		       04		      .byte.b	#%00000100
   2683  fdee		       08		      .byte.b	#%00001000
   2684  fdef		       10		      .byte.b	#%00010000
   2685  fdf0		       30		      .byte.b	#%00110000
   2686  fdf1
   2687  fe00					      org	$FE00
   2688  fe00				   AesTable
   2689  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2690  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2691  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2692  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2693  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2694  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2695  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2696  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2697  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2698  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2699  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2700  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2701  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2702  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2703  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2704  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2705  ff00
   2706  ff00							; From FF00 to FFFB (122 bytes) to use here
   2707  ff00
   2708  ff00				   StaticText		; All static text must be on the same MSB block. 
   2709  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2710  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2711  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2712  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2713  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2714  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2715  ff05
   2716  ff05				   HellwayLeftText
   2717  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2718  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2719  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2720  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2721  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2722  ff0a
   2723  ff0a				   HellwayRightText
   2724  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2725  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2726  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2727  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2728  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2729  ff0f
   2730  ff0f				   OpbText
   2731  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2732  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2733  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2734  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2735  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2736  ff14
   2737  ff14				   YearText
   2738  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2739  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2740  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2741  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2742  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2743  ff19
   2744  ff19				   GameText
   2745  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2746  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2747  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2748  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2749  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2750  ff1e
   2751  ff1e				   OverText
   2752  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2753  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2754  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2755  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2756  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2757  ff23				   GoText
   2758  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2759  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2760  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2761  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2762  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2763  ff28
   2764  ff28				   ZeldaTextLeft
   2765  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2766  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2767  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2768  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2769  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2770  ff2d
   2771  ff2d				   ZeldaTextRight
   2772  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2773  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2774  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2775  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2776  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2777  ff32
   2778  ff32				   ZeldaDateLeft
   2779  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2780  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2781  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2782  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2783  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2784  ff37
   2785  ff37				   ZeldaDateRight
   2786  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2787  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2788  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2789  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2790  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2791  ff3c
   2792  ff3c				   PolvinhosTextLeft
   2793  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2794  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2795  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2796  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2797  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2798  ff41
   2799  ff41				   PolvinhosTextRight
   2800  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2801  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2802  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2803  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2804  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2805  ff46
   2806  ff46				   PolvinhosDateLeft
   2807  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2808  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2809  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2810  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2811  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2812  ff4b
   2813  ff4b				   PolvinhosDateRight
   2814  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2815  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2816  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2817  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2818  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2819  ff50
   2820  ff50				   IvonneTextLeft
   2821  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2822  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2823  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2824  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2825  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2826  ff55
   2827  ff55				   IvonneTextRight
   2828  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2829  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2830  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2831  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2832  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2833  ff5a
   2834  ff5a				   IvonneDateLeft
   2835  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2836  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2837  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2838  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2839  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2840  ff5f
   2841  ff5f				   IvonneDateRight
   2842  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2843  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2844  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2845  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2846  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2847  ff64
   2848  ff64				   PaperArtTextLeft
   2849  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2850  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2851  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2852  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2853  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2854  ff69
   2855  ff69				   PaperArtTextRight
   2856  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2857  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2858  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2859  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2860  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2861  ff6e
   2862  ff6e				   LeonardoTextLeft
   2863  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2864  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2865  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2866  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2867  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2868  ff73
   2869  ff73				   LeonardoTextRight
   2870  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2871  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2872  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2873  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2874  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2875  ff78
   2876  ff78				   VersionText
   2877  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2878  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2879  ff7a		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2880  ff7b		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2881  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2882  ff7d
   2883  ff7d
   2884  ff7d				   EndStaticText
   2885  ff7d
   2886  ff7d				   CarSprite0		; Upside down, Original Car
   2887  ff7d		       00 00 00 00*	      ds	7
   2888  ff84		       7e		      .byte.b	#%01111110
   2889  ff85		       24		      .byte.b	#%00100100
   2890  ff86		       bd		      .byte.b	#%10111101
   2891  ff87		       3c		      .byte.b	#%00111100
   2892  ff88		       bd		      .byte.b	#%10111101
   2893  ff89		       3c		      .byte.b	#%00111100
   2894  ff8a
   2895  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2896  ff8a		       00 00 00 00*	      ds	7
   2897  ff91		       bd		      .byte.b	#%10111101
   2898  ff92		       7e		      .byte.b	#%01111110
   2899  ff93		       5a		      .byte.b	#%01011010
   2900  ff94		       66		      .byte.b	#%01100110
   2901  ff95		       bd		      .byte.b	#%10111101
   2902  ff96		       3c		      .byte.b	#%00111100
   2903  ff97
   2904  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2905  ff97		       00 00 00 00*	      ds	7
   2906  ff9e		       7e		      .byte.b	#%01111110
   2907  ff9f		       a5		      .byte.b	#%10100101
   2908  ffa0		       42		      .byte.b	#%01000010
   2909  ffa1		       42		      .byte.b	#%01000010
   2910  ffa2		       bd		      .byte.b	#%10111101
   2911  ffa3		       7e		      .byte.b	#%01111110
   2912  ffa4
   2913  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2914  ffa4		       00 00 00 00*	      ds	7
   2915  ffab		       3c		      .byte.b	#%00111100
   2916  ffac		       db		      .byte.b	#%11011011
   2917  ffad		       db		      .byte.b	#%11011011
   2918  ffae		       3c		      .byte.b	#%00111100
   2919  ffaf		       5a		      .byte.b	#%01011010
   2920  ffb0		       3c		      .byte.b	#%00111100
   2921  ffb1
   2922  ffb1				   TrafficSpeeds
   2923  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2924  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2925  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2926  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2927  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2928  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2929  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2930  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2931  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2932  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2933  ffbb				   TrafficSpeedsHighDelta
   2934  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2935  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2936  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2937  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2938  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2939  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2940  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2941  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2942  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2943  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2944  ffc5
   2945  ffc5				   CarIdToSpriteAddressL
   2946  ffc5		       7d		      .byte.b	#<CarSprite0
   2947  ffc6		       8a		      .byte.b	#<CarSprite1
   2948  ffc7		       97		      .byte.b	#<CarSprite2
   2949  ffc8		       a4		      .byte.b	#<CarSprite3
   2950  ffc9
   2951  ffc9				   CarIdToSpriteAddressH
   2952  ffc9		       ff		      .byte.b	#>CarSprite0
   2953  ffca		       ff		      .byte.b	#>CarSprite1
   2954  ffcb		       ff		      .byte.b	#>CarSprite2
   2955  ffcc		       ff		      .byte.b	#>CarSprite3
   2956  ffcd
   2957  ffcd				   CarIdToAccelerateSpeed
   2958  ffcd		       80		      .byte.b	#128
   2959  ffce		       c0		      .byte.b	#192
   2960  ffcf		       60		      .byte.b	#96
   2961  ffd0		       c0		      .byte.b	#192
   2962  ffd1
   2963  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2964  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   2965  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   2966  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   2967  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   2968  ffd5
   2969  ffd5				   CarIdToMaxSpeedL
   2970  ffd5		       80		      .byte.b	#$80
   2971  ffd6		       00		      .byte.b	#$00	; One less gear
   2972  ffd7		       80		      .byte.b	#$80
   2973  ffd8		       80		      .byte.b	#$80
   2974  ffd9
   2975  ffd9				   CarIdToMaxGear
   2976  ffd9		       05		      .byte.b	#5
   2977  ffda		       04		      .byte.b	#4	; One less gear
   2978  ffdb		       05		      .byte.b	#5
   2979  ffdc		       05		      .byte.b	#5
   2980  ffdd
   2981  ffdd
   2982  fffc					      org	$FFFC
   2983  fffc		       00 f0		      .word.w	BeforeStart
   2984  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
