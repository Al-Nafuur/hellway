------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     13  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     14  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     15  f000
     16  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     17  f000							;16 bit precision
     18  f000							;640 max speed!
     19  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     20  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     21  f000		       00 00	   CAR_MIN_SPEED_H =	0
     22  f000		       00 00	   CAR_MIN_SPEED_L =	0
     23  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     24  f000		       00 85	   PLAYER_2_COLOR =	$85	;Blue
     25  f000		       00 01	   ACCELERATE_SPEED =	1
     26  f000		       00 0a	   BREAK_SPEED =	10
     27  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     28  f000		       00 f8	   TRAFFIC_1_MASK =	#%11111000	;Min car size... Maybe make different per track
     29  f000		       00 1c	   TRAFFIC_1_CHANCE =	#28
     30  f000
     31  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     32  f000		       00 34	   TRAFFIC_COLOR =	$34
     33  f000		       00 87	   SCORE_BACKGROUND_COLOR =	$87
     34  f000
     35  f000		       00 0c	   SCORE_FONT_COLOR =	$0C
     36  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     37  f000		       00 34	   SCORE_FONT_COLOR_BAD =	$34
     38  f000		       00 2f	   SCORE_FONT_COLOR_OVER =	$2F
     39  f000
     40  f000		       00 28	   PLAYER_0_X_START =	$28	;
     41  f000		       00 2a	   PLAYER_0_MAX_X =	$2A	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     42  f000
     43  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     44  f000		       00 23	   CHECKPOINT_ADD_TIME =	35	; Seconds +-
     45  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     46  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     47  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	#%00000111	; Every 8 frames
     48  f000
     49  f000		       00 28	   SWITCHES_DEBOUNCE_TIME =	#40	; Frames
     50  f000
     51  f000
     52  f000		       00 80	   GRP0Cache  =	$80
     53  f000		       00 81	   PF0Cache   =	$81
     54  f000		       00 82	   PF1Cache   =	$82
     55  f000		       00 83	   PF2Cache   =	$83
     56  f000
     57  f000		       00 86	   FrameCount0 =	$86	;
     58  f000		       00 87	   FrameCount1 =	$87	;
     59  f000
     60  f000		       00 88	   Player0SpeedL =	$88
     61  f000		       00 89	   Player0SpeedH =	$89
     62  f000
     63  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     64  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     65  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     66  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     67  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     68  f000
     69  f000							;Temporary variables, multiple uses
     70  f000		       00 b0	   Tmp0       =	$B0
     71  f000		       00 b1	   Tmp1       =	$B1
     72  f000		       00 b2	   Tmp2       =	$B2
     73  f000
     74  f000		       00 ba	   CollisionCounter =	$BA
     75  f000		       00 bb	   Player0X   =	$BB
     76  f000		       00 bc	   CountdownTimer =	$BC
     77  f000		       00 bd	   Traffic0Msb =	$BD
     78  f000		       00 be	   SwitchDebounceCounter =	$BE
     79  f000
     80  f000
     81  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, D6 = player 0 outside area
     82  f000
     83  f000		       00 d0	   ScoreD0    =	$D0
     84  f000		       00 d1	   ScoreD1    =	$D1
     85  f000		       00 d2	   ScoreD2    =	$D2
     86  f000		       00 d3	   ScoreD3    =	$D3
     87  f000		       00 d4	   ScoreD4    =	$D4
     88  f000		       00 d5	   ScoreFontColor =	$D5
     89  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
     90  f000		       00 d7	   NextCheckpoint =	$D7
     91  f000
     92  f000
     93  f000							;generic start up stuff, put zero in all...
     94  f000				   Start
     95  f000		       78		      SEI
     96  f001		       d8		      CLD
     97  f002		       a2 ff		      LDX	#$FF
     98  f004		       9a		      TXS
     99  f005		       a9 00		      LDA	#0
    100  f007				   ClearMem
    101  f007		       e0 be		      CPX	#SwitchDebounceCounter
    102  f009		       f0 02		      BEQ	SkipClean
    103  f00b		       95 00		      STA	0,X
    104  f00d				   SkipClean
    105  f00d		       ca		      DEX
    106  f00e
    107  f00e		       d0 f7		      BNE	ClearMem
    108  f010
    109  f010							;Setting some variables...
    110  f010
    111  f010		       a9 1c		      LDA	#PLAYER_1_COLOR
    112  f012		       85 06		      STA	COLUP0
    113  f014
    114  f014		       a9 85		      LDA	#PLAYER_2_COLOR
    115  f016		       85 07		      STA	COLUP1
    116  f018
    117  f018							;Loop ?
    118  f018		       a9 01		      LDA	#1
    119  f01a		       85 94		      STA	TrafficOffset1 + 0	; So we can detect loop
    120  f01c		       a9 20		      LDA	#$20
    121  f01e		       85 96		      STA	TrafficOffset1 + 2
    122  f020		       a9 40		      LDA	#$40
    123  f022		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
    124  f024		       a9 60		      LDA	#$60
    125  f026		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
    126  f028		       a9 80		      LDA	#$80
    127  f02a		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
    128  f02c		       a9 a0		      LDA	#$A0
    129  f02e
    130  f02e		       ad 41 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    131  f031		       85 88		      STA	Player0SpeedL
    132  f033
    133  f033		       a5 28		      LDA	PLAYER_0_X_START
    134  f035		       85 bb		      STA	Player0X
    135  f037
    136  f037		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME
    137  f039		       85 bc		      STA	CountdownTimer
    138  f03b
    139  f03b		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    140  f03d		       85 d7		      STA	NextCheckpoint
    141  f03f
    142  f03f							;VSYNC time
    143  f03f				   MainLoop
    144  f03f		       a9 02		      LDA	#2
    145  f041		       85 00		      STA	VSYNC
    146  f043		       85 02		      STA	WSYNC
    147  f045		       85 02		      STA	WSYNC
    148  f047							;Apply Movement, must be done after a WSYNC
    149  f047		       85 2a		      STA	HMOVE	;2
    150  f049							;This must be done after a WSync, otherwise it is impossible to predict the X position
    151  f049		       a5 c0		      LDA	GameStatus	;3
    152  f04b		       29 80		      AND	#%10000000	;2 game running, we get 0 and not reset the position.
    153  f04d		       d0 11		      BNE	DoNotSetPlayerX	;3
    154  f04f		       a6 28		      LDX	PLAYER_0_X_START	; 2
    155  f051		       86 bb		      STX	Player0X	; 3
    156  f053							;Do something better than sleep
      0  f053					      SLEEP	21	;
      1  f053				   .CYCLES    SET	21
      2  f053
      3  f053				  -	      IF	.CYCLES < 2
      4  f053				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f053				  -	      ERR
      6  f053					      ENDIF
      7  f053
      8  f053					      IF	.CYCLES & 1
      9  f053				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f053				  -	      nop	0
     11  f053					      ELSE
     12  f053		       24 00		      bit	VSYNC
     13  f055					      ENDIF
     14  f055				   .CYCLES    SET	.CYCLES - 3
     15  f055					      ENDIF
     16  f055
     17  f055					      REPEAT	.CYCLES / 2
     18  f055		       ea		      nop
     17  f055					      REPEND
     18  f056		       ea		      nop
     17  f056					      REPEND
     18  f057		       ea		      nop
     17  f057					      REPEND
     18  f058		       ea		      nop
     17  f058					      REPEND
     18  f059		       ea		      nop
     17  f059					      REPEND
     18  f05a		       ea		      nop
     17  f05a					      REPEND
     18  f05b		       ea		      nop
     17  f05b					      REPEND
     18  f05c		       ea		      nop
     17  f05c					      REPEND
     18  f05d		       ea		      nop
     19  f05e					      REPEND
    158  f05e		       85 10		      STA	RESP0	;3
    159  f060
    160  f060				   DoNotSetPlayerX
    161  f060
    162  f060		       85 02		      STA	WSYNC	;3
    163  f062		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    164  f064		       8d 96 02 	      STA	TIM64T	;3	
    165  f067		       a9 00		      LDA	#0	;2
    166  f069		       85 00		      STA	VSYNC	;3	
    167  f06b
    168  f06b							;Read Fire Button before, will make it start the game for now.
    169  f06b				   StartGame
    170  f06b		       a5 0c		      LDA	INPT4	;3
    171  f06d		       30 10		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    172  f06f		       a5 c0		      LDA	GameStatus	;3
    173  f071		       29 80		      AND	#%10000000
    174  f073		       d0 0a		      BNE	SkipGameStart
    175  f075		       09 80		      ORA	#%10000000	;2
    176  f077		       85 c0		      STA	GameStatus	;3
    177  f079		       a9 00		      LDA	#0	;
    178  f07b		       85 86		      STA	FrameCount0
    179  f07d		       85 87		      STA	FrameCount1
    180  f07f				   SkipGameStart
    181  f07f
    182  f07f				   ReadSwitches
    183  f07f		       a6 be		      LDX	SwitchDebounceCounter
    184  f081		       d0 11		      BNE	DecrementSwitchDebounceCounter
    185  f083		       a9 01		      LDA	#%00000001
    186  f085		       2c 82 02 	      BIT	SWCHB
    187  f088		       d0 07		      BNE	SkipReset
    188  f08a		       a9 28		      LDA	#SWITCHES_DEBOUNCE_TIME
    189  f08c		       85 be		      STA	SwitchDebounceCounter
    190  f08e		       4c 00 f0 	      JMP	Start
    191  f091				   SkipReset
    192  f091		       4c 96 f0 	      JMP	EndReadSwitches
    193  f094				   DecrementSwitchDebounceCounter
    194  f094		       c6 be		      DEC	SwitchDebounceCounter
    195  f096				   EndReadSwitches
    196  f096
    197  f096				   CountFrame
    198  f096		       e6 86		      INC	FrameCount0	; 5 Used to alternate lines
    199  f098		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    200  f09a		       e6 87		      INC	FrameCount1	; 5 Still not used
    201  f09c				   SkipIncFC1
    202  f09c
    203  f09c							;Does not update the game if not running
    204  f09c		       a5 c0		      LDA	GameStatus	;3
    205  f09e		       29 80		      AND	#%10000000	;2 game is running...
    206  f0a0		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    207  f0a2		       4c c8 f1 	      JMP	SkipUpdateLogic
    208  f0a5				   ContinueWithGameLogic
    209  f0a5
    210  f0a5				   EverySecond		; 64 frames to be more precise
    211  f0a5		       a9 3f		      LDA	#%00111111
    212  f0a7		       25 86		      AND	FrameCount0
    213  f0a9		       d0 06		      BNE	SkipEverySecondAction
    214  f0ab		       c5 bc		      CMP	CountdownTimer
    215  f0ad		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    216  f0af		       c6 bc		      DEC	CountdownTimer
    217  f0b1				   SkipEverySecondAction
    218  f0b1
    219  f0b1
    220  f0b1
    221  f0b1				   BreakOnTimeOver		; Uses LDX as the breaking speed
    222  f0b1		       a2 00		      LDX	#0
    223  f0b3		       a5 bc		      LDA	CountdownTimer
    224  f0b5		       d0 08		      BNE	Break
    225  f0b7		       a5 86		      LDA	FrameCount0
    226  f0b9		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    227  f0bb		       d0 02		      BNE	Break
    228  f0bd		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    229  f0bf
    230  f0bf				   Break
    231  f0bf		       a9 20		      LDA	#%00100000	;Down in controller
    232  f0c1		       2c 80 02 	      BIT	SWCHA
    233  f0c4		       d0 02		      BNE	BreakNonZero
    234  f0c6		       a2 0a		      LDX	#BREAK_SPEED
    235  f0c8
    236  f0c8				   BreakNonZero
    237  f0c8		       e0 00		      CPX	#0
    238  f0ca		       f0 2b		      BEQ	SkipBreak
    239  f0cc		       86 b0		      STX	Tmp0
    240  f0ce
    241  f0ce				   DecreaseSpeed
    242  f0ce		       38		      SEC
    243  f0cf		       a5 88		      LDA	Player0SpeedL
    244  f0d1		       e5 b0		      SBC	Tmp0
    245  f0d3		       85 88		      STA	Player0SpeedL
    246  f0d5		       a5 89		      LDA	Player0SpeedH
    247  f0d7		       e9 00		      SBC	#0
    248  f0d9		       85 89		      STA	Player0SpeedH
    249  f0db
    250  f0db				   CheckMinSpeed
    251  f0db		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    252  f0dd		       c9 00		      CMP	#CAR_MIN_SPEED_H
    253  f0df		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    254  f0e1		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    255  f0e3
    256  f0e3				   CompareLBreakSpeed
    257  f0e3		       a5 88		      LDA	Player0SpeedL
    258  f0e5		       c9 00		      CMP	#CAR_MIN_SPEED_L
    259  f0e7		       90 03		      BCC	ResetMinSpeed	; Less than memory
    260  f0e9		       4c f4 f0 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    261  f0ec
    262  f0ec				   ResetMinSpeed
    263  f0ec		       a9 00		      LDA	#CAR_MIN_SPEED_H
    264  f0ee		       85 89		      STA	Player0SpeedH
    265  f0f0		       a9 00		      LDA	#CAR_MIN_SPEED_L
    266  f0f2		       85 88		      STA	Player0SpeedL
    267  f0f4
    268  f0f4				   SkipAccelerateIfBreaking
    269  f0f4		       4c 27 f1 	      JMP	SkipAccelerate
    270  f0f7				   SkipBreak
    271  f0f7
    272  f0f7				   Acelerates
    273  f0f7		       a5 bc		      LDA	CountdownTimer
    274  f0f9		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    275  f0fb		       a5 0c		      LDA	INPT4	;3
    276  f0fd		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    277  f0ff		       a9 10		      LDA	#%00010000	;UP in controller
    278  f101		       2c 80 02 	      BIT	SWCHA
    279  f104		       d0 21		      BNE	SkipAccelerate
    280  f106
    281  f106				   IncreaseCarSpeed
    282  f106							;Adds speed
    283  f106		       18		      CLC
    284  f107		       a5 88		      LDA	Player0SpeedL
    285  f109		       69 01		      ADC	#ACCELERATE_SPEED
    286  f10b		       85 88		      STA	Player0SpeedL
    287  f10d		       a5 89		      LDA	Player0SpeedH
    288  f10f		       69 00		      ADC	#0
    289  f111		       85 89		      STA	Player0SpeedH
    290  f113
    291  f113							;Checks if already max
    292  f113		       c9 02		      CMP	#CAR_MAX_SPEED_H
    293  f115		       90 10		      BCC	SkipAccelerate	; less than my max speed
    294  f117		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    295  f119							;High bit is max, compare the low
    296  f119		       a5 88		      LDA	Player0SpeedL
    297  f11b		       c9 80		      CMP	#CAR_MAX_SPEED_L
    298  f11d		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    299  f11f							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    300  f11f
    301  f11f				   ResetToMaxSpeed		; Speed is more, or is already max
    302  f11f		       a9 02		      LDA	#CAR_MAX_SPEED_H
    303  f121		       85 89		      STA	Player0SpeedH
    304  f123		       a9 80		      LDA	#CAR_MAX_SPEED_L
    305  f125		       85 88		      STA	Player0SpeedL
    306  f127				   SkipAccelerate
    307  f127
    308  f127							;Updates all offsets 24 bits
    309  f127		       a2 00		      LDX	#0	; Memory Offset 24 bit
    310  f129		       a0 00		      LDY	#0	; Line Speeds 16 bits
    311  f12b				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    312  f12b		       38		      SEC
    313  f12c		       a5 88		      LDA	Player0SpeedL
    314  f12e		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    315  f131		       85 b0		      STA	Tmp0
    316  f133		       c8		      INY
    317  f134		       a5 89		      LDA	Player0SpeedH
    318  f136		       f9 39 ff 	      SBC	TrafficSpeeds,Y
    319  f139		       85 b1		      STA	Tmp1
    320  f13b		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    321  f13d		       e9 00		      SBC	#0
    322  f13f		       85 b2		      STA	Tmp2
    323  f141
    324  f141
    325  f141				   AddsTheResult
    326  f141		       18		      CLC
    327  f142		       a5 b0		      LDA	Tmp0
    328  f144		       75 90		      ADC	TrafficOffset0,X
    329  f146		       95 90		      STA	TrafficOffset0,X
    330  f148		       e8		      INX
    331  f149		       a5 b1		      LDA	Tmp1
    332  f14b		       75 90		      ADC	TrafficOffset0,X
    333  f14d		       95 90		      STA	TrafficOffset0,X
    334  f14f		       e8		      INX
    335  f150		       a5 b2		      LDA	Tmp2	; Carry
    336  f152		       75 90		      ADC	TrafficOffset0,X
    337  f154		       95 90		      STA	TrafficOffset0,X
    338  f156		       90 06		      BCC	CalculateOffsetCache
    339  f158		       e0 02		      CPX	#2	;MSB offset 0
    340  f15a		       d0 02		      BNE	CalculateOffsetCache
    341  f15c		       e6 bd		      INC	Traffic0Msb
    342  f15e
    343  f15e				   CalculateOffsetCache
    344  f15e		       e8		      INX
    345  f15f		       38		      SEC
    346  f160		       69 00		      ADC	#0	;Increment by one
    347  f162		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    348  f164
    349  f164				   PrepareNextUpdateLoop
    350  f164		       c8		      INY
    351  f165		       e8		      INX
    352  f166		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    353  f168		       d0 c1		      BNE	UpdateOffsets
    354  f16a
    355  f16a
    356  f16a
    357  f16a							;Until store the movemnt, LDX contains the value to be stored.
    358  f16a				   TestCollision		;
    359  f16a							; see if car0 and playfield collide.
    360  f16a		       a9 80		      LDA	#%10000000
    361  f16c		       24 02		      BIT	CXP0FB
    362  f16e		       f0 19		      BEQ	NoCollision	;skip if not hitting...
    363  f170		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    364  f172		       d0 15		      BNE	NoCollision
    365  f174		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    366  f176		       85 ba		      STA	CollisionCounter	;and store as colision.
    367  f178		       a9 10		      LDA	#COLLISION_SPEED_L	;
    368  f17a		       c5 88		      CMP	Player0SpeedL
    369  f17c		       b0 02		      BCS	SkipSetColisionSpeed
    370  f17e		       85 88		      STA	Player0SpeedL
    371  f180				   SkipSetColisionSpeed
    372  f180		       a9 00		      LDA	#0
    373  f182		       85 89		      STA	Player0SpeedH
    374  f184		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    375  f186		       4c c4 f1 	      JMP	StoreHMove	; We keep position consistent
    376  f189				   NoCollision
    377  f189
    378  f189				   DecrementCollision
    379  f189		       a4 ba		      LDY	CollisionCounter
    380  f18b		       f0 07		      BEQ	FinishDecrementCollision
    381  f18d		       a9 05		      LDA	#%00000101	; Make player bigger to show colision
    382  f18f		       85 04		      STA	NUSIZ0
    383  f191		       88		      DEY
    384  f192		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    385  f194				   FinishDecrementCollision
    386  f194
    387  f194				   ResetPlayerSize
    388  f194		       d0 02		      BNE	FinishResetPlayerSize
    389  f196		       84 04		      STY	NUSIZ0	;
    390  f198				   FinishResetPlayerSize
    391  f198
    392  f198				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    393  f198		       c0 01		      CPY	#1	; Last frame before reset
    394  f19a		       d0 05		      BNE	SkipResetPlayerPosition
    395  f19c		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    396  f19e		       4c c4 f1 	      JMP	StoreHMove
    397  f1a1				   SkipResetPlayerPosition
    398  f1a1
    399  f1a1							; for left and right, we're gonna 
    400  f1a1							; set the horizontal speed, and then do
    401  f1a1							; a single HMOVE.  We'll use X to hold the
    402  f1a1							; horizontal speed, then store it in the 
    403  f1a1							; appropriate register
    404  f1a1				   PrepareReadXAxis
    405  f1a1		       a2 00		      LDX	#0
    406  f1a3		       a4 bb		      LDY	Player0X
    407  f1a5				   BeginReadLeft
    408  f1a5		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    409  f1a7		       a9 40		      LDA	#%01000000	;Left
    410  f1a9		       2c 80 02 	      BIT	SWCHA
    411  f1ac		       d0 07		      BNE	SkipMoveLeft
    412  f1ae		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    413  f1b0		       c6 bb		      DEC	Player0X
    414  f1b2		       4c c4 f1 	      JMP	StoreHMove	; Cannot move left and right...
    415  f1b5				   SkipMoveLeft
    416  f1b5				   BeginReadRight
    417  f1b5		       c0 2a		      CPY	#PLAYER_0_MAX_X
    418  f1b7		       f0 0b		      BEQ	SkipMoveRight	; At max already
    419  f1b9		       a9 80		      LDA	#%10000000	;Right
    420  f1bb		       2c 80 02 	      BIT	SWCHA
    421  f1be		       d0 04		      BNE	SkipMoveRight
    422  f1c0		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    423  f1c2		       e6 bb		      INC	Player0X
    424  f1c4				   SkipMoveRight
    425  f1c4				   StoreHMove
    426  f1c4		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    427  f1c6		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    428  f1c8
    429  f1c8
    430  f1c8				   SkipUpdateLogic
    431  f1c8		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    432  f1ca		       85 09		      STA	COLUBK
    433  f1cc		       a5 d5		      LDA	ScoreFontColor
    434  f1ce		       85 08		      STA	COLUPF
    435  f1d0		       20 07 f4 	      JSR	ClearPF
    436  f1d3		       a9 02		      LDA	#%00000010	; Score mode
    437  f1d5		       85 0a		      STA	CTRLPF
    438  f1d7		       a0 04		      LDY	#SCORE_SIZE - 1
    439  f1d9		       a2 00		      LDX	#0
    440  f1db
    441  f1db		       a5 86		      LDA	FrameCount0	;3
    442  f1dd		       29 01		      AND	#%00000001	;2
    443  f1df		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    444  f1e1				   LeftScoreOn
    445  f1e1		       a5 d5		      LDA	ScoreFontColor
    446  f1e3		       85 07		      STA	COLUP1
    447  f1e5		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    448  f1e7		       85 06		      STA	COLUP0
    449  f1e9		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    450  f1eb		       85 b1		      STA	Tmp1
    451  f1ed		       4c fc f1 	      JMP	WaitForVblankEnd
    452  f1f0				   RightScoreOn
    453  f1f0		       a5 d5		      LDA	ScoreFontColor
    454  f1f2		       85 06		      STA	COLUP0
    455  f1f4		       a9 87		      LDA	#SCORE_BACKGROUND_COLOR
    456  f1f6		       85 07		      STA	COLUP1
    457  f1f8		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    458  f1fa		       85 b1		      STA	Tmp1
    459  f1fc
    460  f1fc
    461  f1fc							; After here we are going to update the screen, No more heavy code
    462  f1fc				   WaitForVblankEnd
    463  f1fc		       ad 84 02 	      LDA	INTIM
    464  f1ff		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    465  f201							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    466  f201		       85 01		      STA	VBLANK
    467  f203
    468  f203				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    469  f203		       85 02		      STA	WSYNC
    470  f205
    471  f205		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    472  f207		       85 0d		      STA	PF0	;3
    473  f209
    474  f209		       a5 82		      LDA	PF1Cache	;3
    475  f20b		       85 0e		      STA	PF1	;3
    476  f20d
    477  f20d		       a5 83		      LDA	PF2Cache	;3
    478  f20f		       85 0f		      STA	PF2	;3
    479  f211
    480  f211							;39
    481  f211				   DrawScore
    482  f211		       a6 d0		      LDX	ScoreD0	; 4
    483  f213		       bd 00 fd 	      LDA	Font,X	;4
    484  f216		       85 81		      STA	PF0Cache	;3
    485  f218		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    486  f21a							;17
    487  f21a
    488  f21a		       a6 d1		      LDX	ScoreD1	; 4
    489  f21c		       bd 00 fd 	      LDA	Font,X	;4
    490  f21f		       0a		      ASL		;2
    491  f220		       0a		      ASL		;2
    492  f221		       0a		      ASL		;2
    493  f222		       0a		      ASL		;2
    494  f223		       85 82		      STA	PF1Cache	;3
    495  f225		       c6 d1		      DEC	ScoreD1	;6
    496  f227							;9 (After Wsync)
    497  f227
    498  f227		       a6 d2		      LDX	ScoreD2	; 4
    499  f229		       bd 00 fd 	      LDA	Font,X	;4
    500  f22c		       29 0f		      AND	#%00001111
    501  f22e		       05 82		      ORA	PF1Cache	;3
    502  f230		       85 82		      STA	PF1Cache	;3
    503  f232		       c6 d2		      DEC	ScoreD2	;6
    504  f234							;20
    505  f234
    506  f234		       a6 d3		      LDX	ScoreD3	; 3
    507  f236		       bd 00 fd 	      LDA	Font,X	;4
    508  f239		       4a		      LSR		;2
    509  f23a		       4a		      LSR		;2
    510  f23b		       4a		      LSR		;2
    511  f23c		       4a		      LSR		;2
    512  f23d		       85 83		      STA	PF2Cache	;3
    513  f23f		       c6 d3		      DEC	ScoreD3	;5
    514  f241							;23
    515  f241
    516  f241		       a6 d4		      LDX	ScoreD4	; 3
    517  f243		       bd 00 fd 	      LDA	Font,X	;4
    518  f246		       29 f0		      AND	#%11110000
    519  f248		       05 83		      ORA	PF2Cache	;3
    520  f24a		       85 83		      STA	PF2Cache	;3
    521  f24c		       c6 d4		      DEC	ScoreD4	;5
    522  f24e							;18
    523  f24e
    524  f24e		       88		      DEY		;2
    525  f24f		       10 b2		      BPL	ScoreLoop	;4
    526  f251
    527  f251		       85 02		      STA	WSYNC
    528  f253
    529  f253		       20 16 f4 	      JSR	LoadPF
    530  f256
    531  f256		       85 02		      STA	WSYNC
    532  f258		       85 02		      STA	WSYNC
    533  f25a
    534  f25a				   PrepareForTraffic
    535  f25a		       20 07 f4 	      JSR	ClearPF	; 32
    536  f25d
    537  f25d		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    538  f25f		       85 06		      STA	COLUP0
    539  f261
    540  f261		       a9 03		      LDA	#BACKGROUND_COLOR	;2
    541  f263		       85 07		      STA	COLUP1	;3
    542  f265
    543  f265							;Traffic colour
    544  f265		       a9 34		      LDA	#TRAFFIC_COLOR	;2
    545  f267		       85 08		      STA	COLUPF	;3
    546  f269
    547  f269		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    548  f26b
    549  f26b		       a9 03		      LDA	#BACKGROUND_COLOR	;2 Make it in the very end, so we have one more nice blue line
      0  f26d					      SLEEP	18	; Wait, so the line stay blue
      1  f26d				   .CYCLES    SET	18
      2  f26d
      3  f26d				  -	      IF	.CYCLES < 2
      4  f26d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f26d				  -	      ERR
      6  f26d					      ENDIF
      7  f26d
      8  f26d				  -	      IF	.CYCLES & 1
      9  f26d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f26d				  -	      nop	0
     11  f26d				  -	      ELSE
     12  f26d				  -	      bit	VSYNC
     13  f26d				  -	      ENDIF
     14  f26d				  -.CYCLES    SET	.CYCLES - 3
     15  f26d					      ENDIF
     16  f26d
     17  f26d					      REPEAT	.CYCLES / 2
     18  f26d		       ea		      nop
     17  f26d					      REPEND
     18  f26e		       ea		      nop
     17  f26e					      REPEND
     18  f26f		       ea		      nop
     17  f26f					      REPEND
     18  f270		       ea		      nop
     17  f270					      REPEND
     18  f271		       ea		      nop
     17  f271					      REPEND
     18  f272		       ea		      nop
     17  f272					      REPEND
     18  f273		       ea		      nop
     17  f273					      REPEND
     18  f274		       ea		      nop
     17  f274					      REPEND
     18  f275		       ea		      nop
     19  f276					      REPEND
    551  f276		       85 09		      STA	COLUBK	;3
    552  f278
    553  f278
    554  f278							;main scanline loop...
    555  f278				   ScanLoop
    556  f278		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    557  f27a
    558  f27a							;Start of next line!			
    559  f27a				   DrawCache		;36 Is the last line going to the top of the next frame?
    560  f27a
    561  f27a		       a5 81		      LDA	PF0Cache	;3
    562  f27c		       85 0d		      STA	PF0	;3
    563  f27e
    564  f27e		       b9 00 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    565  f281		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    566  f283
    567  f283		       a5 82		      LDA	PF1Cache	;3
    568  f285		       85 0e		      STA	PF1	;3
    569  f287
    570  f287		       a5 83		      LDA	PF2Cache	;3
    571  f289		       85 0f		      STA	PF2	;3
    572  f28b
    573  f28b		       a9 00		      LDA	#0	;2
    574  f28d		       85 81		      STA	PF0Cache	;3
    575  f28f		       85 82		      STA	PF1Cache	;3
    576  f291		       85 83		      STA	PF2Cache	;3
    577  f293
    578  f293							;BEQ DrawTraffic3
    579  f293				   DrawTraffic1 		; 32 
    580  f293		       98		      TYA		; 2
    581  f294		       18		      CLC		; 2 
    582  f295		       65 95		      ADC	TrafficOffset1 + 1	;3
    583  f297		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    584  f299		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    585  f29b		       45 96		      EOR	TrafficOffset1 + 2	; 3
    586  f29d		       4c a2 f2 	      JMP	AfterEorOffsetWithCarry	; 3
    587  f2a0				   EorOffsetWithCarry
    588  f2a0		       45 97		      EOR	TrafficOffset1 + 3	; 3
    589  f2a2				   AfterEorOffsetWithCarry		;17
    590  f2a2		       aa		      TAX		;2
    591  f2a3		       bd 00 fe 	      LDA	AesTable,X	; 4
    592  f2a6		       c9 1c		      CMP	#TRAFFIC_1_CHANCE	;2
    593  f2a8		       b0 04		      BCS	FinishDrawTraffic1	; 2
    594  f2aa		       a9 60		      LDA	#%01100000	;2
    595  f2ac		       85 82		      STA	PF1Cache	;3
    596  f2ae				   FinishDrawTraffic1
    597  f2ae
    598  f2ae				   DrawTraffic2 		; 35
    599  f2ae		       98		      TYA		; 2
    600  f2af		       18		      CLC		; 2 
    601  f2b0		       65 99		      ADC	TrafficOffset2 + 1	;3
    602  f2b2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    603  f2b4		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    604  f2b6		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    605  f2b8		       4c bd f2 	      JMP	AfterEorOffsetWithCarry2	; 3
    606  f2bb				   EorOffsetWithCarry2
    607  f2bb		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    608  f2bd				   AfterEorOffsetWithCarry2		;17
    609  f2bd		       aa		      TAX		;2
    610  f2be		       bd 00 fe 	      LDA	AesTable,X	; 4
    611  f2c1		       c9 1c		      CMP	#TRAFFIC_1_CHANCE	;2
    612  f2c3		       b0 06		      BCS	FinishDrawTraffic2	; 2
    613  f2c5		       a5 82		      LDA	PF1Cache	;3
    614  f2c7		       09 0c		      ORA	#%00001100	;2
    615  f2c9		       85 82		      STA	PF1Cache	;3
    616  f2cb				   FinishDrawTraffic2
    617  f2cb
    618  f2cb							;STA WSYNC ;65 / 137
    619  f2cb
    620  f2cb							; LDA Tmp0 ; Flicker this line if drawing car
    621  f2cb							; BEQ FinishDrawTraffic4
    622  f2cb				   DrawTraffic3 		; 38
    623  f2cb		       98		      TYA		; 2
    624  f2cc		       18		      CLC		; 2 
    625  f2cd		       65 9d		      ADC	TrafficOffset3 + 1	;3
    626  f2cf		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    627  f2d1		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    628  f2d3		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    629  f2d5		       4c da f2 	      JMP	AfterEorOffsetWithCarry3	; 3
    630  f2d8				   EorOffsetWithCarry3
    631  f2d8		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    632  f2da				   AfterEorOffsetWithCarry3		;17
    633  f2da		       aa		      TAX		;2
    634  f2db		       bd 00 fe 	      LDA	AesTable,X	; 4
    635  f2de		       c9 1c		      CMP	#TRAFFIC_1_CHANCE	;2
    636  f2e0		       b0 08		      BCS	FinishDrawTraffic3	; 2 
    637  f2e2		       a9 01		      LDA	#%00000001	;2
    638  f2e4		       85 83		      STA	PF2Cache	;3
    639  f2e6		       05 82		      ORA	PF1Cache	;3
    640  f2e8		       85 82		      STA	PF1Cache	;3
    641  f2ea				   FinishDrawTraffic3
    642  f2ea
    643  f2ea				   DrawTraffic4 		; 35
    644  f2ea		       98		      TYA		; 2
    645  f2eb		       18		      CLC		; 2 
    646  f2ec		       65 a1		      ADC	TrafficOffset4 + 1	;3
    647  f2ee		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    648  f2f0		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    649  f2f2		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    650  f2f4		       4c f9 f2 	      JMP	AfterEorOffsetWithCarry4	; 3
    651  f2f7				   EorOffsetWithCarry4
    652  f2f7		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    653  f2f9				   AfterEorOffsetWithCarry4		;17
    654  f2f9		       aa		      TAX		;2
    655  f2fa		       bd 00 fe 	      LDA	AesTable,X	; 4
    656  f2fd		       c9 1c		      CMP	#TRAFFIC_1_CHANCE	;2
    657  f2ff		       b0 06		      BCS	FinishDrawTraffic4	; 2
    658  f301		       a5 83		      LDA	PF2Cache	;3
    659  f303		       09 0c		      ORA	#%00001100	;2
    660  f305		       85 83		      STA	PF2Cache	;3	
    661  f307				   FinishDrawTraffic4
    662  f307
    663  f307				   DrawTraffic0 		; 24
    664  f307		       98		      TYA		;2
    665  f308		       18		      CLC		;2
    666  f309		       65 91		      ADC	TrafficOffset0 + 1	; 3
    667  f30b		       29 04		      AND	#%00000100	;2 Every 4 game lines, draw the border
    668  f30d		       f0 0a		      BEQ	SkipDrawTraffic0	; 2
    669  f30f		       a9 f0		      LDA	#%11110000	; 2
    670  f311		       85 81		      STA	PF0Cache	;3
    671  f313		       a5 83		      LDA	PF2Cache	;3
    672  f315		       09 e0		      ORA	#%11100000	;2
    673  f317		       85 83		      STA	PF2Cache	; 3
    674  f319				   SkipDrawTraffic0
    675  f319
    676  f319				   WhileScanLoop
    677  f319		       88		      DEY		;2
    678  f31a		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    679  f31c		       4c 78 f2 	      JMP	ScanLoop	;3
    680  f31f				   FinishScanLoop		; 7 209 of 222
    681  f31f
    682  f31f		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    683  f321		       20 16 f4 	      JSR	LoadPF
    684  f324		       85 02		      STA	WSYNC	; do stuff!
    685  f326		       85 02		      STA	WSYNC
    686  f328		       85 02		      STA	WSYNC
    687  f32a							;42 cycles to use here
    688  f32a
    689  f32a				   PrepareOverscan
    690  f32a		       a9 02		      LDA	#2
    691  f32c		       85 02		      STA	WSYNC
    692  f32e		       85 01		      STA	VBLANK
    693  f330
    694  f330		       a9 24		      LDA	#36	; one more line before overscan...
    695  f332		       8d 96 02 	      STA	TIM64T
    696  f335
    697  f335				   ProcessScoreFontColor
    698  f335		       a6 d6		      LDX	ScoreFontColorHoldChange
    699  f337		       f0 06		      BEQ	ResetScoreFontColor
    700  f339		       ca		      DEX
    701  f33a		       86 d6		      STX	ScoreFontColorHoldChange
    702  f33c		       4c 43 f3 	      JMP	SkipScoreFontColor
    703  f33f				   ResetScoreFontColor
    704  f33f		       a9 0c		      LDA	#SCORE_FONT_COLOR
    705  f341		       85 d5		      STA	ScoreFontColor
    706  f343				   SkipScoreFontColor
    707  f343
    708  f343				   IsGameOver
    709  f343		       a5 bc		      LDA	CountdownTimer
    710  f345		       05 88		      ORA	Player0SpeedL
    711  f347		       05 89		      ORA	Player0SpeedH
    712  f349		       d0 0b		      BNE	IsCheckpoint
    713  f34b		       a9 01		      LDA	#1
    714  f34d		       85 d6		      STA	ScoreFontColorHoldChange
    715  f34f		       a9 2f		      LDA	#SCORE_FONT_COLOR_OVER
    716  f351		       85 d5		      STA	ScoreFontColor
    717  f353		       4c 85 f3 	      JMP	SkipIsTimeOver
    718  f356
    719  f356				   IsCheckpoint
    720  f356		       a5 d7		      LDA	NextCheckpoint
    721  f358		       c5 92		      CMP	TrafficOffset0 + 2
    722  f35a		       d0 1d		      BNE	SkipIsCheckpoint
    723  f35c		       18		      CLC
    724  f35d		       69 10		      ADC	#CHECKPOINT_INTERVAL
    725  f35f		       85 d7		      STA	NextCheckpoint
    726  f361		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    727  f363		       85 d5		      STA	ScoreFontColor
    728  f365		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    729  f367		       85 d6		      STA	ScoreFontColorHoldChange
    730  f369		       a5 bc		      LDA	CountdownTimer
    731  f36b		       18		      CLC
    732  f36c		       69 23		      ADC	#CHECKPOINT_ADD_TIME
    733  f36e		       85 bc		      STA	CountdownTimer
    734  f370		       90 04		      BCC	JumpSkipTimeOver
    735  f372		       a9 ff		      LDA	#$FF
    736  f374		       85 bc		      STA	CountdownTimer	; Does not overflow!
    737  f376				   JumpSkipTimeOver
    738  f376		       4c 85 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    739  f379				   SkipIsCheckpoint
    740  f379
    741  f379				   IsTimeOver
    742  f379		       a5 bc		      LDA	CountdownTimer
    743  f37b		       d0 08		      BNE	SkipIsTimeOver
    744  f37d		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    745  f37f		       85 d6		      STA	ScoreFontColorHoldChange
    746  f381		       a9 34		      LDA	#SCORE_FONT_COLOR_BAD
    747  f383		       85 d5		      STA	ScoreFontColor
    748  f385				   SkipIsTimeOver
    749  f385
    750  f385							;Could be done during on vblank to save this comparisson time (before draw score), 
    751  f385							;but I am saving vblank cycles for now, in case of 2 players.
    752  f385				   ChooseSide		; 
    753  f385		       a5 86		      LDA	FrameCount0	;3
    754  f387		       29 01		      AND	#%00000001	;2
    755  f389		       f0 37		      BEQ	RightScoreWrite	; Half of the screen with the correct colors.
    756  f38b
    757  f38b				   LeftScoreWrite
    758  f38b				   WriteDistance		;Not optimized yet, ugly code.
    759  f38b
    760  f38b				   Digit0Distance
    761  f38b		       a5 91		      LDA	TrafficOffset0 + 1	;3
    762  f38d		       29 f0		      AND	#%11110000	;2
    763  f38f		       4a		      LSR		; 2
    764  f390		       4a		      LSR		; 2
    765  f391		       4a		      LSR		; 2
    766  f392		       4a		      LSR		; 2
    767  f393		       aa		      TAX		; 2
    768  f394		       bd 64 fd 	      LDA	FontLookup,X	;4
    769  f397		       85 d3		      STA	ScoreD3	;3
    770  f399
    771  f399				   Digit1Distance
    772  f399		       a5 92		      LDA	TrafficOffset0 + 2	;3
    773  f39b		       29 0f		      AND	#%00001111	;2
    774  f39d		       aa		      TAX		; 2
    775  f39e		       bd 64 fd 	      LDA	FontLookup,X	;4 
    776  f3a1		       85 d2		      STA	ScoreD2	;3
    777  f3a3
    778  f3a3				   Digit2Distance
    779  f3a3		       a5 92		      LDA	TrafficOffset0 + 2	;3
    780  f3a5		       29 f0		      AND	#%11110000	;2
    781  f3a7		       4a		      LSR		; 2
    782  f3a8		       4a		      LSR		; 2
    783  f3a9		       4a		      LSR		; 2
    784  f3aa		       4a		      LSR		; 2
    785  f3ab		       aa		      TAX		; 2
    786  f3ac		       bd 64 fd 	      LDA	FontLookup,X	;4
    787  f3af		       85 d1		      STA	ScoreD1	;3
    788  f3b1
    789  f3b1				   Digit3Distance
    790  f3b1		       a5 bd		      LDA	Traffic0Msb	;3
    791  f3b3		       29 0f		      AND	#%00001111	;2
    792  f3b5		       aa		      TAX		; 2
    793  f3b6		       bd 64 fd 	      LDA	FontLookup,X	;4 
    794  f3b9		       85 d0		      STA	ScoreD0	;3
    795  f3bb
    796  f3bb		       a9 63		      LDA	#<Pipe + #SCORE_SIZE -1	;3
    797  f3bd		       85 d4		      STA	ScoreD4	;3
    798  f3bf				   EndDrawDistance
    799  f3bf		       4c ff f3 	      JMP	RightScoreWriteEnd	;3
    800  f3c2
    801  f3c2				   RightScoreWrite
    802  f3c2				   Digit0Timer
    803  f3c2		       a5 bc		      LDA	CountdownTimer	;3
    804  f3c4		       29 0f		      AND	#%00001111	;2
    805  f3c6		       aa		      TAX		; 2
    806  f3c7		       bd 64 fd 	      LDA	FontLookup,X	;4 
    807  f3ca		       85 d1		      STA	ScoreD1	;3
    808  f3cc
    809  f3cc				   Digit1Timer
    810  f3cc		       a5 bc		      LDA	CountdownTimer	;3
    811  f3ce		       29 f0		      AND	#%11110000	;2
    812  f3d0		       4a		      LSR		; 2
    813  f3d1		       4a		      LSR		; 2
    814  f3d2		       4a		      LSR		; 2
    815  f3d3		       4a		      LSR		; 2
    816  f3d4		       aa		      TAX		; 2
    817  f3d5		       bd 64 fd 	      LDA	FontLookup,X	;4
    818  f3d8		       85 d0		      STA	ScoreD0	;3
    819  f3da
    820  f3da		       a9 63		      LDA	#<Pipe + #SCORE_SIZE -1	;3
    821  f3dc		       85 d2		      STA	ScoreD2	;3
    822  f3de
    823  f3de				   Digit0Speed
    824  f3de		       a5 88		      LDA	Player0SpeedL
    825  f3e0		       29 3c		      AND	#%00111100	;2 Discard the last bits
    826  f3e2		       4a		      LSR		; 2
    827  f3e3		       4a		      LSR		; 2
    828  f3e4		       aa		      TAX		; 2
    829  f3e5		       bd 64 fd 	      LDA	FontLookup,X	;4
    830  f3e8		       85 d4		      STA	ScoreD4	;3
    831  f3ea
    832  f3ea				   Digit1Speed
    833  f3ea		       a5 88		      LDA	Player0SpeedL
    834  f3ec		       29 c0		      AND	#%11000000	;2 Discard the last bits
    835  f3ee		       2a		      ROL		;First goes into carry
    836  f3ef		       2a		      ROL
    837  f3f0		       2a		      ROL
    838  f3f1		       85 b0		      STA	Tmp0
    839  f3f3		       a5 89		      LDA	Player0SpeedH
    840  f3f5		       0a		      ASL
    841  f3f6		       0a		      ASL
    842  f3f7		       05 b0		      ORA	Tmp0
    843  f3f9		       aa		      TAX		; 2
    844  f3fa		       bd 64 fd 	      LDA	FontLookup,X	;4
    845  f3fd		       85 d3		      STA	ScoreD3	;3
    846  f3ff
    847  f3ff				   RightScoreWriteEnd
    848  f3ff
    849  f3ff				   OverScanWait
    850  f3ff		       ad 84 02 	      LDA	INTIM
    851  f402		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    852  f404		       4c 3f f0 	      JMP	MainLoop
    853  f407
    854  f407				   Subroutines
    855  f407
    856  f407				   ClearPF		; 26
    857  f407		       a9 00		      LDA	#0	;2
    858  f409		       85 0d		      STA	PF0	;3
    859  f40b		       85 0e		      STA	PF1	;3
    860  f40d		       85 0f		      STA	PF2	;3	
    861  f40f		       85 81		      STA	PF0Cache	;3
    862  f411		       85 82		      STA	PF1Cache	;3
    863  f413		       85 83		      STA	PF2Cache	;3 
    864  f415		       60		      RTS		;6
    865  f416
    866  f416				   LoadPF		; 24
    867  f416		       a5 81		      LDA	PF0Cache	;3
    868  f418		       85 0d		      STA	PF0	;3
    869  f41a
    870  f41a		       a5 82		      LDA	PF1Cache	;3
    871  f41c		       85 0e		      STA	PF1	;3
    872  f41e
    873  f41e		       a5 83		      LDA	PF2Cache	;3
    874  f420		       85 0f		      STA	PF2	;3
    875  f422
    876  f422		       60		      RTS		;6
    877  f423
    878  f423							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
    879  fd00					      org	$FD00
    880  fd00				   Font
    881  fd00				   C0
    882  fd00		       e7		      .byte.b	#%11100111	;
    883  fd01		       a5		      .byte.b	#%10100101	; 
    884  fd02		       a5		      .byte.b	#%10100101	; 
    885  fd03		       a5		      .byte.b	#%10100101	; 
    886  fd04		       e7		      .byte.b	#%11100111	;	
    887  fd05				   C1
    888  fd05		       e7		      .byte.b	#%11100111	;
    889  fd06		       42		      .byte.b	#%01000010	; 
    890  fd07		       42		      .byte.b	#%01000010	; 
    891  fd08		       42		      .byte.b	#%01000010	; 
    892  fd09		       66		      .byte.b	#%01100110	;
    893  fd0a				   C2
    894  fd0a		       e7		      .byte.b	#%11100111	;
    895  fd0b		       24		      .byte.b	#%00100100	; 
    896  fd0c		       e7		      .byte.b	#%11100111	; 
    897  fd0d		       81		      .byte.b	#%10000001	; 
    898  fd0e		       e7		      .byte.b	#%11100111	;
    899  fd0f				   C3
    900  fd0f		       e7		      .byte.b	#%11100111	;
    901  fd10		       81		      .byte.b	#%10000001	; 
    902  fd11		       e7		      .byte.b	#%11100111	; 
    903  fd12		       81		      .byte.b	#%10000001	; 
    904  fd13		       e7		      .byte.b	#%11100111	;
    905  fd14				   C4
    906  fd14		       81		      .byte.b	#%10000001	;
    907  fd15		       81		      .byte.b	#%10000001	; 
    908  fd16		       e7		      .byte.b	#%11100111	; 
    909  fd17		       a5		      .byte.b	#%10100101	; 
    910  fd18		       a5		      .byte.b	#%10100101	;
    911  fd19				   C5
    912  fd19		       e7		      .byte.b	#%11100111	;
    913  fd1a		       81		      .byte.b	#%10000001	; 
    914  fd1b		       e7		      .byte.b	#%11100111	; 
    915  fd1c		       24		      .byte.b	#%00100100	; 
    916  fd1d		       e7		      .byte.b	#%11100111	;
    917  fd1e				   C6
    918  fd1e		       e7		      .byte.b	#%11100111	;
    919  fd1f		       a5		      .byte.b	#%10100101	; 
    920  fd20		       e7		      .byte.b	#%11100111	; 
    921  fd21		       24		      .byte.b	#%00100100	; 
    922  fd22		       e7		      .byte.b	#%11100111	;
    923  fd23				   C7
    924  fd23		       81		      .byte.b	#%10000001	;
    925  fd24		       81		      .byte.b	#%10000001	; 
    926  fd25		       81		      .byte.b	#%10000001	; 
    927  fd26		       81		      .byte.b	#%10000001	; 
    928  fd27		       e7		      .byte.b	#%11100111	;
    929  fd28				   C8
    930  fd28		       e7		      .byte.b	#%11100111	;
    931  fd29		       a5		      .byte.b	#%10100101	; 
    932  fd2a		       e7		      .byte.b	#%11100111	; 
    933  fd2b		       a5		      .byte.b	#%10100101	; 
    934  fd2c		       e7		      .byte.b	#%11100111	;
    935  fd2d				   C9
    936  fd2d		       e7		      .byte.b	#%11100111	;
    937  fd2e		       81		      .byte.b	#%10000001	; 
    938  fd2f		       e7		      .byte.b	#%11100111	; 
    939  fd30		       a5		      .byte.b	#%10100101	; 
    940  fd31		       e7		      .byte.b	#%11100111	;
    941  fd32				   CA
    942  fd32		       a5		      .byte.b	#%10100101	;
    943  fd33		       a5		      .byte.b	#%10100101	; 
    944  fd34		       e7		      .byte.b	#%11100111	; 
    945  fd35		       a5		      .byte.b	#%10100101	; 
    946  fd36		       e7		      .byte.b	#%11100111	;
    947  fd37				   CB
    948  fd37		       66		      .byte.b	#%01100110	;
    949  fd38		       a5		      .byte.b	#%10100101	; 
    950  fd39		       66		      .byte.b	#%01100110	; 
    951  fd3a		       a5		      .byte.b	#%10100101	;
    952  fd3b		       66		      .byte.b	#%01100110	;
    953  fd3c				   CC
    954  fd3c		       e7		      .byte.b	#%11100111	;
    955  fd3d		       24		      .byte.b	#%00100100	; 
    956  fd3e		       24		      .byte.b	#%00100100	; 
    957  fd3f		       24		      .byte.b	#%00100100	;
    958  fd40		       e7		      .byte.b	#%11100111	;
    959  fd41
    960  fd41				   CD
    961  fd41		       66		      .byte.b	#%01100110	;
    962  fd42		       a5		      .byte.b	#%10100101	; 
    963  fd43		       a5		      .byte.b	#%10100101	; 
    964  fd44		       a5		      .byte.b	#%10100101	;
    965  fd45		       66		      .byte.b	#%01100110	;
    966  fd46
    967  fd46				   CE
    968  fd46		       e7		      .byte.b	#%11100111	;
    969  fd47		       24		      .byte.b	#%00100100	; 
    970  fd48		       e7		      .byte.b	#%11100111	; 
    971  fd49		       24		      .byte.b	#%00100100	; 
    972  fd4a		       e7		      .byte.b	#%11100111	;
    973  fd4b
    974  fd4b				   CF
    975  fd4b		       24		      .byte.b	#%00100100	;
    976  fd4c		       24		      .byte.b	#%00100100	; 
    977  fd4d		       e7		      .byte.b	#%11100111	; 
    978  fd4e		       24		      .byte.b	#%00100100	; 
    979  fd4f		       e7		      .byte.b	#%11100111	;
    980  fd50
    981  fd50				   Space		; Moved from the beggining so 0 to F is fast to draw.
    982  fd50		       00		      .byte.b	%0	;
    983  fd51		       00		      .byte.b	#0	;
    984  fd52		       00		      .byte.b	#0	;
    985  fd53		       00		      .byte.b	#0	;
    986  fd54		       00		      .byte.b	#0	;
    987  fd55
    988  fd55				   CS
    989  fd55		       66		      .byte.b	#%01100110	;
    990  fd56		       81		      .byte.b	#%10000001	; 
    991  fd57		       42		      .byte.b	#%01000010	; 
    992  fd58		       24		      .byte.b	#%00100100	; 
    993  fd59		       c3		      .byte.b	#%11000011	;
    994  fd5a
    995  fd5a				   CT
    996  fd5a		       42		      .byte.b	#%01000010	;
    997  fd5b		       42		      .byte.b	#%01000010	; 
    998  fd5c		       42		      .byte.b	#%01000010	; 
    999  fd5d		       42		      .byte.b	#%01000010	; 
   1000  fd5e		       e7		      .byte.b	#%11100111	;
   1001  fd5f
   1002  fd5f				   Pipe
   1003  fd5f		       42		      .byte.b	#%01000010	;
   1004  fd60		       00		      .byte.b	#%00000000	; 
   1005  fd61		       42		      .byte.b	#%01000010	; 
   1006  fd62		       00		      .byte.b	#%00000000	; 
   1007  fd63		       42		      .byte.b	#%01000010	;
   1008  fd64
   1009  fd64				   FontLookup		; Very fast font lookup for dynamic values!
   1010  fd64		       04		      .byte.b	#<C0 + #SCORE_SIZE -1
   1011  fd65		       09		      .byte.b	#<C1 + #SCORE_SIZE -1
   1012  fd66		       0e		      .byte.b	#<C2 + #SCORE_SIZE -1
   1013  fd67		       13		      .byte.b	#<C3 + #SCORE_SIZE -1
   1014  fd68		       18		      .byte.b	#<C4 + #SCORE_SIZE -1
   1015  fd69		       1d		      .byte.b	#<C5 + #SCORE_SIZE -1
   1016  fd6a		       22		      .byte.b	#<C6 + #SCORE_SIZE -1
   1017  fd6b		       27		      .byte.b	#<C7 + #SCORE_SIZE -1
   1018  fd6c		       2c		      .byte.b	#<C8 + #SCORE_SIZE -1
   1019  fd6d		       31		      .byte.b	#<C9 + #SCORE_SIZE -1
   1020  fd6e		       36		      .byte.b	#<CA + #SCORE_SIZE -1
   1021  fd6f		       3b		      .byte.b	#<CB + #SCORE_SIZE -1
   1022  fd70		       40		      .byte.b	#<CC + #SCORE_SIZE -1
   1023  fd71		       45		      .byte.b	#<CD + #SCORE_SIZE -1
   1024  fd72		       4a		      .byte.b	#<CE + #SCORE_SIZE -1
   1025  fd73		       4f		      .byte.b	#<CF + #SCORE_SIZE -1
   1026  fd74
   1027  fd74
   1028  fe00					      org	$FE00
   1029  fe00				   AesTable
   1030  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   1031  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   1032  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   1033  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   1034  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   1035  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   1036  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   1037  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   1038  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   1039  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   1040  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   1041  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   1042  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   1043  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   1044  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   1045  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   1046  ff00
   1047  ff00							; From FF00 to FFFB (122 bytes) to use here
   1048  ff00
   1049  ff00				   CarSprite		; Upside down
   1050  ff00		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   1051  ff01		       7e		      .byte.b	#%01111110
   1052  ff02		       24		      .byte.b	#%00100100
   1053  ff03		       bd		      .byte.b	#%10111101
   1054  ff04		       3c		      .byte.b	#%00111100
   1055  ff05		       bd		      .byte.b	#%10111101
   1056  ff06		       3c		      .byte.b	#%00111100
   1057  ff07		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
   1058  ff39
   1059  ff39
   1060  ff39				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
   1061  ff39		       00		      .byte.b	#$00	;  Trafic0 L
   1062  ff3a		       00		      .byte.b	#$00	;  Trafic0 H
   1063  ff3b		       0a		      .byte.b	#$0A	;  Trafic1 L
   1064  ff3c		       01		      .byte.b	#$01	;  Trafic1 H
   1065  ff3d		       e6		      .byte.b	#$E6	;  Trafic2 L
   1066  ff3e		       00		      .byte.b	#$00	;  Trafic2 H
   1067  ff3f		       c2		      .byte.b	#$C2	;  Trafic3 L
   1068  ff40		       00		      .byte.b	#$00	;  Trafic3 H
   1069  ff41		       9e		      .byte.b	#$9E	;  Trafic4 L
   1070  ff42		       00		      .byte.b	#$00	;  Trafic4 H
   1071  ff43
   1072  ff43
   1073  fffc					      org	$FFFC
   1074  fffc		       00 f0		      .word.w	Start
   1075  fffe		       00 f0		      .word.w	Start
