------- FILE hellway-parallax.asm LEVEL 1 PASS 3
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway-parallax.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway-parallax.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 3a	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     18  f000							;16 bit precision
     19  f000							;640 max speed!
     20  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     21  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     22  f000		       00 00	   CAR_MIN_SPEED_H =	0
     23  f000		       00 00	   CAR_MIN_SPEED_L =	0
     24  f000		       00 01	   ACCELERATE_SPEED =	1
     25  f000		       00 0a	   BREAK_SPEED =	10
     26  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     27  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     28  f000
     29  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     30  f000		       00 1e	   CHECKPOINT_TIME_LIGHT =	30
     31  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     32  f000
     33  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     34  f000		       00 23	   CHECKPOINT_TIME_REGULAR =	35
     35  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     36  f000
     37  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     38  f000		       00 28	   CHECKPOINT_TIME_INTENSE =	40
     39  f000		       00 f4	   TRAFFIC_COLOR_INTENSE =	$F4
     40  f000
     41  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     42  f000		       00 2d	   CHECKPOINT_TIME_RUSH_HOUR =	45
     43  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     44  f000
     45  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     46  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     47  f000
     48  f000		       00 96	   PLAYER1_COLOR =	$96
     49  f000
     50  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     51  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     52  f000		       00 33	   SCORE_FONT_COLOR_BAD =	$33
     53  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     54  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     55  f000
     56  f000		       00 35	   PLAYER_0_X_START =	$35	;
     57  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     58  f000
     59  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     60  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     61  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     62  f000		       00 07	   TIMEOVER_BREAK_INTERVAL =	%00000111	; Every 8 frames
     63  f000
     64  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     65  f000
     66  f000		       00 00	   BLACK      =	$00	;
     67  f000
     68  f000		       00 0f	   MAX_GAME_MODE =	15
     69  f000
     70  f000		       00 08	   PARALLAX_SIZE =	8
     71  f000
     72  f000		       00 80	   GRP0Cache  =	$80
     73  f000		       00 81	   PF0Cache   =	$81
     74  f000		       00 82	   PF1Cache   =	$82
     75  f000		       00 83	   PF2Cache   =	$83
     76  f000		       00 84	   GRP1Cache  =	$84
     77  f000		       00 85	   ENABLCache =	$85
     78  f000		       00 86	   ENAM0Cache =	$86
     79  f000		       00 87	   ENAM1Cache =	$87
     80  f000
     81  f000		       00 8c	   FrameCount0 =	$8C	;
     82  f000		       00 8d	   FrameCount1 =	$8D	;
     83  f000
     84  f000		       00 8e	   Player0SpeedL =	$8E
     85  f000		       00 8f	   Player0SpeedH =	$8F
     86  f000
     87  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
     88  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
     89  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
     90  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
     91  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
     92  f000
     93  f000							;Temporary variables, multiple uses
     94  f000		       00 b0	   Tmp0       =	$B0
     95  f000		       00 b1	   Tmp1       =	$B1
     96  f000		       00 b2	   Tmp2       =	$B2
     97  f000		       00 b3	   Tmp3       =	$B3
     98  f000
     99  f000		       00 ba	   CollisionCounter =	$BA
    100  f000		       00 bb	   Player0X   =	$BB
    101  f000		       00 bc	   CountdownTimer =	$BC
    102  f000		       00 bd	   Traffic0Msb =	$BD
    103  f000		       00 be	   SwitchDebounceCounter =	$BE
    104  f000
    105  f000
    106  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it byte a flag for now.
    107  f000		       00 c1	   TrafficChance =	$C1
    108  f000		       00 c2	   CheckpointTime =	$C2
    109  f000		       00 c3	   TrafficColor =	$C3
    110  f000		       00 c4	   CurrentDifficulty =	$C4
    111  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 rand positions
    112  f000
    113  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    114  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    115  f000
    116  f000
    117  f000		       00 d0	   ScoreD0    =	$D0
    118  f000		       00 d1	   ScoreD1    =	$D1
    119  f000		       00 d2	   ScoreD2    =	$D2
    120  f000		       00 d3	   ScoreD3    =	$D3
    121  f000		       00 d4	   ScoreD4    =	$D4
    122  f000		       00 d5	   ScoreFontColor =	$D5
    123  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    124  f000		       00 d7	   NextCheckpoint =	$D7
    125  f000
    126  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    127  f000		       00 f0	   ParallaxCache2 =	$F0	; to F8
    128  f000
    129  f000
    130  f000							;generic start up stuff, put zero in all...
    131  f000				   BeforeStart		;All variables that are kept on game reset or select
    132  f000		       a0 00		      LDY	#0
    133  f002		       84 be		      STY	SwitchDebounceCounter
    134  f004		       84 c5		      STY	GameMode
    135  f006
    136  f006				   Start
    137  f006		       78		      SEI
    138  f007		       d8		      CLD
    139  f008		       a2 ff		      LDX	#$FF
    140  f00a		       9a		      TXS
    141  f00b		       a9 00		      LDA	#0
    142  f00d				   ClearMem
    143  f00d		       e0 be		      CPX	#SwitchDebounceCounter
    144  f00f		       f0 06		      BEQ	SkipClean
    145  f011		       e0 c5		      CPX	#GameMode
    146  f013		       f0 02		      BEQ	SkipClean
    147  f015		       95 00		      STA	0,X
    148  f017				   SkipClean
    149  f017		       ca		      DEX
    150  f018		       d0 f3		      BNE	ClearMem
    151  f01a
    152  f01a							;Setting some variables...
    153  f01a
    154  f01a
    155  f01a				   SettingTrafficOffsets		; Time sensitive with player H position
    156  f01a		       85 02		      STA	WSYNC	;We will set player position
    157  f01c		       20 db f6 	      JSR	DefaultOffsets
    158  f01f
    159  f01f		       ad 69 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    160  f022		       85 8e		      STA	Player0SpeedL
    161  f024
      0  f024					      SLEEP	11	;18
      1  f024				   .CYCLES    SET	11
      2  f024
      3  f024				  -	      IF	.CYCLES < 2
      4  f024				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f024				  -	      ERR
      6  f024					      ENDIF
      7  f024
      8  f024					      IF	.CYCLES & 1
      9  f024				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f024				  -	      nop	0
     11  f024					      ELSE
     12  f024		       24 00		      bit	VSYNC
     13  f026					      ENDIF
     14  f026				   .CYCLES    SET	.CYCLES - 3
     15  f026					      ENDIF
     16  f026
     17  f026					      REPEAT	.CYCLES / 2
     18  f026		       ea		      nop
     17  f026					      REPEND
     18  f027		       ea		      nop
     17  f027					      REPEND
     18  f028		       ea		      nop
     17  f028					      REPEND
     18  f029		       ea		      nop
     19  f02a					      REPEND
    163  f02a		       85 10		      STA	RESP0
    164  f02c
    165  f02c		       a6 00		      LDX	0
    166  f02e		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    167  f031		       29 c0		      AND	#%11000000
    168  f033		       f0 0b		      BEQ	CallConfigureDifficulty
    169  f035		       e8		      INX
    170  f036		       c9 80		      CMP	#%10000000
    171  f038		       f0 06		      BEQ	CallConfigureDifficulty
    172  f03a		       e8		      INX
    173  f03b		       c9 40		      CMP	#%01000000
    174  f03d		       f0 01		      BEQ	CallConfigureDifficulty
    175  f03f		       e8		      INX
    176  f040
    177  f040				   CallConfigureDifficulty
    178  f040		       86 c4		      STX	CurrentDifficulty
    179  f042		       20 93 f6 	      JSR	ConfigureDifficulty
    180  f045
    181  f045				   HPositioning
    182  f045		       85 02		      STA	WSYNC
    183  f047
    184  f047		       a9 30		      LDA	#%00110000	;2 Missile Size
    185  f049		       85 04		      STA	NUSIZ0	;3
    186  f04b		       85 05		      STA	NUSIZ1	;3
    187  f04d
    188  f04d		       a9 35		      LDA	#PLAYER_0_X_START	;2
    189  f04f		       85 bb		      STA	Player0X	;3
    190  f051
    191  f051		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    192  f053		       85 bc		      STA	CountdownTimer	;3
    193  f055
    194  f055		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    195  f057		       85 d7		      STA	NextCheckpoint
    196  f059
    197  f059		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f05b					      SLEEP	11	;
      1  f05b				   .CYCLES    SET	11
      2  f05b
      3  f05b				  -	      IF	.CYCLES < 2
      4  f05b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f05b				  -	      ERR
      6  f05b					      ENDIF
      7  f05b
      8  f05b					      IF	.CYCLES & 1
      9  f05b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f05b				  -	      nop	0
     11  f05b					      ELSE
     12  f05b		       24 00		      bit	VSYNC
     13  f05d					      ENDIF
     14  f05d				   .CYCLES    SET	.CYCLES - 3
     15  f05d					      ENDIF
     16  f05d
     17  f05d					      REPEAT	.CYCLES / 2
     18  f05d		       ea		      nop
     17  f05d					      REPEND
     18  f05e		       ea		      nop
     17  f05e					      REPEND
     18  f05f		       ea		      nop
     17  f05f					      REPEND
     18  f060		       ea		      nop
     19  f061					      REPEND
    199  f061		       85 11		      STA	RESP1
      0  f063					      SLEEP	2	;
      1  f063				   .CYCLES    SET	2
      2  f063
      3  f063				  -	      IF	.CYCLES < 2
      4  f063				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f063				  -	      ERR
      6  f063					      ENDIF
      7  f063
      8  f063				  -	      IF	.CYCLES & 1
      9  f063				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f063				  -	      nop	0
     11  f063				  -	      ELSE
     12  f063				  -	      bit	VSYNC
     13  f063				  -	      ENDIF
     14  f063				  -.CYCLES    SET	.CYCLES - 3
     15  f063					      ENDIF
     16  f063
     17  f063					      REPEAT	.CYCLES / 2
     18  f063		       ea		      nop
     19  f064					      REPEND
    201  f064		       85 14		      STA	RESBL
      0  f066					      SLEEP	2	;
      1  f066				   .CYCLES    SET	2
      2  f066
      3  f066				  -	      IF	.CYCLES < 2
      4  f066				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f066				  -	      ERR
      6  f066					      ENDIF
      7  f066
      8  f066				  -	      IF	.CYCLES & 1
      9  f066				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f066				  -	      nop	0
     11  f066				  -	      ELSE
     12  f066				  -	      bit	VSYNC
     13  f066				  -	      ENDIF
     14  f066				  -.CYCLES    SET	.CYCLES - 3
     15  f066					      ENDIF
     16  f066
     17  f066					      REPEAT	.CYCLES / 2
     18  f066		       ea		      nop
     19  f067					      REPEND
    203  f067		       85 12		      STA	RESM0
      0  f069					      SLEEP	2
      1  f069				   .CYCLES    SET	2
      2  f069
      3  f069				  -	      IF	.CYCLES < 2
      4  f069				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f069				  -	      ERR
      6  f069					      ENDIF
      7  f069
      8  f069				  -	      IF	.CYCLES & 1
      9  f069				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f069				  -	      nop	0
     11  f069				  -	      ELSE
     12  f069				  -	      bit	VSYNC
     13  f069				  -	      ENDIF
     14  f069				  -.CYCLES    SET	.CYCLES - 3
     15  f069					      ENDIF
     16  f069
     17  f069					      REPEAT	.CYCLES / 2
     18  f069		       ea		      nop
     19  f06a					      REPEND
    205  f06a		       85 13		      STA	RESM1
    206  f06c
    207  f06c		       a9 f0		      LDA	#$F0
    208  f06e		       85 24		      STA	HMBL
    209  f070		       85 22		      STA	HMM0
    210  f072		       85 23		      STA	HMM1
    211  f074		       85 02		      STA	WSYNC
    212  f076		       85 2a		      STA	HMOVE
    213  f078		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    214  f07a		       85 2b		      STA	HMCLR
    215  f07c
    216  f07c							;SLEEP 24
    217  f07c							;STA HMCLR
    218  f07c
    219  f07c							;VSYNC time
    220  f07c				   MainLoop
    221  f07c		       a9 02		      LDA	#2
    222  f07e		       85 00		      STA	VSYNC
    223  f080		       85 02		      STA	WSYNC
    224  f082		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    225  f084		       85 2a		      STA	HMOVE	;2
    226  f086							;This must be done after a WSync, otherwise it is impossible to predict the X position
    227  f086				   DoNotSetPlayerX
    228  f086
    229  f086		       85 02		      STA	WSYNC	;3
    230  f088		       a9 2b		      LDA	#43	;2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    231  f08a		       8d 96 02 	      STA	TIM64T	;3	
    232  f08d		       a9 00		      LDA	#0	;2
    233  f08f		       85 00		      STA	VSYNC	;3	
    234  f091
    235  f091							;Read Fire Button before, will make it start the game for now.
    236  f091				   StartGame
    237  f091		       a5 0c		      LDA	INPT4	;3
    238  f093		       30 1b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    239  f095		       a5 c0		      LDA	GameStatus	;3
    240  f097		       d0 17		      BNE	SkipGameStart
    241  f099		       e6 c0		      INC	GameStatus
    242  f09b		       a9 00		      LDA	#0	;
    243  f09d		       85 8c		      STA	FrameCount0
    244  f09f		       85 8d		      STA	FrameCount1
    245  f0a1		       a9 0a		      LDA	#10
    246  f0a3		       85 19		      STA	AUDV0
    247  f0a5		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    248  f0a7		       85 d5		      STA	ScoreFontColor
    249  f0a9		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    250  f0ab		       85 d6		      STA	ScoreFontColorHoldChange
    251  f0ad		       4c 21 f1 	      JMP	SkipIncFC1	; Make the worse case stable
    252  f0b0				   SkipGameStart
    253  f0b0
    254  f0b0				   RandomizeGame
    255  f0b0		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    256  f0b2		       d0 30		      BNE	EndRandomizeGame
    257  f0b4		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    258  f0b6		       29 02		      AND	#%00000010
    259  f0b8		       f0 27		      BEQ	DeterministicGame
    260  f0ba		       a6 96		      LDX	TrafficOffset1 + 2
    261  f0bc		       bd 00 fe 	      LDA	AesTable,X
    262  f0bf		       45 8c		      EOR	FrameCount0
    263  f0c1		       85 96		      STA	TrafficOffset1 + 2
    264  f0c3		       a6 9a		      LDX	TrafficOffset2 + 2
    265  f0c5		       bd 00 fe 	      LDA	AesTable,X
    266  f0c8		       45 8c		      EOR	FrameCount0
    267  f0ca		       85 9a		      STA	TrafficOffset2 + 2
    268  f0cc		       a6 9e		      LDX	TrafficOffset3 + 2
    269  f0ce		       bd 00 fe 	      LDA	AesTable,X
    270  f0d1		       45 8c		      EOR	FrameCount0
    271  f0d3		       85 9e		      STA	TrafficOffset3 + 2
    272  f0d5		       a6 a2		      LDX	TrafficOffset4 + 2
    273  f0d7		       bd 00 fe 	      LDA	AesTable,X
    274  f0da		       45 8c		      EOR	FrameCount0
    275  f0dc		       85 a2		      STA	TrafficOffset4 + 2
    276  f0de		       4c e4 f0 	      JMP	EndRandomizeGame
    277  f0e1
    278  f0e1				   DeterministicGame
    279  f0e1		       20 db f6 	      JSR	DefaultOffsets
    280  f0e4
    281  f0e4				   EndRandomizeGame
    282  f0e4
    283  f0e4
    284  f0e4				   ReadSwitches
    285  f0e4		       a6 be		      LDX	SwitchDebounceCounter
    286  f0e6		       d0 31		      BNE	DecrementSwitchDebounceCounter
    287  f0e8		       a9 01		      LDA	#%00000001
    288  f0ea		       2c 82 02 	      BIT	SWCHB
    289  f0ed		       d0 07		      BNE	SkipReset
    290  f0ef		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    291  f0f1		       85 be		      STA	SwitchDebounceCounter
    292  f0f3		       4c 06 f0 	      JMP	Start
    293  f0f6				   SkipReset
    294  f0f6
    295  f0f6				   GameModeSelect
    296  f0f6		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    297  f0f8		       d0 1c		      BNE	SkipGameSelect
    298  f0fa		       20 93 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    299  f0fd		       a9 02		      LDA	#%00000010
    300  f0ff		       2c 82 02 	      BIT	SWCHB
    301  f102		       d0 12		      BNE	SkipGameSelect
    302  f104		       a6 c5		      LDX	GameMode
    303  f106		       e0 0f		      CPX	#MAX_GAME_MODE
    304  f108		       f0 04		      BEQ	ResetGameMode
    305  f10a		       e8		      INX
    306  f10b		       4c 10 f1 	      JMP	StoreGameMode
    307  f10e				   ResetGameMode
    308  f10e		       a2 00		      LDX	#0
    309  f110				   StoreGameMode
    310  f110		       86 c5		      STX	GameMode
    311  f112		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    312  f114		       85 be		      STA	SwitchDebounceCounter
    313  f116				   SkipGameSelect
    314  f116		       4c 1b f1 	      JMP	EndReadSwitches
    315  f119				   DecrementSwitchDebounceCounter
    316  f119		       c6 be		      DEC	SwitchDebounceCounter
    317  f11b				   EndReadSwitches
    318  f11b
    319  f11b				   CountFrame
    320  f11b		       e6 8c		      INC	FrameCount0	; 5 Used to alternate lines
    321  f11d		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    322  f11f		       e6 8d		      INC	FrameCount1	; 5 Still not used
    323  f121				   SkipIncFC1
    324  f121
    325  f121							;Does not update the game if not running
    326  f121		       a5 c0		      LDA	GameStatus	;3
    327  f123		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    328  f125		       4c b8 f2 	      JMP	SkipUpdateLogic
    329  f128				   ContinueWithGameLogic
    330  f128
    331  f128				   EverySecond		; 64 frames to be more precise
    332  f128		       a9 3f		      LDA	#%00111111
    333  f12a		       25 8c		      AND	FrameCount0
    334  f12c		       d0 06		      BNE	SkipEverySecondAction
    335  f12e		       c5 bc		      CMP	CountdownTimer
    336  f130		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    337  f132		       c6 bc		      DEC	CountdownTimer
    338  f134				   SkipEverySecondAction
    339  f134
    340  f134
    341  f134				   BreakOnTimeOver		; Uses LDX as the breaking speed
    342  f134		       a2 00		      LDX	#0
    343  f136		       a5 bc		      LDA	CountdownTimer
    344  f138		       d0 08		      BNE	Break
    345  f13a		       a5 8c		      LDA	FrameCount0
    346  f13c		       29 07		      AND	#TIMEOVER_BREAK_INTERVAL
    347  f13e		       d0 02		      BNE	Break
    348  f140		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    349  f142
    350  f142				   Break
    351  f142		       a9 20		      LDA	#%00100000	;Down in controller
    352  f144		       2c 80 02 	      BIT	SWCHA
    353  f147		       d0 0b		      BNE	BreakNonZero
    354  f149		       a5 0c		      LDA	INPT4	;3
    355  f14b		       10 05		      BPL	BreakWhileAccelerating
    356  f14d		       a2 0a		      LDX	#BREAK_SPEED
    357  f14f		       4c 54 f1 	      JMP	BreakNonZero
    358  f152				   BreakWhileAccelerating		; Allow better control while breaking.
    359  f152		       a2 05		      LDX	#BREAK_SPEED / 2
    360  f154
    361  f154				   BreakNonZero
    362  f154		       e0 00		      CPX	#0
    363  f156		       f0 2b		      BEQ	SkipBreak
    364  f158		       86 b0		      STX	Tmp0
    365  f15a
    366  f15a				   DecreaseSpeed
    367  f15a		       38		      SEC
    368  f15b		       a5 8e		      LDA	Player0SpeedL
    369  f15d		       e5 b0		      SBC	Tmp0
    370  f15f		       85 8e		      STA	Player0SpeedL
    371  f161		       a5 8f		      LDA	Player0SpeedH
    372  f163		       e9 00		      SBC	#0
    373  f165		       85 8f		      STA	Player0SpeedH
    374  f167
    375  f167				   CheckMinSpeed
    376  f167		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    377  f169		       c9 00		      CMP	#CAR_MIN_SPEED_H
    378  f16b		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    379  f16d		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    380  f16f
    381  f16f				   CompareLBreakSpeed
    382  f16f		       a5 8e		      LDA	Player0SpeedL
    383  f171		       c9 00		      CMP	#CAR_MIN_SPEED_L
    384  f173		       90 03		      BCC	ResetMinSpeed	; Less than memory
    385  f175		       4c 80 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    386  f178
    387  f178				   ResetMinSpeed
    388  f178		       a9 00		      LDA	#CAR_MIN_SPEED_H
    389  f17a		       85 8f		      STA	Player0SpeedH
    390  f17c		       a9 00		      LDA	#CAR_MIN_SPEED_L
    391  f17e		       85 8e		      STA	Player0SpeedL
    392  f180
    393  f180				   SkipAccelerateIfBreaking
    394  f180		       4c b3 f1 	      JMP	SkipAccelerate
    395  f183				   SkipBreak
    396  f183
    397  f183				   Acelerates
    398  f183		       a5 bc		      LDA	CountdownTimer
    399  f185		       f0 2c		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    400  f187		       a5 0c		      LDA	INPT4	;3
    401  f189		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    402  f18b		       a9 10		      LDA	#%00010000	;UP in controller
    403  f18d		       2c 80 02 	      BIT	SWCHA
    404  f190		       d0 21		      BNE	SkipAccelerate
    405  f192
    406  f192				   IncreaseCarSpeed
    407  f192							;Adds speed
    408  f192		       18		      CLC
    409  f193		       a5 8e		      LDA	Player0SpeedL
    410  f195		       69 01		      ADC	#ACCELERATE_SPEED
    411  f197		       85 8e		      STA	Player0SpeedL
    412  f199		       a5 8f		      LDA	Player0SpeedH
    413  f19b		       69 00		      ADC	#0
    414  f19d		       85 8f		      STA	Player0SpeedH
    415  f19f
    416  f19f				   CheckIfAlreadyMaxSpeed
    417  f19f		       c9 02		      CMP	#CAR_MAX_SPEED_H
    418  f1a1		       90 10		      BCC	SkipAccelerate	; less than my max speed
    419  f1a3		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    420  f1a5							;High bit is max, compare the low
    421  f1a5		       a5 8e		      LDA	Player0SpeedL
    422  f1a7		       c9 80		      CMP	#CAR_MAX_SPEED_L
    423  f1a9		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    424  f1ab							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    425  f1ab
    426  f1ab				   ResetToMaxSpeed		; Speed is more, or is already max
    427  f1ab		       a9 02		      LDA	#CAR_MAX_SPEED_H
    428  f1ad		       85 8f		      STA	Player0SpeedH
    429  f1af		       a9 80		      LDA	#CAR_MAX_SPEED_L
    430  f1b1		       85 8e		      STA	Player0SpeedL
    431  f1b3				   SkipAccelerate
    432  f1b3
    433  f1b3				   InitUpdateOffsets
    434  f1b3		       a2 00		      LDX	#0	; Memory Offset 24 bit
    435  f1b5		       a0 00		      LDY	#0	; Line Speeds 16 bits
    436  f1b7		       a5 c5		      LDA	GameMode
    437  f1b9		       29 04		      AND	#%00000100	; GameModes with high delta
    438  f1bb		       f0 02		      BEQ	UpdateOffsets
    439  f1bd		       a4 0a		      LDY	TrafficSpeedsHighDelta - TrafficSpeeds
    440  f1bf
    441  f1bf				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    442  f1bf		       38		      SEC
    443  f1c0		       a5 8e		      LDA	Player0SpeedL
    444  f1c2		       f9 61 ff 	      SBC	TrafficSpeeds,Y
    445  f1c5		       85 b0		      STA	Tmp0
    446  f1c7		       c8		      INY
    447  f1c8		       a5 8f		      LDA	Player0SpeedH
    448  f1ca		       f9 61 ff 	      SBC	TrafficSpeeds,Y
    449  f1cd		       85 b1		      STA	Tmp1
    450  f1cf		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    451  f1d1		       e9 00		      SBC	#0
    452  f1d3		       85 b2		      STA	Tmp2
    453  f1d5
    454  f1d5				   AddsTheResult
    455  f1d5		       18		      CLC
    456  f1d6		       a5 b0		      LDA	Tmp0
    457  f1d8		       75 90		      ADC	TrafficOffset0,X
    458  f1da		       95 90		      STA	TrafficOffset0,X
    459  f1dc		       e8		      INX
    460  f1dd		       a5 b1		      LDA	Tmp1
    461  f1df		       75 90		      ADC	TrafficOffset0,X
    462  f1e1		       95 90		      STA	TrafficOffset0,X
    463  f1e3		       e8		      INX
    464  f1e4		       a5 b2		      LDA	Tmp2	; Carry
    465  f1e6		       75 90		      ADC	TrafficOffset0,X
    466  f1e8		       95 90		      STA	TrafficOffset0,X
    467  f1ea		       90 06		      BCC	CalculateOffsetCache
    468  f1ec		       e0 02		      CPX	#2	;MSB offset 0
    469  f1ee		       d0 02		      BNE	CalculateOffsetCache
    470  f1f0		       e6 bd		      INC	Traffic0Msb
    471  f1f2
    472  f1f2				   CalculateOffsetCache
    473  f1f2		       e8		      INX
    474  f1f3		       38		      SEC
    475  f1f4		       69 00		      ADC	#0	;Increment by one
    476  f1f6		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    477  f1f8
    478  f1f8				   PrepareNextUpdateLoop
    479  f1f8		       c8		      INY
    480  f1f9		       e8		      INX
    481  f1fa		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    482  f1fc		       d0 c1		      BNE	UpdateOffsets
    483  f1fe
    484  f1fe
    485  f1fe							;Until store the movemnt, LDX contains the value to be stored.
    486  f1fe				   TestCollision		;
    487  f1fe							; see if player0 colides with the rest
    488  f1fe		       a5 00		      LDA	CXM0P
    489  f200		       05 01		      ORA	CXM1P
    490  f202		       05 01		      ORA	CXM1P
    491  f204		       05 02		      ORA	CXP0FB
    492  f206		       05 07		      ORA	CXPPMM
    493  f208		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    494  f20a		       f0 23		      BEQ	NoCollision	;skip if not hitting...
    495  f20c		       a5 ba		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    496  f20e		       d0 1f		      BNE	NoCollision
    497  f210		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    498  f212		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    499  f214		       f0 19		      BEQ	NoCollision
    500  f216		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    501  f218		       f0 15		      BEQ	NoCollision
    502  f21a		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    503  f21c		       85 ba		      STA	CollisionCounter	;and store as colision.
    504  f21e		       a9 10		      LDA	#COLLISION_SPEED_L	;
    505  f220		       c5 8e		      CMP	Player0SpeedL
    506  f222		       b0 02		      BCS	SkipSetColisionSpeed
    507  f224		       85 8e		      STA	Player0SpeedL
    508  f226				   SkipSetColisionSpeed
    509  f226		       a9 00		      LDA	#0
    510  f228		       85 8f		      STA	Player0SpeedH
    511  f22a		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    512  f22c		       4c 6c f2 	      JMP	StoreHMove	; We keep position consistent
    513  f22f				   NoCollision
    514  f22f
    515  f22f				   DecrementCollision
    516  f22f		       a4 ba		      LDY	CollisionCounter
    517  f231		       f0 07		      BEQ	FinishDecrementCollision
    518  f233		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    519  f235		       85 04		      STA	NUSIZ0
    520  f237		       88		      DEY
    521  f238		       84 ba		      STY	CollisionCounter	; We save some cycles in reset size.
    522  f23a				   FinishDecrementCollision
    523  f23a
    524  f23a				   ResetPlayerSize
    525  f23a		       d0 04		      BNE	FinishResetPlayerSize
    526  f23c		       a9 30		      LDA	#%00110000
    527  f23e		       85 04		      STA	NUSIZ0	;
    528  f240				   FinishResetPlayerSize
    529  f240
    530  f240				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    531  f240		       c0 01		      CPY	#1	; Last frame before reset
    532  f242		       d0 05		      BNE	SkipResetPlayerPosition
    533  f244		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    534  f246		       4c 6c f2 	      JMP	StoreHMove
    535  f249				   SkipResetPlayerPosition
    536  f249
    537  f249							; for left and right, we're gonna 
    538  f249							; set the horizontal speed, and then do
    539  f249							; a single HMOVE.  We'll use X to hold the
    540  f249							; horizontal speed, then store it in the 
    541  f249							; appropriate register
    542  f249				   PrepareReadXAxis
    543  f249		       a2 00		      LDX	#0
    544  f24b		       a4 bb		      LDY	Player0X
    545  f24d				   BeginReadLeft
    546  f24d		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    547  f24f		       a9 40		      LDA	#%01000000	;Left
    548  f251		       2c 80 02 	      BIT	SWCHA
    549  f254		       d0 07		      BNE	SkipMoveLeft
    550  f256		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    551  f258		       c6 bb		      DEC	Player0X
    552  f25a		       4c 6c f2 	      JMP	StoreHMove	; Cannot move left and right...
    553  f25d				   SkipMoveLeft
    554  f25d				   BeginReadRight
    555  f25d		       c0 36		      CPY	#PLAYER_0_MAX_X
    556  f25f		       f0 0b		      BEQ	SkipMoveRight	; At max already
    557  f261		       a9 80		      LDA	#%10000000	;Right
    558  f263		       2c 80 02 	      BIT	SWCHA
    559  f266		       d0 04		      BNE	SkipMoveRight
    560  f268		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    561  f26a		       e6 bb		      INC	Player0X
    562  f26c				   SkipMoveRight
    563  f26c				   StoreHMove
    564  f26c		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    565  f26e		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    566  f270
    567  f270				   DividePlayerSpeedBy4
    568  f270		       a5 8f		      LDA	Player0SpeedH
    569  f272		       0a		      ASL
    570  f273		       0a		      ASL
    571  f274		       0a		      ASL
    572  f275		       0a		      ASL
    573  f276		       0a		      ASL
    574  f277		       0a		      ASL
    575  f278		       85 b1		      STA	Tmp1
    576  f27a		       a5 8e		      LDA	Player0SpeedL
    577  f27c		       4a		      LSR
    578  f27d		       4a		      LSR
    579  f27e		       29 3f		      AND	#%00111111
    580  f280		       05 b1		      ORA	Tmp1
    581  f282		       85 b0		      STA	Tmp0	; Division Result
    582  f284
    583  f284				   CalculateParallax1Offset		; 7/8 speed
    584  f284		       38		      SEC
    585  f285		       a5 8e		      LDA	Player0SpeedL
    586  f287		       e5 b0		      SBC	Tmp0
    587  f289		       85 b2		      STA	Tmp2
    588  f28b		       a5 8f		      LDA	Player0SpeedH
    589  f28d		       e9 00		      SBC	#0
    590  f28f		       85 b3		      STA	Tmp3
    591  f291
    592  f291		       18		      CLC
    593  f292		       a5 c6		      LDA	ParallaxOffset1
    594  f294		       65 b2		      ADC	Tmp2
    595  f296		       85 c6		      STA	ParallaxOffset1
    596  f298		       a5 c7		      LDA	ParallaxOffset1 + 1
    597  f29a		       65 b3		      ADC	Tmp3
    598  f29c		       85 c7		      STA	ParallaxOffset1 + 1
    599  f29e
    600  f29e				   CalculateParallax2Offset		; 6/8 speed
    601  f29e		       38		      SEC
    602  f29f		       a5 b2		      LDA	Tmp2
    603  f2a1		       e5 b0		      SBC	Tmp0
    604  f2a3		       85 b2		      STA	Tmp2
    605  f2a5		       a5 b3		      LDA	Tmp3
    606  f2a7		       e9 00		      SBC	#0
    607  f2a9		       85 b3		      STA	Tmp3
    608  f2ab
    609  f2ab		       18		      CLC
    610  f2ac		       a5 c8		      LDA	ParallaxOffset2
    611  f2ae		       65 b2		      ADC	Tmp2
    612  f2b0		       85 c8		      STA	ParallaxOffset2
    613  f2b2		       a5 c9		      LDA	ParallaxOffset2 + 1
    614  f2b4		       65 b3		      ADC	Tmp3
    615  f2b6		       85 c9		      STA	ParallaxOffset2 + 1
    616  f2b8
    617  f2b8
    618  f2b8
    619  f2b8				   SkipUpdateLogic		; Continue here if not paused
    620  f2b8
    621  f2b8				   PrepareParallax		;Can be optimized (probably)
    622  f2b8		       a0 07		      LDY	#PARALLAX_SIZE - 1
    623  f2ba				   ParallaxLoop
    624  f2ba				   CalculateParallax0
    625  f2ba		       98		      TYA
    626  f2bb		       18		      CLC
    627  f2bc		       65 91		      ADC	TrafficOffset0 + 1
    628  f2be		       29 04		      AND	#%00000100
    629  f2c0		       f0 08		      BEQ	HasEmptySpace0
    630  f2c2				   HasBorder0
    631  f2c2		       b9 d8 00 	      LDA	ParallaxCache,Y
    632  f2c5		       09 0f		      ORA	#%00001111
    633  f2c7		       4c cf f2 	      JMP	StoreParallax0
    634  f2ca				   HasEmptySpace0
    635  f2ca		       b9 d8 00 	      LDA	ParallaxCache,Y
    636  f2cd		       29 f0		      AND	#%11110000
    637  f2cf
    638  f2cf				   StoreParallax0
    639  f2cf		       99 d8 00 	      STA	ParallaxCache,Y
    640  f2d2
    641  f2d2				   CalculateParallax1
    642  f2d2		       98		      TYA
    643  f2d3		       18		      CLC
    644  f2d4		       65 c7		      ADC	ParallaxOffset1 + 1
    645  f2d6		       29 04		      AND	#%00000100
    646  f2d8		       f0 08		      BEQ	HasEmptySpace1
    647  f2da				   HasBorder1
    648  f2da		       b9 d8 00 	      LDA	ParallaxCache,Y
    649  f2dd		       09 e0		      ORA	#%11100000
    650  f2df		       4c e7 f2 	      JMP	StoreParallax1
    651  f2e2				   HasEmptySpace1
    652  f2e2		       b9 d8 00 	      LDA	ParallaxCache,Y
    653  f2e5		       29 1f		      AND	#%00011111
    654  f2e7
    655  f2e7				   StoreParallax1
    656  f2e7		       99 d8 00 	      STA	ParallaxCache,Y
    657  f2ea
    658  f2ea				   CalculateParallax2
    659  f2ea		       98		      TYA
    660  f2eb		       18		      CLC
    661  f2ec		       65 c9		      ADC	ParallaxOffset2 + 1
    662  f2ee		       29 04		      AND	#%00000100
    663  f2f0		       f0 05		      BEQ	HasEmptySpace2
    664  f2f2				   HasBorder2
    665  f2f2		       a9 60		      LDA	#%01100000
    666  f2f4		       4c f9 f2 	      JMP	StoreParallax2
    667  f2f7				   HasEmptySpace2
    668  f2f7		       a9 00		      LDA	#0
    669  f2f9
    670  f2f9				   StoreParallax2
    671  f2f9		       99 f0 00 	      STA	ParallaxCache2,Y
    672  f2fc
    673  f2fc				   ContinueParallaxLoop
    674  f2fc		       88		      DEY
    675  f2fd		       10 bb		      BPL	ParallaxLoop
    676  f2ff
    677  f2ff				   ScoreBackgroundColor
    678  f2ff		       a2 00		      LDX	#0
    679  f301		       ad 82 02 	      LDA	SWCHB
    680  f304		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    681  f306		       f0 04		      BEQ	BlackAndWhiteScoreBg
    682  f308		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    683  f30a		       a2 03		      LDX	#BACKGROUND_COLOR
    684  f30c				   BlackAndWhiteScoreBg
    685  f30c		       85 b2		      STA	Tmp2	; Score Background
    686  f30e		       86 b3		      STX	Tmp3	; Traffic Background
    687  f310
    688  f310				   ConfigurePFForScore
    689  f310							;LDA #SCORE_BACKGROUND_COLOR; Done above
    690  f310		       85 09		      STA	COLUBK
    691  f312		       a5 d5		      LDA	ScoreFontColor
    692  f314		       85 08		      STA	COLUPF
    693  f316		       20 46 f6 	      JSR	ClearAll
    694  f319		       a9 02		      LDA	#%00000010	; Score mode
    695  f31b		       85 0a		      STA	CTRLPF
    696  f31d		       a0 04		      LDY	#FONT_OFFSET
    697  f31f		       a2 00		      LDX	#0
    698  f321		       a5 8c		      LDA	FrameCount0	;3
    699  f323		       29 01		      AND	#%00000001	;2
    700  f325		       f0 0f		      BEQ	RightScoreOn	; Half of the screen with the correct colors.
    701  f327				   LeftScoreOn
    702  f327		       a5 d5		      LDA	ScoreFontColor
    703  f329		       85 07		      STA	COLUP1
    704  f32b		       a5 b2		      LDA	Tmp2
    705  f32d		       85 06		      STA	COLUP0
    706  f32f		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    707  f331		       85 b1		      STA	Tmp1
    708  f333		       4c 42 f3 	      JMP	WaitForVblankEnd
    709  f336				   RightScoreOn
    710  f336		       a5 d5		      LDA	ScoreFontColor
    711  f338		       85 06		      STA	COLUP0
    712  f33a		       a5 b2		      LDA	Tmp2
    713  f33c		       85 07		      STA	COLUP1
    714  f33e		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    715  f340		       85 b1		      STA	Tmp1
    716  f342
    717  f342
    718  f342							; After here we are going to update the screen, No more heavy code
    719  f342				   WaitForVblankEnd
    720  f342		       ad 84 02 	      LDA	INTIM
    721  f345		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    722  f347							;STA WSYNC ; Seems wastefull, can I live killing vblank midline?
    723  f347		       85 01		      STA	VBLANK
    724  f349
    725  f349				   ScoreLoop		; Runs in 2 lines, this is the best I can do!
    726  f349		       85 02		      STA	WSYNC
    727  f34b
    728  f34b		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
    729  f34d		       85 0d		      STA	PF0	;3
    730  f34f
    731  f34f		       a5 82		      LDA	PF1Cache	;3
    732  f351		       85 0e		      STA	PF1	;3
    733  f353
    734  f353		       a5 83		      LDA	PF2Cache	;3
    735  f355		       85 0f		      STA	PF2	;3
    736  f357
    737  f357							;39
    738  f357				   DrawScore
    739  f357		       a6 d0		      LDX	ScoreD0	; 4
    740  f359		       bd 00 fd 	      LDA	Font,X	;4
    741  f35c		       85 81		      STA	PF0Cache	;3
    742  f35e		       c6 d0		      DEC	ScoreD0	;6 Can only DEC with X
    743  f360							;17
    744  f360
    745  f360		       a6 d1		      LDX	ScoreD1	; 4
    746  f362		       bd 00 fd 	      LDA	Font,X	;4
    747  f365		       0a		      ASL		;2
    748  f366		       0a		      ASL		;2
    749  f367		       0a		      ASL		;2
    750  f368		       0a		      ASL		;2
    751  f369		       85 82		      STA	PF1Cache	;3
    752  f36b		       c6 d1		      DEC	ScoreD1	;6
    753  f36d							;9 (After Wsync)
    754  f36d
    755  f36d		       a6 d2		      LDX	ScoreD2	; 4
    756  f36f		       bd 00 fd 	      LDA	Font,X	;4
    757  f372		       29 0f		      AND	#%00001111
    758  f374		       05 82		      ORA	PF1Cache	;3
    759  f376		       85 82		      STA	PF1Cache	;3
    760  f378		       c6 d2		      DEC	ScoreD2	;6
    761  f37a							;20
    762  f37a
    763  f37a		       a6 d3		      LDX	ScoreD3	; 3
    764  f37c		       bd 00 fd 	      LDA	Font,X	;4
    765  f37f		       4a		      LSR		;2
    766  f380		       4a		      LSR		;2
    767  f381		       4a		      LSR		;2
    768  f382		       4a		      LSR		;2
    769  f383		       85 83		      STA	PF2Cache	;3
    770  f385		       c6 d3		      DEC	ScoreD3	;5
    771  f387							;23
    772  f387
    773  f387		       a6 d4		      LDX	ScoreD4	; 3
    774  f389		       bd 00 fd 	      LDA	Font,X	;4
    775  f38c		       29 f0		      AND	#%11110000
    776  f38e		       05 83		      ORA	PF2Cache	;3
    777  f390		       85 83		      STA	PF2Cache	;3
    778  f392		       c6 d4		      DEC	ScoreD4	;5
    779  f394							;18
    780  f394
    781  f394		       88		      DEY		;2
    782  f395		       10 b2		      BPL	ScoreLoop	;4
    783  f397
    784  f397		       85 02		      STA	WSYNC
    785  f399
    786  f399		       20 67 f6 	      JSR	LoadAll
    787  f39c
    788  f39c		       85 02		      STA	WSYNC
    789  f39e		       85 02		      STA	WSYNC
    790  f3a0
    791  f3a0				   PrepareForTraffic
    792  f3a0		       20 58 f6 	      JSR	ClearPF	; 32
    793  f3a3
    794  f3a3		       a9 31		      LDA	#%00110001	; Score mode
    795  f3a5		       85 0a		      STA	CTRLPF
    796  f3a7
    797  f3a7		       a5 c3		      LDA	TrafficColor	;2
    798  f3a9		       85 08		      STA	COLUPF
    799  f3ab
    800  f3ab		       a9 96		      LDA	#PLAYER1_COLOR	;2
    801  f3ad		       85 07		      STA	COLUP1	;3
    802  f3af
    803  f3af		       a5 d5		      LDA	ScoreFontColor	;3
    804  f3b1		       85 06		      STA	COLUP0	;3
    805  f3b3
    806  f3b3		       a4 3a		      LDY	GAMEPLAY_AREA	;2; (Score)
    807  f3b5
    808  f3b5		       a5 b3		      LDA	Tmp3	;3
    809  f3b7
    810  f3b7		       85 02		      STA	WSYNC
    811  f3b9							;What a wast of cycles, I must place some computation that fits here!
    812  f3b9		       20 0c f7 	      JSR	Sleep16
    813  f3bc		       20 0c f7 	      JSR	Sleep16
    814  f3bf		       20 0c f7 	      JSR	Sleep16
    815  f3c2		       20 0c f7 	      JSR	Sleep16
      0  f3c5					      SLEEP	6	; Make it in the very end, so we have one more nice blue line
      1  f3c5				   .CYCLES    SET	6
      2  f3c5
      3  f3c5				  -	      IF	.CYCLES < 2
      4  f3c5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3c5				  -	      ERR
      6  f3c5					      ENDIF
      7  f3c5
      8  f3c5				  -	      IF	.CYCLES & 1
      9  f3c5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3c5				  -	      nop	0
     11  f3c5				  -	      ELSE
     12  f3c5				  -	      bit	VSYNC
     13  f3c5				  -	      ENDIF
     14  f3c5				  -.CYCLES    SET	.CYCLES - 3
     15  f3c5					      ENDIF
     16  f3c5
     17  f3c5					      REPEAT	.CYCLES / 2
     18  f3c5		       ea		      nop
     17  f3c5					      REPEND
     18  f3c6		       ea		      nop
     17  f3c6					      REPEND
     18  f3c7		       ea		      nop
     19  f3c8					      REPEND
    817  f3c8		       85 09		      STA	COLUBK	;3
    818  f3ca
    819  f3ca							;main scanline loop...
    820  f3ca				   ScanLoop
    821  f3ca		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    822  f3cc
    823  f3cc							;Start of next line!			
    824  f3cc				   DrawCache		;57 Is the last line going to the top of the next frame?
    825  f3cc
    826  f3cc		       a5 81		      LDA	PF0Cache	;3
    827  f3ce		       85 0d		      STA	PF0	;3
    828  f3d0
    829  f3d0		       b9 28 ff 	      LDA	CarSprite,Y	;4 ;Very fast, in the expense of rom space
    830  f3d3		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    831  f3d5
    832  f3d5		       a5 82		      LDA	PF1Cache	;3
    833  f3d7		       85 0e		      STA	PF1	;3
    834  f3d9
    835  f3d9		       a5 84		      LDA	GRP1Cache	;3
    836  f3db		       85 1c		      STA	GRP1	;3
    837  f3dd
    838  f3dd		       a5 85		      LDA	ENABLCache	;3
    839  f3df		       85 1f		      STA	ENABL	;3
    840  f3e1
    841  f3e1		       a5 86		      LDA	ENAM0Cache	;3
    842  f3e3		       85 1d		      STA	ENAM0	;3
    843  f3e5
    844  f3e5		       a5 87		      LDA	ENAM1Cache	;3
    845  f3e7		       85 1e		      STA	ENAM1	;3
    846  f3e9
    847  f3e9		       a9 00		      LDA	#0	;2
    848  f3eb							;STA PF1Cache ;3
    849  f3eb		       85 84		      STA	GRP1Cache	;3
    850  f3ed		       85 85		      STA	ENABLCache	;3
    851  f3ef		       85 86		      STA	ENAM0Cache	;3
    852  f3f1		       85 87		      STA	ENAM1Cache	; 3
    853  f3f3
    854  f3f3							;BEQ DrawTraffic3
    855  f3f3				   DrawTraffic1 		; 33
    856  f3f3		       98		      TYA		; 2
    857  f3f4		       18		      CLC		; 2 
    858  f3f5		       65 95		      ADC	TrafficOffset1 + 1	;3
    859  f3f7		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    860  f3f9		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    861  f3fb		       45 96		      EOR	TrafficOffset1 + 2	; 3
    862  f3fd		       4c 02 f4 	      JMP	AfterEorOffsetWithCarry	; 3
    863  f400				   EorOffsetWithCarry
    864  f400		       45 97		      EOR	TrafficOffset1 + 3	; 3
    865  f402				   AfterEorOffsetWithCarry		;17
    866  f402		       aa		      TAX		;2
    867  f403		       bd 00 fe 	      LDA	AesTable,X	; 4
    868  f406		       c5 c1		      CMP	TrafficChance	;3
    869  f408		       b0 04		      BCS	FinishDrawTraffic1	; 2
    870  f40a		       a9 ff		      LDA	#$FF	;2
    871  f40c		       85 84		      STA	GRP1Cache	;3
    872  f40e				   FinishDrawTraffic1
    873  f40e
    874  f40e				   DrawTraffic2 		; 33
    875  f40e		       98		      TYA		; 2
    876  f40f		       18		      CLC		; 2 
    877  f410		       65 99		      ADC	TrafficOffset2 + 1	;3
    878  f412		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    879  f414		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    880  f416		       45 9a		      EOR	TrafficOffset2 + 2	; 3
    881  f418		       4c 1d f4 	      JMP	AfterEorOffsetWithCarry2	; 3
    882  f41b				   EorOffsetWithCarry2
    883  f41b		       45 9b		      EOR	TrafficOffset2 + 3	; 3
    884  f41d				   AfterEorOffsetWithCarry2		;17
    885  f41d		       aa		      TAX		;2
    886  f41e		       bd 00 fe 	      LDA	AesTable,X	; 4
    887  f421		       c5 c1		      CMP	TrafficChance	;3
    888  f423		       b0 04		      BCS	FinishDrawTraffic2	; 2
    889  f425		       a9 02		      LDA	#%00000010	;2
    890  f427		       85 85		      STA	ENABLCache	;3
    891  f429				   FinishDrawTraffic2
    892  f429
    893  f429							;STA WSYNC ;65 / 137
    894  f429
    895  f429							; LDA Tmp0 ; Flicker this line if drawing car
    896  f429							; BEQ FinishDrawTraffic4
    897  f429				   DrawTraffic3 		; 33
    898  f429		       98		      TYA		; 2
    899  f42a		       18		      CLC		; 2 
    900  f42b		       65 9d		      ADC	TrafficOffset3 + 1	;3
    901  f42d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    902  f42f		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    903  f431		       45 9e		      EOR	TrafficOffset3 + 2	; 3
    904  f433		       4c 38 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
    905  f436				   EorOffsetWithCarry3
    906  f436		       45 9f		      EOR	TrafficOffset3 + 3	; 3
    907  f438				   AfterEorOffsetWithCarry3		;17
    908  f438		       aa		      TAX		;2
    909  f439		       bd 00 fe 	      LDA	AesTable,X	; 4
    910  f43c		       c5 c1		      CMP	TrafficChance	;3
    911  f43e		       b0 04		      BCS	FinishDrawTraffic3	; 2 
    912  f440		       a9 02		      LDA	#%00000010	;2
    913  f442		       85 86		      STA	ENAM0Cache
    914  f444				   FinishDrawTraffic3
    915  f444
    916  f444				   DrawTraffic4 		; 33
    917  f444		       98		      TYA		; 2
    918  f445		       18		      CLC		; 2 
    919  f446		       65 a1		      ADC	TrafficOffset4 + 1	;3
    920  f448		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    921  f44a		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
    922  f44c		       45 a2		      EOR	TrafficOffset4 + 2	; 3
    923  f44e		       4c 53 f4 	      JMP	AfterEorOffsetWithCarry4	; 3
    924  f451				   EorOffsetWithCarry4
    925  f451		       45 a3		      EOR	TrafficOffset4 + 3	; 3
    926  f453				   AfterEorOffsetWithCarry4		;17
    927  f453		       aa		      TAX		;2
    928  f454		       bd 00 fe 	      LDA	AesTable,X	; 4
    929  f457		       c5 c1		      CMP	TrafficChance	;3
    930  f459		       b0 04		      BCS	FinishDrawTraffic4	; 2
    931  f45b		       a9 02		      LDA	#%00000010	;2
    932  f45d		       85 87		      STA	ENAM1Cache	;3
    933  f45f				   FinishDrawTraffic4
    934  f45f
    935  f45f				   DrawTraffic0 		; 15
    936  f45f							; TYA ;2
    937  f45f							; CLC ;2
    938  f45f							; ADC TrafficOffset0 + 1 ; 3
    939  f45f							; AND #%00000100 ;2 Every 4 game lines, draw the border
    940  f45f							; BEQ SkipDrawTraffic0; 2
    941  f45f							; LDA #%11011011; 2
    942  f45f							; STA PF1Cache ;3
    943  f45f		       98		      TYA		;2
    944  f460		       29 07		      AND	#%00000111	;2
    945  f462		       aa		      TAX		;2
    946  f463		       b5 d8		      LDA	ParallaxCache,X	;4
    947  f465		       85 82		      STA	PF1Cache	;3
    948  f467		       b5 f0		      LDA	ParallaxCache2,X	;4
    949  f469		       85 81		      STA	PF0Cache	;3
    950  f46b
    951  f46b				   SkipDrawTraffic0
    952  f46b
    953  f46b				   WhileScanLoop
    954  f46b		       88		      DEY		;2
    955  f46c		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
    956  f46e		       4c ca f3 	      JMP	ScanLoop	;3
    957  f471				   FinishScanLoop		; 7 209 of 222
    958  f471
    959  f471		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
    960  f473		       20 67 f6 	      JSR	LoadAll
    961  f476		       85 02		      STA	WSYNC	; do stuff!
    962  f478		       85 02		      STA	WSYNC
    963  f47a		       85 02		      STA	WSYNC
    964  f47c							;42 cycles to use here
    965  f47c
    966  f47c				   PrepareOverscan
    967  f47c		       a9 02		      LDA	#2
    968  f47e		       85 02		      STA	WSYNC
    969  f480		       85 01		      STA	VBLANK
    970  f482
    971  f482		       a9 22		      LDA	#34	; 2 more lines before overscan (was 37)...
    972  f484		       8d 96 02 	      STA	TIM64T
    973  f487
    974  f487				   ProcessScoreFontColor
    975  f487		       a6 d6		      LDX	ScoreFontColorHoldChange
    976  f489		       f0 06		      BEQ	ResetScoreFontColor
    977  f48b		       ca		      DEX
    978  f48c		       86 d6		      STX	ScoreFontColorHoldChange
    979  f48e		       4c 95 f4 	      JMP	SkipScoreFontColor
    980  f491				   ResetScoreFontColor
    981  f491		       a9 f9		      LDA	#SCORE_FONT_COLOR
    982  f493		       85 d5		      STA	ScoreFontColor
    983  f495				   SkipScoreFontColor
    984  f495
    985  f495				   IsGameOver
    986  f495		       a5 bc		      LDA	CountdownTimer
    987  f497		       05 8e		      ORA	Player0SpeedL
    988  f499		       05 8f		      ORA	Player0SpeedH
    989  f49b		       d0 0b		      BNE	IsCheckpoint
    990  f49d		       a9 01		      LDA	#1
    991  f49f		       85 d6		      STA	ScoreFontColorHoldChange
    992  f4a1		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    993  f4a3		       85 d5		      STA	ScoreFontColor
    994  f4a5		       4c da f4 	      JMP	SkipIsTimeOver
    995  f4a8
    996  f4a8				   IsCheckpoint
    997  f4a8		       a5 d7		      LDA	NextCheckpoint
    998  f4aa		       c5 92		      CMP	TrafficOffset0 + 2
    999  f4ac		       d0 20		      BNE	SkipIsCheckpoint
   1000  f4ae		       18		      CLC
   1001  f4af		       69 10		      ADC	#CHECKPOINT_INTERVAL
   1002  f4b1		       85 d7		      STA	NextCheckpoint
   1003  f4b3		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1004  f4b5		       85 d5		      STA	ScoreFontColor
   1005  f4b7		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1006  f4b9		       85 d6		      STA	ScoreFontColorHoldChange
   1007  f4bb		       a5 bc		      LDA	CountdownTimer
   1008  f4bd		       18		      CLC
   1009  f4be		       65 c2		      ADC	CheckpointTime
   1010  f4c0		       85 bc		      STA	CountdownTimer
   1011  f4c2		       90 04		      BCC	JumpSkipTimeOver
   1012  f4c4		       a9 ff		      LDA	#$FF
   1013  f4c6		       85 bc		      STA	CountdownTimer	; Does not overflow!
   1014  f4c8				   JumpSkipTimeOver
   1015  f4c8		       20 84 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   1016  f4cb		       4c da f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   1017  f4ce				   SkipIsCheckpoint
   1018  f4ce
   1019  f4ce				   IsTimeOver
   1020  f4ce		       a5 bc		      LDA	CountdownTimer
   1021  f4d0		       d0 08		      BNE	SkipIsTimeOver
   1022  f4d2		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   1023  f4d4		       85 d6		      STA	ScoreFontColorHoldChange
   1024  f4d6		       a9 33		      LDA	#SCORE_FONT_COLOR_BAD
   1025  f4d8		       85 d5		      STA	ScoreFontColor
   1026  f4da				   SkipIsTimeOver
   1027  f4da
   1028  f4da							;Could be done during on vblank to save this comparisson time (before draw score), 
   1029  f4da							;but I am saving vblank cycles for now, in case of 2 players.
   1030  f4da				   ChooseSide		; 
   1031  f4da		       a5 8c		      LDA	FrameCount0	;3
   1032  f4dc		       29 01		      AND	#%00000001	;2
   1033  f4de		       f0 72		      BEQ	RightScoreWrite	; Half of the screen with the correct colors.
   1034  f4e0
   1035  f4e0				   LeftScoreWrite
   1036  f4e0		       a5 d5		      LDA	ScoreFontColor
   1037  f4e2		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1038  f4e4		       f0 3f		      BEQ	PrintCheckpoint
   1039  f4e6		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1040  f4e8		       f0 43		      BEQ	PrintStartGame
   1041  f4ea		       a5 c0		      LDA	GameStatus
   1042  f4ec		       f0 47		      BEQ	PrintHellwayLeft
   1043  f4ee				   WriteDistance		;Not optimized yet, ugly code.
   1044  f4ee				   Digit0Distance
   1045  f4ee		       a5 91		      LDA	TrafficOffset0 + 1	;3
   1046  f4f0		       29 f0		      AND	#%11110000	;2
   1047  f4f2		       4a		      LSR		; 2
   1048  f4f3		       4a		      LSR		; 2
   1049  f4f4		       4a		      LSR		; 2
   1050  f4f5		       4a		      LSR		; 2
   1051  f4f6		       aa		      TAX		; 2
   1052  f4f7		       bd a0 fd 	      LDA	FontLookup,X	;4
   1053  f4fa		       85 d3		      STA	ScoreD3	;3
   1054  f4fc
   1055  f4fc				   Digit1Distance
   1056  f4fc		       a5 92		      LDA	TrafficOffset0 + 2	;3
   1057  f4fe		       29 0f		      AND	#%00001111	;2
   1058  f500		       aa		      TAX		; 2
   1059  f501		       bd a0 fd 	      LDA	FontLookup,X	;4 
   1060  f504		       85 d2		      STA	ScoreD2	;3
   1061  f506
   1062  f506				   Digit2Distance
   1063  f506		       a5 92		      LDA	TrafficOffset0 + 2	;3
   1064  f508		       29 f0		      AND	#%11110000	;2
   1065  f50a		       4a		      LSR		; 2
   1066  f50b		       4a		      LSR		; 2
   1067  f50c		       4a		      LSR		; 2
   1068  f50d		       4a		      LSR		; 2
   1069  f50e		       aa		      TAX		; 2
   1070  f50f		       bd a0 fd 	      LDA	FontLookup,X	;4
   1071  f512		       85 d1		      STA	ScoreD1	;3
   1072  f514
   1073  f514				   Digit3Distance
   1074  f514		       a5 bd		      LDA	Traffic0Msb	;3
   1075  f516		       29 0f		      AND	#%00001111	;2
   1076  f518		       aa		      TAX		; 2
   1077  f519		       bd a0 fd 	      LDA	FontLookup,X	;4 
   1078  f51c		       85 d0		      STA	ScoreD0	;3
   1079  f51e
   1080  f51e		       a9 90		      LDA	#<Pipe + #FONT_OFFSET	;3
   1081  f520		       85 d4		      STA	ScoreD4	;3
   1082  f522				   EndDrawDistance
   1083  f522		       4c be f5 	      JMP	RightScoreWriteEnd	;3
   1084  f525
   1085  f525				   PrintCheckpoint
   1086  f525		       a2 00		      LDX	#<CheckpointText
   1087  f527		       20 ee f6 	      JSR	PrintStaticText
   1088  f52a		       4c be f5 	      JMP	RightScoreWriteEnd	;3
   1089  f52d				   PrintStartGame
   1090  f52d		       a2 23		      LDX	#<GoText
   1091  f52f		       20 ee f6 	      JSR	PrintStaticText
   1092  f532		       4c be f5 	      JMP	RightScoreWriteEnd	;3
   1093  f535
   1094  f535				   PrintHellwayLeft
   1095  f535		       a5 8d		      LDA	FrameCount1
   1096  f537		       29 01		      AND	#1
   1097  f539		       d0 05		      BNE	PrintCreditsLeft
   1098  f53b		       a2 05		      LDX	#<HellwayLeftText
   1099  f53d		       4c 42 f5 	      JMP	PrintGameMode
   1100  f540				   PrintCreditsLeft
   1101  f540		       a2 0f		      LDX	#<OpbText
   1102  f542
   1103  f542				   PrintGameMode
   1104  f542		       20 ee f6 	      JSR	PrintStaticText
   1105  f545		       a5 c5		      LDA	GameMode
   1106  f547		       29 0f		      AND	#%00001111
   1107  f549		       aa		      TAX		; 2
   1108  f54a		       bd a0 fd 	      LDA	FontLookup,X	;4 
   1109  f54d		       85 d0		      STA	ScoreD0	;3
   1110  f54f		       4c be f5 	      JMP	RightScoreWriteEnd	;3
   1111  f552
   1112  f552				   RightScoreWrite
   1113  f552		       a5 c0		      LDA	GameStatus
   1114  f554		       f0 47		      BEQ	PrintHellwayRight
   1115  f556		       a5 d5		      LDA	ScoreFontColor
   1116  f558		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1117  f55a		       f0 54		      BEQ	PrintGameOver
   1118  f55c				   Digit0Timer
   1119  f55c		       a5 bc		      LDA	CountdownTimer	;3
   1120  f55e		       29 0f		      AND	#%00001111	;2
   1121  f560		       aa		      TAX		; 2
   1122  f561		       bd a0 fd 	      LDA	FontLookup,X	;4 
   1123  f564		       85 d1		      STA	ScoreD1	;3
   1124  f566
   1125  f566				   Digit1Timer
   1126  f566		       a5 bc		      LDA	CountdownTimer	;3
   1127  f568		       29 f0		      AND	#%11110000	;2
   1128  f56a		       4a		      LSR		; 2
   1129  f56b		       4a		      LSR		; 2
   1130  f56c		       4a		      LSR		; 2
   1131  f56d		       4a		      LSR		; 2
   1132  f56e		       aa		      TAX		; 2
   1133  f56f		       bd a0 fd 	      LDA	FontLookup,X	;4
   1134  f572		       85 d0		      STA	ScoreD0	;3
   1135  f574
   1136  f574		       a9 90		      LDA	#<Pipe + #FONT_OFFSET	;3
   1137  f576		       85 d2		      STA	ScoreD2	;3
   1138  f578
   1139  f578				   Digit0Speed
   1140  f578		       a5 8e		      LDA	Player0SpeedL
   1141  f57a		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1142  f57c		       4a		      LSR		; 2
   1143  f57d		       4a		      LSR		; 2
   1144  f57e		       aa		      TAX		; 2
   1145  f57f		       bd a0 fd 	      LDA	FontLookup,X	;4
   1146  f582		       85 d4		      STA	ScoreD4	;3
   1147  f584
   1148  f584				   Digit1Speed
   1149  f584		       a5 8e		      LDA	Player0SpeedL
   1150  f586		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1151  f588		       18		      CLC
   1152  f589		       2a		      ROL		;First goes into carry
   1153  f58a		       2a		      ROL
   1154  f58b		       2a		      ROL
   1155  f58c		       85 b0		      STA	Tmp0
   1156  f58e		       a5 8f		      LDA	Player0SpeedH
   1157  f590		       0a		      ASL
   1158  f591		       0a		      ASL
   1159  f592		       05 b0		      ORA	Tmp0
   1160  f594		       aa		      TAX		; 2
   1161  f595		       bd a0 fd 	      LDA	FontLookup,X	;4
   1162  f598		       85 d3		      STA	ScoreD3	;3
   1163  f59a		       4c be f5 	      JMP	RightScoreWriteEnd
   1164  f59d
   1165  f59d				   PrintHellwayRight
   1166  f59d		       a5 8d		      LDA	FrameCount1
   1167  f59f		       29 01		      AND	#1
   1168  f5a1		       d0 05		      BNE	PrintCreditsRight
   1169  f5a3		       a2 0a		      LDX	#<HellwayRightText
   1170  f5a5		       4c aa f5 	      JMP	PrintRightIntro
   1171  f5a8				   PrintCreditsRight
   1172  f5a8		       a2 14		      LDX	#<YearText
   1173  f5aa				   PrintRightIntro
   1174  f5aa		       20 ee f6 	      JSR	PrintStaticText
   1175  f5ad		       4c be f5 	      JMP	RightScoreWriteEnd
   1176  f5b0				   PrintGameOver
   1177  f5b0		       a5 8c		      LDA	FrameCount0
   1178  f5b2		       30 05		      BMI	PrintOverText
   1179  f5b4		       a2 19		      LDX	#<GameText
   1180  f5b6		       4c bb f5 	      JMP	StoreGameOverText
   1181  f5b9				   PrintOverText
   1182  f5b9		       a2 1e		      LDX	#<OverText
   1183  f5bb				   StoreGameOverText
   1184  f5bb		       20 ee f6 	      JSR	PrintStaticText
   1185  f5be				   RightScoreWriteEnd
   1186  f5be
   1187  f5be				   LeftSound
   1188  f5be		       a5 bc		      LDA	CountdownTimer
   1189  f5c0		       f0 24		      BEQ	EngineOff
   1190  f5c2		       a5 8e		      LDA	Player0SpeedL
   1191  f5c4		       29 80		      AND	#%10000000
   1192  f5c6		       05 8f		      ORA	Player0SpeedH
   1193  f5c8		       18		      CLC
   1194  f5c9		       2a		      ROL
   1195  f5ca		       69 00		      ADC	#0	; Places the possible carry produced by ROL
   1196  f5cc		       aa		      TAX
   1197  f5cd		       a5 8e		      LDA	Player0SpeedL
   1198  f5cf		       4a		      LSR
   1199  f5d0		       4a		      LSR
   1200  f5d1		       4a		      LSR
   1201  f5d2		       29 0f		      AND	#%00001111
   1202  f5d4		       85 b0		      STA	Tmp0
   1203  f5d6		       bd b6 fd 	      LDA	EngineBaseFrequence,X	; Max of 5 bits
   1204  f5d9		       38		      SEC
   1205  f5da		       e5 b0		      SBC	Tmp0
   1206  f5dc		       85 17		      STA	AUDF0
   1207  f5de		       bd b0 fd 	      LDA	EngineSoundType,X
   1208  f5e1		       85 15		      STA	AUDC0
   1209  f5e3		       4c ea f5 	      JMP	EndLeftSound
   1210  f5e6				   EngineOff
   1211  f5e6		       a9 00		      LDA	#0
   1212  f5e8		       85 15		      STA	AUDC0
   1213  f5ea
   1214  f5ea				   EndLeftSound
   1215  f5ea
   1216  f5ea
   1217  f5ea				   RightSound		; More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1218  f5ea		       a5 d5		      LDA	ScoreFontColor
   1219  f5ec		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1220  f5ee		       f0 4a		      BEQ	MuteRightSound	; A little bit of silence, since you will be run over all the time
   1221  f5f0		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1222  f5f2		       f0 21		      BEQ	PlayCheckpoint
   1223  f5f4		       a5 ba		      LDA	CollisionCounter
   1224  f5f6		       c9 e0		      CMP	#$E0
   1225  f5f8		       b0 0c		      BCS	PlayColision
   1226  f5fa		       a5 d7		      LDA	NextCheckpoint
   1227  f5fc		       38		      SEC
   1228  f5fd		       e5 92		      SBC	TrafficOffset0 + 2
   1229  f5ff		       c9 02		      CMP	#$02
   1230  f601		       90 24		      BCC	PlayBeforeCheckpoint
   1231  f603		       4c 3a f6 	      JMP	MuteRightSound
   1232  f606				   PlayColision
   1233  f606		       a9 1f		      LDA	#31
   1234  f608		       85 18		      STA	AUDF1
   1235  f60a		       a9 08		      LDA	#8
   1236  f60c		       85 16		      STA	AUDC1
   1237  f60e		       a9 08		      LDA	#8
   1238  f610		       85 1a		      STA	AUDV1
   1239  f612		       4c 3e f6 	      JMP	EndRightSound
   1240  f615
   1241  f615				   PlayCheckpoint
   1242  f615		       a5 d6		      LDA	ScoreFontColorHoldChange
   1243  f617		       4a		      LSR
   1244  f618		       4a		      LSR
   1245  f619		       4a		      LSR
   1246  f61a		       85 18		      STA	AUDF1
   1247  f61c		       a9 0c		      LDA	#12
   1248  f61e		       85 16		      STA	AUDC1
   1249  f620		       a9 06		      LDA	#6
   1250  f622		       85 1a		      STA	AUDV1
   1251  f624		       4c 3e f6 	      JMP	EndRightSound
   1252  f627
   1253  f627				   PlayBeforeCheckpoint
   1254  f627		       a5 8c		      LDA	FrameCount0
   1255  f629		       29 1c		      AND	#%00011100
   1256  f62b		       09 03		      ORA	#%00000011
   1257  f62d		       85 18		      STA	AUDF1
   1258  f62f		       a9 0c		      LDA	#12
   1259  f631		       85 16		      STA	AUDC1
   1260  f633		       a9 03		      LDA	#3
   1261  f635		       85 1a		      STA	AUDV1
   1262  f637		       4c 3e f6 	      JMP	EndRightSound
   1263  f63a
   1264  f63a				   MuteRightSound
   1265  f63a		       a9 00		      LDA	#0
   1266  f63c		       85 1a		      STA	AUDV1
   1267  f63e
   1268  f63e				   EndRightSound
   1269  f63e
   1270  f63e				   OverScanWait
   1271  f63e		       ad 84 02 	      LDA	INTIM
   1272  f641		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1273  f643		       4c 7c f0 	      JMP	MainLoop
   1274  f646
   1275  f646				   Subroutines
   1276  f646
   1277  f646				   ClearAll		; 52
   1278  f646		       a9 00		      LDA	#0	;2
   1279  f648		       85 1c		      STA	GRP1	;3
   1280  f64a		       85 1f		      STA	ENABL	;3
   1281  f64c		       85 1d		      STA	ENAM0	;3
   1282  f64e		       85 1e		      STA	ENAM1	;3
   1283  f650		       85 84		      STA	GRP1Cache	;3
   1284  f652		       85 85		      STA	ENABLCache	;3
   1285  f654		       85 86		      STA	ENAM0Cache	;3
   1286  f656		       85 87		      STA	ENAM1Cache	;3
   1287  f658
   1288  f658				   ClearPF		; 26
   1289  f658		       a9 00		      LDA	#0	;2
   1290  f65a				   ClearPFSkipLDA0
   1291  f65a		       85 0d		      STA	PF0	;3
   1292  f65c		       85 0e		      STA	PF1	;3
   1293  f65e		       85 0f		      STA	PF2	;3	
   1294  f660		       85 81		      STA	PF0Cache	;3
   1295  f662		       85 82		      STA	PF1Cache	;3
   1296  f664		       85 83		      STA	PF2Cache	;3 
   1297  f666		       60		      RTS		;6
   1298  f667				   EndClearAll
   1299  f667
   1300  f667				   LoadAll		; 48
   1301  f667		       a5 81		      LDA	PF0Cache	;3
   1302  f669		       85 0d		      STA	PF0	;3
   1303  f66b
   1304  f66b		       a5 82		      LDA	PF1Cache	;3
   1305  f66d		       85 0e		      STA	PF1	;3
   1306  f66f
   1307  f66f		       a5 83		      LDA	PF2Cache	;3
   1308  f671		       85 0f		      STA	PF2	;3
   1309  f673
   1310  f673		       a5 84		      LDA	GRP1Cache	;3
   1311  f675		       85 1c		      STA	GRP1	;3
   1312  f677
   1313  f677		       a5 85		      LDA	ENABLCache	;3
   1314  f679		       85 1f		      STA	ENABL	;3
   1315  f67b
   1316  f67b		       a5 86		      LDA	ENAM0Cache	;3
   1317  f67d		       85 1d		      STA	ENAM0	;3
   1318  f67f
   1319  f67f		       a5 87		      LDA	ENAM1Cache	;3
   1320  f681		       85 1e		      STA	ENAM1	;3
   1321  f683
   1322  f683		       60		      RTS		;6
   1323  f684				   EndLoadAll
   1324  f684
   1325  f684				   NextDifficulty
   1326  f684		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1327  f686		       29 01		      AND	#%00000001
   1328  f688		       d0 3f		      BNE	CheckRandomDifficulty
   1329  f68a
   1330  f68a		       a5 c4		      LDA	CurrentDifficulty
   1331  f68c		       18		      CLC
   1332  f68d		       69 01		      ADC	#1
   1333  f68f		       29 03		      AND	#%00000011	; 0 to 3
   1334  f691		       85 c4		      STA	CurrentDifficulty
   1335  f693
   1336  f693				   ConfigureDifficulty
   1337  f693		       a5 c4		      LDA	CurrentDifficulty
   1338  f695		       f0 0b		      BEQ	ConfigureLightTraffic
   1339  f697		       c9 01		      CMP	#1
   1340  f699		       f0 10		      BEQ	ConfigureRegularTraffic
   1341  f69b		       c9 02		      CMP	#2
   1342  f69d		       f0 15		      BEQ	ConfigureIntenseTraffic
   1343  f69f		       4c bd f6 	      JMP	ConfigureRushHourTraffic
   1344  f6a2
   1345  f6a2				   ConfigureLightTraffic
   1346  f6a2		       a2 0e		      LDX	#TRAFFIC_CHANCE_LIGHT
   1347  f6a4		       a0 1e		      LDY	#CHECKPOINT_TIME_LIGHT
   1348  f6a6		       a9 d4		      LDA	#TRAFFIC_COLOR_LIGHT
   1349  f6a8		       4c c3 f6 	      JMP	StoreTrafficChance
   1350  f6ab				   ConfigureRegularTraffic
   1351  f6ab		       a2 18		      LDX	#TRAFFIC_CHANCE_REGULAR
   1352  f6ad		       a0 23		      LDY	#CHECKPOINT_TIME_REGULAR
   1353  f6af		       a9 34		      LDA	#TRAFFIC_COLOR_REGULAR
   1354  f6b1		       4c c3 f6 	      JMP	StoreTrafficChance
   1355  f6b4				   ConfigureIntenseTraffic
   1356  f6b4		       a2 22		      LDX	#TRAFFIC_CHANCE_INTENSE
   1357  f6b6		       a0 28		      LDY	#CHECKPOINT_TIME_INTENSE
   1358  f6b8		       a9 f4		      LDA	#TRAFFIC_COLOR_INTENSE
   1359  f6ba		       4c c3 f6 	      JMP	StoreTrafficChance
   1360  f6bd				   ConfigureRushHourTraffic
   1361  f6bd		       a2 2c		      LDX	#TRAFFIC_CHANCE_RUSH_HOUR
   1362  f6bf		       a0 2d		      LDY	#CHECKPOINT_TIME_RUSH_HOUR
   1363  f6c1		       a9 09		      LDA	#TRAFFIC_COLOR_RUSH_HOUR
   1364  f6c3
   1365  f6c3				   StoreTrafficChance
   1366  f6c3		       86 c1		      STX	TrafficChance
   1367  f6c5		       84 c2		      STY	CheckpointTime
   1368  f6c7		       85 c3		      STA	TrafficColor
   1369  f6c9
   1370  f6c9				   CheckRandomDifficulty
   1371  f6c9		       a5 c5		      LDA	GameMode
   1372  f6cb		       29 08		      AND	#%00001000	; Random difficulties
   1373  f6cd		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1374  f6cf				   RandomDificulty
   1375  f6cf		       a6 8c		      LDX	FrameCount0
   1376  f6d1		       bd 00 fe 	      LDA	AesTable,X
   1377  f6d4		       45 c1		      EOR	TrafficChance
   1378  f6d6		       29 3f		      AND	#%00111111
   1379  f6d8		       85 c1		      STA	TrafficChance
   1380  f6da
   1381  f6da				   ReturnFromNextDifficulty
   1382  f6da		       60		      RTS
   1383  f6db				   EndNextDifficulty
   1384  f6db
   1385  f6db				   DefaultOffsets
   1386  f6db		       a9 20		      LDA	#$20
   1387  f6dd		       85 96		      STA	TrafficOffset1 + 2
   1388  f6df		       a9 40		      LDA	#$40
   1389  f6e1		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1390  f6e3		       a9 60		      LDA	#$60
   1391  f6e5		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1392  f6e7		       a9 80		      LDA	#$80
   1393  f6e9		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1394  f6eb		       a9 a0		      LDA	#$A0
   1395  f6ed		       60		      RTS
   1396  f6ee
   1397  f6ee				   PrintStaticText		; Preload X with the offset referent to StaticText
   1398  f6ee		       bd 00 ff 	      LDA	StaticText,X
   1399  f6f1		       85 d0		      STA	ScoreD0
   1400  f6f3		       e8		      INX
   1401  f6f4		       bd 00 ff 	      LDA	StaticText,X
   1402  f6f7		       85 d1		      STA	ScoreD1
   1403  f6f9		       e8		      INX
   1404  f6fa		       bd 00 ff 	      LDA	StaticText,X
   1405  f6fd		       85 d2		      STA	ScoreD2
   1406  f6ff		       e8		      INX
   1407  f700		       bd 00 ff 	      LDA	StaticText,X
   1408  f703		       85 d3		      STA	ScoreD3
   1409  f705		       e8		      INX
   1410  f706		       bd 00 ff 	      LDA	StaticText,X
   1411  f709		       85 d4		      STA	ScoreD4
   1412  f70b		       60		      RTS
   1413  f70c
   1414  f70c				   Sleep16
   1415  f70c		       ea		      NOP
   1416  f70d		       ea		      NOP
   1417  f70e		       60		      RTS
   1418  f70f
   1419  f70f							;ALL CONSTANTS FROM HERE, ALIGN TO AVOID CARRY
   1420  fd00					      org	$FD00
   1421  fd00				   Font
   1422  fd00				   C0
   1423  fd00		       e7		      .byte.b	#%11100111	;
   1424  fd01		       a5		      .byte.b	#%10100101	; 
   1425  fd02		       a5		      .byte.b	#%10100101	; 
   1426  fd03		       a5		      .byte.b	#%10100101	; 
   1427  fd04		       e7		      .byte.b	#%11100111	;	
   1428  fd05				   C1
   1429  fd05		       e7		      .byte.b	#%11100111	;
   1430  fd06		       42		      .byte.b	#%01000010	; 
   1431  fd07		       42		      .byte.b	#%01000010	; 
   1432  fd08		       42		      .byte.b	#%01000010	; 
   1433  fd09		       66		      .byte.b	#%01100110	;
   1434  fd0a				   C2
   1435  fd0a		       e7		      .byte.b	#%11100111	;
   1436  fd0b		       24		      .byte.b	#%00100100	; 
   1437  fd0c		       e7		      .byte.b	#%11100111	; 
   1438  fd0d		       81		      .byte.b	#%10000001	; 
   1439  fd0e		       e7		      .byte.b	#%11100111	;
   1440  fd0f				   C3
   1441  fd0f		       e7		      .byte.b	#%11100111	;
   1442  fd10		       81		      .byte.b	#%10000001	; 
   1443  fd11		       e7		      .byte.b	#%11100111	; 
   1444  fd12		       81		      .byte.b	#%10000001	; 
   1445  fd13		       e7		      .byte.b	#%11100111	;
   1446  fd14				   C4
   1447  fd14		       81		      .byte.b	#%10000001	;
   1448  fd15		       81		      .byte.b	#%10000001	; 
   1449  fd16		       e7		      .byte.b	#%11100111	; 
   1450  fd17		       a5		      .byte.b	#%10100101	; 
   1451  fd18		       a5		      .byte.b	#%10100101	;
   1452  fd19				   C5
   1453  fd19		       e7		      .byte.b	#%11100111	;
   1454  fd1a		       81		      .byte.b	#%10000001	; 
   1455  fd1b		       e7		      .byte.b	#%11100111	; 
   1456  fd1c		       24		      .byte.b	#%00100100	; 
   1457  fd1d		       e7		      .byte.b	#%11100111	;
   1458  fd1e				   C6
   1459  fd1e		       e7		      .byte.b	#%11100111	;
   1460  fd1f		       a5		      .byte.b	#%10100101	; 
   1461  fd20		       e7		      .byte.b	#%11100111	; 
   1462  fd21		       24		      .byte.b	#%00100100	; 
   1463  fd22		       e7		      .byte.b	#%11100111	;
   1464  fd23				   C7
   1465  fd23		       81		      .byte.b	#%10000001	;
   1466  fd24		       81		      .byte.b	#%10000001	; 
   1467  fd25		       81		      .byte.b	#%10000001	; 
   1468  fd26		       81		      .byte.b	#%10000001	; 
   1469  fd27		       e7		      .byte.b	#%11100111	;
   1470  fd28				   C8
   1471  fd28		       e7		      .byte.b	#%11100111	;
   1472  fd29		       a5		      .byte.b	#%10100101	; 
   1473  fd2a		       e7		      .byte.b	#%11100111	; 
   1474  fd2b		       a5		      .byte.b	#%10100101	; 
   1475  fd2c		       e7		      .byte.b	#%11100111	;
   1476  fd2d				   C9
   1477  fd2d		       e7		      .byte.b	#%11100111	;
   1478  fd2e		       81		      .byte.b	#%10000001	; 
   1479  fd2f		       e7		      .byte.b	#%11100111	; 
   1480  fd30		       a5		      .byte.b	#%10100101	; 
   1481  fd31		       e7		      .byte.b	#%11100111	;
   1482  fd32				   CA
   1483  fd32		       a5		      .byte.b	#%10100101	;
   1484  fd33		       a5		      .byte.b	#%10100101	; 
   1485  fd34		       e7		      .byte.b	#%11100111	; 
   1486  fd35		       a5		      .byte.b	#%10100101	; 
   1487  fd36		       e7		      .byte.b	#%11100111	;
   1488  fd37				   CB
   1489  fd37		       66		      .byte.b	#%01100110	;
   1490  fd38		       a5		      .byte.b	#%10100101	; 
   1491  fd39		       66		      .byte.b	#%01100110	; 
   1492  fd3a		       a5		      .byte.b	#%10100101	;
   1493  fd3b		       66		      .byte.b	#%01100110	;
   1494  fd3c				   CC
   1495  fd3c		       e7		      .byte.b	#%11100111	;
   1496  fd3d		       24		      .byte.b	#%00100100	; 
   1497  fd3e		       24		      .byte.b	#%00100100	; 
   1498  fd3f		       24		      .byte.b	#%00100100	;
   1499  fd40		       e7		      .byte.b	#%11100111	;
   1500  fd41
   1501  fd41				   CD
   1502  fd41		       66		      .byte.b	#%01100110	;
   1503  fd42		       a5		      .byte.b	#%10100101	; 
   1504  fd43		       a5		      .byte.b	#%10100101	; 
   1505  fd44		       a5		      .byte.b	#%10100101	;
   1506  fd45		       66		      .byte.b	#%01100110	;
   1507  fd46
   1508  fd46				   CE
   1509  fd46		       e7		      .byte.b	#%11100111	;
   1510  fd47		       24		      .byte.b	#%00100100	; 
   1511  fd48		       e7		      .byte.b	#%11100111	; 
   1512  fd49		       24		      .byte.b	#%00100100	; 
   1513  fd4a		       e7		      .byte.b	#%11100111	;
   1514  fd4b
   1515  fd4b				   CF
   1516  fd4b		       24		      .byte.b	#%00100100	;
   1517  fd4c		       24		      .byte.b	#%00100100	; 
   1518  fd4d		       e7		      .byte.b	#%11100111	; 
   1519  fd4e		       24		      .byte.b	#%00100100	; 
   1520  fd4f		       e7		      .byte.b	#%11100111	;
   1521  fd50
   1522  fd50				   CG
   1523  fd50		       c3		      .byte.b	#%11000011	;
   1524  fd51		       a5		      .byte.b	#%10100101	; 
   1525  fd52		       a5		      .byte.b	#%10100101	; 
   1526  fd53		       24		      .byte.b	#%00100100	; 
   1527  fd54		       c3		      .byte.b	#%11000011	;	
   1528  fd55
   1529  fd55				   CL
   1530  fd55		       e7		      .byte.b	#%11100111	;
   1531  fd56		       24		      .byte.b	#%00100100	; 
   1532  fd57		       24		      .byte.b	#%00100100	; 
   1533  fd58		       24		      .byte.b	#%00100100	; 
   1534  fd59		       24		      .byte.b	#%00100100	;
   1535  fd5a
   1536  fd5a
   1537  fd5a				   CH
   1538  fd5a		       a5		      .byte.b	#%10100101	;
   1539  fd5b		       a5		      .byte.b	#%10100101	; 
   1540  fd5c		       e7		      .byte.b	#%11100111	; 
   1541  fd5d		       a5		      .byte.b	#%10100101	; 
   1542  fd5e		       a5		      .byte.b	#%10100101	;
   1543  fd5f
   1544  fd5f				   CM
   1545  fd5f		       a5		      .byte.b	#%10100101	;
   1546  fd60		       a5		      .byte.b	#%10100101	; 
   1547  fd61		       a5		      .byte.b	#%10100101	; 
   1548  fd62		       e7		      .byte.b	#%11100111	; 
   1549  fd63		       a5		      .byte.b	#%10100101	;
   1550  fd64
   1551  fd64
   1552  fd64				   CO
   1553  fd64		       42		      .byte.b	#%01000010	;
   1554  fd65		       a5		      .byte.b	#%10100101	; 
   1555  fd66		       a5		      .byte.b	#%10100101	; 
   1556  fd67		       a5		      .byte.b	#%10100101	; 
   1557  fd68		       42		      .byte.b	#%01000010	;	
   1558  fd69
   1559  fd69				   CP
   1560  fd69		       24		      .byte.b	#%00100100	;
   1561  fd6a		       24		      .byte.b	#%00100100	; 
   1562  fd6b		       e7		      .byte.b	#%11100111	; 
   1563  fd6c		       a5		      .byte.b	#%10100101	; 
   1564  fd6d		       e7		      .byte.b	#%11100111	;
   1565  fd6e
   1566  fd6e				   CR
   1567  fd6e		       a5		      .byte.b	#%10100101	;
   1568  fd6f		       a5		      .byte.b	#%10100101	; 
   1569  fd70		       66		      .byte.b	#%01100110	; 
   1570  fd71		       a5		      .byte.b	#%10100101	; 
   1571  fd72		       66		      .byte.b	#%01100110	;
   1572  fd73
   1573  fd73				   CS
   1574  fd73		       66		      .byte.b	#%01100110	;
   1575  fd74		       81		      .byte.b	#%10000001	; 
   1576  fd75		       42		      .byte.b	#%01000010	; 
   1577  fd76		       24		      .byte.b	#%00100100	; 
   1578  fd77		       c3		      .byte.b	#%11000011	;
   1579  fd78
   1580  fd78				   CT
   1581  fd78		       42		      .byte.b	#%01000010	;
   1582  fd79		       42		      .byte.b	#%01000010	; 
   1583  fd7a		       42		      .byte.b	#%01000010	; 
   1584  fd7b		       42		      .byte.b	#%01000010	; 
   1585  fd7c		       e7		      .byte.b	#%11100111	;
   1586  fd7d
   1587  fd7d				   CV
   1588  fd7d		       42		      .byte.b	#%01000010	;
   1589  fd7e		       a5		      .byte.b	#%10100101	; 
   1590  fd7f		       a5		      .byte.b	#%10100101	; 
   1591  fd80		       a5		      .byte.b	#%10100101	; 
   1592  fd81		       a5		      .byte.b	#%10100101	;	
   1593  fd82
   1594  fd82				   CY
   1595  fd82		       42		      .byte.b	#%01000010	;
   1596  fd83		       42		      .byte.b	#%01000010	; 
   1597  fd84		       42		      .byte.b	#%01000010	; 
   1598  fd85		       a5		      .byte.b	#%10100101	; 
   1599  fd86		       a5		      .byte.b	#%10100101	;
   1600  fd87
   1601  fd87				   CW
   1602  fd87		       a5		      .byte.b	#%10100101	;
   1603  fd88		       e7		      .byte.b	#%11100111	; 
   1604  fd89		       a5		      .byte.b	#%10100101	; 
   1605  fd8a		       a5		      .byte.b	#%10100101	; 
   1606  fd8b		       a5		      .byte.b	#%10100101	;
   1607  fd8c
   1608  fd8c				   Pipe
   1609  fd8c		       42		      .byte.b	#%01000010	;
   1610  fd8d		       00		      .byte.b	#%00000000	; 
   1611  fd8e		       42		      .byte.b	#%01000010	; 
   1612  fd8f		       00		      .byte.b	#%00000000	; 
   1613  fd90		       42		      .byte.b	#%01000010	;
   1614  fd91
   1615  fd91				   Exclamation
   1616  fd91		       42		      .byte.b	#%01000010	;
   1617  fd92		       00		      .byte.b	#%00000000	; 
   1618  fd93		       42		      .byte.b	#%01000010	; 
   1619  fd94		       42		      .byte.b	#%01000010	; 
   1620  fd95		       42		      .byte.b	#%01000010	;
   1621  fd96
   1622  fd96				   Dot
   1623  fd96		       42		      .byte.b	#%01000010	;
   1624  fd97		       42		      .byte.b	#%01000010	; 
   1625  fd98		       00		      .byte.b	#%00000000	; 
   1626  fd99		       00		      .byte.b	#%00000000	; 
   1627  fd9a		       00		      .byte.b	#%00000000	;
   1628  fd9b
   1629  fd9b				   Space		; Moved from the beggining so 0 to F is fast to draw.
   1630  fd9b		       00		      .byte.b	#0	;
   1631  fd9c		       00		      .byte.b	#0	;
   1632  fd9d		       00		      .byte.b	#0	;
   1633  fd9e		       00		      .byte.b	#0	;
   1634  fd9f		       00		      .byte.b	#0	;
   1635  fda0
   1636  fda0				   FontLookup		; Very fast font lookup for dynamic values!
   1637  fda0		       04		      .byte.b	#<C0 + #FONT_OFFSET
   1638  fda1		       09		      .byte.b	#<C1 + #FONT_OFFSET
   1639  fda2		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1640  fda3		       13		      .byte.b	#<C3 + #FONT_OFFSET
   1641  fda4		       18		      .byte.b	#<C4 + #FONT_OFFSET
   1642  fda5		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   1643  fda6		       22		      .byte.b	#<C6 + #FONT_OFFSET
   1644  fda7		       27		      .byte.b	#<C7 + #FONT_OFFSET
   1645  fda8		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   1646  fda9		       31		      .byte.b	#<C9 + #FONT_OFFSET
   1647  fdaa		       36		      .byte.b	#<CA + #FONT_OFFSET
   1648  fdab		       3b		      .byte.b	#<CB + #FONT_OFFSET
   1649  fdac		       40		      .byte.b	#<CC + #FONT_OFFSET
   1650  fdad		       45		      .byte.b	#<CD + #FONT_OFFSET
   1651  fdae		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1652  fdaf		       4f		      .byte.b	#<CF + #FONT_OFFSET
   1653  fdb0
   1654  fdb0				   EngineSoundType
   1655  fdb0		       02		      .byte.b	#2
   1656  fdb1		       02		      .byte.b	#2
   1657  fdb2		       0e		      .byte.b	#14
   1658  fdb3		       06		      .byte.b	#6
   1659  fdb4		       06		      .byte.b	#6
   1660  fdb5		       0e		      .byte.b	#14
   1661  fdb6
   1662  fdb6				   EngineBaseFrequence
   1663  fdb6		       1f		      .byte.b	#31
   1664  fdb7		       15		      .byte.b	#21
   1665  fdb8		       14		      .byte.b	#20
   1666  fdb9		       1f		      .byte.b	#31
   1667  fdba		       16		      .byte.b	#22
   1668  fdbb		       03		      .byte.b	#3
   1669  fdbc
   1670  fe00					      org	$FE00
   1671  fe00				   AesTable
   1672  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   1673  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   1674  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   1675  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   1676  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   1677  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   1678  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   1679  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   1680  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   1681  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   1682  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   1683  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   1684  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   1685  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   1686  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   1687  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   1688  ff00
   1689  ff00							; From FF00 to FFFB (122 bytes) to use here
   1690  ff00
   1691  ff00				   StaticText		; All static text must be on the same MSB block. 
   1692  ff00				   CheckpointText		; Only the LSB, which is the offset.
   1693  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   1694  ff01		       5e		      .byte.b	#<CH + #FONT_OFFSET
   1695  ff02		       6d		      .byte.b	#<CP + #FONT_OFFSET
   1696  ff03		       7c		      .byte.b	#<CT + #FONT_OFFSET
   1697  ff04		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1698  ff05
   1699  ff05				   HellwayLeftText
   1700  ff05		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1701  ff06		       90		      .byte.b	#<Pipe + #FONT_OFFSET
   1702  ff07		       5e		      .byte.b	#<CH + #FONT_OFFSET
   1703  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1704  ff09		       59		      .byte.b	#<CL + #FONT_OFFSET
   1705  ff0a
   1706  ff0a				   HellwayRightText
   1707  ff0a		       59		      .byte.b	#<CL + #FONT_OFFSET
   1708  ff0b		       8b		      .byte.b	#<CW + #FONT_OFFSET
   1709  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   1710  ff0d		       86		      .byte.b	#<CY + #FONT_OFFSET
   1711  ff0e		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1712  ff0f
   1713  ff0f				   OpbText
   1714  ff0f		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1715  ff10		       90		      .byte.b	#<Pipe + #FONT_OFFSET
   1716  ff11		       68		      .byte.b	#<CO + #FONT_OFFSET
   1717  ff12		       6d		      .byte.b	#<CP + #FONT_OFFSET
   1718  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   1719  ff14
   1720  ff14				   YearText
   1721  ff14		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1722  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1723  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   1724  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   1725  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   1726  ff19
   1727  ff19				   GameText
   1728  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   1729  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   1730  ff1b		       63		      .byte.b	#<CM + #FONT_OFFSET
   1731  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1732  ff1d		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1733  ff1e
   1734  ff1e				   OverText
   1735  ff1e		       68		      .byte.b	#<CO + #FONT_OFFSET
   1736  ff1f		       81		      .byte.b	#<CV + #FONT_OFFSET
   1737  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   1738  ff21		       72		      .byte.b	#<CR + #FONT_OFFSET
   1739  ff22		       9f		      .byte.b	#<Space + #FONT_OFFSET
   1740  ff23				   GoText
   1741  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   1742  ff24		       68		      .byte.b	#<CO + #FONT_OFFSET
   1743  ff25		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1744  ff26		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1745  ff27		       95		      .byte.b	#<Exclamation + #FONT_OFFSET
   1746  ff28
   1747  ff28				   EndStaticText
   1748  ff28
   1749  ff28				   CarSprite		; Upside down
   1750  ff28		       00		      .byte.b	#%00000000	; Easist way to stop drawing
   1751  ff29		       7e		      .byte.b	#%01111110
   1752  ff2a		       24		      .byte.b	#%00100100
   1753  ff2b		       bd		      .byte.b	#%10111101
   1754  ff2c		       3c		      .byte.b	#%00111100
   1755  ff2d		       bd		      .byte.b	#%10111101
   1756  ff2e		       3c		      .byte.b	#%00111100
   1757  ff2f		       00 00 00 00*	      ds	GAMEPLAY_AREA - 8
   1758  ff61
   1759  ff61				   TrafficSpeeds
   1760  ff61		       00		      .byte.b	#$00	;  Trafic0 L
   1761  ff62		       00		      .byte.b	#$00	;  Trafic0 H
   1762  ff63		       0a		      .byte.b	#$0A	;  Trafic1 L
   1763  ff64		       01		      .byte.b	#$01	;  Trafic1 H
   1764  ff65		       e6		      .byte.b	#$E6	;  Trafic2 L
   1765  ff66		       00		      .byte.b	#$00	;  Trafic2 H
   1766  ff67		       c2		      .byte.b	#$C2	;  Trafic3 L
   1767  ff68		       00		      .byte.b	#$00	;  Trafic3 H
   1768  ff69		       9e		      .byte.b	#$9E	;  Trafic4 L
   1769  ff6a		       00		      .byte.b	#$00	;  Trafic4 H
   1770  ff6b				   TrafficSpeedsHighDelta
   1771  ff6b		       00		      .byte.b	#$00	;  Trafic0 L
   1772  ff6c		       00		      .byte.b	#$00	;  Trafic0 H
   1773  ff6d		       0a		      .byte.b	#$0A	;  Trafic1 L
   1774  ff6e		       01		      .byte.b	#$01	;  Trafic1 H
   1775  ff6f		       c8		      .byte.b	#$C8	;  Trafic2 L
   1776  ff70		       00		      .byte.b	#$00	;  Trafic2 H
   1777  ff71		       86		      .byte.b	#$86	;  Trafic3 L
   1778  ff72		       00		      .byte.b	#$00	;  Trafic3 H
   1779  ff73		       44		      .byte.b	#$44	;  Trafic4 L
   1780  ff74		       00		      .byte.b	#$00	;  Trafic4 H
   1781  ff75
   1782  fffc					      org	$FFFC
   1783  fffc		       00 f0		      .word.w	BeforeStart
   1784  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
