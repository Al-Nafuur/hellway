------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 07	   CAR_SIZE   =	7
     11  f000		       00 07	   TRAFFIC_SIZE =	7	; For now, we can make it random later to simulate bigger cars
     12  f000		       00 02	   TRAFFIC_LINE_COUNT =	2
     13  f000		       00 0a	   CAR_0_Y    =	10
     14  f000							;16 bit precision
     15  f000							;640 max speed!
     16  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     17  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     18  f000		       00 00	   CAR_MIN_SPEED_H =	0
     19  f000		       00 00	   CAR_MIN_SPEED_L =	0
     20  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     21  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     22  f000		       00 01	   ACCELERATE_SPEED =	1
     23  f000		       00 03	   BREAK_SPEED =	3
     24  f000		       00 10	   ROM_START_MSB =	$10
     25  f000
     26  f000							;memory	
     27  f000		       00 80	   Car0Line   =	$80
     28  f000
     29  f000		       00 81	   GRP0Cache  =	$81
     30  f000		       00 82	   PF0Cache   =	$82
     31  f000		       00 83	   PF1Cache   =	$83
     32  f000		       00 84	   PF2Cache   =	$84
     33  f000
     34  f000		       00 86	   FrameCount0 =	$86	;
     35  f000		       00 87	   FrameCount1 =	$87	;
     36  f000
     37  f000		       00 88	   Car0SpeedL =	$88
     38  f000		       00 89	   Car0SpeedH =	$89
     39  f000
     40  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit)
     41  f000		       00 93	   TrafficOffset1 =	$93	; Traffic 1 $94 $95 (24 bit)
     42  f000
     43  f000							;Temporary variables, multiple uses
     44  f000		       00 a0	   Tmp0       =	$A0
     45  f000		       00 a1	   Tmp1       =	$A1
     46  f000		       00 a2	   Tmp2       =	$A2
     47  f000
     48  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     49  f000
     50  f000							;generic start up stuff, put zero in all...
     51  f000				   Start
     52  f000		       78		      SEI
     53  f001		       d8		      CLD
     54  f002		       a2 ff		      LDX	#$FF
     55  f004		       9a		      TXS
     56  f005		       a9 00		      LDA	#0
     57  f007				   ClearMem
     58  f007		       95 00		      STA	0,X
     59  f009		       ca		      DEX
     60  f00a		       d0 fb		      BNE	ClearMem
     61  f00c
     62  f00c							;Setting some variables...
     63  f00c
     64  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     65  f00e		       85 06		      STA	COLUP0
     66  f010
     67  f010		       a9 0a		      LDA	#10
     68  f012		       85 93		      STA	TrafficOffset1	;Initial Y Position
     69  f014
     70  f014							;Extract to subrotine? Used also dor the offsets
     71  f014		       a9 00		      LDA	#CAR_MIN_SPEED_L
     72  f016		       85 88		      STA	Car0SpeedL
     73  f018		       a9 00		      LDA	#CAR_MIN_SPEED_H
     74  f01a		       85 89		      STA	Car0SpeedH
     75  f01c
     76  f01c							;Traffic colour
     77  f01c		       a5 32		      LDA	$32
     78  f01e		       85 08		      STA	COLUPF
     79  f020
     80  f020							;mirror the playfield
     81  f020		       a9 01		      LDA	#%00000001
     82  f022		       85 0a		      STA	CTRLPF
     83  f024
     84  f024							;VSYNC time
     85  f024				   MainLoop
     86  f024		       a9 02		      LDA	#2
     87  f026		       85 00		      STA	VSYNC
     88  f028		       85 02		      STA	WSYNC
     89  f02a		       85 02		      STA	WSYNC
     90  f02c							;Cool, can put code here! It removed the black line on top
     91  f02c							;Make Objects move in the X axys
     92  f02c		       85 2a		      STA	HMOVE	;2
     93  f02e							;This must be done after a WSync, otherwise it is impossible to predict the X position
     94  f02e		       a5 c0		      LDA	GameStatus	;3
     95  f030		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
     96  f032		       f0 12		      BEQ	DoNotSetPlayerX	;3
     97  f034							;Do something better with this 32 cycles
      0  f034					      SLEEP	32	;
      1  f034				   .CYCLES    SET	32
      2  f034
      3  f034				  -	      IF	.CYCLES < 2
      4  f034				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f034				  -	      ERR
      6  f034					      ENDIF
      7  f034
      8  f034				  -	      IF	.CYCLES & 1
      9  f034				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f034				  -	      nop	0
     11  f034				  -	      ELSE
     12  f034				  -	      bit	VSYNC
     13  f034				  -	      ENDIF
     14  f034				  -.CYCLES    SET	.CYCLES - 3
     15  f034					      ENDIF
     16  f034
     17  f034					      REPEAT	.CYCLES / 2
     18  f034		       ea		      nop
     17  f034					      REPEND
     18  f035		       ea		      nop
     17  f035					      REPEND
     18  f036		       ea		      nop
     17  f036					      REPEND
     18  f037		       ea		      nop
     17  f037					      REPEND
     18  f038		       ea		      nop
     17  f038					      REPEND
     18  f039		       ea		      nop
     17  f039					      REPEND
     18  f03a		       ea		      nop
     17  f03a					      REPEND
     18  f03b		       ea		      nop
     17  f03b					      REPEND
     18  f03c		       ea		      nop
     17  f03c					      REPEND
     18  f03d		       ea		      nop
     17  f03d					      REPEND
     18  f03e		       ea		      nop
     17  f03e					      REPEND
     18  f03f		       ea		      nop
     17  f03f					      REPEND
     18  f040		       ea		      nop
     17  f040					      REPEND
     18  f041		       ea		      nop
     17  f041					      REPEND
     18  f042		       ea		      nop
     17  f042					      REPEND
     18  f043		       ea		      nop
     19  f044					      REPEND
     99  f044		       85 10		      STA	RESP0	;3
    100  f046				   DoNotSetPlayerX
    101  f046
    102  f046		       85 02		      STA	WSYNC
    103  f048		       a9 2b		      LDA	#43
    104  f04a		       8d 96 02 	      STA	TIM64T
    105  f04d		       a9 00		      LDA	#0
    106  f04f		       85 00		      STA	VSYNC
    107  f051
    108  f051							;Read Fire Button before, will make it start the game for now.
    109  f051		       a5 0c		      LDA	INPT4
    110  f053		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    111  f055		       a5 c0		      LDA	GameStatus
    112  f057		       09 80		      ORA	#%10000000
    113  f059		       85 c0		      STA	GameStatus
    114  f05b				   SkipGameStart
    115  f05b
    116  f05b							;Does not update the game if not running
    117  f05b		       a5 c0		      LDA	GameStatus	;3
    118  f05d		       49 80		      EOR	#%10000000	;2 game is running...
    119  f05f		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    120  f061		       4c 16 f1 	      JMP	SkipUpdateLogic
    121  f064
    122  f064				   ContinueWithGameLogic
    123  f064
    124  f064							; for left and right, we're gonna 
    125  f064							; set the horizontal speed, and then do
    126  f064							; a single HMOVE.  We'll use X to hold the
    127  f064							; horizontal speed, then store it in the 
    128  f064							; appropriate register
    129  f064
    130  f064							;assum horiz speed will be zero
    131  f064
    132  f064							;Begin read dpad
    133  f064		       a2 00		      LDX	#0
    134  f066
    135  f066		       a9 40		      LDA	#%01000000	;Left
    136  f068		       2c 80 02 	      BIT	SWCHA
    137  f06b		       d0 02		      BNE	SkipMoveLeft
    138  f06d		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    139  f06f				   SkipMoveLeft
    140  f06f
    141  f06f		       a9 80		      LDA	#%10000000	;Right
    142  f071		       2c 80 02 	      BIT	SWCHA
    143  f074		       d0 02		      BNE	SkipMoveRight
    144  f076		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    145  f078				   SkipMoveRight
    146  f078
    147  f078		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    148  f07a
    149  f07a
    150  f07a							;Acelerates / breaks the car
    151  f07a		       a9 10		      LDA	#%00010000	;UP in controller
    152  f07c		       2c 80 02 	      BIT	SWCHA
    153  f07f		       d0 21		      BNE	SkipAccelerate
    154  f081
    155  f081							;Adds speed
    156  f081		       18		      CLC
    157  f082		       a5 88		      LDA	Car0SpeedL
    158  f084		       69 01		      ADC	#ACCELERATE_SPEED
    159  f086		       85 88		      STA	Car0SpeedL
    160  f088		       a5 89		      LDA	Car0SpeedH
    161  f08a		       69 00		      ADC	#0
    162  f08c		       85 89		      STA	Car0SpeedH
    163  f08e
    164  f08e							;Checks if already max
    165  f08e		       c9 02		      CMP	#CAR_MAX_SPEED_H
    166  f090		       90 10		      BCC	SkipAccelerate	; less than my max speed
    167  f092		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    168  f094							;High bit is max, compare the low
    169  f094		       a5 88		      LDA	Car0SpeedL
    170  f096		       c9 80		      CMP	#CAR_MAX_SPEED_L
    171  f098		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    172  f09a							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    173  f09a
    174  f09a				   ResetToMaxSpeed		; Speed is more, or is already max
    175  f09a		       a9 02		      LDA	#CAR_MAX_SPEED_H
    176  f09c		       85 89		      STA	Car0SpeedH
    177  f09e		       a9 80		      LDA	#CAR_MAX_SPEED_L
    178  f0a0		       85 88		      STA	Car0SpeedL
    179  f0a2
    180  f0a2				   SkipAccelerate
    181  f0a2
    182  f0a2							;Break
    183  f0a2		       a9 20		      LDA	#%00100000	;Down in controller
    184  f0a4		       2c 80 02 	      BIT	SWCHA
    185  f0a7		       d0 26		      BNE	SkipBreak
    186  f0a9
    187  f0a9							;Decrease speed
    188  f0a9		       38		      SEC
    189  f0aa		       a5 88		      LDA	Car0SpeedL
    190  f0ac		       e9 03		      SBC	#BREAK_SPEED
    191  f0ae		       85 88		      STA	Car0SpeedL
    192  f0b0		       a5 89		      LDA	Car0SpeedH
    193  f0b2		       e9 00		      SBC	#0
    194  f0b4		       85 89		      STA	Car0SpeedH
    195  f0b6
    196  f0b6							;Checks if is min speed
    197  f0b6		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    198  f0b8		       c9 00		      CMP	#CAR_MIN_SPEED_H
    199  f0ba		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    200  f0bc		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    201  f0be
    202  f0be				   CompareLBreakSpeed
    203  f0be		       a5 88		      LDA	Car0SpeedL
    204  f0c0		       c9 00		      CMP	#CAR_MIN_SPEED_L
    205  f0c2		       90 03		      BCC	ResetMinSpeed	; Less than memory
    206  f0c4		       4c cf f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    207  f0c7
    208  f0c7				   ResetMinSpeed
    209  f0c7		       a9 00		      LDA	#CAR_MIN_SPEED_H
    210  f0c9		       85 89		      STA	Car0SpeedH
    211  f0cb		       a9 00		      LDA	#CAR_MIN_SPEED_L
    212  f0cd		       85 88		      STA	Car0SpeedL
    213  f0cf
    214  f0cf				   SkipBreak
    215  f0cf
    216  f0cf							;Temporary code until cars are dynamic, will make it wrap
    217  f0cf							;LDA TrafficOffset1
    218  f0cf							;AND #%00111111
    219  f0cf							;STA TrafficOffset1
    220  f0cf
    221  f0cf							;Finish read dpad
    222  f0cf
    223  f0cf
    224  f0cf							;Updates all offsets 24 bits
    225  f0cf		       a2 00		      LDX	#0	; Memory Offset 24 bit
    226  f0d1		       a0 00		      LDY	#0	; Line Speeds 16 bits
    227  f0d3				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    228  f0d3		       38		      SEC
    229  f0d4		       a5 88		      LDA	Car0SpeedL
    230  f0d6		       f9 a1 f1 	      SBC	TrafficSpeeds,Y
    231  f0d9		       85 a0		      STA	Tmp0
    232  f0db		       c8		      INY
    233  f0dc		       a5 89		      LDA	Car0SpeedH
    234  f0de		       f9 a1 f1 	      SBC	TrafficSpeeds,Y
    235  f0e1		       85 a1		      STA	Tmp1
    236  f0e3		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    237  f0e5		       e9 00		      SBC	#0
    238  f0e7		       85 a2		      STA	Tmp2
    239  f0e9
    240  f0e9
    241  f0e9							;Adds the result
    242  f0e9		       18		      CLC
    243  f0ea		       a5 a0		      LDA	Tmp0
    244  f0ec		       75 90		      ADC	TrafficOffset0,X
    245  f0ee		       95 90		      STA	TrafficOffset0,X
    246  f0f0		       e8		      INX
    247  f0f1		       a5 a1		      LDA	Tmp1
    248  f0f3		       75 90		      ADC	TrafficOffset0,X
    249  f0f5		       95 90		      STA	TrafficOffset0,X
    250  f0f7		       e8		      INX
    251  f0f8		       a5 a2		      LDA	Tmp2	; Carry
    252  f0fa		       75 90		      ADC	TrafficOffset0,X
    253  f0fc		       95 90		      STA	TrafficOffset0,X
    254  f0fe
    255  f0fe
    256  f0fe				   PrepareNextUpdateLoop
    257  f0fe		       c8		      INY
    258  f0ff		       e8		      INX
    259  f100		       e0 06		      CPX	#TRAFFIC_LINE_COUNT * 3	;
    260  f102		       d0 cf		      BNE	UpdateOffsets
    261  f104
    262  f104							;Will probably be useful		
    263  f104				   CountFrame
    264  f104		       e6 86		      INC	FrameCount0
    265  f106		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    266  f108		       e6 87		      INC	FrameCount1
    267  f10a				   SkipIncFC1
    268  f10a
    269  f10a
    270  f10a				   TestCollision		;
    271  f10a							; see if car0 and playfield collide, and change the background color if so
    272  f10a		       a9 80		      LDA	#%10000000
    273  f10c		       24 02		      BIT	CXP0FB
    274  f10e		       f0 04		      BEQ	NoCollision	;skip if not hitting...
    275  f110		       a5 86		      LDA	FrameCount0	;must be a hit! Change rand color bg
    276  f112		       85 09		      STA	COLUBK	;and store as the bgcolor
    277  f114				   NoCollision
    278  f114		       85 2c		      STA	CXCLR	;reset the collision detection for next frame
    279  f116
    280  f116				   SkipUpdateLogic
    281  f116
    282  f116							; After here we are going to update the screen, No more heavy code
    283  f116				   WaitForVblankEnd
    284  f116		       ad 84 02 	      LDA	INTIM
    285  f119		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    286  f11b
    287  f11b		       a0 3f		      LDY	#SCREEN_SIZE - 1	;#63 ; 	
    288  f11d		       85 02		      STA	WSYNC
    289  f11f
    290  f11f		       a9 01		      LDA	#1
    291  f121		       85 01		      STA	VBLANK
    292  f123
    293  f123
    294  f123							;main scanline loop...
    295  f123				   ScanLoop
    296  f123		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    297  f125
    298  f125							;Start of next line!			
    299  f125				   DrawCache		;24 Is the last line going to the top of the next frame?
    300  f125
    301  f125		       a5 81		      LDA	GRP0Cache	;3 ;buffer was set during last scanline
    302  f127		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    303  f129
    304  f129		       a5 82		      LDA	PF0Cache	;3
    305  f12b		       85 0d		      STA	PF0	;3
    306  f12d
    307  f12d		       a5 83		      LDA	PF1Cache	;3
    308  f12f		       85 0e		      STA	PF1	;3
    309  f131
    310  f131		       a5 84		      LDA	PF2Cache	;3
    311  f133		       85 0f		      STA	PF2	;3
    312  f135
    313  f135
    314  f135				   ClearCache		;11 Only the playfields
    315  f135		       a9 00		      LDA	#$0	;2 ;Clear cache
    316  f137		       85 83		      STA	PF1Cache	;3
    317  f139		       85 84		      STA	PF2Cache	; 3
    318  f13b		       85 82		      STA	PF0Cache	; 3
    319  f13d
    320  f13d				   DrawTraffic0 		; 16 max, traffic 0 is the border
    321  f13d		       98		      TYA		;2
    322  f13e		       18		      CLC		;2
    323  f13f		       65 91		      ADC	TrafficOffset0 + 1
    324  f141		       29 04		      AND	#%00000100	;2 Every 8 game lines, draw the border
    325  f143		       f0 04		      BEQ	SkipDrawTraffic0	; 2 
    326  f145		       a9 70		      LDA	#%01110000	; 2
    327  f147		       85 82		      STA	PF0Cache	;3
    328  f149				   SkipDrawTraffic0
    329  f149
    330  f149							;51
    331  f149
    332  f149		       85 02		      STA	WSYNC	;73
    333  f14b
    334  f14b
    335  f14b				   DrawTraffic1 		; 17 Max, will be more
    336  f14b		       98		      TYA		; 2
    337  f14c		       18		      CLC		; 2 
    338  f14d		       65 94		      ADC	TrafficOffset1 + 1	;3
    339  f14f		       85 a0		      STA	Tmp0
    340  f151							;AND #%00001000 ;2 Every 8 for now
    341  f151							;BEQ FinishDrawTrafficLine1 ;2
    342  f151							;LDA #%11000000 ;2
    343  f151							;STA PF2Cache ;3
    344  f151		       a9 00		      LDA	#0	;2
    345  f153		       65 95		      ADC	TrafficOffset1 + 2	;3
    346  f155		       85 a1		      STA	Tmp1
    347  f157		       a5 a0		      LDA	Tmp0
    348  f159		       29 fc		      AND	#%11111100	; 4 lines same patern
    349  f15b		       2a		      ROL
    350  f15c		       2a		      ROL
    351  f15d		       45 a1		      EOR	Tmp1
    352  f15f		       49 aa		      EOR	#%10101010
    353  f161		       c9 a0		      CMP	#$A0
    354  f163		       90 04		      BCC	FinishDrawTraffic1
    355  f165		       a9 c0		      LDA	#%11000000
    356  f167		       85 83		      STA	PF1Cache	;3
    357  f169				   FinishDrawTraffic1
    358  f169
    359  f169				   FinishDrawTrafficLine1
    360  f169
    361  f169		       85 02		      STA	WSYNC	;49
    362  f16b
    363  f16b				   BeginDrawCar0Block		;21 is the max, since if draw, does not check active
    364  f16b		       a6 80		      LDX	Car0Line	;3 check the visible player line...
    365  f16d		       f0 0a		      BEQ	FinishDrawCar0	;2	skip the drawing if its zero...
    366  f16f				   DrawCar0
    367  f16f		       bd 99 f1 	      LDA	CarSprite-1,X	;5	;otherwise, load the correct line from CarSprite
    368  f172							;section below... it's off by 1 though, since at zero
    369  f172							;we stop drawing
    370  f172		       85 81		      STA	GRP0Cache	;3	;put that line as player graphic for the next line
    371  f174		       c6 80		      DEC	Car0Line	;5	and decrement the line count
    372  f176		       4c 81 f1 	      JMP	SkipActivateCar0	;3 save some cpu time
    373  f179				   FinishDrawCar0
    374  f179
    375  f179				   CheckActivateCar0		;9 max
    376  f179		       c0 0a		      CPY	#CAR_0_Y	;2
    377  f17b		       d0 04		      BNE	SkipActivateCar0	;2
    378  f17d		       a9 07		      LDA	#CAR_SIZE	;2
    379  f17f		       85 80		      STA	Car0Line	;3
    380  f181				   SkipActivateCar0		;EndDrawCar0Block
    381  f181
    382  f181
    383  f181							;STA WSYNC ;3
    384  f181
    385  f181				   WhileScanLoop
    386  f181		       88		      DEY		;2
    387  f182		       30 03		      BMI	FinishScanLoop	;2 or 3 ;two big Breach	
    388  f184		       4c 23 f1 	      JMP	ScanLoop	;3
    389  f187				   FinishScanLoop
    390  f187
    391  f187
    392  f187				   PrepareOverscan
    393  f187		       a9 02		      LDA	#2
    394  f189		       85 02		      STA	WSYNC
    395  f18b		       85 01		      STA	VBLANK
    396  f18d
    397  f18d		       a9 25		      LDA	#37
    398  f18f		       8d 96 02 	      STA	TIM64T
    399  f192							;LDA #0
    400  f192							;STA VSYNC Is it needed? Why is this here, I don't remember		
    401  f192
    402  f192							;Do more logic
    403  f192
    404  f192				   OverScanWait
    405  f192		       ad 84 02 	      LDA	INTIM
    406  f195		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    407  f197		       4c 24 f0 	      JMP	MainLoop
    408  f19a
    409  f19a
    410  f19a				   CarSprite		; Upside down
    411  f19a		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    412  f19b		       ff		      .byte.b	#%11111111
    413  f19c		       24		      .byte.b	#%00100100
    414  f19d		       bd		      .byte.b	#%10111101
    415  f19e		       3c		      .byte.b	#%00111100
    416  f19f		       bd		      .byte.b	#%10111101
    417  f1a0		       3c		      .byte.b	#%00111100
    418  f1a1
    419  f1a1
    420  f1a1				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    421  f1a1		       00		      .byte.b	#0	;   Border L
    422  f1a2		       00		      .byte.b	#0	;   Border H
    423  f1a3		       a0		      .byte.b	#$A0	; Trafic1 L
    424  f1a4		       00		      .byte.b	#0	;   Trafic1 H
    425  f1a5
    426  fffc					      org	$FFFC
    427  fffc		       00 f0		      .word.w	Start
    428  fffe		       00 f0		      .word.w	Start
