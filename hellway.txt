------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   SCREEN_SIZE =	64	;(VSy)
     10  f000		       00 07	   CAR_SIZE   =	7
     11  f000		       00 07	   TRAFFIC_SIZE =	7	; For now, we can make it random later to simulate bigger cars
     12  f000		       00 02	   TRAFFIC_LINE_COUNT =	2
     13  f000		       00 0a	   CAR_0_Y    =	10
     14  f000							;16 bit precision
     15  f000							;640 max speed!
     16  f000		       00 02	   CAR_MAX_SPEED_H =	$02
     17  f000		       00 80	   CAR_MAX_SPEED_L =	$80
     18  f000		       00 00	   CAR_MIN_SPEED_H =	0
     19  f000		       00 00	   CAR_MIN_SPEED_L =	0
     20  f000		       00 00	   BACKGROUND_COLOR =	$00	;Black
     21  f000		       00 1c	   PLAYER_1_COLOR =	$1C	;Yellow
     22  f000		       00 01	   ACCELERATE_SPEED =	1
     23  f000		       00 03	   BREAK_SPEED =	3
     24  f000		       00 10	   ROM_START_MSB =	$10
     25  f000
     26  f000							;memory	
     27  f000		       00 80	   Car0Line   =	$80
     28  f000
     29  f000		       00 81	   GRP0Cache  =	$81
     30  f000		       00 82	   PF0Cache   =	$82
     31  f000		       00 83	   PF1Cache   =	$83
     32  f000		       00 84	   PF2Cache   =	$84
     33  f000
     34  f000		       00 86	   FrameCount0 =	$86	;
     35  f000		       00 87	   FrameCount1 =	$87	;
     36  f000
     37  f000		       00 88	   Car0SpeedL =	$88
     38  f000		       00 89	   Car0SpeedH =	$89
     39  f000
     40  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit)
     41  f000		       00 93	   TrafficOffset1 =	$93	; Traffic 1 $94 $95 (24 bit)
     42  f000
     43  f000							;Temporary variables, multiple uses
     44  f000		       00 a0	   Tmp0       =	$A0
     45  f000		       00 a1	   Tmp1       =	$A1
     46  f000		       00 a2	   Tmp2       =	$A2
     47  f000		       00 a3	   rand       =	$A3
     48  f000		       00 a4	   rand16     =	$A4
     49  f000
     50  f000		       00 c0	   GameStatus =	$C0	; Flags, D7 = running, expect more flags
     51  f000
     52  f000							;generic start up stuff, put zero in all...
     53  f000				   Start
     54  f000		       78		      SEI
     55  f001		       d8		      CLD
     56  f002		       a2 ff		      LDX	#$FF
     57  f004		       9a		      TXS
     58  f005		       a9 00		      LDA	#0
     59  f007				   ClearMem
     60  f007		       95 00		      STA	0,X
     61  f009		       ca		      DEX
     62  f00a		       d0 fb		      BNE	ClearMem
     63  f00c
     64  f00c							;Setting some variables...
     65  f00c
     66  f00c		       a9 1c		      LDA	#PLAYER_1_COLOR
     67  f00e		       85 06		      STA	COLUP0
     68  f010
     69  f010		       85 a3		      STA	rand
     70  f012
     71  f012							;Temporary code, cars will be added randomily
     72  f012		       a9 0a		      LDA	#10
     73  f014		       85 93		      STA	TrafficOffset1	;Initial Y Position
     74  f016
     75  f016		       85 a4		      STA	rand16
     76  f018
     77  f018							;Extract to subrotine? Used also dor the offsets
     78  f018		       a9 00		      LDA	#CAR_MIN_SPEED_L
     79  f01a		       85 88		      STA	Car0SpeedL
     80  f01c		       a9 00		      LDA	#CAR_MIN_SPEED_H
     81  f01e		       85 89		      STA	Car0SpeedH
     82  f020
     83  f020							;Traffic colour
     84  f020		       a5 32		      LDA	$32
     85  f022		       85 08		      STA	COLUPF
     86  f024
     87  f024							;mirror the playfield
     88  f024		       a9 01		      LDA	#%00000001
     89  f026		       85 0a		      STA	CTRLPF
     90  f028
     91  f028							;VSYNC time
     92  f028				   MainLoop
     93  f028		       a9 02		      LDA	#2
     94  f02a		       85 00		      STA	VSYNC
     95  f02c		       85 02		      STA	WSYNC
     96  f02e		       85 02		      STA	WSYNC
     97  f030							;Cool, can put code here! It removed the black line on top
     98  f030							;Make Objects move in the X axys
     99  f030		       85 2a		      STA	HMOVE	;2
    100  f032							;This must be done after a WSync, otherwise it is impossible to predict the X position
    101  f032		       a5 c0		      LDA	GameStatus	;3
    102  f034		       49 80		      EOR	#%10000000	;2 game running, we get 0 and not reset the position.
    103  f036		       f0 12		      BEQ	DoNotSetPlayerX	;3
    104  f038							;Do something better with this 32 cycles
      0  f038					      SLEEP	32	;
      1  f038				   .CYCLES    SET	32
      2  f038
      3  f038				  -	      IF	.CYCLES < 2
      4  f038				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f038				  -	      ERR
      6  f038					      ENDIF
      7  f038
      8  f038				  -	      IF	.CYCLES & 1
      9  f038				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f038				  -	      nop	0
     11  f038				  -	      ELSE
     12  f038				  -	      bit	VSYNC
     13  f038				  -	      ENDIF
     14  f038				  -.CYCLES    SET	.CYCLES - 3
     15  f038					      ENDIF
     16  f038
     17  f038					      REPEAT	.CYCLES / 2
     18  f038		       ea		      nop
     17  f038					      REPEND
     18  f039		       ea		      nop
     17  f039					      REPEND
     18  f03a		       ea		      nop
     17  f03a					      REPEND
     18  f03b		       ea		      nop
     17  f03b					      REPEND
     18  f03c		       ea		      nop
     17  f03c					      REPEND
     18  f03d		       ea		      nop
     17  f03d					      REPEND
     18  f03e		       ea		      nop
     17  f03e					      REPEND
     18  f03f		       ea		      nop
     17  f03f					      REPEND
     18  f040		       ea		      nop
     17  f040					      REPEND
     18  f041		       ea		      nop
     17  f041					      REPEND
     18  f042		       ea		      nop
     17  f042					      REPEND
     18  f043		       ea		      nop
     17  f043					      REPEND
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     19  f048					      REPEND
    106  f048		       85 10		      STA	RESP0	;3
    107  f04a				   DoNotSetPlayerX
    108  f04a
    109  f04a		       85 02		      STA	WSYNC
    110  f04c		       a9 2b		      LDA	#43
    111  f04e		       8d 96 02 	      STA	TIM64T
    112  f051		       a9 00		      LDA	#0
    113  f053		       85 00		      STA	VSYNC
    114  f055
    115  f055							;Read Fire Button before, will make it start the game for now.
    116  f055		       a5 0c		      LDA	INPT4
    117  f057		       30 06		      BMI	SkipGameStart	;not pressed the fire button in negative in bit 7
    118  f059		       a5 c0		      LDA	GameStatus
    119  f05b		       09 80		      ORA	#%10000000
    120  f05d		       85 c0		      STA	GameStatus
    121  f05f				   SkipGameStart
    122  f05f
    123  f05f							;Does not update the game if not running
    124  f05f		       a5 c0		      LDA	GameStatus	;3
    125  f061		       49 80		      EOR	#%10000000	;2 game is running...
    126  f063		       f0 03		      BEQ	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    127  f065		       4c 19 f1 	      JMP	SkipUpdateLogic
    128  f068
    129  f068				   ContinueWithGameLogic
    130  f068
    131  f068							; for left and right, we're gonna 
    132  f068							; set the horizontal speed, and then do
    133  f068							; a single HMOVE.  We'll use X to hold the
    134  f068							; horizontal speed, then store it in the 
    135  f068							; appropriate register
    136  f068
    137  f068							;assum horiz speed will be zero
    138  f068
    139  f068							;Begin read dpad
    140  f068		       a2 00		      LDX	#0
    141  f06a
    142  f06a		       a9 40		      LDA	#%01000000	;Left
    143  f06c		       2c 80 02 	      BIT	SWCHA
    144  f06f		       d0 02		      BNE	SkipMoveLeft
    145  f071		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    146  f073				   SkipMoveLeft
    147  f073
    148  f073		       a9 80		      LDA	#%10000000	;Right
    149  f075		       2c 80 02 	      BIT	SWCHA
    150  f078		       d0 02		      BNE	SkipMoveRight
    151  f07a		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    152  f07c				   SkipMoveRight
    153  f07c
    154  f07c		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    155  f07e
    156  f07e
    157  f07e							;Acelerates / breaks the car
    158  f07e		       a9 10		      LDA	#%00010000	;UP in controller
    159  f080		       2c 80 02 	      BIT	SWCHA
    160  f083		       d0 24		      BNE	SkipAccelerate
    161  f085
    162  f085							;Adds speed
    163  f085		       20 87 f1 	      JSR	Randomize
    164  f088		       18		      CLC
    165  f089		       a5 88		      LDA	Car0SpeedL
    166  f08b		       69 01		      ADC	#ACCELERATE_SPEED
    167  f08d		       85 88		      STA	Car0SpeedL
    168  f08f		       a5 89		      LDA	Car0SpeedH
    169  f091		       69 00		      ADC	#0
    170  f093		       85 89		      STA	Car0SpeedH
    171  f095
    172  f095							;Checks if already max
    173  f095		       c9 02		      CMP	#CAR_MAX_SPEED_H
    174  f097		       90 10		      BCC	SkipAccelerate	; less than my max speed
    175  f099		       d0 06		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    176  f09b							;High bit is max, compare the low
    177  f09b		       a5 88		      LDA	Car0SpeedL
    178  f09d		       c9 80		      CMP	#CAR_MAX_SPEED_L
    179  f09f		       90 08		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    180  f0a1							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    181  f0a1
    182  f0a1				   ResetToMaxSpeed		; Speed is more, or is already max
    183  f0a1		       a9 02		      LDA	#CAR_MAX_SPEED_H
    184  f0a3		       85 89		      STA	Car0SpeedH
    185  f0a5		       a9 80		      LDA	#CAR_MAX_SPEED_L
    186  f0a7		       85 88		      STA	Car0SpeedL
    187  f0a9
    188  f0a9				   SkipAccelerate
    189  f0a9
    190  f0a9							;Break
    191  f0a9		       a9 20		      LDA	#%00100000	;Down in controller
    192  f0ab		       2c 80 02 	      BIT	SWCHA
    193  f0ae		       d0 26		      BNE	SkipBreak
    194  f0b0
    195  f0b0							;Decrease speed
    196  f0b0		       38		      SEC
    197  f0b1		       a5 88		      LDA	Car0SpeedL
    198  f0b3		       e9 03		      SBC	#BREAK_SPEED
    199  f0b5		       85 88		      STA	Car0SpeedL
    200  f0b7		       a5 89		      LDA	Car0SpeedH
    201  f0b9		       e9 00		      SBC	#0
    202  f0bb		       85 89		      STA	Car0SpeedH
    203  f0bd
    204  f0bd							;Checks if is min speed
    205  f0bd		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    206  f0bf		       c9 00		      CMP	#CAR_MIN_SPEED_H
    207  f0c1		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    208  f0c3		       b0 11		      BCS	SkipBreak	; Greater than min, we are ok! 
    209  f0c5
    210  f0c5				   CompareLBreakSpeed
    211  f0c5		       a5 88		      LDA	Car0SpeedL
    212  f0c7		       c9 00		      CMP	#CAR_MIN_SPEED_L
    213  f0c9		       90 03		      BCC	ResetMinSpeed	; Less than memory
    214  f0cb		       4c d6 f0 	      JMP	SkipBreak	; We are greather than min speed in the low byte.
    215  f0ce
    216  f0ce				   ResetMinSpeed
    217  f0ce		       a9 00		      LDA	#CAR_MIN_SPEED_H
    218  f0d0		       85 89		      STA	Car0SpeedH
    219  f0d2		       a9 00		      LDA	#CAR_MIN_SPEED_L
    220  f0d4		       85 88		      STA	Car0SpeedL
    221  f0d6
    222  f0d6				   SkipBreak
    223  f0d6
    224  f0d6							;Temporary code until cars are dynamic, will make it wrap
    225  f0d6							;LDA TrafficOffset1
    226  f0d6							;AND #%00111111
    227  f0d6							;STA TrafficOffset1
    228  f0d6
    229  f0d6							;Finish read dpad
    230  f0d6
    231  f0d6
    232  f0d6							;Updates all offsets 24 bits
    233  f0d6		       a2 00		      LDX	#0	; Memory Offset 24 bit
    234  f0d8		       a0 00		      LDY	#0	; Line Speeds 16 bits
    235  f0da				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    236  f0da		       38		      SEC
    237  f0db		       a5 88		      LDA	Car0SpeedL
    238  f0dd		       f9 9c f1 	      SBC	TrafficSpeeds,Y
    239  f0e0		       85 a0		      STA	Tmp0
    240  f0e2		       c8		      INY
    241  f0e3		       a5 89		      LDA	Car0SpeedH
    242  f0e5		       f9 9c f1 	      SBC	TrafficSpeeds,Y
    243  f0e8		       85 a1		      STA	Tmp1
    244  f0ea		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    245  f0ec		       e9 00		      SBC	#0
    246  f0ee		       85 a2		      STA	Tmp2
    247  f0f0
    248  f0f0
    249  f0f0							;Adds the result
    250  f0f0		       18		      CLC
    251  f0f1		       a5 a0		      LDA	Tmp0
    252  f0f3		       75 90		      ADC	TrafficOffset0,X
    253  f0f5		       95 90		      STA	TrafficOffset0,X
    254  f0f7		       e8		      INX
    255  f0f8		       a5 a1		      LDA	Tmp1
    256  f0fa		       75 90		      ADC	TrafficOffset0,X
    257  f0fc		       95 90		      STA	TrafficOffset0,X
    258  f0fe		       e8		      INX
    259  f0ff		       a5 a2		      LDA	Tmp2	; Carry
    260  f101		       75 90		      ADC	TrafficOffset0,X
    261  f103		       95 90		      STA	TrafficOffset0,X
    262  f105
    263  f105
    264  f105				   PrepareNextUpdateLoop
    265  f105		       c8		      INY
    266  f106		       e8		      INX
    267  f107		       e0 06		      CPX	#TRAFFIC_LINE_COUNT * 3	;
    268  f109		       d0 cf		      BNE	UpdateOffsets
    269  f10b
    270  f10b							;Will probably be useful		
    271  f10b				   CountFrame
    272  f10b		       e6 86		      INC	FrameCount0
    273  f10d		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    274  f10f		       e6 87		      INC	FrameCount1
    275  f111				   SkipIncFC1
    276  f111
    277  f111
    278  f111				   TestCollision		;
    279  f111							; see if car0 and playfield collide, and change the background color if so
    280  f111		       a9 80		      LDA	#%10000000
    281  f113		       24 02		      BIT	CXP0FB
    282  f115		       f0 00		      BEQ	NoCollision	;skip if not hitting...
    283  f117							;LDA FrameCount0	;must be a hit! Change rand color bg
    284  f117							;STA COLUBK	;and store as the bgcolor
    285  f117				   NoCollision
    286  f117		       85 2c		      STA	CXCLR	;reset the collision detection for next frame
    287  f119							; LDA #0		 ;zero out the buffer
    288  f119							; STA PlayerBuffer ;just in case
    289  f119
    290  f119				   SkipUpdateLogic
    291  f119
    292  f119							; After here we are going to update the screen, No more heavy code
    293  f119				   WaitForVblankEnd
    294  f119		       ad 84 02 	      LDA	INTIM
    295  f11c		       d0 fb		      BNE	WaitForVblankEnd	;Is there a better way?	
    296  f11e
    297  f11e		       a0 3f		      LDY	#SCREEN_SIZE - 1	;#63 ; 	
    298  f120		       85 02		      STA	WSYNC
    299  f122
    300  f122		       a9 01		      LDA	#1
    301  f124		       85 01		      STA	VBLANK
    302  f126
    303  f126
    304  f126							;main scanline loop...
    305  f126				   ScanLoop
    306  f126		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    307  f128
    308  f128							;Start of next line!			
    309  f128				   DrawCache		;24 Is the last line going to the top of the next frame?
    310  f128
    311  f128		       a5 81		      LDA	GRP0Cache	;3 ;buffer was set during last scanline
    312  f12a		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    313  f12c
    314  f12c		       a5 82		      LDA	PF0Cache	;3
    315  f12e		       85 0d		      STA	PF0	;3
    316  f130
    317  f130		       a5 83		      LDA	PF1Cache	;3
    318  f132		       85 0e		      STA	PF1	;3
    319  f134
    320  f134		       a5 84		      LDA	PF2Cache	;3
    321  f136		       85 0f		      STA	PF2	;3
    322  f138
    323  f138
    324  f138				   ClearCache		;11 Only the playfields
    325  f138		       a9 00		      LDA	#$0	;2 ;Clear cache
    326  f13a		       85 83		      STA	PF1Cache	;3
    327  f13c		       85 84		      STA	PF2Cache	; 3
    328  f13e		       85 82		      STA	PF0Cache	; 3
    329  f140
    330  f140				   DrawTraffic0 		; 16 max, traffic 0 is the border
    331  f140		       98		      TYA		;2
    332  f141		       18		      CLC		;2
    333  f142		       65 91		      ADC	TrafficOffset0 + 1
    334  f144		       29 04		      AND	#%00000100	;2 Every 8 game lines, draw the border
    335  f146		       f0 04		      BEQ	SkipDrawTraffic0	; 2 
    336  f148		       a9 70		      LDA	#%01110000	; 2
    337  f14a		       85 82		      STA	PF0Cache	;3
    338  f14c				   SkipDrawTraffic0
    339  f14c
    340  f14c							;51
    341  f14c
    342  f14c		       85 02		      STA	WSYNC	;73
    343  f14e
    344  f14e
    345  f14e				   DrawTraffic1 		; 17 Max, will be more
    346  f14e							;TYA; 2
    347  f14e							;CLC; 2 
    348  f14e							;ADC TrafficOffset1 + 1;3
    349  f14e							;STA rand16
    350  f14e							;LDA #0 ;2
    351  f14e							;ADC TrafficOffset1 + 2;3
    352  f14e							;LDA #56
    353  f14e							;STA rand
    354  f14e
    355  f14e		       a5 a3		      LDA	rand
    356  f150		       85 83		      STA	PF1Cache	;3
    357  f152		       a5 a4		      LDA	rand16
    358  f154		       85 84		      STA	PF2Cache	;3
    359  f156
    360  f156				   FinishDrawTrafficLine1
    361  f156
    362  f156		       85 02		      STA	WSYNC	;49
    363  f158
    364  f158				   BeginDrawCar0Block		;21 is the max, since if draw, does not check active
    365  f158		       a6 80		      LDX	Car0Line	;3 check the visible player line...
    366  f15a		       f0 0a		      BEQ	FinishDrawCar0	;2	skip the drawing if its zero...
    367  f15c				   DrawCar0
    368  f15c		       bd 94 f1 	      LDA	CarSprite-1,X	;5	;otherwise, load the correct line from CarSprite
    369  f15f							;section below... it's off by 1 though, since at zero
    370  f15f							;we stop drawing
    371  f15f		       85 81		      STA	GRP0Cache	;3	;put that line as player graphic for the next line
    372  f161		       c6 80		      DEC	Car0Line	;5	and decrement the line count
    373  f163		       4c 6e f1 	      JMP	SkipActivateCar0	;3 save some cpu time
    374  f166				   FinishDrawCar0
    375  f166
    376  f166				   CheckActivateCar0		;9 max
    377  f166		       c0 0a		      CPY	#CAR_0_Y	;2
    378  f168		       d0 04		      BNE	SkipActivateCar0	;2
    379  f16a		       a9 07		      LDA	#CAR_SIZE	;2
    380  f16c		       85 80		      STA	Car0Line	;3
    381  f16e				   SkipActivateCar0		;EndDrawCar0Block
    382  f16e
    383  f16e
    384  f16e							;STA WSYNC ;3
    385  f16e
    386  f16e				   WhileScanLoop
    387  f16e		       88		      DEY		;2
    388  f16f		       30 03		      BMI	FinishScanLoop	;2 or 3 ;two big Breach	
    389  f171		       4c 26 f1 	      JMP	ScanLoop	;3
    390  f174				   FinishScanLoop
    391  f174
    392  f174
    393  f174				   PrepareOverscan
    394  f174		       a9 02		      LDA	#2
    395  f176		       85 02		      STA	WSYNC
    396  f178		       85 01		      STA	VBLANK
    397  f17a
    398  f17a		       a9 25		      LDA	#37
    399  f17c		       8d 96 02 	      STA	TIM64T
    400  f17f							;LDA #0
    401  f17f							;STA VSYNC Is it needed? Why is this here, I don't remember		
    402  f17f
    403  f17f							;Do more logic
    404  f17f
    405  f17f				   OverScanWait
    406  f17f		       ad 84 02 	      LDA	INTIM
    407  f182		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
    408  f184		       4c 28 f0 	      JMP	MainLoop
    409  f187
    410  f187				   Randomize		; Subrotine From https://atariage.com/forums/topic/159268-random-numbers/
    411  f187		       a5 a3		      lda	rand
    412  f189		       4a		      lsr
    413  f18a		       26 a4		      rol	rand16
    414  f18c		       90 02		      bcc	noeor
    415  f18e		       49 b4		      eor	#$B4
    416  f190				   noeor
    417  f190		       85 a3		      sta	rand
    418  f192		       45 a4		      eor	rand16
    419  f194		       60		      rts
    420  f195
    421  f195				   CarSprite		; Upside down
    422  f195		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    423  f196		       ff		      .byte.b	#%11111111
    424  f197		       24		      .byte.b	#%00100100
    425  f198		       bd		      .byte.b	#%10111101
    426  f199		       3c		      .byte.b	#%00111100
    427  f19a		       bd		      .byte.b	#%10111101
    428  f19b		       3c		      .byte.b	#%00111100
    429  f19c
    430  f19c
    431  f19c				   TrafficSpeeds		;maybe move to ram for dynamic changes of speed and 0 page access
    432  f19c		       00		      .byte.b	#0	;   Border L
    433  f19d		       00		      .byte.b	#0	;   Border H
    434  f19e		       a0		      .byte.b	#$A0	; Trafic1 L
    435  f19f		       00		      .byte.b	#0	;   Trafic1 H
    436  f1a0
    437  fffc					      org	$FFFC
    438  fffc		       00 f0		      .word.w	Start
    439  fffe		       00 f0		      .word.w	Start
