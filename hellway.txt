------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 40	   ScreenSize =	64	;(192)
     10  f000		       00 07	   CarSize    =	7
     11  f000		       00 07	   TraficSize =	7	; For now, we can make it random later to simulate bigger cars
     12  f000		       00 02	   TrafficLineCount =	2
     13  f000		       00 0a	   Car0Y      =	10
     14  f000		       00 ff	   CarMaxSpeed =	255
     15  f000		       00 00	   CarMinSpeed =	0
     16  f000		       00 00	   BackgroundColor =	$00	;Black
     17  f000		       00 1c	   Player1Color =	$1C	;Yellow
     18  f000		       00 03	   BreakSpeed =	3
     19  f000		       00 02	   SpeedMultiplier =	2	; Expensive, add X time the car speeds! Needs optimization
     20  f000
     21  f000							;memory	
     22  f000		       00 80	   Car0Line   =	$80
     23  f000
     24  f000		       00 81	   GRP0Cache  =	$81
     25  f000		       00 82	   PF0Cache   =	$82
     26  f000		       00 83	   PF1Cache   =	$83
     27  f000		       00 84	   PF2Cache   =	$84
     28  f000
     29  f000		       00 86	   FrameCount0 =	$86	;
     30  f000		       00 87	   FrameCount1 =	$87	;
     31  f000		       00 88	   Car0Speed  =	$88
     32  f000
     33  f000		       00 90	   TrafficOffset0 =	$90	; Border
     34  f000		       00 91	   TrafficOffset1 =	$91	; First traffic car
     35  f000
     36  f000		       00 a0	   Traffic1Line =	$A0	; Line currently draw from car, the border do not need it
     37  f000
     38  f000		       00 b0	   Traffic0Acc =	$B0	; Keep adding or subtracting until overflows, this means change line
     39  f000		       00 b1	   Traffic1Acc =	$B1
     40  f000
     41  f000							;generic start up stuff, put zero in all...
     42  f000				   Start
     43  f000		       78		      SEI
     44  f001		       d8		      CLD
     45  f002		       a2 ff		      LDX	#$FF
     46  f004		       9a		      TXS
     47  f005		       a9 00		      LDA	#0
     48  f007				   ClearMem
     49  f007		       95 00		      STA	0,X
     50  f009		       ca		      DEX
     51  f00a		       d0 fb		      BNE	ClearMem
     52  f00c
     53  f00c							;Setting some variables...
     54  f00c
     55  f00c		       a9 1c		      LDA	#Player1Color
     56  f00e		       85 06		      STA	COLUP0
     57  f010
     58  f010							;Temporary code, cars will be added randomily
     59  f010		       a9 0a		      LDA	#10
     60  f012		       85 91		      STA	TrafficOffset1	;Initial Y Position
     61  f014
     62  f014		       a9 00		      LDA	#CarMinSpeed
     63  f016		       85 88		      STA	Car0Speed
     64  f018
     65  f018							;Traffic colour
     66  f018		       a5 32		      LDA	$32
     67  f01a		       85 08		      STA	COLUPF
     68  f01c
     69  f01c							;mirror the playfield
     70  f01c		       a9 01		      LDA	#%00000001
     71  f01e		       85 0a		      STA	CTRLPF
     72  f020
     73  f020							;VSYNC time
     74  f020				   MainLoop
     75  f020		       a9 02		      LDA	#2
     76  f022		       85 00		      STA	VSYNC
     77  f024		       85 02		      STA	WSYNC
     78  f026		       85 02		      STA	WSYNC
     79  f028							;Cool, can put code here! It removed the black line on top 
     80  f028		       85 2a		      STA	HMOVE
     81  f02a		       85 02		      STA	WSYNC
     82  f02c		       a9 2b		      LDA	#43
     83  f02e		       8d 96 02 	      STA	TIM64T
     84  f031		       a9 00		      LDA	#0
     85  f033		       85 00		      STA	VSYNC
     86  f035
     87  f035
     88  f035							; for left and right, we're gonna 
     89  f035							; set the horizontal speed, and then do
     90  f035							; a single HMOVE.  We'll use X to hold the
     91  f035							; horizontal speed, then store it in the 
     92  f035							; appropriate register
     93  f035
     94  f035							;assum horiz speed will be zero
     95  f035
     96  f035							;Begin read controlers
     97  f035		       a2 00		      LDX	#0
     98  f037
     99  f037		       a9 40		      LDA	#%01000000	;Left?
    100  f039		       2c 80 02 	      BIT	SWCHA
    101  f03c		       d0 02		      BNE	SkipMoveLeft
    102  f03e		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    103  f040				   SkipMoveLeft
    104  f040
    105  f040		       a9 80		      LDA	#%10000000	;Right?
    106  f042		       2c 80 02 	      BIT	SWCHA
    107  f045		       d0 02		      BNE	SkipMoveRight
    108  f047		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    109  f049				   SkipMoveRight
    110  f049
    111  f049		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    112  f04b
    113  f04b
    114  f04b							;Acelerates / breaks the car
    115  f04b		       a9 10		      LDA	#%00010000	;UP in controller
    116  f04d		       2c 80 02 	      BIT	SWCHA
    117  f050		       d0 08		      BNE	SkipAccelerate
    118  f052		       a5 88		      LDA	Car0Speed
    119  f054		       c9 ff		      CMP	#CarMaxSpeed
    120  f056		       f0 02		      BEQ	SkipAccelerate	;Already at max
    121  f058		       e6 88		      INC	Car0Speed	;
    122  f05a				   SkipAccelerate
    123  f05a		       a9 20		      LDA	#%00100000	;Down in controller
    124  f05c		       2c 80 02 	      BIT	SWCHA
    125  f05f		       d0 12		      BNE	SkipBreak
    126  f061		       a5 88		      LDA	Car0Speed
    127  f063		       38		      SEC
    128  f064		       e9 03		      SBC	#BreakSpeed
    129  f066		       90 07		      BCC	LoadMinSpeed	; Negative overflow
    130  f068		       c9 00		      CMP	#CarMinSpeed
    131  f06a		       90 03		      BCC	LoadMinSpeed	; Less than memory
    132  f06c		       4c 71 f0 	      JMP	SpeedAfterBreak
    133  f06f
    134  f06f				   LoadMinSpeed 		; Underflow or less than min
    135  f06f		       a9 00		      LDA	#CarMinSpeed
    136  f071
    137  f071				   SpeedAfterBreak
    138  f071		       85 88		      STA	Car0Speed
    139  f073				   SkipBreak
    140  f073
    141  f073							;Temporary code until cars are dynamic, will make it wrap
    142  f073		       a5 91		      LDA	TrafficOffset1
    143  f075		       29 3f		      AND	#%00111111
    144  f077		       85 91		      STA	TrafficOffset1
    145  f079
    146  f079
    147  f079							;Finish read controlers
    148  f079
    149  f079							;Calculate the relative speeds and update offsets
    150  f079		       a0 02		      LDY	#SpeedMultiplier	; Ads the speed again, makes the games run faster,needs optimiztion
    151  f07b				   RepeatUpdateLines		;to be able to rum more than one line at a time
    152  f07b		       a2 02		      LDX	#TrafficLineCount
    153  f07d				   UpdateLines
    154  f07d		       a5 88		      LDA	Car0Speed
    155  f07f		       dd 37 f1 	      CMP	TrafficSpeeds-1,X
    156  f082		       90 10		      BCC	TrafficIsFaster	;See 6502 specs, jump if the car is slower than traffic
    157  f084				   PlayerIsFaster
    158  f084		       38		      SEC
    159  f085		       fd 37 f1 	      SBC	TrafficSpeeds-1,X
    160  f088		       18		      CLC
    161  f089		       75 af		      ADC	Traffic0Acc-1,X
    162  f08b		       95 af		      STA	Traffic0Acc-1,X
    163  f08d		       90 14		      BCC	PrepareNextUpdateLoop	; Change the offset only when there is a carry!
    164  f08f		       d6 8f		      DEC	TrafficOffset0-1,X
    165  f091		       4c a3 f0 	      JMP	PrepareNextUpdateLoop
    166  f094				   TrafficIsFaster
    167  f094		       bd 37 f1 	      LDA	TrafficSpeeds-1,X
    168  f097		       38		      SEC
    169  f098		       e5 88		      SBC	Car0Speed
    170  f09a		       18		      CLC
    171  f09b		       75 af		      ADC	Traffic0Acc-1,X
    172  f09d		       95 af		      STA	Traffic0Acc-1,X
    173  f09f		       90 02		      BCC	PrepareNextUpdateLoop	; Change the offset only when there is a carry!
    174  f0a1		       f6 8f		      INC	TrafficOffset0-1,X
    175  f0a3				   PrepareNextUpdateLoop
    176  f0a3		       ca		      DEX
    177  f0a4		       d0 d7		      BNE	UpdateLines
    178  f0a6		       88		      DEY
    179  f0a7		       d0 d2		      BNE	RepeatUpdateLines
    180  f0a9
    181  f0a9							;Will probably be useful		
    182  f0a9				   CountFrame
    183  f0a9		       e6 86		      INC	FrameCount0
    184  f0ab		       d0 02		      BNE	SkipIncFC1	;When it is zero again should increase the MSB
    185  f0ad		       e6 87		      INC	FrameCount1
    186  f0af				   SkipIncFC1
    187  f0af
    188  f0af
    189  f0af				   TestCollision		;
    190  f0af							; see if car0 and playfield collide, and change the background color if so
    191  f0af		       a9 80		      LDA	#%10000000
    192  f0b1		       24 02		      BIT	CXP0FB
    193  f0b3		       f0 04		      BEQ	NoCollision	;skip if not hitting...
    194  f0b5		       a5 86		      LDA	FrameCount0	;must be a hit! Change rand color bg
    195  f0b7		       85 09		      STA	COLUBK	;and store as the bgcolor
    196  f0b9				   NoCollision
    197  f0b9		       85 2c		      STA	CXCLR	;reset the collision detection for next frame
    198  f0bb							; LDA #0		 ;zero out the buffer
    199  f0bb							; STA PlayerBuffer ;just in case
    200  f0bb
    201  f0bb							; After here we are going to update the screen, No more heavy code
    202  f0bb				   WaitForVblankEnd
    203  f0bb		       ad 84 02 	      LDA	INTIM
    204  f0be		       d0 fb		      BNE	WaitForVblankEnd
    205  f0c0
    206  f0c0		       a0 3f		      LDY	#ScreenSize - 1	;#63 ; 	
    207  f0c2		       85 02		      STA	WSYNC
    208  f0c4
    209  f0c4		       85 01		      STA	VBLANK
    210  f0c6
    211  f0c6
    212  f0c6							;main scanline loop...
    213  f0c6				   ScanLoop
    214  f0c6		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    215  f0c8
    216  f0c8							;Start of next line!			
    217  f0c8				   DrawCache		;24
    218  f0c8
    219  f0c8		       a5 81		      LDA	GRP0Cache	;3 ;buffer was set during last scanline
    220  f0ca		       85 1b		      STA	GRP0	;3   ;put it as graphics now
    221  f0cc
    222  f0cc		       a5 82		      LDA	PF0Cache	;3
    223  f0ce		       85 0d		      STA	PF0	;3
    224  f0d0
    225  f0d0		       a5 83		      LDA	PF1Cache	;3
    226  f0d2		       85 0e		      STA	PF1	;3
    227  f0d4
    228  f0d4		       a5 84		      LDA	PF2Cache	;3
    229  f0d6		       85 0f		      STA	PF2	;3
    230  f0d8
    231  f0d8
    232  f0d8				   ClearCache		;11 Only the playfields
    233  f0d8		       a9 00		      LDA	#$0	;2 ;Clear cache
    234  f0da		       85 83		      STA	PF1Cache	;3
    235  f0dc		       85 84		      STA	PF2Cache	; 3
    236  f0de		       85 82		      STA	PF0Cache	; 3
    237  f0e0
    238  f0e0				   DrawTraffic0 		; 16 max, traffic 0 is the border
    239  f0e0		       e6 90		      INC	TrafficOffset0	; 5 Make the shape change per line;
    240  f0e2		       a5 90		      LDA	TrafficOffset0	; 3
    241  f0e4		       29 04		      AND	#%00000100	;2 Every 8 game lines, draw the border
    242  f0e6		       f0 04		      BEQ	SkipDrawTraffic0	; 2 
    243  f0e8		       a9 70		      LDA	#%01110000	; 2
    244  f0ea		       85 82		      STA	PF0Cache	;3
    245  f0ec				   SkipDrawTraffic0
    246  f0ec
    247  f0ec							;51
    248  f0ec
    249  f0ec		       85 02		      STA	WSYNC	;73
    250  f0ee
    251  f0ee				   BeginDrawTraffic1		; 15 max 
    252  f0ee		       a6 a0		      LDX	Traffic1Line	;3 check first car visible
    253  f0f0		       f0 06		      BEQ	FinishDrawTrafficLine1	;2	skip the drawing if its zero...
    254  f0f2				   DrawTraffic1 		;
    255  f0f2							;LDA PF1Cache ;3
    256  f0f2							;ORA #%11000000 ;2 
    257  f0f2		       a9 c0		      LDA	#%11000000	;2
    258  f0f4		       85 83		      STA	PF1Cache	;3
    259  f0f6		       c6 a0		      DEC	Traffic1Line	; 5
    260  f0f8				   FinishDrawTrafficLine1
    261  f0f8
    262  f0f8				   CheckActivateTraffic1		;10 max,
    263  f0f8		       c4 91		      CPY	TrafficOffset1	;3
    264  f0fa		       d0 04		      BNE	SkipActivateTraffic1	;2
    265  f0fc		       a9 07		      LDA	#TraficSize	;2
    266  f0fe		       85 a0		      STA	Traffic1Line	; 3
    267  f100				   SkipActivateTraffic1 		;EndDrawCar0Block
    268  f100
    269  f100		       85 02		      STA	WSYNC	;49
    270  f102
    271  f102				   BeginDrawCar0Block		;21 is the max, since if draw, does ot check active
    272  f102		       a6 80		      LDX	Car0Line	;3 check the visible player line...
    273  f104		       f0 0a		      BEQ	FinishDrawCar0	;2	skip the drawing if its zero...
    274  f106				   DrawCar0
    275  f106		       bd 30 f1 	      LDA	CarSprite-1,X	;5	;otherwise, load the correct line from CarSprite
    276  f109							;section below... it's off by 1 though, since at zero
    277  f109							;we stop drawing
    278  f109		       85 81		      STA	GRP0Cache	;3	;put that line as player graphic for the next line
    279  f10b		       c6 80		      DEC	Car0Line	;5	;and decrement the line count
    280  f10d		       4c 18 f1 	      JMP	SkipActivateCar0	;3 save some cpu time
    281  f110				   FinishDrawCar0
    282  f110
    283  f110				   CheckActivateCar0		;9 max
    284  f110		       c0 0a		      CPY	#Car0Y	;2
    285  f112		       d0 04		      BNE	SkipActivateCar0	;2
    286  f114		       a9 07		      LDA	#CarSize	;2
    287  f116		       85 80		      STA	Car0Line	;3
    288  f118				   SkipActivateCar0		;EndDrawCar0Block
    289  f118
    290  f118
    291  f118							;STA WSYNC ;3
    292  f118
    293  f118				   WhileScanLoop
    294  f118		       88		      DEY		;2
    295  f119		       30 03		      BMI	FinishScanLoop	;2 or 3 ;two big Breach	
    296  f11b		       4c c6 f0 	      JMP	ScanLoop	;3
    297  f11e				   FinishScanLoop
    298  f11e
    299  f11e
    300  f11e				   PrepareOverscan
    301  f11e		       a9 02		      LDA	#2
    302  f120		       85 02		      STA	WSYNC
    303  f122		       85 01		      STA	VBLANK
    304  f124
    305  f124		       a9 25		      LDA	#37
    306  f126		       8d 96 02 	      STA	TIM64T
    307  f129							;LDA #0
    308  f129							;STA VSYNC		
    309  f129
    310  f129							;Do more logic
    311  f129
    312  f129				   OverScanWait
    313  f129		       ad 84 02 	      LDA	INTIM
    314  f12c		       d0 fb		      BNE	OverScanWait
    315  f12e		       4c 20 f0 	      JMP	MainLoop
    316  f131
    317  f131				   CarSprite		; Upside down
    318  f131		       00		      .byte.b	#%00000000	; Easist way to stop drawing
    319  f132		       ff		      .byte.b	#%11111111
    320  f133		       24		      .byte.b	#%00100100
    321  f134		       bd		      .byte.b	#%10111101
    322  f135		       3c		      .byte.b	#%00111100
    323  f136		       bd		      .byte.b	#%10111101
    324  f137		       3c		      .byte.b	#%00111100
    325  f138
    326  f138
    327  f138				   TrafficSpeeds		;maybe move to ram for dynamic changes and speed of 0 page access
    328  f138		       00		      .byte.b	#0	; Border
    329  f139		       28		      .byte.b	#40	; Trafic1
    330  f13a
    331  fffc					      org	$FFFC
    332  fffc		       00 f0		      .word.w	Start
    333  fffe		       00 f0		      .word.w	Start
